-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_out_V_ce0 : OUT STD_LOGIC;
    max_pool_out_V_we0 : OUT STD_LOGIC;
    max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv10_3F6 : STD_LOGIC_VECTOR (9 downto 0) := "1111110110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal mpr_0_reg_183 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_194 : STD_LOGIC_VECTOR (13 downto 0);
    signal mpc_0_reg_207 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_fu_224_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln10_reg_556 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln13_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_2_fu_250_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_2_reg_566 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln26_fu_258_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_reg_571 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_1_fu_262_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_1_reg_576 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln13_fu_312_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_reg_581 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_1_fu_328_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_1_reg_587 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_2_fu_336_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_2_reg_592 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln203_fu_348_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln203_reg_597 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln2_fu_354_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_reg_602 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln20_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln20_reg_607_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_1_fu_368_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln20_fu_386_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln20_reg_616 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln20_1_fu_394_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln20_1_reg_621 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpc_fu_402_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln29_fu_472_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal c_fu_524_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln13_3_fu_535_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal indvar_flatten25_reg_116 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_0_reg_127 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten7_reg_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_187_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1494_5_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_6_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_fu_230_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_266_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_1_fu_242_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln29_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_300_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln26_mid1_fu_320_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_3_fu_274_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln203_fu_348_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln23_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_374_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln20_fu_408_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_fu_411_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_fu_420_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_423_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_542_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_439_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_432_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1494_4_fu_446_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1494_fu_450_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_2_fu_456_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_4_fu_480_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_fu_483_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_496_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_488_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_5_fu_504_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_fu_508_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_3_fu_514_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln13_1_fu_529_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_542_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_542_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_542_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_542_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln203_fu_348_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_mac_muladd_5nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    cnn_mac_muladd_5nfYi_U9 : component cnn_mac_muladd_5nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_542_p0,
        din1 => grp_fu_542_p1,
        din2 => grp_fu_542_p2,
        dout => grp_fu_542_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln10_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln10_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                c_0_reg_161 <= c_fu_524_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_161 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                f_0_reg_127 <= select_ln29_2_reg_566;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_127 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten25_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten25_reg_116 <= add_ln10_reg_556;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten25_reg_116 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten7_reg_138 <= select_ln13_3_fu_535_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten7_reg_138 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_172 <= add_ln20_1_fu_368_p2;
            elsif (((icmp_ln10_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_172 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_1_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_reg_607_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                max_1_reg_194 <= select_ln29_fu_472_p3;
            elsif (((icmp_ln10_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_1_reg_194 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    mpc_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mpc_0_reg_207 <= mpc_fu_402_p2;
            elsif (((icmp_ln10_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpc_0_reg_207 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                mpr_0_reg_183 <= select_ln20_1_reg_621;
            elsif (((icmp_ln10_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpr_0_reg_183 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_0_reg_150 <= select_ln13_2_reg_592;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_150 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln10_reg_556 <= add_ln10_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln13_reg_561 <= icmp_ln13_fu_236_p2;
                mul_ln203_reg_597 <= mul_ln203_fu_348_p2;
                    select_ln13_1_reg_587(4 downto 1) <= select_ln13_1_fu_328_p3(4 downto 1);
                select_ln13_2_reg_592 <= select_ln13_2_fu_336_p3;
                select_ln13_reg_581 <= select_ln13_fu_312_p3;
                select_ln29_2_reg_566 <= select_ln29_2_fu_250_p3;
                    shl_ln2_reg_602(4 downto 1) <= shl_ln2_fu_354_p3(4 downto 1);
                    zext_ln26_1_reg_576(2 downto 0) <= zext_ln26_1_fu_262_p1(2 downto 0);
                    zext_ln26_reg_571(2 downto 0) <= zext_ln26_fu_258_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_reg_607 <= icmp_ln20_fu_362_p2;
                icmp_ln20_reg_607_pp0_iter1_reg <= icmp_ln20_reg_607;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln20_1_reg_621 <= select_ln20_1_fu_394_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln20_reg_616 <= select_ln20_fu_386_p3;
            end if;
        end if;
    end process;
    zext_ln26_reg_571(12 downto 3) <= "0000000000";
    zext_ln26_1_reg_576(10 downto 3) <= "00000000";
    select_ln13_1_reg_587(0) <= '0';
    shl_ln2_reg_602(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_218_p2, ap_CS_fsm_state2, icmp_ln20_fu_362_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln20_fu_362_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln20_fu_362_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_224_p2 <= std_logic_vector(unsigned(indvar_flatten25_reg_116) + unsigned(ap_const_lv10_1));
    add_ln13_1_fu_529_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_138) + unsigned(ap_const_lv8_1));
    add_ln1494_2_fu_456_p2 <= std_logic_vector(unsigned(zext_ln26_reg_571) + unsigned(sub_ln1494_fu_450_p2));
    add_ln203_3_fu_514_p2 <= std_logic_vector(unsigned(zext_ln26_1_reg_576) + unsigned(sub_ln203_fu_508_p2));
    add_ln203_fu_483_p2 <= std_logic_vector(unsigned(zext_ln203_4_fu_480_p1) + unsigned(mul_ln203_reg_597));
    add_ln20_1_fu_368_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_172) + unsigned(ap_const_lv3_1));
    add_ln20_fu_411_p2 <= std_logic_vector(unsigned(select_ln13_1_reg_587) + unsigned(zext_ln20_fu_408_p1));
    and_ln29_fu_294_p2 <= (xor_ln29_fu_282_p2 and icmp_ln16_fu_288_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln20_fu_362_p2)
    begin
        if ((icmp_ln20_fu_362_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln10_fu_218_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln10_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_187_p4_assign_proc : process(mpr_0_reg_183, icmp_ln20_reg_607, ap_CS_fsm_pp0_stage0, select_ln20_1_reg_621, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_607 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_187_p4 <= select_ln20_1_reg_621;
        else 
            ap_phi_mux_mpr_0_phi_fu_187_p4 <= mpr_0_reg_183;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln10_fu_218_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln10_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_524_p2 <= std_logic_vector(unsigned(select_ln13_reg_581) + unsigned(ap_const_lv4_1));
    conv_out_V_address0 <= zext_ln1494_5_fu_461_p1(12 - 1 downto 0);

    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_230_p2 <= std_logic_vector(unsigned(f_0_reg_127) + unsigned(ap_const_lv3_1));
    grp_fu_542_p0 <= grp_fu_542_p00(5 - 1 downto 0);
    grp_fu_542_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_fu_411_p2),10));
    grp_fu_542_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_542_p2 <= grp_fu_542_p20(5 - 1 downto 0);
    grp_fu_542_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_423_p2),10));
    icmp_ln10_fu_218_p2 <= "1" when (indvar_flatten25_reg_116 = ap_const_lv10_3F6) else "0";
    icmp_ln13_fu_236_p2 <= "1" when (indvar_flatten7_reg_138 = ap_const_lv8_A9) else "0";
    icmp_ln1494_fu_466_p2 <= "1" when (signed(conv_out_V_q0) > signed(max_1_reg_194)) else "0";
    icmp_ln16_fu_288_p2 <= "1" when (c_0_reg_161 = ap_const_lv4_D) else "0";
    icmp_ln20_fu_362_p2 <= "1" when (indvar_flatten_reg_172 = ap_const_lv3_4) else "0";
    icmp_ln23_fu_380_p2 <= "1" when (mpc_0_reg_207 = ap_const_lv2_2) else "0";
    j_fu_423_p2 <= std_logic_vector(unsigned(shl_ln2_reg_602) + unsigned(zext_ln23_fu_420_p1));
    max_pool_out_V_address0 <= zext_ln203_6_fu_519_p1(10 - 1 downto 0);

    max_pool_out_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_pool_out_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_V_d0 <= max_1_reg_194;

    max_pool_out_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_pool_out_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_402_p2 <= std_logic_vector(unsigned(select_ln20_fu_386_p3) + unsigned(ap_const_lv2_1));
    mpr_fu_374_p2 <= std_logic_vector(unsigned(ap_phi_mux_mpr_0_phi_fu_187_p4) + unsigned(ap_const_lv2_1));
    mul_ln203_fu_348_p0 <= mul_ln203_fu_348_p00(4 - 1 downto 0);
    mul_ln203_fu_348_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_fu_336_p3),8));
    mul_ln203_fu_348_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln203_fu_348_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln13_fu_306_p2 <= (icmp_ln13_fu_236_p2 or and_ln29_fu_294_p2);
    p_shl2_cast_fu_488_p3 <= (add_ln203_fu_483_p2 & ap_const_lv3_0);
    p_shl_cast_fu_432_p3 <= (grp_fu_542_p3 & ap_const_lv3_0);
    r_fu_300_p2 <= std_logic_vector(unsigned(select_ln29_1_fu_242_p3) + unsigned(ap_const_lv4_1));
    select_ln13_1_fu_328_p3 <= 
        shl_ln26_mid1_fu_320_p3 when (and_ln29_fu_294_p2(0) = '1') else 
        select_ln29_3_fu_274_p3;
    select_ln13_2_fu_336_p3 <= 
        r_fu_300_p2 when (and_ln29_fu_294_p2(0) = '1') else 
        select_ln29_1_fu_242_p3;
    select_ln13_3_fu_535_p3 <= 
        ap_const_lv8_1 when (icmp_ln13_reg_561(0) = '1') else 
        add_ln13_1_fu_529_p2;
    select_ln13_fu_312_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_306_p2(0) = '1') else 
        c_0_reg_161;
    select_ln20_1_fu_394_p3 <= 
        mpr_fu_374_p2 when (icmp_ln23_fu_380_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_187_p4;
    select_ln20_fu_386_p3 <= 
        ap_const_lv2_0 when (icmp_ln23_fu_380_p2(0) = '1') else 
        mpc_0_reg_207;
    select_ln29_1_fu_242_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_236_p2(0) = '1') else 
        r_0_reg_150;
    select_ln29_2_fu_250_p3 <= 
        f_fu_230_p2 when (icmp_ln13_fu_236_p2(0) = '1') else 
        f_0_reg_127;
    select_ln29_3_fu_274_p3 <= 
        ap_const_lv5_0 when (icmp_ln13_fu_236_p2(0) = '1') else 
        shl_ln_fu_266_p3;
    select_ln29_fu_472_p3 <= 
        conv_out_V_q0 when (icmp_ln1494_fu_466_p2(0) = '1') else 
        max_1_reg_194;
    shl_ln26_mid1_fu_320_p3 <= (r_fu_300_p2 & ap_const_lv1_0);
    shl_ln2_fu_354_p3 <= (select_ln13_fu_312_p3 & ap_const_lv1_0);
    shl_ln_fu_266_p3 <= (r_0_reg_150 & ap_const_lv1_0);
    sub_ln1494_fu_450_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_432_p3) - unsigned(zext_ln1494_4_fu_446_p1));
    sub_ln203_fu_508_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_488_p3) - unsigned(zext_ln203_5_fu_504_p1));
    tmp_1_fu_439_p3 <= (grp_fu_542_p3 & ap_const_lv1_0);
    tmp_fu_496_p3 <= (add_ln203_fu_483_p2 & ap_const_lv1_0);
    xor_ln29_fu_282_p2 <= (icmp_ln13_fu_236_p2 xor ap_const_lv1_1);
    zext_ln1494_4_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_439_p3),13));
    zext_ln1494_5_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_2_fu_456_p2),64));
    zext_ln203_4_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_reg_581),8));
    zext_ln203_5_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_496_p3),11));
    zext_ln203_6_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_3_fu_514_p2),64));
    zext_ln20_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln20_1_reg_621),5));
    zext_ln23_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln20_reg_616),5));
    zext_ln26_1_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_2_fu_250_p3),11));
    zext_ln26_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_2_fu_250_p3),13));
end behav;
