-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cnn_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cnn_input_ce0 : OUT STD_LOGIC;
    cnn_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_output_ce0 : OUT STD_LOGIC;
    prediction_output_we0 : OUT STD_LOGIC;
    prediction_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.990188,HLS_SYN_LAT=453438,HLS_SYN_TPT=none,HLS_SYN_MEM=34,HLS_SYN_DSP=8,HLS_SYN_FF=2514,HLS_SYN_LUT=9426,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv15_32 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv14_3FE8 : STD_LOGIC_VECTOR (13 downto 0) := "11111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_1_weights_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dense_1_weights_V_ce0 : STD_LOGIC;
    signal dense_1_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_bias_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_bias_V_ce0 : STD_LOGIC;
    signal dense_1_bias_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_2_weights_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_weights_V_ce0 : STD_LOGIC;
    signal dense_2_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_2_bias_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_bias_V_ce0 : STD_LOGIC;
    signal dense_2_bias_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_ce0 : STD_LOGIC;
    signal dense_out_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_V_ce0 : STD_LOGIC;
    signal dense_out_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_808_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1902 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ix_in_fu_814_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_in_reg_1907 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_844_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_reg_1912 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_856_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1920 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln203_17_fu_866_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_17_reg_1925 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln25_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_876_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_reg_1935 : STD_LOGIC_VECTOR (9 downto 0);
    signal cnn_input_load_reg_1940 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln603_3_fu_1157_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_3_reg_1946 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_1_fu_1175_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_1954 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln14_fu_1181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_1959 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_1185_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln13_reg_1965 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_1_fu_1195_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_1973 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln1117_3_fu_1206_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1117_3_reg_1978 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln13_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_2_fu_1294_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_2006 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln14_2_fu_1300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_2_reg_2011 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_1_fu_1288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_2_fu_1304_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_2_reg_2017 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_fu_1314_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_2025 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln13_1_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal d_fu_1437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_2053 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln48_fu_1443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_2058 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln41_fu_1431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_fu_1447_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_reg_2064 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_fu_1457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_2072 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln46_fu_1451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_3_fu_1550_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_2100 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln70_fu_1556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_2105 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln69_fu_1544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_1561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_2115 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal p_Result_41_fu_1567_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_41_reg_2120 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_13_fu_1581_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_13_reg_2125 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln944_fu_1615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_2130 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_1725_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_2136 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_1733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_2141 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_1739_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_2146 : STD_LOGIC_VECTOR (7 downto 0);
    signal dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_ce0 : STD_LOGIC;
    signal dense_array_V_we0 : STD_LOGIC;
    signal dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_1_input_V_ce0 : STD_LOGIC;
    signal conv_1_input_V_we0 : STD_LOGIC;
    signal conv_1_input_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_out_V_ce0 : STD_LOGIC;
    signal conv_1_out_V_we0 : STD_LOGIC;
    signal conv_1_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pool_1_out_V_ce0 : STD_LOGIC;
    signal max_pool_1_out_V_we0 : STD_LOGIC;
    signal max_pool_1_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_0_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_out_0_V_ce0 : STD_LOGIC;
    signal conv_2_out_0_V_we0 : STD_LOGIC;
    signal conv_2_out_0_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_0_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_0_V_ce1 : STD_LOGIC;
    signal conv_2_out_0_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_1_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_2_out_1_V_ce0 : STD_LOGIC;
    signal conv_2_out_1_V_we0 : STD_LOGIC;
    signal conv_2_out_1_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_1_V_ce1 : STD_LOGIC;
    signal conv_2_out_1_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_2_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_2_out_2_V_ce0 : STD_LOGIC;
    signal conv_2_out_2_V_we0 : STD_LOGIC;
    signal conv_2_out_2_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_2_V_ce1 : STD_LOGIC;
    signal conv_2_out_2_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_3_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_2_out_3_V_ce0 : STD_LOGIC;
    signal conv_2_out_3_V_we0 : STD_LOGIC;
    signal conv_2_out_3_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_3_V_ce1 : STD_LOGIC;
    signal conv_2_out_3_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_4_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_2_out_4_V_ce0 : STD_LOGIC;
    signal conv_2_out_4_V_we0 : STD_LOGIC;
    signal conv_2_out_4_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_4_V_ce1 : STD_LOGIC;
    signal conv_2_out_4_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_pool_2_out_V_ce0 : STD_LOGIC;
    signal max_pool_2_out_V_we0 : STD_LOGIC;
    signal max_pool_2_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_ce1 : STD_LOGIC;
    signal max_pool_2_out_V_we1 : STD_LOGIC;
    signal flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_array_V_ce0 : STD_LOGIC;
    signal flat_array_V_we0 : STD_LOGIC;
    signal flat_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_out_V_ce0 : STD_LOGIC;
    signal dense_1_out_V_we0 : STD_LOGIC;
    signal dense_1_out_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_1_out_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_out_V_ce0 : STD_LOGIC;
    signal dense_2_out_V_we0 : STD_LOGIC;
    signal dense_2_out_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal prediction_V_ce0 : STD_LOGIC;
    signal prediction_V_we0 : STD_LOGIC;
    signal prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal prediction_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_2_fu_740_ap_start : STD_LOGIC;
    signal grp_conv_2_fu_740_ap_done : STD_LOGIC;
    signal grp_conv_2_fu_740_ap_idle : STD_LOGIC;
    signal grp_conv_2_fu_740_ap_ready : STD_LOGIC;
    signal grp_conv_2_fu_740_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_2_fu_740_input_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_0_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_2_fu_740_conv_out_0_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_0_V_we0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_0_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_2_fu_740_conv_out_1_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_conv_2_fu_740_conv_out_1_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_1_V_we0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_1_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_2_fu_740_conv_out_2_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_conv_2_fu_740_conv_out_2_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_2_V_we0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_2_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_2_fu_740_conv_out_3_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_conv_2_fu_740_conv_out_3_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_3_V_we0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_3_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_2_fu_740_conv_out_4_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_conv_2_fu_740_conv_out_4_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_4_V_we0 : STD_LOGIC;
    signal grp_conv_2_fu_740_conv_out_4_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_1_fu_754_ap_start : STD_LOGIC;
    signal grp_conv_1_fu_754_ap_done : STD_LOGIC;
    signal grp_conv_1_fu_754_ap_idle : STD_LOGIC;
    signal grp_conv_1_fu_754_ap_ready : STD_LOGIC;
    signal grp_conv_1_fu_754_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_1_fu_754_input_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_754_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_1_fu_754_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_754_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_1_fu_754_conv_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_2_fu_764_ap_start : STD_LOGIC;
    signal grp_max_pool_2_fu_764_ap_done : STD_LOGIC;
    signal grp_max_pool_2_fu_764_ap_idle : STD_LOGIC;
    signal grp_max_pool_2_fu_764_ap_ready : STD_LOGIC;
    signal grp_max_pool_2_fu_764_conv_out_0_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_2_fu_764_conv_out_0_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_conv_out_0_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_2_fu_764_conv_out_0_V_ce1 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_conv_out_1_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_764_conv_out_1_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_conv_out_1_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_764_conv_out_1_V_ce1 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_conv_out_2_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_764_conv_out_2_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_conv_out_2_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_764_conv_out_2_V_ce1 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_conv_out_3_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_764_conv_out_3_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_conv_out_3_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_764_conv_out_3_V_ce1 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_conv_out_4_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_764_conv_out_4_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_conv_out_4_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_764_conv_out_4_V_ce1 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_764_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_max_pool_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_2_fu_764_max_pool_out_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_764_max_pool_out_V_ce1 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_max_pool_out_V_we1 : STD_LOGIC;
    signal grp_max_pool_2_fu_764_max_pool_out_V_d1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_774_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_774_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_774_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_774_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_774_dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_774_dense_array_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_774_dense_array_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_774_dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_774_prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_774_prediction_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_774_prediction_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_774_prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_1_fu_786_ap_start : STD_LOGIC;
    signal grp_max_pool_1_fu_786_ap_done : STD_LOGIC;
    signal grp_max_pool_1_fu_786_ap_idle : STD_LOGIC;
    signal grp_max_pool_1_fu_786_ap_ready : STD_LOGIC;
    signal grp_max_pool_1_fu_786_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_1_fu_786_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_786_max_pool_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_1_fu_786_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_786_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_786_max_pool_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_flat_fu_792_ap_start : STD_LOGIC;
    signal grp_flat_fu_792_ap_done : STD_LOGIC;
    signal grp_flat_fu_792_ap_idle : STD_LOGIC;
    signal grp_flat_fu_792_ap_ready : STD_LOGIC;
    signal grp_flat_fu_792_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_792_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_792_flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_792_flat_array_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_792_flat_array_V_we0 : STD_LOGIC;
    signal grp_flat_fu_792_flat_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ix_in_0_reg_572 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_584 : STD_LOGIC_VECTOR (4 downto 0);
    signal ix_in_1_reg_595 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_0_reg_605 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_i_reg_616 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_Val2_29_reg_627 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_i_reg_639 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_reg_650 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_i12_reg_661 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_Val2_32_reg_672 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_i17_reg_684 : STD_LOGIC_VECTOR (5 downto 0);
    signal d_0_i_reg_695 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal p_Val2_38_reg_706 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_0_i_reg_718 : STD_LOGIC_VECTOR (4 downto 0);
    signal i24_0_reg_729 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_conv_2_fu_740_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_conv_1_fu_754_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_max_pool_2_fu_764_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_soft_max_fu_774_ap_start_reg : STD_LOGIC := '0';
    signal grp_max_pool_1_fu_786_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_flat_fu_792_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln27_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_1165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_fu_1217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_1201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_fu_1360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_4_fu_1320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_9_fu_1503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_1463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln19_fu_1279_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln19_1_fu_1422_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_2_fu_1537_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_820_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_832_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_fu_828_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_20_fu_840_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_21_fu_862_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_898_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_912_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_916_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_40_fu_924_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_39_fu_890_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_928_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_886_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_908_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_948_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_960_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_966_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_972_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_934_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_fu_980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_1006_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_1010_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_1020_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_1023_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_990_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln581cast_fu_1039_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln571_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_1043_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln586_fu_1016_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln585_1_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_1031_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln582_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_1115_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_1_fu_1129_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln603_1_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_1143_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1117_fu_1212_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1852_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_1247_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln703_fu_1255_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_fu_1247_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_fu_1255_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln703_fu_1251_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_fu_1259_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_28_fu_1271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_1265_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_fu_1325_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_1337_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_6_fu_1333_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1117_7_fu_1345_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1117_fu_1349_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1117_2_fu_1355_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1861_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_1_fu_1390_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_2_fu_1398_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1265_1_fu_1390_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_2_fu_1398_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln703_1_fu_1394_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_1_fu_1402_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_fu_1414_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_1_fu_1408_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_fu_1468_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1480_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_8_fu_1488_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_fu_1476_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_fu_1492_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_4_fu_1498_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1870_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_2_fu_1533_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_1575_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_1589_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_42_fu_1599_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_1607_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_1625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_1631_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_1647_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln947_fu_1651_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln947_fu_1657_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln947_fu_1661_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_36_fu_1667_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln947_fu_1641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_1673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1685_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln944_fu_1621_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln949_fu_1699_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_37_fu_1705_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_1713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_1679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_1719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_1743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_1746_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_1757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_1751_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_1762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_12_fu_1768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_13_fu_1775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s_fu_1780_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_33_fu_1794_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln964_fu_1802_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_1810_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_1815_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_16_fu_1790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1821_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_43_fu_1828_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_1840_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1852_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1861_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1861_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1870_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1870_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1861_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1870_p00 : STD_LOGIC_VECTOR (21 downto 0);

    component conv_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_0_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv_out_0_V_ce0 : OUT STD_LOGIC;
        conv_out_0_V_we0 : OUT STD_LOGIC;
        conv_out_0_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        conv_out_1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_1_V_ce0 : OUT STD_LOGIC;
        conv_out_1_V_we0 : OUT STD_LOGIC;
        conv_out_1_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        conv_out_2_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_2_V_ce0 : OUT STD_LOGIC;
        conv_out_2_V_we0 : OUT STD_LOGIC;
        conv_out_2_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        conv_out_3_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_3_V_ce0 : OUT STD_LOGIC;
        conv_out_3_V_we0 : OUT STD_LOGIC;
        conv_out_3_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        conv_out_4_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_4_V_ce0 : OUT STD_LOGIC;
        conv_out_4_V_we0 : OUT STD_LOGIC;
        conv_out_4_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component conv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component max_pool_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_0_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv_out_0_V_ce0 : OUT STD_LOGIC;
        conv_out_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_0_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv_out_0_V_ce1 : OUT STD_LOGIC;
        conv_out_0_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_1_V_ce0 : OUT STD_LOGIC;
        conv_out_1_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_1_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_1_V_ce1 : OUT STD_LOGIC;
        conv_out_1_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_2_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_2_V_ce0 : OUT STD_LOGIC;
        conv_out_2_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_2_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_2_V_ce1 : OUT STD_LOGIC;
        conv_out_2_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_3_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_3_V_ce0 : OUT STD_LOGIC;
        conv_out_3_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_3_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_3_V_ce1 : OUT STD_LOGIC;
        conv_out_3_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_4_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_4_V_ce0 : OUT STD_LOGIC;
        conv_out_4_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_4_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv_out_4_V_ce1 : OUT STD_LOGIC;
        conv_out_4_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce1 : OUT STD_LOGIC;
        max_pool_out_V_we1 : OUT STD_LOGIC;
        max_pool_out_V_d1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce0 : OUT STD_LOGIC;
        dense_array_V_we0 : OUT STD_LOGIC;
        dense_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        dense_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_V_ce0 : OUT STD_LOGIC;
        prediction_V_we0 : OUT STD_LOGIC;
        prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component max_pool_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component flat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        flat_array_V_ce0 : OUT STD_LOGIC;
        flat_array_V_we0 : OUT STD_LOGIC;
        flat_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_fpext_32ns_64sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_mac_muladd_9stde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_mac_muladd_9sudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_mac_muladd_13vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_dense_1_weighmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_1_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component cnn_dense_2_weighncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_2_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_out_weiocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_out_biapcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_dense_array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_1_input_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_max_pool_1_ouqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_2_out_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_2_out_1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_max_pool_2_ourcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_flat_array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_dense_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_dense_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    dense_1_weights_V_U : component cnn_dense_1_weighmb6
    generic map (
        DataWidth => 9,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_address0,
        ce0 => dense_1_weights_V_ce0,
        q0 => dense_1_weights_V_q0);

    dense_1_bias_V_U : component cnn_dense_1_bias_V
    generic map (
        DataWidth => 6,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_bias_V_address0,
        ce0 => dense_1_bias_V_ce0,
        q0 => dense_1_bias_V_q0);

    dense_2_weights_V_U : component cnn_dense_2_weighncg
    generic map (
        DataWidth => 9,
        AddressRange => 1500,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_weights_V_address0,
        ce0 => dense_2_weights_V_ce0,
        q0 => dense_2_weights_V_q0);

    dense_2_bias_V_U : component cnn_dense_2_bias_V
    generic map (
        DataWidth => 9,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_bias_V_address0,
        ce0 => dense_2_bias_V_ce0,
        q0 => dense_2_bias_V_q0);

    dense_out_weights_V_U : component cnn_dense_out_weiocq
    generic map (
        DataWidth => 9,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_weights_V_address0,
        ce0 => dense_out_weights_V_ce0,
        q0 => dense_out_weights_V_q0);

    dense_out_bias_V_U : component cnn_dense_out_biapcA
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_bias_V_address0,
        ce0 => dense_out_bias_V_ce0,
        q0 => dense_out_bias_V_q0);

    dense_array_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_V_address0,
        ce0 => dense_array_V_ce0,
        we0 => dense_array_V_we0,
        d0 => dense_array_V_d0,
        q0 => dense_array_V_q0);

    conv_1_input_V_U : component cnn_conv_1_input_V
    generic map (
        DataWidth => 14,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_input_V_address0,
        ce0 => conv_1_input_V_ce0,
        we0 => conv_1_input_V_we0,
        d0 => select_ln603_3_reg_1946,
        q0 => conv_1_input_V_q0);

    conv_1_out_V_U : component cnn_conv_1_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 4056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_out_V_address0,
        ce0 => conv_1_out_V_ce0,
        we0 => conv_1_out_V_we0,
        d0 => conv_1_out_V_d0,
        q0 => conv_1_out_V_q0);

    max_pool_1_out_V_U : component cnn_max_pool_1_ouqcK
    generic map (
        DataWidth => 14,
        AddressRange => 1014,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_pool_1_out_V_address0,
        ce0 => max_pool_1_out_V_ce0,
        we0 => max_pool_1_out_V_we0,
        d0 => max_pool_1_out_V_d0,
        q0 => max_pool_1_out_V_q0);

    conv_2_out_0_V_U : component cnn_conv_2_out_0_V
    generic map (
        DataWidth => 14,
        AddressRange => 528,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_out_0_V_address0,
        ce0 => conv_2_out_0_V_ce0,
        we0 => conv_2_out_0_V_we0,
        d0 => conv_2_out_0_V_d0,
        q0 => conv_2_out_0_V_q0,
        address1 => grp_max_pool_2_fu_764_conv_out_0_V_address1,
        ce1 => conv_2_out_0_V_ce1,
        q1 => conv_2_out_0_V_q1);

    conv_2_out_1_V_U : component cnn_conv_2_out_1_V
    generic map (
        DataWidth => 14,
        AddressRange => 352,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_out_1_V_address0,
        ce0 => conv_2_out_1_V_ce0,
        we0 => conv_2_out_1_V_we0,
        d0 => grp_conv_2_fu_740_conv_out_1_V_d0,
        q0 => conv_2_out_1_V_q0,
        address1 => grp_max_pool_2_fu_764_conv_out_1_V_address1,
        ce1 => conv_2_out_1_V_ce1,
        q1 => conv_2_out_1_V_q1);

    conv_2_out_2_V_U : component cnn_conv_2_out_1_V
    generic map (
        DataWidth => 14,
        AddressRange => 352,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_out_2_V_address0,
        ce0 => conv_2_out_2_V_ce0,
        we0 => conv_2_out_2_V_we0,
        d0 => grp_conv_2_fu_740_conv_out_2_V_d0,
        q0 => conv_2_out_2_V_q0,
        address1 => grp_max_pool_2_fu_764_conv_out_2_V_address1,
        ce1 => conv_2_out_2_V_ce1,
        q1 => conv_2_out_2_V_q1);

    conv_2_out_3_V_U : component cnn_conv_2_out_1_V
    generic map (
        DataWidth => 14,
        AddressRange => 352,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_out_3_V_address0,
        ce0 => conv_2_out_3_V_ce0,
        we0 => conv_2_out_3_V_we0,
        d0 => grp_conv_2_fu_740_conv_out_3_V_d0,
        q0 => conv_2_out_3_V_q0,
        address1 => grp_max_pool_2_fu_764_conv_out_3_V_address1,
        ce1 => conv_2_out_3_V_ce1,
        q1 => conv_2_out_3_V_q1);

    conv_2_out_4_V_U : component cnn_conv_2_out_1_V
    generic map (
        DataWidth => 14,
        AddressRange => 352,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_out_4_V_address0,
        ce0 => conv_2_out_4_V_ce0,
        we0 => conv_2_out_4_V_we0,
        d0 => grp_conv_2_fu_740_conv_out_4_V_d0,
        q0 => conv_2_out_4_V_q0,
        address1 => grp_max_pool_2_fu_764_conv_out_4_V_address1,
        ce1 => conv_2_out_4_V_ce1,
        q1 => conv_2_out_4_V_q1);

    max_pool_2_out_V_U : component cnn_max_pool_2_ourcU
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_pool_2_out_V_address0,
        ce0 => max_pool_2_out_V_ce0,
        we0 => max_pool_2_out_V_we0,
        d0 => max_pool_2_out_V_d0,
        q0 => max_pool_2_out_V_q0,
        address1 => grp_max_pool_2_fu_764_max_pool_out_V_address1,
        ce1 => max_pool_2_out_V_ce1,
        we1 => max_pool_2_out_V_we1,
        d1 => grp_max_pool_2_fu_764_max_pool_out_V_d1);

    flat_array_V_U : component cnn_flat_array_V
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => flat_array_V_address0,
        ce0 => flat_array_V_ce0,
        we0 => flat_array_V_we0,
        d0 => flat_array_V_d0,
        q0 => flat_array_V_q0);

    dense_1_out_V_U : component cnn_dense_1_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_out_V_address0,
        ce0 => dense_1_out_V_ce0,
        we0 => dense_1_out_V_we0,
        d0 => dense_1_out_V_d0,
        q0 => dense_1_out_V_q0);

    dense_2_out_V_U : component cnn_dense_2_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_out_V_address0,
        ce0 => dense_2_out_V_ce0,
        we0 => dense_2_out_V_we0,
        d0 => dense_2_out_V_d0,
        q0 => dense_2_out_V_q0);

    prediction_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => prediction_V_address0,
        ce0 => prediction_V_ce0,
        we0 => prediction_V_we0,
        d0 => prediction_V_d0,
        q0 => prediction_V_q0);

    grp_conv_2_fu_740 : component conv_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_2_fu_740_ap_start,
        ap_done => grp_conv_2_fu_740_ap_done,
        ap_idle => grp_conv_2_fu_740_ap_idle,
        ap_ready => grp_conv_2_fu_740_ap_ready,
        input_V_address0 => grp_conv_2_fu_740_input_V_address0,
        input_V_ce0 => grp_conv_2_fu_740_input_V_ce0,
        input_V_q0 => max_pool_1_out_V_q0,
        conv_out_0_V_address0 => grp_conv_2_fu_740_conv_out_0_V_address0,
        conv_out_0_V_ce0 => grp_conv_2_fu_740_conv_out_0_V_ce0,
        conv_out_0_V_we0 => grp_conv_2_fu_740_conv_out_0_V_we0,
        conv_out_0_V_d0 => grp_conv_2_fu_740_conv_out_0_V_d0,
        conv_out_1_V_address0 => grp_conv_2_fu_740_conv_out_1_V_address0,
        conv_out_1_V_ce0 => grp_conv_2_fu_740_conv_out_1_V_ce0,
        conv_out_1_V_we0 => grp_conv_2_fu_740_conv_out_1_V_we0,
        conv_out_1_V_d0 => grp_conv_2_fu_740_conv_out_1_V_d0,
        conv_out_2_V_address0 => grp_conv_2_fu_740_conv_out_2_V_address0,
        conv_out_2_V_ce0 => grp_conv_2_fu_740_conv_out_2_V_ce0,
        conv_out_2_V_we0 => grp_conv_2_fu_740_conv_out_2_V_we0,
        conv_out_2_V_d0 => grp_conv_2_fu_740_conv_out_2_V_d0,
        conv_out_3_V_address0 => grp_conv_2_fu_740_conv_out_3_V_address0,
        conv_out_3_V_ce0 => grp_conv_2_fu_740_conv_out_3_V_ce0,
        conv_out_3_V_we0 => grp_conv_2_fu_740_conv_out_3_V_we0,
        conv_out_3_V_d0 => grp_conv_2_fu_740_conv_out_3_V_d0,
        conv_out_4_V_address0 => grp_conv_2_fu_740_conv_out_4_V_address0,
        conv_out_4_V_ce0 => grp_conv_2_fu_740_conv_out_4_V_ce0,
        conv_out_4_V_we0 => grp_conv_2_fu_740_conv_out_4_V_we0,
        conv_out_4_V_d0 => grp_conv_2_fu_740_conv_out_4_V_d0);

    grp_conv_1_fu_754 : component conv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_1_fu_754_ap_start,
        ap_done => grp_conv_1_fu_754_ap_done,
        ap_idle => grp_conv_1_fu_754_ap_idle,
        ap_ready => grp_conv_1_fu_754_ap_ready,
        input_V_address0 => grp_conv_1_fu_754_input_V_address0,
        input_V_ce0 => grp_conv_1_fu_754_input_V_ce0,
        input_V_q0 => conv_1_input_V_q0,
        conv_out_V_address0 => grp_conv_1_fu_754_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_1_fu_754_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_1_fu_754_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_1_fu_754_conv_out_V_d0);

    grp_max_pool_2_fu_764 : component max_pool_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_2_fu_764_ap_start,
        ap_done => grp_max_pool_2_fu_764_ap_done,
        ap_idle => grp_max_pool_2_fu_764_ap_idle,
        ap_ready => grp_max_pool_2_fu_764_ap_ready,
        conv_out_0_V_address0 => grp_max_pool_2_fu_764_conv_out_0_V_address0,
        conv_out_0_V_ce0 => grp_max_pool_2_fu_764_conv_out_0_V_ce0,
        conv_out_0_V_q0 => conv_2_out_0_V_q0,
        conv_out_0_V_address1 => grp_max_pool_2_fu_764_conv_out_0_V_address1,
        conv_out_0_V_ce1 => grp_max_pool_2_fu_764_conv_out_0_V_ce1,
        conv_out_0_V_q1 => conv_2_out_0_V_q1,
        conv_out_1_V_address0 => grp_max_pool_2_fu_764_conv_out_1_V_address0,
        conv_out_1_V_ce0 => grp_max_pool_2_fu_764_conv_out_1_V_ce0,
        conv_out_1_V_q0 => conv_2_out_1_V_q0,
        conv_out_1_V_address1 => grp_max_pool_2_fu_764_conv_out_1_V_address1,
        conv_out_1_V_ce1 => grp_max_pool_2_fu_764_conv_out_1_V_ce1,
        conv_out_1_V_q1 => conv_2_out_1_V_q1,
        conv_out_2_V_address0 => grp_max_pool_2_fu_764_conv_out_2_V_address0,
        conv_out_2_V_ce0 => grp_max_pool_2_fu_764_conv_out_2_V_ce0,
        conv_out_2_V_q0 => conv_2_out_2_V_q0,
        conv_out_2_V_address1 => grp_max_pool_2_fu_764_conv_out_2_V_address1,
        conv_out_2_V_ce1 => grp_max_pool_2_fu_764_conv_out_2_V_ce1,
        conv_out_2_V_q1 => conv_2_out_2_V_q1,
        conv_out_3_V_address0 => grp_max_pool_2_fu_764_conv_out_3_V_address0,
        conv_out_3_V_ce0 => grp_max_pool_2_fu_764_conv_out_3_V_ce0,
        conv_out_3_V_q0 => conv_2_out_3_V_q0,
        conv_out_3_V_address1 => grp_max_pool_2_fu_764_conv_out_3_V_address1,
        conv_out_3_V_ce1 => grp_max_pool_2_fu_764_conv_out_3_V_ce1,
        conv_out_3_V_q1 => conv_2_out_3_V_q1,
        conv_out_4_V_address0 => grp_max_pool_2_fu_764_conv_out_4_V_address0,
        conv_out_4_V_ce0 => grp_max_pool_2_fu_764_conv_out_4_V_ce0,
        conv_out_4_V_q0 => conv_2_out_4_V_q0,
        conv_out_4_V_address1 => grp_max_pool_2_fu_764_conv_out_4_V_address1,
        conv_out_4_V_ce1 => grp_max_pool_2_fu_764_conv_out_4_V_ce1,
        conv_out_4_V_q1 => conv_2_out_4_V_q1,
        max_pool_out_V_address0 => grp_max_pool_2_fu_764_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_2_fu_764_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_2_fu_764_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_2_fu_764_max_pool_out_V_d0,
        max_pool_out_V_address1 => grp_max_pool_2_fu_764_max_pool_out_V_address1,
        max_pool_out_V_ce1 => grp_max_pool_2_fu_764_max_pool_out_V_ce1,
        max_pool_out_V_we1 => grp_max_pool_2_fu_764_max_pool_out_V_we1,
        max_pool_out_V_d1 => grp_max_pool_2_fu_764_max_pool_out_V_d1);

    grp_soft_max_fu_774 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_soft_max_fu_774_ap_start,
        ap_done => grp_soft_max_fu_774_ap_done,
        ap_idle => grp_soft_max_fu_774_ap_idle,
        ap_ready => grp_soft_max_fu_774_ap_ready,
        dense_array_V_address0 => grp_soft_max_fu_774_dense_array_V_address0,
        dense_array_V_ce0 => grp_soft_max_fu_774_dense_array_V_ce0,
        dense_array_V_we0 => grp_soft_max_fu_774_dense_array_V_we0,
        dense_array_V_d0 => grp_soft_max_fu_774_dense_array_V_d0,
        dense_array_V_q0 => dense_array_V_q0,
        prediction_V_address0 => grp_soft_max_fu_774_prediction_V_address0,
        prediction_V_ce0 => grp_soft_max_fu_774_prediction_V_ce0,
        prediction_V_we0 => grp_soft_max_fu_774_prediction_V_we0,
        prediction_V_d0 => grp_soft_max_fu_774_prediction_V_d0);

    grp_max_pool_1_fu_786 : component max_pool_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_1_fu_786_ap_start,
        ap_done => grp_max_pool_1_fu_786_ap_done,
        ap_idle => grp_max_pool_1_fu_786_ap_idle,
        ap_ready => grp_max_pool_1_fu_786_ap_ready,
        conv_out_V_address0 => grp_max_pool_1_fu_786_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_1_fu_786_conv_out_V_ce0,
        conv_out_V_q0 => conv_1_out_V_q0,
        max_pool_out_V_address0 => grp_max_pool_1_fu_786_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_1_fu_786_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_1_fu_786_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_1_fu_786_max_pool_out_V_d0);

    grp_flat_fu_792 : component flat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flat_fu_792_ap_start,
        ap_done => grp_flat_fu_792_ap_done,
        ap_idle => grp_flat_fu_792_ap_idle,
        ap_ready => grp_flat_fu_792_ap_ready,
        max_pool_out_V_address0 => grp_flat_fu_792_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_flat_fu_792_max_pool_out_V_ce0,
        max_pool_out_V_q0 => max_pool_2_out_V_q0,
        flat_array_V_address0 => grp_flat_fu_792_flat_array_V_address0,
        flat_array_V_ce0 => grp_flat_fu_792_flat_array_V_ce0,
        flat_array_V_we0 => grp_flat_fu_792_flat_array_V_we0,
        flat_array_V_d0 => grp_flat_fu_792_flat_array_V_d0);

    cnn_fpext_32ns_64sc4_U38 : component cnn_fpext_32ns_64sc4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cnn_input_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_798_p1);

    cnn_mac_muladd_9stde_U39 : component cnn_mac_muladd_9stde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 14,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_1_weights_V_q0,
        din1 => flat_array_V_q0,
        din2 => grp_fu_1852_p2,
        dout => grp_fu_1852_p3);

    cnn_mac_muladd_9sudo_U40 : component cnn_mac_muladd_9sudo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 13,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_2_weights_V_q0,
        din1 => grp_fu_1861_p1,
        din2 => grp_fu_1861_p2,
        dout => grp_fu_1861_p3);

    cnn_mac_muladd_13vdy_U41 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1870_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_1870_p2,
        dout => grp_fu_1870_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv_1_fu_754_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_1_fu_754_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_conv_1_fu_754_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_1_fu_754_ap_ready = ap_const_logic_1)) then 
                    grp_conv_1_fu_754_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_2_fu_740_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_2_fu_740_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_conv_2_fu_740_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_2_fu_740_ap_ready = ap_const_logic_1)) then 
                    grp_conv_2_fu_740_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flat_fu_792_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_flat_fu_792_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_flat_fu_792_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flat_fu_792_ap_ready = ap_const_logic_1)) then 
                    grp_flat_fu_792_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_1_fu_786_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_1_fu_786_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_max_pool_1_fu_786_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_1_fu_786_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_1_fu_786_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_2_fu_764_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_2_fu_764_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_max_pool_2_fu_764_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_2_fu_764_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_2_fu_764_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_774_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_soft_max_fu_774_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1431_p2 = ap_const_lv1_1))) then 
                    grp_soft_max_fu_774_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_774_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_774_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_i_reg_695_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1288_p2 = ap_const_lv1_1))) then 
                d_0_i_reg_695 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                d_0_i_reg_695 <= d_reg_2053;
            end if; 
        end if;
    end process;

    f_0_i_reg_718_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                f_0_i_reg_718 <= f_reg_2072;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1431_p2 = ap_const_lv1_0))) then 
                f_0_i_reg_718 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i24_0_reg_729_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i24_0_reg_729 <= i_3_reg_2100;
            elsif (((grp_soft_max_fu_774_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i24_0_reg_729 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i12_reg_661_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_0_i12_reg_661 <= i_2_reg_2006;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1169_p2 = ap_const_lv1_1))) then 
                i_0_i12_reg_661 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_616_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_0_i_reg_616 <= i_1_reg_1954;
            elsif (((grp_flat_fu_792_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_0_i_reg_616 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_reg_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_850_p2 = ap_const_lv1_1))) then 
                i_0_reg_584 <= i_reg_1902;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_584 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ix_in_0_reg_572_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_850_p2 = ap_const_lv1_1))) then 
                ix_in_0_reg_572 <= ix_in_reg_1907;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ix_in_0_reg_572 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    ix_in_1_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ix_in_1_reg_595 <= add_ln28_reg_1935;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_802_p2 = ap_const_lv1_0))) then 
                ix_in_1_reg_595 <= ix_in_0_reg_572;
            end if; 
        end if;
    end process;

    j_0_i17_reg_684_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_0_i17_reg_684 <= j_2_reg_2025;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1288_p2 = ap_const_lv1_0))) then 
                j_0_i17_reg_684 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_639_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_0_i_reg_639 <= j_1_reg_1973;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1169_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_639 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_605 <= j_reg_1920;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_802_p2 = ap_const_lv1_0))) then 
                j_0_reg_605 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_29_reg_627_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_Val2_29_reg_627 <= grp_fu_1852_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1169_p2 = ap_const_lv1_0))) then 
                p_Val2_29_reg_627 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_32_reg_672_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                p_Val2_32_reg_672 <= grp_fu_1861_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1288_p2 = ap_const_lv1_0))) then 
                p_Val2_32_reg_672 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_38_reg_706_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                p_Val2_38_reg_706 <= grp_fu_1870_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1431_p2 = ap_const_lv1_0))) then 
                p_Val2_38_reg_706 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_650_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                phi_mul_reg_650 <= add_ln1117_3_reg_1978;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1169_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_650 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln13_fu_1189_p2 = ap_const_lv1_0))) then
                add_ln1117_3_reg_1978 <= add_ln1117_3_fu_1206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_850_p2 = ap_const_lv1_0))) then
                add_ln203_17_reg_1925 <= add_ln203_17_fu_866_p2;
                add_ln28_reg_1935 <= add_ln28_fu_876_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cnn_input_load_reg_1940 <= cnn_input_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                d_reg_2053 <= d_fu_1437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                f_reg_2072 <= f_fu_1457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_1_reg_1954 <= i_1_fu_1175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_2_reg_2006 <= i_2_fu_1294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                i_3_reg_2100 <= i_3_fu_1550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1902 <= i_fu_808_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                icmp_ln935_reg_2115 <= icmp_ln935_fu_1561_p2;
                icmp_ln958_reg_2141 <= icmp_ln958_fu_1733_p2;
                    or_ln_reg_2136(0) <= or_ln_fu_1725_p3(0);
                p_Result_41_reg_2120 <= prediction_V_q0(13 downto 13);
                sub_ln944_reg_2130 <= sub_ln944_fu_1615_p2;
                tmp_V_13_reg_2125 <= tmp_V_13_fu_1581_p3;
                trunc_ln943_reg_2146 <= trunc_ln943_fu_1739_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_802_p2 = ap_const_lv1_0))) then
                ix_in_reg_1907 <= ix_in_fu_814_p2;
                    sub_ln203_reg_1912(10 downto 2) <= sub_ln203_fu_844_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                j_1_reg_1973 <= j_1_fu_1195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                j_2_reg_2025 <= j_2_fu_1314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1920 <= j_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                select_ln603_3_reg_1946 <= select_ln603_3_fu_1157_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1288_p2 = ap_const_lv1_0))) then
                    zext_ln13_2_reg_2017(4 downto 0) <= zext_ln13_2_fu_1304_p1(4 downto 0);
                    zext_ln14_2_reg_2011(4 downto 0) <= zext_ln14_2_fu_1300_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1169_p2 = ap_const_lv1_0))) then
                    zext_ln13_reg_1965(5 downto 0) <= zext_ln13_fu_1185_p1(5 downto 0);
                    zext_ln14_reg_1959(5 downto 0) <= zext_ln14_fu_1181_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1431_p2 = ap_const_lv1_0))) then
                    zext_ln46_reg_2064(3 downto 0) <= zext_ln46_fu_1447_p1(3 downto 0);
                    zext_ln48_reg_2058(3 downto 0) <= zext_ln48_fu_1443_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln69_fu_1544_p2 = ap_const_lv1_0))) then
                    zext_ln70_reg_2105(3 downto 0) <= zext_ln70_fu_1556_p1(3 downto 0);
            end if;
        end if;
    end process;
    sub_ln203_reg_1912(1 downto 0) <= "00";
    zext_ln14_reg_1959(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_1965(14 downto 6) <= "000000000";
    zext_ln14_2_reg_2011(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln13_2_reg_2017(11 downto 5) <= "0000000";
    zext_ln48_reg_2058(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_2064(8 downto 4) <= "00000";
    zext_ln70_reg_2105(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln_reg_2136(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_802_p2, ap_CS_fsm_state3, icmp_ln25_fu_850_p2, ap_CS_fsm_state17, icmp_ln9_fu_1169_p2, ap_CS_fsm_state18, icmp_ln13_fu_1189_p2, ap_CS_fsm_state21, icmp_ln9_1_fu_1288_p2, ap_CS_fsm_state22, icmp_ln13_1_fu_1308_p2, ap_CS_fsm_state25, icmp_ln41_fu_1431_p2, ap_CS_fsm_state26, icmp_ln46_fu_1451_p2, ap_CS_fsm_state30, icmp_ln69_fu_1544_p2, grp_conv_2_fu_740_ap_done, grp_conv_1_fu_754_ap_done, grp_max_pool_2_fu_764_ap_done, grp_soft_max_fu_774_ap_done, grp_max_pool_1_fu_786_ap_done, grp_flat_fu_792_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_802_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_850_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_conv_1_fu_754_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_max_pool_1_fu_786_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_conv_2_fu_740_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_max_pool_2_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_flat_fu_792_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1169_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln13_fu_1189_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1288_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln13_1_fu_1308_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1431_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln46_fu_1451_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state29 => 
                if (((grp_soft_max_fu_774_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln69_fu_1544_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_948_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_908_p1));
    a_fu_1679_p2 <= (icmp_ln947_fu_1641_p2 and icmp_ln947_1_fu_1673_p2);
    add_ln1116_4_fu_1498_p2 <= std_logic_vector(unsigned(add_ln1116_fu_1492_p2) + unsigned(zext_ln46_reg_2064));
    add_ln1116_fu_1492_p2 <= std_logic_vector(unsigned(zext_ln1116_8_fu_1488_p1) + unsigned(zext_ln1116_fu_1476_p1));
    add_ln1117_2_fu_1355_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_1349_p2) + unsigned(zext_ln13_2_reg_2017));
    add_ln1117_3_fu_1206_p2 <= std_logic_vector(unsigned(phi_mul_reg_650) + unsigned(ap_const_lv15_32));
    add_ln1117_fu_1212_p2 <= std_logic_vector(unsigned(phi_mul_reg_650) + unsigned(zext_ln13_reg_1965));
    add_ln203_17_fu_866_p2 <= std_logic_vector(unsigned(sub_ln203_reg_1912) + unsigned(zext_ln203_21_fu_862_p1));
    add_ln203_1_fu_1408_p2 <= std_logic_vector(signed(sext_ln703_2_fu_1398_p1) + signed(trunc_ln703_1_fu_1394_p1));
    add_ln203_fu_1265_p2 <= std_logic_vector(signed(sext_ln703_fu_1255_p1) + signed(trunc_ln703_fu_1251_p1));
    add_ln28_fu_876_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ix_in_1_reg_595));
    add_ln581_fu_960_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_fu_948_p2));
    add_ln703_1_fu_1402_p2 <= std_logic_vector(unsigned(p_Val2_32_reg_672) + unsigned(sext_ln1265_1_fu_1390_p1));
    add_ln703_2_fu_1537_p2 <= std_logic_vector(signed(sext_ln1265_2_fu_1533_p1) + signed(p_Val2_38_reg_706));
    add_ln703_fu_1259_p2 <= std_logic_vector(unsigned(p_Val2_29_reg_627) + unsigned(sext_ln1265_fu_1247_p1));
    add_ln949_fu_1699_p2 <= std_logic_vector(signed(ap_const_lv14_3FE8) + signed(trunc_ln944_fu_1621_p1));
    add_ln958_fu_1746_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_2130));
    add_ln964_fu_1815_p2 <= std_logic_vector(unsigned(select_ln964_fu_1802_p3) + unsigned(sub_ln964_fu_1810_p2));
    and_ln581_fu_1073_p2 <= (xor_ln582_fu_1067_p2 and icmp_ln581_fu_954_p2);
    and_ln582_fu_1055_p2 <= (xor_ln571_fu_1049_p2 and icmp_ln582_fu_984_p2);
    and_ln585_1_fu_1091_p2 <= (icmp_ln585_fu_994_p2 and and_ln581_fu_1073_p2);
    and_ln585_fu_1085_p2 <= (xor_ln585_fu_1079_p2 and and_ln581_fu_1073_p2);
    and_ln603_fu_1109_p2 <= (xor_ln581_fu_1103_p2 and icmp_ln603_fu_1000_p2);
    and_ln949_fu_1713_p2 <= (xor_ln949_fu_1693_p2 and p_Result_37_fu_1705_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state30, icmp_ln69_fu_1544_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln69_fu_1544_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, icmp_ln69_fu_1544_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln69_fu_1544_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_1010_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_934_p3),to_integer(unsigned('0' & zext_ln586_fu_1006_p1(31-1 downto 0)))));
    bitcast_ln696_fu_1020_p1 <= cnn_input_load_reg_1940;
    bitcast_ln739_fu_1840_p1 <= p_Result_43_fu_1828_p5;
    cnn_input_address0 <= zext_ln27_fu_871_p1(10 - 1 downto 0);

    cnn_input_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnn_input_ce0 <= ap_const_logic_1;
        else 
            cnn_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_V_address0_assign_proc : process(grp_conv_1_fu_754_input_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, sext_ln203_fu_1165_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_address0 <= sext_ln203_fu_1165_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_address0 <= grp_conv_1_fu_754_input_V_address0;
        else 
            conv_1_input_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_1_input_V_ce0_assign_proc : process(grp_conv_1_fu_754_input_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_ce0 <= grp_conv_1_fu_754_input_V_ce0;
        else 
            conv_1_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_we0 <= ap_const_logic_1;
        else 
            conv_1_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_754_conv_out_V_address0, grp_max_pool_1_fu_786_conv_out_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_address0 <= grp_max_pool_1_fu_786_conv_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_address0 <= grp_conv_1_fu_754_conv_out_V_address0;
        else 
            conv_1_out_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_754_conv_out_V_ce0, grp_max_pool_1_fu_786_conv_out_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_ce0 <= grp_max_pool_1_fu_786_conv_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_ce0 <= grp_conv_1_fu_754_conv_out_V_ce0;
        else 
            conv_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_754_conv_out_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_d0 <= grp_conv_1_fu_754_conv_out_V_d0;
        else 
            conv_1_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_802_p2, grp_conv_1_fu_754_conv_out_V_we0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_802_p2 = ap_const_lv1_1))) then 
            conv_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_we0 <= grp_conv_1_fu_754_conv_out_V_we0;
        else 
            conv_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_0_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_740_conv_out_0_V_address0, grp_max_pool_2_fu_764_conv_out_0_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_0_V_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_0_V_address0 <= grp_max_pool_2_fu_764_conv_out_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_0_V_address0 <= grp_conv_2_fu_740_conv_out_0_V_address0;
        else 
            conv_2_out_0_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_0_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_740_conv_out_0_V_ce0, grp_max_pool_2_fu_764_conv_out_0_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_0_V_ce0 <= grp_max_pool_2_fu_764_conv_out_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_0_V_ce0 <= grp_conv_2_fu_740_conv_out_0_V_ce0;
        else 
            conv_2_out_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_0_V_ce1_assign_proc : process(grp_max_pool_2_fu_764_conv_out_0_V_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_0_V_ce1 <= grp_max_pool_2_fu_764_conv_out_0_V_ce1;
        else 
            conv_2_out_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_0_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_740_conv_out_0_V_d0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_0_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_0_V_d0 <= grp_conv_2_fu_740_conv_out_0_V_d0;
        else 
            conv_2_out_0_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_0_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_802_p2, grp_conv_2_fu_740_conv_out_0_V_we0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_802_p2 = ap_const_lv1_1))) then 
            conv_2_out_0_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_0_V_we0 <= grp_conv_2_fu_740_conv_out_0_V_we0;
        else 
            conv_2_out_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_1_V_address0_assign_proc : process(grp_conv_2_fu_740_conv_out_1_V_address0, grp_max_pool_2_fu_764_conv_out_1_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_1_V_address0 <= grp_max_pool_2_fu_764_conv_out_1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_1_V_address0 <= grp_conv_2_fu_740_conv_out_1_V_address0;
        else 
            conv_2_out_1_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    conv_2_out_1_V_ce0_assign_proc : process(grp_conv_2_fu_740_conv_out_1_V_ce0, grp_max_pool_2_fu_764_conv_out_1_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_1_V_ce0 <= grp_max_pool_2_fu_764_conv_out_1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_1_V_ce0 <= grp_conv_2_fu_740_conv_out_1_V_ce0;
        else 
            conv_2_out_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_1_V_ce1_assign_proc : process(grp_max_pool_2_fu_764_conv_out_1_V_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_1_V_ce1 <= grp_max_pool_2_fu_764_conv_out_1_V_ce1;
        else 
            conv_2_out_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_1_V_we0_assign_proc : process(grp_conv_2_fu_740_conv_out_1_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_1_V_we0 <= grp_conv_2_fu_740_conv_out_1_V_we0;
        else 
            conv_2_out_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_2_V_address0_assign_proc : process(grp_conv_2_fu_740_conv_out_2_V_address0, grp_max_pool_2_fu_764_conv_out_2_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_2_V_address0 <= grp_max_pool_2_fu_764_conv_out_2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_2_V_address0 <= grp_conv_2_fu_740_conv_out_2_V_address0;
        else 
            conv_2_out_2_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    conv_2_out_2_V_ce0_assign_proc : process(grp_conv_2_fu_740_conv_out_2_V_ce0, grp_max_pool_2_fu_764_conv_out_2_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_2_V_ce0 <= grp_max_pool_2_fu_764_conv_out_2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_2_V_ce0 <= grp_conv_2_fu_740_conv_out_2_V_ce0;
        else 
            conv_2_out_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_2_V_ce1_assign_proc : process(grp_max_pool_2_fu_764_conv_out_2_V_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_2_V_ce1 <= grp_max_pool_2_fu_764_conv_out_2_V_ce1;
        else 
            conv_2_out_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_2_V_we0_assign_proc : process(grp_conv_2_fu_740_conv_out_2_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_2_V_we0 <= grp_conv_2_fu_740_conv_out_2_V_we0;
        else 
            conv_2_out_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_3_V_address0_assign_proc : process(grp_conv_2_fu_740_conv_out_3_V_address0, grp_max_pool_2_fu_764_conv_out_3_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_3_V_address0 <= grp_max_pool_2_fu_764_conv_out_3_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_3_V_address0 <= grp_conv_2_fu_740_conv_out_3_V_address0;
        else 
            conv_2_out_3_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    conv_2_out_3_V_ce0_assign_proc : process(grp_conv_2_fu_740_conv_out_3_V_ce0, grp_max_pool_2_fu_764_conv_out_3_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_3_V_ce0 <= grp_max_pool_2_fu_764_conv_out_3_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_3_V_ce0 <= grp_conv_2_fu_740_conv_out_3_V_ce0;
        else 
            conv_2_out_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_3_V_ce1_assign_proc : process(grp_max_pool_2_fu_764_conv_out_3_V_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_3_V_ce1 <= grp_max_pool_2_fu_764_conv_out_3_V_ce1;
        else 
            conv_2_out_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_3_V_we0_assign_proc : process(grp_conv_2_fu_740_conv_out_3_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_3_V_we0 <= grp_conv_2_fu_740_conv_out_3_V_we0;
        else 
            conv_2_out_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_4_V_address0_assign_proc : process(grp_conv_2_fu_740_conv_out_4_V_address0, grp_max_pool_2_fu_764_conv_out_4_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_4_V_address0 <= grp_max_pool_2_fu_764_conv_out_4_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_4_V_address0 <= grp_conv_2_fu_740_conv_out_4_V_address0;
        else 
            conv_2_out_4_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    conv_2_out_4_V_ce0_assign_proc : process(grp_conv_2_fu_740_conv_out_4_V_ce0, grp_max_pool_2_fu_764_conv_out_4_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_4_V_ce0 <= grp_max_pool_2_fu_764_conv_out_4_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_4_V_ce0 <= grp_conv_2_fu_740_conv_out_4_V_ce0;
        else 
            conv_2_out_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_4_V_ce1_assign_proc : process(grp_max_pool_2_fu_764_conv_out_4_V_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_4_V_ce1 <= grp_max_pool_2_fu_764_conv_out_4_V_ce1;
        else 
            conv_2_out_4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_4_V_we0_assign_proc : process(grp_conv_2_fu_740_conv_out_4_V_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_4_V_we0 <= grp_conv_2_fu_740_conv_out_4_V_we0;
        else 
            conv_2_out_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_1437_p2 <= std_logic_vector(unsigned(d_0_i_reg_695) + unsigned(ap_const_lv4_1));
    dense_1_bias_V_address0 <= zext_ln14_reg_1959(6 - 1 downto 0);

    dense_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_address0_assign_proc : process(zext_ln14_reg_1959, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state20, zext_ln14_4_fu_1320_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_1_out_V_address0 <= zext_ln14_4_fu_1320_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dense_1_out_V_address0 <= zext_ln14_reg_1959(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_1_out_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            dense_1_out_V_address0 <= "XXXXXX";
        end if; 
    end process;


    dense_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state22, grp_flat_fu_792_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((grp_flat_fu_792_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            dense_1_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, select_ln19_fu_1279_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dense_1_out_V_d0 <= select_ln19_fu_1279_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_1_out_V_d0 <= ap_const_lv13_0;
        else 
            dense_1_out_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_out_V_we0_assign_proc : process(grp_flat_fu_792_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((grp_flat_fu_792_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            dense_1_out_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_address0 <= zext_ln1117_fu_1217_p1(15 - 1 downto 0);

    dense_1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_bias_V_address0 <= zext_ln14_2_reg_2011(5 - 1 downto 0);

    dense_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_address0_assign_proc : process(ap_CS_fsm_state17, zext_ln14_2_reg_2011, ap_CS_fsm_state26, ap_CS_fsm_state24, zext_ln48_1_fu_1463_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_2_out_V_address0 <= zext_ln48_1_fu_1463_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dense_2_out_V_address0 <= zext_ln14_2_reg_2011(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dense_2_out_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            dense_2_out_V_address0 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state24, select_ln19_1_fu_1422_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dense_2_out_V_d0 <= select_ln19_1_fu_1422_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dense_2_out_V_d0 <= ap_const_lv13_0;
        else 
            dense_2_out_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_out_V_we0_assign_proc : process(ap_CS_fsm_state17, icmp_ln9_fu_1169_p2, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1169_p2 = ap_const_lv1_1)))) then 
            dense_2_out_V_we0 <= ap_const_logic_1;
        else 
            dense_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_weights_V_address0 <= sext_ln1117_fu_1360_p1(11 - 1 downto 0);

    dense_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(zext_ln48_reg_2058, grp_soft_max_fu_774_dense_array_V_address0, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_address0 <= zext_ln48_reg_2058(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_address0 <= grp_soft_max_fu_774_dense_array_V_address0;
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(grp_soft_max_fu_774_dense_array_V_ce0, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_ce0 <= grp_soft_max_fu_774_dense_array_V_ce0;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_d0_assign_proc : process(grp_soft_max_fu_774_dense_array_V_d0, ap_CS_fsm_state28, ap_CS_fsm_state29, add_ln703_2_fu_1537_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_d0 <= add_ln703_2_fu_1537_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_d0 <= grp_soft_max_fu_774_dense_array_V_d0;
        else 
            dense_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_array_V_we0_assign_proc : process(grp_soft_max_fu_774_dense_array_V_we0, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_we0 <= grp_soft_max_fu_774_dense_array_V_we0;
        else 
            dense_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_V_address0 <= zext_ln48_reg_2058(4 - 1 downto 0);

    dense_out_bias_V_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_out_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_weights_V_address0 <= zext_ln1116_9_fu_1503_p1(9 - 1 downto 0);

    dense_out_weights_V_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_out_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_898_p4 <= ireg_V_fu_882_p1(62 downto 52);
    f_fu_1457_p2 <= std_logic_vector(unsigned(f_0_i_reg_718) + unsigned(ap_const_lv5_1));

    flat_array_V_address0_assign_proc : process(ap_CS_fsm_state18, grp_flat_fu_792_flat_array_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state14, zext_ln14_3_fu_1201_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            flat_array_V_address0 <= zext_ln14_3_fu_1201_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flat_array_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_address0 <= grp_flat_fu_792_flat_array_V_address0;
        else 
            flat_array_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_state18, grp_max_pool_2_fu_764_ap_done, grp_flat_fu_792_flat_array_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((grp_max_pool_2_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_ce0 <= grp_flat_fu_792_flat_array_V_ce0;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_V_d0_assign_proc : process(grp_flat_fu_792_flat_array_V_d0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flat_array_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_d0 <= grp_flat_fu_792_flat_array_V_d0;
        else 
            flat_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    flat_array_V_we0_assign_proc : process(grp_max_pool_2_fu_764_ap_done, grp_flat_fu_792_flat_array_V_we0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if (((grp_max_pool_2_fu_764_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            flat_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_we0 <= grp_flat_fu_792_flat_array_V_we0;
        else 
            flat_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_1_fu_754_ap_start <= grp_conv_1_fu_754_ap_start_reg;
    grp_conv_2_fu_740_ap_start <= grp_conv_2_fu_740_ap_start_reg;
    grp_flat_fu_792_ap_start <= grp_flat_fu_792_ap_start_reg;
    grp_fu_1852_p2 <= (p_Val2_29_reg_627 & ap_const_lv8_0);
    grp_fu_1861_p1 <= grp_fu_1861_p10(13 - 1 downto 0);
    grp_fu_1861_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_1_out_V_q0),22));
    grp_fu_1861_p2 <= (p_Val2_32_reg_672 & ap_const_lv8_0);
    grp_fu_1870_p0 <= grp_fu_1870_p00(13 - 1 downto 0);
    grp_fu_1870_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    grp_fu_1870_p2 <= (p_Val2_38_reg_706 & ap_const_lv8_0);
    grp_max_pool_1_fu_786_ap_start <= grp_max_pool_1_fu_786_ap_start_reg;
    grp_max_pool_2_fu_764_ap_start <= grp_max_pool_2_fu_764_ap_start_reg;
    grp_soft_max_fu_774_ap_start <= grp_soft_max_fu_774_ap_start_reg;
    i_1_fu_1175_p2 <= std_logic_vector(unsigned(i_0_i_reg_616) + unsigned(ap_const_lv6_1));
    i_2_fu_1294_p2 <= std_logic_vector(unsigned(i_0_i12_reg_661) + unsigned(ap_const_lv5_1));
    i_3_fu_1550_p2 <= std_logic_vector(unsigned(i24_0_reg_729) + unsigned(ap_const_lv4_1));
    i_fu_808_p2 <= std_logic_vector(unsigned(i_0_reg_584) + unsigned(ap_const_lv5_1));
    icmp_ln13_1_fu_1308_p2 <= "1" when (j_0_i17_reg_684 = ap_const_lv6_32) else "0";
    icmp_ln13_fu_1189_p2 <= "1" when (j_0_i_reg_639 = ap_const_lv9_190) else "0";
    icmp_ln23_fu_802_p2 <= "1" when (i_0_reg_584 = ap_const_lv5_1C) else "0";
    icmp_ln25_fu_850_p2 <= "1" when (j_0_reg_605 = ap_const_lv5_1C) else "0";
    icmp_ln41_fu_1431_p2 <= "1" when (d_0_i_reg_695 = ap_const_lv4_A) else "0";
    icmp_ln46_fu_1451_p2 <= "1" when (f_0_i_reg_718 = ap_const_lv5_1E) else "0";
    icmp_ln571_fu_942_p2 <= "1" when (trunc_ln556_fu_886_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_954_p2 <= "1" when (signed(F2_fu_948_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln582_fu_984_p2 <= "1" when (F2_fu_948_p2 = ap_const_lv12_8) else "0";
    icmp_ln585_fu_994_p2 <= "1" when (unsigned(sh_amt_fu_972_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_1000_p2 <= "1" when (unsigned(sh_amt_fu_972_p3) < unsigned(ap_const_lv12_E)) else "0";
    icmp_ln69_fu_1544_p2 <= "1" when (i24_0_reg_729 = ap_const_lv4_A) else "0";
    icmp_ln935_fu_1561_p2 <= "1" when (prediction_V_q0 = ap_const_lv14_0) else "0";
    icmp_ln947_1_fu_1673_p2 <= "0" when (p_Result_36_fu_1667_p2 = ap_const_lv14_0) else "1";
    icmp_ln947_fu_1641_p2 <= "1" when (signed(tmp_31_fu_1631_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_1733_p2 <= "1" when (signed(lsb_index_fu_1625_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln9_1_fu_1288_p2 <= "1" when (i_0_i12_reg_661 = ap_const_lv5_1E) else "0";
    icmp_ln9_fu_1169_p2 <= "1" when (i_0_i_reg_616 = ap_const_lv6_32) else "0";
    ireg_V_fu_882_p1 <= grp_fu_798_p1;
    ix_in_fu_814_p2 <= std_logic_vector(unsigned(ix_in_0_reg_572) + unsigned(ap_const_lv10_1C));
    j_1_fu_1195_p2 <= std_logic_vector(unsigned(j_0_i_reg_639) + unsigned(ap_const_lv9_1));
    j_2_fu_1314_p2 <= std_logic_vector(unsigned(j_0_i17_reg_684) + unsigned(ap_const_lv6_1));
    j_fu_856_p2 <= std_logic_vector(unsigned(j_0_reg_605) + unsigned(ap_const_lv5_1));
    
    l_fu_1607_p3_proc : process(p_Result_42_fu_1599_p3)
    begin
        l_fu_1607_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_42_fu_1599_p3(i) = '1' then
                l_fu_1607_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_1625_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_1615_p2));
    lshr_ln947_fu_1661_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln947_fu_1657_p1(14-1 downto 0)))));
    lshr_ln958_fu_1751_p2 <= std_logic_vector(shift_right(unsigned(m_fu_1743_p1),to_integer(unsigned('0' & add_ln958_fu_1746_p2(31-1 downto 0)))));
    m_12_fu_1768_p3 <= 
        lshr_ln958_fu_1751_p2 when (icmp_ln958_reg_2141(0) = '1') else 
        shl_ln958_fu_1762_p2;
    m_13_fu_1775_p2 <= std_logic_vector(unsigned(m_12_fu_1768_p3) + unsigned(or_ln_reg_2136));
    m_16_fu_1790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_1780_p4),32));
    m_fu_1743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_13_reg_2125),32));
    m_s_fu_1780_p4 <= m_13_fu_1775_p2(31 downto 1);
    man_V_1_fu_928_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_40_fu_924_p1));
    man_V_2_fu_934_p3 <= 
        man_V_1_fu_928_p2 when (p_Result_39_fu_890_p3(0) = '1') else 
        p_Result_40_fu_924_p1;

    max_pool_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_740_input_V_address0, grp_max_pool_1_fu_786_max_pool_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_address0 <= grp_max_pool_1_fu_786_max_pool_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_address0 <= grp_conv_2_fu_740_input_V_address0;
        else 
            max_pool_1_out_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_740_input_V_ce0, grp_max_pool_1_fu_786_max_pool_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_ce0 <= grp_max_pool_1_fu_786_max_pool_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_ce0 <= grp_conv_2_fu_740_input_V_ce0;
        else 
            max_pool_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_1_fu_786_max_pool_out_V_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_d0 <= grp_max_pool_1_fu_786_max_pool_out_V_d0;
        else 
            max_pool_1_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_802_p2, grp_max_pool_1_fu_786_max_pool_out_V_we0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_802_p2 = ap_const_lv1_1))) then 
            max_pool_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_we0 <= grp_max_pool_1_fu_786_max_pool_out_V_we0;
        else 
            max_pool_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_764_max_pool_out_V_address0, grp_flat_fu_792_max_pool_out_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            max_pool_2_out_V_address0 <= grp_flat_fu_792_max_pool_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_address0 <= grp_max_pool_2_fu_764_max_pool_out_V_address0;
        else 
            max_pool_2_out_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_764_max_pool_out_V_ce0, grp_flat_fu_792_max_pool_out_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            max_pool_2_out_V_ce0 <= grp_flat_fu_792_max_pool_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_ce0 <= grp_max_pool_2_fu_764_max_pool_out_V_ce0;
        else 
            max_pool_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_ce1_assign_proc : process(grp_max_pool_2_fu_764_max_pool_out_V_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_ce1 <= grp_max_pool_2_fu_764_max_pool_out_V_ce1;
        else 
            max_pool_2_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_764_max_pool_out_V_d0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_d0 <= grp_max_pool_2_fu_764_max_pool_out_V_d0;
        else 
            max_pool_2_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_802_p2, grp_max_pool_2_fu_764_max_pool_out_V_we0, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_802_p2 = ap_const_lv1_1))) then 
            max_pool_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_we0 <= grp_max_pool_2_fu_764_max_pool_out_V_we0;
        else 
            max_pool_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_we1_assign_proc : process(grp_max_pool_2_fu_764_max_pool_out_V_we1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_we1 <= grp_max_pool_2_fu_764_max_pool_out_V_we1;
        else 
            max_pool_2_out_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln581_fu_1097_p2 <= (or_ln582_fu_1061_p2 or icmp_ln581_fu_954_p2);
    or_ln582_fu_1061_p2 <= (icmp_ln582_fu_984_p2 or icmp_ln571_fu_942_p2);
    or_ln603_1_fu_1137_p2 <= (and_ln585_fu_1085_p2 or and_ln582_fu_1055_p2);
    or_ln603_2_fu_1151_p2 <= (or_ln603_fu_1123_p2 or or_ln603_1_fu_1137_p2);
    or_ln603_fu_1123_p2 <= (and_ln603_fu_1109_p2 or and_ln585_1_fu_1091_p2);
    or_ln949_fu_1719_p2 <= (and_ln949_fu_1713_p2 or a_fu_1679_p2);
    or_ln_fu_1725_p3 <= (ap_const_lv31_0 & or_ln949_fu_1719_p2);
    p_Result_36_fu_1667_p2 <= (tmp_V_13_fu_1581_p3 and lshr_ln947_fu_1661_p2);
    p_Result_37_fu_1705_p3 <= tmp_V_13_fu_1581_p3(to_integer(unsigned(add_ln949_fu_1699_p2)) downto to_integer(unsigned(add_ln949_fu_1699_p2))) when (to_integer(unsigned(add_ln949_fu_1699_p2))>= 0 and to_integer(unsigned(add_ln949_fu_1699_p2))<=13) else "-";
    p_Result_39_fu_890_p3 <= ireg_V_fu_882_p1(63 downto 63);
    p_Result_40_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_916_p3),54));
    p_Result_41_fu_1567_p3 <= prediction_V_q0(13 downto 13);
    p_Result_42_fu_1599_p3 <= (ap_const_lv18_3FFFF & p_Result_s_fu_1589_p4);
    p_Result_43_fu_1828_p5 <= (tmp_7_fu_1821_p3 & m_16_fu_1790_p1(22 downto 0));
    
    p_Result_s_fu_1589_p4_proc : process(tmp_V_13_fu_1581_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_1589_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_13_fu_1581_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_1589_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_1589_p4_i) := tmp_V_13_fu_1581_p3(14-1-p_Result_s_fu_1589_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_1589_p4 <= resvalue(14-1 downto 0);
    end process;


    prediction_V_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state30, zext_ln70_fu_1556_p1, grp_soft_max_fu_774_prediction_V_address0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            prediction_V_address0 <= zext_ln70_fu_1556_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            prediction_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_address0 <= grp_soft_max_fu_774_prediction_V_address0;
        else 
            prediction_V_address0 <= "XXXX";
        end if; 
    end process;


    prediction_V_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state30, grp_soft_max_fu_774_prediction_V_ce0, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            prediction_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_ce0 <= grp_soft_max_fu_774_prediction_V_ce0;
        else 
            prediction_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_V_d0_assign_proc : process(ap_CS_fsm_state21, grp_soft_max_fu_774_prediction_V_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            prediction_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_d0 <= grp_soft_max_fu_774_prediction_V_d0;
        else 
            prediction_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    prediction_V_we0_assign_proc : process(ap_CS_fsm_state21, icmp_ln9_1_fu_1288_p2, grp_soft_max_fu_774_prediction_V_we0, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1288_p2 = ap_const_lv1_1))) then 
            prediction_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_we0 <= grp_soft_max_fu_774_prediction_V_we0;
        else 
            prediction_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_address0 <= zext_ln70_reg_2105(4 - 1 downto 0);

    prediction_output_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_output_ce0 <= ap_const_logic_1;
        else 
            prediction_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_d0 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_2115(0) = '1') else 
        bitcast_ln739_fu_1840_p1;

    prediction_output_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_output_we0 <= ap_const_logic_1;
        else 
            prediction_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln19_1_fu_1422_p3 <= 
        ap_const_lv13_0 when (tmp_29_fu_1414_p3(0) = '1') else 
        add_ln203_1_fu_1408_p2;
    select_ln19_fu_1279_p3 <= 
        ap_const_lv13_0 when (tmp_28_fu_1271_p3(0) = '1') else 
        add_ln203_fu_1265_p2;
    select_ln588_fu_1031_p3 <= 
        ap_const_lv14_3FFF when (tmp_27_fu_1023_p3(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_1_fu_1129_p3 <= 
        select_ln588_fu_1031_p3 when (and_ln585_fu_1085_p2(0) = '1') else 
        trunc_ln583_fu_990_p1;
    select_ln603_2_fu_1143_p3 <= 
        select_ln603_fu_1115_p3 when (or_ln603_fu_1123_p2(0) = '1') else 
        select_ln603_1_fu_1129_p3;
    select_ln603_3_fu_1157_p3 <= 
        select_ln603_2_fu_1143_p3 when (or_ln603_2_fu_1151_p2(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_fu_1115_p3 <= 
        shl_ln604_fu_1043_p2 when (and_ln603_fu_1109_p2(0) = '1') else 
        trunc_ln586_fu_1016_p1;
    select_ln964_fu_1802_p3 <= 
        ap_const_lv8_7F when (tmp_33_fu_1794_p3(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1117_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_2_fu_1355_p2),64));

    sext_ln1265_1_fu_1390_p0 <= dense_2_bias_V_q0;
        sext_ln1265_1_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_1_fu_1390_p0),14));

        sext_ln1265_2_fu_1533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_out_bias_V_q0),14));

    sext_ln1265_fu_1247_p0 <= dense_1_bias_V_q0;
        sext_ln1265_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_1247_p0),14));

        sext_ln203_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_17_reg_1925),64));

        sext_ln581_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_972_p3),32));

    sext_ln581cast_fu_1039_p1 <= sext_ln581_fu_980_p1(14 - 1 downto 0);
    sext_ln703_2_fu_1398_p0 <= dense_2_bias_V_q0;
        sext_ln703_2_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_1398_p0),13));

    sext_ln703_fu_1255_p0 <= dense_1_bias_V_q0;
        sext_ln703_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_1255_p0),13));

    sh_amt_fu_972_p3 <= 
        add_ln581_fu_960_p2 when (icmp_ln581_fu_954_p2(0) = '1') else 
        sub_ln581_fu_966_p2;
    shl_ln604_fu_1043_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_990_p1),to_integer(unsigned('0' & sext_ln581cast_fu_1039_p1(14-1 downto 0)))));
    shl_ln958_fu_1762_p2 <= std_logic_vector(shift_left(unsigned(m_fu_1743_p1),to_integer(unsigned('0' & sub_ln958_fu_1757_p2(31-1 downto 0)))));
    sub_ln1117_fu_1349_p2 <= std_logic_vector(unsigned(zext_ln1117_6_fu_1333_p1) - unsigned(zext_ln1117_7_fu_1345_p1));
    sub_ln203_fu_844_p2 <= std_logic_vector(unsigned(zext_ln203_fu_828_p1) - unsigned(zext_ln203_20_fu_840_p1));
    sub_ln581_fu_966_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_948_p2));
    sub_ln944_fu_1615_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_1607_p3));
    sub_ln947_fu_1651_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln947_fu_1647_p1));
    sub_ln958_fu_1757_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_2130));
    sub_ln964_fu_1810_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(trunc_ln943_reg_2146));
    tmp_18_fu_832_p3 <= (i_0_reg_584 & ap_const_lv2_0);
    tmp_19_fu_1325_p3 <= (j_0_i17_reg_684 & ap_const_lv5_0);
    tmp_20_fu_1337_p3 <= (j_0_i17_reg_684 & ap_const_lv1_0);
    tmp_21_fu_1468_p3 <= (f_0_i_reg_718 & ap_const_lv3_0);
    tmp_22_fu_1480_p3 <= (f_0_i_reg_718 & ap_const_lv1_0);
    tmp_27_fu_1023_p3 <= bitcast_ln696_fu_1020_p1(31 downto 31);
    tmp_28_fu_1271_p3 <= add_ln703_fu_1259_p2(13 downto 13);
    tmp_29_fu_1414_p3 <= add_ln703_1_fu_1402_p2(13 downto 13);
    tmp_31_fu_1631_p4 <= lsb_index_fu_1625_p2(31 downto 1);
    tmp_32_fu_1685_p3 <= lsb_index_fu_1625_p2(31 downto 31);
    tmp_33_fu_1794_p3 <= m_13_fu_1775_p2(25 downto 25);
    tmp_7_fu_1821_p3 <= (p_Result_41_reg_2120 & add_ln964_fu_1815_p2);
    tmp_V_13_fu_1581_p3 <= 
        tmp_V_fu_1575_p2 when (p_Result_41_fu_1567_p3(0) = '1') else 
        prediction_V_q0;
    tmp_V_fu_1575_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(prediction_V_q0));
    tmp_fu_916_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_912_p1);
    tmp_s_fu_820_p3 <= (i_0_reg_584 & ap_const_lv5_0);
    trunc_ln556_fu_886_p1 <= ireg_V_fu_882_p1(63 - 1 downto 0);
    trunc_ln565_fu_912_p1 <= ireg_V_fu_882_p1(52 - 1 downto 0);
    trunc_ln583_fu_990_p1 <= man_V_2_fu_934_p3(14 - 1 downto 0);
    trunc_ln586_fu_1016_p1 <= ashr_ln586_fu_1010_p2(14 - 1 downto 0);
    trunc_ln703_1_fu_1394_p1 <= p_Val2_32_reg_672(13 - 1 downto 0);
    trunc_ln703_fu_1251_p1 <= p_Val2_29_reg_627(13 - 1 downto 0);
    trunc_ln943_fu_1739_p1 <= l_fu_1607_p3(8 - 1 downto 0);
    trunc_ln944_fu_1621_p1 <= sub_ln944_fu_1615_p2(14 - 1 downto 0);
    trunc_ln947_fu_1647_p1 <= sub_ln944_fu_1615_p2(4 - 1 downto 0);
    xor_ln571_fu_1049_p2 <= (icmp_ln571_fu_942_p2 xor ap_const_lv1_1);
    xor_ln581_fu_1103_p2 <= (or_ln581_fu_1097_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1067_p2 <= (or_ln582_fu_1061_p2 xor ap_const_lv1_1);
    xor_ln585_fu_1079_p2 <= (icmp_ln585_fu_994_p2 xor ap_const_lv1_1);
    xor_ln949_fu_1693_p2 <= (tmp_32_fu_1685_p3 xor ap_const_lv1_1);
    zext_ln1116_8_fu_1488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1480_p3),9));
    zext_ln1116_9_fu_1503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_4_fu_1498_p2),64));
    zext_ln1116_fu_1476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1468_p3),9));
    zext_ln1117_6_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_1325_p3),12));
    zext_ln1117_7_fu_1345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_1337_p3),12));
    zext_ln1117_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_fu_1212_p2),64));
    zext_ln13_2_fu_1304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i12_reg_661),12));
    zext_ln13_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_616),15));
    zext_ln14_2_fu_1300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i12_reg_661),64));
    zext_ln14_3_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_639),64));
    zext_ln14_4_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i17_reg_684),64));
    zext_ln14_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_616),64));
    zext_ln203_20_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_832_p3),11));
    zext_ln203_21_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_605),11));
    zext_ln203_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_820_p3),11));
    zext_ln27_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_in_1_reg_595),64));
    zext_ln461_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_898_p4),12));
    zext_ln46_fu_1447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_i_reg_695),9));
    zext_ln48_1_fu_1463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_i_reg_718),64));
    zext_ln48_fu_1443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_i_reg_695),64));
    zext_ln586_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_980_p1),54));
    zext_ln70_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i24_0_reg_729),64));
    zext_ln947_fu_1657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_1651_p2),14));
end behav;
