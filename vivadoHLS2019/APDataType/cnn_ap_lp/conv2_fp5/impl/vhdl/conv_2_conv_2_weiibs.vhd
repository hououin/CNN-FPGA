-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiibs_rom is 
    generic(
             DWIDTH     : integer := 9; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000001100", 1 => "000011111", 2 => "111111011", 3 => "110010110", 
    4 => "000010000", 5 => "110101100", 6 => "111001010", 7 => "000100101", 
    8 => "000111000", 9 => "000011001", 10 => "111111010", 11 => "000011000", 
    12 => "001010101", 13 => "000001000", 14 => "111101000", 15 => "110000011", 
    16 => "000001111", 17 => "000111000", 18 => "000100000", 19 => "111001011", 
    20 => "000100000", 21 => "110101000", 22 => "111101110", 23 => "000000001", 
    24 => "111110000", 25 => "111010111", 26 => "000100100", 27 => "000100011", 
    28 => "000101010", 29 => "110110000", 30 => "111010010", 31 => "111011000", 
    32 => "000110001", 33 => "000010100", 34 => "001010000", 35 => "111100100", 
    36 => "000100111", 37 => "111010101", 38 => "111001101", 39 => "000100000", 
    40 => "111000000", 41 => "000110111", 42 => "000011010", 43 => "000001110", 
    44 => "000000010", 45 => "110111101", 46 => "111100000", 47 => "000001011", 
    48 => "000110100", 49 => "111000101", 50 => "000001011", 51 => "101111001", 
    52 => "111111011", 53 => "111001111", 54 => "110111111", 55 => "000011011", 
    56 => "001100001", 57 => "001011101", 58 => "000001011", 59 => "111110011", 
    60 => "000010011", 61 => "000111010", 62 => "000000111", 63 => "001000100", 
    64 => "110101010", 65 => "110101011", 66 => "111011000", 67 => "000001101", 
    68 => "111001110", 69 => "111000110", 70 => "000000011", 71 => "000010011", 
    72 => "000011101", 73 => "000001001", 74 => "001001101", 75 => "111011100", 
    76 => "001000001", 77 => "110001011", 78 => "000101110", 79 => "111110000", 
    80 => "000111000", 81 => "111010011", 82 => "001001111", 83 => "000111101", 
    84 => "110111001", 85 => "101011100", 86 => "000100100", 87 => "000010101", 
    88 => "111111110", 89 => "000011101", 90 => "110110110", 91 => "111001100", 
    92 => "000111011", 93 => "111011011", 94 => "111111110", 95 => "000111011", 
    96 => "000011010", 97 => "111101100", 98 => "101101100", 99 => "000001010", 
    100 => "000001110", 101 => "111111111", 102 => "000011001", 103 => "111001110", 
    104 => "001010000", 105 => "001001000", 106 => "000011011", 107 => "000100010", 
    108 => "000100000", 109 => "111111111", 110 => "110100011", 111 => "000110001", 
    112 => "000101100", 113 => "111011000", 114 => "000000001", 115 => "000100110", 
    116 => "111101110", 117 => "000101101", 118 => "111111010", 119 => "111011001", 
    120 => "111000100", 121 => "000111000", 122 => "000011000", 123 => "111101111", 
    124 => "000000101", 125 => "000000111", 126 => "000010011", 127 => "001000000", 
    128 => "111100011", 129 => "111000001", 130 => "000010100", 131 => "000001111", 
    132 => "111001011", 133 => "000101111", 134 => "111111100", 135 => "110100001", 
    136 => "000000110", 137 => "111111001", 138 => "000010011", 139 => "111101110", 
    140 => "000001001", 141 => "000001111", 142 => "001101000", 143 => "000101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiibs is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiibs is
    component conv_2_conv_2_weiibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiibs_rom_U :  component conv_2_conv_2_weiibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


