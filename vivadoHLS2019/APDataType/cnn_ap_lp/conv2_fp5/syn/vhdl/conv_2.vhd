-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    input_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce1 : OUT STD_LOGIC;
    input_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_we0 : OUT STD_LOGIC;
    conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of conv_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv14_3FCB : STD_LOGIC_VECTOR (13 downto 0) := "11111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_weights_V_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_2_weights_V_0_ce0 : STD_LOGIC;
    signal conv_2_weights_V_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_2_weights_V_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_2_weights_V_1_ce0 : STD_LOGIC;
    signal conv_2_weights_V_1_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_2_weights_V_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_2_weights_V_2_ce0 : STD_LOGIC;
    signal conv_2_weights_V_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_2_weights_V_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_2_weights_V_3_ce0 : STD_LOGIC;
    signal conv_2_weights_V_3_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_2_weights_V_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_2_weights_V_4_ce0 : STD_LOGIC;
    signal conv_2_weights_V_4_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_weights_V_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_2_weights_V_5_ce0 : STD_LOGIC;
    signal conv_2_weights_V_5_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_2_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_2_bias_V_ce0 : STD_LOGIC;
    signal conv_2_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_reg_402 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_0_reg_413 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_424 : STD_LOGIC_VECTOR (13 downto 0);
    signal wc_0_reg_436 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln8_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_469_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln8_reg_1466 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln11_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_1471 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_1_fu_495_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_1_reg_1476 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_2_fu_537_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln37_2_reg_1482 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln37_3_fu_545_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_3_reg_1487 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1493 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_10_fu_568_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_10_reg_1498 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_out_V_addr_reg_1503 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln18_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln18_1_fu_593_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_1_reg_1512 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln18_fu_611_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_reg_1517 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_fu_619_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_1522 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln1117_fu_726_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1117_reg_1557 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal conv_2_weights_V_2_l_reg_1585 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_1590 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_weights_V_3_l_reg_1595 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_2_weights_V_4_l_reg_1600 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_weights_V_5_l_reg_1605 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_8_reg_1620 : STD_LOGIC_VECTOR (13 downto 0);
    signal wc_fu_957_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_1625 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_V_4_fu_1049_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_4_reg_1640 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln885_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1648 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_1061_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1652 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_V_5_fu_1073_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_5_reg_1657 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln894_fu_1106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_1663 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_1216_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_1669 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_1224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_1674 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_1230_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1679 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln924_fu_1361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_reg_1689 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_fu_1367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_reg_1694 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_1383_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal select_ln11_fu_1394_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal indvar_flatten21_reg_346 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_0_reg_357 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten7_reg_368 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_380 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_391 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_406_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_417_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_440_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_450_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln924_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_12_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_3_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_3_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_4_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_5_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln1117_6_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_7_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln1117_8_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_458_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_475_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln14_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_487_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln37_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln37_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_525_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1401_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_11_fu_572_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_cast_fu_557_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_6_fu_576_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln21_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_599_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_631_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_1_fu_639_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1116_fu_627_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_649_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_fu_653_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_2_fu_666_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1116_fu_643_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1116_fu_670_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_cast_fu_676_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_1_fu_684_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_fu_662_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_699_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1410_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_715_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_708_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1117_2_fu_722_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln1117_fu_737_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1117_1_fu_748_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1117_2_fu_758_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_fu_1420_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln_fu_779_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1_fu_776_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln728_fu_787_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln703_fu_791_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_1_fu_1427_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_fu_795_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_fu_812_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln728_1_fu_822_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_3_fu_809_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln728_1_fu_830_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln703_2_fu_834_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1192_1_fu_838_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1117_3_fu_854_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1117_4_fu_864_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_2_fu_1434_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln728_2_fu_884_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_5_fu_881_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln728_2_fu_891_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln703_3_fu_895_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_3_fu_1441_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_2_fu_899_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_fu_915_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln728_3_fu_925_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_7_fu_912_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln728_3_fu_933_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln703_4_fu_937_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1192_3_fu_941_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_4_fu_1448_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln728_4_fu_972_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_9_fu_969_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln728_4_fu_979_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln703_5_fu_983_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_5_fu_1455_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_4_fu_987_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_9_fu_1003_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln728_5_fu_1013_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_11_fu_1000_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln728_5_fu_1021_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln703_6_fu_1025_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1192_5_fu_1029_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1265_fu_1045_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_1068_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_1080_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_25_fu_1090_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_1098_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_1116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1122_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_1138_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln897_fu_1142_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln897_fu_1148_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln897_fu_1152_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_21_fu_1158_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln897_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1176_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_1112_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln899_fu_1190_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_22_fu_1196_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_1_fu_1237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_1240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_1245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_1255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_1234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_1260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_1251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_1264_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_1277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_1270_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_1280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_1286_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_13_fu_1300_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_1316_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_1308_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_1321_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_6_fu_1296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_1327_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_26_fu_1334_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_1351_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln924_fu_1373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_1_fu_1388_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1401_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1401_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1401_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1410_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1410_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1410_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1401_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1401_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1410_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1410_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_dcmp_64ns_64ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_4nmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_mul_mul_8s_14ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component cnn_mul_mul_9s_14ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component cnn_mul_mul_10s_1pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component conv_2_conv_2_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_2_conv_2_weig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component conv_2_conv_2_weihbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_2_conv_2_weiibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component conv_2_conv_2_weijbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_2_conv_2_weikbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component conv_2_conv_2_bialbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    conv_2_weights_V_0_U : component conv_2_conv_2_weifYi
    generic map (
        DataWidth => 8,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_V_0_address0,
        ce0 => conv_2_weights_V_0_ce0,
        q0 => conv_2_weights_V_0_q0);

    conv_2_weights_V_1_U : component conv_2_conv_2_weig8j
    generic map (
        DataWidth => 9,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_V_1_address0,
        ce0 => conv_2_weights_V_1_ce0,
        q0 => conv_2_weights_V_1_q0);

    conv_2_weights_V_2_U : component conv_2_conv_2_weihbi
    generic map (
        DataWidth => 8,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_V_2_address0,
        ce0 => conv_2_weights_V_2_ce0,
        q0 => conv_2_weights_V_2_q0);

    conv_2_weights_V_3_U : component conv_2_conv_2_weiibs
    generic map (
        DataWidth => 9,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_V_3_address0,
        ce0 => conv_2_weights_V_3_ce0,
        q0 => conv_2_weights_V_3_q0);

    conv_2_weights_V_4_U : component conv_2_conv_2_weijbC
    generic map (
        DataWidth => 10,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_V_4_address0,
        ce0 => conv_2_weights_V_4_ce0,
        q0 => conv_2_weights_V_4_q0);

    conv_2_weights_V_5_U : component conv_2_conv_2_weikbM
    generic map (
        DataWidth => 9,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_V_5_address0,
        ce0 => conv_2_weights_V_5_ce0,
        q0 => conv_2_weights_V_5_q0);

    conv_2_bias_V_U : component conv_2_conv_2_bialbW
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_V_address0,
        ce0 => conv_2_bias_V_ce0,
        q0 => conv_2_bias_V_q0);

    cnn_dcmp_64ns_64ndEe_U11 : component cnn_dcmp_64ns_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_458_p0,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_458_p2);

    cnn_mac_muladd_4nmb6_U12 : component cnn_mac_muladd_4nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_1401_p0,
        din1 => grp_fu_1401_p1,
        din2 => grp_fu_1401_p2,
        dout => grp_fu_1401_p3);

    cnn_mac_muladd_4nmb6_U13 : component cnn_mac_muladd_4nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_1410_p0,
        din1 => grp_fu_1410_p1,
        din2 => grp_fu_1410_p2,
        dout => grp_fu_1410_p3);

    cnn_mul_mul_8s_14ncg_U14 : component cnn_mul_mul_8s_14ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 23)
    port map (
        din0 => conv_2_weights_V_0_q0,
        din1 => input_V_q0,
        dout => mul_ln1118_fu_1420_p2);

    cnn_mul_mul_9s_14ocq_U15 : component cnn_mul_mul_9s_14ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 14,
        dout_WIDTH => 24)
    port map (
        din0 => conv_2_weights_V_1_q0,
        din1 => input_V_q1,
        dout => mul_ln1118_1_fu_1427_p2);

    cnn_mul_mul_8s_14ncg_U16 : component cnn_mul_mul_8s_14ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 23)
    port map (
        din0 => conv_2_weights_V_2_l_reg_1585,
        din1 => input_V_q0,
        dout => mul_ln1118_2_fu_1434_p2);

    cnn_mul_mul_9s_14ocq_U17 : component cnn_mul_mul_9s_14ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 14,
        dout_WIDTH => 24)
    port map (
        din0 => conv_2_weights_V_3_l_reg_1595,
        din1 => input_V_q1,
        dout => mul_ln1118_3_fu_1441_p2);

    cnn_mul_mul_10s_1pcA_U18 : component cnn_mul_mul_10s_1pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 14,
        dout_WIDTH => 25)
    port map (
        din0 => conv_2_weights_V_4_l_reg_1600,
        din1 => input_V_q0,
        dout => mul_ln1118_4_fu_1448_p2);

    cnn_mul_mul_9s_14ocq_U19 : component cnn_mul_mul_9s_14ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 14,
        dout_WIDTH => 24)
    port map (
        din0 => conv_2_weights_V_5_l_reg_1605,
        din1 => input_V_q1,
        dout => mul_ln1118_5_fu_1455_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_463_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_463_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                c_0_reg_380 <= select_ln37_3_reg_1487;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_380 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                f_0_reg_391 <= f_fu_1383_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_391 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten21_reg_346 <= add_ln8_reg_1466;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten21_reg_346 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten7_reg_368 <= select_ln11_fu_1394_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten7_reg_368 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_1508 = ap_const_lv1_0))) then 
                indvar_flatten_reg_402 <= add_ln18_1_reg_1512;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_463_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_402 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                r_0_reg_357 <= select_ln37_1_reg_1476;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_357 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_1508 = ap_const_lv1_0))) then 
                w_sum_1_reg_424 <= add_ln1192_5_fu_1029_p2(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_463_p2 = ap_const_lv1_0))) then 
                w_sum_1_reg_424 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    wc_0_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_1508 = ap_const_lv1_0))) then 
                wc_0_reg_436 <= wc_reg_1625;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_463_p2 = ap_const_lv1_0))) then 
                wc_0_reg_436 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_1508 = ap_const_lv1_0))) then 
                wr_0_reg_413 <= select_ln18_1_reg_1522;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_463_p2 = ap_const_lv1_0))) then 
                wr_0_reg_413 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln18_1_reg_1512 <= add_ln18_1_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_1466 <= add_ln8_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln18_reg_1508 = ap_const_lv1_0))) then
                conv_2_weights_V_2_l_reg_1585 <= conv_2_weights_V_2_q0;
                conv_2_weights_V_3_l_reg_1595 <= conv_2_weights_V_3_q0;
                conv_2_weights_V_4_l_reg_1600 <= conv_2_weights_V_4_q0;
                conv_2_weights_V_5_l_reg_1605 <= conv_2_weights_V_5_q0;
                tmp_6_reg_1590 <= add_ln1192_1_fu_838_p2(21 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_463_p2 = ap_const_lv1_0))) then
                conv_out_V_addr_reg_1503 <= zext_ln203_12_fu_582_p1(11 - 1 downto 0);
                icmp_ln11_reg_1471 <= icmp_ln11_fu_481_p2;
                select_ln37_1_reg_1476 <= select_ln37_1_fu_495_p3;
                select_ln37_2_reg_1482 <= select_ln37_2_fu_537_p3;
                select_ln37_3_reg_1487 <= select_ln37_3_fu_545_p3;
                    zext_ln203_10_reg_1498(4 downto 0) <= zext_ln203_10_fu_568_p1(4 downto 0);
                    zext_ln26_reg_1493(4 downto 0) <= zext_ln26_fu_564_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_1508 <= icmp_ln18_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln885_reg_1648 <= icmp_ln885_fu_1055_p2;
                tmp_V_4_reg_1640 <= tmp_V_4_fu_1049_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln908_reg_1674 <= icmp_ln908_fu_1224_p2;
                    or_ln_reg_1669(0) <= or_ln_fu_1216_p3(0);
                p_Result_24_reg_1652 <= tmp_V_4_reg_1640(13 downto 13);
                sub_ln894_reg_1663 <= sub_ln894_fu_1106_p2;
                tmp_V_5_reg_1657 <= tmp_V_5_fu_1073_p3;
                trunc_ln893_reg_1679 <= trunc_ln893_fu_1230_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln924_1_reg_1694 <= icmp_ln924_1_fu_1367_p2;
                icmp_ln924_reg_1689 <= icmp_ln924_fu_1361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_fu_587_p2 = ap_const_lv1_0))) then
                select_ln18_1_reg_1522 <= select_ln18_1_fu_619_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_fu_587_p2 = ap_const_lv1_0))) then
                select_ln18_reg_1517 <= select_ln18_fu_611_p3;
                    sub_ln1117_reg_1557(10 downto 1) <= sub_ln1117_fu_726_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln18_reg_1508 = ap_const_lv1_0))) then
                tmp_8_reg_1620 <= add_ln1192_3_fu_941_p2(21 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_1508 = ap_const_lv1_0))) then
                wc_reg_1625 <= wc_fu_957_p2;
            end if;
        end if;
    end process;
    zext_ln26_reg_1493(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln203_10_reg_1498(8 downto 5) <= "0000";
    sub_ln1117_reg_1557(0) <= '0';
    or_ln_reg_1669(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_fu_463_p2, ap_CS_fsm_state2, icmp_ln18_fu_587_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state8, icmp_ln885_fu_1055_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_463_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_587_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_587_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln885_fu_1055_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    a_fu_1170_p2 <= (icmp_ln897_fu_1132_p2 and icmp_ln897_1_fu_1164_p2);
    add_ln1116_1_fu_684_p2 <= std_logic_vector(unsigned(zext_ln203_10_reg_1498) + unsigned(tmp_20_cast_fu_676_p3));
    add_ln1116_fu_670_p2 <= std_logic_vector(unsigned(zext_ln1116_2_fu_666_p1) + unsigned(sub_ln1116_fu_643_p2));
    add_ln1117_1_fu_748_p2 <= std_logic_vector(unsigned(sub_ln1117_reg_1557) + unsigned(ap_const_lv11_2));
    add_ln1117_2_fu_758_p2 <= std_logic_vector(unsigned(sub_ln1117_reg_1557) + unsigned(ap_const_lv11_3));
    add_ln1117_3_fu_854_p2 <= std_logic_vector(unsigned(sub_ln1117_reg_1557) + unsigned(ap_const_lv11_4));
    add_ln1117_4_fu_864_p2 <= std_logic_vector(unsigned(sub_ln1117_reg_1557) + unsigned(ap_const_lv11_5));
    add_ln1192_1_fu_838_p2 <= std_logic_vector(unsigned(zext_ln728_1_fu_830_p1) + unsigned(zext_ln703_2_fu_834_p1));
    add_ln1192_2_fu_899_p2 <= std_logic_vector(unsigned(zext_ln728_2_fu_891_p1) + unsigned(zext_ln703_3_fu_895_p1));
    add_ln1192_3_fu_941_p2 <= std_logic_vector(unsigned(zext_ln728_3_fu_933_p1) + unsigned(zext_ln703_4_fu_937_p1));
    add_ln1192_4_fu_987_p2 <= std_logic_vector(unsigned(zext_ln728_4_fu_979_p1) + unsigned(zext_ln703_5_fu_983_p1));
    add_ln1192_5_fu_1029_p2 <= std_logic_vector(unsigned(zext_ln728_5_fu_1021_p1) + unsigned(zext_ln703_6_fu_1025_p1));
    add_ln1192_fu_795_p2 <= std_logic_vector(unsigned(zext_ln728_fu_787_p1) + unsigned(zext_ln703_fu_791_p1));
    add_ln11_1_fu_1388_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_368) + unsigned(ap_const_lv9_1));
    add_ln18_1_fu_593_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_406_p4) + unsigned(ap_const_lv4_1));
    add_ln18_fu_653_p2 <= std_logic_vector(unsigned(select_ln37_1_reg_1476) + unsigned(zext_ln18_fu_649_p1));
    add_ln203_6_fu_576_p2 <= std_logic_vector(unsigned(zext_ln203_11_fu_572_p1) + unsigned(tmp_17_cast_fu_557_p3));
    add_ln26_fu_699_p2 <= std_logic_vector(unsigned(select_ln37_3_reg_1487) + unsigned(zext_ln21_fu_662_p1));
    add_ln899_fu_1190_p2 <= std_logic_vector(signed(ap_const_lv14_3FCB) + signed(trunc_ln894_fu_1112_p1));
    add_ln8_fu_469_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_346) + unsigned(ap_const_lv11_1));
    add_ln908_fu_1240_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_1663));
    add_ln915_fu_1321_p2 <= std_logic_vector(unsigned(sub_ln915_fu_1316_p2) + unsigned(select_ln915_fu_1308_p3));
    and_ln37_fu_519_p2 <= (xor_ln37_fu_507_p2 and icmp_ln14_fu_513_p2);
    and_ln899_fu_1204_p2 <= (xor_ln899_fu_1184_p2 and p_Result_22_fu_1196_p3);
    and_ln924_fu_1377_p2 <= (or_ln924_fu_1373_p2 and grp_fu_458_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_587_p2)
    begin
        if ((icmp_ln18_fu_587_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln8_fu_463_p2, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_463_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_406_p4_assign_proc : process(indvar_flatten_reg_402, icmp_ln18_reg_1508, ap_CS_fsm_pp0_stage0, add_ln18_1_reg_1512, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_1508 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_406_p4 <= add_ln18_1_reg_1512;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_406_p4 <= indvar_flatten_reg_402;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_450_p4_assign_proc : process(tmp_V_4_reg_1640, icmp_ln885_reg_1648, ap_CS_fsm_state11, and_ln924_fu_1377_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
            if (((ap_const_lv1_1 = and_ln924_fu_1377_p2) and (icmp_ln885_reg_1648 = ap_const_lv1_0))) then 
                ap_phi_mux_storemerge_phi_fu_450_p4 <= tmp_V_4_reg_1640;
            elsif (((icmp_ln885_reg_1648 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln924_fu_1377_p2))) then 
                ap_phi_mux_storemerge_phi_fu_450_p4 <= ap_const_lv14_0;
            else 
                ap_phi_mux_storemerge_phi_fu_450_p4 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_450_p4 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_wc_0_phi_fu_440_p4_assign_proc : process(wc_0_reg_436, icmp_ln18_reg_1508, ap_CS_fsm_pp0_stage0, wc_reg_1625, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_1508 = ap_const_lv1_0))) then 
            ap_phi_mux_wc_0_phi_fu_440_p4 <= wc_reg_1625;
        else 
            ap_phi_mux_wc_0_phi_fu_440_p4 <= wc_0_reg_436;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_417_p4_assign_proc : process(wr_0_reg_413, icmp_ln18_reg_1508, ap_CS_fsm_pp0_stage0, select_ln18_1_reg_1522, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_1508 = ap_const_lv1_0))) then 
            ap_phi_mux_wr_0_phi_fu_417_p4 <= select_ln18_1_reg_1522;
        else 
            ap_phi_mux_wr_0_phi_fu_417_p4 <= wr_0_reg_413;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_463_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_463_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_525_p2 <= std_logic_vector(unsigned(select_ln37_fu_487_p3) + unsigned(ap_const_lv4_1));
    conv_2_bias_V_address0 <= zext_ln26_reg_1493(4 - 1 downto 0);

    conv_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_V_0_address0 <= zext_ln1116_3_fu_689_p1(8 - 1 downto 0);

    conv_2_weights_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_2_weights_V_0_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_V_1_address0 <= zext_ln1116_3_fu_689_p1(8 - 1 downto 0);

    conv_2_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_2_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_V_2_address0 <= zext_ln1116_3_fu_689_p1(8 - 1 downto 0);

    conv_2_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_2_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_V_3_address0 <= zext_ln1116_3_fu_689_p1(8 - 1 downto 0);

    conv_2_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_2_weights_V_3_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_V_4_address0 <= zext_ln1116_3_fu_689_p1(8 - 1 downto 0);

    conv_2_weights_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_2_weights_V_4_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_V_5_address0 <= zext_ln1116_3_fu_689_p1(8 - 1 downto 0);

    conv_2_weights_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_2_weights_V_5_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_address0 <= conv_out_V_addr_reg_1503;

    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_d0 <= ap_phi_mux_storemerge_phi_fu_450_p4;

    conv_out_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_out_V_we0 <= ap_const_logic_1;
        else 
            conv_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_1383_p2 <= std_logic_vector(unsigned(select_ln37_2_reg_1482) + unsigned(ap_const_lv5_1));
    grp_fu_1401_p0 <= grp_fu_1401_p00(4 - 1 downto 0);
    grp_fu_1401_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_1_fu_495_p3),8));
    grp_fu_1401_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_1401_p2 <= grp_fu_1401_p20(4 - 1 downto 0);
    grp_fu_1401_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_3_fu_545_p3),8));
    grp_fu_1410_p0 <= grp_fu_1410_p00(4 - 1 downto 0);
    grp_fu_1410_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_653_p2),8));
    grp_fu_1410_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_1410_p2 <= grp_fu_1410_p20(4 - 1 downto 0);
    grp_fu_1410_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_699_p2),8));
    grp_fu_458_p0 <= p_Result_26_fu_1334_p5;
    icmp_ln11_fu_481_p2 <= "1" when (indvar_flatten7_reg_368 = ap_const_lv9_B0) else "0";
    icmp_ln14_fu_513_p2 <= "1" when (f_0_reg_391 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_587_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_406_p4 = ap_const_lv4_9) else "0";
    icmp_ln21_fu_605_p2 <= "1" when (ap_phi_mux_wc_0_phi_fu_440_p4 = ap_const_lv2_3) else "0";
    icmp_ln885_fu_1055_p2 <= "1" when (tmp_V_4_fu_1049_p2 = ap_const_lv14_0) else "0";
    icmp_ln897_1_fu_1164_p2 <= "0" when (p_Result_21_fu_1158_p2 = ap_const_lv14_0) else "1";
    icmp_ln897_fu_1132_p2 <= "1" when (signed(tmp_11_fu_1122_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln8_fu_463_p2 <= "1" when (indvar_flatten21_reg_346 = ap_const_lv11_790) else "0";
    icmp_ln908_fu_1224_p2 <= "1" when (signed(lsb_index_fu_1116_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln924_1_fu_1367_p2 <= "1" when (trunc_ln4_fu_1351_p4 = ap_const_lv52_0) else "0";
    icmp_ln924_fu_1361_p2 <= "0" when (add_ln915_fu_1321_p2 = ap_const_lv11_7FF) else "1";

    input_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln1117_3_fu_732_p1, zext_ln1117_5_fu_753_p1, ap_block_pp0_stage1, zext_ln1117_7_fu_859_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_V_address0 <= zext_ln1117_7_fu_859_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_V_address0 <= zext_ln1117_5_fu_753_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_V_address0 <= zext_ln1117_3_fu_732_p1(10 - 1 downto 0);
            else 
                input_V_address0 <= "XXXXXXXXXX";
            end if;
        else 
            input_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln1117_4_fu_743_p1, ap_block_pp0_stage1, zext_ln1117_6_fu_763_p1, ap_block_pp0_stage2, zext_ln1117_8_fu_869_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_V_address1 <= zext_ln1117_8_fu_869_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_V_address1 <= zext_ln1117_6_fu_763_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_V_address1 <= zext_ln1117_4_fu_743_p1(10 - 1 downto 0);
            else 
                input_V_address1 <= "XXXXXXXXXX";
            end if;
        else 
            input_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_V_ce1 <= ap_const_logic_1;
        else 
            input_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    
    l_fu_1098_p3_proc : process(p_Result_25_fu_1090_p3)
    begin
        l_fu_1098_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_25_fu_1090_p3(i) = '1' then
                l_fu_1098_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_1116_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_1106_p2));
    lshr_ln897_fu_1152_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln897_fu_1148_p1(14-1 downto 0)))));
    lshr_ln908_fu_1245_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_1_fu_1237_p1),to_integer(unsigned('0' & add_ln908_fu_1240_p2(31-1 downto 0)))));
    m_1_fu_1270_p3 <= 
        zext_ln908_fu_1251_p1 when (icmp_ln908_reg_1674(0) = '1') else 
        shl_ln908_fu_1264_p2;
    m_2_fu_1280_p2 <= std_logic_vector(unsigned(zext_ln911_fu_1277_p1) + unsigned(m_1_fu_1270_p3));
    m_5_fu_1286_p4 <= m_2_fu_1280_p2(63 downto 1);
    m_6_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_fu_1286_p4),64));
    m_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1657),64));
    or_ln1117_fu_737_p2 <= (sub_ln1117_fu_726_p2 or ap_const_lv11_1);
    or_ln37_fu_531_p2 <= (icmp_ln11_fu_481_p2 or and_ln37_fu_519_p2);
    or_ln899_fu_1210_p2 <= (and_ln899_fu_1204_p2 or a_fu_1170_p2);
    or_ln924_fu_1373_p2 <= (icmp_ln924_reg_1689 or icmp_ln924_1_reg_1694);
    or_ln_fu_1216_p3 <= (ap_const_lv31_0 & or_ln899_fu_1210_p2);
    p_Result_21_fu_1158_p2 <= (tmp_V_5_fu_1073_p3 and lshr_ln897_fu_1152_p2);
    p_Result_22_fu_1196_p3 <= tmp_V_5_fu_1073_p3(to_integer(unsigned(add_ln899_fu_1190_p2)) downto to_integer(unsigned(add_ln899_fu_1190_p2))) when (to_integer(unsigned(add_ln899_fu_1190_p2))>= 0 and to_integer(unsigned(add_ln899_fu_1190_p2))<=13) else "-";
    p_Result_24_fu_1061_p3 <= tmp_V_4_reg_1640(13 downto 13);
    p_Result_25_fu_1090_p3 <= (ap_const_lv18_3FFFF & p_Result_s_fu_1080_p4);
    p_Result_26_fu_1334_p5 <= (tmp_4_fu_1327_p3 & m_6_fu_1296_p1(51 downto 0));
    
    p_Result_s_fu_1080_p4_proc : process(tmp_V_5_fu_1073_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_1080_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_1073_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_1080_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_1080_p4_i) := tmp_V_5_fu_1073_p3(14-1-p_Result_s_fu_1080_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_1080_p4 <= resvalue(14-1 downto 0);
    end process;

    p_shl_cast_fu_708_p3 <= (grp_fu_1410_p3 & ap_const_lv3_0);
    r_fu_475_p2 <= std_logic_vector(unsigned(r_0_reg_357) + unsigned(ap_const_lv4_1));
    select_ln11_fu_1394_p3 <= 
        ap_const_lv9_1 when (icmp_ln11_reg_1471(0) = '1') else 
        add_ln11_1_fu_1388_p2;
    select_ln18_1_fu_619_p3 <= 
        wr_fu_599_p2 when (icmp_ln21_fu_605_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_417_p4;
    select_ln18_fu_611_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_605_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_440_p4;
    select_ln37_1_fu_495_p3 <= 
        r_fu_475_p2 when (icmp_ln11_fu_481_p2(0) = '1') else 
        r_0_reg_357;
    select_ln37_2_fu_537_p3 <= 
        ap_const_lv5_0 when (or_ln37_fu_531_p2(0) = '1') else 
        f_0_reg_391;
    select_ln37_3_fu_545_p3 <= 
        c_fu_525_p2 when (and_ln37_fu_519_p2(0) = '1') else 
        select_ln37_fu_487_p3;
    select_ln37_fu_487_p3 <= 
        ap_const_lv4_0 when (icmp_ln11_fu_481_p2(0) = '1') else 
        c_0_reg_380;
    select_ln915_fu_1308_p3 <= 
        ap_const_lv11_3FF when (tmp_13_fu_1300_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1118_11_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_5_fu_1455_p2),28));

        sext_ln1118_1_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_fu_1420_p2),28));

        sext_ln1118_3_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_1_fu_1427_p2),28));

        sext_ln1118_5_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_2_fu_1434_p2),28));

        sext_ln1118_7_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_3_fu_1441_p2),28));

        sext_ln1118_9_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_4_fu_1448_p2),28));

        sext_ln1265_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_2_bias_V_q0),14));

    shl_ln728_1_fu_822_p3 <= (tmp_5_fu_812_p4 & ap_const_lv8_0);
    shl_ln728_2_fu_884_p3 <= (tmp_6_reg_1590 & ap_const_lv8_0);
    shl_ln728_3_fu_925_p3 <= (tmp_7_fu_915_p4 & ap_const_lv8_0);
    shl_ln728_4_fu_972_p3 <= (tmp_8_reg_1620 & ap_const_lv8_0);
    shl_ln728_5_fu_1013_p3 <= (tmp_9_fu_1003_p4 & ap_const_lv8_0);
    shl_ln908_fu_1264_p2 <= std_logic_vector(shift_left(unsigned(m_fu_1234_p1),to_integer(unsigned('0' & zext_ln908_1_fu_1260_p1(31-1 downto 0)))));
    shl_ln_fu_779_p3 <= (w_sum_1_reg_424 & ap_const_lv8_0);
    sub_ln1116_fu_643_p2 <= std_logic_vector(unsigned(zext_ln1116_1_fu_639_p1) - unsigned(zext_ln1116_fu_627_p1));
    sub_ln1117_fu_726_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_708_p3) - unsigned(zext_ln1117_2_fu_722_p1));
    sub_ln894_fu_1106_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_1098_p3));
    sub_ln897_fu_1142_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) - unsigned(trunc_ln897_fu_1138_p1));
    sub_ln908_fu_1255_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_1663));
    sub_ln915_fu_1316_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) - unsigned(trunc_ln893_reg_1679));
    tmp_11_fu_1122_p4 <= lsb_index_fu_1116_p2(31 downto 1);
    tmp_12_fu_1176_p3 <= lsb_index_fu_1116_p2(31 downto 31);
    tmp_13_fu_1300_p3 <= m_2_fu_1280_p2(54 downto 54);
    tmp_17_cast_fu_557_p3 <= (grp_fu_1401_p3 & ap_const_lv4_0);
    tmp_1_fu_631_p3 <= (select_ln18_1_fu_619_p3 & ap_const_lv2_0);
    tmp_20_cast_fu_676_p3 <= (add_ln1116_fu_670_p2 & ap_const_lv4_0);
    tmp_4_fu_1327_p3 <= (p_Result_24_reg_1652 & add_ln915_fu_1321_p2);
    tmp_5_fu_812_p4 <= add_ln1192_fu_795_p2(21 downto 8);
    tmp_7_fu_915_p4 <= add_ln1192_2_fu_899_p2(21 downto 8);
    tmp_9_fu_1003_p4 <= add_ln1192_4_fu_987_p2(21 downto 8);
    tmp_V_4_fu_1049_p2 <= std_logic_vector(signed(sext_ln1265_fu_1045_p1) + signed(w_sum_1_reg_424));
    tmp_V_5_fu_1073_p3 <= 
        tmp_V_fu_1068_p2 when (p_Result_24_fu_1061_p3(0) = '1') else 
        tmp_V_4_reg_1640;
    tmp_V_fu_1068_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(tmp_V_4_reg_1640));
    tmp_fu_715_p3 <= (grp_fu_1410_p3 & ap_const_lv1_0);
    trunc_ln4_fu_1351_p4 <= m_2_fu_1280_p2(52 downto 1);
    trunc_ln893_fu_1230_p1 <= l_fu_1098_p3(11 - 1 downto 0);
    trunc_ln894_fu_1112_p1 <= sub_ln894_fu_1106_p2(14 - 1 downto 0);
    trunc_ln897_fu_1138_p1 <= sub_ln894_fu_1106_p2(4 - 1 downto 0);
    wc_fu_957_p2 <= std_logic_vector(unsigned(select_ln18_reg_1517) + unsigned(ap_const_lv2_1));
    wr_fu_599_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_417_p4) + unsigned(ap_const_lv2_1));
    xor_ln37_fu_507_p2 <= (icmp_ln11_fu_481_p2 xor ap_const_lv1_1);
    xor_ln899_fu_1184_p2 <= (tmp_12_fu_1176_p3 xor ap_const_lv1_1);
    zext_ln1116_1_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_631_p3),5));
    zext_ln1116_2_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_611_p3),5));
    zext_ln1116_3_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_1_fu_684_p2),64));
    zext_ln1116_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_619_p3),5));
    zext_ln1117_2_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_715_p3),11));
    zext_ln1117_3_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1117_fu_726_p2),64));
    zext_ln1117_4_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1117_fu_737_p2),64));
    zext_ln1117_5_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_1_fu_748_p2),64));
    zext_ln1117_6_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_2_fu_758_p2),64));
    zext_ln1117_7_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_3_fu_854_p2),64));
    zext_ln1117_8_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_4_fu_864_p2),64));
    zext_ln18_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_619_p3),4));
    zext_ln203_10_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_537_p3),9));
    zext_ln203_11_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_537_p3),12));
    zext_ln203_12_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_6_fu_576_p2),64));
    zext_ln21_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_611_p3),4));
    zext_ln26_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_537_p3),64));
    zext_ln703_2_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_3_fu_809_p1),29));
    zext_ln703_3_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_5_fu_881_p1),29));
    zext_ln703_4_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_7_fu_912_p1),29));
    zext_ln703_5_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_9_fu_969_p1),29));
    zext_ln703_6_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_11_fu_1000_p1),29));
    zext_ln703_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_1_fu_776_p1),29));
    zext_ln728_1_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_1_fu_822_p3),29));
    zext_ln728_2_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_2_fu_884_p3),29));
    zext_ln728_3_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_3_fu_925_p3),29));
    zext_ln728_4_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_4_fu_972_p3),29));
    zext_ln728_5_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_5_fu_1013_p3),29));
    zext_ln728_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_779_p3),29));
    zext_ln897_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_1142_p2),14));
    zext_ln907_1_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1657),32));
    zext_ln908_1_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_1255_p2),64));
    zext_ln908_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_1245_p2),64));
    zext_ln911_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1669),64));
end behav;
