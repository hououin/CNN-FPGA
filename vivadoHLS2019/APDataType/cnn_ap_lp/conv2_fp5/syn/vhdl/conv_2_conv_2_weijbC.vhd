-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weijbC_rom is 
    generic(
             DWIDTH     : integer := 10; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weijbC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111000000", 1 => "1111111101", 2 => "0000000000", 3 => "1110101011", 
    4 => "1111011111", 5 => "0000111010", 6 => "0010000110", 7 => "1101101110", 
    8 => "0000111100", 9 => "1101110111", 10 => "1111011001", 11 => "1111000000", 
    12 => "1110100101", 13 => "0000110000", 14 => "1100010100", 15 => "0000111000", 
    16 => "1111001100", 17 => "0001000001", 18 => "1110111000", 19 => "1110011010", 
    20 => "1111000010", 21 => "0000000011", 22 => "0000000001", 23 => "1111010010", 
    24 => "0000011010", 25 => "1110011111", 26 => "0000101100", 27 => "1111011010", 
    28 => "1111101001", 29 => "0000100010", 30 => "1101000001", 31 => "1111111001", 
    32 => "1111001000", 33 => "1110110101", 34 => "1101110010", 35 => "1101011100", 
    36 => "1111101001", 37 => "0000010100", 38 => "0000110011", 39 => "1101011111", 
    40 => "0000010011", 41 => "1110001110", 42 => "0000000000", 43 => "1111000111", 
    44 => "1111011101", 45 => "1111101001", 46 => "1110101100", 47 => "1111100111", 
    48 => "1110010010", 49 => "1111110110", 50 => "0000001001", 51 => "1111011110", 
    52 => "0000001111", 53 => "0001001001", 54 => "1111000111", 55 => "1111011001", 
    56 => "1110101001", 57 => "1110111101", 58 => "1110001101", 59 => "1110111111", 
    60 => "1111101001", 61 => "0001010001", 62 => "1110001011", 63 => "0000011101", 
    64 => "1111000101", 65 => "1110101110", 66 => "1111100110", 67 => "1011011001", 
    68 => "0001010000", 69 => "0001001000", 70 => "1111111101", 71 => "0000011100", 
    72 => "0000010111", 73 => "1111000100", 74 => "0000000110", 75 => "1111001101", 
    76 => "1111100110", 77 => "0000000111", 78 => "1101001110", 79 => "0000110010", 
    80 => "1111011010", 81 => "1110000111", 82 => "1110110011", 83 => "1111111011", 
    84 => "0010000010", 85 => "0001000101", 86 => "1111100110", 87 => "1111011100", 
    88 => "0000011001", 89 => "1110101101", 90 => "1111100010", 91 => "1110110010", 
    92 => "1111011101", 93 => "1101100101", 94 => "1110111110", 95 => "1111010110", 
    96 => "1111100001", 97 => "1111011100", 98 => "1111011011", 99 => "1101111110", 
    100 => "1111101100", 101 => "1111100100", 102 => "1111001111", 103 => "0001001000", 
    104 => "1111000101", 105 => "0001010100", 106 => "1111010110", 107 => "1110110101", 
    108 => "0000001011", 109 => "0000000101", 110 => "1111101100", 111 => "1111110111", 
    112 => "1110101100", 113 => "1110101010", 114 => "1111000110", 115 => "1101011011", 
    116 => "0000100100", 117 => "0000001110", 118 => "0001010011", 119 => "0000110001", 
    120 => "1110111101", 121 => "1111000110", 122 => "1111010111", 123 => "1111110100", 
    124 => "0000011011", 125 => "1111001100", 126 => "0000011100", 127 => "1110110111", 
    128 => "0000000011", 129 => "1111011100", 130 => "0000101110", 131 => "1111011001", 
    132 => "0001000011", 133 => "1111001110", 134 => "0000001011", 135 => "0000010110", 
    136 => "0000001100", 137 => "1111101101", 138 => "1110111111", 139 => "1110111000", 
    140 => "1111010100", 141 => "1101010000", 142 => "0001100001", 143 => "1111100110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weijbC is
    generic (
        DataWidth : INTEGER := 10;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weijbC is
    component conv_2_conv_2_weijbC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weijbC_rom_U :  component conv_2_conv_2_weijbC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


