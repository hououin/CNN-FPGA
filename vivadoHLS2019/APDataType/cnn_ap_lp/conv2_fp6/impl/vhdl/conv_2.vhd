-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_we0 : OUT STD_LOGIC;
    conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of conv_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv14_3FCB : STD_LOGIC_VECTOR (13 downto 0) := "11111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_weights_V_ce0 : STD_LOGIC;
    signal conv_2_weights_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_2_bias_V_ce0 : STD_LOGIC;
    signal conv_2_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten21_reg_289 : STD_LOGIC_VECTOR (5 downto 0);
    signal wr_0_reg_300 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_311 : STD_LOGIC_VECTOR (4 downto 0);
    signal wc_0_reg_322 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_15_reg_333 : STD_LOGIC_VECTOR (13 downto 0);
    signal ch_0_reg_345 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln8_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_378_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln8_reg_1203 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln11_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_1208 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_1_fu_404_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_1_reg_1213 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_2_fu_446_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln37_2_reg_1219 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln37_3_fu_454_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_3_reg_1224 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1232 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_10_fu_477_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_10_reg_1237 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_V_addr_reg_1242 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln18_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1247 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_1247_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_511_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln18_1_fu_537_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_1256 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_fu_575_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_reg_1264 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_1_fu_587_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_1_reg_1270 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_2_fu_607_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_1276 : STD_LOGIC_VECTOR (3 downto 0);
    signal ch_fu_615_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_3_fu_627_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_V_4_fu_821_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_4_reg_1311 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln885_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_833_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1323 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_V_5_fu_845_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_5_reg_1328 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln894_fu_878_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_1334 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_988_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_1345 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_1002_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1350 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln924_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_reg_1360 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_reg_1365 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_1155_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln11_fu_1166_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal indvar_flatten43_reg_233 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_0_reg_244 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten29_reg_255 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_267 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_278 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_wr_0_phi_fu_304_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wc_0_phi_fu_326_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_359_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln924_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_12_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_4_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_3_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_367_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_384_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln14_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_396_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln37_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln37_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_434_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1173_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_11_fu_481_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_cast_fu_466_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_6_fu_485_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln21_fu_496_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln21_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_517_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln24_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_529_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln18_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_563_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln21_1_fu_583_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_500_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_595_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_2_fu_600_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln21_fu_621_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_638_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_1_fu_645_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1116_fu_635_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1116_fu_649_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_659_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_fu_662_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln21_2_fu_671_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1116_fu_655_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1116_fu_674_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1116_fu_680_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_684_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_692_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1182_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_716_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_709_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1117_2_fu_723_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1116_2_fu_733_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1116_1_fu_700_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1116_1_fu_739_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_cast_fu_745_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1116_2_fu_753_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1116_3_fu_736_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1117_fu_727_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1117_1_fu_763_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_1192_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal lhs_V_fu_785_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1_fu_782_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln728_fu_793_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln703_fu_797_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_fu_801_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1265_fu_817_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_840_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_852_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_25_fu_862_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_870_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_888_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_894_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_910_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln897_fu_914_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln897_fu_920_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln897_fu_924_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_21_fu_930_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln897_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_948_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_884_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln899_fu_962_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_22_fu_968_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_1_fu_1009_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_1012_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_1017_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_1027_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_1032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_1023_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_1036_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_1042_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_1052_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_1058_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_10_fu_1072_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_1088_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_1080_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_1093_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_6_fu_1068_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_1099_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_26_fu_1106_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_1123_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln924_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_1_fu_1160_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1173_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1173_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1173_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1182_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1182_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1182_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1173_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1173_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1182_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1182_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_dcmp_64ns_64ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_4nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_mul_mul_10s_1ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component conv_2_conv_2_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_2_conv_2_biag8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    conv_2_weights_V_U : component conv_2_conv_2_weifYi
    generic map (
        DataWidth => 10,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_V_address0,
        ce0 => conv_2_weights_V_ce0,
        q0 => conv_2_weights_V_q0);

    conv_2_bias_V_U : component conv_2_conv_2_biag8j
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_V_address0,
        ce0 => conv_2_bias_V_ce0,
        q0 => conv_2_bias_V_q0);

    cnn_dcmp_64ns_64ndEe_U11 : component cnn_dcmp_64ns_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_367_p0,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_367_p2);

    cnn_mac_muladd_4nhbi_U12 : component cnn_mac_muladd_4nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_1173_p0,
        din1 => grp_fu_1173_p1,
        din2 => grp_fu_1173_p2,
        dout => grp_fu_1173_p3);

    cnn_mac_muladd_4nhbi_U13 : component cnn_mac_muladd_4nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_1182_p0,
        din1 => grp_fu_1182_p1,
        din2 => grp_fu_1182_p2,
        dout => grp_fu_1182_p3);

    cnn_mul_mul_10s_1ibs_U14 : component cnn_mul_mul_10s_1ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 14,
        dout_WIDTH => 25)
    port map (
        din0 => conv_2_weights_V_q0,
        din1 => input_V_q0,
        dout => r_V_fu_1192_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                c_0_reg_267 <= select_ln37_3_reg_1224;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_267 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ch_0_reg_345 <= ch_fu_615_p2;
            elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ch_0_reg_345 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                f_0_reg_278 <= f_fu_1155_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_278 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten21_reg_289 <= add_ln18_1_fu_511_p2;
            elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten21_reg_289 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten29_reg_255 <= select_ln11_fu_1166_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten29_reg_255 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten43_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten43_reg_233 <= add_ln8_reg_1203;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten43_reg_233 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_311 <= select_ln21_3_fu_627_p3;
            elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_311 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_15_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_1247_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_15_reg_333 <= ret_V_fu_801_p2(21 downto 8);
            elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_15_reg_333 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    r_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                r_0_reg_244 <= select_ln37_1_reg_1213;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_244 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    wc_0_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_1247 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_322 <= select_ln21_1_reg_1270;
            elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_322 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_1247 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_300 <= select_ln18_1_reg_1256;
            elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_300 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_1203 <= add_ln8_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_V_addr_reg_1242 <= zext_ln203_12_fu_491_p1(11 - 1 downto 0);
                icmp_ln11_reg_1208 <= icmp_ln11_fu_390_p2;
                select_ln37_1_reg_1213 <= select_ln37_1_fu_404_p3;
                select_ln37_2_reg_1219 <= select_ln37_2_fu_446_p3;
                select_ln37_3_reg_1224 <= select_ln37_3_fu_454_p3;
                    zext_ln203_10_reg_1237(4 downto 0) <= zext_ln203_10_fu_477_p1(4 downto 0);
                    zext_ln26_reg_1232(4 downto 0) <= zext_ln26_fu_473_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_1247 <= icmp_ln18_fu_505_p2;
                icmp_ln18_reg_1247_pp0_iter1_reg <= icmp_ln18_reg_1247;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln885_reg_1319 <= icmp_ln885_fu_827_p2;
                tmp_V_4_reg_1311 <= tmp_V_4_fu_821_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln908_reg_1345 <= icmp_ln908_fu_996_p2;
                    or_ln_reg_1340(0) <= or_ln_fu_988_p3(0);
                p_Result_24_reg_1323 <= tmp_V_4_reg_1311(13 downto 13);
                sub_ln894_reg_1334 <= sub_ln894_fu_878_p2;
                tmp_V_5_reg_1328 <= tmp_V_5_fu_845_p3;
                trunc_ln893_reg_1350 <= trunc_ln893_fu_1002_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln924_1_reg_1365 <= icmp_ln924_1_fu_1139_p2;
                icmp_ln924_reg_1360 <= icmp_ln924_fu_1133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_1_reg_1256 <= select_ln18_1_fu_537_p3;
                select_ln21_1_reg_1270 <= select_ln21_1_fu_587_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln21_2_reg_1276 <= select_ln21_2_fu_607_p3;
                select_ln21_reg_1264 <= select_ln21_fu_575_p3;
            end if;
        end if;
    end process;
    zext_ln26_reg_1232(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln203_10_reg_1237(10 downto 5) <= "000000";
    or_ln_reg_1340(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_fu_372_p2, ap_CS_fsm_state2, icmp_ln18_fu_505_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state7, icmp_ln885_fu_827_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln18_fu_505_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln18_fu_505_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln885_fu_827_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_fu_942_p2 <= (icmp_ln897_fu_904_p2 and icmp_ln897_1_fu_936_p2);
    add_ln1116_1_fu_739_p2 <= std_logic_vector(unsigned(zext_ln1116_2_fu_733_p1) + unsigned(sub_ln1116_1_fu_700_p2));
    add_ln1116_2_fu_753_p2 <= std_logic_vector(unsigned(zext_ln203_10_reg_1237) + unsigned(tmp_24_cast_fu_745_p3));
    add_ln1116_fu_674_p2 <= std_logic_vector(unsigned(zext_ln21_2_fu_671_p1) + unsigned(sext_ln1116_fu_655_p1));
    add_ln1117_1_fu_763_p2 <= std_logic_vector(unsigned(zext_ln1116_3_fu_736_p1) + unsigned(sub_ln1117_fu_727_p2));
    add_ln11_1_fu_1160_p2 <= std_logic_vector(unsigned(indvar_flatten29_reg_255) + unsigned(ap_const_lv9_1));
    add_ln18_1_fu_511_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_289) + unsigned(ap_const_lv6_1));
    add_ln18_fu_662_p2 <= std_logic_vector(unsigned(select_ln37_1_reg_1213) + unsigned(zext_ln18_fu_659_p1));
    add_ln203_6_fu_485_p2 <= std_logic_vector(unsigned(zext_ln203_11_fu_481_p1) + unsigned(tmp_17_cast_fu_466_p3));
    add_ln21_fu_621_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_311) + unsigned(ap_const_lv5_1));
    add_ln26_1_fu_595_p2 <= std_logic_vector(unsigned(select_ln37_3_reg_1224) + unsigned(zext_ln21_1_fu_583_p1));
    add_ln26_fu_500_p2 <= std_logic_vector(unsigned(select_ln37_3_reg_1224) + unsigned(zext_ln21_fu_496_p1));
    add_ln899_fu_962_p2 <= std_logic_vector(signed(ap_const_lv14_3FCB) + signed(trunc_ln894_fu_884_p1));
    add_ln8_fu_378_p2 <= std_logic_vector(unsigned(indvar_flatten43_reg_233) + unsigned(ap_const_lv11_1));
    add_ln908_fu_1012_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_1334));
    add_ln915_fu_1093_p2 <= std_logic_vector(unsigned(sub_ln915_fu_1088_p2) + unsigned(select_ln915_fu_1080_p3));
    and_ln18_fu_557_p2 <= (xor_ln18_fu_545_p2 and icmp_ln24_fu_551_p2);
    and_ln37_fu_428_p2 <= (xor_ln37_fu_416_p2 and icmp_ln14_fu_422_p2);
    and_ln899_fu_976_p2 <= (xor_ln899_fu_956_p2 and p_Result_22_fu_968_p3);
    and_ln924_fu_1149_p2 <= (or_ln924_fu_1145_p2 and grp_fu_367_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_505_p2)
    begin
        if ((icmp_ln18_fu_505_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln8_fu_372_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln8_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_359_p4_assign_proc : process(tmp_V_4_reg_1311, icmp_ln885_reg_1319, ap_CS_fsm_state10, and_ln924_fu_1149_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
            if (((icmp_ln885_reg_1319 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln924_fu_1149_p2))) then 
                ap_phi_mux_storemerge_phi_fu_359_p4 <= tmp_V_4_reg_1311;
            elsif (((ap_const_lv1_0 = and_ln924_fu_1149_p2) or (icmp_ln885_reg_1319 = ap_const_lv1_1))) then 
                ap_phi_mux_storemerge_phi_fu_359_p4 <= ap_const_lv14_0;
            else 
                ap_phi_mux_storemerge_phi_fu_359_p4 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_359_p4 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_wc_0_phi_fu_326_p4_assign_proc : process(wc_0_reg_322, icmp_ln18_reg_1247, ap_CS_fsm_pp0_stage0, select_ln21_1_reg_1270, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_1247 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wc_0_phi_fu_326_p4 <= select_ln21_1_reg_1270;
        else 
            ap_phi_mux_wc_0_phi_fu_326_p4 <= wc_0_reg_322;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_304_p4_assign_proc : process(wr_0_reg_300, icmp_ln18_reg_1247, ap_CS_fsm_pp0_stage0, select_ln18_1_reg_1256, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_1247 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wr_0_phi_fu_304_p4 <= select_ln18_1_reg_1256;
        else 
            ap_phi_mux_wr_0_phi_fu_304_p4 <= wr_0_reg_300;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_372_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_434_p2 <= std_logic_vector(unsigned(select_ln37_fu_396_p3) + unsigned(ap_const_lv4_1));
    ch_fu_615_p2 <= std_logic_vector(unsigned(select_ln21_fu_575_p3) + unsigned(ap_const_lv3_1));
    conv_2_bias_V_address0 <= zext_ln26_reg_1232(4 - 1 downto 0);

    conv_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_V_address0 <= zext_ln1116_4_fu_758_p1(10 - 1 downto 0);

    conv_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_address0 <= conv_out_V_addr_reg_1242;

    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_d0 <= ap_phi_mux_storemerge_phi_fu_359_p4;

    conv_out_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_out_V_we0 <= ap_const_logic_1;
        else 
            conv_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_1155_p2 <= std_logic_vector(unsigned(select_ln37_2_reg_1219) + unsigned(ap_const_lv5_1));
    grp_fu_1173_p0 <= grp_fu_1173_p00(4 - 1 downto 0);
    grp_fu_1173_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_1_fu_404_p3),8));
    grp_fu_1173_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_1173_p2 <= grp_fu_1173_p20(4 - 1 downto 0);
    grp_fu_1173_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_3_fu_454_p3),8));
    grp_fu_1182_p0 <= grp_fu_1182_p00(4 - 1 downto 0);
    grp_fu_1182_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_662_p2),8));
    grp_fu_1182_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_1182_p2 <= grp_fu_1182_p20(4 - 1 downto 0);
    grp_fu_1182_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_2_reg_1276),8));
    grp_fu_367_p0 <= p_Result_26_fu_1106_p5;
    icmp_ln11_fu_390_p2 <= "1" when (indvar_flatten29_reg_255 = ap_const_lv9_B0) else "0";
    icmp_ln14_fu_422_p2 <= "1" when (f_0_reg_278 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_505_p2 <= "1" when (indvar_flatten21_reg_289 = ap_const_lv6_36) else "0";
    icmp_ln21_fu_523_p2 <= "1" when (indvar_flatten_reg_311 = ap_const_lv5_12) else "0";
    icmp_ln24_fu_551_p2 <= "1" when (ch_0_reg_345 = ap_const_lv3_6) else "0";
    icmp_ln885_fu_827_p2 <= "1" when (tmp_V_4_fu_821_p2 = ap_const_lv14_0) else "0";
    icmp_ln897_1_fu_936_p2 <= "0" when (p_Result_21_fu_930_p2 = ap_const_lv14_0) else "1";
    icmp_ln897_fu_904_p2 <= "1" when (signed(tmp_8_fu_894_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln8_fu_372_p2 <= "1" when (indvar_flatten43_reg_233 = ap_const_lv11_790) else "0";
    icmp_ln908_fu_996_p2 <= "1" when (signed(lsb_index_fu_888_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln924_1_fu_1139_p2 <= "1" when (trunc_ln4_fu_1123_p4 = ap_const_lv52_0) else "0";
    icmp_ln924_fu_1133_p2 <= "0" when (add_ln915_fu_1093_p2 = ap_const_lv11_7FF) else "1";
    input_V_address0 <= zext_ln1117_3_fu_769_p1(10 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    l_fu_870_p3_proc : process(p_Result_25_fu_862_p3)
    begin
        l_fu_870_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_25_fu_862_p3(i) = '1' then
                l_fu_870_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lhs_V_fu_785_p3 <= (p_Val2_15_reg_333 & ap_const_lv8_0);
    lsb_index_fu_888_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_878_p2));
    lshr_ln897_fu_924_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln897_fu_920_p1(14-1 downto 0)))));
    lshr_ln908_fu_1017_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_1_fu_1009_p1),to_integer(unsigned('0' & add_ln908_fu_1012_p2(31-1 downto 0)))));
    m_1_fu_1042_p3 <= 
        zext_ln908_fu_1023_p1 when (icmp_ln908_reg_1345(0) = '1') else 
        shl_ln908_fu_1036_p2;
    m_2_fu_1052_p2 <= std_logic_vector(unsigned(zext_ln911_fu_1049_p1) + unsigned(m_1_fu_1042_p3));
    m_5_fu_1058_p4 <= m_2_fu_1052_p2(63 downto 1);
    m_6_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_fu_1058_p4),64));
    m_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1328),64));
    or_ln21_fu_569_p2 <= (icmp_ln21_fu_523_p2 or and_ln18_fu_557_p2);
    or_ln37_fu_440_p2 <= (icmp_ln11_fu_390_p2 or and_ln37_fu_428_p2);
    or_ln899_fu_982_p2 <= (and_ln899_fu_976_p2 or a_fu_942_p2);
    or_ln924_fu_1145_p2 <= (icmp_ln924_reg_1360 or icmp_ln924_1_reg_1365);
    or_ln_fu_988_p3 <= (ap_const_lv31_0 & or_ln899_fu_982_p2);
    p_Result_21_fu_930_p2 <= (tmp_V_5_fu_845_p3 and lshr_ln897_fu_924_p2);
    p_Result_22_fu_968_p3 <= tmp_V_5_fu_845_p3(to_integer(unsigned(add_ln899_fu_962_p2)) downto to_integer(unsigned(add_ln899_fu_962_p2))) when (to_integer(unsigned(add_ln899_fu_962_p2))>= 0 and to_integer(unsigned(add_ln899_fu_962_p2))<=13) else "-";
    p_Result_24_fu_833_p3 <= tmp_V_4_reg_1311(13 downto 13);
    p_Result_25_fu_862_p3 <= (ap_const_lv18_3FFFF & p_Result_s_fu_852_p4);
    p_Result_26_fu_1106_p5 <= (tmp_5_fu_1099_p3 & m_6_fu_1068_p1(51 downto 0));
    
    p_Result_s_fu_852_p4_proc : process(tmp_V_5_fu_845_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_852_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_845_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_852_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_852_p4_i) := tmp_V_5_fu_845_p3(14-1-p_Result_s_fu_852_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_852_p4 <= resvalue(14-1 downto 0);
    end process;

    p_shl_cast_fu_709_p3 <= (grp_fu_1182_p3 & ap_const_lv3_0);
    p_shl_fu_684_p3 <= (trunc_ln1116_fu_680_p1 & ap_const_lv3_0);
    r_fu_384_p2 <= std_logic_vector(unsigned(r_0_reg_244) + unsigned(ap_const_lv4_1));
    ret_V_fu_801_p2 <= std_logic_vector(unsigned(zext_ln728_fu_793_p1) + unsigned(zext_ln703_fu_797_p1));
    select_ln11_fu_1166_p3 <= 
        ap_const_lv9_1 when (icmp_ln11_reg_1208(0) = '1') else 
        add_ln11_1_fu_1160_p2;
    select_ln18_1_fu_537_p3 <= 
        wr_fu_517_p2 when (icmp_ln21_fu_523_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_304_p4;
    select_ln18_2_fu_600_p3 <= 
        select_ln37_3_reg_1224 when (icmp_ln21_fu_523_p2(0) = '1') else 
        add_ln26_fu_500_p2;
    select_ln18_fu_529_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_523_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_326_p4;
    select_ln21_1_fu_587_p3 <= 
        wc_fu_563_p2 when (and_ln18_fu_557_p2(0) = '1') else 
        select_ln18_fu_529_p3;
    select_ln21_2_fu_607_p3 <= 
        add_ln26_1_fu_595_p2 when (and_ln18_fu_557_p2(0) = '1') else 
        select_ln18_2_fu_600_p3;
    select_ln21_3_fu_627_p3 <= 
        ap_const_lv5_1 when (icmp_ln21_fu_523_p2(0) = '1') else 
        add_ln21_fu_621_p2;
    select_ln21_fu_575_p3 <= 
        ap_const_lv3_0 when (or_ln21_fu_569_p2(0) = '1') else 
        ch_0_reg_345;
    select_ln37_1_fu_404_p3 <= 
        r_fu_384_p2 when (icmp_ln11_fu_390_p2(0) = '1') else 
        r_0_reg_244;
    select_ln37_2_fu_446_p3 <= 
        ap_const_lv5_0 when (or_ln37_fu_440_p2(0) = '1') else 
        f_0_reg_278;
    select_ln37_3_fu_454_p3 <= 
        c_fu_434_p2 when (and_ln37_fu_428_p2(0) = '1') else 
        select_ln37_fu_396_p3;
    select_ln37_fu_396_p3 <= 
        ap_const_lv4_0 when (icmp_ln11_fu_390_p2(0) = '1') else 
        c_0_reg_267;
    select_ln915_fu_1080_p3 <= 
        ap_const_lv11_3FF when (tmp_10_fu_1072_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1116_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1116_fu_649_p2),6));

        sext_ln1118_1_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_1192_p2),28));

        sext_ln1265_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_2_bias_V_q0),14));

    shl_ln908_fu_1036_p2 <= std_logic_vector(shift_left(unsigned(m_fu_1006_p1),to_integer(unsigned('0' & zext_ln908_1_fu_1032_p1(31-1 downto 0)))));
    sub_ln1116_1_fu_700_p2 <= std_logic_vector(unsigned(p_shl_fu_684_p3) - unsigned(tmp_fu_692_p3));
    sub_ln1116_fu_649_p2 <= std_logic_vector(unsigned(zext_ln1116_1_fu_645_p1) - unsigned(zext_ln1116_fu_635_p1));
    sub_ln1117_fu_727_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_709_p3) - unsigned(zext_ln1117_2_fu_723_p1));
    sub_ln894_fu_878_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_870_p3));
    sub_ln897_fu_914_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) - unsigned(trunc_ln897_fu_910_p1));
    sub_ln908_fu_1027_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_1334));
    sub_ln915_fu_1088_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) - unsigned(trunc_ln893_reg_1350));
    tmp_10_fu_1072_p3 <= m_2_fu_1052_p2(54 downto 54);
    tmp_17_cast_fu_466_p3 <= (grp_fu_1173_p3 & ap_const_lv4_0);
    tmp_1_fu_638_p3 <= (select_ln18_1_reg_1256 & ap_const_lv2_0);
    tmp_24_cast_fu_745_p3 <= (add_ln1116_1_fu_739_p2 & ap_const_lv4_0);
    tmp_5_fu_1099_p3 <= (p_Result_24_reg_1323 & add_ln915_fu_1093_p2);
    tmp_6_fu_716_p3 <= (grp_fu_1182_p3 & ap_const_lv1_0);
    tmp_8_fu_894_p4 <= lsb_index_fu_888_p2(31 downto 1);
    tmp_9_fu_948_p3 <= lsb_index_fu_888_p2(31 downto 31);
    tmp_V_4_fu_821_p2 <= std_logic_vector(signed(sext_ln1265_fu_817_p1) + signed(p_Val2_15_reg_333));
    tmp_V_5_fu_845_p3 <= 
        tmp_V_fu_840_p2 when (p_Result_24_fu_833_p3(0) = '1') else 
        tmp_V_4_reg_1311;
    tmp_V_fu_840_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(tmp_V_4_reg_1311));
    tmp_fu_692_p3 <= (add_ln1116_fu_674_p2 & ap_const_lv1_0);
    trunc_ln1116_fu_680_p1 <= add_ln1116_fu_674_p2(4 - 1 downto 0);
    trunc_ln4_fu_1123_p4 <= m_2_fu_1052_p2(52 downto 1);
    trunc_ln893_fu_1002_p1 <= l_fu_870_p3(11 - 1 downto 0);
    trunc_ln894_fu_884_p1 <= sub_ln894_fu_878_p2(14 - 1 downto 0);
    trunc_ln897_fu_910_p1 <= sub_ln894_fu_878_p2(4 - 1 downto 0);
    wc_fu_563_p2 <= std_logic_vector(unsigned(select_ln18_fu_529_p3) + unsigned(ap_const_lv2_1));
    wr_fu_517_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_304_p4) + unsigned(ap_const_lv2_1));
    xor_ln18_fu_545_p2 <= (icmp_ln21_fu_523_p2 xor ap_const_lv1_1);
    xor_ln37_fu_416_p2 <= (icmp_ln11_fu_390_p2 xor ap_const_lv1_1);
    xor_ln899_fu_956_p2 <= (tmp_9_fu_948_p3 xor ap_const_lv1_1);
    zext_ln1116_1_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_638_p3),5));
    zext_ln1116_2_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_reg_1264),7));
    zext_ln1116_3_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_reg_1264),11));
    zext_ln1116_4_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_2_fu_753_p2),64));
    zext_ln1116_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_reg_1256),5));
    zext_ln1117_2_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_716_p3),11));
    zext_ln1117_3_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_1_fu_763_p2),64));
    zext_ln18_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_reg_1256),4));
    zext_ln203_10_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_446_p3),11));
    zext_ln203_11_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_446_p3),12));
    zext_ln203_12_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_6_fu_485_p2),64));
    zext_ln21_1_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_fu_563_p2),4));
    zext_ln21_2_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_1_reg_1270),6));
    zext_ln21_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wc_0_phi_fu_326_p4),4));
    zext_ln26_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_446_p3),64));
    zext_ln703_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_1_fu_782_p1),29));
    zext_ln728_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_785_p3),29));
    zext_ln897_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_914_p2),14));
    zext_ln907_1_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1328),32));
    zext_ln908_1_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_1027_p2),64));
    zext_ln908_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_1017_p2),64));
    zext_ln911_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1340),64));
end behav;
