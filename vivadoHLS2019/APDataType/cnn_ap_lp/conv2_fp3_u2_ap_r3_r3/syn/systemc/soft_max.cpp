// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "soft_max.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic soft_max::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic soft_max::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<35> soft_max::ap_ST_fsm_state1 = "1";
const sc_lv<35> soft_max::ap_ST_fsm_state2 = "10";
const sc_lv<35> soft_max::ap_ST_fsm_state3 = "100";
const sc_lv<35> soft_max::ap_ST_fsm_state4 = "1000";
const sc_lv<35> soft_max::ap_ST_fsm_state5 = "10000";
const sc_lv<35> soft_max::ap_ST_fsm_state6 = "100000";
const sc_lv<35> soft_max::ap_ST_fsm_state7 = "1000000";
const sc_lv<35> soft_max::ap_ST_fsm_state8 = "10000000";
const sc_lv<35> soft_max::ap_ST_fsm_state9 = "100000000";
const sc_lv<35> soft_max::ap_ST_fsm_state10 = "1000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state11 = "10000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state12 = "100000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<35> soft_max::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<32> soft_max::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> soft_max::ap_const_lv32_1 = "1";
const sc_lv<1> soft_max::ap_const_lv1_0 = "0";
const sc_lv<1> soft_max::ap_const_lv1_1 = "1";
const sc_lv<32> soft_max::ap_const_lv32_2 = "10";
const sc_lv<32> soft_max::ap_const_lv32_3 = "11";
const sc_lv<32> soft_max::ap_const_lv32_6 = "110";
const sc_lv<32> soft_max::ap_const_lv32_8 = "1000";
const sc_lv<32> soft_max::ap_const_lv32_9 = "1001";
const sc_lv<14> soft_max::ap_const_lv14_0 = "00000000000000";
const sc_lv<4> soft_max::ap_const_lv4_0 = "0000";
const sc_lv<32> soft_max::ap_const_lv32_7 = "111";
const sc_lv<32> soft_max::ap_const_lv32_22 = "100010";
const sc_lv<32> soft_max::ap_const_lv32_4 = "100";
const sc_lv<4> soft_max::ap_const_lv4_A = "1010";
const sc_lv<4> soft_max::ap_const_lv4_1 = "1";
const sc_lv<8> soft_max::ap_const_lv8_0 = "00000000";
const bool soft_max::ap_const_boolean_1 = true;

soft_max::soft_max(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_exp_15_7_s_fu_137 = new exp_15_7_s("grp_exp_15_7_s_fu_137");
    grp_exp_15_7_s_fu_137->ap_clk(ap_clk);
    grp_exp_15_7_s_fu_137->ap_rst(ap_rst);
    grp_exp_15_7_s_fu_137->ap_start(grp_exp_15_7_s_fu_137_ap_start);
    grp_exp_15_7_s_fu_137->ap_done(grp_exp_15_7_s_fu_137_ap_done);
    grp_exp_15_7_s_fu_137->ap_idle(grp_exp_15_7_s_fu_137_ap_idle);
    grp_exp_15_7_s_fu_137->ap_ready(grp_exp_15_7_s_fu_137_ap_ready);
    grp_exp_15_7_s_fu_137->x_V(grp_exp_15_7_s_fu_137_x_V);
    grp_exp_15_7_s_fu_137->ap_return(grp_exp_15_7_s_fu_137_ap_return);
    cnn_sdiv_22ns_14sbll_U216 = new cnn_sdiv_22ns_14sbll<1,26,22,14,14>("cnn_sdiv_22ns_14sbll_U216");
    cnn_sdiv_22ns_14sbll_U216->clk(ap_clk);
    cnn_sdiv_22ns_14sbll_U216->reset(ap_rst);
    cnn_sdiv_22ns_14sbll_U216->start(grp_fu_249_ap_start);
    cnn_sdiv_22ns_14sbll_U216->done(grp_fu_249_ap_done);
    cnn_sdiv_22ns_14sbll_U216->din0(grp_fu_249_p0);
    cnn_sdiv_22ns_14sbll_U216->din1(grp_fu_249_p1);
    cnn_sdiv_22ns_14sbll_U216->ce(ap_var_for_const0);
    cnn_sdiv_22ns_14sbll_U216->dout(grp_fu_249_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state5);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( icmp_ln27_fu_224_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( icmp_ln27_fu_224_p2 );

    SC_METHOD(thread_dense_array_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( dense_array_V_addr_1_reg_290 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( zext_ln29_fu_236_p1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln13_fu_160_p1 );
    sensitive << ( zext_ln22_fu_195_p1 );

    SC_METHOD(thread_dense_array_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_dense_array_V_d0);
    sensitive << ( p_Val2_4_reg_300 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_dense_array_V_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_exp_15_7_s_fu_137_ap_start);
    sensitive << ( grp_exp_15_7_s_fu_137_ap_start_reg );

    SC_METHOD(thread_grp_exp_15_7_s_fu_137_x_V);
    sensitive << ( rhs_V_reg_272 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( lhs_V_fu_204_p1 );

    SC_METHOD(thread_grp_fu_249_ap_start);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_fu_249_p0);
    sensitive << ( dense_array_V_q0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_fu_249_p1);
    sensitive << ( sext_ln27_reg_295 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_i_fu_189_p2);
    sensitive << ( i_0_reg_115 );

    SC_METHOD(thread_icmp_ln12_fu_148_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( m_0_reg_92 );

    SC_METHOD(thread_icmp_ln1495_fu_169_p2);
    sensitive << ( dense_array_V_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_Val2_1_reg_80 );

    SC_METHOD(thread_icmp_ln20_fu_183_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_0_reg_115 );

    SC_METHOD(thread_icmp_ln27_fu_224_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( j_0_reg_126 );

    SC_METHOD(thread_j_fu_230_p2);
    sensitive << ( j_0_reg_126 );

    SC_METHOD(thread_lhs_V_fu_204_p0);
    sensitive << ( dense_array_V_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_lhs_V_fu_204_p1);
    sensitive << ( lhs_V_fu_204_p0 );

    SC_METHOD(thread_m_fu_154_p2);
    sensitive << ( m_0_reg_92 );

    SC_METHOD(thread_p_Val2_4_fu_214_p1);
    sensitive << ( grp_exp_15_7_s_fu_137_ap_return );

    SC_METHOD(thread_prediction_V_address0);
    sensitive << ( zext_ln29_reg_318 );
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_prediction_V_ce0);
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_prediction_V_d0);
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( grp_fu_249_p2 );

    SC_METHOD(thread_prediction_V_we0);
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_rhs_V_fu_165_p1);
    sensitive << ( p_Val2_1_reg_80 );

    SC_METHOD(thread_select_ln13_fu_175_p3);
    sensitive << ( dense_array_V_q0 );
    sensitive << ( p_Val2_1_reg_80 );
    sensitive << ( icmp_ln1495_fu_169_p2 );

    SC_METHOD(thread_sext_ln27_fu_200_p1);
    sensitive << ( p_Val2_3_reg_103 );

    SC_METHOD(thread_sum_V_fu_218_p2);
    sensitive << ( p_Val2_4_fu_214_p1 );
    sensitive << ( p_Val2_3_reg_103 );

    SC_METHOD(thread_zext_ln13_fu_160_p1);
    sensitive << ( m_0_reg_92 );

    SC_METHOD(thread_zext_ln22_fu_195_p1);
    sensitive << ( i_0_reg_115 );

    SC_METHOD(thread_zext_ln29_fu_236_p1);
    sensitive << ( j_0_reg_126 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln12_fu_148_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln20_fu_183_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( icmp_ln27_fu_224_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000000000000000000001";
    grp_exp_15_7_s_fu_137_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "soft_max_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dense_array_V_address0, "(port)dense_array_V_address0");
    sc_trace(mVcdFile, dense_array_V_ce0, "(port)dense_array_V_ce0");
    sc_trace(mVcdFile, dense_array_V_we0, "(port)dense_array_V_we0");
    sc_trace(mVcdFile, dense_array_V_d0, "(port)dense_array_V_d0");
    sc_trace(mVcdFile, dense_array_V_q0, "(port)dense_array_V_q0");
    sc_trace(mVcdFile, prediction_V_address0, "(port)prediction_V_address0");
    sc_trace(mVcdFile, prediction_V_ce0, "(port)prediction_V_ce0");
    sc_trace(mVcdFile, prediction_V_we0, "(port)prediction_V_we0");
    sc_trace(mVcdFile, prediction_V_d0, "(port)prediction_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, m_fu_154_p2, "m_fu_154_p2");
    sc_trace(mVcdFile, m_reg_262, "m_reg_262");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln12_fu_148_p2, "icmp_ln12_fu_148_p2");
    sc_trace(mVcdFile, rhs_V_fu_165_p1, "rhs_V_fu_165_p1");
    sc_trace(mVcdFile, rhs_V_reg_272, "rhs_V_reg_272");
    sc_trace(mVcdFile, select_ln13_fu_175_p3, "select_ln13_fu_175_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_fu_189_p2, "i_fu_189_p2");
    sc_trace(mVcdFile, i_reg_285, "i_reg_285");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, dense_array_V_addr_1_reg_290, "dense_array_V_addr_1_reg_290");
    sc_trace(mVcdFile, icmp_ln20_fu_183_p2, "icmp_ln20_fu_183_p2");
    sc_trace(mVcdFile, sext_ln27_fu_200_p1, "sext_ln27_fu_200_p1");
    sc_trace(mVcdFile, sext_ln27_reg_295, "sext_ln27_reg_295");
    sc_trace(mVcdFile, p_Val2_4_fu_214_p1, "p_Val2_4_fu_214_p1");
    sc_trace(mVcdFile, p_Val2_4_reg_300, "p_Val2_4_reg_300");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, sum_V_fu_218_p2, "sum_V_fu_218_p2");
    sc_trace(mVcdFile, sum_V_reg_305, "sum_V_reg_305");
    sc_trace(mVcdFile, j_fu_230_p2, "j_fu_230_p2");
    sc_trace(mVcdFile, j_reg_313, "j_reg_313");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, zext_ln29_fu_236_p1, "zext_ln29_fu_236_p1");
    sc_trace(mVcdFile, zext_ln29_reg_318, "zext_ln29_reg_318");
    sc_trace(mVcdFile, icmp_ln27_fu_224_p2, "icmp_ln27_fu_224_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_exp_15_7_s_fu_137_ap_start, "grp_exp_15_7_s_fu_137_ap_start");
    sc_trace(mVcdFile, grp_exp_15_7_s_fu_137_ap_done, "grp_exp_15_7_s_fu_137_ap_done");
    sc_trace(mVcdFile, grp_exp_15_7_s_fu_137_ap_idle, "grp_exp_15_7_s_fu_137_ap_idle");
    sc_trace(mVcdFile, grp_exp_15_7_s_fu_137_ap_ready, "grp_exp_15_7_s_fu_137_ap_ready");
    sc_trace(mVcdFile, grp_exp_15_7_s_fu_137_x_V, "grp_exp_15_7_s_fu_137_x_V");
    sc_trace(mVcdFile, grp_exp_15_7_s_fu_137_ap_return, "grp_exp_15_7_s_fu_137_ap_return");
    sc_trace(mVcdFile, p_Val2_1_reg_80, "p_Val2_1_reg_80");
    sc_trace(mVcdFile, m_0_reg_92, "m_0_reg_92");
    sc_trace(mVcdFile, p_Val2_3_reg_103, "p_Val2_3_reg_103");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_0_reg_115, "i_0_reg_115");
    sc_trace(mVcdFile, j_0_reg_126, "j_0_reg_126");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, grp_exp_15_7_s_fu_137_ap_start_reg, "grp_exp_15_7_s_fu_137_ap_start_reg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_NS_fsm_state5, "ap_NS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln13_fu_160_p1, "zext_ln13_fu_160_p1");
    sc_trace(mVcdFile, zext_ln22_fu_195_p1, "zext_ln22_fu_195_p1");
    sc_trace(mVcdFile, icmp_ln1495_fu_169_p2, "icmp_ln1495_fu_169_p2");
    sc_trace(mVcdFile, lhs_V_fu_204_p0, "lhs_V_fu_204_p0");
    sc_trace(mVcdFile, lhs_V_fu_204_p1, "lhs_V_fu_204_p1");
    sc_trace(mVcdFile, grp_fu_249_p0, "grp_fu_249_p0");
    sc_trace(mVcdFile, grp_fu_249_p1, "grp_fu_249_p1");
    sc_trace(mVcdFile, grp_fu_249_p2, "grp_fu_249_p2");
    sc_trace(mVcdFile, grp_fu_249_ap_start, "grp_fu_249_ap_start");
    sc_trace(mVcdFile, grp_fu_249_ap_done, "grp_fu_249_ap_done");
#endif

    }
}

soft_max::~soft_max() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_exp_15_7_s_fu_137;
    delete cnn_sdiv_22ns_14sbll_U216;
}

void soft_max::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void soft_max::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_exp_15_7_s_fu_137_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state5.read()))) {
            grp_exp_15_7_s_fu_137_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_exp_15_7_s_fu_137_ap_ready.read())) {
            grp_exp_15_7_s_fu_137_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_0_reg_115 = i_reg_285.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln12_fu_148_p2.read(), ap_const_lv1_1))) {
        i_0_reg_115 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln20_fu_183_p2.read()))) {
        j_0_reg_126 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        j_0_reg_126 = j_reg_313.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        m_0_reg_92 = m_reg_262.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        m_0_reg_92 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_Val2_1_reg_80 = select_ln13_fu_175_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Val2_1_reg_80 = ap_const_lv14_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        p_Val2_3_reg_103 = sum_V_reg_305.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln12_fu_148_p2.read(), ap_const_lv1_1))) {
        p_Val2_3_reg_103 = ap_const_lv14_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_183_p2.read()))) {
        dense_array_V_addr_1_reg_290 =  (sc_lv<4>) (zext_ln22_fu_195_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_285 = i_fu_189_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        j_reg_313 = j_fu_230_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        m_reg_262 = m_fu_154_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_Val2_4_reg_300 = p_Val2_4_fu_214_p1.read();
        sum_V_reg_305 = sum_V_fu_218_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_148_p2.read(), ap_const_lv1_1))) {
        rhs_V_reg_272 = rhs_V_fu_165_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln20_fu_183_p2.read()))) {
        sext_ln27_reg_295 = sext_ln27_fu_200_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_224_p2.read()))) {
        zext_ln29_reg_318 = zext_ln29_fu_236_p1.read();
    }
}

void soft_max::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void soft_max::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void soft_max::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void soft_max::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void soft_max::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void soft_max::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void soft_max::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void soft_max::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void soft_max::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void soft_max::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void soft_max::thread_ap_NS_fsm_state5() {
    ap_NS_fsm_state5 = ap_NS_fsm.read()[4];
}

void soft_max::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln27_fu_224_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void soft_max::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void soft_max::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln27_fu_224_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void soft_max::thread_dense_array_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        dense_array_V_address0 =  (sc_lv<4>) (zext_ln29_fu_236_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        dense_array_V_address0 = dense_array_V_addr_1_reg_290.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        dense_array_V_address0 =  (sc_lv<4>) (zext_ln22_fu_195_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        dense_array_V_address0 =  (sc_lv<4>) (zext_ln13_fu_160_p1.read());
    } else {
        dense_array_V_address0 = "XXXX";
    }
}

void soft_max::thread_dense_array_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        dense_array_V_ce0 = ap_const_logic_1;
    } else {
        dense_array_V_ce0 = ap_const_logic_0;
    }
}

void soft_max::thread_dense_array_V_d0() {
    dense_array_V_d0 = p_Val2_4_reg_300.read();
}

void soft_max::thread_dense_array_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        dense_array_V_we0 = ap_const_logic_1;
    } else {
        dense_array_V_we0 = ap_const_logic_0;
    }
}

void soft_max::thread_grp_exp_15_7_s_fu_137_ap_start() {
    grp_exp_15_7_s_fu_137_ap_start = grp_exp_15_7_s_fu_137_ap_start_reg.read();
}

void soft_max::thread_grp_exp_15_7_s_fu_137_x_V() {
    grp_exp_15_7_s_fu_137_x_V = (!lhs_V_fu_204_p1.read().is_01() || !rhs_V_reg_272.read().is_01())? sc_lv<15>(): (sc_bigint<15>(lhs_V_fu_204_p1.read()) - sc_bigint<15>(rhs_V_reg_272.read()));
}

void soft_max::thread_grp_fu_249_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_249_ap_start = ap_const_logic_1;
    } else {
        grp_fu_249_ap_start = ap_const_logic_0;
    }
}

void soft_max::thread_grp_fu_249_p0() {
    grp_fu_249_p0 = esl_concat<14,8>(dense_array_V_q0.read(), ap_const_lv8_0);
}

void soft_max::thread_grp_fu_249_p1() {
    grp_fu_249_p1 =  (sc_lv<14>) (sext_ln27_reg_295.read());
}

void soft_max::thread_i_fu_189_p2() {
    i_fu_189_p2 = (!i_0_reg_115.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_115.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void soft_max::thread_icmp_ln12_fu_148_p2() {
    icmp_ln12_fu_148_p2 = (!m_0_reg_92.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(m_0_reg_92.read() == ap_const_lv4_A);
}

void soft_max::thread_icmp_ln1495_fu_169_p2() {
    icmp_ln1495_fu_169_p2 = (!p_Val2_1_reg_80.read().is_01() || !dense_array_V_q0.read().is_01())? sc_lv<1>(): (sc_bigint<14>(p_Val2_1_reg_80.read()) < sc_bigint<14>(dense_array_V_q0.read()));
}

void soft_max::thread_icmp_ln20_fu_183_p2() {
    icmp_ln20_fu_183_p2 = (!i_0_reg_115.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_115.read() == ap_const_lv4_A);
}

void soft_max::thread_icmp_ln27_fu_224_p2() {
    icmp_ln27_fu_224_p2 = (!j_0_reg_126.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_126.read() == ap_const_lv4_A);
}

void soft_max::thread_j_fu_230_p2() {
    j_fu_230_p2 = (!j_0_reg_126.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_0_reg_126.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void soft_max::thread_lhs_V_fu_204_p0() {
    lhs_V_fu_204_p0 = dense_array_V_q0.read();
}

void soft_max::thread_lhs_V_fu_204_p1() {
    lhs_V_fu_204_p1 = esl_sext<15,14>(lhs_V_fu_204_p0.read());
}

void soft_max::thread_m_fu_154_p2() {
    m_fu_154_p2 = (!m_0_reg_92.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(m_0_reg_92.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void soft_max::thread_p_Val2_4_fu_214_p1() {
    p_Val2_4_fu_214_p1 = grp_exp_15_7_s_fu_137_ap_return.read().range(14-1, 0);
}

void soft_max::thread_prediction_V_address0() {
    prediction_V_address0 =  (sc_lv<4>) (zext_ln29_reg_318.read());
}

void soft_max::thread_prediction_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        prediction_V_ce0 = ap_const_logic_1;
    } else {
        prediction_V_ce0 = ap_const_logic_0;
    }
}

void soft_max::thread_prediction_V_d0() {
    prediction_V_d0 = grp_fu_249_p2.read().range(14-1, 0);
}

void soft_max::thread_prediction_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        prediction_V_we0 = ap_const_logic_1;
    } else {
        prediction_V_we0 = ap_const_logic_0;
    }
}

void soft_max::thread_rhs_V_fu_165_p1() {
    rhs_V_fu_165_p1 = esl_sext<15,14>(p_Val2_1_reg_80.read());
}

void soft_max::thread_select_ln13_fu_175_p3() {
    select_ln13_fu_175_p3 = (!icmp_ln1495_fu_169_p2.read()[0].is_01())? sc_lv<14>(): ((icmp_ln1495_fu_169_p2.read()[0].to_bool())? dense_array_V_q0.read(): p_Val2_1_reg_80.read());
}

void soft_max::thread_sext_ln27_fu_200_p1() {
    sext_ln27_fu_200_p1 = esl_sext<22,14>(p_Val2_3_reg_103.read());
}

void soft_max::thread_sum_V_fu_218_p2() {
    sum_V_fu_218_p2 = (!p_Val2_4_fu_214_p1.read().is_01() || !p_Val2_3_reg_103.read().is_01())? sc_lv<14>(): (sc_biguint<14>(p_Val2_4_fu_214_p1.read()) + sc_bigint<14>(p_Val2_3_reg_103.read()));
}

void soft_max::thread_zext_ln13_fu_160_p1() {
    zext_ln13_fu_160_p1 = esl_zext<64,4>(m_0_reg_92.read());
}

void soft_max::thread_zext_ln22_fu_195_p1() {
    zext_ln22_fu_195_p1 = esl_zext<64,4>(i_0_reg_115.read());
}

void soft_max::thread_zext_ln29_fu_236_p1() {
    zext_ln29_fu_236_p1 = esl_zext<64,4>(j_0_reg_126.read());
}

void soft_max::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_148_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln20_fu_183_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln27_fu_224_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<35>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

