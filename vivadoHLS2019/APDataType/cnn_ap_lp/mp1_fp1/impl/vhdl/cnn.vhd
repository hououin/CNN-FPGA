-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cnn_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cnn_input_ce0 : OUT STD_LOGIC;
    cnn_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_output_ce0 : OUT STD_LOGIC;
    prediction_output_we0 : OUT STD_LOGIC;
    prediction_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.990188,HLS_SYN_LAT=446658,HLS_SYN_TPT=none,HLS_SYN_MEM=31,HLS_SYN_DSP=8,HLS_SYN_FF=9241,HLS_SYN_LUT=34982,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv15_32 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv14_3FE8 : STD_LOGIC_VECTOR (13 downto 0) := "11111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_1_weights_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dense_1_weights_V_ce0 : STD_LOGIC;
    signal dense_1_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_bias_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_bias_V_ce0 : STD_LOGIC;
    signal dense_1_bias_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_2_weights_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_weights_V_ce0 : STD_LOGIC;
    signal dense_2_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_2_bias_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_bias_V_ce0 : STD_LOGIC;
    signal dense_2_bias_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_ce0 : STD_LOGIC;
    signal dense_out_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_V_ce0 : STD_LOGIC;
    signal dense_out_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_784_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1878 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ix_in_fu_790_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_in_reg_1883 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_820_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_reg_1888 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_832_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1896 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln203_7_fu_842_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_7_reg_1901 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln25_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_852_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_reg_1911 : STD_LOGIC_VECTOR (9 downto 0);
    signal cnn_input_load_reg_1916 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln603_3_fu_1133_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_3_reg_1922 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_1_fu_1151_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_1930 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln14_fu_1157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_1935 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_1161_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln13_reg_1941 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_1_fu_1171_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_1949 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln1117_3_fu_1182_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1117_3_reg_1954 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln13_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_2_fu_1270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1982 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln14_1_fu_1276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_reg_1987 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_1_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_2_fu_1280_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_2_reg_1993 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_fu_1290_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_2001 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln13_1_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal d_fu_1413_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_2029 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln48_fu_1419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_2034 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln41_fu_1407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_fu_1423_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_reg_2040 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_fu_1433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_2048 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln46_fu_1427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_3_fu_1526_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_2076 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln70_fu_1532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_2081 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln69_fu_1520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_1537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_2091 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal p_Result_41_fu_1543_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_41_reg_2096 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_13_fu_1557_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_13_reg_2101 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln944_fu_1591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_2106 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_1701_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_2112 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_1709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_2117 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_1715_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_2122 : STD_LOGIC_VECTOR (7 downto 0);
    signal dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_ce0 : STD_LOGIC;
    signal dense_array_V_we0 : STD_LOGIC;
    signal dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_1_input_V_ce0 : STD_LOGIC;
    signal conv_1_input_V_we0 : STD_LOGIC;
    signal conv_1_input_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_out_V_ce0 : STD_LOGIC;
    signal conv_1_out_V_we0 : STD_LOGIC;
    signal conv_1_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_ce1 : STD_LOGIC;
    signal conv_1_out_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pool_1_out_V_ce0 : STD_LOGIC;
    signal max_pool_1_out_V_we0 : STD_LOGIC;
    signal max_pool_1_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_2_out_V_ce0 : STD_LOGIC;
    signal conv_2_out_V_we0 : STD_LOGIC;
    signal conv_2_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_pool_2_out_V_ce0 : STD_LOGIC;
    signal max_pool_2_out_V_we0 : STD_LOGIC;
    signal max_pool_2_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_array_V_ce0 : STD_LOGIC;
    signal flat_array_V_we0 : STD_LOGIC;
    signal flat_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_out_V_ce0 : STD_LOGIC;
    signal dense_1_out_V_we0 : STD_LOGIC;
    signal dense_1_out_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_1_out_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_out_V_ce0 : STD_LOGIC;
    signal dense_2_out_V_we0 : STD_LOGIC;
    signal dense_2_out_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal prediction_V_ce0 : STD_LOGIC;
    signal prediction_V_we0 : STD_LOGIC;
    signal prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal prediction_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_1_fu_724_ap_start : STD_LOGIC;
    signal grp_max_pool_1_fu_724_ap_done : STD_LOGIC;
    signal grp_max_pool_1_fu_724_ap_idle : STD_LOGIC;
    signal grp_max_pool_1_fu_724_ap_ready : STD_LOGIC;
    signal grp_max_pool_1_fu_724_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_1_fu_724_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_724_conv_out_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_1_fu_724_conv_out_V_ce1 : STD_LOGIC;
    signal grp_max_pool_1_fu_724_max_pool_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_1_fu_724_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_724_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_724_max_pool_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_2_fu_730_ap_start : STD_LOGIC;
    signal grp_conv_2_fu_730_ap_done : STD_LOGIC;
    signal grp_conv_2_fu_730_ap_idle : STD_LOGIC;
    signal grp_conv_2_fu_730_ap_ready : STD_LOGIC;
    signal grp_conv_2_fu_730_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_2_fu_730_input_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_730_conv_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_2_fu_730_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_730_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_2_fu_730_conv_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_1_fu_740_ap_start : STD_LOGIC;
    signal grp_conv_1_fu_740_ap_done : STD_LOGIC;
    signal grp_conv_1_fu_740_ap_idle : STD_LOGIC;
    signal grp_conv_1_fu_740_ap_ready : STD_LOGIC;
    signal grp_conv_1_fu_740_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_1_fu_740_input_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_740_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_1_fu_740_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_740_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_1_fu_740_conv_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_750_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_750_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_750_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_750_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_750_dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_750_dense_array_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_750_dense_array_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_750_dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_750_prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_750_prediction_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_750_prediction_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_750_prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_2_fu_762_ap_start : STD_LOGIC;
    signal grp_max_pool_2_fu_762_ap_done : STD_LOGIC;
    signal grp_max_pool_2_fu_762_ap_idle : STD_LOGIC;
    signal grp_max_pool_2_fu_762_ap_ready : STD_LOGIC;
    signal grp_max_pool_2_fu_762_conv_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2_fu_762_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_762_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_762_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_762_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_2_fu_762_max_pool_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_flat_fu_768_ap_start : STD_LOGIC;
    signal grp_flat_fu_768_ap_done : STD_LOGIC;
    signal grp_flat_fu_768_ap_idle : STD_LOGIC;
    signal grp_flat_fu_768_ap_ready : STD_LOGIC;
    signal grp_flat_fu_768_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_768_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_768_flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_768_flat_array_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_768_flat_array_V_we0 : STD_LOGIC;
    signal grp_flat_fu_768_flat_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ix_in_0_reg_556 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_568 : STD_LOGIC_VECTOR (4 downto 0);
    signal ix_in_1_reg_579 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_0_reg_589 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_i_reg_600 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_Val2_29_reg_611 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_i_reg_623 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_reg_634 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_i5_reg_645 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_Val2_32_reg_656 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_i10_reg_668 : STD_LOGIC_VECTOR (5 downto 0);
    signal d_0_i_reg_679 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal p_Val2_38_reg_690 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_0_i_reg_702 : STD_LOGIC_VECTOR (4 downto 0);
    signal i24_0_reg_713 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_max_pool_1_fu_724_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_conv_2_fu_730_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_conv_1_fu_740_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_soft_max_fu_750_ap_start_reg : STD_LOGIC := '0';
    signal grp_max_pool_2_fu_762_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_flat_fu_768_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln27_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_1141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_fu_1193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_2_fu_1177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_fu_1336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_1296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_9_fu_1479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_1439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln19_fu_1255_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln19_1_fu_1398_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_2_fu_1513_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_796_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_171_fu_808_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_fu_804_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_15_fu_816_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_16_fu_838_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_874_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_888_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_892_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_40_fu_900_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_39_fu_866_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_904_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_862_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_884_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_924_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_936_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_942_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_948_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_910_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_982_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_986_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_996_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_999_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_966_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln581cast_fu_1015_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln571_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_1019_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln586_fu_992_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln585_1_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_1007_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln582_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_1091_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_1_fu_1105_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln603_1_fu_1113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_1119_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1117_fu_1188_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1828_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_1223_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln703_fu_1231_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_fu_1223_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_fu_1231_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln703_fu_1227_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_fu_1235_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_22_fu_1247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_1241_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_172_fu_1301_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_173_fu_1313_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_6_fu_1309_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1117_7_fu_1321_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1117_fu_1325_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1117_2_fu_1331_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1837_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_1_fu_1366_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_2_fu_1374_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1265_1_fu_1366_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_2_fu_1374_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln703_1_fu_1370_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_1_fu_1378_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_23_fu_1390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_1_fu_1384_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_174_fu_1444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_175_fu_1456_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_8_fu_1464_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_fu_1452_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_fu_1468_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_4_fu_1474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1846_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_2_fu_1509_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_1551_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_1565_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_42_fu_1575_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_1583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_1601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1607_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_1623_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln947_fu_1627_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln947_fu_1633_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln947_fu_1637_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_36_fu_1643_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln947_fu_1617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_1649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1661_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln944_fu_1597_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln949_fu_1675_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_37_fu_1681_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_1669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_1689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_1655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_1695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_1719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_1722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_1733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_1727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_1738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_12_fu_1744_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_13_fu_1751_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s_fu_1756_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_27_fu_1770_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln964_fu_1778_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_1786_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_1791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_16_fu_1766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1797_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_43_fu_1804_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_1816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1828_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1837_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1837_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1846_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1846_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1837_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1846_p00 : STD_LOGIC_VECTOR (21 downto 0);

    component max_pool_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce1 : OUT STD_LOGIC;
        conv_out_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component conv_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component conv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce0 : OUT STD_LOGIC;
        dense_array_V_we0 : OUT STD_LOGIC;
        dense_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        dense_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_V_ce0 : OUT STD_LOGIC;
        prediction_V_we0 : OUT STD_LOGIC;
        prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component max_pool_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component flat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        flat_array_V_ce0 : OUT STD_LOGIC;
        flat_array_V_we0 : OUT STD_LOGIC;
        flat_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_fpext_32ns_64sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_mac_muladd_9stde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_mac_muladd_9sudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_mac_muladd_13vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_dense_1_weighmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_1_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component cnn_dense_2_weighncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_2_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_out_weiocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_out_biapcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_dense_array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_1_input_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_max_pool_1_ouqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_max_pool_2_ourcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_dense_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_dense_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    dense_1_weights_V_U : component cnn_dense_1_weighmb6
    generic map (
        DataWidth => 9,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_address0,
        ce0 => dense_1_weights_V_ce0,
        q0 => dense_1_weights_V_q0);

    dense_1_bias_V_U : component cnn_dense_1_bias_V
    generic map (
        DataWidth => 6,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_bias_V_address0,
        ce0 => dense_1_bias_V_ce0,
        q0 => dense_1_bias_V_q0);

    dense_2_weights_V_U : component cnn_dense_2_weighncg
    generic map (
        DataWidth => 9,
        AddressRange => 1500,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_weights_V_address0,
        ce0 => dense_2_weights_V_ce0,
        q0 => dense_2_weights_V_q0);

    dense_2_bias_V_U : component cnn_dense_2_bias_V
    generic map (
        DataWidth => 9,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_bias_V_address0,
        ce0 => dense_2_bias_V_ce0,
        q0 => dense_2_bias_V_q0);

    dense_out_weights_V_U : component cnn_dense_out_weiocq
    generic map (
        DataWidth => 9,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_weights_V_address0,
        ce0 => dense_out_weights_V_ce0,
        q0 => dense_out_weights_V_q0);

    dense_out_bias_V_U : component cnn_dense_out_biapcA
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_bias_V_address0,
        ce0 => dense_out_bias_V_ce0,
        q0 => dense_out_bias_V_q0);

    dense_array_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_V_address0,
        ce0 => dense_array_V_ce0,
        we0 => dense_array_V_we0,
        d0 => dense_array_V_d0,
        q0 => dense_array_V_q0);

    conv_1_input_V_U : component cnn_conv_1_input_V
    generic map (
        DataWidth => 14,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_input_V_address0,
        ce0 => conv_1_input_V_ce0,
        we0 => conv_1_input_V_we0,
        d0 => select_ln603_3_reg_1922,
        q0 => conv_1_input_V_q0);

    conv_1_out_V_U : component cnn_conv_1_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 4056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_out_V_address0,
        ce0 => conv_1_out_V_ce0,
        we0 => conv_1_out_V_we0,
        d0 => conv_1_out_V_d0,
        q0 => conv_1_out_V_q0,
        address1 => grp_max_pool_1_fu_724_conv_out_V_address1,
        ce1 => conv_1_out_V_ce1,
        q1 => conv_1_out_V_q1);

    max_pool_1_out_V_U : component cnn_max_pool_1_ouqcK
    generic map (
        DataWidth => 14,
        AddressRange => 1014,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_pool_1_out_V_address0,
        ce0 => max_pool_1_out_V_ce0,
        we0 => max_pool_1_out_V_we0,
        d0 => max_pool_1_out_V_d0,
        q0 => max_pool_1_out_V_q0);

    conv_2_out_V_U : component cnn_conv_2_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 1936,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_out_V_address0,
        ce0 => conv_2_out_V_ce0,
        we0 => conv_2_out_V_we0,
        d0 => conv_2_out_V_d0,
        q0 => conv_2_out_V_q0);

    max_pool_2_out_V_U : component cnn_max_pool_2_ourcU
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_pool_2_out_V_address0,
        ce0 => max_pool_2_out_V_ce0,
        we0 => max_pool_2_out_V_we0,
        d0 => max_pool_2_out_V_d0,
        q0 => max_pool_2_out_V_q0);

    flat_array_V_U : component cnn_max_pool_2_ourcU
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => flat_array_V_address0,
        ce0 => flat_array_V_ce0,
        we0 => flat_array_V_we0,
        d0 => flat_array_V_d0,
        q0 => flat_array_V_q0);

    dense_1_out_V_U : component cnn_dense_1_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_out_V_address0,
        ce0 => dense_1_out_V_ce0,
        we0 => dense_1_out_V_we0,
        d0 => dense_1_out_V_d0,
        q0 => dense_1_out_V_q0);

    dense_2_out_V_U : component cnn_dense_2_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_out_V_address0,
        ce0 => dense_2_out_V_ce0,
        we0 => dense_2_out_V_we0,
        d0 => dense_2_out_V_d0,
        q0 => dense_2_out_V_q0);

    prediction_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => prediction_V_address0,
        ce0 => prediction_V_ce0,
        we0 => prediction_V_we0,
        d0 => prediction_V_d0,
        q0 => prediction_V_q0);

    grp_max_pool_1_fu_724 : component max_pool_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_1_fu_724_ap_start,
        ap_done => grp_max_pool_1_fu_724_ap_done,
        ap_idle => grp_max_pool_1_fu_724_ap_idle,
        ap_ready => grp_max_pool_1_fu_724_ap_ready,
        conv_out_V_address0 => grp_max_pool_1_fu_724_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_1_fu_724_conv_out_V_ce0,
        conv_out_V_q0 => conv_1_out_V_q0,
        conv_out_V_address1 => grp_max_pool_1_fu_724_conv_out_V_address1,
        conv_out_V_ce1 => grp_max_pool_1_fu_724_conv_out_V_ce1,
        conv_out_V_q1 => conv_1_out_V_q1,
        max_pool_out_V_address0 => grp_max_pool_1_fu_724_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_1_fu_724_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_1_fu_724_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_1_fu_724_max_pool_out_V_d0);

    grp_conv_2_fu_730 : component conv_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_2_fu_730_ap_start,
        ap_done => grp_conv_2_fu_730_ap_done,
        ap_idle => grp_conv_2_fu_730_ap_idle,
        ap_ready => grp_conv_2_fu_730_ap_ready,
        input_V_address0 => grp_conv_2_fu_730_input_V_address0,
        input_V_ce0 => grp_conv_2_fu_730_input_V_ce0,
        input_V_q0 => max_pool_1_out_V_q0,
        conv_out_V_address0 => grp_conv_2_fu_730_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_2_fu_730_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_2_fu_730_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_2_fu_730_conv_out_V_d0);

    grp_conv_1_fu_740 : component conv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_1_fu_740_ap_start,
        ap_done => grp_conv_1_fu_740_ap_done,
        ap_idle => grp_conv_1_fu_740_ap_idle,
        ap_ready => grp_conv_1_fu_740_ap_ready,
        input_V_address0 => grp_conv_1_fu_740_input_V_address0,
        input_V_ce0 => grp_conv_1_fu_740_input_V_ce0,
        input_V_q0 => conv_1_input_V_q0,
        conv_out_V_address0 => grp_conv_1_fu_740_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_1_fu_740_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_1_fu_740_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_1_fu_740_conv_out_V_d0);

    grp_soft_max_fu_750 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_soft_max_fu_750_ap_start,
        ap_done => grp_soft_max_fu_750_ap_done,
        ap_idle => grp_soft_max_fu_750_ap_idle,
        ap_ready => grp_soft_max_fu_750_ap_ready,
        dense_array_V_address0 => grp_soft_max_fu_750_dense_array_V_address0,
        dense_array_V_ce0 => grp_soft_max_fu_750_dense_array_V_ce0,
        dense_array_V_we0 => grp_soft_max_fu_750_dense_array_V_we0,
        dense_array_V_d0 => grp_soft_max_fu_750_dense_array_V_d0,
        dense_array_V_q0 => dense_array_V_q0,
        prediction_V_address0 => grp_soft_max_fu_750_prediction_V_address0,
        prediction_V_ce0 => grp_soft_max_fu_750_prediction_V_ce0,
        prediction_V_we0 => grp_soft_max_fu_750_prediction_V_we0,
        prediction_V_d0 => grp_soft_max_fu_750_prediction_V_d0);

    grp_max_pool_2_fu_762 : component max_pool_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_2_fu_762_ap_start,
        ap_done => grp_max_pool_2_fu_762_ap_done,
        ap_idle => grp_max_pool_2_fu_762_ap_idle,
        ap_ready => grp_max_pool_2_fu_762_ap_ready,
        conv_out_V_address0 => grp_max_pool_2_fu_762_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_2_fu_762_conv_out_V_ce0,
        conv_out_V_q0 => conv_2_out_V_q0,
        max_pool_out_V_address0 => grp_max_pool_2_fu_762_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_2_fu_762_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_2_fu_762_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_2_fu_762_max_pool_out_V_d0);

    grp_flat_fu_768 : component flat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flat_fu_768_ap_start,
        ap_done => grp_flat_fu_768_ap_done,
        ap_idle => grp_flat_fu_768_ap_idle,
        ap_ready => grp_flat_fu_768_ap_ready,
        max_pool_out_V_address0 => grp_flat_fu_768_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_flat_fu_768_max_pool_out_V_ce0,
        max_pool_out_V_q0 => max_pool_2_out_V_q0,
        flat_array_V_address0 => grp_flat_fu_768_flat_array_V_address0,
        flat_array_V_ce0 => grp_flat_fu_768_flat_array_V_ce0,
        flat_array_V_we0 => grp_flat_fu_768_flat_array_V_we0,
        flat_array_V_d0 => grp_flat_fu_768_flat_array_V_d0);

    cnn_fpext_32ns_64sc4_U30 : component cnn_fpext_32ns_64sc4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cnn_input_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_774_p1);

    cnn_mac_muladd_9stde_U31 : component cnn_mac_muladd_9stde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 14,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_1_weights_V_q0,
        din1 => flat_array_V_q0,
        din2 => grp_fu_1828_p2,
        dout => grp_fu_1828_p3);

    cnn_mac_muladd_9sudo_U32 : component cnn_mac_muladd_9sudo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 13,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_2_weights_V_q0,
        din1 => grp_fu_1837_p1,
        din2 => grp_fu_1837_p2,
        dout => grp_fu_1837_p3);

    cnn_mac_muladd_13vdy_U33 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1846_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_1846_p2,
        dout => grp_fu_1846_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv_1_fu_740_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_1_fu_740_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_conv_1_fu_740_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_1_fu_740_ap_ready = ap_const_logic_1)) then 
                    grp_conv_1_fu_740_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_2_fu_730_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_2_fu_730_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_conv_2_fu_730_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_2_fu_730_ap_ready = ap_const_logic_1)) then 
                    grp_conv_2_fu_730_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flat_fu_768_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_flat_fu_768_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_flat_fu_768_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flat_fu_768_ap_ready = ap_const_logic_1)) then 
                    grp_flat_fu_768_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_1_fu_724_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_1_fu_724_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_max_pool_1_fu_724_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_1_fu_724_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_1_fu_724_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_2_fu_762_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_2_fu_762_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_max_pool_2_fu_762_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_2_fu_762_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_2_fu_762_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_750_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_soft_max_fu_750_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1407_p2 = ap_const_lv1_1))) then 
                    grp_soft_max_fu_750_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_750_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_750_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_i_reg_679_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1264_p2 = ap_const_lv1_1))) then 
                d_0_i_reg_679 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                d_0_i_reg_679 <= d_reg_2029;
            end if; 
        end if;
    end process;

    f_0_i_reg_702_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                f_0_i_reg_702 <= f_reg_2048;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1407_p2 = ap_const_lv1_0))) then 
                f_0_i_reg_702 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i24_0_reg_713_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i24_0_reg_713 <= i_3_reg_2076;
            elsif (((grp_soft_max_fu_750_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i24_0_reg_713 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i5_reg_645_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_0_i5_reg_645 <= i_2_reg_1982;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1145_p2 = ap_const_lv1_1))) then 
                i_0_i5_reg_645 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_600_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_0_i_reg_600 <= i_1_reg_1930;
            elsif (((grp_flat_fu_768_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_0_i_reg_600 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_826_p2 = ap_const_lv1_1))) then 
                i_0_reg_568 <= i_reg_1878;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_568 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ix_in_0_reg_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_826_p2 = ap_const_lv1_1))) then 
                ix_in_0_reg_556 <= ix_in_reg_1883;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ix_in_0_reg_556 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    ix_in_1_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ix_in_1_reg_579 <= add_ln28_reg_1911;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_778_p2 = ap_const_lv1_0))) then 
                ix_in_1_reg_579 <= ix_in_0_reg_556;
            end if; 
        end if;
    end process;

    j_0_i10_reg_668_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_0_i10_reg_668 <= j_2_reg_2001;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1264_p2 = ap_const_lv1_0))) then 
                j_0_i10_reg_668 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_623_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_0_i_reg_623 <= j_1_reg_1949;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1145_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_623 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_589_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_589 <= j_reg_1896;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_778_p2 = ap_const_lv1_0))) then 
                j_0_reg_589 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_29_reg_611_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_Val2_29_reg_611 <= grp_fu_1828_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1145_p2 = ap_const_lv1_0))) then 
                p_Val2_29_reg_611 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_32_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                p_Val2_32_reg_656 <= grp_fu_1837_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1264_p2 = ap_const_lv1_0))) then 
                p_Val2_32_reg_656 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_38_reg_690_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                p_Val2_38_reg_690 <= grp_fu_1846_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1407_p2 = ap_const_lv1_0))) then 
                p_Val2_38_reg_690 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                phi_mul_reg_634 <= add_ln1117_3_reg_1954;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1145_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_634 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln13_fu_1165_p2 = ap_const_lv1_0))) then
                add_ln1117_3_reg_1954 <= add_ln1117_3_fu_1182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_826_p2 = ap_const_lv1_0))) then
                add_ln203_7_reg_1901 <= add_ln203_7_fu_842_p2;
                add_ln28_reg_1911 <= add_ln28_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cnn_input_load_reg_1916 <= cnn_input_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                d_reg_2029 <= d_fu_1413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                f_reg_2048 <= f_fu_1433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_1_reg_1930 <= i_1_fu_1151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_2_reg_1982 <= i_2_fu_1270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                i_3_reg_2076 <= i_3_fu_1526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1878 <= i_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                icmp_ln935_reg_2091 <= icmp_ln935_fu_1537_p2;
                icmp_ln958_reg_2117 <= icmp_ln958_fu_1709_p2;
                    or_ln_reg_2112(0) <= or_ln_fu_1701_p3(0);
                p_Result_41_reg_2096 <= prediction_V_q0(13 downto 13);
                sub_ln944_reg_2106 <= sub_ln944_fu_1591_p2;
                tmp_V_13_reg_2101 <= tmp_V_13_fu_1557_p3;
                trunc_ln943_reg_2122 <= trunc_ln943_fu_1715_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_778_p2 = ap_const_lv1_0))) then
                ix_in_reg_1883 <= ix_in_fu_790_p2;
                    sub_ln203_reg_1888(10 downto 2) <= sub_ln203_fu_820_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                j_1_reg_1949 <= j_1_fu_1171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                j_2_reg_2001 <= j_2_fu_1290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1896 <= j_fu_832_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                select_ln603_3_reg_1922 <= select_ln603_3_fu_1133_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1264_p2 = ap_const_lv1_0))) then
                    zext_ln13_2_reg_1993(4 downto 0) <= zext_ln13_2_fu_1280_p1(4 downto 0);
                    zext_ln14_1_reg_1987(4 downto 0) <= zext_ln14_1_fu_1276_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1145_p2 = ap_const_lv1_0))) then
                    zext_ln13_reg_1941(5 downto 0) <= zext_ln13_fu_1161_p1(5 downto 0);
                    zext_ln14_reg_1935(5 downto 0) <= zext_ln14_fu_1157_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1407_p2 = ap_const_lv1_0))) then
                    zext_ln46_reg_2040(3 downto 0) <= zext_ln46_fu_1423_p1(3 downto 0);
                    zext_ln48_reg_2034(3 downto 0) <= zext_ln48_fu_1419_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln69_fu_1520_p2 = ap_const_lv1_0))) then
                    zext_ln70_reg_2081(3 downto 0) <= zext_ln70_fu_1532_p1(3 downto 0);
            end if;
        end if;
    end process;
    sub_ln203_reg_1888(1 downto 0) <= "00";
    zext_ln14_reg_1935(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_1941(14 downto 6) <= "000000000";
    zext_ln14_1_reg_1987(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln13_2_reg_1993(11 downto 5) <= "0000000";
    zext_ln48_reg_2034(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_2040(8 downto 4) <= "00000";
    zext_ln70_reg_2081(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln_reg_2112(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_778_p2, ap_CS_fsm_state3, icmp_ln25_fu_826_p2, ap_CS_fsm_state17, icmp_ln9_fu_1145_p2, ap_CS_fsm_state18, icmp_ln13_fu_1165_p2, ap_CS_fsm_state21, icmp_ln9_1_fu_1264_p2, ap_CS_fsm_state22, icmp_ln13_1_fu_1284_p2, ap_CS_fsm_state25, icmp_ln41_fu_1407_p2, ap_CS_fsm_state26, icmp_ln46_fu_1427_p2, ap_CS_fsm_state30, icmp_ln69_fu_1520_p2, grp_max_pool_1_fu_724_ap_done, grp_conv_2_fu_730_ap_done, grp_conv_1_fu_740_ap_done, grp_soft_max_fu_750_ap_done, grp_max_pool_2_fu_762_ap_done, grp_flat_fu_768_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_778_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_826_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_conv_1_fu_740_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_max_pool_1_fu_724_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_conv_2_fu_730_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_max_pool_2_fu_762_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_flat_fu_768_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1145_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln13_fu_1165_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln13_1_fu_1284_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1407_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln46_fu_1427_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state29 => 
                if (((grp_soft_max_fu_750_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln69_fu_1520_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_924_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_884_p1));
    a_fu_1655_p2 <= (icmp_ln947_fu_1617_p2 and icmp_ln947_1_fu_1649_p2);
    add_ln1116_4_fu_1474_p2 <= std_logic_vector(unsigned(add_ln1116_fu_1468_p2) + unsigned(zext_ln46_reg_2040));
    add_ln1116_fu_1468_p2 <= std_logic_vector(unsigned(zext_ln1116_8_fu_1464_p1) + unsigned(zext_ln1116_fu_1452_p1));
    add_ln1117_2_fu_1331_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_1325_p2) + unsigned(zext_ln13_2_reg_1993));
    add_ln1117_3_fu_1182_p2 <= std_logic_vector(unsigned(phi_mul_reg_634) + unsigned(ap_const_lv15_32));
    add_ln1117_fu_1188_p2 <= std_logic_vector(unsigned(phi_mul_reg_634) + unsigned(zext_ln13_reg_1941));
    add_ln203_1_fu_1384_p2 <= std_logic_vector(signed(sext_ln703_2_fu_1374_p1) + signed(trunc_ln703_1_fu_1370_p1));
    add_ln203_7_fu_842_p2 <= std_logic_vector(unsigned(sub_ln203_reg_1888) + unsigned(zext_ln203_16_fu_838_p1));
    add_ln203_fu_1241_p2 <= std_logic_vector(signed(sext_ln703_fu_1231_p1) + signed(trunc_ln703_fu_1227_p1));
    add_ln28_fu_852_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ix_in_1_reg_579));
    add_ln581_fu_936_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_fu_924_p2));
    add_ln703_1_fu_1378_p2 <= std_logic_vector(unsigned(p_Val2_32_reg_656) + unsigned(sext_ln1265_1_fu_1366_p1));
    add_ln703_2_fu_1513_p2 <= std_logic_vector(signed(sext_ln1265_2_fu_1509_p1) + signed(p_Val2_38_reg_690));
    add_ln703_fu_1235_p2 <= std_logic_vector(unsigned(p_Val2_29_reg_611) + unsigned(sext_ln1265_fu_1223_p1));
    add_ln949_fu_1675_p2 <= std_logic_vector(signed(ap_const_lv14_3FE8) + signed(trunc_ln944_fu_1597_p1));
    add_ln958_fu_1722_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_2106));
    add_ln964_fu_1791_p2 <= std_logic_vector(unsigned(select_ln964_fu_1778_p3) + unsigned(sub_ln964_fu_1786_p2));
    and_ln581_fu_1049_p2 <= (xor_ln582_fu_1043_p2 and icmp_ln581_fu_930_p2);
    and_ln582_fu_1031_p2 <= (xor_ln571_fu_1025_p2 and icmp_ln582_fu_960_p2);
    and_ln585_1_fu_1067_p2 <= (icmp_ln585_fu_970_p2 and and_ln581_fu_1049_p2);
    and_ln585_fu_1061_p2 <= (xor_ln585_fu_1055_p2 and and_ln581_fu_1049_p2);
    and_ln603_fu_1085_p2 <= (xor_ln581_fu_1079_p2 and icmp_ln603_fu_976_p2);
    and_ln949_fu_1689_p2 <= (xor_ln949_fu_1669_p2 and p_Result_37_fu_1681_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state30, icmp_ln69_fu_1520_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln69_fu_1520_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, icmp_ln69_fu_1520_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln69_fu_1520_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_986_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_910_p3),to_integer(unsigned('0' & zext_ln586_fu_982_p1(31-1 downto 0)))));
    bitcast_ln696_fu_996_p1 <= cnn_input_load_reg_1916;
    bitcast_ln739_fu_1816_p1 <= p_Result_43_fu_1804_p5;
    cnn_input_address0 <= zext_ln27_fu_847_p1(10 - 1 downto 0);

    cnn_input_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnn_input_ce0 <= ap_const_logic_1;
        else 
            cnn_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_V_address0_assign_proc : process(grp_conv_1_fu_740_input_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, sext_ln203_fu_1141_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_address0 <= sext_ln203_fu_1141_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_address0 <= grp_conv_1_fu_740_input_V_address0;
        else 
            conv_1_input_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_1_input_V_ce0_assign_proc : process(grp_conv_1_fu_740_input_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_ce0 <= grp_conv_1_fu_740_input_V_ce0;
        else 
            conv_1_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_we0 <= ap_const_logic_1;
        else 
            conv_1_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_1_fu_724_conv_out_V_address0, grp_conv_1_fu_740_conv_out_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_address0 <= grp_conv_1_fu_740_conv_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_address0 <= grp_max_pool_1_fu_724_conv_out_V_address0;
        else 
            conv_1_out_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_1_fu_724_conv_out_V_ce0, grp_conv_1_fu_740_conv_out_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_ce0 <= grp_conv_1_fu_740_conv_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_ce0 <= grp_max_pool_1_fu_724_conv_out_V_ce0;
        else 
            conv_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_ce1_assign_proc : process(grp_max_pool_1_fu_724_conv_out_V_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_ce1 <= grp_max_pool_1_fu_724_conv_out_V_ce1;
        else 
            conv_1_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_740_conv_out_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_d0 <= grp_conv_1_fu_740_conv_out_V_d0;
        else 
            conv_1_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_778_p2, grp_conv_1_fu_740_conv_out_V_we0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_778_p2 = ap_const_lv1_1))) then 
            conv_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_we0 <= grp_conv_1_fu_740_conv_out_V_we0;
        else 
            conv_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_730_conv_out_V_address0, grp_max_pool_2_fu_762_conv_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_address0 <= ap_const_lv64_0(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_V_address0 <= grp_max_pool_2_fu_762_conv_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_address0 <= grp_conv_2_fu_730_conv_out_V_address0;
        else 
            conv_2_out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_730_conv_out_V_ce0, grp_max_pool_2_fu_762_conv_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_V_ce0 <= grp_max_pool_2_fu_762_conv_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_ce0 <= grp_conv_2_fu_730_conv_out_V_ce0;
        else 
            conv_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_730_conv_out_V_d0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_d0 <= grp_conv_2_fu_730_conv_out_V_d0;
        else 
            conv_2_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_778_p2, grp_conv_2_fu_730_conv_out_V_we0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_778_p2 = ap_const_lv1_1))) then 
            conv_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_we0 <= grp_conv_2_fu_730_conv_out_V_we0;
        else 
            conv_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_1413_p2 <= std_logic_vector(unsigned(d_0_i_reg_679) + unsigned(ap_const_lv4_1));
    dense_1_bias_V_address0 <= zext_ln14_reg_1935(6 - 1 downto 0);

    dense_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_address0_assign_proc : process(zext_ln14_reg_1935, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state20, zext_ln14_3_fu_1296_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_1_out_V_address0 <= zext_ln14_3_fu_1296_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dense_1_out_V_address0 <= zext_ln14_reg_1935(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_1_out_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            dense_1_out_V_address0 <= "XXXXXX";
        end if; 
    end process;


    dense_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state22, grp_flat_fu_768_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((grp_flat_fu_768_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            dense_1_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, select_ln19_fu_1255_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dense_1_out_V_d0 <= select_ln19_fu_1255_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_1_out_V_d0 <= ap_const_lv13_0;
        else 
            dense_1_out_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_out_V_we0_assign_proc : process(grp_flat_fu_768_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((grp_flat_fu_768_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            dense_1_out_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_address0 <= zext_ln1117_fu_1193_p1(15 - 1 downto 0);

    dense_1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_bias_V_address0 <= zext_ln14_1_reg_1987(5 - 1 downto 0);

    dense_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_address0_assign_proc : process(ap_CS_fsm_state17, zext_ln14_1_reg_1987, ap_CS_fsm_state26, ap_CS_fsm_state24, zext_ln48_1_fu_1439_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_2_out_V_address0 <= zext_ln48_1_fu_1439_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dense_2_out_V_address0 <= zext_ln14_1_reg_1987(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dense_2_out_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            dense_2_out_V_address0 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state24, select_ln19_1_fu_1398_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dense_2_out_V_d0 <= select_ln19_1_fu_1398_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dense_2_out_V_d0 <= ap_const_lv13_0;
        else 
            dense_2_out_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_out_V_we0_assign_proc : process(ap_CS_fsm_state17, icmp_ln9_fu_1145_p2, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1145_p2 = ap_const_lv1_1)))) then 
            dense_2_out_V_we0 <= ap_const_logic_1;
        else 
            dense_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_weights_V_address0 <= sext_ln1117_fu_1336_p1(11 - 1 downto 0);

    dense_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(zext_ln48_reg_2034, grp_soft_max_fu_750_dense_array_V_address0, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_address0 <= zext_ln48_reg_2034(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_address0 <= grp_soft_max_fu_750_dense_array_V_address0;
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(grp_soft_max_fu_750_dense_array_V_ce0, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_ce0 <= grp_soft_max_fu_750_dense_array_V_ce0;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_d0_assign_proc : process(grp_soft_max_fu_750_dense_array_V_d0, ap_CS_fsm_state28, ap_CS_fsm_state29, add_ln703_2_fu_1513_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_d0 <= add_ln703_2_fu_1513_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_d0 <= grp_soft_max_fu_750_dense_array_V_d0;
        else 
            dense_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_array_V_we0_assign_proc : process(grp_soft_max_fu_750_dense_array_V_we0, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_we0 <= grp_soft_max_fu_750_dense_array_V_we0;
        else 
            dense_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_V_address0 <= zext_ln48_reg_2034(4 - 1 downto 0);

    dense_out_bias_V_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_out_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_weights_V_address0 <= zext_ln1116_9_fu_1479_p1(9 - 1 downto 0);

    dense_out_weights_V_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_out_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_874_p4 <= ireg_V_fu_858_p1(62 downto 52);
    f_fu_1433_p2 <= std_logic_vector(unsigned(f_0_i_reg_702) + unsigned(ap_const_lv5_1));

    flat_array_V_address0_assign_proc : process(ap_CS_fsm_state18, grp_flat_fu_768_flat_array_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state14, zext_ln14_2_fu_1177_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            flat_array_V_address0 <= zext_ln14_2_fu_1177_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flat_array_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_address0 <= grp_flat_fu_768_flat_array_V_address0;
        else 
            flat_array_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_state18, grp_max_pool_2_fu_762_ap_done, grp_flat_fu_768_flat_array_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((grp_max_pool_2_fu_762_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_ce0 <= grp_flat_fu_768_flat_array_V_ce0;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_V_d0_assign_proc : process(grp_flat_fu_768_flat_array_V_d0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flat_array_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_d0 <= grp_flat_fu_768_flat_array_V_d0;
        else 
            flat_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    flat_array_V_we0_assign_proc : process(grp_max_pool_2_fu_762_ap_done, grp_flat_fu_768_flat_array_V_we0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if (((grp_max_pool_2_fu_762_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            flat_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_we0 <= grp_flat_fu_768_flat_array_V_we0;
        else 
            flat_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_1_fu_740_ap_start <= grp_conv_1_fu_740_ap_start_reg;
    grp_conv_2_fu_730_ap_start <= grp_conv_2_fu_730_ap_start_reg;
    grp_flat_fu_768_ap_start <= grp_flat_fu_768_ap_start_reg;
    grp_fu_1828_p2 <= (p_Val2_29_reg_611 & ap_const_lv8_0);
    grp_fu_1837_p1 <= grp_fu_1837_p10(13 - 1 downto 0);
    grp_fu_1837_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_1_out_V_q0),22));
    grp_fu_1837_p2 <= (p_Val2_32_reg_656 & ap_const_lv8_0);
    grp_fu_1846_p0 <= grp_fu_1846_p00(13 - 1 downto 0);
    grp_fu_1846_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    grp_fu_1846_p2 <= (p_Val2_38_reg_690 & ap_const_lv8_0);
    grp_max_pool_1_fu_724_ap_start <= grp_max_pool_1_fu_724_ap_start_reg;
    grp_max_pool_2_fu_762_ap_start <= grp_max_pool_2_fu_762_ap_start_reg;
    grp_soft_max_fu_750_ap_start <= grp_soft_max_fu_750_ap_start_reg;
    i_1_fu_1151_p2 <= std_logic_vector(unsigned(i_0_i_reg_600) + unsigned(ap_const_lv6_1));
    i_2_fu_1270_p2 <= std_logic_vector(unsigned(i_0_i5_reg_645) + unsigned(ap_const_lv5_1));
    i_3_fu_1526_p2 <= std_logic_vector(unsigned(i24_0_reg_713) + unsigned(ap_const_lv4_1));
    i_fu_784_p2 <= std_logic_vector(unsigned(i_0_reg_568) + unsigned(ap_const_lv5_1));
    icmp_ln13_1_fu_1284_p2 <= "1" when (j_0_i10_reg_668 = ap_const_lv6_32) else "0";
    icmp_ln13_fu_1165_p2 <= "1" when (j_0_i_reg_623 = ap_const_lv9_190) else "0";
    icmp_ln23_fu_778_p2 <= "1" when (i_0_reg_568 = ap_const_lv5_1C) else "0";
    icmp_ln25_fu_826_p2 <= "1" when (j_0_reg_589 = ap_const_lv5_1C) else "0";
    icmp_ln41_fu_1407_p2 <= "1" when (d_0_i_reg_679 = ap_const_lv4_A) else "0";
    icmp_ln46_fu_1427_p2 <= "1" when (f_0_i_reg_702 = ap_const_lv5_1E) else "0";
    icmp_ln571_fu_918_p2 <= "1" when (trunc_ln556_fu_862_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_930_p2 <= "1" when (signed(F2_fu_924_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln582_fu_960_p2 <= "1" when (F2_fu_924_p2 = ap_const_lv12_8) else "0";
    icmp_ln585_fu_970_p2 <= "1" when (unsigned(sh_amt_fu_948_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_976_p2 <= "1" when (unsigned(sh_amt_fu_948_p3) < unsigned(ap_const_lv12_E)) else "0";
    icmp_ln69_fu_1520_p2 <= "1" when (i24_0_reg_713 = ap_const_lv4_A) else "0";
    icmp_ln935_fu_1537_p2 <= "1" when (prediction_V_q0 = ap_const_lv14_0) else "0";
    icmp_ln947_1_fu_1649_p2 <= "0" when (p_Result_36_fu_1643_p2 = ap_const_lv14_0) else "1";
    icmp_ln947_fu_1617_p2 <= "1" when (signed(tmp_25_fu_1607_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_1709_p2 <= "1" when (signed(lsb_index_fu_1601_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln9_1_fu_1264_p2 <= "1" when (i_0_i5_reg_645 = ap_const_lv5_1E) else "0";
    icmp_ln9_fu_1145_p2 <= "1" when (i_0_i_reg_600 = ap_const_lv6_32) else "0";
    ireg_V_fu_858_p1 <= grp_fu_774_p1;
    ix_in_fu_790_p2 <= std_logic_vector(unsigned(ix_in_0_reg_556) + unsigned(ap_const_lv10_1C));
    j_1_fu_1171_p2 <= std_logic_vector(unsigned(j_0_i_reg_623) + unsigned(ap_const_lv9_1));
    j_2_fu_1290_p2 <= std_logic_vector(unsigned(j_0_i10_reg_668) + unsigned(ap_const_lv6_1));
    j_fu_832_p2 <= std_logic_vector(unsigned(j_0_reg_589) + unsigned(ap_const_lv5_1));
    
    l_fu_1583_p3_proc : process(p_Result_42_fu_1575_p3)
    begin
        l_fu_1583_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_42_fu_1575_p3(i) = '1' then
                l_fu_1583_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_1601_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_1591_p2));
    lshr_ln947_fu_1637_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln947_fu_1633_p1(14-1 downto 0)))));
    lshr_ln958_fu_1727_p2 <= std_logic_vector(shift_right(unsigned(m_fu_1719_p1),to_integer(unsigned('0' & add_ln958_fu_1722_p2(31-1 downto 0)))));
    m_12_fu_1744_p3 <= 
        lshr_ln958_fu_1727_p2 when (icmp_ln958_reg_2117(0) = '1') else 
        shl_ln958_fu_1738_p2;
    m_13_fu_1751_p2 <= std_logic_vector(unsigned(m_12_fu_1744_p3) + unsigned(or_ln_reg_2112));
    m_16_fu_1766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_1756_p4),32));
    m_fu_1719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_13_reg_2101),32));
    m_s_fu_1756_p4 <= m_13_fu_1751_p2(31 downto 1);
    man_V_1_fu_904_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_40_fu_900_p1));
    man_V_2_fu_910_p3 <= 
        man_V_1_fu_904_p2 when (p_Result_39_fu_866_p3(0) = '1') else 
        p_Result_40_fu_900_p1;

    max_pool_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_1_fu_724_max_pool_out_V_address0, grp_conv_2_fu_730_input_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_address0 <= grp_conv_2_fu_730_input_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_address0 <= grp_max_pool_1_fu_724_max_pool_out_V_address0;
        else 
            max_pool_1_out_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_1_fu_724_max_pool_out_V_ce0, grp_conv_2_fu_730_input_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_ce0 <= grp_conv_2_fu_730_input_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_ce0 <= grp_max_pool_1_fu_724_max_pool_out_V_ce0;
        else 
            max_pool_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_1_fu_724_max_pool_out_V_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_d0 <= grp_max_pool_1_fu_724_max_pool_out_V_d0;
        else 
            max_pool_1_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_778_p2, grp_max_pool_1_fu_724_max_pool_out_V_we0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_778_p2 = ap_const_lv1_1))) then 
            max_pool_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_we0 <= grp_max_pool_1_fu_724_max_pool_out_V_we0;
        else 
            max_pool_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_762_max_pool_out_V_address0, grp_flat_fu_768_max_pool_out_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            max_pool_2_out_V_address0 <= grp_flat_fu_768_max_pool_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_address0 <= grp_max_pool_2_fu_762_max_pool_out_V_address0;
        else 
            max_pool_2_out_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_762_max_pool_out_V_ce0, grp_flat_fu_768_max_pool_out_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            max_pool_2_out_V_ce0 <= grp_flat_fu_768_max_pool_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_ce0 <= grp_max_pool_2_fu_762_max_pool_out_V_ce0;
        else 
            max_pool_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_762_max_pool_out_V_d0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_d0 <= grp_max_pool_2_fu_762_max_pool_out_V_d0;
        else 
            max_pool_2_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_778_p2, grp_max_pool_2_fu_762_max_pool_out_V_we0, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_778_p2 = ap_const_lv1_1))) then 
            max_pool_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_we0 <= grp_max_pool_2_fu_762_max_pool_out_V_we0;
        else 
            max_pool_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln581_fu_1073_p2 <= (or_ln582_fu_1037_p2 or icmp_ln581_fu_930_p2);
    or_ln582_fu_1037_p2 <= (icmp_ln582_fu_960_p2 or icmp_ln571_fu_918_p2);
    or_ln603_1_fu_1113_p2 <= (and_ln585_fu_1061_p2 or and_ln582_fu_1031_p2);
    or_ln603_2_fu_1127_p2 <= (or_ln603_fu_1099_p2 or or_ln603_1_fu_1113_p2);
    or_ln603_fu_1099_p2 <= (and_ln603_fu_1085_p2 or and_ln585_1_fu_1067_p2);
    or_ln949_fu_1695_p2 <= (and_ln949_fu_1689_p2 or a_fu_1655_p2);
    or_ln_fu_1701_p3 <= (ap_const_lv31_0 & or_ln949_fu_1695_p2);
    p_Result_36_fu_1643_p2 <= (tmp_V_13_fu_1557_p3 and lshr_ln947_fu_1637_p2);
    p_Result_37_fu_1681_p3 <= tmp_V_13_fu_1557_p3(to_integer(unsigned(add_ln949_fu_1675_p2)) downto to_integer(unsigned(add_ln949_fu_1675_p2))) when (to_integer(unsigned(add_ln949_fu_1675_p2))>= 0 and to_integer(unsigned(add_ln949_fu_1675_p2))<=13) else "-";
    p_Result_39_fu_866_p3 <= ireg_V_fu_858_p1(63 downto 63);
    p_Result_40_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_892_p3),54));
    p_Result_41_fu_1543_p3 <= prediction_V_q0(13 downto 13);
    p_Result_42_fu_1575_p3 <= (ap_const_lv18_3FFFF & p_Result_s_fu_1565_p4);
    p_Result_43_fu_1804_p5 <= (tmp_6_fu_1797_p3 & m_16_fu_1766_p1(22 downto 0));
    
    p_Result_s_fu_1565_p4_proc : process(tmp_V_13_fu_1557_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_1565_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_13_fu_1557_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_1565_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_1565_p4_i) := tmp_V_13_fu_1557_p3(14-1-p_Result_s_fu_1565_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_1565_p4 <= resvalue(14-1 downto 0);
    end process;


    prediction_V_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state30, zext_ln70_fu_1532_p1, grp_soft_max_fu_750_prediction_V_address0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            prediction_V_address0 <= zext_ln70_fu_1532_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            prediction_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_address0 <= grp_soft_max_fu_750_prediction_V_address0;
        else 
            prediction_V_address0 <= "XXXX";
        end if; 
    end process;


    prediction_V_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state30, grp_soft_max_fu_750_prediction_V_ce0, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            prediction_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_ce0 <= grp_soft_max_fu_750_prediction_V_ce0;
        else 
            prediction_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_V_d0_assign_proc : process(ap_CS_fsm_state21, grp_soft_max_fu_750_prediction_V_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            prediction_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_d0 <= grp_soft_max_fu_750_prediction_V_d0;
        else 
            prediction_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    prediction_V_we0_assign_proc : process(ap_CS_fsm_state21, icmp_ln9_1_fu_1264_p2, grp_soft_max_fu_750_prediction_V_we0, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1264_p2 = ap_const_lv1_1))) then 
            prediction_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_we0 <= grp_soft_max_fu_750_prediction_V_we0;
        else 
            prediction_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_address0 <= zext_ln70_reg_2081(4 - 1 downto 0);

    prediction_output_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_output_ce0 <= ap_const_logic_1;
        else 
            prediction_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_d0 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_2091(0) = '1') else 
        bitcast_ln739_fu_1816_p1;

    prediction_output_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_output_we0 <= ap_const_logic_1;
        else 
            prediction_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln19_1_fu_1398_p3 <= 
        ap_const_lv13_0 when (tmp_23_fu_1390_p3(0) = '1') else 
        add_ln203_1_fu_1384_p2;
    select_ln19_fu_1255_p3 <= 
        ap_const_lv13_0 when (tmp_22_fu_1247_p3(0) = '1') else 
        add_ln203_fu_1241_p2;
    select_ln588_fu_1007_p3 <= 
        ap_const_lv14_3FFF when (tmp_21_fu_999_p3(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_1_fu_1105_p3 <= 
        select_ln588_fu_1007_p3 when (and_ln585_fu_1061_p2(0) = '1') else 
        trunc_ln583_fu_966_p1;
    select_ln603_2_fu_1119_p3 <= 
        select_ln603_fu_1091_p3 when (or_ln603_fu_1099_p2(0) = '1') else 
        select_ln603_1_fu_1105_p3;
    select_ln603_3_fu_1133_p3 <= 
        select_ln603_2_fu_1119_p3 when (or_ln603_2_fu_1127_p2(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_fu_1091_p3 <= 
        shl_ln604_fu_1019_p2 when (and_ln603_fu_1085_p2(0) = '1') else 
        trunc_ln586_fu_992_p1;
    select_ln964_fu_1778_p3 <= 
        ap_const_lv8_7F when (tmp_27_fu_1770_p3(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1117_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_2_fu_1331_p2),64));

    sext_ln1265_1_fu_1366_p0 <= dense_2_bias_V_q0;
        sext_ln1265_1_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_1_fu_1366_p0),14));

        sext_ln1265_2_fu_1509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_out_bias_V_q0),14));

    sext_ln1265_fu_1223_p0 <= dense_1_bias_V_q0;
        sext_ln1265_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_1223_p0),14));

        sext_ln203_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_7_reg_1901),64));

        sext_ln581_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_948_p3),32));

    sext_ln581cast_fu_1015_p1 <= sext_ln581_fu_956_p1(14 - 1 downto 0);
    sext_ln703_2_fu_1374_p0 <= dense_2_bias_V_q0;
        sext_ln703_2_fu_1374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_1374_p0),13));

    sext_ln703_fu_1231_p0 <= dense_1_bias_V_q0;
        sext_ln703_fu_1231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_1231_p0),13));

    sh_amt_fu_948_p3 <= 
        add_ln581_fu_936_p2 when (icmp_ln581_fu_930_p2(0) = '1') else 
        sub_ln581_fu_942_p2;
    shl_ln604_fu_1019_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_966_p1),to_integer(unsigned('0' & sext_ln581cast_fu_1015_p1(14-1 downto 0)))));
    shl_ln958_fu_1738_p2 <= std_logic_vector(shift_left(unsigned(m_fu_1719_p1),to_integer(unsigned('0' & sub_ln958_fu_1733_p2(31-1 downto 0)))));
    sub_ln1117_fu_1325_p2 <= std_logic_vector(unsigned(zext_ln1117_6_fu_1309_p1) - unsigned(zext_ln1117_7_fu_1321_p1));
    sub_ln203_fu_820_p2 <= std_logic_vector(unsigned(zext_ln203_fu_804_p1) - unsigned(zext_ln203_15_fu_816_p1));
    sub_ln581_fu_942_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_924_p2));
    sub_ln944_fu_1591_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_1583_p3));
    sub_ln947_fu_1627_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln947_fu_1623_p1));
    sub_ln958_fu_1733_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_2106));
    sub_ln964_fu_1786_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(trunc_ln943_reg_2122));
    tmp_171_fu_808_p3 <= (i_0_reg_568 & ap_const_lv2_0);
    tmp_172_fu_1301_p3 <= (j_0_i10_reg_668 & ap_const_lv5_0);
    tmp_173_fu_1313_p3 <= (j_0_i10_reg_668 & ap_const_lv1_0);
    tmp_174_fu_1444_p3 <= (f_0_i_reg_702 & ap_const_lv3_0);
    tmp_175_fu_1456_p3 <= (f_0_i_reg_702 & ap_const_lv1_0);
    tmp_21_fu_999_p3 <= bitcast_ln696_fu_996_p1(31 downto 31);
    tmp_22_fu_1247_p3 <= add_ln703_fu_1235_p2(13 downto 13);
    tmp_23_fu_1390_p3 <= add_ln703_1_fu_1378_p2(13 downto 13);
    tmp_25_fu_1607_p4 <= lsb_index_fu_1601_p2(31 downto 1);
    tmp_26_fu_1661_p3 <= lsb_index_fu_1601_p2(31 downto 31);
    tmp_27_fu_1770_p3 <= m_13_fu_1751_p2(25 downto 25);
    tmp_6_fu_1797_p3 <= (p_Result_41_reg_2096 & add_ln964_fu_1791_p2);
    tmp_V_13_fu_1557_p3 <= 
        tmp_V_fu_1551_p2 when (p_Result_41_fu_1543_p3(0) = '1') else 
        prediction_V_q0;
    tmp_V_fu_1551_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(prediction_V_q0));
    tmp_fu_892_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_888_p1);
    tmp_s_fu_796_p3 <= (i_0_reg_568 & ap_const_lv5_0);
    trunc_ln556_fu_862_p1 <= ireg_V_fu_858_p1(63 - 1 downto 0);
    trunc_ln565_fu_888_p1 <= ireg_V_fu_858_p1(52 - 1 downto 0);
    trunc_ln583_fu_966_p1 <= man_V_2_fu_910_p3(14 - 1 downto 0);
    trunc_ln586_fu_992_p1 <= ashr_ln586_fu_986_p2(14 - 1 downto 0);
    trunc_ln703_1_fu_1370_p1 <= p_Val2_32_reg_656(13 - 1 downto 0);
    trunc_ln703_fu_1227_p1 <= p_Val2_29_reg_611(13 - 1 downto 0);
    trunc_ln943_fu_1715_p1 <= l_fu_1583_p3(8 - 1 downto 0);
    trunc_ln944_fu_1597_p1 <= sub_ln944_fu_1591_p2(14 - 1 downto 0);
    trunc_ln947_fu_1623_p1 <= sub_ln944_fu_1591_p2(4 - 1 downto 0);
    xor_ln571_fu_1025_p2 <= (icmp_ln571_fu_918_p2 xor ap_const_lv1_1);
    xor_ln581_fu_1079_p2 <= (or_ln581_fu_1073_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1043_p2 <= (or_ln582_fu_1037_p2 xor ap_const_lv1_1);
    xor_ln585_fu_1055_p2 <= (icmp_ln585_fu_970_p2 xor ap_const_lv1_1);
    xor_ln949_fu_1669_p2 <= (tmp_26_fu_1661_p3 xor ap_const_lv1_1);
    zext_ln1116_8_fu_1464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_175_fu_1456_p3),9));
    zext_ln1116_9_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_4_fu_1474_p2),64));
    zext_ln1116_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_174_fu_1444_p3),9));
    zext_ln1117_6_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_172_fu_1301_p3),12));
    zext_ln1117_7_fu_1321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_173_fu_1313_p3),12));
    zext_ln1117_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_fu_1188_p2),64));
    zext_ln13_2_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i5_reg_645),12));
    zext_ln13_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_600),15));
    zext_ln14_1_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i5_reg_645),64));
    zext_ln14_2_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_623),64));
    zext_ln14_3_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i10_reg_668),64));
    zext_ln14_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_600),64));
    zext_ln203_15_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_171_fu_808_p3),11));
    zext_ln203_16_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_589),11));
    zext_ln203_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_796_p3),11));
    zext_ln27_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_in_1_reg_579),64));
    zext_ln461_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_874_p4),12));
    zext_ln46_fu_1423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_i_reg_679),9));
    zext_ln48_1_fu_1439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_i_reg_702),64));
    zext_ln48_fu_1419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_i_reg_679),64));
    zext_ln586_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_956_p1),54));
    zext_ln70_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i24_0_reg_713),64));
    zext_ln947_fu_1633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_1627_p2),14));
end behav;
