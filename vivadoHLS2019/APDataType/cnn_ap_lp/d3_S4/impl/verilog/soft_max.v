// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module soft_max (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_array_V_address0,
        dense_array_V_ce0,
        dense_array_V_q0,
        dense_array_V_address1,
        dense_array_V_ce1,
        dense_array_V_we1,
        dense_array_V_d1,
        dense_array_V_q1,
        prediction_V_address0,
        prediction_V_ce0,
        prediction_V_we0,
        prediction_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state4 = 7'd4;
parameter    ap_ST_fsm_pp1_stage0 = 7'd8;
parameter    ap_ST_fsm_state10 = 7'd16;
parameter    ap_ST_fsm_pp2_stage0 = 7'd32;
parameter    ap_ST_fsm_state38 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] dense_array_V_address0;
output   dense_array_V_ce0;
input  [13:0] dense_array_V_q0;
output  [3:0] dense_array_V_address1;
output   dense_array_V_ce1;
output   dense_array_V_we1;
output  [13:0] dense_array_V_d1;
input  [13:0] dense_array_V_q1;
output  [3:0] prediction_V_address0;
output   prediction_V_ce0;
output   prediction_V_we0;
output  [13:0] prediction_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] dense_array_V_address0;
reg dense_array_V_ce0;
reg[3:0] dense_array_V_address1;
reg dense_array_V_ce1;
reg dense_array_V_we1;
reg prediction_V_ce0;
reg prediction_V_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [13:0] p_Val2_1_reg_98;
reg   [3:0] m_0_reg_110;
reg  signed [13:0] p_Val2_3_reg_121;
reg   [3:0] i_0_reg_133;
reg   [3:0] j_0_reg_144;
wire   [0:0] icmp_ln12_fu_166_p2;
reg   [0:0] icmp_ln12_reg_277;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] m_fu_172_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [13:0] select_ln13_fu_189_p3;
reg    ap_enable_reg_pp0_iter1;
wire  signed [14:0] rhs_V_fu_197_p1;
reg  signed [14:0] rhs_V_reg_296;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln20_fu_201_p2;
reg   [0:0] icmp_ln20_reg_301;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_state8_pp1_stage0_iter3;
wire    ap_block_state9_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln20_reg_301_pp1_iter1_reg;
reg   [0:0] icmp_ln20_reg_301_pp1_iter2_reg;
reg   [0:0] icmp_ln20_reg_301_pp1_iter3_reg;
wire   [3:0] i_fu_207_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [3:0] dense_array_V_addr_1_reg_310;
reg   [3:0] dense_array_V_addr_1_reg_310_pp1_iter1_reg;
reg   [3:0] dense_array_V_addr_1_reg_310_pp1_iter2_reg;
reg   [3:0] dense_array_V_addr_1_reg_310_pp1_iter3_reg;
wire   [13:0] p_Val2_4_fu_228_p1;
reg   [13:0] p_Val2_4_reg_316;
wire   [13:0] sum_V_fu_232_p2;
reg   [13:0] sum_V_reg_321;
reg    ap_enable_reg_pp1_iter3;
wire  signed [21:0] sext_ln27_fu_238_p1;
reg  signed [21:0] sext_ln27_reg_326;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln27_fu_242_p2;
reg   [0:0] icmp_ln27_reg_331;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state12_pp2_stage0_iter1;
wire    ap_block_state13_pp2_stage0_iter2;
wire    ap_block_state14_pp2_stage0_iter3;
wire    ap_block_state15_pp2_stage0_iter4;
wire    ap_block_state16_pp2_stage0_iter5;
wire    ap_block_state17_pp2_stage0_iter6;
wire    ap_block_state18_pp2_stage0_iter7;
wire    ap_block_state19_pp2_stage0_iter8;
wire    ap_block_state20_pp2_stage0_iter9;
wire    ap_block_state21_pp2_stage0_iter10;
wire    ap_block_state22_pp2_stage0_iter11;
wire    ap_block_state23_pp2_stage0_iter12;
wire    ap_block_state24_pp2_stage0_iter13;
wire    ap_block_state25_pp2_stage0_iter14;
wire    ap_block_state26_pp2_stage0_iter15;
wire    ap_block_state27_pp2_stage0_iter16;
wire    ap_block_state28_pp2_stage0_iter17;
wire    ap_block_state29_pp2_stage0_iter18;
wire    ap_block_state30_pp2_stage0_iter19;
wire    ap_block_state31_pp2_stage0_iter20;
wire    ap_block_state32_pp2_stage0_iter21;
wire    ap_block_state33_pp2_stage0_iter22;
wire    ap_block_state34_pp2_stage0_iter23;
wire    ap_block_state35_pp2_stage0_iter24;
wire    ap_block_state36_pp2_stage0_iter25;
wire    ap_block_state37_pp2_stage0_iter26;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln27_reg_331_pp2_iter1_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter2_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter3_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter4_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter5_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter6_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter7_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter8_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter9_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter10_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter11_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter12_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter13_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter14_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter15_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter16_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter17_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter18_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter19_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter20_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter21_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter22_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter23_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter24_reg;
reg   [0:0] icmp_ln27_reg_331_pp2_iter25_reg;
wire   [3:0] j_fu_248_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [63:0] zext_ln29_fu_254_p1;
reg   [63:0] zext_ln29_reg_340;
reg   [63:0] zext_ln29_reg_340_pp2_iter1_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter2_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter3_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter4_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter5_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter6_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter7_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter8_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter9_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter10_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter11_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter12_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter13_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter14_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter15_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter16_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter17_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter18_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter19_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter20_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter21_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter22_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter23_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter24_reg;
reg   [63:0] zext_ln29_reg_340_pp2_iter25_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
reg    ap_enable_reg_pp2_iter17;
reg    ap_enable_reg_pp2_iter18;
reg    ap_enable_reg_pp2_iter19;
reg    ap_enable_reg_pp2_iter20;
reg    ap_enable_reg_pp2_iter21;
reg    ap_enable_reg_pp2_iter22;
reg    ap_enable_reg_pp2_iter23;
reg    ap_enable_reg_pp2_iter24;
reg    ap_enable_reg_pp2_iter25;
reg    ap_enable_reg_pp2_iter26;
wire    grp_exp_15_7_s_fu_155_ap_start;
wire    grp_exp_15_7_s_fu_155_ap_done;
wire    grp_exp_15_7_s_fu_155_ap_idle;
wire    grp_exp_15_7_s_fu_155_ap_ready;
wire   [14:0] grp_exp_15_7_s_fu_155_x_V;
wire   [14:0] grp_exp_15_7_s_fu_155_ap_return;
wire    ap_block_pp0_stage0;
reg  signed [13:0] ap_phi_mux_p_Val2_3_phi_fu_125_p4;
wire    ap_block_pp1_stage0;
reg    grp_exp_15_7_s_fu_155_ap_start_reg;
wire   [63:0] zext_ln13_fu_178_p1;
wire   [63:0] zext_ln22_fu_213_p1;
wire    ap_block_pp2_stage0;
wire   [0:0] icmp_ln1495_fu_183_p2;
wire  signed [13:0] lhs_V_fu_218_p0;
wire  signed [14:0] lhs_V_fu_218_p1;
wire   [21:0] grp_fu_267_p0;
wire  signed [13:0] grp_fu_267_p1;
wire   [13:0] grp_fu_267_p2;
wire    ap_CS_fsm_state38;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
#0 ap_enable_reg_pp2_iter18 = 1'b0;
#0 ap_enable_reg_pp2_iter19 = 1'b0;
#0 ap_enable_reg_pp2_iter20 = 1'b0;
#0 ap_enable_reg_pp2_iter21 = 1'b0;
#0 ap_enable_reg_pp2_iter22 = 1'b0;
#0 ap_enable_reg_pp2_iter23 = 1'b0;
#0 ap_enable_reg_pp2_iter24 = 1'b0;
#0 ap_enable_reg_pp2_iter25 = 1'b0;
#0 ap_enable_reg_pp2_iter26 = 1'b0;
#0 grp_exp_15_7_s_fu_155_ap_start_reg = 1'b0;
end

exp_15_7_s grp_exp_15_7_s_fu_155(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_15_7_s_fu_155_ap_start),
    .ap_done(grp_exp_15_7_s_fu_155_ap_done),
    .ap_idle(grp_exp_15_7_s_fu_155_ap_idle),
    .ap_ready(grp_exp_15_7_s_fu_155_ap_ready),
    .x_V(grp_exp_15_7_s_fu_155_x_V),
    .ap_return(grp_exp_15_7_s_fu_155_ap_return)
);

cnn_sdiv_22ns_14srcU #(
    .ID( 1 ),
    .NUM_STAGE( 26 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
cnn_sdiv_22ns_14srcU_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_267_p0),
    .din1(grp_fu_267_p1),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state11)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter26 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_exp_15_7_s_fu_155_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln20_fu_201_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
            grp_exp_15_7_s_fu_155_ap_start_reg <= 1'b1;
        end else if ((grp_exp_15_7_s_fu_155_ap_ready == 1'b1)) begin
            grp_exp_15_7_s_fu_155_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_201_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_0_reg_133 <= i_fu_207_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_133 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_0_reg_144 <= 4'd0;
    end else if (((icmp_ln27_fu_242_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        j_0_reg_144 <= j_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_fu_166_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_0_reg_110 <= m_fu_172_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_0_reg_110 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_277 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_1_reg_98 <= select_ln13_fu_189_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_1_reg_98 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_301_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        p_Val2_3_reg_121 <= sum_V_reg_321;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_3_reg_121 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        dense_array_V_addr_1_reg_310 <= zext_ln22_fu_213_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        dense_array_V_addr_1_reg_310_pp1_iter1_reg <= dense_array_V_addr_1_reg_310;
        icmp_ln20_reg_301 <= icmp_ln20_fu_201_p2;
        icmp_ln20_reg_301_pp1_iter1_reg <= icmp_ln20_reg_301;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        dense_array_V_addr_1_reg_310_pp1_iter2_reg <= dense_array_V_addr_1_reg_310_pp1_iter1_reg;
        dense_array_V_addr_1_reg_310_pp1_iter3_reg <= dense_array_V_addr_1_reg_310_pp1_iter2_reg;
        icmp_ln20_reg_301_pp1_iter2_reg <= icmp_ln20_reg_301_pp1_iter1_reg;
        icmp_ln20_reg_301_pp1_iter3_reg <= icmp_ln20_reg_301_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_reg_277 <= icmp_ln12_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln27_reg_331 <= icmp_ln27_fu_242_p2;
        icmp_ln27_reg_331_pp2_iter1_reg <= icmp_ln27_reg_331;
        zext_ln29_reg_340_pp2_iter1_reg[3 : 0] <= zext_ln29_reg_340[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln27_reg_331_pp2_iter10_reg <= icmp_ln27_reg_331_pp2_iter9_reg;
        icmp_ln27_reg_331_pp2_iter11_reg <= icmp_ln27_reg_331_pp2_iter10_reg;
        icmp_ln27_reg_331_pp2_iter12_reg <= icmp_ln27_reg_331_pp2_iter11_reg;
        icmp_ln27_reg_331_pp2_iter13_reg <= icmp_ln27_reg_331_pp2_iter12_reg;
        icmp_ln27_reg_331_pp2_iter14_reg <= icmp_ln27_reg_331_pp2_iter13_reg;
        icmp_ln27_reg_331_pp2_iter15_reg <= icmp_ln27_reg_331_pp2_iter14_reg;
        icmp_ln27_reg_331_pp2_iter16_reg <= icmp_ln27_reg_331_pp2_iter15_reg;
        icmp_ln27_reg_331_pp2_iter17_reg <= icmp_ln27_reg_331_pp2_iter16_reg;
        icmp_ln27_reg_331_pp2_iter18_reg <= icmp_ln27_reg_331_pp2_iter17_reg;
        icmp_ln27_reg_331_pp2_iter19_reg <= icmp_ln27_reg_331_pp2_iter18_reg;
        icmp_ln27_reg_331_pp2_iter20_reg <= icmp_ln27_reg_331_pp2_iter19_reg;
        icmp_ln27_reg_331_pp2_iter21_reg <= icmp_ln27_reg_331_pp2_iter20_reg;
        icmp_ln27_reg_331_pp2_iter22_reg <= icmp_ln27_reg_331_pp2_iter21_reg;
        icmp_ln27_reg_331_pp2_iter23_reg <= icmp_ln27_reg_331_pp2_iter22_reg;
        icmp_ln27_reg_331_pp2_iter24_reg <= icmp_ln27_reg_331_pp2_iter23_reg;
        icmp_ln27_reg_331_pp2_iter25_reg <= icmp_ln27_reg_331_pp2_iter24_reg;
        icmp_ln27_reg_331_pp2_iter2_reg <= icmp_ln27_reg_331_pp2_iter1_reg;
        icmp_ln27_reg_331_pp2_iter3_reg <= icmp_ln27_reg_331_pp2_iter2_reg;
        icmp_ln27_reg_331_pp2_iter4_reg <= icmp_ln27_reg_331_pp2_iter3_reg;
        icmp_ln27_reg_331_pp2_iter5_reg <= icmp_ln27_reg_331_pp2_iter4_reg;
        icmp_ln27_reg_331_pp2_iter6_reg <= icmp_ln27_reg_331_pp2_iter5_reg;
        icmp_ln27_reg_331_pp2_iter7_reg <= icmp_ln27_reg_331_pp2_iter6_reg;
        icmp_ln27_reg_331_pp2_iter8_reg <= icmp_ln27_reg_331_pp2_iter7_reg;
        icmp_ln27_reg_331_pp2_iter9_reg <= icmp_ln27_reg_331_pp2_iter8_reg;
        zext_ln29_reg_340_pp2_iter10_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter9_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter11_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter10_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter12_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter11_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter13_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter12_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter14_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter13_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter15_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter14_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter16_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter15_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter17_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter16_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter18_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter17_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter19_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter18_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter20_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter19_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter21_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter20_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter22_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter21_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter23_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter22_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter24_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter23_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter25_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter24_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter2_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter1_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter3_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter2_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter4_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter3_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter5_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter4_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter6_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter5_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter7_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter6_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter8_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter7_reg[3 : 0];
        zext_ln29_reg_340_pp2_iter9_reg[3 : 0] <= zext_ln29_reg_340_pp2_iter8_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_301_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        p_Val2_4_reg_316 <= p_Val2_4_fu_228_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rhs_V_reg_296 <= rhs_V_fu_197_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sext_ln27_reg_326 <= sext_ln27_fu_238_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_301_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_V_reg_321 <= sum_V_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        zext_ln29_reg_340[3 : 0] <= zext_ln29_fu_254_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln12_fu_166_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_201_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln27_fu_242_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter26 == 1'b0) & (ap_enable_reg_pp2_iter25 == 1'b0) & (ap_enable_reg_pp2_iter24 == 1'b0) & (ap_enable_reg_pp2_iter23 == 1'b0) & (ap_enable_reg_pp2_iter22 == 1'b0) & (ap_enable_reg_pp2_iter21 == 1'b0) & (ap_enable_reg_pp2_iter20 == 1'b0) & (ap_enable_reg_pp2_iter19 == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b0) & (ap_enable_reg_pp2_iter17 == 1'b0) & (ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_301_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ap_phi_mux_p_Val2_3_phi_fu_125_p4 = sum_V_reg_321;
    end else begin
        ap_phi_mux_p_Val2_3_phi_fu_125_p4 = p_Val2_3_reg_121;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dense_array_V_address0 = zext_ln22_fu_213_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_array_V_address0 = zext_ln13_fu_178_p1;
    end else begin
        dense_array_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        dense_array_V_address1 = zext_ln29_fu_254_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        dense_array_V_address1 = dense_array_V_addr_1_reg_310_pp1_iter3_reg;
    end else begin
        dense_array_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        dense_array_V_ce0 = 1'b1;
    end else begin
        dense_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        dense_array_V_ce1 = 1'b1;
    end else begin
        dense_array_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_301_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        dense_array_V_we1 = 1'b1;
    end else begin
        dense_array_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter26 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        prediction_V_ce0 = 1'b1;
    end else begin
        prediction_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_331_pp2_iter25_reg == 1'd0) & (ap_enable_reg_pp2_iter26 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        prediction_V_we0 = 1'b1;
    end else begin
        prediction_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln12_fu_166_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln12_fu_166_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln20_fu_201_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((icmp_ln20_fu_201_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln27_fu_242_p2 == 1'd1)) & ~((ap_enable_reg_pp2_iter25 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter26 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter25 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter26 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln27_fu_242_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign dense_array_V_d1 = p_Val2_4_reg_316;

assign grp_exp_15_7_s_fu_155_ap_start = grp_exp_15_7_s_fu_155_ap_start_reg;

assign grp_exp_15_7_s_fu_155_x_V = ($signed(lhs_V_fu_218_p1) - $signed(rhs_V_reg_296));

assign grp_fu_267_p0 = {{dense_array_V_q1}, {8'd0}};

assign grp_fu_267_p1 = sext_ln27_reg_326;

assign i_fu_207_p2 = (i_0_reg_133 + 4'd1);

assign icmp_ln12_fu_166_p2 = ((m_0_reg_110 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln1495_fu_183_p2 = (($signed(p_Val2_1_reg_98) < $signed(dense_array_V_q0)) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_201_p2 = ((i_0_reg_133 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_242_p2 = ((j_0_reg_144 == 4'd10) ? 1'b1 : 1'b0);

assign j_fu_248_p2 = (j_0_reg_144 + 4'd1);

assign lhs_V_fu_218_p0 = dense_array_V_q0;

assign lhs_V_fu_218_p1 = lhs_V_fu_218_p0;

assign m_fu_172_p2 = (m_0_reg_110 + 4'd1);

assign p_Val2_4_fu_228_p1 = grp_exp_15_7_s_fu_155_ap_return[13:0];

assign prediction_V_address0 = zext_ln29_reg_340_pp2_iter25_reg;

assign prediction_V_d0 = grp_fu_267_p2[13:0];

assign rhs_V_fu_197_p1 = p_Val2_1_reg_98;

assign select_ln13_fu_189_p3 = ((icmp_ln1495_fu_183_p2[0:0] === 1'b1) ? dense_array_V_q0 : p_Val2_1_reg_98);

assign sext_ln27_fu_238_p1 = p_Val2_3_reg_121;

assign sum_V_fu_232_p2 = ($signed(p_Val2_4_fu_228_p1) + $signed(ap_phi_mux_p_Val2_3_phi_fu_125_p4));

assign zext_ln13_fu_178_p1 = m_0_reg_110;

assign zext_ln22_fu_213_p1 = i_0_reg_133;

assign zext_ln29_fu_254_p1 = j_0_reg_144;

always @ (posedge ap_clk) begin
    zext_ln29_reg_340[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter11_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter12_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter13_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter14_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter15_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter16_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter17_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter18_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter19_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter20_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter21_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter22_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter23_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter24_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_reg_340_pp2_iter25_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //soft_max
