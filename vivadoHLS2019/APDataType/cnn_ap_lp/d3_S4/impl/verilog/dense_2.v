// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_1_out_V_address0,
        dense_1_out_V_ce0,
        dense_1_out_V_q0,
        dense_2_out_0_V_address0,
        dense_2_out_0_V_ce0,
        dense_2_out_0_V_we0,
        dense_2_out_0_V_d0,
        dense_2_out_1_V_address0,
        dense_2_out_1_V_ce0,
        dense_2_out_1_V_we0,
        dense_2_out_1_V_d0,
        dense_2_out_2_V_address0,
        dense_2_out_2_V_ce0,
        dense_2_out_2_V_we0,
        dense_2_out_2_V_d0,
        dense_2_out_3_V_address0,
        dense_2_out_3_V_ce0,
        dense_2_out_3_V_we0,
        dense_2_out_3_V_d0,
        dense_2_out_4_V_address0,
        dense_2_out_4_V_ce0,
        dense_2_out_4_V_we0,
        dense_2_out_4_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] dense_1_out_V_address0;
output   dense_1_out_V_ce0;
input  [12:0] dense_1_out_V_q0;
output  [2:0] dense_2_out_0_V_address0;
output   dense_2_out_0_V_ce0;
output   dense_2_out_0_V_we0;
output  [12:0] dense_2_out_0_V_d0;
output  [2:0] dense_2_out_1_V_address0;
output   dense_2_out_1_V_ce0;
output   dense_2_out_1_V_we0;
output  [12:0] dense_2_out_1_V_d0;
output  [2:0] dense_2_out_2_V_address0;
output   dense_2_out_2_V_ce0;
output   dense_2_out_2_V_we0;
output  [12:0] dense_2_out_2_V_d0;
output  [2:0] dense_2_out_3_V_address0;
output   dense_2_out_3_V_ce0;
output   dense_2_out_3_V_we0;
output  [12:0] dense_2_out_3_V_d0;
output  [2:0] dense_2_out_4_V_address0;
output   dense_2_out_4_V_ce0;
output   dense_2_out_4_V_we0;
output  [12:0] dense_2_out_4_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dense_1_out_V_ce0;
reg dense_2_out_0_V_ce0;
reg dense_2_out_0_V_we0;
reg dense_2_out_1_V_ce0;
reg dense_2_out_1_V_we0;
reg dense_2_out_2_V_ce0;
reg dense_2_out_2_V_we0;
reg dense_2_out_3_V_ce0;
reg dense_2_out_3_V_we0;
reg dense_2_out_4_V_ce0;
reg dense_2_out_4_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] dense_2_weights_V_address0;
reg    dense_2_weights_V_ce0;
wire  signed [8:0] dense_2_weights_V_q0;
wire   [4:0] dense_2_bias_V_address0;
reg    dense_2_bias_V_ce0;
wire   [8:0] dense_2_bias_V_q0;
wire   [10:0] add_ln9_fu_250_p2;
reg   [10:0] add_ln9_reg_454;
wire    ap_CS_fsm_state2;
wire   [4:0] i_fu_262_p2;
reg   [4:0] i_reg_462;
wire   [63:0] zext_ln14_fu_268_p1;
reg   [63:0] zext_ln14_reg_467;
wire   [0:0] icmp_ln9_fu_256_p2;
wire   [11:0] zext_ln13_fu_272_p1;
reg   [11:0] zext_ln13_reg_472;
wire   [5:0] j_fu_282_p2;
reg   [5:0] j_reg_480;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln13_fu_276_p2;
reg   [2:0] tmp_6_reg_500;
wire    ap_CS_fsm_state4;
wire   [4:0] select_ln22_fu_437_p3;
wire    ap_CS_fsm_state5;
reg   [4:0] i_0_reg_192;
reg   [10:0] phi_mul_reg_203;
reg   [4:0] phi_urem_reg_215;
reg   [13:0] p_Val2_s_reg_227;
reg   [5:0] j_0_reg_239;
wire  signed [63:0] sext_ln1117_fu_328_p1;
wire   [63:0] zext_ln14_1_fu_288_p1;
wire   [63:0] zext_ln203_fu_396_p1;
wire   [3:0] trunc_ln203_fu_392_p1;
wire   [12:0] select_ln19_fu_412_p3;
wire   [10:0] tmp_s_fu_293_p3;
wire   [6:0] tmp_30_fu_305_p3;
wire   [11:0] zext_ln1117_fu_301_p1;
wire   [11:0] zext_ln1117_3_fu_313_p1;
wire   [11:0] sub_ln1117_fu_317_p2;
wire   [11:0] add_ln1117_fu_323_p2;
wire  signed [21:0] grp_fu_445_p3;
wire  signed [8:0] sext_ln1265_fu_368_p0;
wire  signed [8:0] sext_ln703_fu_376_p0;
wire  signed [13:0] sext_ln1265_fu_368_p1;
wire  signed [12:0] sext_ln703_fu_376_p1;
wire   [12:0] trunc_ln703_fu_372_p1;
wire   [13:0] add_ln703_fu_380_p2;
wire   [0:0] tmp_7_fu_404_p3;
wire   [12:0] add_ln203_fu_386_p2;
wire   [4:0] add_ln22_fu_425_p2;
wire   [0:0] icmp_ln22_fu_431_p2;
wire   [12:0] grp_fu_445_p1;
wire   [21:0] grp_fu_445_p2;
reg   [4:0] ap_NS_fsm;
wire   [21:0] grp_fu_445_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

dense_2_dense_2_wlbW #(
    .DataWidth( 9 ),
    .AddressRange( 1500 ),
    .AddressWidth( 11 ))
dense_2_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_weights_V_address0),
    .ce0(dense_2_weights_V_ce0),
    .q0(dense_2_weights_V_q0)
);

dense_2_dense_2_bmb6 #(
    .DataWidth( 9 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
dense_2_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_bias_V_address0),
    .ce0(dense_2_bias_V_ce0),
    .q0(dense_2_bias_V_q0)
);

cnn_mac_muladd_9sncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_9sncg_U28(
    .din0(dense_2_weights_V_q0),
    .din1(grp_fu_445_p1),
    .din2(grp_fu_445_p2),
    .dout(grp_fu_445_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_192 <= i_reg_462;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_192 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_239 <= j_reg_480;
    end else if (((icmp_ln9_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_239 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_s_reg_227 <= {{grp_fu_445_p3[21:8]}};
    end else if (((icmp_ln9_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_reg_227 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_mul_reg_203 <= add_ln9_reg_454;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_203 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_urem_reg_215 <= select_ln22_fu_437_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_urem_reg_215 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln9_reg_454 <= add_ln9_fu_250_p2;
        i_reg_462 <= i_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_480 <= j_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_276_p2 == 1'd1))) begin
        tmp_6_reg_500 <= {{phi_mul_reg_203[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_reg_472[4 : 0] <= zext_ln13_fu_272_p1[4 : 0];
        zext_ln14_reg_467[4 : 0] <= zext_ln14_fu_268_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln9_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_1_out_V_ce0 = 1'b1;
    end else begin
        dense_1_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_2_bias_V_ce0 = 1'b1;
    end else begin
        dense_2_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_2_out_0_V_ce0 = 1'b1;
    end else begin
        dense_2_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_fu_392_p1 == 4'd0))) begin
        dense_2_out_0_V_we0 = 1'b1;
    end else begin
        dense_2_out_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_2_out_1_V_ce0 = 1'b1;
    end else begin
        dense_2_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_fu_392_p1 == 4'd1))) begin
        dense_2_out_1_V_we0 = 1'b1;
    end else begin
        dense_2_out_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_2_out_2_V_ce0 = 1'b1;
    end else begin
        dense_2_out_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_fu_392_p1 == 4'd2))) begin
        dense_2_out_2_V_we0 = 1'b1;
    end else begin
        dense_2_out_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_2_out_3_V_ce0 = 1'b1;
    end else begin
        dense_2_out_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_fu_392_p1 == 4'd3))) begin
        dense_2_out_3_V_we0 = 1'b1;
    end else begin
        dense_2_out_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_2_out_4_V_ce0 = 1'b1;
    end else begin
        dense_2_out_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln203_fu_392_p1 == 4'd0) & ~(trunc_ln203_fu_392_p1 == 4'd1) & ~(trunc_ln203_fu_392_p1 == 4'd2) & ~(trunc_ln203_fu_392_p1 == 4'd3) & (1'b1 == ap_CS_fsm_state5))) begin
        dense_2_out_4_V_we0 = 1'b1;
    end else begin
        dense_2_out_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_2_weights_V_ce0 = 1'b1;
    end else begin
        dense_2_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_276_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1117_fu_323_p2 = (sub_ln1117_fu_317_p2 + zext_ln13_reg_472);

assign add_ln203_fu_386_p2 = ($signed(sext_ln703_fu_376_p1) + $signed(trunc_ln703_fu_372_p1));

assign add_ln22_fu_425_p2 = (phi_urem_reg_215 + 5'd1);

assign add_ln703_fu_380_p2 = ($signed(p_Val2_s_reg_227) + $signed(sext_ln1265_fu_368_p1));

assign add_ln9_fu_250_p2 = (phi_mul_reg_203 + 11'd52);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign dense_1_out_V_address0 = zext_ln14_1_fu_288_p1;

assign dense_2_bias_V_address0 = zext_ln14_reg_467;

assign dense_2_out_0_V_address0 = zext_ln203_fu_396_p1;

assign dense_2_out_0_V_d0 = select_ln19_fu_412_p3;

assign dense_2_out_1_V_address0 = zext_ln203_fu_396_p1;

assign dense_2_out_1_V_d0 = select_ln19_fu_412_p3;

assign dense_2_out_2_V_address0 = zext_ln203_fu_396_p1;

assign dense_2_out_2_V_d0 = select_ln19_fu_412_p3;

assign dense_2_out_3_V_address0 = zext_ln203_fu_396_p1;

assign dense_2_out_3_V_d0 = select_ln19_fu_412_p3;

assign dense_2_out_4_V_address0 = zext_ln203_fu_396_p1;

assign dense_2_out_4_V_d0 = select_ln19_fu_412_p3;

assign dense_2_weights_V_address0 = sext_ln1117_fu_328_p1;

assign grp_fu_445_p1 = grp_fu_445_p10;

assign grp_fu_445_p10 = dense_1_out_V_q0;

assign grp_fu_445_p2 = {{p_Val2_s_reg_227}, {8'd0}};

assign i_fu_262_p2 = (i_0_reg_192 + 5'd1);

assign icmp_ln13_fu_276_p2 = ((j_0_reg_239 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_431_p2 = ((add_ln22_fu_425_p2 < 5'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_256_p2 = ((i_0_reg_192 == 5'd30) ? 1'b1 : 1'b0);

assign j_fu_282_p2 = (j_0_reg_239 + 6'd1);

assign select_ln19_fu_412_p3 = ((tmp_7_fu_404_p3[0:0] === 1'b1) ? 13'd0 : add_ln203_fu_386_p2);

assign select_ln22_fu_437_p3 = ((icmp_ln22_fu_431_p2[0:0] === 1'b1) ? add_ln22_fu_425_p2 : 5'd0);

assign sext_ln1117_fu_328_p1 = $signed(add_ln1117_fu_323_p2);

assign sext_ln1265_fu_368_p0 = dense_2_bias_V_q0;

assign sext_ln1265_fu_368_p1 = sext_ln1265_fu_368_p0;

assign sext_ln703_fu_376_p0 = dense_2_bias_V_q0;

assign sext_ln703_fu_376_p1 = sext_ln703_fu_376_p0;

assign sub_ln1117_fu_317_p2 = (zext_ln1117_fu_301_p1 - zext_ln1117_3_fu_313_p1);

assign tmp_30_fu_305_p3 = {{j_0_reg_239}, {1'd0}};

assign tmp_7_fu_404_p3 = add_ln703_fu_380_p2[32'd13];

assign tmp_s_fu_293_p3 = {{j_0_reg_239}, {5'd0}};

assign trunc_ln203_fu_392_p1 = phi_urem_reg_215[3:0];

assign trunc_ln703_fu_372_p1 = p_Val2_s_reg_227[12:0];

assign zext_ln1117_3_fu_313_p1 = tmp_30_fu_305_p3;

assign zext_ln1117_fu_301_p1 = tmp_s_fu_293_p3;

assign zext_ln13_fu_272_p1 = i_0_reg_192;

assign zext_ln14_1_fu_288_p1 = j_0_reg_239;

assign zext_ln14_fu_268_p1 = i_0_reg_192;

assign zext_ln203_fu_396_p1 = tmp_6_reg_500;

always @ (posedge ap_clk) begin
    zext_ln14_reg_467[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_472[11:5] <= 7'b0000000;
end

endmodule //dense_2
