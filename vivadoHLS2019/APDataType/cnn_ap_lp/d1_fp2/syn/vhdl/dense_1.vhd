-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_V_ce0 : OUT STD_LOGIC;
    flat_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dense_1_out_V_ce0 : OUT STD_LOGIC;
    dense_1_out_V_we0 : OUT STD_LOGIC;
    dense_1_out_V_d0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of dense_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv15_4E20 : STD_LOGIC_VECTOR (14 downto 0) := "100111000100000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv15_32 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_1_bias_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_bias_V_ce0 : STD_LOGIC;
    signal dense_1_bias_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_weights_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dense_1_weights_V_ce0 : STD_LOGIC;
    signal dense_1_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_reg_126 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_reg_137 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_reg_148 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_reg_160 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln9_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln9_fu_177_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_351 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_1_fu_203_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_1_reg_356 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_361 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_233_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_376 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln13_1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_381 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_268_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_i_0_phi_fu_141_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_phi_fu_164_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1117_1_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_183_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_fu_195_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_323_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_2_fu_253_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_332_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_277_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln703_fu_290_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_fu_277_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_fu_281_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln703_fu_290_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_fu_294_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_306_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_300_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_323_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_323_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_323_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_323_p20 : STD_LOGIC_VECTOR (14 downto 0);

    component cnn_mac_muladd_9nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component cnn_mac_muladd_14lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component dense_1_dense_1_bibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dense_1_dense_1_wjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    dense_1_bias_V_U : component dense_1_dense_1_bibs
    generic map (
        DataWidth => 6,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_bias_V_address0,
        ce0 => dense_1_bias_V_ce0,
        q0 => dense_1_bias_V_q0);

    dense_1_weights_V_U : component dense_1_dense_1_wjbC
    generic map (
        DataWidth => 9,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_address0,
        ce0 => dense_1_weights_V_ce0,
        q0 => dense_1_weights_V_q0);

    cnn_mac_muladd_9nkbM_U22 : component cnn_mac_muladd_9nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        din2_WIDTH => 6,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_323_p0,
        din1 => grp_fu_323_p1,
        din2 => grp_fu_323_p2,
        dout => grp_fu_323_p3);

    cnn_mac_muladd_14lbW_U23 : component cnn_mac_muladd_14lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => flat_array_V_q0,
        din1 => dense_1_weights_V_q0,
        din2 => grp_fu_332_p2,
        dout => grp_fu_332_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_342 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_137 <= select_ln14_1_reg_356;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_137 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_171_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_126 <= add_ln9_fu_177_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_126 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    j_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_342 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_160 <= j_reg_376;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_160 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_342 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                p_Val2_s_reg_148 <= grp_fu_332_p3(21 downto 8);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_reg_148 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln13_1_reg_381 <= icmp_ln13_1_fu_239_p2;
                icmp_ln13_reg_351 <= icmp_ln13_fu_189_p2;
                    zext_ln14_reg_361(5 downto 0) <= zext_ln14_fu_211_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln9_reg_342 <= icmp_ln9_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_171_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_reg_376 <= j_fu_233_p2;
                select_ln14_1_reg_356 <= select_ln14_1_fu_203_p3;
            end if;
        end if;
    end process;
    zext_ln14_reg_361(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln9_fu_171_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln9_fu_171_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln9_fu_171_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln203_fu_300_p2 <= std_logic_vector(unsigned(trunc_ln_fu_281_p4) + unsigned(sext_ln703_fu_290_p1));
    add_ln703_fu_294_p2 <= std_logic_vector(signed(sext_ln1265_fu_277_p1) + signed(sum_V_fu_268_p4));
    add_ln9_fu_177_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_126) + unsigned(ap_const_lv15_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln9_fu_171_p2)
    begin
        if ((icmp_ln9_fu_171_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_141_p4_assign_proc : process(i_0_reg_137, icmp_ln9_reg_342, ap_CS_fsm_pp0_stage0, select_ln14_1_reg_356, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_342 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_141_p4 <= select_ln14_1_reg_356;
        else 
            ap_phi_mux_i_0_phi_fu_141_p4 <= i_0_reg_137;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_164_p4_assign_proc : process(j_0_reg_160, icmp_ln9_reg_342, ap_CS_fsm_pp0_stage0, j_reg_376, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_342 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_164_p4 <= j_reg_376;
        else 
            ap_phi_mux_j_0_phi_fu_164_p4 <= j_0_reg_160;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_bias_V_address0 <= zext_ln14_fu_211_p1(6 - 1 downto 0);

    dense_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_V_address0 <= zext_ln14_reg_361(6 - 1 downto 0);

    dense_1_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dense_1_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_V_d0 <= 
        ap_const_lv13_0 when (tmp_fu_306_p3(0) = '1') else 
        add_ln203_fu_300_p2;

    dense_1_out_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln13_1_reg_381, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln13_1_reg_381 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dense_1_out_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_address0 <= zext_ln1117_1_fu_229_p1(15 - 1 downto 0);

    dense_1_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_V_address0 <= zext_ln14_1_fu_220_p1(9 - 1 downto 0);

    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_323_p0 <= grp_fu_323_p00(9 - 1 downto 0);
    grp_fu_323_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_195_p3),15));
    grp_fu_323_p1 <= ap_const_lv15_32(7 - 1 downto 0);
    grp_fu_323_p2 <= grp_fu_323_p20(6 - 1 downto 0);
    grp_fu_323_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_1_fu_203_p3),15));
    grp_fu_332_p2 <= (select_ln14_2_fu_253_p3 & ap_const_lv8_0);
    i_fu_183_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_141_p4) + unsigned(ap_const_lv6_1));
    icmp_ln13_1_fu_239_p2 <= "1" when (j_fu_233_p2 = ap_const_lv9_190) else "0";
    icmp_ln13_fu_189_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_164_p4 = ap_const_lv9_190) else "0";
    icmp_ln9_fu_171_p2 <= "1" when (indvar_flatten_reg_126 = ap_const_lv15_4E20) else "0";
    j_fu_233_p2 <= std_logic_vector(unsigned(select_ln14_fu_195_p3) + unsigned(ap_const_lv9_1));
    select_ln14_1_fu_203_p3 <= 
        i_fu_183_p2 when (icmp_ln13_fu_189_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_141_p4;
    select_ln14_2_fu_253_p3 <= 
        ap_const_lv14_0 when (icmp_ln13_reg_351(0) = '1') else 
        p_Val2_s_reg_148;
    select_ln14_fu_195_p3 <= 
        ap_const_lv9_0 when (icmp_ln13_fu_189_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_164_p4;
    sext_ln1265_fu_277_p0 <= dense_1_bias_V_q0;
        sext_ln1265_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_277_p0),14));

    sext_ln703_fu_290_p0 <= dense_1_bias_V_q0;
        sext_ln703_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_290_p0),13));

    sum_V_fu_268_p4 <= grp_fu_332_p3(21 downto 8);
    tmp_fu_306_p3 <= add_ln703_fu_294_p2(13 downto 13);
    trunc_ln_fu_281_p4 <= grp_fu_332_p3(20 downto 8);
    zext_ln1117_1_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_323_p3),64));
    zext_ln14_1_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_195_p3),64));
    zext_ln14_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_1_fu_203_p3),64));
end behav;
