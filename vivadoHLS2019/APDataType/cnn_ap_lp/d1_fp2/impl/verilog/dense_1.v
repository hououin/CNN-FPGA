// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_V_address0,
        flat_array_V_ce0,
        flat_array_V_q0,
        dense_1_out_V_address0,
        dense_1_out_V_ce0,
        dense_1_out_V_we0,
        dense_1_out_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] flat_array_V_address0;
output   flat_array_V_ce0;
input  [13:0] flat_array_V_q0;
output  [5:0] dense_1_out_V_address0;
output   dense_1_out_V_ce0;
output   dense_1_out_V_we0;
output  [12:0] dense_1_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_V_ce0;
reg dense_1_out_V_ce0;
reg dense_1_out_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] dense_1_bias_V_address0;
reg    dense_1_bias_V_ce0;
wire   [5:0] dense_1_bias_V_q0;
wire   [14:0] dense_1_weights_V_address0;
reg    dense_1_weights_V_ce0;
wire  signed [8:0] dense_1_weights_V_q0;
reg   [14:0] indvar_flatten_reg_126;
reg   [5:0] i_0_reg_137;
reg   [13:0] p_Val2_s_reg_148;
reg   [8:0] j_0_reg_160;
wire   [0:0] icmp_ln9_fu_171_p2;
reg   [0:0] icmp_ln9_reg_342;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [14:0] add_ln9_fu_177_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_189_p2;
reg   [0:0] icmp_ln13_reg_351;
wire   [5:0] select_ln14_1_fu_203_p3;
reg   [5:0] select_ln14_1_reg_356;
wire   [63:0] zext_ln14_fu_211_p1;
reg   [63:0] zext_ln14_reg_361;
wire   [8:0] j_fu_233_p2;
reg   [8:0] j_reg_376;
wire   [0:0] icmp_ln13_1_fu_239_p2;
reg   [0:0] icmp_ln13_1_reg_381;
wire   [13:0] sum_V_fu_268_p4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [5:0] ap_phi_mux_i_0_phi_fu_141_p4;
wire    ap_block_pp0_stage0;
reg   [8:0] ap_phi_mux_j_0_phi_fu_164_p4;
wire   [63:0] zext_ln1117_1_fu_229_p1;
wire   [63:0] zext_ln14_1_fu_220_p1;
wire   [5:0] i_fu_183_p2;
wire   [8:0] select_ln14_fu_195_p3;
wire   [14:0] grp_fu_323_p3;
wire   [13:0] select_ln14_2_fu_253_p3;
wire  signed [21:0] grp_fu_332_p3;
wire  signed [5:0] sext_ln1265_fu_277_p0;
wire  signed [5:0] sext_ln703_fu_290_p0;
wire  signed [13:0] sext_ln1265_fu_277_p1;
wire   [12:0] trunc_ln_fu_281_p4;
wire  signed [12:0] sext_ln703_fu_290_p1;
wire   [13:0] add_ln703_fu_294_p2;
wire   [0:0] tmp_fu_306_p3;
wire   [12:0] add_ln203_fu_300_p2;
wire   [8:0] grp_fu_323_p0;
wire   [6:0] grp_fu_323_p1;
wire   [5:0] grp_fu_323_p2;
wire   [21:0] grp_fu_332_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [14:0] grp_fu_323_p00;
wire   [14:0] grp_fu_323_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

dense_1_dense_1_bibs #(
    .DataWidth( 6 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
dense_1_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_bias_V_address0),
    .ce0(dense_1_bias_V_ce0),
    .q0(dense_1_bias_V_q0)
);

dense_1_dense_1_wjbC #(
    .DataWidth( 9 ),
    .AddressRange( 20000 ),
    .AddressWidth( 15 ))
dense_1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_address0),
    .ce0(dense_1_weights_V_ce0),
    .q0(dense_1_weights_V_q0)
);

cnn_mac_muladd_9nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 15 ))
cnn_mac_muladd_9nkbM_U22(
    .din0(grp_fu_323_p0),
    .din1(grp_fu_323_p1),
    .din2(grp_fu_323_p2),
    .dout(grp_fu_323_p3)
);

cnn_mac_muladd_14lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_14lbW_U23(
    .din0(flat_array_V_q0),
    .din1(dense_1_weights_V_q0),
    .din2(grp_fu_332_p2),
    .dout(grp_fu_332_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_342 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_137 <= select_ln14_1_reg_356;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_137 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_126 <= add_ln9_fu_177_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_126 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_342 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_160 <= j_reg_376;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_160 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_342 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_Val2_s_reg_148 <= {{grp_fu_332_p3[21:8]}};
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_148 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_1_reg_381 <= icmp_ln13_1_fu_239_p2;
        icmp_ln13_reg_351 <= icmp_ln13_fu_189_p2;
        zext_ln14_reg_361[5 : 0] <= zext_ln14_fu_211_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln9_reg_342 <= icmp_ln9_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_376 <= j_fu_233_p2;
        select_ln14_1_reg_356 <= select_ln14_1_fu_203_p3;
    end
end

always @ (*) begin
    if ((icmp_ln9_fu_171_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_342 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_141_p4 = select_ln14_1_reg_356;
    end else begin
        ap_phi_mux_i_0_phi_fu_141_p4 = i_0_reg_137;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_342 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_164_p4 = j_reg_376;
    end else begin
        ap_phi_mux_j_0_phi_fu_164_p4 = j_0_reg_160;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_1_bias_V_ce0 = 1'b1;
    end else begin
        dense_1_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dense_1_out_V_ce0 = 1'b1;
    end else begin
        dense_1_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_1_reg_381 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dense_1_out_V_we0 = 1'b1;
    end else begin
        dense_1_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_1_weights_V_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flat_array_V_ce0 = 1'b1;
    end else begin
        flat_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln9_fu_171_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln9_fu_171_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_fu_300_p2 = ($signed(trunc_ln_fu_281_p4) + $signed(sext_ln703_fu_290_p1));

assign add_ln703_fu_294_p2 = ($signed(sext_ln1265_fu_277_p1) + $signed(sum_V_fu_268_p4));

assign add_ln9_fu_177_p2 = (indvar_flatten_reg_126 + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dense_1_bias_V_address0 = zext_ln14_fu_211_p1;

assign dense_1_out_V_address0 = zext_ln14_reg_361;

assign dense_1_out_V_d0 = ((tmp_fu_306_p3[0:0] === 1'b1) ? 13'd0 : add_ln203_fu_300_p2);

assign dense_1_weights_V_address0 = zext_ln1117_1_fu_229_p1;

assign flat_array_V_address0 = zext_ln14_1_fu_220_p1;

assign grp_fu_323_p0 = grp_fu_323_p00;

assign grp_fu_323_p00 = select_ln14_fu_195_p3;

assign grp_fu_323_p1 = 15'd50;

assign grp_fu_323_p2 = grp_fu_323_p20;

assign grp_fu_323_p20 = select_ln14_1_fu_203_p3;

assign grp_fu_332_p2 = {{select_ln14_2_fu_253_p3}, {8'd0}};

assign i_fu_183_p2 = (ap_phi_mux_i_0_phi_fu_141_p4 + 6'd1);

assign icmp_ln13_1_fu_239_p2 = ((j_fu_233_p2 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_189_p2 = ((ap_phi_mux_j_0_phi_fu_164_p4 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_171_p2 = ((indvar_flatten_reg_126 == 15'd20000) ? 1'b1 : 1'b0);

assign j_fu_233_p2 = (select_ln14_fu_195_p3 + 9'd1);

assign select_ln14_1_fu_203_p3 = ((icmp_ln13_fu_189_p2[0:0] === 1'b1) ? i_fu_183_p2 : ap_phi_mux_i_0_phi_fu_141_p4);

assign select_ln14_2_fu_253_p3 = ((icmp_ln13_reg_351[0:0] === 1'b1) ? 14'd0 : p_Val2_s_reg_148);

assign select_ln14_fu_195_p3 = ((icmp_ln13_fu_189_p2[0:0] === 1'b1) ? 9'd0 : ap_phi_mux_j_0_phi_fu_164_p4);

assign sext_ln1265_fu_277_p0 = dense_1_bias_V_q0;

assign sext_ln1265_fu_277_p1 = sext_ln1265_fu_277_p0;

assign sext_ln703_fu_290_p0 = dense_1_bias_V_q0;

assign sext_ln703_fu_290_p1 = sext_ln703_fu_290_p0;

assign sum_V_fu_268_p4 = {{grp_fu_332_p3[21:8]}};

assign tmp_fu_306_p3 = add_ln703_fu_294_p2[32'd13];

assign trunc_ln_fu_281_p4 = {{grp_fu_332_p3[20:8]}};

assign zext_ln1117_1_fu_229_p1 = grp_fu_323_p3;

assign zext_ln14_1_fu_220_p1 = select_ln14_fu_195_p3;

assign zext_ln14_fu_211_p1 = select_ln14_1_fu_203_p3;

always @ (posedge ap_clk) begin
    zext_ln14_reg_361[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_1
