-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    input_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce1 : OUT STD_LOGIC;
    input_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_we0 : OUT STD_LOGIC;
    conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv12_FD8 : STD_LOGIC_VECTOR (11 downto 0) := "111111011000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_9C : STD_LOGIC_VECTOR (7 downto 0) := "10011100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv14_3FCB : STD_LOGIC_VECTOR (13 downto 0) := "11111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_V_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_V_0_ce0 : STD_LOGIC;
    signal conv_1_weights_V_0_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_V_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_V_1_ce0 : STD_LOGIC;
    signal conv_1_weights_V_1_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_V_2_ce0 : STD_LOGIC;
    signal conv_1_weights_V_2_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_bias_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_bias_V_ce0 : STD_LOGIC;
    signal conv_1_bias_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_s_reg_321 : STD_LOGIC_VECTOR (13 downto 0);
    signal wr_0_reg_333 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln8_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_378_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln8_reg_1209 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_1_fu_404_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_1_reg_1219 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_4_fu_462_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln32_4_reg_1225 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln32_5_fu_470_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_5_reg_1230 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln32_fu_478_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln32_reg_1235 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln32_2_fu_524_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln32_2_reg_1240 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln32_3_fu_542_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln32_3_reg_1245 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1250 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_14_fu_550_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_14_reg_1255 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_out_V_addr_reg_1260 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln18_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal wr_fu_575_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_1269 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln1117_3_fu_682_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1117_3_reg_1299 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal conv_1_weights_V_2_l_reg_1309 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_reg_1314 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_V_8_fu_822_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_8_reg_1329 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln885_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1337 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_834_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_reg_1341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_V_9_fu_846_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_9_reg_1346 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln894_fu_879_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_1352 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_989_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_1358 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_1003_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1368 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln924_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_reg_1378 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_2_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_2_reg_1383 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_1156_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln11_fu_1167_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten21_reg_265 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_0_reg_276 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_287 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_299 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_310 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_337_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_347_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln924_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_16_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1116_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_1_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_6_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_355_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_384_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_360_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_2_fu_366_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln14_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_396_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln32_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_3_fu_450_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1174_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_493_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_486_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln203_13_fu_500_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_4_fu_510_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_2_fu_416_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_6_fu_516_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_5_fu_528_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_3_fu_424_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_7_fu_534_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_15_fu_554_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln203_fu_504_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_7_fu_558_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_585_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_597_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1116_fu_593_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_8_fu_605_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1116_fu_609_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1116_fu_615_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln18_fu_581_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_627_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_632_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_644_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_fu_640_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1117_5_fu_652_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1117_fu_656_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1117_fu_662_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1117_2_fu_672_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_fu_1184_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln_fu_702_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_2_fu_699_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln703_fu_714_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln728_fu_710_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_1_fu_1191_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_fu_718_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_11_fu_735_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln728_1_fu_745_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_4_fu_732_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln703_2_fu_757_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln728_1_fu_753_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1192_1_fu_761_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_2_fu_1198_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln728_2_fu_787_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_6_fu_784_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln703_3_fu_798_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln728_2_fu_794_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1192_2_fu_802_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1265_fu_818_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_841_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_853_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_33_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_871_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_889_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_895_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_911_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln897_fu_915_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln897_fu_921_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln897_fu_925_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_29_fu_931_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln897_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_2_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_949_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_885_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln899_fu_963_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_30_fu_969_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_2_fu_1010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_1013_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_1018_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_1028_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_1007_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_2_fu_1033_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_1037_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_1050_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_7_fu_1043_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_8_fu_1053_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_s_fu_1059_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_19_fu_1073_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_1089_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_1081_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_1094_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_11_fu_1069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1100_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_34_fu_1107_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_1124_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln924_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_fu_1161_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1174_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1174_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1174_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1174_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1174_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_dcmp_64ns_64nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_5ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component cnn_mul_mul_14s_9hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component conv_1_conv_1_biaeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    conv_1_weights_V_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 9,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_V_0_address0,
        ce0 => conv_1_weights_V_0_ce0,
        q0 => conv_1_weights_V_0_q0);

    conv_1_weights_V_1_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 9,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_V_1_address0,
        ce0 => conv_1_weights_V_1_ce0,
        q0 => conv_1_weights_V_1_q0);

    conv_1_weights_V_2_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 9,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_V_2_address0,
        ce0 => conv_1_weights_V_2_ce0,
        q0 => conv_1_weights_V_2_q0);

    conv_1_bias_V_U : component conv_1_conv_1_biaeOg
    generic map (
        DataWidth => 7,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_V_address0,
        ce0 => conv_1_bias_V_ce0,
        q0 => conv_1_bias_V_q0);

    cnn_dcmp_64ns_64nfYi_U1 : component cnn_dcmp_64ns_64nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_355_p0,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_355_p2);

    cnn_mac_muladd_5ng8j_U2 : component cnn_mac_muladd_5ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_1174_p0,
        din1 => grp_fu_1174_p1,
        din2 => grp_fu_1174_p2,
        dout => grp_fu_1174_p3);

    cnn_mul_mul_14s_9hbi_U3 : component cnn_mul_mul_14s_9hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 9,
        dout_WIDTH => 24)
    port map (
        din0 => input_V_q0,
        din1 => conv_1_weights_V_0_q0,
        dout => mul_ln1118_fu_1184_p2);

    cnn_mul_mul_14s_9hbi_U4 : component cnn_mul_mul_14s_9hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 9,
        dout_WIDTH => 24)
    port map (
        din0 => input_V_q1,
        din1 => conv_1_weights_V_1_q0,
        dout => mul_ln1118_1_fu_1191_p2);

    cnn_mul_mul_14s_9hbi_U5 : component cnn_mul_mul_14s_9hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 9,
        dout_WIDTH => 24)
    port map (
        din0 => input_V_q0,
        din1 => conv_1_weights_V_2_l_reg_1309,
        dout => mul_ln1118_2_fu_1198_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                c_0_reg_299 <= select_ln32_5_reg_1230;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_299 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                f_0_reg_310 <= f_fu_1156_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_310 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten21_reg_265 <= add_ln8_reg_1209;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten21_reg_265 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten_reg_287 <= select_ln11_fu_1167_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_287 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_1265 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_s_reg_321 <= add_ln1192_2_fu_802_p2(21 downto 8);
            elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_s_reg_321 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    r_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                r_0_reg_276 <= select_ln32_1_reg_1219;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_276 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    wr_0_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_1265 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_333 <= wr_reg_1269;
            elsif (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_333 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln1117_3_reg_1299 <= add_ln1117_3_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_1209 <= add_ln8_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_1265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_weights_V_2_l_reg_1309 <= conv_1_weights_V_2_q0;
                tmp_12_reg_1314 <= add_ln1192_1_fu_761_p2(21 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_V_addr_reg_1260 <= zext_ln203_16_fu_564_p1(12 - 1 downto 0);
                icmp_ln11_reg_1214 <= icmp_ln11_fu_390_p2;
                select_ln32_1_reg_1219 <= select_ln32_1_fu_404_p3;
                select_ln32_4_reg_1225 <= select_ln32_4_fu_462_p3;
                select_ln32_5_reg_1230 <= select_ln32_5_fu_470_p3;
                    zext_ln203_14_reg_1255(2 downto 0) <= zext_ln203_14_fu_550_p1(2 downto 0);
                    zext_ln23_reg_1250(2 downto 0) <= zext_ln23_fu_546_p1(2 downto 0);
                    zext_ln32_2_reg_1240(4 downto 0) <= zext_ln32_2_fu_524_p1(4 downto 0);
                    zext_ln32_3_reg_1245(4 downto 0) <= zext_ln32_3_fu_542_p1(4 downto 0);
                    zext_ln32_reg_1235(4 downto 0) <= zext_ln32_fu_478_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_1265 <= icmp_ln18_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln885_reg_1337 <= icmp_ln885_fu_828_p2;
                tmp_V_8_reg_1329 <= tmp_V_8_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln908_reg_1363 <= icmp_ln908_fu_997_p2;
                    or_ln_reg_1358(0) <= or_ln_fu_989_p3(0);
                p_Result_32_reg_1341 <= tmp_V_8_reg_1329(13 downto 13);
                sub_ln894_reg_1352 <= sub_ln894_fu_879_p2;
                tmp_V_9_reg_1346 <= tmp_V_9_fu_846_p3;
                trunc_ln893_reg_1368 <= trunc_ln893_fu_1003_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln924_2_reg_1383 <= icmp_ln924_2_fu_1140_p2;
                icmp_ln924_reg_1378 <= icmp_ln924_fu_1134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                wr_reg_1269 <= wr_fu_575_p2;
            end if;
        end if;
    end process;
    zext_ln32_reg_1235(10 downto 5) <= "000000";
    zext_ln32_2_reg_1240(10 downto 5) <= "000000";
    zext_ln32_3_reg_1245(10 downto 5) <= "000000";
    zext_ln23_reg_1250(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln203_14_reg_1255(5 downto 3) <= "000";
    or_ln_reg_1358(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_fu_372_p2, ap_CS_fsm_state2, icmp_ln18_fu_569_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, icmp_ln885_fu_828_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_569_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_569_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln885_fu_828_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    a_fu_943_p2 <= (icmp_ln897_fu_905_p2 and icmp_ln897_2_fu_937_p2);
    add_ln1116_fu_615_p2 <= std_logic_vector(unsigned(sub_ln1116_fu_609_p2) + unsigned(zext_ln203_14_reg_1255));
    add_ln1117_2_fu_672_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_656_p2) + unsigned(zext_ln32_2_reg_1240));
    add_ln1117_3_fu_682_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_656_p2) + unsigned(zext_ln32_3_reg_1245));
    add_ln1117_fu_662_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_656_p2) + unsigned(zext_ln32_reg_1235));
    add_ln1192_1_fu_761_p2 <= std_logic_vector(unsigned(zext_ln703_2_fu_757_p1) + unsigned(zext_ln728_1_fu_753_p1));
    add_ln1192_2_fu_802_p2 <= std_logic_vector(unsigned(zext_ln703_3_fu_798_p1) + unsigned(zext_ln728_2_fu_794_p1));
    add_ln1192_fu_718_p2 <= std_logic_vector(unsigned(zext_ln703_fu_714_p1) + unsigned(zext_ln728_fu_710_p1));
    add_ln11_fu_1161_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_287) + unsigned(ap_const_lv8_1));
    add_ln203_7_fu_558_p2 <= std_logic_vector(unsigned(zext_ln203_15_fu_554_p1) + unsigned(sub_ln203_fu_504_p2));
    add_ln23_2_fu_366_p2 <= std_logic_vector(unsigned(c_0_reg_299) + unsigned(ap_const_lv5_2));
    add_ln23_3_fu_450_p2 <= std_logic_vector(unsigned(select_ln32_fu_396_p3) + unsigned(ap_const_lv5_1));
    add_ln23_4_fu_510_p2 <= std_logic_vector(unsigned(select_ln32_fu_396_p3) + unsigned(ap_const_lv5_2));
    add_ln23_5_fu_528_p2 <= std_logic_vector(unsigned(select_ln32_fu_396_p3) + unsigned(ap_const_lv5_3));
    add_ln23_fu_627_p2 <= std_logic_vector(unsigned(zext_ln18_fu_581_p1) + unsigned(select_ln32_1_reg_1219));
    add_ln899_fu_963_p2 <= std_logic_vector(signed(ap_const_lv14_3FCB) + signed(trunc_ln894_fu_885_p1));
    add_ln8_fu_378_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_265) + unsigned(ap_const_lv12_1));
    add_ln908_fu_1013_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_1352));
    add_ln915_fu_1094_p2 <= std_logic_vector(unsigned(sub_ln915_fu_1089_p2) + unsigned(select_ln915_fu_1081_p3));
    and_ln32_fu_444_p2 <= (xor_ln32_fu_432_p2 and icmp_ln14_fu_438_p2);
    and_ln899_fu_977_p2 <= (xor_ln899_fu_957_p2 and p_Result_30_fu_969_p3);
    and_ln924_fu_1150_p2 <= (or_ln924_fu_1146_p2 and grp_fu_355_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_569_p2)
    begin
        if ((icmp_ln18_fu_569_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln8_fu_372_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln8_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_347_p4_assign_proc : process(tmp_V_8_reg_1329, icmp_ln885_reg_1337, ap_CS_fsm_state10, and_ln924_fu_1150_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
            if (((icmp_ln885_reg_1337 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln924_fu_1150_p2))) then 
                ap_phi_mux_storemerge_phi_fu_347_p4 <= tmp_V_8_reg_1329;
            elsif (((ap_const_lv1_0 = and_ln924_fu_1150_p2) or (icmp_ln885_reg_1337 = ap_const_lv1_1))) then 
                ap_phi_mux_storemerge_phi_fu_347_p4 <= ap_const_lv14_0;
            else 
                ap_phi_mux_storemerge_phi_fu_347_p4 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_347_p4 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_337_p4_assign_proc : process(wr_0_reg_333, icmp_ln18_reg_1265, ap_CS_fsm_pp0_stage0, wr_reg_1269, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_1265 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wr_0_phi_fu_337_p4 <= wr_reg_1269;
        else 
            ap_phi_mux_wr_0_phi_fu_337_p4 <= wr_0_reg_333;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_372_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_360_p2 <= std_logic_vector(unsigned(c_0_reg_299) + unsigned(ap_const_lv5_1));
    conv_1_bias_V_address0 <= zext_ln23_reg_1250(3 - 1 downto 0);

    conv_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_V_0_address0 <= sext_ln1116_fu_620_p1(5 - 1 downto 0);

    conv_1_weights_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_V_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_V_1_address0 <= sext_ln1116_fu_620_p1(5 - 1 downto 0);

    conv_1_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_V_2_address0 <= sext_ln1116_fu_620_p1(5 - 1 downto 0);

    conv_1_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_address0 <= conv_out_V_addr_reg_1260;

    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_d0 <= ap_phi_mux_storemerge_phi_fu_347_p4;

    conv_out_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_out_V_we0 <= ap_const_logic_1;
        else 
            conv_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_1156_p2 <= std_logic_vector(unsigned(select_ln32_4_reg_1225) + unsigned(ap_const_lv3_1));
    grp_fu_1174_p0 <= grp_fu_1174_p00(5 - 1 downto 0);
    grp_fu_1174_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_1_fu_404_p3),10));
    grp_fu_1174_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_1174_p2 <= grp_fu_1174_p20(5 - 1 downto 0);
    grp_fu_1174_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_5_fu_470_p3),10));
    grp_fu_355_p0 <= p_Result_34_fu_1107_p5;
    icmp_ln11_fu_390_p2 <= "1" when (indvar_flatten_reg_287 = ap_const_lv8_9C) else "0";
    icmp_ln14_fu_438_p2 <= "1" when (f_0_reg_310 = ap_const_lv3_6) else "0";
    icmp_ln18_fu_569_p2 <= "1" when (ap_phi_mux_wr_0_phi_fu_337_p4 = ap_const_lv2_3) else "0";
    icmp_ln885_fu_828_p2 <= "1" when (tmp_V_8_fu_822_p2 = ap_const_lv14_0) else "0";
    icmp_ln897_2_fu_937_p2 <= "0" when (p_Result_29_fu_931_p2 = ap_const_lv14_0) else "1";
    icmp_ln897_fu_905_p2 <= "1" when (signed(tmp_17_fu_895_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln8_fu_372_p2 <= "1" when (indvar_flatten21_reg_265 = ap_const_lv12_FD8) else "0";
    icmp_ln908_fu_997_p2 <= "1" when (signed(lsb_index_fu_889_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln924_2_fu_1140_p2 <= "1" when (trunc_ln7_fu_1124_p4 = ap_const_lv52_0) else "0";
    icmp_ln924_fu_1134_p2 <= "0" when (add_ln915_fu_1094_p2 = ap_const_lv11_7FF) else "1";

    input_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, sext_ln1117_fu_667_p1, zext_ln1117_6_fu_687_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_V_address0 <= zext_ln1117_6_fu_687_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_V_address0 <= sext_ln1117_fu_667_p1(10 - 1 downto 0);
            else 
                input_V_address0 <= "XXXXXXXXXX";
            end if;
        else 
            input_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    input_V_address1 <= sext_ln1117_1_fu_677_p1(10 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_V_ce1 <= ap_const_logic_1;
        else 
            input_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    
    l_fu_871_p3_proc : process(p_Result_33_fu_863_p3)
    begin
        l_fu_871_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_33_fu_863_p3(i) = '1' then
                l_fu_871_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_889_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_879_p2));
    lshr_ln897_fu_925_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln897_fu_921_p1(14-1 downto 0)))));
    lshr_ln908_fu_1018_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_2_fu_1010_p1),to_integer(unsigned('0' & add_ln908_fu_1013_p2(31-1 downto 0)))));
    m_11_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_1059_p4),64));
    m_7_fu_1043_p3 <= 
        zext_ln908_fu_1024_p1 when (icmp_ln908_reg_1363(0) = '1') else 
        shl_ln908_fu_1037_p2;
    m_8_fu_1053_p2 <= std_logic_vector(unsigned(zext_ln911_fu_1050_p1) + unsigned(m_7_fu_1043_p3));
    m_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_9_reg_1346),64));
    m_s_fu_1059_p4 <= m_8_fu_1053_p2(63 downto 1);
    or_ln32_fu_456_p2 <= (icmp_ln11_fu_390_p2 or and_ln32_fu_444_p2);
    or_ln899_fu_983_p2 <= (and_ln899_fu_977_p2 or a_fu_943_p2);
    or_ln924_fu_1146_p2 <= (icmp_ln924_reg_1378 or icmp_ln924_2_reg_1383);
    or_ln_fu_989_p3 <= (ap_const_lv31_0 & or_ln899_fu_983_p2);
    p_Result_29_fu_931_p2 <= (tmp_V_9_fu_846_p3 and lshr_ln897_fu_925_p2);
    p_Result_30_fu_969_p3 <= tmp_V_9_fu_846_p3(to_integer(unsigned(add_ln899_fu_963_p2)) downto to_integer(unsigned(add_ln899_fu_963_p2))) when (to_integer(unsigned(add_ln899_fu_963_p2))>= 0 and to_integer(unsigned(add_ln899_fu_963_p2))<=13) else "-";
    p_Result_32_fu_834_p3 <= tmp_V_8_reg_1329(13 downto 13);
    p_Result_33_fu_863_p3 <= (ap_const_lv18_3FFFF & p_Result_s_fu_853_p4);
    p_Result_34_fu_1107_p5 <= (tmp_8_fu_1100_p3 & m_11_fu_1069_p1(51 downto 0));
    
    p_Result_s_fu_853_p4_proc : process(tmp_V_9_fu_846_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_853_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_9_fu_846_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_853_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_853_p4_i) := tmp_V_9_fu_846_p3(14-1-p_Result_s_fu_853_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_853_p4 <= resvalue(14-1 downto 0);
    end process;

    p_shl_cast_fu_486_p3 <= (grp_fu_1174_p3 & ap_const_lv3_0);
    r_fu_384_p2 <= std_logic_vector(unsigned(r_0_reg_276) + unsigned(ap_const_lv5_1));
    select_ln11_fu_1167_p3 <= 
        ap_const_lv8_1 when (icmp_ln11_reg_1214(0) = '1') else 
        add_ln11_fu_1161_p2;
    select_ln32_1_fu_404_p3 <= 
        r_fu_384_p2 when (icmp_ln11_fu_390_p2(0) = '1') else 
        r_0_reg_276;
    select_ln32_2_fu_416_p3 <= 
        ap_const_lv5_1 when (icmp_ln11_fu_390_p2(0) = '1') else 
        c_fu_360_p2;
    select_ln32_3_fu_424_p3 <= 
        ap_const_lv5_2 when (icmp_ln11_fu_390_p2(0) = '1') else 
        add_ln23_2_fu_366_p2;
    select_ln32_4_fu_462_p3 <= 
        ap_const_lv3_0 when (or_ln32_fu_456_p2(0) = '1') else 
        f_0_reg_310;
    select_ln32_5_fu_470_p3 <= 
        add_ln23_3_fu_450_p2 when (and_ln32_fu_444_p2(0) = '1') else 
        select_ln32_fu_396_p3;
    select_ln32_6_fu_516_p3 <= 
        add_ln23_4_fu_510_p2 when (and_ln32_fu_444_p2(0) = '1') else 
        select_ln32_2_fu_416_p3;
    select_ln32_7_fu_534_p3 <= 
        add_ln23_5_fu_528_p2 when (and_ln32_fu_444_p2(0) = '1') else 
        select_ln32_3_fu_424_p3;
    select_ln32_fu_396_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_390_p2(0) = '1') else 
        c_0_reg_299;
    select_ln915_fu_1081_p3 <= 
        ap_const_lv11_3FF when (tmp_19_fu_1073_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1116_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1116_fu_615_p2),64));

        sext_ln1117_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_2_fu_672_p2),64));

        sext_ln1117_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_fu_662_p2),64));

        sext_ln1118_2_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_fu_1184_p2),28));

        sext_ln1118_4_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_1_fu_1191_p2),28));

        sext_ln1118_6_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_2_fu_1198_p2),28));

        sext_ln1265_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_1_bias_V_q0),14));

    shl_ln728_1_fu_745_p3 <= (tmp_11_fu_735_p4 & ap_const_lv8_0);
    shl_ln728_2_fu_787_p3 <= (tmp_12_reg_1314 & ap_const_lv8_0);
    shl_ln908_fu_1037_p2 <= std_logic_vector(shift_left(unsigned(m_fu_1007_p1),to_integer(unsigned('0' & zext_ln908_2_fu_1033_p1(31-1 downto 0)))));
    shl_ln_fu_702_p3 <= (p_Val2_s_reg_321 & ap_const_lv8_0);
    sub_ln1116_fu_609_p2 <= std_logic_vector(unsigned(zext_ln1116_fu_593_p1) - unsigned(zext_ln1116_8_fu_605_p1));
    sub_ln1117_fu_656_p2 <= std_logic_vector(unsigned(zext_ln1117_fu_640_p1) - unsigned(zext_ln1117_5_fu_652_p1));
    sub_ln203_fu_504_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_486_p3) - unsigned(zext_ln203_13_fu_500_p1));
    sub_ln894_fu_879_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_871_p3));
    sub_ln897_fu_915_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) - unsigned(trunc_ln897_fu_911_p1));
    sub_ln908_fu_1028_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_1352));
    sub_ln915_fu_1089_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) - unsigned(trunc_ln893_reg_1368));
    tmp_10_fu_644_p3 <= (add_ln23_fu_627_p2 & ap_const_lv2_0);
    tmp_11_fu_735_p4 <= add_ln1192_fu_718_p2(21 downto 8);
    tmp_17_fu_895_p4 <= lsb_index_fu_889_p2(31 downto 1);
    tmp_18_fu_949_p3 <= lsb_index_fu_889_p2(31 downto 31);
    tmp_19_fu_1073_p3 <= m_8_fu_1053_p2(54 downto 54);
    tmp_7_fu_597_p3 <= (ap_phi_mux_wr_0_phi_fu_337_p4 & ap_const_lv1_0);
    tmp_8_fu_1100_p3 <= (p_Result_32_reg_1341 & add_ln915_fu_1094_p2);
    tmp_9_fu_632_p3 <= (add_ln23_fu_627_p2 & ap_const_lv5_0);
    tmp_V_8_fu_822_p2 <= std_logic_vector(signed(sext_ln1265_fu_818_p1) + signed(p_Val2_s_reg_321));
    tmp_V_9_fu_846_p3 <= 
        tmp_V_fu_841_p2 when (p_Result_32_fu_834_p3(0) = '1') else 
        tmp_V_8_reg_1329;
    tmp_V_fu_841_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(tmp_V_8_reg_1329));
    tmp_fu_493_p3 <= (grp_fu_1174_p3 & ap_const_lv1_0);
    tmp_s_fu_585_p3 <= (ap_phi_mux_wr_0_phi_fu_337_p4 & ap_const_lv3_0);
    trunc_ln7_fu_1124_p4 <= m_8_fu_1053_p2(52 downto 1);
    trunc_ln893_fu_1003_p1 <= l_fu_871_p3(11 - 1 downto 0);
    trunc_ln894_fu_885_p1 <= sub_ln894_fu_879_p2(14 - 1 downto 0);
    trunc_ln897_fu_911_p1 <= sub_ln894_fu_879_p2(4 - 1 downto 0);
    wr_fu_575_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_337_p4) + unsigned(ap_const_lv2_1));
    xor_ln32_fu_432_p2 <= (icmp_ln11_fu_390_p2 xor ap_const_lv1_1);
    xor_ln899_fu_957_p2 <= (tmp_18_fu_949_p3 xor ap_const_lv1_1);
    zext_ln1116_8_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_597_p3),6));
    zext_ln1116_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_585_p3),6));
    zext_ln1117_5_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_644_p3),11));
    zext_ln1117_6_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_3_reg_1299),64));
    zext_ln1117_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_632_p3),11));
    zext_ln18_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wr_0_phi_fu_337_p4),5));
    zext_ln203_13_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_493_p3),13));
    zext_ln203_14_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_4_fu_462_p3),6));
    zext_ln203_15_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_4_fu_462_p3),13));
    zext_ln203_16_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_7_fu_558_p2),64));
    zext_ln23_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_4_fu_462_p3),64));
    zext_ln32_2_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_6_fu_516_p3),11));
    zext_ln32_3_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_7_fu_534_p3),11));
    zext_ln32_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_5_fu_470_p3),11));
    zext_ln703_2_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_4_fu_732_p1),29));
    zext_ln703_3_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_6_fu_784_p1),29));
    zext_ln703_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_2_fu_699_p1),29));
    zext_ln728_1_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_1_fu_745_p3),29));
    zext_ln728_2_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_2_fu_787_p3),29));
    zext_ln728_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_702_p3),29));
    zext_ln897_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_915_p2),14));
    zext_ln907_2_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_9_reg_1346),32));
    zext_ln908_2_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_1028_p2),64));
    zext_ln908_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_1018_p2),64));
    zext_ln911_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1358),64));
end behav;
