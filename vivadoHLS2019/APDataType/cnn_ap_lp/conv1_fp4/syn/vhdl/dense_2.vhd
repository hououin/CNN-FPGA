-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_1_out_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dense_1_out_V_ce0 : OUT STD_LOGIC;
    dense_1_out_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    dense_2_out_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_V_ce0 : OUT STD_LOGIC;
    dense_2_out_V_we0 : OUT STD_LOGIC;
    dense_2_out_V_d0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of dense_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_2_weights_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_weights_V_ce0 : STD_LOGIC;
    signal dense_2_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_2_bias_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_bias_V_ce0 : STD_LOGIC;
    signal dense_2_bias_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_154_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_303 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln14_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_308 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_164_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_reg_314 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_174_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_322 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln13_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_0_reg_114 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Val2_s_reg_125 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_reg_137 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1117_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_185_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_197_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_fu_193_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1117_1_fu_205_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1117_fu_209_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1117_fu_215_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_291_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_250_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_fu_258_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1265_fu_250_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_fu_258_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln703_fu_254_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_fu_262_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_268_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_291_p10 : STD_LOGIC_VECTOR (21 downto 0);

    component cnn_mac_muladd_9sqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component dense_2_dense_2_wocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component dense_2_dense_2_bpcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    dense_2_weights_V_U : component dense_2_dense_2_wocq
    generic map (
        DataWidth => 9,
        AddressRange => 1500,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_weights_V_address0,
        ce0 => dense_2_weights_V_ce0,
        q0 => dense_2_weights_V_q0);

    dense_2_bias_V_U : component dense_2_dense_2_bpcA
    generic map (
        DataWidth => 9,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_bias_V_address0,
        ce0 => dense_2_bias_V_ce0,
        q0 => dense_2_bias_V_q0);

    cnn_mac_muladd_9sqcK_U34 : component cnn_mac_muladd_9sqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 13,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_2_weights_V_q0,
        din1 => grp_fu_291_p1,
        din2 => grp_fu_291_p2,
        dout => grp_fu_291_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_114 <= i_reg_303;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_114 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_137 <= j_reg_322;
            elsif (((icmp_ln9_fu_148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_137 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_s_reg_125 <= grp_fu_291_p3(21 downto 8);
            elsif (((icmp_ln9_fu_148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_s_reg_125 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_303 <= i_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_322 <= j_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_reg_314(4 downto 0) <= zext_ln13_fu_164_p1(4 downto 0);
                    zext_ln14_reg_308(4 downto 0) <= zext_ln14_fu_160_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln14_reg_308(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_314(11 downto 5) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_148_p2, ap_CS_fsm_state3, icmp_ln13_fu_168_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln9_fu_148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln1117_fu_215_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_209_p2) + unsigned(zext_ln13_reg_314));
    add_ln203_fu_268_p2 <= std_logic_vector(signed(sext_ln703_fu_258_p1) + signed(trunc_ln703_fu_254_p1));
    add_ln703_fu_262_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_125) + unsigned(sext_ln1265_fu_250_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_148_p2)
    begin
        if ((((icmp_ln9_fu_148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_148_p2)
    begin
        if (((icmp_ln9_fu_148_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_V_address0 <= zext_ln14_1_fu_180_p1(6 - 1 downto 0);

    dense_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_1_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_bias_V_address0 <= zext_ln14_reg_308(5 - 1 downto 0);

    dense_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_out_V_address0 <= zext_ln14_reg_308(5 - 1 downto 0);

    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_out_V_d0 <= 
        ap_const_lv13_0 when (tmp_6_fu_274_p3(0) = '1') else 
        add_ln203_fu_268_p2;

    dense_2_out_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_2_out_V_we0 <= ap_const_logic_1;
        else 
            dense_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_weights_V_address0 <= sext_ln1117_fu_220_p1(11 - 1 downto 0);

    dense_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_291_p1 <= grp_fu_291_p10(13 - 1 downto 0);
    grp_fu_291_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_1_out_V_q0),22));
    grp_fu_291_p2 <= (p_Val2_s_reg_125 & ap_const_lv8_0);
    i_fu_154_p2 <= std_logic_vector(unsigned(i_0_reg_114) + unsigned(ap_const_lv5_1));
    icmp_ln13_fu_168_p2 <= "1" when (j_0_reg_137 = ap_const_lv6_32) else "0";
    icmp_ln9_fu_148_p2 <= "1" when (i_0_reg_114 = ap_const_lv5_1E) else "0";
    j_fu_174_p2 <= std_logic_vector(unsigned(j_0_reg_137) + unsigned(ap_const_lv6_1));
        sext_ln1117_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_fu_215_p2),64));

    sext_ln1265_fu_250_p0 <= dense_2_bias_V_q0;
        sext_ln1265_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_250_p0),14));

    sext_ln703_fu_258_p0 <= dense_2_bias_V_q0;
        sext_ln703_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_258_p0),13));

    sub_ln1117_fu_209_p2 <= std_logic_vector(unsigned(zext_ln1117_fu_193_p1) - unsigned(zext_ln1117_1_fu_205_p1));
    tmp_2_fu_197_p3 <= (j_0_reg_137 & ap_const_lv1_0);
    tmp_6_fu_274_p3 <= add_ln703_fu_262_p2(13 downto 13);
    tmp_s_fu_185_p3 <= (j_0_reg_137 & ap_const_lv5_0);
    trunc_ln703_fu_254_p1 <= p_Val2_s_reg_125(13 - 1 downto 0);
    zext_ln1117_1_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_197_p3),12));
    zext_ln1117_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_185_p3),12));
    zext_ln13_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_114),12));
    zext_ln14_1_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_137),64));
    zext_ln14_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_114),64));
end behav;
