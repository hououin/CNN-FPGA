// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        input_V_address1,
        input_V_ce1,
        input_V_q1,
        conv_out_V_address0,
        conv_out_V_ce0,
        conv_out_V_we0,
        conv_out_V_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_pp0_stage0 = 9'd4;
parameter    ap_ST_fsm_pp0_stage1 = 9'd8;
parameter    ap_ST_fsm_state6 = 9'd16;
parameter    ap_ST_fsm_state7 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_state9 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_V_address0;
output   input_V_ce0;
input  [13:0] input_V_q0;
output  [9:0] input_V_address1;
output   input_V_ce1;
input  [13:0] input_V_q1;
output  [11:0] conv_out_V_address0;
output   conv_out_V_ce0;
output   conv_out_V_we0;
output  [13:0] conv_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_V_address0;
reg input_V_ce0;
reg input_V_ce1;
reg conv_out_V_ce0;
reg conv_out_V_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] conv_1_weights_V_0_address0;
reg    conv_1_weights_V_0_ce0;
wire  signed [8:0] conv_1_weights_V_0_q0;
wire   [4:0] conv_1_weights_V_1_address0;
reg    conv_1_weights_V_1_ce0;
wire  signed [8:0] conv_1_weights_V_1_q0;
wire   [4:0] conv_1_weights_V_2_address0;
reg    conv_1_weights_V_2_ce0;
wire   [8:0] conv_1_weights_V_2_q0;
wire   [2:0] conv_1_bias_V_address0;
reg    conv_1_bias_V_ce0;
wire   [6:0] conv_1_bias_V_q0;
reg   [13:0] p_Val2_s_reg_321;
reg   [1:0] wr_0_reg_333;
wire   [0:0] icmp_ln8_fu_372_p2;
wire    ap_CS_fsm_state2;
wire   [11:0] add_ln8_fu_378_p2;
reg   [11:0] add_ln8_reg_1209;
wire   [0:0] icmp_ln11_fu_390_p2;
reg   [0:0] icmp_ln11_reg_1214;
wire   [4:0] select_ln32_1_fu_404_p3;
reg   [4:0] select_ln32_1_reg_1219;
wire   [2:0] select_ln32_4_fu_462_p3;
reg   [2:0] select_ln32_4_reg_1225;
wire   [4:0] select_ln32_5_fu_470_p3;
reg   [4:0] select_ln32_5_reg_1230;
wire   [10:0] zext_ln32_fu_478_p1;
reg   [10:0] zext_ln32_reg_1235;
wire   [10:0] zext_ln32_2_fu_524_p1;
reg   [10:0] zext_ln32_2_reg_1240;
wire   [10:0] zext_ln32_3_fu_542_p1;
reg   [10:0] zext_ln32_3_reg_1245;
wire   [63:0] zext_ln23_fu_546_p1;
reg   [63:0] zext_ln23_reg_1250;
wire   [5:0] zext_ln203_14_fu_550_p1;
reg   [5:0] zext_ln203_14_reg_1255;
reg   [11:0] conv_out_V_addr_reg_1260;
wire   [0:0] icmp_ln18_fu_569_p2;
reg   [0:0] icmp_ln18_reg_1265;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] wr_fu_575_p2;
reg   [1:0] wr_reg_1269;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] add_ln1117_3_fu_682_p2;
reg   [10:0] add_ln1117_3_reg_1299;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg  signed [8:0] conv_1_weights_V_2_l_reg_1309;
reg   [13:0] tmp_12_reg_1314;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state6;
wire   [13:0] tmp_V_8_fu_822_p2;
reg   [13:0] tmp_V_8_reg_1329;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln885_fu_828_p2;
reg   [0:0] icmp_ln885_reg_1337;
wire   [0:0] p_Result_32_fu_834_p3;
reg   [0:0] p_Result_32_reg_1341;
wire    ap_CS_fsm_state8;
wire   [13:0] tmp_V_9_fu_846_p3;
reg   [13:0] tmp_V_9_reg_1346;
wire   [31:0] sub_ln894_fu_879_p2;
reg   [31:0] sub_ln894_reg_1352;
wire   [31:0] or_ln_fu_989_p3;
reg   [31:0] or_ln_reg_1358;
wire   [0:0] icmp_ln908_fu_997_p2;
reg   [0:0] icmp_ln908_reg_1363;
wire   [10:0] trunc_ln893_fu_1003_p1;
reg   [10:0] trunc_ln893_reg_1368;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln924_fu_1134_p2;
reg   [0:0] icmp_ln924_reg_1378;
wire   [0:0] icmp_ln924_2_fu_1140_p2;
reg   [0:0] icmp_ln924_2_reg_1383;
wire   [2:0] f_fu_1156_p2;
wire    ap_CS_fsm_state10;
wire   [7:0] select_ln11_fu_1167_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage1_subdone;
reg   [11:0] indvar_flatten21_reg_265;
reg   [4:0] r_0_reg_276;
reg   [7:0] indvar_flatten_reg_287;
reg   [4:0] c_0_reg_299;
reg   [2:0] f_0_reg_310;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_337_p4;
reg   [13:0] ap_phi_mux_storemerge_phi_fu_347_p4;
wire   [0:0] and_ln924_fu_1150_p2;
wire   [63:0] zext_ln203_16_fu_564_p1;
wire  signed [63:0] sext_ln1116_fu_620_p1;
wire  signed [63:0] sext_ln1117_fu_667_p1;
wire  signed [63:0] sext_ln1117_1_fu_677_p1;
wire   [63:0] zext_ln1117_6_fu_687_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] grp_fu_355_p0;
wire   [4:0] r_fu_384_p2;
wire   [4:0] c_fu_360_p2;
wire   [4:0] add_ln23_2_fu_366_p2;
wire   [0:0] icmp_ln14_fu_438_p2;
wire   [0:0] xor_ln32_fu_432_p2;
wire   [4:0] select_ln32_fu_396_p3;
wire   [0:0] and_ln32_fu_444_p2;
wire   [0:0] or_ln32_fu_456_p2;
wire   [4:0] add_ln23_3_fu_450_p2;
wire   [9:0] grp_fu_1174_p3;
wire   [10:0] tmp_fu_493_p3;
wire   [12:0] p_shl_cast_fu_486_p3;
wire   [12:0] zext_ln203_13_fu_500_p1;
wire   [4:0] add_ln23_4_fu_510_p2;
wire   [4:0] select_ln32_2_fu_416_p3;
wire   [4:0] select_ln32_6_fu_516_p3;
wire   [4:0] add_ln23_5_fu_528_p2;
wire   [4:0] select_ln32_3_fu_424_p3;
wire   [4:0] select_ln32_7_fu_534_p3;
wire   [12:0] zext_ln203_15_fu_554_p1;
wire   [12:0] sub_ln203_fu_504_p2;
wire   [12:0] add_ln203_7_fu_558_p2;
wire   [4:0] tmp_s_fu_585_p3;
wire   [2:0] tmp_7_fu_597_p3;
wire   [5:0] zext_ln1116_fu_593_p1;
wire   [5:0] zext_ln1116_8_fu_605_p1;
wire   [5:0] sub_ln1116_fu_609_p2;
wire   [5:0] add_ln1116_fu_615_p2;
wire   [4:0] zext_ln18_fu_581_p1;
wire   [4:0] add_ln23_fu_627_p2;
wire   [9:0] tmp_9_fu_632_p3;
wire   [6:0] tmp_10_fu_644_p3;
wire   [10:0] zext_ln1117_fu_640_p1;
wire   [10:0] zext_ln1117_5_fu_652_p1;
wire   [10:0] sub_ln1117_fu_656_p2;
wire   [10:0] add_ln1117_fu_662_p2;
wire   [10:0] add_ln1117_2_fu_672_p2;
wire  signed [23:0] mul_ln1118_fu_1184_p2;
wire   [21:0] shl_ln_fu_702_p3;
wire  signed [27:0] sext_ln1118_2_fu_699_p1;
wire   [28:0] zext_ln703_fu_714_p1;
wire   [28:0] zext_ln728_fu_710_p1;
wire  signed [23:0] mul_ln1118_1_fu_1191_p2;
wire   [28:0] add_ln1192_fu_718_p2;
wire   [13:0] tmp_11_fu_735_p4;
wire   [21:0] shl_ln728_1_fu_745_p3;
wire  signed [27:0] sext_ln1118_4_fu_732_p1;
wire   [28:0] zext_ln703_2_fu_757_p1;
wire   [28:0] zext_ln728_1_fu_753_p1;
wire   [28:0] add_ln1192_1_fu_761_p2;
wire  signed [23:0] mul_ln1118_2_fu_1198_p2;
wire   [21:0] shl_ln728_2_fu_787_p3;
wire  signed [27:0] sext_ln1118_6_fu_784_p1;
wire   [28:0] zext_ln703_3_fu_798_p1;
wire   [28:0] zext_ln728_2_fu_794_p1;
wire   [28:0] add_ln1192_2_fu_802_p2;
wire  signed [13:0] sext_ln1265_fu_818_p1;
wire   [13:0] tmp_V_fu_841_p2;
reg   [13:0] p_Result_s_fu_853_p4;
wire   [31:0] p_Result_33_fu_863_p3;
reg   [31:0] l_fu_871_p3;
wire   [31:0] lsb_index_fu_889_p2;
wire   [30:0] tmp_17_fu_895_p4;
wire   [3:0] trunc_ln897_fu_911_p1;
wire   [3:0] sub_ln897_fu_915_p2;
wire   [13:0] zext_ln897_fu_921_p1;
wire   [13:0] lshr_ln897_fu_925_p2;
wire   [13:0] p_Result_29_fu_931_p2;
wire   [0:0] icmp_ln897_fu_905_p2;
wire   [0:0] icmp_ln897_2_fu_937_p2;
wire   [0:0] tmp_18_fu_949_p3;
wire   [13:0] trunc_ln894_fu_885_p1;
wire   [13:0] add_ln899_fu_963_p2;
wire   [0:0] p_Result_30_fu_969_p3;
wire   [0:0] xor_ln899_fu_957_p2;
wire   [0:0] and_ln899_fu_977_p2;
wire   [0:0] a_fu_943_p2;
wire   [0:0] or_ln899_fu_983_p2;
wire   [31:0] zext_ln907_2_fu_1010_p1;
wire   [31:0] add_ln908_fu_1013_p2;
wire   [31:0] lshr_ln908_fu_1018_p2;
wire   [31:0] sub_ln908_fu_1028_p2;
wire   [63:0] m_fu_1007_p1;
wire   [63:0] zext_ln908_2_fu_1033_p1;
wire   [63:0] zext_ln908_fu_1024_p1;
wire   [63:0] shl_ln908_fu_1037_p2;
wire   [63:0] zext_ln911_fu_1050_p1;
wire   [63:0] m_7_fu_1043_p3;
wire   [63:0] m_8_fu_1053_p2;
wire   [62:0] m_s_fu_1059_p4;
wire   [0:0] tmp_19_fu_1073_p3;
wire   [10:0] sub_ln915_fu_1089_p2;
wire   [10:0] select_ln915_fu_1081_p3;
wire   [10:0] add_ln915_fu_1094_p2;
wire   [63:0] m_11_fu_1069_p1;
wire   [11:0] tmp_8_fu_1100_p3;
wire   [63:0] p_Result_34_fu_1107_p5;
wire   [51:0] trunc_ln7_fu_1124_p4;
wire   [0:0] or_ln924_fu_1146_p2;
wire   [0:0] grp_fu_355_p2;
wire   [7:0] add_ln11_fu_1161_p2;
wire   [4:0] grp_fu_1174_p0;
wire   [5:0] grp_fu_1174_p1;
wire   [4:0] grp_fu_1174_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_1174_p00;
wire   [9:0] grp_fu_1174_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 9 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_1_weights_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_address0),
    .ce0(conv_1_weights_V_0_ce0),
    .q0(conv_1_weights_V_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 9 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_1_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_1_address0),
    .ce0(conv_1_weights_V_1_ce0),
    .q0(conv_1_weights_V_1_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 9 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_1_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_2_address0),
    .ce0(conv_1_weights_V_2_ce0),
    .q0(conv_1_weights_V_2_q0)
);

conv_1_conv_1_biaeOg #(
    .DataWidth( 7 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_V_address0),
    .ce0(conv_1_bias_V_ce0),
    .q0(conv_1_bias_V_q0)
);

cnn_dcmp_64ns_64nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
cnn_dcmp_64ns_64nfYi_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_355_p0),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_355_p2)
);

cnn_mac_muladd_5ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
cnn_mac_muladd_5ng8j_U2(
    .din0(grp_fu_1174_p0),
    .din1(grp_fu_1174_p1),
    .din2(grp_fu_1174_p2),
    .dout(grp_fu_1174_p3)
);

cnn_mul_mul_14s_9hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 24 ))
cnn_mul_mul_14s_9hbi_U3(
    .din0(input_V_q0),
    .din1(conv_1_weights_V_0_q0),
    .dout(mul_ln1118_fu_1184_p2)
);

cnn_mul_mul_14s_9hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 24 ))
cnn_mul_mul_14s_9hbi_U4(
    .din0(input_V_q1),
    .din1(conv_1_weights_V_1_q0),
    .dout(mul_ln1118_1_fu_1191_p2)
);

cnn_mul_mul_14s_9hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 24 ))
cnn_mul_mul_14s_9hbi_U5(
    .din0(input_V_q0),
    .din1(conv_1_weights_V_2_l_reg_1309),
    .dout(mul_ln1118_2_fu_1198_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln8_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln8_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_0_reg_299 <= select_ln32_5_reg_1230;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_299 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        f_0_reg_310 <= f_fu_1156_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_310 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten21_reg_265 <= add_ln8_reg_1209;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten21_reg_265 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten_reg_287 <= select_ln11_fu_1167_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_287 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_1265 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_reg_321 <= {{add_ln1192_2_fu_802_p2[21:8]}};
    end else if (((icmp_ln8_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_reg_321 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_0_reg_276 <= select_ln32_1_reg_1219;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_276 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_1265 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_0_reg_333 <= wr_reg_1269;
    end else if (((icmp_ln8_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_333 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_569_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln1117_3_reg_1299 <= add_ln1117_3_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_1209 <= add_ln8_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_1_weights_V_2_l_reg_1309 <= conv_1_weights_V_2_q0;
        tmp_12_reg_1314 <= {{add_ln1192_1_fu_761_p2[21:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_V_addr_reg_1260 <= zext_ln203_16_fu_564_p1;
        icmp_ln11_reg_1214 <= icmp_ln11_fu_390_p2;
        select_ln32_1_reg_1219 <= select_ln32_1_fu_404_p3;
        select_ln32_4_reg_1225 <= select_ln32_4_fu_462_p3;
        select_ln32_5_reg_1230 <= select_ln32_5_fu_470_p3;
        zext_ln203_14_reg_1255[2 : 0] <= zext_ln203_14_fu_550_p1[2 : 0];
        zext_ln23_reg_1250[2 : 0] <= zext_ln23_fu_546_p1[2 : 0];
        zext_ln32_2_reg_1240[4 : 0] <= zext_ln32_2_fu_524_p1[4 : 0];
        zext_ln32_3_reg_1245[4 : 0] <= zext_ln32_3_fu_542_p1[4 : 0];
        zext_ln32_reg_1235[4 : 0] <= zext_ln32_fu_478_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln18_reg_1265 <= icmp_ln18_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln885_reg_1337 <= icmp_ln885_fu_828_p2;
        tmp_V_8_reg_1329 <= tmp_V_8_fu_822_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln908_reg_1363 <= icmp_ln908_fu_997_p2;
        or_ln_reg_1358[0] <= or_ln_fu_989_p3[0];
        p_Result_32_reg_1341 <= tmp_V_8_reg_1329[32'd13];
        sub_ln894_reg_1352 <= sub_ln894_fu_879_p2;
        tmp_V_9_reg_1346 <= tmp_V_9_fu_846_p3;
        trunc_ln893_reg_1368 <= trunc_ln893_fu_1003_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        icmp_ln924_2_reg_1383 <= icmp_ln924_2_fu_1140_p2;
        icmp_ln924_reg_1378 <= icmp_ln924_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_reg_1269 <= wr_fu_575_p2;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_569_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln8_fu_372_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if (((icmp_ln885_reg_1337 == 1'd0) & (1'd1 == and_ln924_fu_1150_p2))) begin
            ap_phi_mux_storemerge_phi_fu_347_p4 = tmp_V_8_reg_1329;
        end else if (((1'd0 == and_ln924_fu_1150_p2) | (icmp_ln885_reg_1337 == 1'd1))) begin
            ap_phi_mux_storemerge_phi_fu_347_p4 = 14'd0;
        end else begin
            ap_phi_mux_storemerge_phi_fu_347_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_347_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_1265 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wr_0_phi_fu_337_p4 = wr_reg_1269;
    end else begin
        ap_phi_mux_wr_0_phi_fu_337_p4 = wr_0_reg_333;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_372_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_1_bias_V_ce0 = 1'b1;
    end else begin
        conv_1_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_out_V_ce0 = 1'b1;
    end else begin
        conv_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_out_V_we0 = 1'b1;
    end else begin
        conv_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_V_address0 = zext_ln1117_6_fu_687_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_V_address0 = sext_ln1117_fu_667_p1;
        end else begin
            input_V_address0 = 'bx;
        end
    end else begin
        input_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_V_ce1 = 1'b1;
    end else begin
        input_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_372_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_569_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_569_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln885_fu_828_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_943_p2 = (icmp_ln897_fu_905_p2 & icmp_ln897_2_fu_937_p2);

assign add_ln1116_fu_615_p2 = (sub_ln1116_fu_609_p2 + zext_ln203_14_reg_1255);

assign add_ln1117_2_fu_672_p2 = (sub_ln1117_fu_656_p2 + zext_ln32_2_reg_1240);

assign add_ln1117_3_fu_682_p2 = (sub_ln1117_fu_656_p2 + zext_ln32_3_reg_1245);

assign add_ln1117_fu_662_p2 = (sub_ln1117_fu_656_p2 + zext_ln32_reg_1235);

assign add_ln1192_1_fu_761_p2 = (zext_ln703_2_fu_757_p1 + zext_ln728_1_fu_753_p1);

assign add_ln1192_2_fu_802_p2 = (zext_ln703_3_fu_798_p1 + zext_ln728_2_fu_794_p1);

assign add_ln1192_fu_718_p2 = (zext_ln703_fu_714_p1 + zext_ln728_fu_710_p1);

assign add_ln11_fu_1161_p2 = (indvar_flatten_reg_287 + 8'd1);

assign add_ln203_7_fu_558_p2 = (zext_ln203_15_fu_554_p1 + sub_ln203_fu_504_p2);

assign add_ln23_2_fu_366_p2 = (c_0_reg_299 + 5'd2);

assign add_ln23_3_fu_450_p2 = (select_ln32_fu_396_p3 + 5'd1);

assign add_ln23_4_fu_510_p2 = (select_ln32_fu_396_p3 + 5'd2);

assign add_ln23_5_fu_528_p2 = (select_ln32_fu_396_p3 + 5'd3);

assign add_ln23_fu_627_p2 = (zext_ln18_fu_581_p1 + select_ln32_1_reg_1219);

assign add_ln899_fu_963_p2 = ($signed(14'd16331) + $signed(trunc_ln894_fu_885_p1));

assign add_ln8_fu_378_p2 = (indvar_flatten21_reg_265 + 12'd1);

assign add_ln908_fu_1013_p2 = ($signed(32'd4294967242) + $signed(sub_ln894_reg_1352));

assign add_ln915_fu_1094_p2 = (sub_ln915_fu_1089_p2 + select_ln915_fu_1081_p3);

assign and_ln32_fu_444_p2 = (xor_ln32_fu_432_p2 & icmp_ln14_fu_438_p2);

assign and_ln899_fu_977_p2 = (xor_ln899_fu_957_p2 & p_Result_30_fu_969_p3);

assign and_ln924_fu_1150_p2 = (or_ln924_fu_1146_p2 & grp_fu_355_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_360_p2 = (c_0_reg_299 + 5'd1);

assign conv_1_bias_V_address0 = zext_ln23_reg_1250;

assign conv_1_weights_V_0_address0 = sext_ln1116_fu_620_p1;

assign conv_1_weights_V_1_address0 = sext_ln1116_fu_620_p1;

assign conv_1_weights_V_2_address0 = sext_ln1116_fu_620_p1;

assign conv_out_V_address0 = conv_out_V_addr_reg_1260;

assign conv_out_V_d0 = ap_phi_mux_storemerge_phi_fu_347_p4;

assign f_fu_1156_p2 = (select_ln32_4_reg_1225 + 3'd1);

assign grp_fu_1174_p0 = grp_fu_1174_p00;

assign grp_fu_1174_p00 = select_ln32_1_fu_404_p3;

assign grp_fu_1174_p1 = 10'd26;

assign grp_fu_1174_p2 = grp_fu_1174_p20;

assign grp_fu_1174_p20 = select_ln32_5_fu_470_p3;

assign grp_fu_355_p0 = p_Result_34_fu_1107_p5;

assign icmp_ln11_fu_390_p2 = ((indvar_flatten_reg_287 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_438_p2 = ((f_0_reg_310 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_569_p2 = ((ap_phi_mux_wr_0_phi_fu_337_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_828_p2 = ((tmp_V_8_fu_822_p2 == 14'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_2_fu_937_p2 = ((p_Result_29_fu_931_p2 != 14'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_fu_905_p2 = (($signed(tmp_17_fu_895_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_372_p2 = ((indvar_flatten21_reg_265 == 12'd4056) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_997_p2 = (($signed(lsb_index_fu_889_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln924_2_fu_1140_p2 = ((trunc_ln7_fu_1124_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln924_fu_1134_p2 = ((add_ln915_fu_1094_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign input_V_address1 = sext_ln1117_1_fu_677_p1;


always @ (p_Result_33_fu_863_p3) begin
    if (p_Result_33_fu_863_p3[0] == 1'b1) begin
        l_fu_871_p3 = 32'd0;
    end else if (p_Result_33_fu_863_p3[1] == 1'b1) begin
        l_fu_871_p3 = 32'd1;
    end else if (p_Result_33_fu_863_p3[2] == 1'b1) begin
        l_fu_871_p3 = 32'd2;
    end else if (p_Result_33_fu_863_p3[3] == 1'b1) begin
        l_fu_871_p3 = 32'd3;
    end else if (p_Result_33_fu_863_p3[4] == 1'b1) begin
        l_fu_871_p3 = 32'd4;
    end else if (p_Result_33_fu_863_p3[5] == 1'b1) begin
        l_fu_871_p3 = 32'd5;
    end else if (p_Result_33_fu_863_p3[6] == 1'b1) begin
        l_fu_871_p3 = 32'd6;
    end else if (p_Result_33_fu_863_p3[7] == 1'b1) begin
        l_fu_871_p3 = 32'd7;
    end else if (p_Result_33_fu_863_p3[8] == 1'b1) begin
        l_fu_871_p3 = 32'd8;
    end else if (p_Result_33_fu_863_p3[9] == 1'b1) begin
        l_fu_871_p3 = 32'd9;
    end else if (p_Result_33_fu_863_p3[10] == 1'b1) begin
        l_fu_871_p3 = 32'd10;
    end else if (p_Result_33_fu_863_p3[11] == 1'b1) begin
        l_fu_871_p3 = 32'd11;
    end else if (p_Result_33_fu_863_p3[12] == 1'b1) begin
        l_fu_871_p3 = 32'd12;
    end else if (p_Result_33_fu_863_p3[13] == 1'b1) begin
        l_fu_871_p3 = 32'd13;
    end else if (p_Result_33_fu_863_p3[14] == 1'b1) begin
        l_fu_871_p3 = 32'd14;
    end else if (p_Result_33_fu_863_p3[15] == 1'b1) begin
        l_fu_871_p3 = 32'd15;
    end else if (p_Result_33_fu_863_p3[16] == 1'b1) begin
        l_fu_871_p3 = 32'd16;
    end else if (p_Result_33_fu_863_p3[17] == 1'b1) begin
        l_fu_871_p3 = 32'd17;
    end else if (p_Result_33_fu_863_p3[18] == 1'b1) begin
        l_fu_871_p3 = 32'd18;
    end else if (p_Result_33_fu_863_p3[19] == 1'b1) begin
        l_fu_871_p3 = 32'd19;
    end else if (p_Result_33_fu_863_p3[20] == 1'b1) begin
        l_fu_871_p3 = 32'd20;
    end else if (p_Result_33_fu_863_p3[21] == 1'b1) begin
        l_fu_871_p3 = 32'd21;
    end else if (p_Result_33_fu_863_p3[22] == 1'b1) begin
        l_fu_871_p3 = 32'd22;
    end else if (p_Result_33_fu_863_p3[23] == 1'b1) begin
        l_fu_871_p3 = 32'd23;
    end else if (p_Result_33_fu_863_p3[24] == 1'b1) begin
        l_fu_871_p3 = 32'd24;
    end else if (p_Result_33_fu_863_p3[25] == 1'b1) begin
        l_fu_871_p3 = 32'd25;
    end else if (p_Result_33_fu_863_p3[26] == 1'b1) begin
        l_fu_871_p3 = 32'd26;
    end else if (p_Result_33_fu_863_p3[27] == 1'b1) begin
        l_fu_871_p3 = 32'd27;
    end else if (p_Result_33_fu_863_p3[28] == 1'b1) begin
        l_fu_871_p3 = 32'd28;
    end else if (p_Result_33_fu_863_p3[29] == 1'b1) begin
        l_fu_871_p3 = 32'd29;
    end else if (p_Result_33_fu_863_p3[30] == 1'b1) begin
        l_fu_871_p3 = 32'd30;
    end else if (p_Result_33_fu_863_p3[31] == 1'b1) begin
        l_fu_871_p3 = 32'd31;
    end else begin
        l_fu_871_p3 = 32'd32;
    end
end

assign lsb_index_fu_889_p2 = ($signed(32'd4294967243) + $signed(sub_ln894_fu_879_p2));

assign lshr_ln897_fu_925_p2 = 14'd16383 >> zext_ln897_fu_921_p1;

assign lshr_ln908_fu_1018_p2 = zext_ln907_2_fu_1010_p1 >> add_ln908_fu_1013_p2;

assign m_11_fu_1069_p1 = m_s_fu_1059_p4;

assign m_7_fu_1043_p3 = ((icmp_ln908_reg_1363[0:0] === 1'b1) ? zext_ln908_fu_1024_p1 : shl_ln908_fu_1037_p2);

assign m_8_fu_1053_p2 = (zext_ln911_fu_1050_p1 + m_7_fu_1043_p3);

assign m_fu_1007_p1 = tmp_V_9_reg_1346;

assign m_s_fu_1059_p4 = {{m_8_fu_1053_p2[63:1]}};

assign or_ln32_fu_456_p2 = (icmp_ln11_fu_390_p2 | and_ln32_fu_444_p2);

assign or_ln899_fu_983_p2 = (and_ln899_fu_977_p2 | a_fu_943_p2);

assign or_ln924_fu_1146_p2 = (icmp_ln924_reg_1378 | icmp_ln924_2_reg_1383);

assign or_ln_fu_989_p3 = {{31'd0}, {or_ln899_fu_983_p2}};

assign p_Result_29_fu_931_p2 = (tmp_V_9_fu_846_p3 & lshr_ln897_fu_925_p2);

assign p_Result_30_fu_969_p3 = tmp_V_9_fu_846_p3[add_ln899_fu_963_p2];

assign p_Result_32_fu_834_p3 = tmp_V_8_reg_1329[32'd13];

assign p_Result_33_fu_863_p3 = {{18'd262143}, {p_Result_s_fu_853_p4}};

assign p_Result_34_fu_1107_p5 = {{tmp_8_fu_1100_p3}, {m_11_fu_1069_p1[51:0]}};

integer ap_tvar_int_0;

always @ (tmp_V_9_fu_846_p3) begin
    for (ap_tvar_int_0 = 14 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 13 - 0) begin
            p_Result_s_fu_853_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_853_p4[ap_tvar_int_0] = tmp_V_9_fu_846_p3[13 - ap_tvar_int_0];
        end
    end
end

assign p_shl_cast_fu_486_p3 = {{grp_fu_1174_p3}, {3'd0}};

assign r_fu_384_p2 = (r_0_reg_276 + 5'd1);

assign select_ln11_fu_1167_p3 = ((icmp_ln11_reg_1214[0:0] === 1'b1) ? 8'd1 : add_ln11_fu_1161_p2);

assign select_ln32_1_fu_404_p3 = ((icmp_ln11_fu_390_p2[0:0] === 1'b1) ? r_fu_384_p2 : r_0_reg_276);

assign select_ln32_2_fu_416_p3 = ((icmp_ln11_fu_390_p2[0:0] === 1'b1) ? 5'd1 : c_fu_360_p2);

assign select_ln32_3_fu_424_p3 = ((icmp_ln11_fu_390_p2[0:0] === 1'b1) ? 5'd2 : add_ln23_2_fu_366_p2);

assign select_ln32_4_fu_462_p3 = ((or_ln32_fu_456_p2[0:0] === 1'b1) ? 3'd0 : f_0_reg_310);

assign select_ln32_5_fu_470_p3 = ((and_ln32_fu_444_p2[0:0] === 1'b1) ? add_ln23_3_fu_450_p2 : select_ln32_fu_396_p3);

assign select_ln32_6_fu_516_p3 = ((and_ln32_fu_444_p2[0:0] === 1'b1) ? add_ln23_4_fu_510_p2 : select_ln32_2_fu_416_p3);

assign select_ln32_7_fu_534_p3 = ((and_ln32_fu_444_p2[0:0] === 1'b1) ? add_ln23_5_fu_528_p2 : select_ln32_3_fu_424_p3);

assign select_ln32_fu_396_p3 = ((icmp_ln11_fu_390_p2[0:0] === 1'b1) ? 5'd0 : c_0_reg_299);

assign select_ln915_fu_1081_p3 = ((tmp_19_fu_1073_p3[0:0] === 1'b1) ? 11'd1023 : 11'd1022);

assign sext_ln1116_fu_620_p1 = $signed(add_ln1116_fu_615_p2);

assign sext_ln1117_1_fu_677_p1 = $signed(add_ln1117_2_fu_672_p2);

assign sext_ln1117_fu_667_p1 = $signed(add_ln1117_fu_662_p2);

assign sext_ln1118_2_fu_699_p1 = mul_ln1118_fu_1184_p2;

assign sext_ln1118_4_fu_732_p1 = mul_ln1118_1_fu_1191_p2;

assign sext_ln1118_6_fu_784_p1 = mul_ln1118_2_fu_1198_p2;

assign sext_ln1265_fu_818_p1 = $signed(conv_1_bias_V_q0);

assign shl_ln728_1_fu_745_p3 = {{tmp_11_fu_735_p4}, {8'd0}};

assign shl_ln728_2_fu_787_p3 = {{tmp_12_reg_1314}, {8'd0}};

assign shl_ln908_fu_1037_p2 = m_fu_1007_p1 << zext_ln908_2_fu_1033_p1;

assign shl_ln_fu_702_p3 = {{p_Val2_s_reg_321}, {8'd0}};

assign sub_ln1116_fu_609_p2 = (zext_ln1116_fu_593_p1 - zext_ln1116_8_fu_605_p1);

assign sub_ln1117_fu_656_p2 = (zext_ln1117_fu_640_p1 - zext_ln1117_5_fu_652_p1);

assign sub_ln203_fu_504_p2 = (p_shl_cast_fu_486_p3 - zext_ln203_13_fu_500_p1);

assign sub_ln894_fu_879_p2 = (32'd14 - l_fu_871_p3);

assign sub_ln897_fu_915_p2 = (4'd4 - trunc_ln897_fu_911_p1);

assign sub_ln908_fu_1028_p2 = (32'd54 - sub_ln894_reg_1352);

assign sub_ln915_fu_1089_p2 = (11'd6 - trunc_ln893_reg_1368);

assign tmp_10_fu_644_p3 = {{add_ln23_fu_627_p2}, {2'd0}};

assign tmp_11_fu_735_p4 = {{add_ln1192_fu_718_p2[21:8]}};

assign tmp_17_fu_895_p4 = {{lsb_index_fu_889_p2[31:1]}};

assign tmp_18_fu_949_p3 = lsb_index_fu_889_p2[32'd31];

assign tmp_19_fu_1073_p3 = m_8_fu_1053_p2[32'd54];

assign tmp_7_fu_597_p3 = {{ap_phi_mux_wr_0_phi_fu_337_p4}, {1'd0}};

assign tmp_8_fu_1100_p3 = {{p_Result_32_reg_1341}, {add_ln915_fu_1094_p2}};

assign tmp_9_fu_632_p3 = {{add_ln23_fu_627_p2}, {5'd0}};

assign tmp_V_8_fu_822_p2 = ($signed(sext_ln1265_fu_818_p1) + $signed(p_Val2_s_reg_321));

assign tmp_V_9_fu_846_p3 = ((p_Result_32_fu_834_p3[0:0] === 1'b1) ? tmp_V_fu_841_p2 : tmp_V_8_reg_1329);

assign tmp_V_fu_841_p2 = (14'd0 - tmp_V_8_reg_1329);

assign tmp_fu_493_p3 = {{grp_fu_1174_p3}, {1'd0}};

assign tmp_s_fu_585_p3 = {{ap_phi_mux_wr_0_phi_fu_337_p4}, {3'd0}};

assign trunc_ln7_fu_1124_p4 = {{m_8_fu_1053_p2[52:1]}};

assign trunc_ln893_fu_1003_p1 = l_fu_871_p3[10:0];

assign trunc_ln894_fu_885_p1 = sub_ln894_fu_879_p2[13:0];

assign trunc_ln897_fu_911_p1 = sub_ln894_fu_879_p2[3:0];

assign wr_fu_575_p2 = (ap_phi_mux_wr_0_phi_fu_337_p4 + 2'd1);

assign xor_ln32_fu_432_p2 = (icmp_ln11_fu_390_p2 ^ 1'd1);

assign xor_ln899_fu_957_p2 = (tmp_18_fu_949_p3 ^ 1'd1);

assign zext_ln1116_8_fu_605_p1 = tmp_7_fu_597_p3;

assign zext_ln1116_fu_593_p1 = tmp_s_fu_585_p3;

assign zext_ln1117_5_fu_652_p1 = tmp_10_fu_644_p3;

assign zext_ln1117_6_fu_687_p1 = add_ln1117_3_reg_1299;

assign zext_ln1117_fu_640_p1 = tmp_9_fu_632_p3;

assign zext_ln18_fu_581_p1 = ap_phi_mux_wr_0_phi_fu_337_p4;

assign zext_ln203_13_fu_500_p1 = tmp_fu_493_p3;

assign zext_ln203_14_fu_550_p1 = select_ln32_4_fu_462_p3;

assign zext_ln203_15_fu_554_p1 = select_ln32_4_fu_462_p3;

assign zext_ln203_16_fu_564_p1 = add_ln203_7_fu_558_p2;

assign zext_ln23_fu_546_p1 = select_ln32_4_fu_462_p3;

assign zext_ln32_2_fu_524_p1 = select_ln32_6_fu_516_p3;

assign zext_ln32_3_fu_542_p1 = select_ln32_7_fu_534_p3;

assign zext_ln32_fu_478_p1 = select_ln32_5_fu_470_p3;

assign zext_ln703_2_fu_757_p1 = $unsigned(sext_ln1118_4_fu_732_p1);

assign zext_ln703_3_fu_798_p1 = $unsigned(sext_ln1118_6_fu_784_p1);

assign zext_ln703_fu_714_p1 = $unsigned(sext_ln1118_2_fu_699_p1);

assign zext_ln728_1_fu_753_p1 = shl_ln728_1_fu_745_p3;

assign zext_ln728_2_fu_794_p1 = shl_ln728_2_fu_787_p3;

assign zext_ln728_fu_710_p1 = shl_ln_fu_702_p3;

assign zext_ln897_fu_921_p1 = sub_ln897_fu_915_p2;

assign zext_ln907_2_fu_1010_p1 = tmp_V_9_reg_1346;

assign zext_ln908_2_fu_1033_p1 = sub_ln908_fu_1028_p2;

assign zext_ln908_fu_1024_p1 = lshr_ln908_fu_1018_p2;

assign zext_ln911_fu_1050_p1 = or_ln_reg_1358;

always @ (posedge ap_clk) begin
    zext_ln32_reg_1235[10:5] <= 6'b000000;
    zext_ln32_2_reg_1240[10:5] <= 6'b000000;
    zext_ln32_3_reg_1245[10:5] <= 6'b000000;
    zext_ln23_reg_1250[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln203_14_reg_1255[5:3] <= 3'b000;
    or_ln_reg_1358[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //conv_1
