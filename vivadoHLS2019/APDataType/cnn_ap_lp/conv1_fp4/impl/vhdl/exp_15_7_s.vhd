-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exp_15_7_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (14 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of exp_15_7_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv22_3FFFFF : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111111111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv15_3FFF : STD_LOGIC_VECTOR (14 downto 0) := "011111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_lsb_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_lsb_table_V_ce0 : STD_LOGIC;
    signal f_x_lsb_table_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal exp_x_msb_2_m_1_tabl_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal exp_x_msb_2_m_1_tabl_ce0 : STD_LOGIC;
    signal exp_x_msb_2_m_1_tabl_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_185_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_621 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_621_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_52_reg_627 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln612_1_fu_343_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln612_1_reg_632 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln194_7_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_7_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_7_reg_648_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_x_msb_2_lsb_m_1_s_fu_481_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_2_lsb_m_1_s_reg_653 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_l_V_fu_159_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_15_fu_163_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln612_fu_173_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln612_fu_173_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_185_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_l_V_fu_159_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_fu_193_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_207_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_221_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_291_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_163_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_16_fu_177_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1498_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_52_fu_323_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_fu_333_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln612_1_fu_343_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_1_fu_347_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_fu_333_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln191_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_1_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_2_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_3_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_1_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_4_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_5_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_7_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln194_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_4_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_6_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_5_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_3_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_6_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_2_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_419_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_fu_436_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_fu_436_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_5_fu_436_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal f_x_msb_2_lsb_s_V_fu_442_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_fu_456_p5 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_fu_452_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln728_fu_467_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_fu_471_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln703_fu_477_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_17_fu_413_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln195_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_512_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_6_fu_512_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_6_fu_512_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_lo_s_V_fu_518_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal y_l_V_fu_528_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln195_fu_497_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal y_V_fu_534_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_14_fu_544_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_3_fu_551_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln255_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_567_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_581_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln255_1_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln255_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln255_1_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_603_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_5_fu_436_p00 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_5_fu_436_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_6_fu_512_p00 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_6_fu_512_p10 : STD_LOGIC_VECTOR (49 downto 0);

    component exp_15_7_s_f_x_lsrcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component exp_15_7_s_exp_x_sc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component exp_15_7_s_exp_x_tde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    f_x_lsb_table_V_U : component exp_15_7_s_f_x_lsrcU
    generic map (
        DataWidth => 11,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_lsb_table_V_address0,
        ce0 => f_x_lsb_table_V_ce0,
        q0 => f_x_lsb_table_V_q0);

    exp_x_msb_2_m_1_tabl_U : component exp_15_7_s_exp_x_sc4
    generic map (
        DataWidth => 25,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_2_m_1_tabl_address0,
        ce0 => exp_x_msb_2_m_1_tabl_ce0,
        q0 => exp_x_msb_2_m_1_tabl_q0);

    exp_x_msb_1_table_V_U : component exp_15_7_s_exp_x_tde
    generic map (
        DataWidth => 25,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln194_7_reg_648 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_x_msb_2_lsb_m_1_s_reg_653 <= exp_x_msb_2_lsb_m_1_s_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln194_7_reg_648 <= or_ln194_7_fu_407_p2;
                or_ln194_7_reg_648_pp0_iter1_reg <= or_ln194_7_reg_648;
                p_Result_s_52_reg_627 <= p_Result_s_52_fu_323_p1(10 downto 7);
                tmp_reg_621 <= tmp_fu_185_p1(14 downto 14);
                tmp_reg_621_pp0_iter1_reg <= tmp_reg_621;
                trunc_ln612_1_reg_632 <= trunc_ln612_1_fu_343_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln194_fu_317_p2 <= (icmp_ln1498_fu_305_p2 and icmp_ln1494_fu_311_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv15_3FFF when (or_ln255_1_fu_597_p2(0) = '1') else 
        tmp_s_fu_603_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln544_2_fu_487_p1(5 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_2_lsb_m_1_s_fu_481_p2 <= std_logic_vector(unsigned(zext_ln703_fu_477_p1) + unsigned(exp_x_msb_2_m_1_tabl_q0));
    exp_x_msb_2_m_1_tabl_address0 <= zext_ln544_1_fu_360_p1(5 - 1 downto 0);

    exp_x_msb_2_m_1_tabl_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_x_msb_2_m_1_tabl_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_2_m_1_tabl_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_lsb_table_V_address0 <= zext_ln544_fu_355_p1(5 - 1 downto 0);

    f_x_lsb_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_lsb_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_lsb_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_2_lsb_s_V_fu_442_p4 <= r_V_5_fu_436_p2(42 downto 24);
    icmp_ln1494_fu_311_p2 <= "1" when (unsigned(p_Result_16_fu_177_p3) > unsigned(ap_const_lv11_500)) else "0";
    icmp_ln1498_fu_305_p2 <= "1" when (p_Result_15_fu_163_p4 = ap_const_lv4_7) else "0";
    icmp_ln255_1_fu_591_p2 <= "0" when (tmp_5_fu_581_p4 = ap_const_lv2_0) else "1";
    icmp_ln255_fu_561_p2 <= "0" when (tmp_3_fu_551_p4 = ap_const_lv2_0) else "1";
    lhs_V_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_2_lsb_s_V_fu_442_p4),20));
    or_ln194_1_fu_371_p2 <= (xor_ln191_3_fu_243_p2 or xor_ln191_2_fu_229_p2);
    or_ln194_2_fu_377_p2 <= (or_ln194_fu_365_p2 or or_ln194_1_fu_371_p2);
    or_ln194_3_fu_383_p2 <= (xor_ln191_5_fu_271_p2 or xor_ln191_4_fu_257_p2);
    or_ln194_4_fu_389_p2 <= (xor_ln191_7_fu_299_p2 or and_ln194_fu_317_p2);
    or_ln194_5_fu_395_p2 <= (xor_ln191_6_fu_285_p2 or or_ln194_4_fu_389_p2);
    or_ln194_6_fu_401_p2 <= (or_ln194_5_fu_395_p2 or or_ln194_3_fu_383_p2);
    or_ln194_7_fu_407_p2 <= (or_ln194_6_fu_401_p2 or or_ln194_2_fu_377_p2);
    or_ln194_fu_365_p2 <= (xor_ln191_fu_201_p2 or xor_ln191_1_fu_215_p2);
    or_ln255_1_fu_597_p2 <= (or_ln255_fu_575_p2 or icmp_ln255_1_fu_591_p2);
    or_ln255_fu_575_p2 <= (tmp_4_fu_567_p3 or icmp_ln255_fu_561_p2);
    p_Result_15_fu_163_p1 <= x_V;
    p_Result_15_fu_163_p4 <= p_Result_15_fu_163_p1(11 downto 8);
    p_Result_16_fu_177_p3 <= (trunc_ln612_fu_173_p1 & ap_const_lv3_0);
    p_Result_17_fu_413_p3 <= (tmp_reg_621 & p_Result_s_52_reg_627);
    p_Result_18_fu_419_p4 <= ((trunc_ln612_1_reg_632 & ap_const_lv5_0) & f_x_lsb_table_V_q0);
    p_Result_1_fu_207_p3 <= x_l_V_fu_159_p1(12 downto 12);
    p_Result_2_fu_221_p3 <= x_l_V_fu_159_p1(13 downto 13);
    p_Result_3_fu_235_p3 <= x_l_V_fu_159_p1(14 downto 14);
    p_Result_4_fu_249_p3 <= x_l_V_fu_159_p1(15 downto 15);
    p_Result_5_fu_263_p3 <= x_l_V_fu_159_p1(16 downto 16);
    p_Result_6_fu_277_p3 <= x_l_V_fu_159_p1(17 downto 17);
    p_Result_7_fu_291_p3 <= x_l_V_fu_159_p1(18 downto 18);
    p_Result_s_52_fu_323_p1 <= x_V;
    p_Result_s_fu_193_p3 <= x_l_V_fu_159_p1(11 downto 11);
    p_Val2_14_fu_544_p3 <= 
        select_ln195_fu_497_p3 when (or_ln194_7_reg_648_pp0_iter1_reg(0) = '1') else 
        y_V_fu_534_p4;
    r_V_5_fu_436_p0 <= r_V_5_fu_436_p00(18 - 1 downto 0);
    r_V_5_fu_436_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_18_fu_419_p4),43));
    r_V_5_fu_436_p1 <= r_V_5_fu_436_p10(25 - 1 downto 0);
    r_V_5_fu_436_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_m_1_tabl_q0),43));
    r_V_5_fu_436_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_fu_436_p0) * unsigned(r_V_5_fu_436_p1), 43));
    r_V_6_fu_512_p0 <= r_V_6_fu_512_p00(25 - 1 downto 0);
    r_V_6_fu_512_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_table_V_q0),50));
    r_V_6_fu_512_p1 <= r_V_6_fu_512_p10(25 - 1 downto 0);
    r_V_6_fu_512_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_lsb_m_1_s_reg_653),50));
    r_V_6_fu_512_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_6_fu_512_p0) * unsigned(r_V_6_fu_512_p1), 50));
    ret_V_fu_471_p2 <= std_logic_vector(unsigned(lhs_V_fu_452_p1) + unsigned(zext_ln728_fu_467_p1));
    rhs_V_fu_456_p5 <= (((trunc_ln612_1_reg_632 & ap_const_lv5_0) & f_x_lsb_table_V_q0) & ap_const_lv1_0);
    select_ln195_fu_497_p3 <= 
        ap_const_lv22_3FFFFF when (xor_ln195_fu_492_p2(0) = '1') else 
        ap_const_lv22_0;
    tmp_3_fu_551_p4 <= p_Val2_14_fu_544_p3(21 downto 20);
    tmp_4_fu_567_p3 <= p_Val2_14_fu_544_p3(19 downto 19);
    tmp_5_fu_581_p4 <= p_Val2_14_fu_544_p3(18 downto 17);
    tmp_V_1_fu_347_p3 <= (trunc_ln612_1_fu_343_p1 & ap_const_lv3_0);
    tmp_V_fu_333_p1 <= x_V;
    tmp_V_fu_333_p4 <= tmp_V_fu_333_p1(6 downto 2);
    tmp_fu_185_p1 <= x_V;
    tmp_fu_185_p3 <= tmp_fu_185_p1(14 downto 14);
    tmp_s_fu_603_p4 <= p_Val2_14_fu_544_p3(17 downto 3);
    trunc_ln612_1_fu_343_p0 <= x_V;
    trunc_ln612_1_fu_343_p1 <= trunc_ln612_1_fu_343_p0(2 - 1 downto 0);
    trunc_ln612_fu_173_p0 <= x_V;
    trunc_ln612_fu_173_p1 <= trunc_ln612_fu_173_p0(8 - 1 downto 0);
    x_l_V_fu_159_p0 <= x_V;
        x_l_V_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_l_V_fu_159_p0),23));

    xor_ln191_1_fu_215_p2 <= (tmp_fu_185_p3 xor p_Result_1_fu_207_p3);
    xor_ln191_2_fu_229_p2 <= (tmp_fu_185_p3 xor p_Result_2_fu_221_p3);
    xor_ln191_3_fu_243_p2 <= (tmp_fu_185_p3 xor p_Result_3_fu_235_p3);
    xor_ln191_4_fu_257_p2 <= (tmp_fu_185_p3 xor p_Result_4_fu_249_p3);
    xor_ln191_5_fu_271_p2 <= (tmp_fu_185_p3 xor p_Result_5_fu_263_p3);
    xor_ln191_6_fu_285_p2 <= (tmp_fu_185_p3 xor p_Result_6_fu_277_p3);
    xor_ln191_7_fu_299_p2 <= (tmp_fu_185_p3 xor p_Result_7_fu_291_p3);
    xor_ln191_fu_201_p2 <= (tmp_fu_185_p3 xor p_Result_s_fu_193_p3);
    xor_ln195_fu_492_p2 <= (tmp_reg_621_pp0_iter1_reg xor ap_const_lv1_1);
    y_V_fu_534_p4 <= y_l_V_fu_528_p2(24 downto 3);
    y_l_V_fu_528_p2 <= std_logic_vector(unsigned(y_lo_s_V_fu_518_p4) + unsigned(exp_x_msb_1_table_V_q0));
    y_lo_s_V_fu_518_p4 <= r_V_6_fu_512_p2(49 downto 25);
    zext_ln544_1_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_333_p4),64));
    zext_ln544_2_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_17_fu_413_p3),64));
    zext_ln544_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_fu_347_p3),64));
    zext_ln703_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_471_p2),25));
    zext_ln728_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_fu_456_p5),20));
end behav;
