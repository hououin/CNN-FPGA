// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        input_0_V_address1,
        input_0_V_ce1,
        input_0_V_q1,
        input_1_V_address0,
        input_1_V_ce0,
        input_1_V_q0,
        input_1_V_address1,
        input_1_V_ce1,
        input_1_V_q1,
        conv_out_V_address0,
        conv_out_V_ce0,
        conv_out_V_we0,
        conv_out_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state10 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_0_V_address0;
output   input_0_V_ce0;
input  [13:0] input_0_V_q0;
output  [8:0] input_0_V_address1;
output   input_0_V_ce1;
input  [13:0] input_0_V_q1;
output  [8:0] input_1_V_address0;
output   input_1_V_ce0;
input  [13:0] input_1_V_q0;
output  [8:0] input_1_V_address1;
output   input_1_V_ce1;
input  [13:0] input_1_V_q1;
output  [11:0] conv_out_V_address0;
output   conv_out_V_ce0;
output   conv_out_V_we0;
output  [13:0] conv_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] input_0_V_address0;
reg input_0_V_ce0;
reg[8:0] input_0_V_address1;
reg input_0_V_ce1;
reg[8:0] input_1_V_address0;
reg input_1_V_ce0;
reg[8:0] input_1_V_address1;
reg input_1_V_ce1;
reg conv_out_V_ce0;
reg conv_out_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] conv_1_weights_V_0_0_address0;
reg    conv_1_weights_V_0_0_ce0;
wire   [7:0] conv_1_weights_V_0_0_q0;
wire   [2:0] conv_1_weights_V_0_1_address0;
reg    conv_1_weights_V_0_1_ce0;
wire   [7:0] conv_1_weights_V_0_1_q0;
wire   [2:0] conv_1_weights_V_0_2_address0;
reg    conv_1_weights_V_0_2_ce0;
wire   [8:0] conv_1_weights_V_0_2_q0;
wire   [2:0] conv_1_weights_V_1_0_address0;
reg    conv_1_weights_V_1_0_ce0;
wire   [8:0] conv_1_weights_V_1_0_q0;
wire   [2:0] conv_1_weights_V_1_1_address0;
reg    conv_1_weights_V_1_1_ce0;
wire   [7:0] conv_1_weights_V_1_1_q0;
wire   [2:0] conv_1_weights_V_1_2_address0;
reg    conv_1_weights_V_1_2_ce0;
wire   [8:0] conv_1_weights_V_1_2_q0;
wire   [2:0] conv_1_weights_V_2_0_address0;
reg    conv_1_weights_V_2_0_ce0;
wire   [8:0] conv_1_weights_V_2_0_q0;
wire   [2:0] conv_1_weights_V_2_1_address0;
reg    conv_1_weights_V_2_1_ce0;
wire  signed [8:0] conv_1_weights_V_2_1_q0;
wire   [2:0] conv_1_weights_V_2_2_address0;
reg    conv_1_weights_V_2_2_ce0;
wire  signed [8:0] conv_1_weights_V_2_2_q0;
wire   [2:0] conv_1_bias_V_address0;
reg    conv_1_bias_V_ce0;
wire   [6:0] conv_1_bias_V_q0;
reg   [11:0] indvar_flatten39_reg_482;
reg   [4:0] r_0_reg_493;
reg   [7:0] indvar_flatten_reg_504;
reg   [4:0] c_0_reg_515;
reg   [2:0] f_0_reg_526;
wire   [0:0] icmp_ln8_fu_612_p2;
reg   [0:0] icmp_ln8_reg_1823;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln8_reg_1823_pp0_iter1_reg;
reg   [0:0] icmp_ln8_reg_1823_pp0_iter2_reg;
wire   [11:0] add_ln8_fu_618_p2;
reg   [11:0] add_ln8_reg_1827;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln11_fu_624_p2;
reg   [0:0] icmp_ln11_reg_1832;
wire   [4:0] select_ln32_1_fu_638_p3;
reg   [4:0] select_ln32_1_reg_1837;
wire   [0:0] trunc_ln32_fu_650_p1;
reg   [0:0] trunc_ln32_reg_1842;
reg   [0:0] trunc_ln32_reg_1842_pp0_iter1_reg;
wire   [3:0] select_ln32_2_fu_654_p3;
reg   [3:0] select_ln32_2_reg_1850;
wire   [3:0] select_ln32_3_fu_678_p3;
reg   [3:0] select_ln32_3_reg_1856;
reg   [3:0] zext_ln1117_2_mid2_v_reg_1862;
wire   [2:0] select_ln32_7_fu_756_p3;
reg   [2:0] select_ln32_7_reg_1868;
wire   [4:0] select_ln32_8_fu_764_p3;
reg   [4:0] select_ln32_8_reg_1874;
wire   [9:0] zext_ln32_fu_772_p1;
reg   [9:0] zext_ln32_reg_1879;
wire   [9:0] grp_fu_1756_p3;
reg   [9:0] add_ln203_reg_1886;
wire   [4:0] select_ln32_9_fu_782_p3;
reg   [4:0] select_ln32_9_reg_1892;
wire   [4:0] select_ln32_10_fu_796_p3;
reg   [4:0] select_ln32_10_reg_1897;
wire   [63:0] zext_ln23_fu_804_p1;
reg   [63:0] zext_ln23_reg_1902;
wire   [7:0] add_ln11_fu_815_p2;
reg   [7:0] add_ln11_reg_1944;
wire   [9:0] sub_ln1117_fu_843_p2;
reg   [9:0] sub_ln1117_reg_1949;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [9:0] sub_ln1117_1_fu_871_p2;
reg   [9:0] sub_ln1117_1_reg_1954;
wire   [9:0] zext_ln32_1_fu_899_p1;
reg   [9:0] zext_ln32_1_reg_1979;
reg  signed [7:0] conv_1_weights_V_0_0_2_reg_2004;
reg  signed [7:0] conv_1_weights_V_0_1_2_reg_2009;
reg  signed [8:0] conv_1_weights_V_0_2_2_reg_2014;
reg  signed [8:0] conv_1_weights_V_1_0_2_reg_2019;
reg  signed [7:0] conv_1_weights_V_1_1_2_reg_2024;
reg  signed [8:0] conv_1_weights_V_1_2_2_reg_2029;
reg  signed [8:0] conv_1_weights_V_2_0_2_reg_2034;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [9:0] add_ln1117_6_fu_989_p2;
reg   [9:0] add_ln1117_6_reg_2049;
wire   [9:0] add_ln1117_9_fu_1019_p2;
reg   [9:0] add_ln1117_9_reg_2064;
reg   [11:0] conv_out_V_addr_reg_2079;
reg   [11:0] conv_out_V_addr_reg_2079_pp0_iter1_reg;
reg   [13:0] tmp_9_reg_2084;
wire  signed [22:0] mul_ln1118_3_fu_1778_p2;
reg  signed [22:0] mul_ln1118_3_reg_2089;
wire  signed [21:0] mul_ln1118_4_fu_1784_p2;
reg  signed [21:0] mul_ln1118_4_reg_2094;
wire   [2:0] f_fu_1118_p2;
reg   [2:0] f_reg_2099;
wire   [7:0] select_ln11_fu_1123_p3;
reg   [7:0] select_ln11_reg_2104;
wire  signed [22:0] mul_ln1118_5_fu_1797_p2;
reg  signed [22:0] mul_ln1118_5_reg_2129;
reg   [13:0] tmp_12_reg_2134;
wire  signed [22:0] mul_ln1118_6_fu_1803_p2;
reg  signed [22:0] mul_ln1118_6_reg_2139;
wire   [13:0] p_Val2_28_fu_1423_p2;
reg   [13:0] p_Val2_28_reg_2159;
wire   [0:0] icmp_ln885_fu_1429_p2;
reg   [0:0] icmp_ln885_reg_2168;
wire   [0:0] p_Result_32_fu_1434_p3;
reg   [0:0] p_Result_32_reg_2172;
wire   [13:0] tmp_V_8_fu_1446_p3;
reg   [13:0] tmp_V_8_reg_2177;
wire   [31:0] sub_ln894_fu_1479_p2;
reg   [31:0] sub_ln894_reg_2183;
wire   [31:0] or_ln_fu_1589_p3;
reg   [31:0] or_ln_reg_2189;
wire   [0:0] icmp_ln908_fu_1597_p2;
reg   [0:0] icmp_ln908_reg_2194;
wire   [10:0] trunc_ln893_fu_1603_p1;
reg   [10:0] trunc_ln893_reg_2199;
wire   [0:0] icmp_ln924_fu_1734_p2;
reg   [0:0] icmp_ln924_reg_2209;
wire   [0:0] icmp_ln924_2_fu_1740_p2;
reg   [0:0] icmp_ln924_2_reg_2214;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [11:0] ap_phi_mux_indvar_flatten39_phi_fu_486_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_r_0_phi_fu_497_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_508_p4;
reg   [4:0] ap_phi_mux_c_0_phi_fu_519_p4;
reg   [2:0] ap_phi_mux_f_0_phi_fu_530_p4;
reg   [13:0] ap_phi_mux_storemerge_phi_fu_540_p4;
wire   [13:0] ap_phi_reg_pp0_iter2_storemerge_reg_537;
wire   [0:0] and_ln924_fu_1750_p2;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln1117_10_fu_882_p1;
wire   [63:0] zext_ln1117_11_fu_893_p1;
wire   [63:0] zext_ln1117_12_fu_908_p1;
wire   [63:0] zext_ln1117_13_fu_920_p1;
wire  signed [63:0] sext_ln1117_fu_959_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln1117_14_fu_1002_p1;
wire   [63:0] zext_ln1117_15_fu_1013_p1;
wire   [63:0] zext_ln203_15_fu_1034_p1;
wire  signed [63:0] sext_ln1117_1_fu_1129_p1;
wire   [63:0] zext_ln1117_16_fu_1134_p1;
wire   [63:0] grp_fu_548_p0;
reg   [0:0] grp_fu_553_p0;
reg   [0:0] grp_fu_560_p0;
wire   [4:0] r_fu_584_p2;
wire   [3:0] lshr_ln1117_1_fu_590_p4;
wire   [3:0] lshr_ln_fu_574_p4;
wire   [4:0] add_ln23_fu_662_p2;
wire   [3:0] lshr_ln1117_1_mid1_fu_668_p4;
wire   [4:0] select_ln32_4_fu_686_p3;
wire   [4:0] add_ln32_fu_694_p2;
wire   [4:0] c_fu_600_p2;
wire   [4:0] add_ln23_1_fu_606_p2;
wire   [0:0] icmp_ln14_fu_732_p2;
wire   [0:0] xor_ln32_fu_726_p2;
wire   [4:0] select_ln32_fu_630_p3;
wire   [0:0] and_ln32_fu_738_p2;
wire   [0:0] or_ln32_fu_750_p2;
wire   [4:0] add_ln23_3_fu_744_p2;
wire   [4:0] add_ln23_4_fu_776_p2;
wire   [4:0] select_ln32_5_fu_710_p3;
wire   [4:0] add_ln23_5_fu_790_p2;
wire   [4:0] select_ln32_6_fu_718_p3;
wire   [8:0] tmp_fu_821_p3;
wire   [5:0] tmp_16_fu_832_p3;
wire   [9:0] zext_ln1117_fu_828_p1;
wire   [9:0] zext_ln1117_5_fu_839_p1;
wire   [8:0] tmp_17_fu_849_p3;
wire   [5:0] tmp_18_fu_860_p3;
wire   [9:0] zext_ln1117_6_fu_856_p1;
wire   [9:0] zext_ln1117_7_fu_867_p1;
wire   [9:0] add_ln1117_fu_877_p2;
wire   [9:0] add_ln1117_2_fu_888_p2;
wire   [9:0] add_ln1117_4_fu_902_p2;
wire   [9:0] add_ln1117_5_fu_914_p2;
wire   [8:0] tmp_s_fu_926_p3;
wire   [5:0] tmp_6_fu_937_p3;
wire   [9:0] zext_ln1117_8_fu_933_p1;
wire   [9:0] zext_ln1117_9_fu_944_p1;
wire   [9:0] sub_ln1117_2_fu_948_p2;
wire   [9:0] add_ln1117_3_fu_954_p2;
wire   [10:0] tmp_19_fu_972_p3;
wire   [12:0] p_shl_cast_fu_965_p3;
wire   [12:0] zext_ln203_13_fu_979_p1;
wire   [9:0] zext_ln32_2_fu_994_p1;
wire   [9:0] add_ln1117_7_fu_997_p2;
wire   [9:0] add_ln1117_8_fu_1008_p2;
wire   [12:0] sub_ln203_fu_983_p2;
wire   [12:0] zext_ln203_14_fu_1025_p1;
wire   [12:0] add_ln203_7_fu_1028_p2;
wire  signed [13:0] grp_fu_553_p3;
wire  signed [13:0] grp_fu_560_p3;
wire  signed [21:0] mul_ln1118_1_fu_1771_p2;
wire  signed [21:0] mul_ln1118_fu_1764_p2;
wire   [13:0] tmp_8_fu_1056_p4;
wire   [21:0] shl_ln_fu_1065_p3;
wire  signed [22:0] sext_ln1118_3_fu_1053_p1;
wire   [23:0] zext_ln1192_fu_1077_p1;
wire   [23:0] zext_ln703_fu_1073_p1;
wire   [23:0] add_ln1192_fu_1081_p2;
wire  signed [13:0] grp_fu_567_p3;
wire  signed [13:0] select_ln1117_4_fu_1107_p3;
wire  signed [22:0] mul_ln1118_2_fu_1790_p2;
wire   [21:0] shl_ln728_1_fu_1149_p3;
wire  signed [23:0] sext_ln1118_5_fu_1146_p1;
wire   [24:0] zext_ln1192_1_fu_1160_p1;
wire   [24:0] zext_ln703_2_fu_1156_p1;
wire   [24:0] add_ln1192_1_fu_1164_p2;
wire   [13:0] tmp_10_fu_1173_p4;
wire   [21:0] shl_ln728_2_fu_1183_p3;
wire  signed [23:0] sext_ln1118_7_fu_1170_p1;
wire   [24:0] zext_ln1192_2_fu_1195_p1;
wire   [24:0] zext_ln703_3_fu_1191_p1;
wire   [24:0] add_ln1192_2_fu_1199_p2;
wire   [13:0] tmp_11_fu_1208_p4;
wire   [21:0] shl_ln728_3_fu_1218_p3;
wire  signed [22:0] sext_ln1118_9_fu_1205_p1;
wire   [23:0] zext_ln1192_3_fu_1230_p1;
wire   [23:0] zext_ln703_4_fu_1226_p1;
wire   [23:0] add_ln1192_3_fu_1234_p2;
wire   [21:0] shl_ln728_4_fu_1267_p3;
wire  signed [23:0] sext_ln1118_11_fu_1264_p1;
wire   [24:0] zext_ln1192_4_fu_1278_p1;
wire   [24:0] zext_ln703_5_fu_1274_p1;
wire   [24:0] add_ln1192_4_fu_1282_p2;
wire   [13:0] tmp_13_fu_1291_p4;
wire   [21:0] shl_ln728_5_fu_1301_p3;
wire  signed [23:0] sext_ln1118_13_fu_1288_p1;
wire   [24:0] zext_ln1192_5_fu_1313_p1;
wire   [24:0] zext_ln703_6_fu_1309_p1;
wire  signed [22:0] mul_ln1118_7_fu_1809_p2;
wire   [24:0] add_ln1192_5_fu_1317_p2;
wire   [13:0] tmp_14_fu_1334_p4;
wire   [21:0] shl_ln728_6_fu_1344_p3;
wire  signed [23:0] sext_ln1118_15_fu_1331_p1;
wire   [24:0] zext_ln1192_6_fu_1356_p1;
wire   [24:0] zext_ln703_7_fu_1352_p1;
wire  signed [22:0] mul_ln1118_8_fu_1816_p2;
wire   [24:0] add_ln1192_6_fu_1360_p2;
wire   [13:0] tmp_15_fu_1377_p4;
wire   [21:0] shl_ln728_7_fu_1387_p3;
wire  signed [23:0] sext_ln1118_17_fu_1374_p1;
wire   [24:0] zext_ln1192_7_fu_1399_p1;
wire   [24:0] zext_ln703_8_fu_1395_p1;
wire   [24:0] add_ln1192_7_fu_1403_p2;
wire   [13:0] trunc_ln708_8_fu_1409_p4;
wire  signed [13:0] sext_ln1265_fu_1419_p1;
wire   [13:0] tmp_V_fu_1441_p2;
reg   [13:0] p_Result_s_fu_1453_p4;
wire   [31:0] p_Result_33_fu_1463_p3;
reg   [31:0] l_fu_1471_p3;
wire   [31:0] lsb_index_fu_1489_p2;
wire   [30:0] tmp_21_fu_1495_p4;
wire   [3:0] trunc_ln897_fu_1511_p1;
wire   [3:0] sub_ln897_fu_1515_p2;
wire   [13:0] zext_ln897_fu_1521_p1;
wire   [13:0] lshr_ln897_fu_1525_p2;
wire   [13:0] p_Result_29_fu_1531_p2;
wire   [0:0] icmp_ln897_fu_1505_p2;
wire   [0:0] icmp_ln897_2_fu_1537_p2;
wire   [0:0] tmp_22_fu_1549_p3;
wire   [13:0] trunc_ln894_fu_1485_p1;
wire   [13:0] add_ln899_fu_1563_p2;
wire   [0:0] p_Result_30_fu_1569_p3;
wire   [0:0] xor_ln899_fu_1557_p2;
wire   [0:0] and_ln899_fu_1577_p2;
wire   [0:0] a_fu_1543_p2;
wire   [0:0] or_ln899_fu_1583_p2;
wire   [31:0] zext_ln907_2_fu_1610_p1;
wire   [31:0] add_ln908_fu_1613_p2;
wire   [31:0] lshr_ln908_fu_1618_p2;
wire   [31:0] sub_ln908_fu_1628_p2;
wire   [63:0] m_fu_1607_p1;
wire   [63:0] zext_ln908_2_fu_1633_p1;
wire   [63:0] zext_ln908_fu_1624_p1;
wire   [63:0] shl_ln908_fu_1637_p2;
wire   [63:0] zext_ln911_fu_1650_p1;
wire   [63:0] m_7_fu_1643_p3;
wire   [63:0] m_8_fu_1653_p2;
wire   [62:0] m_s_fu_1659_p4;
wire   [0:0] tmp_23_fu_1673_p3;
wire   [10:0] sub_ln915_fu_1689_p2;
wire   [10:0] select_ln915_fu_1681_p3;
wire   [10:0] add_ln915_fu_1694_p2;
wire   [63:0] m_11_fu_1669_p1;
wire   [11:0] tmp_7_fu_1700_p3;
wire   [63:0] p_Result_34_fu_1707_p5;
wire   [51:0] trunc_ln7_fu_1724_p4;
wire   [0:0] or_ln924_fu_1746_p2;
wire   [0:0] grp_fu_548_p2;
wire   [5:0] grp_fu_1756_p0;
wire   [4:0] grp_fu_1756_p1;
wire   [4:0] grp_fu_1756_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state10;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_1756_p10;
wire   [9:0] grp_fu_1756_p20;
reg    ap_condition_407;
reg    ap_condition_416;
reg    ap_condition_412;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_0_address0),
    .ce0(conv_1_weights_V_0_0_ce0),
    .q0(conv_1_weights_V_0_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_1_address0),
    .ce0(conv_1_weights_V_0_1_ce0),
    .q0(conv_1_weights_V_0_1_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_2_address0),
    .ce0(conv_1_weights_V_0_2_ce0),
    .q0(conv_1_weights_V_0_2_q0)
);

conv_1_conv_1_weieOg #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_1_0_address0),
    .ce0(conv_1_weights_V_1_0_ce0),
    .q0(conv_1_weights_V_1_0_q0)
);

conv_1_conv_1_weifYi #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_1_1_address0),
    .ce0(conv_1_weights_V_1_1_ce0),
    .q0(conv_1_weights_V_1_1_q0)
);

conv_1_conv_1_weig8j #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_1_2_address0),
    .ce0(conv_1_weights_V_1_2_ce0),
    .q0(conv_1_weights_V_1_2_q0)
);

conv_1_conv_1_weihbi #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_2_0_address0),
    .ce0(conv_1_weights_V_2_0_ce0),
    .q0(conv_1_weights_V_2_0_q0)
);

conv_1_conv_1_weiibs #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_2_1_address0),
    .ce0(conv_1_weights_V_2_1_ce0),
    .q0(conv_1_weights_V_2_1_q0)
);

conv_1_conv_1_weijbC #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_2_2_address0),
    .ce0(conv_1_weights_V_2_2_ce0),
    .q0(conv_1_weights_V_2_2_q0)
);

conv_1_conv_1_biakbM #(
    .DataWidth( 7 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_V_address0),
    .ce0(conv_1_bias_V_ce0),
    .q0(conv_1_bias_V_q0)
);

cnn_dcmp_64ns_64nlbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
cnn_dcmp_64ns_64nlbW_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_548_p0),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_548_p2)
);

cnn_mac_muladd_6nmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
cnn_mac_muladd_6nmb6_U2(
    .din0(grp_fu_1756_p0),
    .din1(grp_fu_1756_p1),
    .din2(grp_fu_1756_p2),
    .dout(grp_fu_1756_p3)
);

cnn_mul_mul_14s_8ncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 22 ))
cnn_mul_mul_14s_8ncg_U3(
    .din0(grp_fu_553_p3),
    .din1(conv_1_weights_V_0_0_2_reg_2004),
    .dout(mul_ln1118_fu_1764_p2)
);

cnn_mul_mul_14s_8ncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 22 ))
cnn_mul_mul_14s_8ncg_U4(
    .din0(grp_fu_560_p3),
    .din1(conv_1_weights_V_0_1_2_reg_2009),
    .dout(mul_ln1118_1_fu_1771_p2)
);

cnn_mul_mul_14s_9ocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 23 ))
cnn_mul_mul_14s_9ocq_U5(
    .din0(grp_fu_567_p3),
    .din1(conv_1_weights_V_1_0_2_reg_2019),
    .dout(mul_ln1118_3_fu_1778_p2)
);

cnn_mul_mul_14s_8ncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 22 ))
cnn_mul_mul_14s_8ncg_U6(
    .din0(select_ln1117_4_fu_1107_p3),
    .din1(conv_1_weights_V_1_1_2_reg_2024),
    .dout(mul_ln1118_4_fu_1784_p2)
);

cnn_mul_mul_14s_9ocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 23 ))
cnn_mul_mul_14s_9ocq_U7(
    .din0(grp_fu_553_p3),
    .din1(conv_1_weights_V_0_2_2_reg_2014),
    .dout(mul_ln1118_2_fu_1790_p2)
);

cnn_mul_mul_14s_9ocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 23 ))
cnn_mul_mul_14s_9ocq_U8(
    .din0(grp_fu_567_p3),
    .din1(conv_1_weights_V_1_2_2_reg_2029),
    .dout(mul_ln1118_5_fu_1797_p2)
);

cnn_mul_mul_14s_9ocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 23 ))
cnn_mul_mul_14s_9ocq_U9(
    .din0(grp_fu_560_p3),
    .din1(conv_1_weights_V_2_0_2_reg_2034),
    .dout(mul_ln1118_6_fu_1803_p2)
);

cnn_mul_mul_14s_9ocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 23 ))
cnn_mul_mul_14s_9ocq_U10(
    .din0(grp_fu_553_p3),
    .din1(conv_1_weights_V_2_1_q0),
    .dout(mul_ln1118_7_fu_1809_p2)
);

cnn_mul_mul_14s_9ocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 23 ))
cnn_mul_mul_14s_9ocq_U11(
    .din0(grp_fu_560_p3),
    .din1(conv_1_weights_V_2_2_q0),
    .dout(mul_ln1118_8_fu_1816_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1823 == 1'd0))) begin
        c_0_reg_515 <= select_ln32_8_reg_1874;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_515 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1823 == 1'd0))) begin
        f_0_reg_526 <= f_reg_2099;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_526 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1823 == 1'd0))) begin
        indvar_flatten39_reg_482 <= add_ln8_reg_1827;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten39_reg_482 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1823 == 1'd0))) begin
        indvar_flatten_reg_504 <= select_ln11_reg_2104;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_504 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1823 == 1'd0))) begin
        r_0_reg_493 <= select_ln32_1_reg_1837;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_493 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln8_reg_1823 == 1'd0))) begin
        add_ln1117_6_reg_2049 <= add_ln1117_6_fu_989_p2;
        add_ln1117_9_reg_2064 <= add_ln1117_9_fu_1019_p2;
        conv_out_V_addr_reg_2079 <= zext_ln203_15_fu_1034_p1;
        mul_ln1118_3_reg_2089 <= mul_ln1118_3_fu_1778_p2;
        mul_ln1118_4_reg_2094 <= mul_ln1118_4_fu_1784_p2;
        tmp_9_reg_2084 <= {{add_ln1192_fu_1081_p2[21:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_612_p2 == 1'd0))) begin
        add_ln11_reg_1944 <= add_ln11_fu_815_p2;
        icmp_ln11_reg_1832 <= icmp_ln11_fu_624_p2;
        select_ln32_10_reg_1897 <= select_ln32_10_fu_796_p3;
        select_ln32_2_reg_1850 <= select_ln32_2_fu_654_p3;
        select_ln32_3_reg_1856 <= select_ln32_3_fu_678_p3;
        select_ln32_7_reg_1868 <= select_ln32_7_fu_756_p3;
        select_ln32_9_reg_1892 <= select_ln32_9_fu_782_p3;
        trunc_ln32_reg_1842 <= trunc_ln32_fu_650_p1;
        zext_ln1117_2_mid2_v_reg_1862 <= {{add_ln32_fu_694_p2[4:1]}};
        zext_ln23_reg_1902[2 : 0] <= zext_ln23_fu_804_p1[2 : 0];
        zext_ln32_reg_1879[4 : 0] <= zext_ln32_fu_772_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_612_p2 == 1'd0))) begin
        add_ln203_reg_1886 <= grp_fu_1756_p3;
        select_ln32_1_reg_1837 <= select_ln32_1_fu_638_p3;
        select_ln32_8_reg_1874 <= select_ln32_8_fu_764_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln8_reg_1827 <= add_ln8_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln8_reg_1823 == 1'd0))) begin
        conv_1_weights_V_0_0_2_reg_2004 <= conv_1_weights_V_0_0_q0;
        conv_1_weights_V_0_1_2_reg_2009 <= conv_1_weights_V_0_1_q0;
        conv_1_weights_V_0_2_2_reg_2014 <= conv_1_weights_V_0_2_q0;
        conv_1_weights_V_1_0_2_reg_2019 <= conv_1_weights_V_1_0_q0;
        conv_1_weights_V_1_1_2_reg_2024 <= conv_1_weights_V_1_1_q0;
        conv_1_weights_V_1_2_2_reg_2029 <= conv_1_weights_V_1_2_q0;
        conv_1_weights_V_2_0_2_reg_2034 <= conv_1_weights_V_2_0_q0;
        sub_ln1117_1_reg_1954[9 : 2] <= sub_ln1117_1_fu_871_p2[9 : 2];
        sub_ln1117_reg_1949[9 : 2] <= sub_ln1117_fu_843_p2[9 : 2];
        zext_ln32_1_reg_1979[4 : 0] <= zext_ln32_1_fu_899_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        conv_out_V_addr_reg_2079_pp0_iter1_reg <= conv_out_V_addr_reg_2079;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_reg_1823 == 1'd0))) begin
        f_reg_2099 <= f_fu_1118_p2;
        select_ln11_reg_2104 <= select_ln11_fu_1123_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln8_reg_1823_pp0_iter1_reg == 1'd0))) begin
        icmp_ln885_reg_2168 <= icmp_ln885_fu_1429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln8_reg_1823 <= icmp_ln8_fu_612_p2;
        icmp_ln8_reg_1823_pp0_iter1_reg <= icmp_ln8_reg_1823;
        icmp_ln8_reg_1823_pp0_iter2_reg <= icmp_ln8_reg_1823_pp0_iter1_reg;
        trunc_ln32_reg_1842_pp0_iter1_reg <= trunc_ln32_reg_1842;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln885_fu_1429_p2 == 1'd0) & (icmp_ln8_reg_1823_pp0_iter1_reg == 1'd0))) begin
        icmp_ln908_reg_2194 <= icmp_ln908_fu_1597_p2;
        or_ln_reg_2189[0] <= or_ln_fu_1589_p3[0];
        p_Result_32_reg_2172 <= p_Val2_28_reg_2159[32'd13];
        sub_ln894_reg_2183 <= sub_ln894_fu_1479_p2;
        tmp_V_8_reg_2177 <= tmp_V_8_fu_1446_p3;
        trunc_ln893_reg_2199 <= trunc_ln893_fu_1603_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln885_reg_2168 == 1'd0) & (icmp_ln8_reg_1823_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln924_2_reg_2214 <= icmp_ln924_2_fu_1740_p2;
        icmp_ln924_reg_2209 <= icmp_ln924_fu_1734_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1823 == 1'd0))) begin
        mul_ln1118_5_reg_2129 <= mul_ln1118_5_fu_1797_p2;
        mul_ln1118_6_reg_2139 <= mul_ln1118_6_fu_1803_p2;
        tmp_12_reg_2134 <= {{add_ln1192_3_fu_1234_p2[21:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln8_reg_1823_pp0_iter1_reg == 1'd0))) begin
        p_Val2_28_reg_2159 <= p_Val2_28_fu_1423_p2;
    end
end

always @ (*) begin
    if ((icmp_ln8_fu_612_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        ap_phi_mux_c_0_phi_fu_519_p4 = select_ln32_8_reg_1874;
    end else begin
        ap_phi_mux_c_0_phi_fu_519_p4 = c_0_reg_515;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        ap_phi_mux_f_0_phi_fu_530_p4 = f_reg_2099;
    end else begin
        ap_phi_mux_f_0_phi_fu_530_p4 = f_0_reg_526;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        ap_phi_mux_indvar_flatten39_phi_fu_486_p4 = add_ln8_reg_1827;
    end else begin
        ap_phi_mux_indvar_flatten39_phi_fu_486_p4 = indvar_flatten39_reg_482;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_508_p4 = select_ln11_reg_2104;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_508_p4 = indvar_flatten_reg_504;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        ap_phi_mux_r_0_phi_fu_497_p4 = select_ln32_1_reg_1837;
    end else begin
        ap_phi_mux_r_0_phi_fu_497_p4 = r_0_reg_493;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_412)) begin
        if ((1'b1 == ap_condition_416)) begin
            ap_phi_mux_storemerge_phi_fu_540_p4 = p_Val2_28_reg_2159;
        end else if ((1'b1 == ap_condition_407)) begin
            ap_phi_mux_storemerge_phi_fu_540_p4 = 14'd0;
        end else begin
            ap_phi_mux_storemerge_phi_fu_540_p4 = ap_phi_reg_pp0_iter2_storemerge_reg_537;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_540_p4 = ap_phi_reg_pp0_iter2_storemerge_reg_537;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_bias_V_ce0 = 1'b1;
    end else begin
        conv_1_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_0_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_0_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_0_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_1_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_1_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_1_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_2_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_2_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_V_2_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv_out_V_ce0 = 1'b1;
    end else begin
        conv_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln8_reg_1823_pp0_iter2_reg == 1'd0))) begin
        conv_out_V_we0 = 1'b1;
    end else begin
        conv_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_553_p0 = trunc_ln32_reg_1842_pp0_iter1_reg;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_553_p0 = trunc_ln32_reg_1842;
    end else begin
        grp_fu_553_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_560_p0 = trunc_ln32_reg_1842_pp0_iter1_reg;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_560_p0 = trunc_ln32_reg_1842;
    end else begin
        grp_fu_560_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_V_address0 = sext_ln1117_1_fu_1129_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_0_V_address0 = zext_ln1117_15_fu_1013_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_0_V_address0 = zext_ln1117_14_fu_1002_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_0_V_address0 = zext_ln1117_11_fu_893_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_0_V_address0 = zext_ln1117_10_fu_882_p1;
    end else begin
        input_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_V_address1 = zext_ln1117_16_fu_1134_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_V_address1 = sext_ln1117_fu_959_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_0_V_address1 = zext_ln1117_13_fu_920_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_0_V_address1 = zext_ln1117_12_fu_908_p1;
    end else begin
        input_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_0_V_ce1 = 1'b1;
    end else begin
        input_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_V_address0 = sext_ln1117_1_fu_1129_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_1_V_address0 = zext_ln1117_15_fu_1013_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_1_V_address0 = zext_ln1117_14_fu_1002_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_1_V_address0 = zext_ln1117_11_fu_893_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_1_V_address0 = zext_ln1117_10_fu_882_p1;
    end else begin
        input_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_V_address1 = zext_ln1117_16_fu_1134_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_V_address1 = sext_ln1117_fu_959_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_1_V_address1 = zext_ln1117_13_fu_920_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0))) begin
        input_1_V_address1 = zext_ln1117_12_fu_908_p1;
    end else begin
        input_1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_1_V_ce0 = 1'b1;
    end else begin
        input_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd1) & (icmp_ln8_reg_1823 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (trunc_ln32_reg_1842 == 1'd0) & (icmp_ln8_reg_1823 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_1_V_ce1 = 1'b1;
    end else begin
        input_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_612_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_612_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_1543_p2 = (icmp_ln897_fu_1505_p2 & icmp_ln897_2_fu_1537_p2);

assign add_ln1117_2_fu_888_p2 = (sub_ln1117_1_fu_871_p2 + zext_ln32_reg_1879);

assign add_ln1117_3_fu_954_p2 = (sub_ln1117_2_fu_948_p2 + zext_ln32_reg_1879);

assign add_ln1117_4_fu_902_p2 = (sub_ln1117_fu_843_p2 + zext_ln32_1_fu_899_p1);

assign add_ln1117_5_fu_914_p2 = (sub_ln1117_1_fu_871_p2 + zext_ln32_1_fu_899_p1);

assign add_ln1117_6_fu_989_p2 = (sub_ln1117_2_fu_948_p2 + zext_ln32_1_reg_1979);

assign add_ln1117_7_fu_997_p2 = (sub_ln1117_reg_1949 + zext_ln32_2_fu_994_p1);

assign add_ln1117_8_fu_1008_p2 = (sub_ln1117_1_reg_1954 + zext_ln32_2_fu_994_p1);

assign add_ln1117_9_fu_1019_p2 = (sub_ln1117_2_fu_948_p2 + zext_ln32_2_fu_994_p1);

assign add_ln1117_fu_877_p2 = (sub_ln1117_fu_843_p2 + zext_ln32_reg_1879);

assign add_ln1192_1_fu_1164_p2 = (zext_ln1192_1_fu_1160_p1 + zext_ln703_2_fu_1156_p1);

assign add_ln1192_2_fu_1199_p2 = (zext_ln1192_2_fu_1195_p1 + zext_ln703_3_fu_1191_p1);

assign add_ln1192_3_fu_1234_p2 = (zext_ln1192_3_fu_1230_p1 + zext_ln703_4_fu_1226_p1);

assign add_ln1192_4_fu_1282_p2 = (zext_ln1192_4_fu_1278_p1 + zext_ln703_5_fu_1274_p1);

assign add_ln1192_5_fu_1317_p2 = (zext_ln1192_5_fu_1313_p1 + zext_ln703_6_fu_1309_p1);

assign add_ln1192_6_fu_1360_p2 = (zext_ln1192_6_fu_1356_p1 + zext_ln703_7_fu_1352_p1);

assign add_ln1192_7_fu_1403_p2 = (zext_ln1192_7_fu_1399_p1 + zext_ln703_8_fu_1395_p1);

assign add_ln1192_fu_1081_p2 = (zext_ln1192_fu_1077_p1 + zext_ln703_fu_1073_p1);

assign add_ln11_fu_815_p2 = (ap_phi_mux_indvar_flatten_phi_fu_508_p4 + 8'd1);

assign add_ln203_7_fu_1028_p2 = (sub_ln203_fu_983_p2 + zext_ln203_14_fu_1025_p1);

assign add_ln23_1_fu_606_p2 = (ap_phi_mux_c_0_phi_fu_519_p4 + 5'd2);

assign add_ln23_3_fu_744_p2 = (5'd1 + select_ln32_fu_630_p3);

assign add_ln23_4_fu_776_p2 = (5'd2 + select_ln32_fu_630_p3);

assign add_ln23_5_fu_790_p2 = (5'd3 + select_ln32_fu_630_p3);

assign add_ln23_fu_662_p2 = (5'd2 + ap_phi_mux_r_0_phi_fu_497_p4);

assign add_ln32_fu_694_p2 = (ap_phi_mux_r_0_phi_fu_497_p4 + select_ln32_4_fu_686_p3);

assign add_ln899_fu_1563_p2 = ($signed(14'd16331) + $signed(trunc_ln894_fu_1485_p1));

assign add_ln8_fu_618_p2 = (ap_phi_mux_indvar_flatten39_phi_fu_486_p4 + 12'd1);

assign add_ln908_fu_1613_p2 = ($signed(32'd4294967242) + $signed(sub_ln894_reg_2183));

assign add_ln915_fu_1694_p2 = (sub_ln915_fu_1689_p2 + select_ln915_fu_1681_p3);

assign and_ln32_fu_738_p2 = (xor_ln32_fu_726_p2 & icmp_ln14_fu_732_p2);

assign and_ln899_fu_1577_p2 = (xor_ln899_fu_1557_p2 & p_Result_30_fu_1569_p3);

assign and_ln924_fu_1750_p2 = (or_ln924_fu_1746_p2 & grp_fu_548_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_407 = (((icmp_ln885_reg_2168 == 1'd1) & (icmp_ln8_reg_1823_pp0_iter2_reg == 1'd0)) | ((1'd0 == and_ln924_fu_1750_p2) & (icmp_ln8_reg_1823_pp0_iter2_reg == 1'd0)));
end

always @ (*) begin
    ap_condition_412 = ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_416 = ((1'd1 == and_ln924_fu_1750_p2) & (icmp_ln885_reg_2168 == 1'd0) & (icmp_ln8_reg_1823_pp0_iter2_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_storemerge_reg_537 = 'bx;

assign c_fu_600_p2 = (ap_phi_mux_c_0_phi_fu_519_p4 + 5'd1);

assign conv_1_bias_V_address0 = zext_ln23_reg_1902;

assign conv_1_weights_V_0_0_address0 = zext_ln23_fu_804_p1;

assign conv_1_weights_V_0_1_address0 = zext_ln23_fu_804_p1;

assign conv_1_weights_V_0_2_address0 = zext_ln23_fu_804_p1;

assign conv_1_weights_V_1_0_address0 = zext_ln23_fu_804_p1;

assign conv_1_weights_V_1_1_address0 = zext_ln23_fu_804_p1;

assign conv_1_weights_V_1_2_address0 = zext_ln23_fu_804_p1;

assign conv_1_weights_V_2_0_address0 = zext_ln23_fu_804_p1;

assign conv_1_weights_V_2_1_address0 = zext_ln23_reg_1902;

assign conv_1_weights_V_2_2_address0 = zext_ln23_reg_1902;

assign conv_out_V_address0 = conv_out_V_addr_reg_2079_pp0_iter1_reg;

assign conv_out_V_d0 = ap_phi_mux_storemerge_phi_fu_540_p4;

assign f_fu_1118_p2 = (select_ln32_7_reg_1868 + 3'd1);

assign grp_fu_1756_p0 = 10'd26;

assign grp_fu_1756_p1 = grp_fu_1756_p10;

assign grp_fu_1756_p10 = select_ln32_1_fu_638_p3;

assign grp_fu_1756_p2 = grp_fu_1756_p20;

assign grp_fu_1756_p20 = select_ln32_8_fu_764_p3;

assign grp_fu_548_p0 = p_Result_34_fu_1707_p5;

assign grp_fu_553_p3 = ((grp_fu_553_p0[0:0] === 1'b1) ? input_1_V_q0 : input_0_V_q0);

assign grp_fu_560_p3 = ((grp_fu_560_p0[0:0] === 1'b1) ? input_1_V_q1 : input_0_V_q1);

assign grp_fu_567_p3 = ((trunc_ln32_reg_1842[0:0] === 1'b1) ? input_0_V_q0 : input_1_V_q0);

assign icmp_ln11_fu_624_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_508_p4 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_732_p2 = ((ap_phi_mux_f_0_phi_fu_530_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_1429_p2 = ((p_Val2_28_reg_2159 == 14'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_2_fu_1537_p2 = ((p_Result_29_fu_1531_p2 != 14'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_fu_1505_p2 = (($signed(tmp_21_fu_1495_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_612_p2 = ((ap_phi_mux_indvar_flatten39_phi_fu_486_p4 == 12'd4056) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_1597_p2 = (($signed(lsb_index_fu_1489_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln924_2_fu_1740_p2 = ((trunc_ln7_fu_1724_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln924_fu_1734_p2 = ((add_ln915_fu_1694_p2 != 11'd2047) ? 1'b1 : 1'b0);


always @ (p_Result_33_fu_1463_p3) begin
    if (p_Result_33_fu_1463_p3[0] == 1'b1) begin
        l_fu_1471_p3 = 32'd0;
    end else if (p_Result_33_fu_1463_p3[1] == 1'b1) begin
        l_fu_1471_p3 = 32'd1;
    end else if (p_Result_33_fu_1463_p3[2] == 1'b1) begin
        l_fu_1471_p3 = 32'd2;
    end else if (p_Result_33_fu_1463_p3[3] == 1'b1) begin
        l_fu_1471_p3 = 32'd3;
    end else if (p_Result_33_fu_1463_p3[4] == 1'b1) begin
        l_fu_1471_p3 = 32'd4;
    end else if (p_Result_33_fu_1463_p3[5] == 1'b1) begin
        l_fu_1471_p3 = 32'd5;
    end else if (p_Result_33_fu_1463_p3[6] == 1'b1) begin
        l_fu_1471_p3 = 32'd6;
    end else if (p_Result_33_fu_1463_p3[7] == 1'b1) begin
        l_fu_1471_p3 = 32'd7;
    end else if (p_Result_33_fu_1463_p3[8] == 1'b1) begin
        l_fu_1471_p3 = 32'd8;
    end else if (p_Result_33_fu_1463_p3[9] == 1'b1) begin
        l_fu_1471_p3 = 32'd9;
    end else if (p_Result_33_fu_1463_p3[10] == 1'b1) begin
        l_fu_1471_p3 = 32'd10;
    end else if (p_Result_33_fu_1463_p3[11] == 1'b1) begin
        l_fu_1471_p3 = 32'd11;
    end else if (p_Result_33_fu_1463_p3[12] == 1'b1) begin
        l_fu_1471_p3 = 32'd12;
    end else if (p_Result_33_fu_1463_p3[13] == 1'b1) begin
        l_fu_1471_p3 = 32'd13;
    end else if (p_Result_33_fu_1463_p3[14] == 1'b1) begin
        l_fu_1471_p3 = 32'd14;
    end else if (p_Result_33_fu_1463_p3[15] == 1'b1) begin
        l_fu_1471_p3 = 32'd15;
    end else if (p_Result_33_fu_1463_p3[16] == 1'b1) begin
        l_fu_1471_p3 = 32'd16;
    end else if (p_Result_33_fu_1463_p3[17] == 1'b1) begin
        l_fu_1471_p3 = 32'd17;
    end else if (p_Result_33_fu_1463_p3[18] == 1'b1) begin
        l_fu_1471_p3 = 32'd18;
    end else if (p_Result_33_fu_1463_p3[19] == 1'b1) begin
        l_fu_1471_p3 = 32'd19;
    end else if (p_Result_33_fu_1463_p3[20] == 1'b1) begin
        l_fu_1471_p3 = 32'd20;
    end else if (p_Result_33_fu_1463_p3[21] == 1'b1) begin
        l_fu_1471_p3 = 32'd21;
    end else if (p_Result_33_fu_1463_p3[22] == 1'b1) begin
        l_fu_1471_p3 = 32'd22;
    end else if (p_Result_33_fu_1463_p3[23] == 1'b1) begin
        l_fu_1471_p3 = 32'd23;
    end else if (p_Result_33_fu_1463_p3[24] == 1'b1) begin
        l_fu_1471_p3 = 32'd24;
    end else if (p_Result_33_fu_1463_p3[25] == 1'b1) begin
        l_fu_1471_p3 = 32'd25;
    end else if (p_Result_33_fu_1463_p3[26] == 1'b1) begin
        l_fu_1471_p3 = 32'd26;
    end else if (p_Result_33_fu_1463_p3[27] == 1'b1) begin
        l_fu_1471_p3 = 32'd27;
    end else if (p_Result_33_fu_1463_p3[28] == 1'b1) begin
        l_fu_1471_p3 = 32'd28;
    end else if (p_Result_33_fu_1463_p3[29] == 1'b1) begin
        l_fu_1471_p3 = 32'd29;
    end else if (p_Result_33_fu_1463_p3[30] == 1'b1) begin
        l_fu_1471_p3 = 32'd30;
    end else if (p_Result_33_fu_1463_p3[31] == 1'b1) begin
        l_fu_1471_p3 = 32'd31;
    end else begin
        l_fu_1471_p3 = 32'd32;
    end
end

assign lsb_index_fu_1489_p2 = ($signed(32'd4294967243) + $signed(sub_ln894_fu_1479_p2));

assign lshr_ln1117_1_fu_590_p4 = {{r_fu_584_p2[4:1]}};

assign lshr_ln1117_1_mid1_fu_668_p4 = {{add_ln23_fu_662_p2[4:1]}};

assign lshr_ln897_fu_1525_p2 = 14'd16383 >> zext_ln897_fu_1521_p1;

assign lshr_ln908_fu_1618_p2 = zext_ln907_2_fu_1610_p1 >> add_ln908_fu_1613_p2;

assign lshr_ln_fu_574_p4 = {{ap_phi_mux_r_0_phi_fu_497_p4[4:1]}};

assign m_11_fu_1669_p1 = m_s_fu_1659_p4;

assign m_7_fu_1643_p3 = ((icmp_ln908_reg_2194[0:0] === 1'b1) ? zext_ln908_fu_1624_p1 : shl_ln908_fu_1637_p2);

assign m_8_fu_1653_p2 = (zext_ln911_fu_1650_p1 + m_7_fu_1643_p3);

assign m_fu_1607_p1 = tmp_V_8_reg_2177;

assign m_s_fu_1659_p4 = {{m_8_fu_1653_p2[63:1]}};

assign or_ln32_fu_750_p2 = (icmp_ln11_fu_624_p2 | and_ln32_fu_738_p2);

assign or_ln899_fu_1583_p2 = (and_ln899_fu_1577_p2 | a_fu_1543_p2);

assign or_ln924_fu_1746_p2 = (icmp_ln924_reg_2209 | icmp_ln924_2_reg_2214);

assign or_ln_fu_1589_p3 = {{31'd0}, {or_ln899_fu_1583_p2}};

assign p_Result_29_fu_1531_p2 = (tmp_V_8_fu_1446_p3 & lshr_ln897_fu_1525_p2);

assign p_Result_30_fu_1569_p3 = tmp_V_8_fu_1446_p3[add_ln899_fu_1563_p2];

assign p_Result_32_fu_1434_p3 = p_Val2_28_reg_2159[32'd13];

assign p_Result_33_fu_1463_p3 = {{18'd262143}, {p_Result_s_fu_1453_p4}};

assign p_Result_34_fu_1707_p5 = {{tmp_7_fu_1700_p3}, {m_11_fu_1669_p1[51:0]}};

integer ap_tvar_int_0;

always @ (tmp_V_8_fu_1446_p3) begin
    for (ap_tvar_int_0 = 14 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 13 - 0) begin
            p_Result_s_fu_1453_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_1453_p4[ap_tvar_int_0] = tmp_V_8_fu_1446_p3[13 - ap_tvar_int_0];
        end
    end
end

assign p_Val2_28_fu_1423_p2 = ($signed(trunc_ln708_8_fu_1409_p4) + $signed(sext_ln1265_fu_1419_p1));

assign p_shl_cast_fu_965_p3 = {{add_ln203_reg_1886}, {3'd0}};

assign r_fu_584_p2 = (ap_phi_mux_r_0_phi_fu_497_p4 + 5'd1);

assign select_ln1117_4_fu_1107_p3 = ((trunc_ln32_reg_1842[0:0] === 1'b1) ? input_0_V_q1 : input_1_V_q1);

assign select_ln11_fu_1123_p3 = ((icmp_ln11_reg_1832[0:0] === 1'b1) ? 8'd1 : add_ln11_reg_1944);

assign select_ln32_10_fu_796_p3 = ((and_ln32_fu_738_p2[0:0] === 1'b1) ? add_ln23_5_fu_790_p2 : select_ln32_6_fu_718_p3);

assign select_ln32_1_fu_638_p3 = ((icmp_ln11_fu_624_p2[0:0] === 1'b1) ? r_fu_584_p2 : ap_phi_mux_r_0_phi_fu_497_p4);

assign select_ln32_2_fu_654_p3 = ((icmp_ln11_fu_624_p2[0:0] === 1'b1) ? lshr_ln1117_1_fu_590_p4 : lshr_ln_fu_574_p4);

assign select_ln32_3_fu_678_p3 = ((icmp_ln11_fu_624_p2[0:0] === 1'b1) ? lshr_ln1117_1_mid1_fu_668_p4 : lshr_ln1117_1_fu_590_p4);

assign select_ln32_4_fu_686_p3 = ((icmp_ln11_fu_624_p2[0:0] === 1'b1) ? 5'd3 : 5'd2);

assign select_ln32_5_fu_710_p3 = ((icmp_ln11_fu_624_p2[0:0] === 1'b1) ? 5'd1 : c_fu_600_p2);

assign select_ln32_6_fu_718_p3 = ((icmp_ln11_fu_624_p2[0:0] === 1'b1) ? 5'd2 : add_ln23_1_fu_606_p2);

assign select_ln32_7_fu_756_p3 = ((or_ln32_fu_750_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_f_0_phi_fu_530_p4);

assign select_ln32_8_fu_764_p3 = ((and_ln32_fu_738_p2[0:0] === 1'b1) ? add_ln23_3_fu_744_p2 : select_ln32_fu_630_p3);

assign select_ln32_9_fu_782_p3 = ((and_ln32_fu_738_p2[0:0] === 1'b1) ? add_ln23_4_fu_776_p2 : select_ln32_5_fu_710_p3);

assign select_ln32_fu_630_p3 = ((icmp_ln11_fu_624_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_c_0_phi_fu_519_p4);

assign select_ln915_fu_1681_p3 = ((tmp_23_fu_1673_p3[0:0] === 1'b1) ? 11'd1023 : 11'd1022);

assign sext_ln1117_1_fu_1129_p1 = $signed(add_ln1117_6_reg_2049);

assign sext_ln1117_fu_959_p1 = $signed(add_ln1117_3_fu_954_p2);

assign sext_ln1118_11_fu_1264_p1 = mul_ln1118_5_reg_2129;

assign sext_ln1118_13_fu_1288_p1 = mul_ln1118_6_reg_2139;

assign sext_ln1118_15_fu_1331_p1 = mul_ln1118_7_fu_1809_p2;

assign sext_ln1118_17_fu_1374_p1 = mul_ln1118_8_fu_1816_p2;

assign sext_ln1118_3_fu_1053_p1 = mul_ln1118_1_fu_1771_p2;

assign sext_ln1118_5_fu_1146_p1 = mul_ln1118_2_fu_1790_p2;

assign sext_ln1118_7_fu_1170_p1 = mul_ln1118_3_reg_2089;

assign sext_ln1118_9_fu_1205_p1 = mul_ln1118_4_reg_2094;

assign sext_ln1265_fu_1419_p1 = $signed(conv_1_bias_V_q0);

assign shl_ln728_1_fu_1149_p3 = {{tmp_9_reg_2084}, {8'd0}};

assign shl_ln728_2_fu_1183_p3 = {{tmp_10_fu_1173_p4}, {8'd0}};

assign shl_ln728_3_fu_1218_p3 = {{tmp_11_fu_1208_p4}, {8'd0}};

assign shl_ln728_4_fu_1267_p3 = {{tmp_12_reg_2134}, {8'd0}};

assign shl_ln728_5_fu_1301_p3 = {{tmp_13_fu_1291_p4}, {8'd0}};

assign shl_ln728_6_fu_1344_p3 = {{tmp_14_fu_1334_p4}, {8'd0}};

assign shl_ln728_7_fu_1387_p3 = {{tmp_15_fu_1377_p4}, {8'd0}};

assign shl_ln908_fu_1637_p2 = m_fu_1607_p1 << zext_ln908_2_fu_1633_p1;

assign shl_ln_fu_1065_p3 = {{tmp_8_fu_1056_p4}, {8'd0}};

assign sub_ln1117_1_fu_871_p2 = (zext_ln1117_6_fu_856_p1 - zext_ln1117_7_fu_867_p1);

assign sub_ln1117_2_fu_948_p2 = (zext_ln1117_8_fu_933_p1 - zext_ln1117_9_fu_944_p1);

assign sub_ln1117_fu_843_p2 = (zext_ln1117_fu_828_p1 - zext_ln1117_5_fu_839_p1);

assign sub_ln203_fu_983_p2 = (p_shl_cast_fu_965_p3 - zext_ln203_13_fu_979_p1);

assign sub_ln894_fu_1479_p2 = (32'd14 - l_fu_1471_p3);

assign sub_ln897_fu_1515_p2 = (4'd4 - trunc_ln897_fu_1511_p1);

assign sub_ln908_fu_1628_p2 = (32'd54 - sub_ln894_reg_2183);

assign sub_ln915_fu_1689_p2 = (11'd6 - trunc_ln893_reg_2199);

assign tmp_10_fu_1173_p4 = {{add_ln1192_1_fu_1164_p2[21:8]}};

assign tmp_11_fu_1208_p4 = {{add_ln1192_2_fu_1199_p2[21:8]}};

assign tmp_13_fu_1291_p4 = {{add_ln1192_4_fu_1282_p2[21:8]}};

assign tmp_14_fu_1334_p4 = {{add_ln1192_5_fu_1317_p2[21:8]}};

assign tmp_15_fu_1377_p4 = {{add_ln1192_6_fu_1360_p2[21:8]}};

assign tmp_16_fu_832_p3 = {{select_ln32_2_reg_1850}, {2'd0}};

assign tmp_17_fu_849_p3 = {{select_ln32_3_reg_1856}, {5'd0}};

assign tmp_18_fu_860_p3 = {{select_ln32_3_reg_1856}, {2'd0}};

assign tmp_19_fu_972_p3 = {{add_ln203_reg_1886}, {1'd0}};

assign tmp_21_fu_1495_p4 = {{lsb_index_fu_1489_p2[31:1]}};

assign tmp_22_fu_1549_p3 = lsb_index_fu_1489_p2[32'd31];

assign tmp_23_fu_1673_p3 = m_8_fu_1653_p2[32'd54];

assign tmp_6_fu_937_p3 = {{zext_ln1117_2_mid2_v_reg_1862}, {2'd0}};

assign tmp_7_fu_1700_p3 = {{p_Result_32_reg_2172}, {add_ln915_fu_1694_p2}};

assign tmp_8_fu_1056_p4 = {{mul_ln1118_fu_1764_p2[21:8]}};

assign tmp_V_8_fu_1446_p3 = ((p_Result_32_fu_1434_p3[0:0] === 1'b1) ? tmp_V_fu_1441_p2 : p_Val2_28_reg_2159);

assign tmp_V_fu_1441_p2 = (14'd0 - p_Val2_28_reg_2159);

assign tmp_fu_821_p3 = {{select_ln32_2_reg_1850}, {5'd0}};

assign tmp_s_fu_926_p3 = {{zext_ln1117_2_mid2_v_reg_1862}, {5'd0}};

assign trunc_ln32_fu_650_p1 = select_ln32_1_fu_638_p3[0:0];

assign trunc_ln708_8_fu_1409_p4 = {{add_ln1192_7_fu_1403_p2[21:8]}};

assign trunc_ln7_fu_1724_p4 = {{m_8_fu_1653_p2[52:1]}};

assign trunc_ln893_fu_1603_p1 = l_fu_1471_p3[10:0];

assign trunc_ln894_fu_1485_p1 = sub_ln894_fu_1479_p2[13:0];

assign trunc_ln897_fu_1511_p1 = sub_ln894_fu_1479_p2[3:0];

assign xor_ln32_fu_726_p2 = (icmp_ln11_fu_624_p2 ^ 1'd1);

assign xor_ln899_fu_1557_p2 = (tmp_22_fu_1549_p3 ^ 1'd1);

assign zext_ln1117_10_fu_882_p1 = add_ln1117_fu_877_p2;

assign zext_ln1117_11_fu_893_p1 = add_ln1117_2_fu_888_p2;

assign zext_ln1117_12_fu_908_p1 = add_ln1117_4_fu_902_p2;

assign zext_ln1117_13_fu_920_p1 = add_ln1117_5_fu_914_p2;

assign zext_ln1117_14_fu_1002_p1 = add_ln1117_7_fu_997_p2;

assign zext_ln1117_15_fu_1013_p1 = add_ln1117_8_fu_1008_p2;

assign zext_ln1117_16_fu_1134_p1 = add_ln1117_9_reg_2064;

assign zext_ln1117_5_fu_839_p1 = tmp_16_fu_832_p3;

assign zext_ln1117_6_fu_856_p1 = tmp_17_fu_849_p3;

assign zext_ln1117_7_fu_867_p1 = tmp_18_fu_860_p3;

assign zext_ln1117_8_fu_933_p1 = tmp_s_fu_926_p3;

assign zext_ln1117_9_fu_944_p1 = tmp_6_fu_937_p3;

assign zext_ln1117_fu_828_p1 = tmp_fu_821_p3;

assign zext_ln1192_1_fu_1160_p1 = $unsigned(sext_ln1118_5_fu_1146_p1);

assign zext_ln1192_2_fu_1195_p1 = $unsigned(sext_ln1118_7_fu_1170_p1);

assign zext_ln1192_3_fu_1230_p1 = $unsigned(sext_ln1118_9_fu_1205_p1);

assign zext_ln1192_4_fu_1278_p1 = $unsigned(sext_ln1118_11_fu_1264_p1);

assign zext_ln1192_5_fu_1313_p1 = $unsigned(sext_ln1118_13_fu_1288_p1);

assign zext_ln1192_6_fu_1356_p1 = $unsigned(sext_ln1118_15_fu_1331_p1);

assign zext_ln1192_7_fu_1399_p1 = $unsigned(sext_ln1118_17_fu_1374_p1);

assign zext_ln1192_fu_1077_p1 = $unsigned(sext_ln1118_3_fu_1053_p1);

assign zext_ln203_13_fu_979_p1 = tmp_19_fu_972_p3;

assign zext_ln203_14_fu_1025_p1 = select_ln32_7_reg_1868;

assign zext_ln203_15_fu_1034_p1 = add_ln203_7_fu_1028_p2;

assign zext_ln23_fu_804_p1 = select_ln32_7_fu_756_p3;

assign zext_ln32_1_fu_899_p1 = select_ln32_9_reg_1892;

assign zext_ln32_2_fu_994_p1 = select_ln32_10_reg_1897;

assign zext_ln32_fu_772_p1 = select_ln32_8_fu_764_p3;

assign zext_ln703_2_fu_1156_p1 = shl_ln728_1_fu_1149_p3;

assign zext_ln703_3_fu_1191_p1 = shl_ln728_2_fu_1183_p3;

assign zext_ln703_4_fu_1226_p1 = shl_ln728_3_fu_1218_p3;

assign zext_ln703_5_fu_1274_p1 = shl_ln728_4_fu_1267_p3;

assign zext_ln703_6_fu_1309_p1 = shl_ln728_5_fu_1301_p3;

assign zext_ln703_7_fu_1352_p1 = shl_ln728_6_fu_1344_p3;

assign zext_ln703_8_fu_1395_p1 = shl_ln728_7_fu_1387_p3;

assign zext_ln703_fu_1073_p1 = shl_ln_fu_1065_p3;

assign zext_ln897_fu_1521_p1 = sub_ln897_fu_1515_p2;

assign zext_ln907_2_fu_1610_p1 = tmp_V_8_reg_2177;

assign zext_ln908_2_fu_1633_p1 = sub_ln908_fu_1628_p2;

assign zext_ln908_fu_1624_p1 = lshr_ln908_fu_1618_p2;

assign zext_ln911_fu_1650_p1 = or_ln_reg_2189;

always @ (posedge ap_clk) begin
    zext_ln32_reg_1879[9:5] <= 5'b00000;
    zext_ln23_reg_1902[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    sub_ln1117_reg_1949[1:0] <= 2'b00;
    sub_ln1117_1_reg_1954[1:0] <= 2'b00;
    zext_ln32_1_reg_1979[9:5] <= 5'b00000;
    or_ln_reg_2189[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //conv_1
