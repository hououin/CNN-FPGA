// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_out (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_2_out_V_address0,
        dense_2_out_V_ce0,
        dense_2_out_V_q0,
        prediction_V_address0,
        prediction_V_ce0,
        prediction_V_we0,
        prediction_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] dense_2_out_V_address0;
output   dense_2_out_V_ce0;
input  [12:0] dense_2_out_V_q0;
output  [3:0] prediction_V_address0;
output   prediction_V_ce0;
output   prediction_V_we0;
output  [13:0] prediction_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dense_2_out_V_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] dense_out_weights_V_address0;
reg    dense_out_weights_V_ce0;
wire  signed [8:0] dense_out_weights_V_q0;
wire   [3:0] dense_out_bias_V_address0;
reg    dense_out_bias_V_ce0;
wire   [7:0] dense_out_bias_V_q0;
wire   [3:0] d_fu_176_p2;
reg   [3:0] d_reg_295;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln48_fu_182_p1;
reg   [63:0] zext_ln48_reg_300;
wire   [0:0] icmp_ln41_fu_170_p2;
wire   [8:0] zext_ln46_fu_186_p1;
reg   [8:0] zext_ln46_reg_306;
wire   [4:0] f_fu_196_p2;
reg   [4:0] f_reg_314;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln46_fu_190_p2;
wire    ap_CS_fsm_state4;
reg   [3:0] dense_array_V_address0;
reg    dense_array_V_ce0;
reg    dense_array_V_we0;
reg   [13:0] dense_array_V_d0;
wire   [13:0] dense_array_V_q0;
wire    grp_soft_max_fu_157_ap_start;
wire    grp_soft_max_fu_157_ap_done;
wire    grp_soft_max_fu_157_ap_idle;
wire    grp_soft_max_fu_157_ap_ready;
wire   [3:0] grp_soft_max_fu_157_dense_array_V_address0;
wire    grp_soft_max_fu_157_dense_array_V_ce0;
wire    grp_soft_max_fu_157_dense_array_V_we0;
wire   [13:0] grp_soft_max_fu_157_dense_array_V_d0;
wire   [3:0] grp_soft_max_fu_157_prediction_V_address0;
wire    grp_soft_max_fu_157_prediction_V_ce0;
wire    grp_soft_max_fu_157_prediction_V_we0;
wire   [13:0] grp_soft_max_fu_157_prediction_V_d0;
reg   [3:0] d_0_reg_123;
wire    ap_CS_fsm_state5;
reg   [13:0] p_Val2_s_reg_134;
reg   [4:0] f_0_reg_146;
reg    grp_soft_max_fu_157_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln1116_2_fu_242_p1;
wire   [63:0] zext_ln48_1_fu_202_p1;
wire   [13:0] add_ln703_fu_276_p2;
wire   [7:0] tmp_s_fu_207_p3;
wire   [5:0] tmp_1_fu_219_p3;
wire   [8:0] zext_ln1116_1_fu_227_p1;
wire   [8:0] zext_ln1116_fu_215_p1;
wire   [8:0] add_ln1116_fu_231_p2;
wire   [8:0] add_ln1116_1_fu_237_p2;
wire  signed [21:0] grp_fu_283_p3;
wire  signed [13:0] sext_ln1265_fu_272_p1;
wire   [12:0] grp_fu_283_p0;
wire   [21:0] grp_fu_283_p2;
reg   [5:0] ap_NS_fsm;
wire   [21:0] grp_fu_283_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_soft_max_fu_157_ap_start_reg = 1'b0;
end

dense_out_dense_oCeG #(
    .DataWidth( 9 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
dense_out_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_V_address0),
    .ce0(dense_out_weights_V_ce0),
    .q0(dense_out_weights_V_q0)
);

dense_out_dense_oDeQ #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_bias_V_address0),
    .ce0(dense_out_bias_V_ce0),
    .q0(dense_out_bias_V_q0)
);

dense_out_dense_aEe0 #(
    .DataWidth( 14 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_V_address0),
    .ce0(dense_array_V_ce0),
    .we0(dense_array_V_we0),
    .d0(dense_array_V_d0),
    .q0(dense_array_V_q0)
);

soft_max grp_soft_max_fu_157(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_soft_max_fu_157_ap_start),
    .ap_done(grp_soft_max_fu_157_ap_done),
    .ap_idle(grp_soft_max_fu_157_ap_idle),
    .ap_ready(grp_soft_max_fu_157_ap_ready),
    .dense_array_V_address0(grp_soft_max_fu_157_dense_array_V_address0),
    .dense_array_V_ce0(grp_soft_max_fu_157_dense_array_V_ce0),
    .dense_array_V_we0(grp_soft_max_fu_157_dense_array_V_we0),
    .dense_array_V_d0(grp_soft_max_fu_157_dense_array_V_d0),
    .dense_array_V_q0(dense_array_V_q0),
    .prediction_V_address0(grp_soft_max_fu_157_prediction_V_address0),
    .prediction_V_ce0(grp_soft_max_fu_157_prediction_V_ce0),
    .prediction_V_we0(grp_soft_max_fu_157_prediction_V_we0),
    .prediction_V_d0(grp_soft_max_fu_157_prediction_V_d0)
);

cnn_mac_muladd_13Ffa #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13Ffa_U62(
    .din0(grp_fu_283_p0),
    .din1(dense_out_weights_V_q0),
    .din2(grp_fu_283_p2),
    .dout(grp_fu_283_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_soft_max_fu_157_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln41_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_soft_max_fu_157_ap_start_reg <= 1'b1;
        end else if ((grp_soft_max_fu_157_ap_ready == 1'b1)) begin
            grp_soft_max_fu_157_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        d_0_reg_123 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        d_0_reg_123 <= d_reg_295;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_0_reg_146 <= f_reg_314;
    end else if (((icmp_ln41_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        f_0_reg_146 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_s_reg_134 <= {{grp_fu_283_p3[21:8]}};
    end else if (((icmp_ln41_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_reg_134 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_reg_295 <= d_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        f_reg_314 <= f_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln46_reg_306[3 : 0] <= zext_ln46_fu_186_p1[3 : 0];
        zext_ln48_reg_300[3 : 0] <= zext_ln48_fu_182_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (grp_soft_max_fu_157_ap_done == 1'b1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_soft_max_fu_157_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_2_out_V_ce0 = 1'b1;
    end else begin
        dense_2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_array_V_address0 = zext_ln48_reg_300;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dense_array_V_address0 = grp_soft_max_fu_157_dense_array_V_address0;
    end else begin
        dense_array_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_array_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dense_array_V_ce0 = grp_soft_max_fu_157_dense_array_V_ce0;
    end else begin
        dense_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_array_V_d0 = add_ln703_fu_276_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dense_array_V_d0 = grp_soft_max_fu_157_dense_array_V_d0;
    end else begin
        dense_array_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_array_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dense_array_V_we0 = grp_soft_max_fu_157_dense_array_V_we0;
    end else begin
        dense_array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_out_bias_V_ce0 = 1'b1;
    end else begin
        dense_out_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_out_weights_V_ce0 = 1'b1;
    end else begin
        dense_out_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln41_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln46_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_soft_max_fu_157_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_1_fu_237_p2 = (add_ln1116_fu_231_p2 + zext_ln46_reg_306);

assign add_ln1116_fu_231_p2 = (zext_ln1116_1_fu_227_p1 + zext_ln1116_fu_215_p1);

assign add_ln703_fu_276_p2 = ($signed(sext_ln1265_fu_272_p1) + $signed(p_Val2_s_reg_134));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign d_fu_176_p2 = (d_0_reg_123 + 4'd1);

assign dense_2_out_V_address0 = zext_ln48_1_fu_202_p1;

assign dense_out_bias_V_address0 = zext_ln48_reg_300;

assign dense_out_weights_V_address0 = zext_ln1116_2_fu_242_p1;

assign f_fu_196_p2 = (f_0_reg_146 + 5'd1);

assign grp_fu_283_p0 = grp_fu_283_p00;

assign grp_fu_283_p00 = dense_2_out_V_q0;

assign grp_fu_283_p2 = {{p_Val2_s_reg_134}, {8'd0}};

assign grp_soft_max_fu_157_ap_start = grp_soft_max_fu_157_ap_start_reg;

assign icmp_ln41_fu_170_p2 = ((d_0_reg_123 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_190_p2 = ((f_0_reg_146 == 5'd30) ? 1'b1 : 1'b0);

assign prediction_V_address0 = grp_soft_max_fu_157_prediction_V_address0;

assign prediction_V_ce0 = grp_soft_max_fu_157_prediction_V_ce0;

assign prediction_V_d0 = grp_soft_max_fu_157_prediction_V_d0;

assign prediction_V_we0 = grp_soft_max_fu_157_prediction_V_we0;

assign sext_ln1265_fu_272_p1 = $signed(dense_out_bias_V_q0);

assign tmp_1_fu_219_p3 = {{f_0_reg_146}, {1'd0}};

assign tmp_s_fu_207_p3 = {{f_0_reg_146}, {3'd0}};

assign zext_ln1116_1_fu_227_p1 = tmp_1_fu_219_p3;

assign zext_ln1116_2_fu_242_p1 = add_ln1116_1_fu_237_p2;

assign zext_ln1116_fu_215_p1 = tmp_s_fu_207_p3;

assign zext_ln46_fu_186_p1 = d_0_reg_123;

assign zext_ln48_1_fu_202_p1 = f_0_reg_146;

assign zext_ln48_fu_182_p1 = d_0_reg_123;

always @ (posedge ap_clk) begin
    zext_ln48_reg_300[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln46_reg_306[8:4] <= 5'b00000;
end

endmodule //dense_out
