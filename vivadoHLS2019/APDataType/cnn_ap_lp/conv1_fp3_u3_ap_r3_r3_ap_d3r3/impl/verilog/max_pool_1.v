// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_0_V_address0,
        conv_out_0_V_ce0,
        conv_out_0_V_q0,
        conv_out_1_V_address0,
        conv_out_1_V_ce0,
        conv_out_1_V_q0,
        conv_out_2_V_address0,
        conv_out_2_V_ce0,
        conv_out_2_V_q0,
        max_pool_out_V_address0,
        max_pool_out_V_ce0,
        max_pool_out_V_we0,
        max_pool_out_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] conv_out_0_V_address0;
output   conv_out_0_V_ce0;
input  [13:0] conv_out_0_V_q0;
output  [10:0] conv_out_1_V_address0;
output   conv_out_1_V_ce0;
input  [13:0] conv_out_1_V_q0;
output  [10:0] conv_out_2_V_address0;
output   conv_out_2_V_ce0;
input  [13:0] conv_out_2_V_q0;
output  [9:0] max_pool_out_V_address0;
output   max_pool_out_V_ce0;
output   max_pool_out_V_we0;
output  [13:0] max_pool_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_0_V_ce0;
reg conv_out_1_V_ce0;
reg conv_out_2_V_ce0;
reg max_pool_out_V_ce0;
reg max_pool_out_V_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] add_ln10_fu_242_p2;
reg   [6:0] add_ln10_reg_504;
wire    ap_CS_fsm_state2;
wire   [2:0] f_fu_254_p2;
reg   [2:0] f_reg_512;
wire   [10:0] zext_ln1494_fu_260_p1;
reg   [10:0] zext_ln1494_reg_517;
wire   [0:0] icmp_ln10_fu_248_p2;
wire   [31:0] zext_ln1494_1_fu_284_p1;
reg   [31:0] zext_ln1494_1_reg_522;
wire   [11:0] zext_ln13_fu_298_p1;
reg   [11:0] zext_ln13_reg_527;
wire   [7:0] add_ln13_fu_302_p2;
reg   [7:0] add_ln13_reg_532;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_314_p2;
reg   [3:0] r_reg_540;
wire   [4:0] shl_ln_fu_320_p3;
reg   [4:0] shl_ln_reg_545;
wire   [0:0] icmp_ln13_fu_308_p2;
wire   [3:0] c_fu_334_p2;
reg   [3:0] c_reg_553;
wire    ap_CS_fsm_state4;
wire   [4:0] shl_ln2_fu_340_p3;
reg   [4:0] shl_ln2_reg_558;
wire   [0:0] icmp_ln16_fu_328_p2;
wire   [1:0] mpr_fu_358_p2;
reg   [1:0] mpr_reg_566;
wire    ap_CS_fsm_state5;
wire   [9:0] mul_ln1494_fu_373_p2;
reg   [9:0] mul_ln1494_reg_571;
wire   [0:0] icmp_ln20_fu_352_p2;
wire   [1:0] mpc_fu_435_p2;
reg   [1:0] mpc_reg_579;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln23_fu_429_p2;
wire   [13:0] select_ln29_fu_496_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] f_0_reg_138;
reg   [6:0] phi_mul2_reg_149;
reg   [3:0] r_0_reg_160;
reg   [7:0] phi_mul_reg_171;
reg   [3:0] c_0_reg_183;
reg   [13:0] max_0_reg_195;
reg   [1:0] mpr_0_reg_208;
reg   [13:0] max_1_reg_219;
reg   [1:0] mpc_0_reg_231;
wire   [63:0] zext_ln203_5_fu_420_p1;
wire   [63:0] zext_ln1494_6_fu_472_p1;
wire   [0:0] icmp_ln1494_1_fu_264_p2;
wire   [2:0] add_ln1494_fu_270_p2;
wire   [2:0] select_ln1494_fu_276_p3;
wire   [1:0] tmp_1_fu_288_p4;
wire   [4:0] zext_ln20_fu_348_p1;
wire   [4:0] i_fu_364_p2;
wire   [4:0] mul_ln1494_fu_373_p0;
wire   [7:0] zext_ln203_fu_379_p1;
wire   [7:0] add_ln203_fu_383_p2;
wire   [8:0] tmp_2_fu_397_p3;
wire   [10:0] p_shl_cast_fu_389_p3;
wire   [10:0] zext_ln203_4_fu_405_p1;
wire   [10:0] sub_ln203_fu_409_p2;
wire   [10:0] add_ln203_3_fu_415_p2;
wire   [4:0] zext_ln23_fu_425_p1;
wire   [4:0] j_fu_441_p2;
wire   [9:0] zext_ln1494_4_fu_446_p1;
wire   [9:0] add_ln1494_2_fu_450_p2;
wire   [10:0] tmp_3_fu_455_p3;
wire   [11:0] zext_ln1494_5_fu_463_p1;
wire   [11:0] add_ln1494_3_fu_467_p2;
wire   [13:0] max_V_fu_479_p5;
wire   [0:0] icmp_ln1494_fu_490_p2;
reg   [6:0] ap_NS_fsm;
wire   [9:0] mul_ln1494_fu_373_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

cnn_mux_332_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 14 ))
cnn_mux_332_14_1_1_U55(
    .din0(conv_out_0_V_q0),
    .din1(conv_out_1_V_q0),
    .din2(conv_out_2_V_q0),
    .din3(zext_ln1494_1_reg_522),
    .dout(max_V_fu_479_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_352_p2 == 1'd1))) begin
        c_0_reg_183 <= c_reg_553;
    end else if (((icmp_ln13_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_183 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_138 <= f_reg_512;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_138 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_429_p2 == 1'd1))) begin
        max_0_reg_195 <= max_1_reg_219;
    end else if (((icmp_ln16_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_195 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_1_reg_219 <= select_ln29_fu_496_p3;
    end else if (((icmp_ln20_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_1_reg_219 <= max_0_reg_195;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mpc_0_reg_231 <= mpc_reg_579;
    end else if (((icmp_ln20_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mpc_0_reg_231 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_429_p2 == 1'd1))) begin
        mpr_0_reg_208 <= mpr_reg_566;
    end else if (((icmp_ln16_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_208 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul2_reg_149 <= add_ln10_reg_504;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_149 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_171 <= add_ln13_reg_532;
    end else if (((icmp_ln10_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_171 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_160 <= r_reg_540;
    end else if (((icmp_ln10_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_160 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln10_reg_504 <= add_ln10_fu_242_p2;
        f_reg_512 <= f_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_532 <= add_ln13_fu_302_p2;
        r_reg_540 <= r_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_553 <= c_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_reg_579 <= mpc_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_566 <= mpr_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln1494_reg_571[9 : 1] <= mul_ln1494_fu_373_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln2_reg_558[4 : 1] <= shl_ln2_fu_340_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_545[4 : 1] <= shl_ln_fu_320_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_reg_527[1 : 0] <= zext_ln13_fu_298_p1[1 : 0];
        zext_ln1494_1_reg_522[2 : 0] <= zext_ln1494_1_fu_284_p1[2 : 0];
        zext_ln1494_reg_517[2 : 0] <= zext_ln1494_fu_260_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln10_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_0_V_ce0 = 1'b1;
    end else begin
        conv_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_1_V_ce0 = 1'b1;
    end else begin
        conv_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_2_V_ce0 = 1'b1;
    end else begin
        conv_out_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_V_ce0 = 1'b1;
    end else begin
        max_pool_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_352_p2 == 1'd1))) begin
        max_pool_out_V_we0 = 1'b1;
    end else begin
        max_pool_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_308_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_352_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_429_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_242_p2 = (phi_mul2_reg_149 + 7'd11);

assign add_ln13_fu_302_p2 = (phi_mul_reg_171 + 8'd13);

assign add_ln1494_2_fu_450_p2 = (mul_ln1494_reg_571 + zext_ln1494_4_fu_446_p1);

assign add_ln1494_3_fu_467_p2 = (zext_ln1494_5_fu_463_p1 + zext_ln13_reg_527);

assign add_ln1494_fu_270_p2 = ($signed(f_0_reg_138) + $signed(3'd5));

assign add_ln203_3_fu_415_p2 = (zext_ln1494_reg_517 + sub_ln203_fu_409_p2);

assign add_ln203_fu_383_p2 = (zext_ln203_fu_379_p1 + phi_mul_reg_171);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign c_fu_334_p2 = (c_0_reg_183 + 4'd1);

assign conv_out_0_V_address0 = zext_ln1494_6_fu_472_p1;

assign conv_out_1_V_address0 = zext_ln1494_6_fu_472_p1;

assign conv_out_2_V_address0 = zext_ln1494_6_fu_472_p1;

assign f_fu_254_p2 = (f_0_reg_138 + 3'd1);

assign i_fu_364_p2 = (zext_ln20_fu_348_p1 + shl_ln_reg_545);

assign icmp_ln10_fu_248_p2 = ((f_0_reg_138 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_308_p2 = ((r_0_reg_160 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_264_p2 = ((f_0_reg_138 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_490_p2 = (($signed(max_V_fu_479_p5) > $signed(max_1_reg_219)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_328_p2 = ((c_0_reg_183 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_352_p2 = ((mpr_0_reg_208 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_429_p2 = ((mpc_0_reg_231 == 2'd2) ? 1'b1 : 1'b0);

assign j_fu_441_p2 = (zext_ln23_fu_425_p1 + shl_ln2_reg_558);

assign max_pool_out_V_address0 = zext_ln203_5_fu_420_p1;

assign max_pool_out_V_d0 = max_0_reg_195;

assign mpc_fu_435_p2 = (mpc_0_reg_231 + 2'd1);

assign mpr_fu_358_p2 = (mpr_0_reg_208 + 2'd1);

assign mul_ln1494_fu_373_p0 = mul_ln1494_fu_373_p00;

assign mul_ln1494_fu_373_p00 = i_fu_364_p2;

assign mul_ln1494_fu_373_p2 = (mul_ln1494_fu_373_p0 * $signed('h1A));

assign p_shl_cast_fu_389_p3 = {{add_ln203_fu_383_p2}, {3'd0}};

assign r_fu_314_p2 = (r_0_reg_160 + 4'd1);

assign select_ln1494_fu_276_p3 = ((icmp_ln1494_1_fu_264_p2[0:0] === 1'b1) ? f_0_reg_138 : add_ln1494_fu_270_p2);

assign select_ln29_fu_496_p3 = ((icmp_ln1494_fu_490_p2[0:0] === 1'b1) ? max_V_fu_479_p5 : max_1_reg_219);

assign shl_ln2_fu_340_p3 = {{c_0_reg_183}, {1'd0}};

assign shl_ln_fu_320_p3 = {{r_0_reg_160}, {1'd0}};

assign sub_ln203_fu_409_p2 = (p_shl_cast_fu_389_p3 - zext_ln203_4_fu_405_p1);

assign tmp_1_fu_288_p4 = {{phi_mul2_reg_149[6:5]}};

assign tmp_2_fu_397_p3 = {{add_ln203_fu_383_p2}, {1'd0}};

assign tmp_3_fu_455_p3 = {{add_ln1494_2_fu_450_p2}, {1'd0}};

assign zext_ln13_fu_298_p1 = tmp_1_fu_288_p4;

assign zext_ln1494_1_fu_284_p1 = select_ln1494_fu_276_p3;

assign zext_ln1494_4_fu_446_p1 = j_fu_441_p2;

assign zext_ln1494_5_fu_463_p1 = tmp_3_fu_455_p3;

assign zext_ln1494_6_fu_472_p1 = add_ln1494_3_fu_467_p2;

assign zext_ln1494_fu_260_p1 = f_0_reg_138;

assign zext_ln203_4_fu_405_p1 = tmp_2_fu_397_p3;

assign zext_ln203_5_fu_420_p1 = add_ln203_3_fu_415_p2;

assign zext_ln203_fu_379_p1 = c_0_reg_183;

assign zext_ln20_fu_348_p1 = mpr_0_reg_208;

assign zext_ln23_fu_425_p1 = mpc_0_reg_231;

always @ (posedge ap_clk) begin
    zext_ln1494_reg_517[10:3] <= 8'b00000000;
    zext_ln1494_1_reg_522[31:3] <= 29'b00000000000000000000000000000;
    zext_ln13_reg_527[11:2] <= 10'b0000000000;
    shl_ln_reg_545[0] <= 1'b0;
    shl_ln2_reg_558[0] <= 1'b0;
    mul_ln1494_reg_571[0] <= 1'b0;
end

endmodule //max_pool_1
