-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_0_V_ce0 : OUT STD_LOGIC;
    conv_out_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_0_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_0_V_ce1 : OUT STD_LOGIC;
    conv_out_0_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_1_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_1_V_ce0 : OUT STD_LOGIC;
    conv_out_1_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_1_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_1_V_ce1 : OUT STD_LOGIC;
    conv_out_1_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_out_V_ce0 : OUT STD_LOGIC;
    max_pool_out_V_we0 : OUT STD_LOGIC;
    max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_3F6 : STD_LOGIC_VECTOR (9 downto 0) := "1111110110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_143 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_0_reg_154 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_176 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_188 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln10_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_543_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_543_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_206_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_5_fu_224_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_5_reg_559 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_fu_238_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_1_fu_295_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_reg_571 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal zext_ln1494_5_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_5_reg_576 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1494_4_fu_414_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_4_reg_586 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_3_fu_448_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_3_reg_591 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_3_reg_591_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal c_fu_454_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_596 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_fu_470_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln29_reg_606 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_158_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_180_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_192_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1494_8_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_6_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_fu_212_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln13_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln16_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_4_fu_246_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln29_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_276_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1494_fu_311_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_fu_287_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_317_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1494_3_fu_325_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1494_fu_311_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1494_fu_329_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_343_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_335_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1494_4_fu_351_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln36_1_fu_256_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1494_fu_355_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_2_fu_361_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln27_fu_372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1494_6_fu_378_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1494_3_fu_382_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_396_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_388_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1494_7_fu_404_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1494_1_fu_408_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_533_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_431_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_424_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_5_fu_438_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_fu_253_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_fu_442_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1494_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1494_fu_460_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_fu_483_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_1_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_1_fu_492_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_2_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_2_fu_506_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_3_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_533_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_533_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_533_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_533_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_533_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_fu_311_p10 : STD_LOGIC_VECTOR (8 downto 0);

    component cnn_mac_muladd_5nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    cnn_mac_muladd_5nfYi_U10 : component cnn_mac_muladd_5nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_533_p0,
        din1 => grp_fu_533_p1,
        din2 => grp_fu_533_p2,
        dout => grp_fu_533_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_543_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                c_0_reg_188 <= c_reg_596;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_188 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                f_0_reg_154 <= select_ln29_5_reg_559;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_154 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_143 <= add_ln10_fu_206_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_143 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_165 <= select_ln13_fu_238_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_165 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_543_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                r_0_reg_176 <= select_ln36_1_reg_571;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_176 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_543 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1494_4_reg_586 <= add_ln1494_4_fu_414_p2;
                add_ln203_3_reg_591 <= add_ln203_3_fu_448_p2;
                    zext_ln1494_5_reg_576(11 downto 0) <= zext_ln1494_5_fu_367_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln203_3_reg_591_pp0_iter2_reg <= add_ln203_3_reg_591;
                icmp_ln10_reg_543_pp0_iter2_reg <= icmp_ln10_reg_543_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                c_reg_596 <= c_fu_454_p2;
                select_ln36_1_reg_571 <= select_ln36_1_fu_295_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_543 <= icmp_ln10_fu_200_p2;
                icmp_ln10_reg_543_pp0_iter1_reg <= icmp_ln10_reg_543;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln13_reg_552 <= icmp_ln13_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln29_5_reg_559 <= select_ln29_5_fu_224_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_543_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_reg_606 <= select_ln29_fu_470_p3;
            end if;
        end if;
    end process;
    zext_ln1494_5_reg_576(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_200_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln10_fu_200_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln10_fu_200_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_206_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_143) + unsigned(ap_const_lv10_1));
    add_ln13_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten_reg_165));
    add_ln1494_2_fu_361_p2 <= std_logic_vector(unsigned(zext_ln36_1_fu_256_p1) + unsigned(sub_ln1494_fu_355_p2));
    add_ln1494_3_fu_382_p2 <= std_logic_vector(unsigned(zext_ln1494_6_fu_378_p1) + unsigned(mul_ln1494_fu_311_p2));
    add_ln1494_4_fu_414_p2 <= std_logic_vector(unsigned(zext_ln36_1_fu_256_p1) + unsigned(sub_ln1494_1_fu_408_p2));
    add_ln1494_fu_329_p2 <= std_logic_vector(unsigned(zext_ln1494_3_fu_325_p1) + unsigned(mul_ln1494_fu_311_p2));
    add_ln203_3_fu_448_p2 <= std_logic_vector(unsigned(zext_ln36_fu_253_p1) + unsigned(sub_ln203_fu_442_p2));
    and_ln29_fu_270_p2 <= (xor_ln29_fu_259_p2 and icmp_ln16_fu_264_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_200_p2)
    begin
        if ((icmp_ln10_fu_200_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_192_p4_assign_proc : process(c_0_reg_188, icmp_ln10_reg_543_pp0_iter1_reg, c_reg_596, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_543_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_192_p4 <= c_reg_596;
        else 
            ap_phi_mux_c_0_phi_fu_192_p4 <= c_0_reg_188;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_158_p4_assign_proc : process(f_0_reg_154, icmp_ln10_reg_543, ap_CS_fsm_pp0_stage0, select_ln29_5_reg_559, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_158_p4 <= select_ln29_5_reg_559;
        else 
            ap_phi_mux_f_0_phi_fu_158_p4 <= f_0_reg_154;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_180_p4_assign_proc : process(r_0_reg_176, icmp_ln10_reg_543_pp0_iter1_reg, select_ln36_1_reg_571, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_543_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_180_p4 <= select_ln36_1_reg_571;
        else 
            ap_phi_mux_r_0_phi_fu_180_p4 <= r_0_reg_176;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln36_fu_287_p3));
    conv_out_0_V_address0 <= zext_ln1494_5_fu_367_p1(11 - 1 downto 0);
    conv_out_0_V_address1 <= zext_ln1494_8_fu_478_p1(11 - 1 downto 0);

    conv_out_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_out_0_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_0_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_out_0_V_ce1 <= ap_const_logic_1;
        else 
            conv_out_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_V_address0 <= zext_ln1494_5_reg_576(11 - 1 downto 0);
    conv_out_1_V_address1 <= zext_ln1494_8_fu_478_p1(11 - 1 downto 0);

    conv_out_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_out_1_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_1_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_out_1_V_ce1 <= ap_const_logic_1;
        else 
            conv_out_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_212_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_f_0_phi_fu_158_p4));
    grp_fu_533_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_533_p1 <= grp_fu_533_p10(4 - 1 downto 0);
    grp_fu_533_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_295_p3),8));
    grp_fu_533_p2 <= grp_fu_533_p20(4 - 1 downto 0);
    grp_fu_533_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_fu_287_p3),8));
    icmp_ln10_fu_200_p2 <= "1" when (indvar_flatten13_reg_143 = ap_const_lv10_3F6) else "0";
    icmp_ln13_fu_218_p2 <= "1" when (indvar_flatten_reg_165 = ap_const_lv8_A9) else "0";
    icmp_ln1494_1_fu_486_p2 <= "1" when (signed(conv_out_0_V_q1) > signed(zext_ln29_fu_483_p1)) else "0";
    icmp_ln1494_2_fu_500_p2 <= "1" when (signed(conv_out_1_V_q0) > signed(select_ln29_1_fu_492_p3)) else "0";
    icmp_ln1494_3_fu_514_p2 <= "1" when (signed(conv_out_1_V_q1) > signed(select_ln29_2_fu_506_p3)) else "0";
    icmp_ln1494_fu_464_p2 <= "1" when (signed(conv_out_0_V_q0) > signed(ap_const_lv14_0)) else "0";
    icmp_ln16_fu_264_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_192_p4 = ap_const_lv4_D) else "0";
    max_pool_out_V_address0 <= zext_ln203_6_fu_529_p1(10 - 1 downto 0);

    max_pool_out_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_out_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_V_d0 <= 
        conv_out_1_V_q1 when (icmp_ln1494_3_fu_514_p2(0) = '1') else 
        select_ln29_2_fu_506_p3;

    max_pool_out_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln10_reg_543_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((icmp_ln10_reg_543_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_out_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1494_fu_311_p1 <= mul_ln1494_fu_311_p10(4 - 1 downto 0);
    mul_ln1494_fu_311_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_295_p3),9));
    mul_ln1494_fu_311_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv9_1A) * unsigned(mul_ln1494_fu_311_p1), 9));
    or_ln27_fu_372_p2 <= (shl_ln_fu_317_p3 or ap_const_lv5_1);
    or_ln36_fu_282_p2 <= (icmp_ln13_reg_552 or and_ln29_fu_270_p2);
    p_shl2_cast_fu_388_p3 <= (add_ln1494_3_fu_382_p2 & ap_const_lv3_0);
    p_shl4_cast_fu_335_p3 <= (add_ln1494_fu_329_p2 & ap_const_lv3_0);
    p_shl_cast_fu_424_p3 <= (grp_fu_533_p3 & ap_const_lv3_0);
    r_fu_276_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln29_4_fu_246_p3));
    select_ln13_fu_238_p3 <= 
        ap_const_lv8_1 when (icmp_ln13_fu_218_p2(0) = '1') else 
        add_ln13_fu_232_p2;
    select_ln29_1_fu_492_p3 <= 
        conv_out_0_V_q1 when (icmp_ln1494_1_fu_486_p2(0) = '1') else 
        zext_ln29_fu_483_p1;
    select_ln29_2_fu_506_p3 <= 
        conv_out_1_V_q0 when (icmp_ln1494_2_fu_500_p2(0) = '1') else 
        select_ln29_1_fu_492_p3;
    select_ln29_4_fu_246_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_reg_552(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_180_p4;
    select_ln29_5_fu_224_p3 <= 
        f_fu_212_p2 when (icmp_ln13_fu_218_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_158_p4;
    select_ln29_fu_470_p3 <= 
        trunc_ln1494_fu_460_p1 when (icmp_ln1494_fu_464_p2(0) = '1') else 
        ap_const_lv13_0;
    select_ln36_1_fu_295_p3 <= 
        r_fu_276_p2 when (and_ln29_fu_270_p2(0) = '1') else 
        select_ln29_4_fu_246_p3;
    select_ln36_fu_287_p3 <= 
        ap_const_lv4_0 when (or_ln36_fu_282_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_192_p4;
    shl_ln_fu_317_p3 <= (select_ln36_fu_287_p3 & ap_const_lv1_0);
    sub_ln1494_1_fu_408_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_388_p3) - unsigned(zext_ln1494_7_fu_404_p1));
    sub_ln1494_fu_355_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_335_p3) - unsigned(zext_ln1494_4_fu_351_p1));
    sub_ln203_fu_442_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_424_p3) - unsigned(zext_ln203_5_fu_438_p1));
    tmp_1_fu_396_p3 <= (add_ln1494_3_fu_382_p2 & ap_const_lv1_0);
    tmp_2_fu_431_p3 <= (grp_fu_533_p3 & ap_const_lv1_0);
    tmp_fu_343_p3 <= (add_ln1494_fu_329_p2 & ap_const_lv1_0);
    trunc_ln1494_fu_460_p1 <= conv_out_0_V_q0(13 - 1 downto 0);
    xor_ln29_fu_259_p2 <= (icmp_ln13_reg_552 xor ap_const_lv1_1);
    zext_ln1494_3_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_317_p3),9));
    zext_ln1494_4_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_343_p3),12));
    zext_ln1494_5_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_2_fu_361_p2),64));
    zext_ln1494_6_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_372_p2),9));
    zext_ln1494_7_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_396_p3),12));
    zext_ln1494_8_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_4_reg_586),64));
    zext_ln203_5_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_431_p3),11));
    zext_ln203_6_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_3_reg_591_pp0_iter2_reg),64));
    zext_ln29_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_reg_606),14));
    zext_ln36_1_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_reg_559),12));
    zext_ln36_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_reg_559),11));
end behav;
