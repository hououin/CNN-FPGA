// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_0_V_address0,
        conv_out_0_V_ce0,
        conv_out_0_V_q0,
        conv_out_0_V_address1,
        conv_out_0_V_ce1,
        conv_out_0_V_q1,
        conv_out_1_V_address0,
        conv_out_1_V_ce0,
        conv_out_1_V_q0,
        conv_out_1_V_address1,
        conv_out_1_V_ce1,
        conv_out_1_V_q1,
        max_pool_out_V_address0,
        max_pool_out_V_ce0,
        max_pool_out_V_we0,
        max_pool_out_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] conv_out_0_V_address0;
output   conv_out_0_V_ce0;
input  [13:0] conv_out_0_V_q0;
output  [10:0] conv_out_0_V_address1;
output   conv_out_0_V_ce1;
input  [13:0] conv_out_0_V_q1;
output  [10:0] conv_out_1_V_address0;
output   conv_out_1_V_ce0;
input  [13:0] conv_out_1_V_q0;
output  [10:0] conv_out_1_V_address1;
output   conv_out_1_V_ce1;
input  [13:0] conv_out_1_V_q1;
output  [9:0] max_pool_out_V_address0;
output   max_pool_out_V_ce0;
output   max_pool_out_V_we0;
output  [13:0] max_pool_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_0_V_ce0;
reg conv_out_0_V_ce1;
reg conv_out_1_V_ce0;
reg conv_out_1_V_ce1;
reg max_pool_out_V_ce0;
reg max_pool_out_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten13_reg_143;
reg   [2:0] f_0_reg_154;
reg   [7:0] indvar_flatten_reg_165;
reg   [3:0] r_0_reg_176;
reg   [3:0] c_0_reg_188;
wire   [0:0] icmp_ln10_fu_200_p2;
reg   [0:0] icmp_ln10_reg_543;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_543_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_543_pp0_iter2_reg;
wire   [9:0] add_ln10_fu_206_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_218_p2;
reg   [0:0] icmp_ln13_reg_552;
wire   [2:0] select_ln29_5_fu_224_p3;
reg   [2:0] select_ln29_5_reg_559;
wire   [7:0] select_ln13_fu_238_p3;
wire   [3:0] select_ln36_1_fu_295_p3;
reg   [3:0] select_ln36_1_reg_571;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln1494_5_fu_367_p1;
reg   [63:0] zext_ln1494_5_reg_576;
wire   [11:0] add_ln1494_4_fu_414_p2;
reg   [11:0] add_ln1494_4_reg_586;
wire   [10:0] add_ln203_3_fu_448_p2;
reg   [10:0] add_ln203_3_reg_591;
reg   [10:0] add_ln203_3_reg_591_pp0_iter2_reg;
wire   [3:0] c_fu_454_p2;
reg   [3:0] c_reg_596;
wire   [12:0] select_ln29_fu_470_p3;
reg   [12:0] select_ln29_reg_606;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [2:0] ap_phi_mux_f_0_phi_fu_158_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_r_0_phi_fu_180_p4;
reg   [3:0] ap_phi_mux_c_0_phi_fu_192_p4;
wire   [63:0] zext_ln1494_8_fu_478_p1;
wire   [63:0] zext_ln203_6_fu_529_p1;
wire   [2:0] f_fu_212_p2;
wire   [7:0] add_ln13_fu_232_p2;
wire   [0:0] icmp_ln16_fu_264_p2;
wire   [0:0] xor_ln29_fu_259_p2;
wire   [3:0] select_ln29_4_fu_246_p3;
wire   [0:0] and_ln29_fu_270_p2;
wire   [0:0] or_ln36_fu_282_p2;
wire   [3:0] r_fu_276_p2;
wire   [3:0] mul_ln1494_fu_311_p1;
wire   [3:0] select_ln36_fu_287_p3;
wire   [4:0] shl_ln_fu_317_p3;
wire   [8:0] zext_ln1494_3_fu_325_p1;
wire   [8:0] mul_ln1494_fu_311_p2;
wire   [8:0] add_ln1494_fu_329_p2;
wire   [9:0] tmp_fu_343_p3;
wire   [11:0] p_shl4_cast_fu_335_p3;
wire   [11:0] zext_ln1494_4_fu_351_p1;
wire   [11:0] zext_ln36_1_fu_256_p1;
wire   [11:0] sub_ln1494_fu_355_p2;
wire   [11:0] add_ln1494_2_fu_361_p2;
wire   [4:0] or_ln27_fu_372_p2;
wire   [8:0] zext_ln1494_6_fu_378_p1;
wire   [8:0] add_ln1494_3_fu_382_p2;
wire   [9:0] tmp_1_fu_396_p3;
wire   [11:0] p_shl2_cast_fu_388_p3;
wire   [11:0] zext_ln1494_7_fu_404_p1;
wire   [11:0] sub_ln1494_1_fu_408_p2;
wire   [7:0] grp_fu_533_p3;
wire   [8:0] tmp_2_fu_431_p3;
wire   [10:0] p_shl_cast_fu_424_p3;
wire   [10:0] zext_ln203_5_fu_438_p1;
wire   [10:0] zext_ln36_fu_253_p1;
wire   [10:0] sub_ln203_fu_442_p2;
wire   [0:0] icmp_ln1494_fu_464_p2;
wire   [12:0] trunc_ln1494_fu_460_p1;
wire   [13:0] zext_ln29_fu_483_p1;
wire   [0:0] icmp_ln1494_1_fu_486_p2;
wire   [13:0] select_ln29_1_fu_492_p3;
wire   [0:0] icmp_ln1494_2_fu_500_p2;
wire   [13:0] select_ln29_2_fu_506_p3;
wire   [0:0] icmp_ln1494_3_fu_514_p2;
wire   [4:0] grp_fu_533_p0;
wire   [3:0] grp_fu_533_p1;
wire   [3:0] grp_fu_533_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_533_p10;
wire   [7:0] grp_fu_533_p20;
wire   [8:0] mul_ln1494_fu_311_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

cnn_mac_muladd_5nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
cnn_mac_muladd_5nfYi_U10(
    .din0(grp_fu_533_p0),
    .din1(grp_fu_533_p1),
    .din2(grp_fu_533_p2),
    .dout(grp_fu_533_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_543_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_0_reg_188 <= c_reg_596;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_188 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_0_reg_154 <= select_ln29_5_reg_559;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_154 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_143 <= add_ln10_fu_206_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_143 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_165 <= select_ln13_fu_238_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_165 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_543_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_0_reg_176 <= select_ln36_1_reg_571;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_176 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1494_4_reg_586 <= add_ln1494_4_fu_414_p2;
        add_ln203_3_reg_591 <= add_ln203_3_fu_448_p2;
        zext_ln1494_5_reg_576[11 : 0] <= zext_ln1494_5_fu_367_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln203_3_reg_591_pp0_iter2_reg <= add_ln203_3_reg_591;
        icmp_ln10_reg_543_pp0_iter2_reg <= icmp_ln10_reg_543_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_reg_596 <= c_fu_454_p2;
        select_ln36_1_reg_571 <= select_ln36_1_fu_295_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_543 <= icmp_ln10_fu_200_p2;
        icmp_ln10_reg_543_pp0_iter1_reg <= icmp_ln10_reg_543;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_200_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_reg_552 <= icmp_ln13_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln29_5_reg_559 <= select_ln29_5_fu_224_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_543_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_reg_606 <= select_ln29_fu_470_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_200_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_543_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_192_p4 = c_reg_596;
    end else begin
        ap_phi_mux_c_0_phi_fu_192_p4 = c_0_reg_188;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_158_p4 = select_ln29_5_reg_559;
    end else begin
        ap_phi_mux_f_0_phi_fu_158_p4 = f_0_reg_154;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_543_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_180_p4 = select_ln36_1_reg_571;
    end else begin
        ap_phi_mux_r_0_phi_fu_180_p4 = r_0_reg_176;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_out_0_V_ce0 = 1'b1;
    end else begin
        conv_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_out_0_V_ce1 = 1'b1;
    end else begin
        conv_out_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_out_1_V_ce0 = 1'b1;
    end else begin
        conv_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_out_1_V_ce1 = 1'b1;
    end else begin
        conv_out_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_pool_out_V_ce0 = 1'b1;
    end else begin
        max_pool_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_543_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_pool_out_V_we0 = 1'b1;
    end else begin
        max_pool_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln10_fu_200_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln10_fu_200_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_206_p2 = (indvar_flatten13_reg_143 + 10'd1);

assign add_ln13_fu_232_p2 = (8'd1 + indvar_flatten_reg_165);

assign add_ln1494_2_fu_361_p2 = (zext_ln36_1_fu_256_p1 + sub_ln1494_fu_355_p2);

assign add_ln1494_3_fu_382_p2 = (zext_ln1494_6_fu_378_p1 + mul_ln1494_fu_311_p2);

assign add_ln1494_4_fu_414_p2 = (zext_ln36_1_fu_256_p1 + sub_ln1494_1_fu_408_p2);

assign add_ln1494_fu_329_p2 = (zext_ln1494_3_fu_325_p1 + mul_ln1494_fu_311_p2);

assign add_ln203_3_fu_448_p2 = (zext_ln36_fu_253_p1 + sub_ln203_fu_442_p2);

assign and_ln29_fu_270_p2 = (xor_ln29_fu_259_p2 & icmp_ln16_fu_264_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_454_p2 = (4'd1 + select_ln36_fu_287_p3);

assign conv_out_0_V_address0 = zext_ln1494_5_fu_367_p1;

assign conv_out_0_V_address1 = zext_ln1494_8_fu_478_p1;

assign conv_out_1_V_address0 = zext_ln1494_5_reg_576;

assign conv_out_1_V_address1 = zext_ln1494_8_fu_478_p1;

assign f_fu_212_p2 = (3'd1 + ap_phi_mux_f_0_phi_fu_158_p4);

assign grp_fu_533_p0 = 8'd13;

assign grp_fu_533_p1 = grp_fu_533_p10;

assign grp_fu_533_p10 = select_ln36_1_fu_295_p3;

assign grp_fu_533_p2 = grp_fu_533_p20;

assign grp_fu_533_p20 = select_ln36_fu_287_p3;

assign icmp_ln10_fu_200_p2 = ((indvar_flatten13_reg_143 == 10'd1014) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_218_p2 = ((indvar_flatten_reg_165 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_486_p2 = (($signed(conv_out_0_V_q1) > $signed(zext_ln29_fu_483_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_500_p2 = (($signed(conv_out_1_V_q0) > $signed(select_ln29_1_fu_492_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_514_p2 = (($signed(conv_out_1_V_q1) > $signed(select_ln29_2_fu_506_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_464_p2 = (($signed(conv_out_0_V_q0) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_264_p2 = ((ap_phi_mux_c_0_phi_fu_192_p4 == 4'd13) ? 1'b1 : 1'b0);

assign max_pool_out_V_address0 = zext_ln203_6_fu_529_p1;

assign max_pool_out_V_d0 = ((icmp_ln1494_3_fu_514_p2[0:0] === 1'b1) ? conv_out_1_V_q1 : select_ln29_2_fu_506_p3);

assign mul_ln1494_fu_311_p1 = mul_ln1494_fu_311_p10;

assign mul_ln1494_fu_311_p10 = select_ln36_1_fu_295_p3;

assign mul_ln1494_fu_311_p2 = (9'd26 * mul_ln1494_fu_311_p1);

assign or_ln27_fu_372_p2 = (shl_ln_fu_317_p3 | 5'd1);

assign or_ln36_fu_282_p2 = (icmp_ln13_reg_552 | and_ln29_fu_270_p2);

assign p_shl2_cast_fu_388_p3 = {{add_ln1494_3_fu_382_p2}, {3'd0}};

assign p_shl4_cast_fu_335_p3 = {{add_ln1494_fu_329_p2}, {3'd0}};

assign p_shl_cast_fu_424_p3 = {{grp_fu_533_p3}, {3'd0}};

assign r_fu_276_p2 = (4'd1 + select_ln29_4_fu_246_p3);

assign select_ln13_fu_238_p3 = ((icmp_ln13_fu_218_p2[0:0] === 1'b1) ? 8'd1 : add_ln13_fu_232_p2);

assign select_ln29_1_fu_492_p3 = ((icmp_ln1494_1_fu_486_p2[0:0] === 1'b1) ? conv_out_0_V_q1 : zext_ln29_fu_483_p1);

assign select_ln29_2_fu_506_p3 = ((icmp_ln1494_2_fu_500_p2[0:0] === 1'b1) ? conv_out_1_V_q0 : select_ln29_1_fu_492_p3);

assign select_ln29_4_fu_246_p3 = ((icmp_ln13_reg_552[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_r_0_phi_fu_180_p4);

assign select_ln29_5_fu_224_p3 = ((icmp_ln13_fu_218_p2[0:0] === 1'b1) ? f_fu_212_p2 : ap_phi_mux_f_0_phi_fu_158_p4);

assign select_ln29_fu_470_p3 = ((icmp_ln1494_fu_464_p2[0:0] === 1'b1) ? trunc_ln1494_fu_460_p1 : 13'd0);

assign select_ln36_1_fu_295_p3 = ((and_ln29_fu_270_p2[0:0] === 1'b1) ? r_fu_276_p2 : select_ln29_4_fu_246_p3);

assign select_ln36_fu_287_p3 = ((or_ln36_fu_282_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_c_0_phi_fu_192_p4);

assign shl_ln_fu_317_p3 = {{select_ln36_fu_287_p3}, {1'd0}};

assign sub_ln1494_1_fu_408_p2 = (p_shl2_cast_fu_388_p3 - zext_ln1494_7_fu_404_p1);

assign sub_ln1494_fu_355_p2 = (p_shl4_cast_fu_335_p3 - zext_ln1494_4_fu_351_p1);

assign sub_ln203_fu_442_p2 = (p_shl_cast_fu_424_p3 - zext_ln203_5_fu_438_p1);

assign tmp_1_fu_396_p3 = {{add_ln1494_3_fu_382_p2}, {1'd0}};

assign tmp_2_fu_431_p3 = {{grp_fu_533_p3}, {1'd0}};

assign tmp_fu_343_p3 = {{add_ln1494_fu_329_p2}, {1'd0}};

assign trunc_ln1494_fu_460_p1 = conv_out_0_V_q0[12:0];

assign xor_ln29_fu_259_p2 = (icmp_ln13_reg_552 ^ 1'd1);

assign zext_ln1494_3_fu_325_p1 = shl_ln_fu_317_p3;

assign zext_ln1494_4_fu_351_p1 = tmp_fu_343_p3;

assign zext_ln1494_5_fu_367_p1 = add_ln1494_2_fu_361_p2;

assign zext_ln1494_6_fu_378_p1 = or_ln27_fu_372_p2;

assign zext_ln1494_7_fu_404_p1 = tmp_1_fu_396_p3;

assign zext_ln1494_8_fu_478_p1 = add_ln1494_4_reg_586;

assign zext_ln203_5_fu_438_p1 = tmp_2_fu_431_p3;

assign zext_ln203_6_fu_529_p1 = add_ln203_3_reg_591_pp0_iter2_reg;

assign zext_ln29_fu_483_p1 = select_ln29_reg_606;

assign zext_ln36_1_fu_256_p1 = select_ln29_5_reg_559;

assign zext_ln36_fu_253_p1 = select_ln29_5_reg_559;

always @ (posedge ap_clk) begin
    zext_ln1494_5_reg_576[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_1
