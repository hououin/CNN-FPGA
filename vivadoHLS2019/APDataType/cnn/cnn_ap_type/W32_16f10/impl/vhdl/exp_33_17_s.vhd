-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exp_33_17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (32 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of exp_33_17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv23_78A013 : STD_LOGIC_VECTOR (22 downto 0) := "11110001010000000010011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv46_3FFFFFFFFFFF : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111111111111111111111111111111111";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv33_FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "011111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_914_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_914_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_914_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_914_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_914_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_914_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_reg_920 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_920_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_reg_920_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_fu_509_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_925 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_519_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_930 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_reg_930_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln281_8_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_945 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_945_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_945_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_945_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_945_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_945_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_8_reg_945_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_950 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_950_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_950_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_950_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_950_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_950_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_17_reg_950_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_x_msb_3_V_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_676_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_960 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_960_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_960_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln612_2_fu_682_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_2_reg_966 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_2_reg_966_pp0_iter2_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln612_2_reg_966_pp0_iter3_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal rhs_V_3_fu_686_p5 : STD_LOGIC_VECTOR (46 downto 0);
    signal rhs_V_3_reg_972 : STD_LOGIC_VECTOR (46 downto 0);
    signal rhs_V_3_reg_972_pp0_iter3_reg : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_s_reg_987 : STD_LOGIC_VECTOR (44 downto 0);
    signal exp_x_msb_2_3_4_lsb_s_reg_997 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1002 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1002_pp0_iter5_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_1002_pp0_iter6_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal y_lo_s_V_reg_1018 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_2_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_l_V_fu_199_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_27_fu_203_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln612_fu_213_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln612_fu_213_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_225_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal x_l_V_fu_199_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_Result_s_fu_233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_261_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_289_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_317_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_331_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_359_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_56_fu_373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_fu_387_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_401_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_fu_429_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_457_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_471_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_485_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_499_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_V_fu_509_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_V_1_fu_519_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_27_fu_203_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_28_fu_217_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln281_1_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_1_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_3_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_4_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_1_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_2_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_2_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_5_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_6_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_8_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_9_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_5_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_7_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_6_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_4_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_7_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_3_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_10_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_11_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_13_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_14_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_10_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_12_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_11_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_9_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_15_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_16_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_18_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln281_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_14_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_17_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_15_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_13_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_16_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_12_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_fu_659_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_fu_669_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_673_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_31_fu_696_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_710_p0 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_710_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_710_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal p_Result_29_fu_716_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_1_fu_740_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal lhs_V_1_fu_737_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln728_fu_748_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln703_4_fu_758_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal ret_V_4_fu_752_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal ret_V_5_fu_761_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_783_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_783_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_783_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal zext_ln703_fu_799_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_l_V_fu_802_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal xor_ln282_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln281_18_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln282_fu_822_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal y_V_fu_807_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Val2_18_fu_834_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_4_fu_852_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_842_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln456_fu_862_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_874_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln456_1_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln456_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln456_1_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_896_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_710_p00 : STD_LOGIC_VECTOR (96 downto 0);
    signal grp_fu_710_p10 : STD_LOGIC_VECTOR (96 downto 0);
    signal grp_fu_783_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_783_p10 : STD_LOGIC_VECTOR (99 downto 0);

    component cnn_mul_47ns_50nsjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (46 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (96 downto 0) );
    end component;


    component cnn_mul_50ns_50nskbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component exp_33_17_s_f_x_mg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component exp_33_17_s_f_x_mhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component exp_33_17_s_exp_xibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;



begin
    f_x_msb_3_table_V_U : component exp_33_17_s_f_x_mg8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component exp_33_17_s_f_x_mhbi
    generic map (
        DataWidth => 46,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component exp_33_17_s_exp_xibs
    generic map (
        DataWidth => 50,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    cnn_mul_47ns_50nsjbC_U18 : component cnn_mul_47ns_50nsjbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 47,
        din1_WIDTH => 50,
        dout_WIDTH => 97)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_710_p0,
        din1 => grp_fu_710_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_710_p2);

    cnn_mul_50ns_50nskbM_U19 : component cnn_mul_50ns_50nskbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_783_p0,
        din1 => grp_fu_783_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_783_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_x_msb_1_V_reg_1002 <= exp_x_msb_1_table_V_q0;
                exp_x_msb_1_V_reg_1002_pp0_iter5_reg <= exp_x_msb_1_V_reg_1002;
                exp_x_msb_1_V_reg_1002_pp0_iter6_reg <= exp_x_msb_1_V_reg_1002_pp0_iter5_reg;
                exp_x_msb_2_3_4_lsb_s_reg_997 <= ret_V_5_fu_761_p2(55 downto 6);
                or_ln281_17_reg_950_pp0_iter2_reg <= or_ln281_17_reg_950_pp0_iter1_reg;
                or_ln281_17_reg_950_pp0_iter3_reg <= or_ln281_17_reg_950_pp0_iter2_reg;
                or_ln281_17_reg_950_pp0_iter4_reg <= or_ln281_17_reg_950_pp0_iter3_reg;
                or_ln281_17_reg_950_pp0_iter5_reg <= or_ln281_17_reg_950_pp0_iter4_reg;
                or_ln281_17_reg_950_pp0_iter6_reg <= or_ln281_17_reg_950_pp0_iter5_reg;
                or_ln281_8_reg_945_pp0_iter2_reg <= or_ln281_8_reg_945_pp0_iter1_reg;
                or_ln281_8_reg_945_pp0_iter3_reg <= or_ln281_8_reg_945_pp0_iter2_reg;
                or_ln281_8_reg_945_pp0_iter4_reg <= or_ln281_8_reg_945_pp0_iter3_reg;
                or_ln281_8_reg_945_pp0_iter5_reg <= or_ln281_8_reg_945_pp0_iter4_reg;
                or_ln281_8_reg_945_pp0_iter6_reg <= or_ln281_8_reg_945_pp0_iter5_reg;
                p_Result_18_reg_920_pp0_iter2_reg <= p_Result_18_reg_920_pp0_iter1_reg;
                ret_V_reg_960_pp0_iter2_reg <= ret_V_reg_960;
                ret_V_reg_960_pp0_iter3_reg <= ret_V_reg_960_pp0_iter2_reg;
                    rhs_V_3_reg_972(34 downto 3) <= rhs_V_3_fu_686_p5(34 downto 3);    rhs_V_3_reg_972(46 downto 42) <= rhs_V_3_fu_686_p5(46 downto 42);
                    rhs_V_3_reg_972_pp0_iter3_reg(34 downto 3) <= rhs_V_3_reg_972(34 downto 3);    rhs_V_3_reg_972_pp0_iter3_reg(46 downto 42) <= rhs_V_3_reg_972(46 downto 42);
                tmp_reg_914_pp0_iter2_reg <= tmp_reg_914_pp0_iter1_reg;
                tmp_reg_914_pp0_iter3_reg <= tmp_reg_914_pp0_iter2_reg;
                tmp_reg_914_pp0_iter4_reg <= tmp_reg_914_pp0_iter3_reg;
                tmp_reg_914_pp0_iter5_reg <= tmp_reg_914_pp0_iter4_reg;
                tmp_reg_914_pp0_iter6_reg <= tmp_reg_914_pp0_iter5_reg;
                tmp_s_reg_987 <= grp_fu_710_p2(96 downto 52);
                trunc_ln612_2_reg_966_pp0_iter2_reg <= trunc_ln612_2_reg_966;
                trunc_ln612_2_reg_966_pp0_iter3_reg <= trunc_ln612_2_reg_966_pp0_iter2_reg;
                y_lo_s_V_reg_1018 <= grp_fu_783_p2(99 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                f_x_msb_3_V_reg_955 <= f_x_msb_3_table_V_q0;
                or_ln281_17_reg_950 <= or_ln281_17_fu_653_p2;
                or_ln281_17_reg_950_pp0_iter1_reg <= or_ln281_17_reg_950;
                or_ln281_8_reg_945 <= or_ln281_8_fu_599_p2;
                or_ln281_8_reg_945_pp0_iter1_reg <= or_ln281_8_reg_945;
                p_Result_18_reg_920 <= p_Result_18_fu_499_p1(19 downto 13);
                p_Result_18_reg_920_pp0_iter1_reg <= p_Result_18_reg_920;
                ret_V_reg_960 <= ret_V_fu_676_p2;
                tmp_V_1_reg_930 <= tmp_V_1_fu_519_p1;
                tmp_V_1_reg_930_pp0_iter1_reg <= tmp_V_1_reg_930;
                tmp_V_reg_925 <= tmp_V_fu_509_p1(12 downto 5);
                tmp_reg_914 <= tmp_fu_225_p1(32 downto 32);
                tmp_reg_914_pp0_iter1_reg <= tmp_reg_914;
                trunc_ln612_2_reg_966 <= trunc_ln612_2_fu_682_p1;
            end if;
        end if;
    end process;
    rhs_V_3_reg_972(2 downto 0) <= "000";
    rhs_V_3_reg_972(41 downto 35) <= "0000000";
    rhs_V_3_reg_972_pp0_iter3_reg(2 downto 0) <= "000";
    rhs_V_3_reg_972_pp0_iter3_reg(41 downto 35) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln281_fu_545_p2 <= (icmp_ln281_fu_533_p2 and icmp_ln281_1_fu_539_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv33_FFFFFFFF when (or_ln456_1_fu_890_p2(0) = '1') else 
        tmp_1_fu_896_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln544_2_fu_732_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_2_table_V_address0 <= zext_ln544_1_fu_528_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_V_address0 <= zext_ln544_fu_523_p1(5 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_710_p0 <= grp_fu_710_p00(47 - 1 downto 0);
    grp_fu_710_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_3_fu_686_p5),97));
    grp_fu_710_p1 <= grp_fu_710_p10(50 - 1 downto 0);
    grp_fu_710_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_31_fu_696_p3),97));
    grp_fu_783_p0 <= grp_fu_783_p00(50 - 1 downto 0);
    grp_fu_783_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_1002),100));
    grp_fu_783_p1 <= grp_fu_783_p10(50 - 1 downto 0);
    grp_fu_783_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_lsb_s_reg_997),100));
    icmp_ln281_1_fu_539_p2 <= "1" when (unsigned(p_Result_28_fu_217_p3) > unsigned(ap_const_lv23_78A013)) else "0";
    icmp_ln281_fu_533_p2 <= "1" when (p_Result_27_fu_203_p4 = ap_const_lv5_F) else "0";
    icmp_ln456_1_fu_884_p2 <= "0" when (tmp_5_fu_874_p4 = ap_const_lv3_0) else "1";
    icmp_ln456_fu_868_p2 <= "0" when (or_ln456_fu_862_p2 = ap_const_lv2_0) else "1";
    lhs_V_1_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_987),57));
    lhs_V_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_30_fu_659_p4),9));
    or_ln281_10_fu_611_p2 <= (xor_ln278_14_fu_437_p2 or xor_ln278_13_fu_423_p2);
    or_ln281_11_fu_617_p2 <= (xor_ln278_12_fu_409_p2 or or_ln281_10_fu_611_p2);
    or_ln281_12_fu_623_p2 <= (or_ln281_9_fu_605_p2 or or_ln281_11_fu_617_p2);
    or_ln281_13_fu_629_p2 <= (xor_ln278_16_fu_465_p2 or xor_ln278_15_fu_451_p2);
    or_ln281_14_fu_635_p2 <= (xor_ln278_18_fu_493_p2 or and_ln281_fu_545_p2);
    or_ln281_15_fu_641_p2 <= (xor_ln278_17_fu_479_p2 or or_ln281_14_fu_635_p2);
    or_ln281_16_fu_647_p2 <= (or_ln281_15_fu_641_p2 or or_ln281_13_fu_629_p2);
    or_ln281_17_fu_653_p2 <= (or_ln281_16_fu_647_p2 or or_ln281_12_fu_623_p2);
    or_ln281_18_fu_830_p2 <= (or_ln281_8_reg_945_pp0_iter6_reg or or_ln281_17_reg_950_pp0_iter6_reg);
    or_ln281_1_fu_557_p2 <= (xor_ln278_4_fu_297_p2 or xor_ln278_3_fu_283_p2);
    or_ln281_2_fu_563_p2 <= (xor_ln278_2_fu_269_p2 or or_ln281_1_fu_557_p2);
    or_ln281_3_fu_569_p2 <= (or_ln281_fu_551_p2 or or_ln281_2_fu_563_p2);
    or_ln281_4_fu_575_p2 <= (xor_ln278_6_fu_325_p2 or xor_ln278_5_fu_311_p2);
    or_ln281_5_fu_581_p2 <= (xor_ln278_9_fu_367_p2 or xor_ln278_8_fu_353_p2);
    or_ln281_6_fu_587_p2 <= (xor_ln278_7_fu_339_p2 or or_ln281_5_fu_581_p2);
    or_ln281_7_fu_593_p2 <= (or_ln281_6_fu_587_p2 or or_ln281_4_fu_575_p2);
    or_ln281_8_fu_599_p2 <= (or_ln281_7_fu_593_p2 or or_ln281_3_fu_569_p2);
    or_ln281_9_fu_605_p2 <= (xor_ln278_11_fu_395_p2 or xor_ln278_10_fu_381_p2);
    or_ln281_fu_551_p2 <= (xor_ln278_fu_241_p2 or xor_ln278_1_fu_255_p2);
    or_ln456_1_fu_890_p2 <= (icmp_ln456_fu_868_p2 or icmp_ln456_1_fu_884_p2);
    or_ln456_fu_862_p2 <= (tmp_4_fu_852_p4 or tmp_3_fu_842_p4);
    p_Result_10_fu_387_p3 <= x_l_V_fu_199_p1(31 downto 31);
    p_Result_11_fu_401_p3 <= x_l_V_fu_199_p1(32 downto 32);
    p_Result_12_fu_415_p3 <= x_l_V_fu_199_p1(33 downto 33);
    p_Result_13_fu_429_p3 <= x_l_V_fu_199_p1(34 downto 34);
    p_Result_14_fu_443_p3 <= x_l_V_fu_199_p1(35 downto 35);
    p_Result_15_fu_457_p3 <= x_l_V_fu_199_p1(36 downto 36);
    p_Result_16_fu_471_p3 <= x_l_V_fu_199_p1(37 downto 37);
    p_Result_17_fu_485_p3 <= x_l_V_fu_199_p1(38 downto 38);
    p_Result_18_fu_499_p1 <= x_V;
    p_Result_1_fu_247_p3 <= x_l_V_fu_199_p1(21 downto 21);
    p_Result_27_fu_203_p1 <= x_V;
    p_Result_27_fu_203_p4 <= p_Result_27_fu_203_p1(20 downto 16);
    p_Result_28_fu_217_p3 <= (trunc_ln612_fu_213_p1 & ap_const_lv7_0);
    p_Result_29_fu_716_p3 <= (tmp_reg_914_pp0_iter2_reg & p_Result_18_reg_920_pp0_iter2_reg);
    p_Result_2_fu_261_p3 <= x_l_V_fu_199_p1(22 downto 22);
    p_Result_30_fu_659_p4 <= f_x_msb_2_table_V_q0(45 downto 41);
    p_Result_31_fu_696_p3 <= (ret_V_reg_960 & trunc_ln612_2_reg_966);
    p_Result_3_fu_275_p3 <= x_l_V_fu_199_p1(23 downto 23);
    p_Result_4_fu_289_p3 <= x_l_V_fu_199_p1(24 downto 24);
    p_Result_5_fu_303_p3 <= x_l_V_fu_199_p1(25 downto 25);
    p_Result_6_fu_317_p3 <= x_l_V_fu_199_p1(26 downto 26);
    p_Result_7_fu_331_p3 <= x_l_V_fu_199_p1(27 downto 27);
    p_Result_8_fu_345_p3 <= x_l_V_fu_199_p1(28 downto 28);
    p_Result_9_fu_359_p3 <= x_l_V_fu_199_p1(29 downto 29);
    p_Result_s_56_fu_373_p3 <= x_l_V_fu_199_p1(30 downto 30);
    p_Result_s_fu_233_p3 <= x_l_V_fu_199_p1(20 downto 20);
    p_Val2_18_fu_834_p3 <= 
        select_ln282_fu_822_p3 when (or_ln281_18_fu_830_p2(0) = '1') else 
        y_V_fu_807_p4;
    ret_V_4_fu_752_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_737_p1) + unsigned(zext_ln728_fu_748_p1));
    ret_V_5_fu_761_p2 <= std_logic_vector(unsigned(zext_ln703_4_fu_758_p1) + unsigned(ret_V_4_fu_752_p2));
    ret_V_fu_676_p2 <= std_logic_vector(unsigned(lhs_V_fu_669_p1) + unsigned(rhs_V_fu_673_p1));
    rhs_V_1_fu_740_p4 <= ((ret_V_reg_960_pp0_iter3_reg & trunc_ln612_2_reg_966_pp0_iter3_reg) & ap_const_lv6_0);
    rhs_V_3_fu_686_p5 <= (((tmp_V_1_reg_930_pp0_iter1_reg & ap_const_lv7_0) & f_x_msb_3_V_reg_955) & ap_const_lv3_0);
    rhs_V_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_925),9));
    select_ln282_fu_822_p3 <= 
        ap_const_lv46_3FFFFFFFFFFF when (xor_ln282_fu_817_p2(0) = '1') else 
        ap_const_lv46_0;
    tmp_1_fu_896_p4 <= p_Val2_18_fu_834_p3(39 downto 7);
    tmp_3_fu_842_p4 <= p_Val2_18_fu_834_p3(45 downto 44);
    tmp_4_fu_852_p4 <= p_Val2_18_fu_834_p3(43 downto 42);
    tmp_5_fu_874_p4 <= p_Val2_18_fu_834_p3(41 downto 39);
    tmp_V_1_fu_519_p0 <= x_V;
    tmp_V_1_fu_519_p1 <= tmp_V_1_fu_519_p0(5 - 1 downto 0);
    tmp_V_fu_509_p1 <= x_V;
    tmp_V_fu_509_p4 <= tmp_V_fu_509_p1(12 downto 5);
    tmp_fu_225_p1 <= x_V;
    tmp_fu_225_p3 <= tmp_fu_225_p1(32 downto 32);
    trunc_ln612_2_fu_682_p1 <= f_x_msb_2_table_V_q0(41 - 1 downto 0);
    trunc_ln612_fu_213_p0 <= x_V;
    trunc_ln612_fu_213_p1 <= trunc_ln612_fu_213_p0(16 - 1 downto 0);
    x_l_V_fu_199_p0 <= x_V;
        x_l_V_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_l_V_fu_199_p0),47));

    xor_ln278_10_fu_381_p2 <= (tmp_fu_225_p3 xor p_Result_s_56_fu_373_p3);
    xor_ln278_11_fu_395_p2 <= (tmp_fu_225_p3 xor p_Result_10_fu_387_p3);
    xor_ln278_12_fu_409_p2 <= (tmp_fu_225_p3 xor p_Result_11_fu_401_p3);
    xor_ln278_13_fu_423_p2 <= (tmp_fu_225_p3 xor p_Result_12_fu_415_p3);
    xor_ln278_14_fu_437_p2 <= (tmp_fu_225_p3 xor p_Result_13_fu_429_p3);
    xor_ln278_15_fu_451_p2 <= (tmp_fu_225_p3 xor p_Result_14_fu_443_p3);
    xor_ln278_16_fu_465_p2 <= (tmp_fu_225_p3 xor p_Result_15_fu_457_p3);
    xor_ln278_17_fu_479_p2 <= (tmp_fu_225_p3 xor p_Result_16_fu_471_p3);
    xor_ln278_18_fu_493_p2 <= (tmp_fu_225_p3 xor p_Result_17_fu_485_p3);
    xor_ln278_1_fu_255_p2 <= (tmp_fu_225_p3 xor p_Result_1_fu_247_p3);
    xor_ln278_2_fu_269_p2 <= (tmp_fu_225_p3 xor p_Result_2_fu_261_p3);
    xor_ln278_3_fu_283_p2 <= (tmp_fu_225_p3 xor p_Result_3_fu_275_p3);
    xor_ln278_4_fu_297_p2 <= (tmp_fu_225_p3 xor p_Result_4_fu_289_p3);
    xor_ln278_5_fu_311_p2 <= (tmp_fu_225_p3 xor p_Result_5_fu_303_p3);
    xor_ln278_6_fu_325_p2 <= (tmp_fu_225_p3 xor p_Result_6_fu_317_p3);
    xor_ln278_7_fu_339_p2 <= (tmp_fu_225_p3 xor p_Result_7_fu_331_p3);
    xor_ln278_8_fu_353_p2 <= (tmp_fu_225_p3 xor p_Result_8_fu_345_p3);
    xor_ln278_9_fu_367_p2 <= (tmp_fu_225_p3 xor p_Result_9_fu_359_p3);
    xor_ln278_fu_241_p2 <= (tmp_fu_225_p3 xor p_Result_s_fu_233_p3);
    xor_ln282_fu_817_p2 <= (tmp_reg_914_pp0_iter6_reg xor ap_const_lv1_1);
    y_V_fu_807_p4 <= y_l_V_fu_802_p2(49 downto 4);
    y_l_V_fu_802_p2 <= std_logic_vector(unsigned(zext_ln703_fu_799_p1) + unsigned(exp_x_msb_1_V_reg_1002_pp0_iter6_reg));
    zext_ln544_1_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_509_p4),64));
    zext_ln544_2_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_29_fu_716_p3),64));
    zext_ln544_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_fu_519_p1),64));
    zext_ln703_4_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_3_reg_972_pp0_iter3_reg),57));
    zext_ln703_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_lo_s_V_reg_1018),50));
    zext_ln728_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_1_fu_740_p4),57));
end behav;
