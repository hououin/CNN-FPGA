-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_V_ce1 : OUT STD_LOGIC;
    conv_out_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_0_V_ce0 : OUT STD_LOGIC;
    max_pool_out_0_V_we0 : OUT STD_LOGIC;
    max_pool_out_0_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_1_V_ce0 : OUT STD_LOGIC;
    max_pool_out_1_V_we0 : OUT STD_LOGIC;
    max_pool_out_1_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_2_V_ce0 : OUT STD_LOGIC;
    max_pool_out_2_V_we0 : OUT STD_LOGIC;
    max_pool_out_2_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_3_V_ce0 : OUT STD_LOGIC;
    max_pool_out_3_V_we0 : OUT STD_LOGIC;
    max_pool_out_3_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_4_V_ce0 : OUT STD_LOGIC;
    max_pool_out_4_V_we0 : OUT STD_LOGIC;
    max_pool_out_4_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_5_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_5_V_ce0 : OUT STD_LOGIC;
    max_pool_out_5_V_we0 : OUT STD_LOGIC;
    max_pool_out_5_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_3F6 : STD_LOGIC_VECTOR (9 downto 0) := "1111110110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten23_reg_211 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_0_reg_222 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_233 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_244 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_255 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln10_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_729_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_286_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln10_reg_733 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_4_fu_304_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_4_reg_743 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_5_fu_312_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_5_reg_748 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_5_reg_748_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln29_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_354_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_759 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_fu_366_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_reg_764 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_reg_764_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1494_fu_394_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1494_reg_771 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln13_3_fu_406_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_3_reg_777 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_fu_414_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_782 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln13_1_fu_423_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_1_reg_787 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln1494_4_fu_522_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_4_reg_798 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_8_fu_612_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_8_reg_808 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_fu_618_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_813 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_4_fu_623_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln13_4_reg_818 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln29_1_fu_665_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln29_1_reg_833 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten23_phi_fu_215_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_phi_fu_226_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_237_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_r_0_phi_fu_248_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_259_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1494_6_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln1494_11_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_8_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_13_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_5_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln29_3_fu_694_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_266_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_fu_292_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln26_fu_274_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln26_mid1_fu_374_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_6_fu_320_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_2_fu_382_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1494_fu_394_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln26_1_fu_400_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_7_fu_328_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1494_1_fu_431_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_fu_437_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1494_4_fu_444_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1494_fu_448_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_461_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_453_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1494_5_fu_469_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_fu_420_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1494_fu_473_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_2_fu_479_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1494_1_fu_431_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1494_3_fu_490_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_504_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_496_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1494_7_fu_512_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1494_1_fu_516_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln27_fu_528_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1494_9_fu_534_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1494_5_fu_538_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_551_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_543_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1494_10_fu_559_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1494_2_fu_563_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_6_fu_569_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_7_fu_580_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_594_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_586_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1494_12_fu_602_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1494_3_fu_606_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1494_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1494_fu_633_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln29_fu_643_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_1_fu_651_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_1_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_2_fu_681_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_3_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_720_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_720_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_720_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_720_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_720_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_720_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_1_fu_431_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1494_fu_394_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_mac_muladd_5nocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    cnn_mac_muladd_5nocq_U78 : component cnn_mac_muladd_5nocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_720_p0,
        din1 => grp_fu_720_p1,
        din2 => grp_fu_720_p2,
        dout => grp_fu_720_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_255 <= c_reg_813;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_255 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_222 <= select_ln29_5_reg_748;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_222 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten23_reg_211 <= add_ln10_reg_733;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_211 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_233 <= select_ln13_4_reg_818;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_233 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_244 <= select_ln13_1_reg_787;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_244 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln10_reg_733 <= add_ln10_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln13_reg_782 <= add_ln13_fu_414_p2;
                and_ln29_reg_754 <= and_ln29_fu_348_p2;
                icmp_ln13_reg_738 <= icmp_ln13_fu_298_p2;
                    mul_ln1494_reg_771(9 downto 1) <= mul_ln1494_fu_394_p2(9 downto 1);
                r_reg_759 <= r_fu_354_p2;
                    select_ln13_3_reg_777(4 downto 1) <= select_ln13_3_fu_406_p3(4 downto 1);
                select_ln13_reg_764 <= select_ln13_fu_366_p3;
                select_ln29_4_reg_743 <= select_ln29_4_fu_304_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln1494_4_reg_798 <= add_ln1494_4_fu_522_p2;
                add_ln1494_8_reg_808 <= add_ln1494_8_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                c_reg_813 <= c_fu_618_p2;
                select_ln13_1_reg_787 <= select_ln13_1_fu_423_p3;
                select_ln13_4_reg_818 <= select_ln13_4_fu_623_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_729 <= icmp_ln10_fu_280_p2;
                icmp_ln10_reg_729_pp0_iter1_reg <= icmp_ln10_reg_729;
                select_ln13_reg_764_pp0_iter1_reg <= select_ln13_reg_764;
                select_ln29_5_reg_748_pp0_iter1_reg <= select_ln29_5_reg_748;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln29_1_reg_833 <= select_ln29_1_fu_665_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln29_5_reg_748 <= select_ln29_5_fu_312_p3;
            end if;
        end if;
    end process;
    mul_ln1494_reg_771(0) <= '0';
    select_ln13_3_reg_777(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_280_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_280_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln10_fu_280_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_286_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten23_phi_fu_215_p4) + unsigned(ap_const_lv10_1));
    add_ln13_fu_414_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_237_p4) + unsigned(ap_const_lv8_1));
    add_ln1494_2_fu_479_p2 <= std_logic_vector(unsigned(zext_ln29_fu_420_p1) + unsigned(sub_ln1494_fu_473_p2));
    add_ln1494_3_fu_490_p2 <= std_logic_vector(unsigned(zext_ln1494_4_fu_444_p1) + unsigned(mul_ln1494_1_fu_431_p2));
    add_ln1494_4_fu_522_p2 <= std_logic_vector(unsigned(zext_ln29_fu_420_p1) + unsigned(sub_ln1494_1_fu_516_p2));
    add_ln1494_5_fu_538_p2 <= std_logic_vector(unsigned(zext_ln1494_9_fu_534_p1) + unsigned(mul_ln1494_reg_771));
    add_ln1494_6_fu_569_p2 <= std_logic_vector(unsigned(zext_ln29_fu_420_p1) + unsigned(sub_ln1494_2_fu_563_p2));
    add_ln1494_7_fu_580_p2 <= std_logic_vector(unsigned(zext_ln1494_9_fu_534_p1) + unsigned(mul_ln1494_1_fu_431_p2));
    add_ln1494_8_fu_612_p2 <= std_logic_vector(unsigned(zext_ln29_fu_420_p1) + unsigned(sub_ln1494_3_fu_606_p2));
    add_ln1494_fu_448_p2 <= std_logic_vector(unsigned(zext_ln1494_4_fu_444_p1) + unsigned(mul_ln1494_reg_771));
    and_ln29_fu_348_p2 <= (xor_ln29_fu_336_p2 and icmp_ln16_fu_342_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_280_p2)
    begin
        if ((icmp_ln10_fu_280_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_259_p4_assign_proc : process(c_0_reg_255, icmp_ln10_reg_729, ap_CS_fsm_pp0_stage0, c_reg_813, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_259_p4 <= c_reg_813;
        else 
            ap_phi_mux_c_0_phi_fu_259_p4 <= c_0_reg_255;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_226_p4_assign_proc : process(f_0_reg_222, icmp_ln10_reg_729, ap_CS_fsm_pp0_stage0, select_ln29_5_reg_748, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_226_p4 <= select_ln29_5_reg_748;
        else 
            ap_phi_mux_f_0_phi_fu_226_p4 <= f_0_reg_222;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten23_phi_fu_215_p4_assign_proc : process(indvar_flatten23_reg_211, icmp_ln10_reg_729, ap_CS_fsm_pp0_stage0, add_ln10_reg_733, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten23_phi_fu_215_p4 <= add_ln10_reg_733;
        else 
            ap_phi_mux_indvar_flatten23_phi_fu_215_p4 <= indvar_flatten23_reg_211;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_237_p4_assign_proc : process(indvar_flatten_reg_233, icmp_ln10_reg_729, ap_CS_fsm_pp0_stage0, select_ln13_4_reg_818, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_237_p4 <= select_ln13_4_reg_818;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_237_p4 <= indvar_flatten_reg_233;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_248_p4_assign_proc : process(r_0_reg_244, icmp_ln10_reg_729, ap_CS_fsm_pp0_stage0, select_ln13_1_reg_787, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_729 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_248_p4 <= select_ln13_1_reg_787;
        else 
            ap_phi_mux_r_0_phi_fu_248_p4 <= r_0_reg_244;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_618_p2 <= std_logic_vector(unsigned(select_ln13_reg_764) + unsigned(ap_const_lv4_1));

    conv_out_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln1494_6_fu_485_p1, ap_block_pp0_stage1, zext_ln1494_8_fu_629_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_out_V_address0 <= zext_ln1494_8_fu_629_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_out_V_address0 <= zext_ln1494_6_fu_485_p1(12 - 1 downto 0);
        else 
            conv_out_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln1494_11_fu_575_p1, zext_ln1494_13_fu_655_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_out_V_address1 <= zext_ln1494_13_fu_655_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_out_V_address1 <= zext_ln1494_11_fu_575_p1(12 - 1 downto 0);
        else 
            conv_out_V_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_out_V_ce1 <= ap_const_logic_1;
        else 
            conv_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_292_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_f_0_phi_fu_226_p4));
    grp_fu_720_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_720_p1 <= grp_fu_720_p10(4 - 1 downto 0);
    grp_fu_720_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_1_reg_787),8));
    grp_fu_720_p2 <= grp_fu_720_p20(4 - 1 downto 0);
    grp_fu_720_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_reg_764_pp0_iter1_reg),8));
    icmp_ln10_fu_280_p2 <= "1" when (ap_phi_mux_indvar_flatten23_phi_fu_215_p4 = ap_const_lv10_3F6) else "0";
    icmp_ln13_fu_298_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_237_p4 = ap_const_lv8_A9) else "0";
    icmp_ln1494_1_fu_659_p2 <= "1" when (signed(conv_out_V_q1) > signed(zext_ln29_1_fu_651_p1)) else "0";
    icmp_ln1494_2_fu_676_p2 <= "1" when (signed(conv_out_V_q0) > signed(select_ln29_1_reg_833)) else "0";
    icmp_ln1494_3_fu_688_p2 <= "1" when (signed(conv_out_V_q1) > signed(select_ln29_2_fu_681_p3)) else "0";
    icmp_ln1494_fu_637_p2 <= "1" when (signed(conv_out_V_q0) > signed(ap_const_lv14_0)) else "0";
    icmp_ln16_fu_342_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_259_p4 = ap_const_lv4_D) else "0";
    max_pool_out_0_V_address0 <= zext_ln203_5_fu_711_p1(8 - 1 downto 0);

    max_pool_out_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            max_pool_out_0_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_V_d0 <= select_ln29_3_fu_694_p3;

    max_pool_out_0_V_we0_assign_proc : process(select_ln29_5_reg_748_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln29_5_reg_748_pp0_iter1_reg = ap_const_lv3_0))) then 
            max_pool_out_0_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_V_address0 <= zext_ln203_5_fu_711_p1(8 - 1 downto 0);

    max_pool_out_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            max_pool_out_1_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_V_d0 <= select_ln29_3_fu_694_p3;

    max_pool_out_1_V_we0_assign_proc : process(select_ln29_5_reg_748_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln29_5_reg_748_pp0_iter1_reg = ap_const_lv3_1))) then 
            max_pool_out_1_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_V_address0 <= zext_ln203_5_fu_711_p1(8 - 1 downto 0);

    max_pool_out_2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            max_pool_out_2_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_V_d0 <= select_ln29_3_fu_694_p3;

    max_pool_out_2_V_we0_assign_proc : process(select_ln29_5_reg_748_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln29_5_reg_748_pp0_iter1_reg = ap_const_lv3_2))) then 
            max_pool_out_2_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_V_address0 <= zext_ln203_5_fu_711_p1(8 - 1 downto 0);

    max_pool_out_3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            max_pool_out_3_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_V_d0 <= select_ln29_3_fu_694_p3;

    max_pool_out_3_V_we0_assign_proc : process(select_ln29_5_reg_748_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln29_5_reg_748_pp0_iter1_reg = ap_const_lv3_3))) then 
            max_pool_out_3_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_V_address0 <= zext_ln203_5_fu_711_p1(8 - 1 downto 0);

    max_pool_out_4_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            max_pool_out_4_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_V_d0 <= select_ln29_3_fu_694_p3;

    max_pool_out_4_V_we0_assign_proc : process(select_ln29_5_reg_748_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln29_5_reg_748_pp0_iter1_reg = ap_const_lv3_4))) then 
            max_pool_out_4_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_5_V_address0 <= zext_ln203_5_fu_711_p1(8 - 1 downto 0);

    max_pool_out_5_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            max_pool_out_5_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_5_V_d0 <= select_ln29_3_fu_694_p3;

    max_pool_out_5_V_we0_assign_proc : process(select_ln29_5_reg_748_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and ((select_ln29_5_reg_748_pp0_iter1_reg = ap_const_lv3_5) or ((select_ln29_5_reg_748_pp0_iter1_reg = ap_const_lv3_6) or (select_ln29_5_reg_748_pp0_iter1_reg = ap_const_lv3_7))))) then 
            max_pool_out_5_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1494_1_fu_431_p1 <= mul_ln1494_1_fu_431_p10(5 - 1 downto 0);
    mul_ln1494_1_fu_431_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_3_reg_777),10));
    mul_ln1494_1_fu_431_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln1494_1_fu_431_p1), 10));
    mul_ln1494_fu_394_p1 <= mul_ln1494_fu_394_p10(5 - 1 downto 0);
    mul_ln1494_fu_394_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_fu_382_p3),10));
    mul_ln1494_fu_394_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln1494_fu_394_p1), 10));
    or_ln13_fu_360_p2 <= (icmp_ln13_fu_298_p2 or and_ln29_fu_348_p2);
    or_ln26_1_fu_400_p2 <= (shl_ln26_mid1_fu_374_p3 or ap_const_lv5_1);
    or_ln26_fu_274_p2 <= (shl_ln_fu_266_p3 or ap_const_lv5_1);
    or_ln27_fu_528_p2 <= (shl_ln2_fu_437_p3 or ap_const_lv5_1);
    p_shl2_cast_fu_543_p3 <= (add_ln1494_5_fu_538_p2 & ap_const_lv3_0);
    p_shl4_cast_fu_496_p3 <= (add_ln1494_3_fu_490_p2 & ap_const_lv3_0);
    p_shl6_cast_fu_453_p3 <= (add_ln1494_fu_448_p2 & ap_const_lv3_0);
    p_shl_cast_fu_586_p3 <= (add_ln1494_7_fu_580_p2 & ap_const_lv3_0);
    r_fu_354_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln29_4_fu_304_p3));
    select_ln13_1_fu_423_p3 <= 
        r_reg_759 when (and_ln29_reg_754(0) = '1') else 
        select_ln29_4_reg_743;
    select_ln13_2_fu_382_p3 <= 
        shl_ln26_mid1_fu_374_p3 when (and_ln29_fu_348_p2(0) = '1') else 
        select_ln29_6_fu_320_p3;
    select_ln13_3_fu_406_p3 <= 
        or_ln26_1_fu_400_p2 when (and_ln29_fu_348_p2(0) = '1') else 
        select_ln29_7_fu_328_p3;
    select_ln13_4_fu_623_p3 <= 
        ap_const_lv8_1 when (icmp_ln13_reg_738(0) = '1') else 
        add_ln13_reg_782;
    select_ln13_fu_366_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_360_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_259_p4;
    select_ln29_1_fu_665_p3 <= 
        conv_out_V_q1 when (icmp_ln1494_1_fu_659_p2(0) = '1') else 
        zext_ln29_1_fu_651_p1;
    select_ln29_2_fu_681_p3 <= 
        conv_out_V_q0 when (icmp_ln1494_2_fu_676_p2(0) = '1') else 
        select_ln29_1_reg_833;
    select_ln29_3_fu_694_p3 <= 
        conv_out_V_q1 when (icmp_ln1494_3_fu_688_p2(0) = '1') else 
        select_ln29_2_fu_681_p3;
    select_ln29_4_fu_304_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_298_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_248_p4;
    select_ln29_5_fu_312_p3 <= 
        f_fu_292_p2 when (icmp_ln13_fu_298_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_226_p4;
    select_ln29_6_fu_320_p3 <= 
        ap_const_lv5_0 when (icmp_ln13_fu_298_p2(0) = '1') else 
        shl_ln_fu_266_p3;
    select_ln29_7_fu_328_p3 <= 
        ap_const_lv5_1 when (icmp_ln13_fu_298_p2(0) = '1') else 
        or_ln26_fu_274_p2;
    select_ln29_fu_643_p3 <= 
        trunc_ln1494_fu_633_p1 when (icmp_ln1494_fu_637_p2(0) = '1') else 
        ap_const_lv13_0;
    shl_ln26_mid1_fu_374_p3 <= (r_fu_354_p2 & ap_const_lv1_0);
    shl_ln2_fu_437_p3 <= (select_ln13_reg_764 & ap_const_lv1_0);
    shl_ln_fu_266_p3 <= (ap_phi_mux_r_0_phi_fu_248_p4 & ap_const_lv1_0);
    sub_ln1494_1_fu_516_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_496_p3) - unsigned(zext_ln1494_7_fu_512_p1));
    sub_ln1494_2_fu_563_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_543_p3) - unsigned(zext_ln1494_10_fu_559_p1));
    sub_ln1494_3_fu_606_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_586_p3) - unsigned(zext_ln1494_12_fu_602_p1));
    sub_ln1494_fu_473_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_453_p3) - unsigned(zext_ln1494_5_fu_469_p1));
    tmp_1_fu_504_p3 <= (add_ln1494_3_fu_490_p2 & ap_const_lv1_0);
    tmp_2_fu_551_p3 <= (add_ln1494_5_fu_538_p2 & ap_const_lv1_0);
    tmp_3_fu_594_p3 <= (add_ln1494_7_fu_580_p2 & ap_const_lv1_0);
    tmp_fu_461_p3 <= (add_ln1494_fu_448_p2 & ap_const_lv1_0);
    trunc_ln1494_fu_633_p1 <= conv_out_V_q0(13 - 1 downto 0);
    xor_ln29_fu_336_p2 <= (icmp_ln13_fu_298_p2 xor ap_const_lv1_1);
    zext_ln1494_10_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_551_p3),13));
    zext_ln1494_11_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_6_fu_569_p2),64));
    zext_ln1494_12_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_594_p3),13));
    zext_ln1494_13_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_8_reg_808),64));
    zext_ln1494_4_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_437_p3),10));
    zext_ln1494_5_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_461_p3),13));
    zext_ln1494_6_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_2_fu_479_p2),64));
    zext_ln1494_7_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_504_p3),13));
    zext_ln1494_8_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_4_reg_798),64));
    zext_ln1494_9_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_528_p2),10));
    zext_ln203_5_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_720_p3),64));
    zext_ln29_1_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_fu_643_p3),14));
    zext_ln29_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_reg_748),13));
end behav;
