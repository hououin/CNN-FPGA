-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cnn_dense_out_weiocq_rom is 
    generic(
             DWIDTH     : integer := 10; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 300
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cnn_dense_out_weiocq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111001", 1 => "0010110010", 2 => "1111100111", 3 => "0001010000", 
    4 => "1101111101", 5 => "1011101010", 6 => "1110000010", 7 => "0000101011", 
    8 => "0001110111", 9 => "1101000101", 10 => "1010110100", 11 => "0010111001", 
    12 => "1100011111", 13 => "1100100101", 14 => "0010110111", 15 => "1101000101", 
    16 => "1101100101", 17 => "0010010000", 18 => "1100111100", 19 => "1100100110", 
    20 => "1101011100", 21 => "1111001001", 22 => "1110001000", 23 => "1100001100", 
    24 => "0001100101", 25 => "1110101011", 26 => "0011001110", 27 => "0001100110", 
    28 => "0011010010", 29 => "0011001101", 30 => "1100000000", 31 => "0011001010", 
    32 => "0000110111", 33 => "0001101110", 34 => "1101010000", 35 => "1111010100", 
    36 => "1110111100", 37 => "0000010110", 38 => "1100011010", 39 => "1100101011", 
    40 => "0001000100", 41 => "1110001010", 42 => "1111111110", 43 => "1111010100", 
    44 => "1011100100", 45 => "1101001111", 46 => "1111011001", 47 => "0010111111", 
    48 => "1110000011", 49 => "1100010001", 50 => "0001001111", 51 => "1011110111", 
    52 => "0000000001", 53 => "1101111110", 54 => "0101000001", 55 => "1100100010", 
    56 => "0000111011", 57 => "1101110000", 58 => "1111100010", 59 => "1111000110", 
    60 => "1100100111", 61 => "1101111010", 62 => "1110110010", 63 => "1110000111", 
    64 => "0011011110", 65 => "1011111000", 66 => "1100010110", 67 => "1111011001", 
    68 => "0010111000", 69 => "0000010001", 70 => "0001111101", 71 => "1101000100", 
    72 => "0011111010", 73 => "1111001101", 74 => "0000111101", 75 => "1100110011", 
    76 => "0000010110", 77 => "0000001110", 78 => "1101100110", 79 => "1111101100", 
    80 => "0000101110", 81 => "1110010010", 82 => "1111100101", 83 => "0010100101", 
    84 => "0001001000", 85 => "1110001100", 86 => "1110010100", 87 => "1110010000", 
    88 => "0000100100", 89 => "1101010100", 90 => "0100000010", 91 => "1101111111", 
    92 => "0010001001", 93 => "0001000100", 94 => "0000010011", 95 => "0000001010", 
    96 => "0010000110", 97 => "0010011100", 98 => "1110010100", 99 => "1111111000", 
    100 => "0101000101", 101 => "0001111010", 102 => "1101101110", 103 => "1011100100", 
    104 => "1101110000", 105 => "0001001000", 106 => "0001011110", 107 => "0000011011", 
    108 => "1111011100", 109 => "1101101011", 110 => "1111111110", 111 => "1111110111", 
    112 to 113=> "0010011111", 114 => "1111110010", 115 => "0010110111", 116 => "1100000111", 
    117 => "0011101100", 118 => "0010001001", 119 => "1110110101", 120 => "1110011100", 
    121 => "0100111100", 122 => "1110010101", 123 => "1111110010", 124 => "0001100011", 
    125 => "0000100110", 126 => "1110001100", 127 => "1101011111", 128 => "0000100110", 
    129 => "0010100011", 130 => "1101010110", 131 => "0001110101", 132 => "0000111110", 
    133 => "1110100111", 134 => "1111000110", 135 => "0000101010", 136 => "0010001000", 
    137 => "0011001111", 138 => "1101011101", 139 => "0010100111", 140 => "0100100001", 
    141 => "1101000100", 142 => "1101110111", 143 => "0000010011", 144 => "1101100001", 
    145 => "1111101010", 146 => "1110110011", 147 => "1011001011", 148 => "0001011000", 
    149 => "1101000000", 150 => "1110110100", 151 => "0010010101", 152 => "0011000100", 
    153 => "0001011001", 154 => "1100110100", 155 => "1100110011", 156 => "0000111110", 
    157 => "0000010011", 158 => "0010111110", 159 => "1101100111", 160 to 161=> "1110101101", 
    162 => "1100110100", 163 => "0001101110", 164 => "1010010111", 165 => "0001100111", 
    166 => "1011011100", 167 => "1101111011", 168 => "1110011001", 169 => "0011111111", 
    170 => "1110111001", 171 => "1011010101", 172 => "0000000001", 173 => "0100001100", 
    174 => "0001111110", 175 => "1111001011", 176 => "1111001110", 177 => "1111011000", 
    178 => "1101111111", 179 => "0011010011", 180 => "0000101001", 181 => "0100011101", 
    182 => "0000010010", 183 => "1100011100", 184 => "0010001001", 185 => "1110010100", 
    186 => "0000011111", 187 => "1101101000", 188 => "1101010011", 189 => "1111001101", 
    190 => "1100010101", 191 => "1100101011", 192 => "1110110111", 193 => "0001100101", 
    194 => "1011001101", 195 => "1101000011", 196 => "1001110110", 197 => "0011100011", 
    198 => "0000110000", 199 => "1111011001", 200 => "1111001100", 201 => "1101100011", 
    202 => "0000000000", 203 => "1110101011", 204 => "0001001000", 205 => "0010101011", 
    206 => "1110100001", 207 => "1111100111", 208 => "0010011000", 209 => "0100011011", 
    210 => "1101010011", 211 => "0001011111", 212 => "0100001100", 213 => "1110000000", 
    214 => "0001000011", 215 => "1110100010", 216 => "0011100011", 217 => "0000111000", 
    218 => "1111110110", 219 => "1110100111", 220 => "0010000001", 221 => "0000000101", 
    222 => "1111011111", 223 => "1101011100", 224 => "0000100110", 225 => "0010001001", 
    226 => "0001110000", 227 => "1101011011", 228 => "0001101001", 229 => "1101110100", 
    230 => "0010110011", 231 => "1101000110", 232 => "1110100101", 233 => "1110110001", 
    234 => "1110011000", 235 => "1110011011", 236 => "1111100010", 237 => "1011010100", 
    238 => "0010010010", 239 => "0011101010", 240 => "1101001011", 241 => "1101001111", 
    242 => "1110000000", 243 => "1101111101", 244 => "1110100000", 245 => "0011010111", 
    246 => "0011010101", 247 => "1011001001", 248 => "0000011010", 249 => "1100011101", 
    250 => "0010110111", 251 => "1011000110", 252 => "1100001011", 253 => "1110111110", 
    254 => "1011111011", 255 => "0100001000", 256 => "0010110100", 257 => "0000100010", 
    258 => "1101101110", 259 => "1110111000", 260 => "1110011001", 261 => "0011000111", 
    262 => "1101110110", 263 => "0011110001", 264 => "0010110011", 265 => "0010110100", 
    266 => "0010101000", 267 => "0000111000", 268 => "1101111111", 269 => "1111011011", 
    270 => "1100001111", 271 => "1101001001", 272 => "0010011011", 273 => "0010101000", 
    274 => "1110100011", 275 => "0011101000", 276 => "1100110011", 277 => "1110100011", 
    278 => "0010011100", 279 => "1110101111", 280 => "0011000010", 281 => "1101011110", 
    282 => "1111110000", 283 => "1100111101", 284 => "0000100000", 285 => "1111011111", 
    286 => "1101011111", 287 => "0011101011", 288 => "1111111000", 289 => "0010110000", 
    290 => "0010100010", 291 => "1101010100", 292 => "0011101110", 293 => "1111011001", 
    294 => "0000010110", 295 => "0000001100", 296 => "1110101001", 297 => "1110101000", 
    298 => "1100100111", 299 => "1101100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity cnn_dense_out_weiocq is
    generic (
        DataWidth : INTEGER := 10;
        AddressRange : INTEGER := 300;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of cnn_dense_out_weiocq is
    component cnn_dense_out_weiocq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    cnn_dense_out_weiocq_rom_U :  component cnn_dense_out_weiocq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


