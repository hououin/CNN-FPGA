-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    cnn_input_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_EN_A : OUT STD_LOGIC;
    cnn_input_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    cnn_input_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_Clk_A : OUT STD_LOGIC;
    cnn_input_Rst_A : OUT STD_LOGIC;
    prediction_output_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_EN_A : OUT STD_LOGIC;
    prediction_output_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_output_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_Clk_A : OUT STD_LOGIC;
    prediction_output_Rst_A : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.990188,HLS_SYN_LAT=213270,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=13,HLS_SYN_FF=3540,HLS_SYN_LUT=10161,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv15_4E20 : STD_LOGIC_VECTOR (14 downto 0) := "100111000100000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_5DC : STD_LOGIC_VECTOR (10 downto 0) := "10111011100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv14_3FE8 : STD_LOGIC_VECTOR (13 downto 0) := "11111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv15_32 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal dense_1_bias_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_bias_V_ce0 : STD_LOGIC;
    signal dense_1_bias_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_weights_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dense_1_weights_V_ce0 : STD_LOGIC;
    signal dense_1_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_2_bias_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_bias_V_ce0 : STD_LOGIC;
    signal dense_2_bias_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_2_weights_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_weights_V_ce0 : STD_LOGIC;
    signal dense_2_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_V_ce0 : STD_LOGIC;
    signal dense_out_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dense_out_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_ce0 : STD_LOGIC;
    signal dense_out_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_reg_634 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_i_reg_645 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_reg_656 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_i_reg_668 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten11_reg_679 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_i5_reg_690 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_30_reg_701 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_i10_reg_713 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten23_reg_724 : STD_LOGIC_VECTOR (8 downto 0);
    signal d_0_i_reg_735 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_33_reg_746 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_0_i_reg_758 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_840_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_2057 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ix_in_fu_846_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_in_reg_2062 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_876_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_reg_2067 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_fu_888_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_2075 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln203_8_fu_898_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_8_reg_2080 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln25_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_908_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_reg_2090 : STD_LOGIC_VECTOR (9 downto 0);
    signal cnn_input_load_reg_2095 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln603_3_fu_1189_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_3_reg_2101 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln9_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_2106 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state17_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln9_fu_1207_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_2115 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_1_fu_1233_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_1_reg_2120 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_fu_1241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_2125 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_1263_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_2140 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln13_1_fu_1269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_2145 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1298_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln9_1_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_1_reg_2159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state20_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln9_2_fu_1359_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_2_fu_1371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_2_reg_2168 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_4_fu_1385_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln14_4_reg_2173 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_2_fu_1393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_2_reg_2178 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_fu_1448_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_2193 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln13_3_fu_1454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_3_reg_2198 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_1_fu_1483_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal icmp_ln41_fu_1538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_2212 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state23_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln41_fu_1544_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln46_fu_1556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_2221 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_1_fu_1570_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln48_1_reg_2226 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln48_fu_1578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_2231 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_fu_1633_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_2246 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln46_1_fu_1639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_reg_2251 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_sum_V_fu_1668_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal i_3_fu_1694_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_2268 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal zext_ln70_fu_1700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_2273 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln69_fu_1688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_1705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_2283 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal p_Result_41_fu_1711_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_41_reg_2288 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_13_fu_1725_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_13_reg_2293 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln944_fu_1759_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_2298 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_1869_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_2304 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_1877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_2309 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_1883_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_2314 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_flat_fu_824_ap_ready : STD_LOGIC;
    signal grp_flat_fu_824_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state17 : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state20 : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state23 : STD_LOGIC;
    signal dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_ce0 : STD_LOGIC;
    signal dense_array_V_we0 : STD_LOGIC;
    signal dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_array_V_ce1 : STD_LOGIC;
    signal dense_array_V_we1 : STD_LOGIC;
    signal dense_array_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_1_input_V_ce0 : STD_LOGIC;
    signal conv_1_input_V_we0 : STD_LOGIC;
    signal conv_1_input_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_out_V_ce0 : STD_LOGIC;
    signal conv_1_out_V_we0 : STD_LOGIC;
    signal conv_1_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_ce1 : STD_LOGIC;
    signal conv_1_out_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pool_1_out_V_ce0 : STD_LOGIC;
    signal max_pool_1_out_V_we0 : STD_LOGIC;
    signal max_pool_1_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_2_out_V_ce0 : STD_LOGIC;
    signal conv_2_out_V_we0 : STD_LOGIC;
    signal conv_2_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_V_ce1 : STD_LOGIC;
    signal conv_2_out_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_pool_2_out_V_ce0 : STD_LOGIC;
    signal max_pool_2_out_V_we0 : STD_LOGIC;
    signal max_pool_2_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_array_V_ce0 : STD_LOGIC;
    signal flat_array_V_we0 : STD_LOGIC;
    signal flat_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_out_V_ce0 : STD_LOGIC;
    signal dense_1_out_V_we0 : STD_LOGIC;
    signal dense_1_out_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_1_out_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_out_V_ce0 : STD_LOGIC;
    signal dense_2_out_V_we0 : STD_LOGIC;
    signal dense_2_out_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal prediction_V_ce0 : STD_LOGIC;
    signal prediction_V_we0 : STD_LOGIC;
    signal prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal prediction_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_780_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_780_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_780_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_780_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_780_dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_780_dense_array_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_780_dense_array_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_780_dense_array_V_ce1 : STD_LOGIC;
    signal grp_soft_max_fu_780_dense_array_V_we1 : STD_LOGIC;
    signal grp_soft_max_fu_780_dense_array_V_d1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_780_prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_780_prediction_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_780_prediction_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_780_prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_2_fu_792_ap_start : STD_LOGIC;
    signal grp_conv_2_fu_792_ap_done : STD_LOGIC;
    signal grp_conv_2_fu_792_ap_idle : STD_LOGIC;
    signal grp_conv_2_fu_792_ap_ready : STD_LOGIC;
    signal grp_conv_2_fu_792_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_2_fu_792_input_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_792_conv_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_2_fu_792_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_792_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_2_fu_792_conv_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_1_fu_802_ap_start : STD_LOGIC;
    signal grp_conv_1_fu_802_ap_done : STD_LOGIC;
    signal grp_conv_1_fu_802_ap_idle : STD_LOGIC;
    signal grp_conv_1_fu_802_ap_ready : STD_LOGIC;
    signal grp_conv_1_fu_802_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_1_fu_802_input_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_802_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_1_fu_802_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_802_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_1_fu_802_conv_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_1_fu_812_ap_start : STD_LOGIC;
    signal grp_max_pool_1_fu_812_ap_done : STD_LOGIC;
    signal grp_max_pool_1_fu_812_ap_idle : STD_LOGIC;
    signal grp_max_pool_1_fu_812_ap_ready : STD_LOGIC;
    signal grp_max_pool_1_fu_812_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_1_fu_812_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_812_conv_out_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_1_fu_812_conv_out_V_ce1 : STD_LOGIC;
    signal grp_max_pool_1_fu_812_max_pool_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_1_fu_812_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_812_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_812_max_pool_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_2_fu_818_ap_start : STD_LOGIC;
    signal grp_max_pool_2_fu_818_ap_done : STD_LOGIC;
    signal grp_max_pool_2_fu_818_ap_idle : STD_LOGIC;
    signal grp_max_pool_2_fu_818_ap_ready : STD_LOGIC;
    signal grp_max_pool_2_fu_818_conv_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2_fu_818_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_818_conv_out_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2_fu_818_conv_out_V_ce1 : STD_LOGIC;
    signal grp_max_pool_2_fu_818_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_818_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_818_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_2_fu_818_max_pool_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_flat_fu_824_ap_start : STD_LOGIC;
    signal grp_flat_fu_824_ap_idle : STD_LOGIC;
    signal grp_flat_fu_824_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_824_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_824_flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_824_flat_array_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_824_flat_array_V_we0 : STD_LOGIC;
    signal grp_flat_fu_824_flat_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ix_in_0_reg_590 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_602 : STD_LOGIC_VECTOR (4 downto 0);
    signal ix_in_1_reg_613 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_0_reg_623 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i_0_i_phi_fu_649_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_i_phi_fu_672_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_i_0_i5_phi_fu_694_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_i10_phi_fu_717_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_d_0_i_phi_fu_739_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_i_phi_fu_762_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i24_0_reg_769 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_soft_max_fu_780_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_conv_2_fu_792_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_conv_1_fu_802_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_max_pool_1_fu_812_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_max_pool_2_fu_818_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_flat_fu_824_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln27_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_6_fu_1259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_fu_1443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_1402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_9_fu_1628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_1587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnn_input_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_fu_1344_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln19_1_fu_1529_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal prediction_output_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_852_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_864_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_fu_860_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_17_fu_872_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_18_fu_894_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_930_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_944_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_948_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_40_fu_956_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_39_fu_922_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_960_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_918_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_940_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_980_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_992_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_998_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_1004_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_966_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_fu_1012_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_1038_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_1042_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_1052_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1055_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_1022_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln581cast_fu_1071_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln571_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_1111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_1075_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln586_fu_1048_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln585_1_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_1063_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln582_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_1147_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_1_fu_1161_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln603_1_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_1175_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_fu_1213_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_fu_1225_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1996_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_2_fu_1283_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_2005_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_1307_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln703_fu_1320_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_fu_1307_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_fu_1311_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln703_fu_1320_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_fu_1324_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_19_fu_1336_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_1330_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_fu_1365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln14_3_fu_1377_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_1407_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_1419_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_7_fu_1415_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1117_8_fu_1427_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1117_fu_1431_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_1_fu_1398_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1117_2_fu_1437_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln14_5_fu_1468_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_2015_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_1_fu_1492_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_2_fu_1505_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1265_1_fu_1492_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln703_2_fu_1496_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln703_2_fu_1505_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_1_fu_1509_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_fu_1521_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_1_fu_1515_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal d_fu_1550_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln48_fu_1562_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_1592_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_1604_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_8_fu_1612_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_fu_1600_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_fu_1616_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln47_fu_1583_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_4_fu_1622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln48_2_fu_1653_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_2025_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_2_fu_1677_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_1719_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_1733_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_42_fu_1743_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_1751_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_1769_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_1775_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_1791_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln947_fu_1795_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln947_fu_1801_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln947_fu_1805_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_36_fu_1811_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln947_fu_1785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_1817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1829_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln944_fu_1765_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln949_fu_1843_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_37_fu_1849_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_1837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_1857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_1823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_1863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_1887_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_1890_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_1901_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_1895_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_1906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_12_fu_1912_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_13_fu_1919_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s_fu_1924_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_24_fu_1938_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln964_fu_1946_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_1954_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_1959_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_16_fu_1934_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1965_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_43_fu_1972_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_1984_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1996_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1996_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1996_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2005_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2015_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_2015_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2025_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_2025_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_1996_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1996_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2015_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2025_p00 : STD_LOGIC_VECTOR (21 downto 0);

    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce0 : OUT STD_LOGIC;
        dense_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        dense_array_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce1 : OUT STD_LOGIC;
        dense_array_V_we1 : OUT STD_LOGIC;
        dense_array_V_d1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        dense_array_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_V_ce0 : OUT STD_LOGIC;
        prediction_V_we0 : OUT STD_LOGIC;
        prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component conv_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component conv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component max_pool_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce1 : OUT STD_LOGIC;
        conv_out_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component max_pool_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce1 : OUT STD_LOGIC;
        conv_out_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component flat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        flat_array_V_ce0 : OUT STD_LOGIC;
        flat_array_V_we0 : OUT STD_LOGIC;
        flat_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_fpext_32ns_64vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_mac_muladd_9nwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component cnn_mac_muladd_14xdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_mac_muladd_9syd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_mac_muladd_13zec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_dense_1_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component cnn_dense_1_weighpcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_2_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_2_weighqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_out_biarcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_dense_out_weisc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (13 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_1_input_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_max_pool_1_outde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_max_pool_2_ouudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_dense_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_dense_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_prediction_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    dense_1_bias_V_U : component cnn_dense_1_bias_V
    generic map (
        DataWidth => 6,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_bias_V_address0,
        ce0 => dense_1_bias_V_ce0,
        q0 => dense_1_bias_V_q0);

    dense_1_weights_V_U : component cnn_dense_1_weighpcA
    generic map (
        DataWidth => 9,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_weights_V_address0,
        ce0 => dense_1_weights_V_ce0,
        q0 => dense_1_weights_V_q0);

    dense_2_bias_V_U : component cnn_dense_2_bias_V
    generic map (
        DataWidth => 9,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_bias_V_address0,
        ce0 => dense_2_bias_V_ce0,
        q0 => dense_2_bias_V_q0);

    dense_2_weights_V_U : component cnn_dense_2_weighqcK
    generic map (
        DataWidth => 9,
        AddressRange => 1500,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_weights_V_address0,
        ce0 => dense_2_weights_V_ce0,
        q0 => dense_2_weights_V_q0);

    dense_out_bias_V_U : component cnn_dense_out_biarcU
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_out_bias_V_address0,
        ce0 => dense_out_bias_V_ce0,
        q0 => dense_out_bias_V_q0);

    dense_out_weights_V_U : component cnn_dense_out_weisc4
    generic map (
        DataWidth => 9,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_out_weights_V_address0,
        ce0 => dense_out_weights_V_ce0,
        q0 => dense_out_weights_V_q0);

    cnn_CRTL_BUS_s_axi_U : component cnn_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    dense_array_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_array_V_address0,
        ce0 => dense_array_V_ce0,
        we0 => dense_array_V_we0,
        d0 => dense_array_V_d0,
        q0 => dense_array_V_q0,
        address1 => grp_soft_max_fu_780_dense_array_V_address1,
        ce1 => dense_array_V_ce1,
        we1 => dense_array_V_we1,
        d1 => grp_soft_max_fu_780_dense_array_V_d1,
        q1 => dense_array_V_q1);

    conv_1_input_V_U : component cnn_conv_1_input_V
    generic map (
        DataWidth => 14,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_1_input_V_address0,
        ce0 => conv_1_input_V_ce0,
        we0 => conv_1_input_V_we0,
        d0 => select_ln603_3_reg_2101,
        q0 => conv_1_input_V_q0);

    conv_1_out_V_U : component cnn_conv_1_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 4056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_1_out_V_address0,
        ce0 => conv_1_out_V_ce0,
        we0 => conv_1_out_V_we0,
        d0 => conv_1_out_V_d0,
        q0 => conv_1_out_V_q0,
        address1 => grp_max_pool_1_fu_812_conv_out_V_address1,
        ce1 => conv_1_out_V_ce1,
        q1 => conv_1_out_V_q1);

    max_pool_1_out_V_U : component cnn_max_pool_1_outde
    generic map (
        DataWidth => 14,
        AddressRange => 1014,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_1_out_V_address0,
        ce0 => max_pool_1_out_V_ce0,
        we0 => max_pool_1_out_V_we0,
        d0 => max_pool_1_out_V_d0,
        q0 => max_pool_1_out_V_q0);

    conv_2_out_V_U : component cnn_conv_2_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 1936,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_2_out_V_address0,
        ce0 => conv_2_out_V_ce0,
        we0 => conv_2_out_V_we0,
        d0 => conv_2_out_V_d0,
        q0 => conv_2_out_V_q0,
        address1 => grp_max_pool_2_fu_818_conv_out_V_address1,
        ce1 => conv_2_out_V_ce1,
        q1 => conv_2_out_V_q1);

    max_pool_2_out_V_U : component cnn_max_pool_2_ouudo
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_2_out_V_address0,
        ce0 => max_pool_2_out_V_ce0,
        we0 => max_pool_2_out_V_we0,
        d0 => max_pool_2_out_V_d0,
        q0 => max_pool_2_out_V_q0);

    flat_array_V_U : component cnn_max_pool_2_ouudo
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => flat_array_V_address0,
        ce0 => flat_array_V_ce0,
        we0 => flat_array_V_we0,
        d0 => flat_array_V_d0,
        q0 => flat_array_V_q0);

    dense_1_out_V_U : component cnn_dense_1_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_out_V_address0,
        ce0 => dense_1_out_V_ce0,
        we0 => dense_1_out_V_we0,
        d0 => dense_1_out_V_d0,
        q0 => dense_1_out_V_q0);

    dense_2_out_V_U : component cnn_dense_2_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_out_V_address0,
        ce0 => dense_2_out_V_ce0,
        we0 => dense_2_out_V_we0,
        d0 => dense_2_out_V_d0,
        q0 => dense_2_out_V_q0);

    prediction_V_U : component cnn_prediction_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => prediction_V_address0,
        ce0 => prediction_V_ce0,
        we0 => prediction_V_we0,
        d0 => prediction_V_d0,
        q0 => prediction_V_q0);

    grp_soft_max_fu_780 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_soft_max_fu_780_ap_start,
        ap_done => grp_soft_max_fu_780_ap_done,
        ap_idle => grp_soft_max_fu_780_ap_idle,
        ap_ready => grp_soft_max_fu_780_ap_ready,
        dense_array_V_address0 => grp_soft_max_fu_780_dense_array_V_address0,
        dense_array_V_ce0 => grp_soft_max_fu_780_dense_array_V_ce0,
        dense_array_V_q0 => dense_array_V_q0,
        dense_array_V_address1 => grp_soft_max_fu_780_dense_array_V_address1,
        dense_array_V_ce1 => grp_soft_max_fu_780_dense_array_V_ce1,
        dense_array_V_we1 => grp_soft_max_fu_780_dense_array_V_we1,
        dense_array_V_d1 => grp_soft_max_fu_780_dense_array_V_d1,
        dense_array_V_q1 => dense_array_V_q1,
        prediction_V_address0 => grp_soft_max_fu_780_prediction_V_address0,
        prediction_V_ce0 => grp_soft_max_fu_780_prediction_V_ce0,
        prediction_V_we0 => grp_soft_max_fu_780_prediction_V_we0,
        prediction_V_d0 => grp_soft_max_fu_780_prediction_V_d0);

    grp_conv_2_fu_792 : component conv_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_2_fu_792_ap_start,
        ap_done => grp_conv_2_fu_792_ap_done,
        ap_idle => grp_conv_2_fu_792_ap_idle,
        ap_ready => grp_conv_2_fu_792_ap_ready,
        input_V_address0 => grp_conv_2_fu_792_input_V_address0,
        input_V_ce0 => grp_conv_2_fu_792_input_V_ce0,
        input_V_q0 => max_pool_1_out_V_q0,
        conv_out_V_address0 => grp_conv_2_fu_792_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_2_fu_792_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_2_fu_792_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_2_fu_792_conv_out_V_d0);

    grp_conv_1_fu_802 : component conv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_1_fu_802_ap_start,
        ap_done => grp_conv_1_fu_802_ap_done,
        ap_idle => grp_conv_1_fu_802_ap_idle,
        ap_ready => grp_conv_1_fu_802_ap_ready,
        input_V_address0 => grp_conv_1_fu_802_input_V_address0,
        input_V_ce0 => grp_conv_1_fu_802_input_V_ce0,
        input_V_q0 => conv_1_input_V_q0,
        conv_out_V_address0 => grp_conv_1_fu_802_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_1_fu_802_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_1_fu_802_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_1_fu_802_conv_out_V_d0);

    grp_max_pool_1_fu_812 : component max_pool_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pool_1_fu_812_ap_start,
        ap_done => grp_max_pool_1_fu_812_ap_done,
        ap_idle => grp_max_pool_1_fu_812_ap_idle,
        ap_ready => grp_max_pool_1_fu_812_ap_ready,
        conv_out_V_address0 => grp_max_pool_1_fu_812_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_1_fu_812_conv_out_V_ce0,
        conv_out_V_q0 => conv_1_out_V_q0,
        conv_out_V_address1 => grp_max_pool_1_fu_812_conv_out_V_address1,
        conv_out_V_ce1 => grp_max_pool_1_fu_812_conv_out_V_ce1,
        conv_out_V_q1 => conv_1_out_V_q1,
        max_pool_out_V_address0 => grp_max_pool_1_fu_812_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_1_fu_812_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_1_fu_812_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_1_fu_812_max_pool_out_V_d0);

    grp_max_pool_2_fu_818 : component max_pool_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pool_2_fu_818_ap_start,
        ap_done => grp_max_pool_2_fu_818_ap_done,
        ap_idle => grp_max_pool_2_fu_818_ap_idle,
        ap_ready => grp_max_pool_2_fu_818_ap_ready,
        conv_out_V_address0 => grp_max_pool_2_fu_818_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_2_fu_818_conv_out_V_ce0,
        conv_out_V_q0 => conv_2_out_V_q0,
        conv_out_V_address1 => grp_max_pool_2_fu_818_conv_out_V_address1,
        conv_out_V_ce1 => grp_max_pool_2_fu_818_conv_out_V_ce1,
        conv_out_V_q1 => conv_2_out_V_q1,
        max_pool_out_V_address0 => grp_max_pool_2_fu_818_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_2_fu_818_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_2_fu_818_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_2_fu_818_max_pool_out_V_d0);

    grp_flat_fu_824 : component flat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_flat_fu_824_ap_start,
        ap_done => grp_flat_fu_824_ap_done,
        ap_idle => grp_flat_fu_824_ap_idle,
        ap_ready => grp_flat_fu_824_ap_ready,
        max_pool_out_V_address0 => grp_flat_fu_824_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_flat_fu_824_max_pool_out_V_ce0,
        max_pool_out_V_q0 => max_pool_2_out_V_q0,
        flat_array_V_address0 => grp_flat_fu_824_flat_array_V_address0,
        flat_array_V_ce0 => grp_flat_fu_824_flat_array_V_ce0,
        flat_array_V_we0 => grp_flat_fu_824_flat_array_V_we0,
        flat_array_V_d0 => grp_flat_fu_824_flat_array_V_d0);

    cnn_fpext_32ns_64vdy_U37 : component cnn_fpext_32ns_64vdy
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => cnn_input_Dout_A,
        ce => ap_const_logic_1,
        dout => grp_fu_830_p1);

    cnn_mac_muladd_9nwdI_U38 : component cnn_mac_muladd_9nwdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        din2_WIDTH => 6,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_1996_p0,
        din1 => grp_fu_1996_p1,
        din2 => grp_fu_1996_p2,
        dout => grp_fu_1996_p3);

    cnn_mac_muladd_14xdS_U39 : component cnn_mac_muladd_14xdS
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => flat_array_V_q0,
        din1 => dense_1_weights_V_q0,
        din2 => grp_fu_2005_p2,
        dout => grp_fu_2005_p3);

    cnn_mac_muladd_9syd2_U40 : component cnn_mac_muladd_9syd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 13,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_2_weights_V_q0,
        din1 => grp_fu_2015_p1,
        din2 => grp_fu_2015_p2,
        dout => grp_fu_2015_p3);

    cnn_mac_muladd_13zec_U41 : component cnn_mac_muladd_13zec
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_2025_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_2025_p2,
        dout => grp_fu_2025_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_flat_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state17);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_flat_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state20);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state23))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state23);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_1_fu_802_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_1_fu_802_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_conv_1_fu_802_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_1_fu_802_ap_ready = ap_const_logic_1)) then 
                    grp_conv_1_fu_802_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_2_fu_792_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_2_fu_792_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_conv_2_fu_792_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_2_fu_792_ap_ready = ap_const_logic_1)) then 
                    grp_conv_2_fu_792_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flat_fu_824_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_flat_fu_824_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_flat_fu_824_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flat_fu_824_ap_ready = ap_const_logic_1)) then 
                    grp_flat_fu_824_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_1_fu_812_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pool_1_fu_812_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_max_pool_1_fu_812_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_1_fu_812_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_1_fu_812_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_2_fu_818_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pool_2_fu_818_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_max_pool_2_fu_818_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_2_fu_818_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_2_fu_818_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_780_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_soft_max_fu_780_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_soft_max_fu_780_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_780_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_780_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_i_reg_735_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_reg_2212 = ap_const_lv1_0))) then 
                d_0_i_reg_735 <= select_ln48_1_reg_2226;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                d_0_i_reg_735 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_i_reg_758_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_reg_2212 = ap_const_lv1_0))) then 
                f_0_i_reg_758 <= f_reg_2246;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                f_0_i_reg_758 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i24_0_reg_769_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i24_0_reg_769 <= i_3_reg_2268;
            elsif (((grp_soft_max_fu_780_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i24_0_reg_769 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i5_reg_690_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln9_1_reg_2159 = ap_const_lv1_0))) then 
                i_0_i5_reg_690 <= select_ln14_4_reg_2173;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_0_i5_reg_690 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_645_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_2106 = ap_const_lv1_0))) then 
                i_0_i_reg_645 <= select_ln14_1_reg_2120;
            elsif (((grp_flat_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_0_i_reg_645 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_reg_602_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_882_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_602 <= i_reg_2057;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_602 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_679_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln9_1_fu_1353_p2 = ap_const_lv1_0))) then 
                indvar_flatten11_reg_679 <= add_ln9_2_fu_1359_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvar_flatten11_reg_679 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_724_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_fu_1538_p2 = ap_const_lv1_0))) then 
                indvar_flatten23_reg_724 <= add_ln41_fu_1544_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                indvar_flatten23_reg_724 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_fu_1201_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_634 <= add_ln9_fu_1207_p2;
            elsif (((grp_flat_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                indvar_flatten_reg_634 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    ix_in_0_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_882_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ix_in_0_reg_590 <= ix_in_reg_2062;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ix_in_0_reg_590 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    ix_in_1_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ix_in_1_reg_613 <= add_ln28_reg_2090;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_834_p2 = ap_const_lv1_0))) then 
                ix_in_1_reg_613 <= ix_in_0_reg_590;
            end if; 
        end if;
    end process;

    j_0_i10_reg_713_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln9_1_reg_2159 = ap_const_lv1_0))) then 
                j_0_i10_reg_713 <= j_2_reg_2193;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_0_i10_reg_713 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_668_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_2106 = ap_const_lv1_0))) then 
                j_0_i_reg_668 <= j_reg_2140;
            elsif (((grp_flat_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                j_0_i_reg_668 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_623_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_623 <= j_1_reg_2075;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_834_p2 = ap_const_lv1_0))) then 
                j_0_reg_623 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_30_reg_701_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln9_1_reg_2159 = ap_const_lv1_0))) then 
                p_Val2_30_reg_701 <= grp_fu_2015_p3(21 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_Val2_30_reg_701 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_33_reg_746_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_reg_2212 = ap_const_lv1_0))) then 
                p_Val2_33_reg_746 <= grp_fu_2025_p3(21 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                p_Val2_33_reg_746 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_2106 = ap_const_lv1_0))) then 
                p_Val2_s_reg_656 <= grp_fu_2005_p3(21 downto 8);
            elsif (((grp_flat_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                p_Val2_s_reg_656 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_882_p2 = ap_const_lv1_0))) then
                add_ln203_8_reg_2080 <= add_ln203_8_fu_898_p2;
                add_ln28_reg_2090 <= add_ln28_fu_908_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cnn_input_load_reg_2095 <= cnn_input_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_fu_1538_p2 = ap_const_lv1_0))) then
                f_reg_2246 <= f_fu_1633_p2;
                select_ln48_1_reg_2226 <= select_ln48_1_fu_1570_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                i_3_reg_2268 <= i_3_fu_1694_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_2057 <= i_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_fu_1201_p2 = ap_const_lv1_0))) then
                icmp_ln13_1_reg_2145 <= icmp_ln13_1_fu_1269_p2;
                icmp_ln13_reg_2115 <= icmp_ln13_fu_1219_p2;
                    zext_ln14_reg_2125(5 downto 0) <= zext_ln14_fu_1241_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln9_1_fu_1353_p2 = ap_const_lv1_0))) then
                icmp_ln13_2_reg_2168 <= icmp_ln13_2_fu_1371_p2;
                icmp_ln13_3_reg_2198 <= icmp_ln13_3_fu_1454_p2;
                    zext_ln14_2_reg_2178(4 downto 0) <= zext_ln14_2_fu_1393_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln41_reg_2212 <= icmp_ln41_fu_1538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_fu_1538_p2 = ap_const_lv1_0))) then
                icmp_ln46_1_reg_2251 <= icmp_ln46_1_fu_1639_p2;
                icmp_ln46_reg_2221 <= icmp_ln46_fu_1556_p2;
                    zext_ln48_reg_2231(3 downto 0) <= zext_ln48_fu_1578_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                icmp_ln935_reg_2283 <= icmp_ln935_fu_1705_p2;
                icmp_ln958_reg_2309 <= icmp_ln958_fu_1877_p2;
                    or_ln_reg_2304(0) <= or_ln_fu_1869_p3(0);
                p_Result_41_reg_2288 <= prediction_V_q0(13 downto 13);
                sub_ln944_reg_2298 <= sub_ln944_fu_1759_p2;
                tmp_V_13_reg_2293 <= tmp_V_13_fu_1725_p3;
                trunc_ln943_reg_2314 <= trunc_ln943_fu_1883_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln9_1_reg_2159 <= icmp_ln9_1_fu_1353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln9_reg_2106 <= icmp_ln9_fu_1201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_834_p2 = ap_const_lv1_0))) then
                ix_in_reg_2062 <= ix_in_fu_846_p2;
                    sub_ln203_reg_2067(10 downto 2) <= sub_ln203_fu_876_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_2075 <= j_1_fu_888_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln9_1_fu_1353_p2 = ap_const_lv1_0))) then
                j_2_reg_2193 <= j_2_fu_1448_p2;
                select_ln14_4_reg_2173 <= select_ln14_4_fu_1385_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_fu_1201_p2 = ap_const_lv1_0))) then
                j_reg_2140 <= j_fu_1263_p2;
                select_ln14_1_reg_2120 <= select_ln14_1_fu_1233_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                select_ln603_3_reg_2101 <= select_ln603_3_fu_1189_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln69_fu_1688_p2 = ap_const_lv1_0))) then
                    zext_ln70_reg_2273(3 downto 0) <= zext_ln70_fu_1700_p1(3 downto 0);
            end if;
        end if;
    end process;
    sub_ln203_reg_2067(1 downto 0) <= "00";
    zext_ln14_reg_2125(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln14_2_reg_2178(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln48_reg_2231(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_2273(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln_reg_2304(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_834_p2, ap_CS_fsm_state3, icmp_ln25_fu_882_p2, icmp_ln9_fu_1201_p2, ap_enable_reg_pp0_iter0, icmp_ln9_1_fu_1353_p2, ap_enable_reg_pp1_iter0, icmp_ln41_fu_1538_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state27, icmp_ln69_fu_1688_p2, ap_CS_fsm_state16, grp_flat_fu_824_ap_done, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, grp_soft_max_fu_780_ap_done, grp_conv_2_fu_792_ap_done, grp_conv_1_fu_802_ap_done, grp_max_pool_1_fu_812_ap_done, grp_max_pool_2_fu_818_ap_done, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_834_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln25_fu_882_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_conv_1_fu_802_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_max_pool_1_fu_812_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_conv_2_fu_792_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_max_pool_2_fu_818_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_flat_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln9_fu_1201_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln9_fu_1201_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln9_1_fu_1353_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln9_1_fu_1353_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln41_fu_1538_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln41_fu_1538_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_soft_max_fu_780_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln69_fu_1688_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_980_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_940_p1));
    a_fu_1823_p2 <= (icmp_ln947_fu_1785_p2 and icmp_ln947_1_fu_1817_p2);
    add_ln1116_4_fu_1622_p2 <= std_logic_vector(unsigned(add_ln1116_fu_1616_p2) + unsigned(zext_ln47_fu_1583_p1));
    add_ln1116_fu_1616_p2 <= std_logic_vector(unsigned(zext_ln1116_8_fu_1612_p1) + unsigned(zext_ln1116_fu_1600_p1));
    add_ln1117_2_fu_1437_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_1431_p2) + unsigned(zext_ln13_1_fu_1398_p1));
    add_ln203_1_fu_1515_p2 <= std_logic_vector(unsigned(trunc_ln703_2_fu_1496_p4) + unsigned(sext_ln703_2_fu_1505_p1));
    add_ln203_8_fu_898_p2 <= std_logic_vector(unsigned(sub_ln203_reg_2067) + unsigned(zext_ln203_18_fu_894_p1));
    add_ln203_fu_1330_p2 <= std_logic_vector(unsigned(trunc_ln_fu_1311_p4) + unsigned(sext_ln703_fu_1320_p1));
    add_ln28_fu_908_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ix_in_1_reg_613));
    add_ln41_fu_1544_p2 <= std_logic_vector(unsigned(indvar_flatten23_reg_724) + unsigned(ap_const_lv9_1));
    add_ln581_fu_992_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_fu_980_p2));
    add_ln703_1_fu_1509_p2 <= std_logic_vector(signed(sext_ln1265_1_fu_1492_p1) + signed(sum_V_1_fu_1483_p4));
    add_ln703_fu_1324_p2 <= std_logic_vector(signed(sext_ln1265_fu_1307_p1) + signed(sum_V_fu_1298_p4));
    add_ln949_fu_1843_p2 <= std_logic_vector(signed(ap_const_lv14_3FE8) + signed(trunc_ln944_fu_1765_p1));
    add_ln958_fu_1890_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_2298));
    add_ln964_fu_1959_p2 <= std_logic_vector(unsigned(select_ln964_fu_1946_p3) + unsigned(sub_ln964_fu_1954_p2));
    add_ln9_2_fu_1359_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_679) + unsigned(ap_const_lv11_1));
    add_ln9_fu_1207_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_634) + unsigned(ap_const_lv15_1));
    and_ln581_fu_1105_p2 <= (xor_ln582_fu_1099_p2 and icmp_ln581_fu_986_p2);
    and_ln582_fu_1087_p2 <= (xor_ln571_fu_1081_p2 and icmp_ln582_fu_1016_p2);
    and_ln585_1_fu_1123_p2 <= (icmp_ln585_fu_1026_p2 and and_ln581_fu_1105_p2);
    and_ln585_fu_1117_p2 <= (xor_ln585_fu_1111_p2 and and_ln581_fu_1105_p2);
    and_ln603_fu_1141_p2 <= (xor_ln581_fu_1135_p2 and icmp_ln603_fu_1032_p2);
    and_ln949_fu_1857_p2 <= (xor_ln949_fu_1837_p2 and p_Result_37_fu_1849_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state17_assign_proc : process(icmp_ln9_fu_1201_p2)
    begin
        if ((icmp_ln9_fu_1201_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state20_assign_proc : process(icmp_ln9_1_fu_1353_p2)
    begin
        if ((icmp_ln9_1_fu_1353_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state23_assign_proc : process(icmp_ln41_fu_1538_p2)
    begin
        if ((icmp_ln41_fu_1538_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state27, icmp_ln69_fu_1688_p2)
    begin
        if (((icmp_ln69_fu_1688_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_d_0_i_phi_fu_739_p4_assign_proc : process(d_0_i_reg_735, icmp_ln41_reg_2212, ap_CS_fsm_pp2_stage0, select_ln48_1_reg_2226, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_reg_2212 = ap_const_lv1_0))) then 
            ap_phi_mux_d_0_i_phi_fu_739_p4 <= select_ln48_1_reg_2226;
        else 
            ap_phi_mux_d_0_i_phi_fu_739_p4 <= d_0_i_reg_735;
        end if; 
    end process;


    ap_phi_mux_f_0_i_phi_fu_762_p4_assign_proc : process(f_0_i_reg_758, icmp_ln41_reg_2212, ap_CS_fsm_pp2_stage0, f_reg_2246, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln41_reg_2212 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_i_phi_fu_762_p4 <= f_reg_2246;
        else 
            ap_phi_mux_f_0_i_phi_fu_762_p4 <= f_0_i_reg_758;
        end if; 
    end process;


    ap_phi_mux_i_0_i5_phi_fu_694_p4_assign_proc : process(i_0_i5_reg_690, icmp_ln9_1_reg_2159, ap_CS_fsm_pp1_stage0, select_ln14_4_reg_2173, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln9_1_reg_2159 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i5_phi_fu_694_p4 <= select_ln14_4_reg_2173;
        else 
            ap_phi_mux_i_0_i5_phi_fu_694_p4 <= i_0_i5_reg_690;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_649_p4_assign_proc : process(i_0_i_reg_645, icmp_ln9_reg_2106, ap_CS_fsm_pp0_stage0, select_ln14_1_reg_2120, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_2106 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i_phi_fu_649_p4 <= select_ln14_1_reg_2120;
        else 
            ap_phi_mux_i_0_i_phi_fu_649_p4 <= i_0_i_reg_645;
        end if; 
    end process;


    ap_phi_mux_j_0_i10_phi_fu_717_p4_assign_proc : process(j_0_i10_reg_713, icmp_ln9_1_reg_2159, ap_CS_fsm_pp1_stage0, j_2_reg_2193, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln9_1_reg_2159 = ap_const_lv1_0))) then 
            ap_phi_mux_j_0_i10_phi_fu_717_p4 <= j_2_reg_2193;
        else 
            ap_phi_mux_j_0_i10_phi_fu_717_p4 <= j_0_i10_reg_713;
        end if; 
    end process;


    ap_phi_mux_j_0_i_phi_fu_672_p4_assign_proc : process(j_0_i_reg_668, icmp_ln9_reg_2106, ap_CS_fsm_pp0_stage0, j_reg_2140, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_2106 = ap_const_lv1_0))) then 
            ap_phi_mux_j_0_i_phi_fu_672_p4 <= j_reg_2140;
        else 
            ap_phi_mux_j_0_i_phi_fu_672_p4 <= j_0_i_reg_668;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27, icmp_ln69_fu_1688_p2)
    begin
        if (((icmp_ln69_fu_1688_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ashr_ln586_fu_1042_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_966_p3),to_integer(unsigned('0' & zext_ln586_fu_1038_p1(31-1 downto 0)))));
    bitcast_ln696_fu_1052_p1 <= cnn_input_load_reg_2095;
    bitcast_ln739_fu_1984_p1 <= p_Result_43_fu_1972_p5;
    cnn_input_Addr_A <= std_logic_vector(shift_left(unsigned(cnn_input_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    cnn_input_Addr_A_orig <= zext_ln27_fu_903_p1(32 - 1 downto 0);
    cnn_input_Clk_A <= ap_clk;
    cnn_input_Din_A <= ap_const_lv32_0;

    cnn_input_EN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnn_input_EN_A <= ap_const_logic_1;
        else 
            cnn_input_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    cnn_input_Rst_A <= ap_rst_n_inv;
    cnn_input_WEN_A <= ap_const_lv4_0;

    conv_1_input_V_address0_assign_proc : process(grp_conv_1_fu_802_input_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, sext_ln203_fu_1197_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_address0 <= sext_ln203_fu_1197_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_address0 <= grp_conv_1_fu_802_input_V_address0;
        else 
            conv_1_input_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_1_input_V_ce0_assign_proc : process(grp_conv_1_fu_802_input_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_ce0 <= grp_conv_1_fu_802_input_V_ce0;
        else 
            conv_1_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_we0 <= ap_const_logic_1;
        else 
            conv_1_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_802_conv_out_V_address0, grp_max_pool_1_fu_812_conv_out_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_address0 <= grp_max_pool_1_fu_812_conv_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_address0 <= grp_conv_1_fu_802_conv_out_V_address0;
        else 
            conv_1_out_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_802_conv_out_V_ce0, grp_max_pool_1_fu_812_conv_out_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_ce0 <= grp_max_pool_1_fu_812_conv_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_ce0 <= grp_conv_1_fu_802_conv_out_V_ce0;
        else 
            conv_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_ce1_assign_proc : process(grp_max_pool_1_fu_812_conv_out_V_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_ce1 <= grp_max_pool_1_fu_812_conv_out_V_ce1;
        else 
            conv_1_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_802_conv_out_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_d0 <= grp_conv_1_fu_802_conv_out_V_d0;
        else 
            conv_1_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_834_p2, grp_conv_1_fu_802_conv_out_V_we0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_834_p2 = ap_const_lv1_1))) then 
            conv_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_we0 <= grp_conv_1_fu_802_conv_out_V_we0;
        else 
            conv_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_792_conv_out_V_address0, grp_max_pool_2_fu_818_conv_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_address0 <= ap_const_lv64_0(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_V_address0 <= grp_max_pool_2_fu_818_conv_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_address0 <= grp_conv_2_fu_792_conv_out_V_address0;
        else 
            conv_2_out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_792_conv_out_V_ce0, grp_max_pool_2_fu_818_conv_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_V_ce0 <= grp_max_pool_2_fu_818_conv_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_ce0 <= grp_conv_2_fu_792_conv_out_V_ce0;
        else 
            conv_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_ce1_assign_proc : process(grp_max_pool_2_fu_818_conv_out_V_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_V_ce1 <= grp_max_pool_2_fu_818_conv_out_V_ce1;
        else 
            conv_2_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_792_conv_out_V_d0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_d0 <= grp_conv_2_fu_792_conv_out_V_d0;
        else 
            conv_2_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_834_p2, grp_conv_2_fu_792_conv_out_V_we0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_834_p2 = ap_const_lv1_1))) then 
            conv_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_we0 <= grp_conv_2_fu_792_conv_out_V_we0;
        else 
            conv_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_1550_p2 <= std_logic_vector(unsigned(ap_phi_mux_d_0_i_phi_fu_739_p4) + unsigned(ap_const_lv4_1));
    dense_1_bias_V_address0 <= zext_ln14_fu_1241_p1(6 - 1 downto 0);

    dense_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln14_reg_2125, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state16, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln14_3_fu_1402_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dense_1_out_V_address0 <= zext_ln14_3_fu_1402_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_1_out_V_address0 <= zext_ln14_reg_2125(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_1_out_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            dense_1_out_V_address0 <= "XXXXXX";
        end if; 
    end process;


    dense_1_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state16, grp_flat_fu_824_ap_done)
    begin
        if ((((grp_flat_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dense_1_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state16, ap_block_pp0_stage0, select_ln19_fu_1344_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_1_out_V_d0 <= select_ln19_fu_1344_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_1_out_V_d0 <= ap_const_lv13_0;
        else 
            dense_1_out_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_out_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln13_1_reg_2145, ap_enable_reg_pp0_iter1, ap_CS_fsm_state16, grp_flat_fu_824_ap_done)
    begin
        if ((((grp_flat_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln13_1_reg_2145 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dense_1_out_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_address0 <= zext_ln1117_6_fu_1259_p1(15 - 1 downto 0);

    dense_1_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_bias_V_address0 <= zext_ln14_2_fu_1393_p1(5 - 1 downto 0);

    dense_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dense_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, zext_ln14_2_reg_2178, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state19, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln48_1_fu_1587_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dense_2_out_V_address0 <= zext_ln48_1_fu_1587_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dense_2_out_V_address0 <= zext_ln14_2_reg_2178(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_2_out_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            dense_2_out_V_address0 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state19, ap_block_pp1_stage0, select_ln19_1_fu_1529_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dense_2_out_V_d0 <= select_ln19_1_fu_1529_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_2_out_V_d0 <= ap_const_lv13_0;
        else 
            dense_2_out_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_out_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln13_3_reg_2198, ap_enable_reg_pp1_iter1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln13_3_reg_2198 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            dense_2_out_V_we0 <= ap_const_logic_1;
        else 
            dense_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_weights_V_address0 <= sext_ln1117_fu_1443_p1(11 - 1 downto 0);

    dense_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dense_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, zext_ln48_reg_2231, ap_enable_reg_pp2_iter1, grp_soft_max_fu_780_dense_array_V_address0, ap_block_pp2_stage0, ap_CS_fsm_state26)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dense_array_V_address0 <= zext_ln48_reg_2231(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_array_V_address0 <= grp_soft_max_fu_780_dense_array_V_address0;
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, grp_soft_max_fu_780_dense_array_V_ce0, ap_CS_fsm_state26)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_array_V_ce0 <= grp_soft_max_fu_780_dense_array_V_ce0;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_ce1_assign_proc : process(grp_soft_max_fu_780_dense_array_V_ce1, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_array_V_ce1 <= grp_soft_max_fu_780_dense_array_V_ce1;
        else 
            dense_array_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dense_array_V_d0 <= std_logic_vector(signed(sext_ln1265_2_fu_1677_p1) + signed(w_sum_V_fu_1668_p4));

    dense_array_V_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln46_1_reg_2251, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln46_1_reg_2251 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dense_array_V_we0 <= ap_const_logic_1;
        else 
            dense_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_we1_assign_proc : process(grp_soft_max_fu_780_dense_array_V_we1, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_array_V_we1 <= grp_soft_max_fu_780_dense_array_V_we1;
        else 
            dense_array_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_V_address0 <= zext_ln48_fu_1578_p1(4 - 1 downto 0);

    dense_out_bias_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dense_out_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_weights_V_address0 <= zext_ln1116_9_fu_1628_p1(9 - 1 downto 0);

    dense_out_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dense_out_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_930_p4 <= ireg_V_fu_914_p1(62 downto 52);
    f_fu_1633_p2 <= std_logic_vector(unsigned(select_ln48_fu_1562_p3) + unsigned(ap_const_lv5_1));

    flat_array_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, grp_flat_fu_824_flat_array_V_address0, ap_block_pp0_stage0, ap_CS_fsm_state14, zext_ln14_1_fu_1250_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flat_array_V_address0 <= zext_ln14_1_fu_1250_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flat_array_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_address0 <= grp_flat_fu_824_flat_array_V_address0;
        else 
            flat_array_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, grp_max_pool_2_fu_818_ap_done, grp_flat_fu_824_flat_array_V_ce0, ap_CS_fsm_state14)
    begin
        if ((((grp_max_pool_2_fu_818_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_ce0 <= grp_flat_fu_824_flat_array_V_ce0;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_V_d0_assign_proc : process(ap_CS_fsm_state16, grp_flat_fu_824_flat_array_V_d0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flat_array_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_d0 <= grp_flat_fu_824_flat_array_V_d0;
        else 
            flat_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    flat_array_V_we0_assign_proc : process(ap_CS_fsm_state16, grp_max_pool_2_fu_818_ap_done, grp_flat_fu_824_flat_array_V_we0, ap_CS_fsm_state14)
    begin
        if (((grp_max_pool_2_fu_818_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            flat_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_we0 <= grp_flat_fu_824_flat_array_V_we0;
        else 
            flat_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_1_fu_802_ap_start <= grp_conv_1_fu_802_ap_start_reg;
    grp_conv_2_fu_792_ap_start <= grp_conv_2_fu_792_ap_start_reg;
    grp_flat_fu_824_ap_start <= grp_flat_fu_824_ap_start_reg;
    grp_fu_1996_p0 <= grp_fu_1996_p00(9 - 1 downto 0);
    grp_fu_1996_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_1225_p3),15));
    grp_fu_1996_p1 <= ap_const_lv15_32(7 - 1 downto 0);
    grp_fu_1996_p2 <= grp_fu_1996_p20(6 - 1 downto 0);
    grp_fu_1996_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_1_fu_1233_p3),15));
    grp_fu_2005_p2 <= (select_ln14_2_fu_1283_p3 & ap_const_lv8_0);
    grp_fu_2015_p1 <= grp_fu_2015_p10(13 - 1 downto 0);
    grp_fu_2015_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_1_out_V_q0),22));
    grp_fu_2015_p2 <= (select_ln14_5_fu_1468_p3 & ap_const_lv8_0);
    grp_fu_2025_p0 <= grp_fu_2025_p00(13 - 1 downto 0);
    grp_fu_2025_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    grp_fu_2025_p2 <= (select_ln48_2_fu_1653_p3 & ap_const_lv8_0);
    grp_max_pool_1_fu_812_ap_start <= grp_max_pool_1_fu_812_ap_start_reg;
    grp_max_pool_2_fu_818_ap_start <= grp_max_pool_2_fu_818_ap_start_reg;
    grp_soft_max_fu_780_ap_start <= grp_soft_max_fu_780_ap_start_reg;
    i_1_fu_1213_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_649_p4) + unsigned(ap_const_lv6_1));
    i_2_fu_1365_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i5_phi_fu_694_p4) + unsigned(ap_const_lv5_1));
    i_3_fu_1694_p2 <= std_logic_vector(unsigned(i24_0_reg_769) + unsigned(ap_const_lv4_1));
    i_fu_840_p2 <= std_logic_vector(unsigned(i_0_reg_602) + unsigned(ap_const_lv5_1));
    icmp_ln13_1_fu_1269_p2 <= "1" when (j_fu_1263_p2 = ap_const_lv9_190) else "0";
    icmp_ln13_2_fu_1371_p2 <= "1" when (ap_phi_mux_j_0_i10_phi_fu_717_p4 = ap_const_lv6_32) else "0";
    icmp_ln13_3_fu_1454_p2 <= "1" when (j_2_fu_1448_p2 = ap_const_lv6_32) else "0";
    icmp_ln13_fu_1219_p2 <= "1" when (ap_phi_mux_j_0_i_phi_fu_672_p4 = ap_const_lv9_190) else "0";
    icmp_ln23_fu_834_p2 <= "1" when (i_0_reg_602 = ap_const_lv5_1C) else "0";
    icmp_ln25_fu_882_p2 <= "1" when (j_0_reg_623 = ap_const_lv5_1C) else "0";
    icmp_ln41_fu_1538_p2 <= "1" when (indvar_flatten23_reg_724 = ap_const_lv9_12C) else "0";
    icmp_ln46_1_fu_1639_p2 <= "1" when (f_fu_1633_p2 = ap_const_lv5_1E) else "0";
    icmp_ln46_fu_1556_p2 <= "1" when (ap_phi_mux_f_0_i_phi_fu_762_p4 = ap_const_lv5_1E) else "0";
    icmp_ln571_fu_974_p2 <= "1" when (trunc_ln556_fu_918_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_986_p2 <= "1" when (signed(F2_fu_980_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln582_fu_1016_p2 <= "1" when (F2_fu_980_p2 = ap_const_lv12_8) else "0";
    icmp_ln585_fu_1026_p2 <= "1" when (unsigned(sh_amt_fu_1004_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_1032_p2 <= "1" when (unsigned(sh_amt_fu_1004_p3) < unsigned(ap_const_lv12_E)) else "0";
    icmp_ln69_fu_1688_p2 <= "1" when (i24_0_reg_769 = ap_const_lv4_A) else "0";
    icmp_ln935_fu_1705_p2 <= "1" when (prediction_V_q0 = ap_const_lv14_0) else "0";
    icmp_ln947_1_fu_1817_p2 <= "0" when (p_Result_36_fu_1811_p2 = ap_const_lv14_0) else "1";
    icmp_ln947_fu_1785_p2 <= "1" when (signed(tmp_22_fu_1775_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_1877_p2 <= "1" when (signed(lsb_index_fu_1769_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln9_1_fu_1353_p2 <= "1" when (indvar_flatten11_reg_679 = ap_const_lv11_5DC) else "0";
    icmp_ln9_fu_1201_p2 <= "1" when (indvar_flatten_reg_634 = ap_const_lv15_4E20) else "0";
    ireg_V_fu_914_p1 <= grp_fu_830_p1;
    ix_in_fu_846_p2 <= std_logic_vector(unsigned(ix_in_0_reg_590) + unsigned(ap_const_lv10_1C));
    j_1_fu_888_p2 <= std_logic_vector(unsigned(j_0_reg_623) + unsigned(ap_const_lv5_1));
    j_2_fu_1448_p2 <= std_logic_vector(unsigned(select_ln14_3_fu_1377_p3) + unsigned(ap_const_lv6_1));
    j_fu_1263_p2 <= std_logic_vector(unsigned(select_ln14_fu_1225_p3) + unsigned(ap_const_lv9_1));
    
    l_fu_1751_p3_proc : process(p_Result_42_fu_1743_p3)
    begin
        l_fu_1751_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_42_fu_1743_p3(i) = '1' then
                l_fu_1751_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_1769_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_1759_p2));
    lshr_ln947_fu_1805_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln947_fu_1801_p1(14-1 downto 0)))));
    lshr_ln958_fu_1895_p2 <= std_logic_vector(shift_right(unsigned(m_fu_1887_p1),to_integer(unsigned('0' & add_ln958_fu_1890_p2(31-1 downto 0)))));
    m_12_fu_1912_p3 <= 
        lshr_ln958_fu_1895_p2 when (icmp_ln958_reg_2309(0) = '1') else 
        shl_ln958_fu_1906_p2;
    m_13_fu_1919_p2 <= std_logic_vector(unsigned(m_12_fu_1912_p3) + unsigned(or_ln_reg_2304));
    m_16_fu_1934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_1924_p4),32));
    m_fu_1887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_13_reg_2293),32));
    m_s_fu_1924_p4 <= m_13_fu_1919_p2(31 downto 1);
    man_V_1_fu_960_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_40_fu_956_p1));
    man_V_2_fu_966_p3 <= 
        man_V_1_fu_960_p2 when (p_Result_39_fu_922_p3(0) = '1') else 
        p_Result_40_fu_956_p1;

    max_pool_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_792_input_V_address0, grp_max_pool_1_fu_812_max_pool_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_address0 <= grp_max_pool_1_fu_812_max_pool_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_address0 <= grp_conv_2_fu_792_input_V_address0;
        else 
            max_pool_1_out_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_792_input_V_ce0, grp_max_pool_1_fu_812_max_pool_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_ce0 <= grp_max_pool_1_fu_812_max_pool_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_ce0 <= grp_conv_2_fu_792_input_V_ce0;
        else 
            max_pool_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_1_fu_812_max_pool_out_V_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_d0 <= grp_max_pool_1_fu_812_max_pool_out_V_d0;
        else 
            max_pool_1_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_834_p2, grp_max_pool_1_fu_812_max_pool_out_V_we0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_834_p2 = ap_const_lv1_1))) then 
            max_pool_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_we0 <= grp_max_pool_1_fu_812_max_pool_out_V_we0;
        else 
            max_pool_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16, grp_max_pool_2_fu_818_max_pool_out_V_address0, grp_flat_fu_824_max_pool_out_V_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            max_pool_2_out_V_address0 <= grp_flat_fu_824_max_pool_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_address0 <= grp_max_pool_2_fu_818_max_pool_out_V_address0;
        else 
            max_pool_2_out_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16, grp_max_pool_2_fu_818_max_pool_out_V_ce0, grp_flat_fu_824_max_pool_out_V_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            max_pool_2_out_V_ce0 <= grp_flat_fu_824_max_pool_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_ce0 <= grp_max_pool_2_fu_818_max_pool_out_V_ce0;
        else 
            max_pool_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_818_max_pool_out_V_d0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_d0 <= grp_max_pool_2_fu_818_max_pool_out_V_d0;
        else 
            max_pool_2_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_834_p2, grp_max_pool_2_fu_818_max_pool_out_V_we0, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_834_p2 = ap_const_lv1_1))) then 
            max_pool_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_we0 <= grp_max_pool_2_fu_818_max_pool_out_V_we0;
        else 
            max_pool_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln581_fu_1129_p2 <= (or_ln582_fu_1093_p2 or icmp_ln581_fu_986_p2);
    or_ln582_fu_1093_p2 <= (icmp_ln582_fu_1016_p2 or icmp_ln571_fu_974_p2);
    or_ln603_1_fu_1169_p2 <= (and_ln585_fu_1117_p2 or and_ln582_fu_1087_p2);
    or_ln603_2_fu_1183_p2 <= (or_ln603_fu_1155_p2 or or_ln603_1_fu_1169_p2);
    or_ln603_fu_1155_p2 <= (and_ln603_fu_1141_p2 or and_ln585_1_fu_1123_p2);
    or_ln949_fu_1863_p2 <= (and_ln949_fu_1857_p2 or a_fu_1823_p2);
    or_ln_fu_1869_p3 <= (ap_const_lv31_0 & or_ln949_fu_1863_p2);
    p_Result_36_fu_1811_p2 <= (tmp_V_13_fu_1725_p3 and lshr_ln947_fu_1805_p2);
    p_Result_37_fu_1849_p3 <= tmp_V_13_fu_1725_p3(to_integer(unsigned(add_ln949_fu_1843_p2)) downto to_integer(unsigned(add_ln949_fu_1843_p2))) when (to_integer(unsigned(add_ln949_fu_1843_p2))>= 0 and to_integer(unsigned(add_ln949_fu_1843_p2))<=13) else "-";
    p_Result_39_fu_922_p3 <= ireg_V_fu_914_p1(63 downto 63);
    p_Result_40_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_948_p3),54));
    p_Result_41_fu_1711_p3 <= prediction_V_q0(13 downto 13);
    p_Result_42_fu_1743_p3 <= (ap_const_lv18_3FFFF & p_Result_s_fu_1733_p4);
    p_Result_43_fu_1972_p5 <= (tmp_s_fu_1965_p3 & m_16_fu_1934_p1(22 downto 0));
    
    p_Result_s_fu_1733_p4_proc : process(tmp_V_13_fu_1725_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_1733_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_13_fu_1725_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_1733_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_1733_p4_i) := tmp_V_13_fu_1725_p3(14-1-p_Result_s_fu_1733_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_1733_p4 <= resvalue(14-1 downto 0);
    end process;


    prediction_V_address0_assign_proc : process(ap_CS_fsm_state27, zext_ln70_fu_1700_p1, ap_CS_fsm_state22, grp_soft_max_fu_780_prediction_V_address0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            prediction_V_address0 <= zext_ln70_fu_1700_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            prediction_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            prediction_V_address0 <= grp_soft_max_fu_780_prediction_V_address0;
        else 
            prediction_V_address0 <= "XXXX";
        end if; 
    end process;


    prediction_V_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state22, grp_soft_max_fu_780_prediction_V_ce0, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            prediction_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            prediction_V_ce0 <= grp_soft_max_fu_780_prediction_V_ce0;
        else 
            prediction_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_V_d0_assign_proc : process(ap_CS_fsm_state22, grp_soft_max_fu_780_prediction_V_d0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            prediction_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            prediction_V_d0 <= grp_soft_max_fu_780_prediction_V_d0;
        else 
            prediction_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    prediction_V_we0_assign_proc : process(ap_CS_fsm_state22, grp_soft_max_fu_780_prediction_V_we0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            prediction_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            prediction_V_we0 <= grp_soft_max_fu_780_prediction_V_we0;
        else 
            prediction_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_Addr_A <= std_logic_vector(shift_left(unsigned(prediction_output_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    prediction_output_Addr_A_orig <= zext_ln70_reg_2273(32 - 1 downto 0);
    prediction_output_Clk_A <= ap_clk;
    prediction_output_Din_A <= 
        ap_const_lv32_0 when (icmp_ln935_reg_2283(0) = '1') else 
        bitcast_ln739_fu_1984_p1;

    prediction_output_EN_A_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_output_EN_A <= ap_const_logic_1;
        else 
            prediction_output_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_Rst_A <= ap_rst_n_inv;

    prediction_output_WEN_A_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_output_WEN_A <= ap_const_lv4_F;
        else 
            prediction_output_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    select_ln14_1_fu_1233_p3 <= 
        i_1_fu_1213_p2 when (icmp_ln13_fu_1219_p2(0) = '1') else 
        ap_phi_mux_i_0_i_phi_fu_649_p4;
    select_ln14_2_fu_1283_p3 <= 
        ap_const_lv14_0 when (icmp_ln13_reg_2115(0) = '1') else 
        p_Val2_s_reg_656;
    select_ln14_3_fu_1377_p3 <= 
        ap_const_lv6_0 when (icmp_ln13_2_fu_1371_p2(0) = '1') else 
        ap_phi_mux_j_0_i10_phi_fu_717_p4;
    select_ln14_4_fu_1385_p3 <= 
        i_2_fu_1365_p2 when (icmp_ln13_2_fu_1371_p2(0) = '1') else 
        ap_phi_mux_i_0_i5_phi_fu_694_p4;
    select_ln14_5_fu_1468_p3 <= 
        ap_const_lv14_0 when (icmp_ln13_2_reg_2168(0) = '1') else 
        p_Val2_30_reg_701;
    select_ln14_fu_1225_p3 <= 
        ap_const_lv9_0 when (icmp_ln13_fu_1219_p2(0) = '1') else 
        ap_phi_mux_j_0_i_phi_fu_672_p4;
    select_ln19_1_fu_1529_p3 <= 
        ap_const_lv13_0 when (tmp_20_fu_1521_p3(0) = '1') else 
        add_ln203_1_fu_1515_p2;
    select_ln19_fu_1344_p3 <= 
        ap_const_lv13_0 when (tmp_19_fu_1336_p3(0) = '1') else 
        add_ln203_fu_1330_p2;
    select_ln48_1_fu_1570_p3 <= 
        d_fu_1550_p2 when (icmp_ln46_fu_1556_p2(0) = '1') else 
        ap_phi_mux_d_0_i_phi_fu_739_p4;
    select_ln48_2_fu_1653_p3 <= 
        ap_const_lv14_0 when (icmp_ln46_reg_2221(0) = '1') else 
        p_Val2_33_reg_746;
    select_ln48_fu_1562_p3 <= 
        ap_const_lv5_0 when (icmp_ln46_fu_1556_p2(0) = '1') else 
        ap_phi_mux_f_0_i_phi_fu_762_p4;
    select_ln588_fu_1063_p3 <= 
        ap_const_lv14_3FFF when (tmp_18_fu_1055_p3(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_1_fu_1161_p3 <= 
        select_ln588_fu_1063_p3 when (and_ln585_fu_1117_p2(0) = '1') else 
        trunc_ln583_fu_1022_p1;
    select_ln603_2_fu_1175_p3 <= 
        select_ln603_fu_1147_p3 when (or_ln603_fu_1155_p2(0) = '1') else 
        select_ln603_1_fu_1161_p3;
    select_ln603_3_fu_1189_p3 <= 
        select_ln603_2_fu_1175_p3 when (or_ln603_2_fu_1183_p2(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_fu_1147_p3 <= 
        shl_ln604_fu_1075_p2 when (and_ln603_fu_1141_p2(0) = '1') else 
        trunc_ln586_fu_1048_p1;
    select_ln964_fu_1946_p3 <= 
        ap_const_lv8_7F when (tmp_24_fu_1938_p3(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1117_fu_1443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_2_fu_1437_p2),64));

    sext_ln1265_1_fu_1492_p0 <= dense_2_bias_V_q0;
        sext_ln1265_1_fu_1492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_1_fu_1492_p0),14));

        sext_ln1265_2_fu_1677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_out_bias_V_q0),14));

    sext_ln1265_fu_1307_p0 <= dense_1_bias_V_q0;
        sext_ln1265_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_1307_p0),14));

        sext_ln203_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_8_reg_2080),64));

        sext_ln581_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_1004_p3),32));

    sext_ln581cast_fu_1071_p1 <= sext_ln581_fu_1012_p1(14 - 1 downto 0);
    sext_ln703_2_fu_1505_p0 <= dense_2_bias_V_q0;
        sext_ln703_2_fu_1505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_1505_p0),13));

    sext_ln703_fu_1320_p0 <= dense_1_bias_V_q0;
        sext_ln703_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_1320_p0),13));

    sh_amt_fu_1004_p3 <= 
        add_ln581_fu_992_p2 when (icmp_ln581_fu_986_p2(0) = '1') else 
        sub_ln581_fu_998_p2;
    shl_ln604_fu_1075_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_1022_p1),to_integer(unsigned('0' & sext_ln581cast_fu_1071_p1(14-1 downto 0)))));
    shl_ln958_fu_1906_p2 <= std_logic_vector(shift_left(unsigned(m_fu_1887_p1),to_integer(unsigned('0' & sub_ln958_fu_1901_p2(31-1 downto 0)))));
    sub_ln1117_fu_1431_p2 <= std_logic_vector(unsigned(zext_ln1117_7_fu_1415_p1) - unsigned(zext_ln1117_8_fu_1427_p1));
    sub_ln203_fu_876_p2 <= std_logic_vector(unsigned(zext_ln203_fu_860_p1) - unsigned(zext_ln203_17_fu_872_p1));
    sub_ln581_fu_998_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_980_p2));
    sub_ln944_fu_1759_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_1751_p3));
    sub_ln947_fu_1795_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln947_fu_1791_p1));
    sub_ln958_fu_1901_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_2298));
    sub_ln964_fu_1954_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(trunc_ln943_reg_2314));
    sum_V_1_fu_1483_p4 <= grp_fu_2015_p3(21 downto 8);
    sum_V_fu_1298_p4 <= grp_fu_2005_p3(21 downto 8);
    tmp_18_fu_1055_p3 <= bitcast_ln696_fu_1052_p1(31 downto 31);
    tmp_19_fu_1336_p3 <= add_ln703_fu_1324_p2(13 downto 13);
    tmp_20_fu_1521_p3 <= add_ln703_1_fu_1509_p2(13 downto 13);
    tmp_22_fu_1775_p4 <= lsb_index_fu_1769_p2(31 downto 1);
    tmp_23_fu_1829_p3 <= lsb_index_fu_1769_p2(31 downto 31);
    tmp_24_fu_1938_p3 <= m_13_fu_1919_p2(25 downto 25);
    tmp_4_fu_852_p3 <= (i_0_reg_602 & ap_const_lv5_0);
    tmp_5_fu_864_p3 <= (i_0_reg_602 & ap_const_lv2_0);
    tmp_6_fu_1407_p3 <= (select_ln14_3_fu_1377_p3 & ap_const_lv5_0);
    tmp_7_fu_1419_p3 <= (select_ln14_3_fu_1377_p3 & ap_const_lv1_0);
    tmp_8_fu_1592_p3 <= (select_ln48_fu_1562_p3 & ap_const_lv3_0);
    tmp_9_fu_1604_p3 <= (select_ln48_fu_1562_p3 & ap_const_lv1_0);
    tmp_V_13_fu_1725_p3 <= 
        tmp_V_fu_1719_p2 when (p_Result_41_fu_1711_p3(0) = '1') else 
        prediction_V_q0;
    tmp_V_fu_1719_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(prediction_V_q0));
    tmp_fu_948_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_944_p1);
    tmp_s_fu_1965_p3 <= (p_Result_41_reg_2288 & add_ln964_fu_1959_p2);
    trunc_ln556_fu_918_p1 <= ireg_V_fu_914_p1(63 - 1 downto 0);
    trunc_ln565_fu_944_p1 <= ireg_V_fu_914_p1(52 - 1 downto 0);
    trunc_ln583_fu_1022_p1 <= man_V_2_fu_966_p3(14 - 1 downto 0);
    trunc_ln586_fu_1048_p1 <= ashr_ln586_fu_1042_p2(14 - 1 downto 0);
    trunc_ln703_2_fu_1496_p4 <= grp_fu_2015_p3(20 downto 8);
    trunc_ln943_fu_1883_p1 <= l_fu_1751_p3(8 - 1 downto 0);
    trunc_ln944_fu_1765_p1 <= sub_ln944_fu_1759_p2(14 - 1 downto 0);
    trunc_ln947_fu_1791_p1 <= sub_ln944_fu_1759_p2(4 - 1 downto 0);
    trunc_ln_fu_1311_p4 <= grp_fu_2005_p3(20 downto 8);
    w_sum_V_fu_1668_p4 <= grp_fu_2025_p3(21 downto 8);
    xor_ln571_fu_1081_p2 <= (icmp_ln571_fu_974_p2 xor ap_const_lv1_1);
    xor_ln581_fu_1135_p2 <= (or_ln581_fu_1129_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1099_p2 <= (or_ln582_fu_1093_p2 xor ap_const_lv1_1);
    xor_ln585_fu_1111_p2 <= (icmp_ln585_fu_1026_p2 xor ap_const_lv1_1);
    xor_ln949_fu_1837_p2 <= (tmp_23_fu_1829_p3 xor ap_const_lv1_1);
    zext_ln1116_8_fu_1612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1604_p3),9));
    zext_ln1116_9_fu_1628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_4_fu_1622_p2),64));
    zext_ln1116_fu_1600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1592_p3),9));
    zext_ln1117_6_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1996_p3),64));
    zext_ln1117_7_fu_1415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1407_p3),12));
    zext_ln1117_8_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1419_p3),12));
    zext_ln13_1_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_4_fu_1385_p3),12));
    zext_ln14_1_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_1225_p3),64));
    zext_ln14_2_fu_1393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_4_fu_1385_p3),64));
    zext_ln14_3_fu_1402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_3_fu_1377_p3),64));
    zext_ln14_fu_1241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_1_fu_1233_p3),64));
    zext_ln203_17_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_864_p3),11));
    zext_ln203_18_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_623),11));
    zext_ln203_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_852_p3),11));
    zext_ln27_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_in_1_reg_613),64));
    zext_ln461_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_930_p4),12));
    zext_ln47_fu_1583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_1_fu_1570_p3),9));
    zext_ln48_1_fu_1587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_fu_1562_p3),64));
    zext_ln48_fu_1578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_1_fu_1570_p3),64));
    zext_ln586_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_1012_p1),54));
    zext_ln70_fu_1700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i24_0_reg_769),64));
    zext_ln947_fu_1801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_1795_p2),14));
end behav;
