-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    cnn_input_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_EN_A : OUT STD_LOGIC;
    cnn_input_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    cnn_input_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_Clk_A : OUT STD_LOGIC;
    cnn_input_Rst_A : OUT STD_LOGIC;
    prediction_output_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_EN_A : OUT STD_LOGIC;
    prediction_output_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_output_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_Clk_A : OUT STD_LOGIC;
    prediction_output_Rst_A : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.032750,HLS_SYN_LAT=119470,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=60,HLS_SYN_FF=4137,HLS_SYN_LUT=16211,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv15_4E20 : STD_LOGIC_VECTOR (14 downto 0) := "100111000100000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv14_3FE8 : STD_LOGIC_VECTOR (13 downto 0) := "11111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv15_32 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal dense_1_bias_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_bias_V_ce0 : STD_LOGIC;
    signal dense_1_bias_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_weights_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dense_1_weights_V_ce0 : STD_LOGIC;
    signal dense_1_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_2_weights_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_weights_V_ce0 : STD_LOGIC;
    signal dense_2_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_2_bias_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_bias_V_ce0 : STD_LOGIC;
    signal dense_2_bias_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_ce0 : STD_LOGIC;
    signal dense_out_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_V_ce0 : STD_LOGIC;
    signal dense_out_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_reg_654 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_i_reg_665 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_reg_676 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_i_reg_688 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_868_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_2005 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ix_in_fu_874_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_in_reg_2010 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_904_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_reg_2015 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_fu_916_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_2023 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln203_11_fu_926_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_11_reg_2028 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln25_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_936_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_reg_2038 : STD_LOGIC_VECTOR (9 downto 0);
    signal cnn_input_load_reg_2043 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln603_3_fu_1217_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_3_reg_2049 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln9_fu_1229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_2054 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state17_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln9_fu_1235_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_2063 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_1_fu_1261_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_1_reg_2068 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_fu_1269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_2073 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_1291_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_2088 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln13_2_fu_1297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_2_reg_2093 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1326_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_2_fu_1387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_2110 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln14_2_fu_1393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_2_reg_2115 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_1_fu_1381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_3_fu_1397_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_3_reg_2121 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_fu_1407_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_2129 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln13_1_fu_1401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal d_fu_1530_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_2157 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln48_fu_1536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_2162 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln41_fu_1524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_fu_1540_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_reg_2168 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_fu_1550_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_2176 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln46_fu_1544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_3_fu_1643_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_2204 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln70_fu_1649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_2209 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln69_fu_1637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_1654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_2219 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal p_Result_31_fu_1660_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_31_reg_2224 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_9_fu_1674_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_9_reg_2229 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln944_fu_1708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_2234 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_1818_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_2240 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_1826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_2245 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_1832_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_2250 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_flat_fu_852_ap_ready : STD_LOGIC;
    signal grp_flat_fu_852_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state17 : STD_LOGIC;
    signal dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_ce0 : STD_LOGIC;
    signal dense_array_V_we0 : STD_LOGIC;
    signal dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_1_input_V_ce0 : STD_LOGIC;
    signal conv_1_input_V_we0 : STD_LOGIC;
    signal conv_1_input_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_input_V_ce1 : STD_LOGIC;
    signal conv_1_input_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_out_V_ce0 : STD_LOGIC;
    signal conv_1_out_V_we0 : STD_LOGIC;
    signal conv_1_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_ce1 : STD_LOGIC;
    signal conv_1_out_V_we1 : STD_LOGIC;
    signal max_pool_1_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pool_1_out_V_ce0 : STD_LOGIC;
    signal max_pool_1_out_V_we0 : STD_LOGIC;
    signal max_pool_1_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_V_ce1 : STD_LOGIC;
    signal max_pool_1_out_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_2_out_V_ce0 : STD_LOGIC;
    signal conv_2_out_V_we0 : STD_LOGIC;
    signal conv_2_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_pool_2_out_V_ce0 : STD_LOGIC;
    signal max_pool_2_out_V_we0 : STD_LOGIC;
    signal max_pool_2_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_array_V_ce0 : STD_LOGIC;
    signal flat_array_V_we0 : STD_LOGIC;
    signal flat_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_out_V_ce0 : STD_LOGIC;
    signal dense_1_out_V_we0 : STD_LOGIC;
    signal dense_1_out_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_1_out_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_out_V_ce0 : STD_LOGIC;
    signal dense_2_out_V_we0 : STD_LOGIC;
    signal dense_2_out_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal prediction_V_ce0 : STD_LOGIC;
    signal prediction_V_we0 : STD_LOGIC;
    signal prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal prediction_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_1_fu_778_ap_start : STD_LOGIC;
    signal grp_conv_1_fu_778_ap_done : STD_LOGIC;
    signal grp_conv_1_fu_778_ap_idle : STD_LOGIC;
    signal grp_conv_1_fu_778_ap_ready : STD_LOGIC;
    signal grp_conv_1_fu_778_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_1_fu_778_input_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_778_input_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_1_fu_778_input_V_ce1 : STD_LOGIC;
    signal grp_conv_1_fu_778_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_1_fu_778_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_778_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_1_fu_778_conv_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_1_fu_778_conv_out_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_1_fu_778_conv_out_V_ce1 : STD_LOGIC;
    signal grp_conv_1_fu_778_conv_out_V_we1 : STD_LOGIC;
    signal grp_conv_1_fu_778_conv_out_V_d1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_2_fu_784_ap_start : STD_LOGIC;
    signal grp_conv_2_fu_784_ap_done : STD_LOGIC;
    signal grp_conv_2_fu_784_ap_idle : STD_LOGIC;
    signal grp_conv_2_fu_784_ap_ready : STD_LOGIC;
    signal grp_conv_2_fu_784_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_2_fu_784_input_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_784_input_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_2_fu_784_input_V_ce1 : STD_LOGIC;
    signal grp_conv_2_fu_784_conv_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_2_fu_784_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_784_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_2_fu_784_conv_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_828_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_828_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_828_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_828_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_828_dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_828_dense_array_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_828_dense_array_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_828_dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_828_prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_828_prediction_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_828_prediction_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_828_prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_1_fu_840_ap_start : STD_LOGIC;
    signal grp_max_pool_1_fu_840_ap_done : STD_LOGIC;
    signal grp_max_pool_1_fu_840_ap_idle : STD_LOGIC;
    signal grp_max_pool_1_fu_840_ap_ready : STD_LOGIC;
    signal grp_max_pool_1_fu_840_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_1_fu_840_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_840_max_pool_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_1_fu_840_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_840_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_840_max_pool_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_2_fu_846_ap_start : STD_LOGIC;
    signal grp_max_pool_2_fu_846_ap_done : STD_LOGIC;
    signal grp_max_pool_2_fu_846_ap_idle : STD_LOGIC;
    signal grp_max_pool_2_fu_846_ap_ready : STD_LOGIC;
    signal grp_max_pool_2_fu_846_conv_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2_fu_846_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_846_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_846_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_846_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_2_fu_846_max_pool_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_flat_fu_852_ap_start : STD_LOGIC;
    signal grp_flat_fu_852_ap_idle : STD_LOGIC;
    signal grp_flat_fu_852_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_852_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_852_flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_852_flat_array_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_852_flat_array_V_we0 : STD_LOGIC;
    signal grp_flat_fu_852_flat_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ix_in_0_reg_610 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_622 : STD_LOGIC_VECTOR (4 downto 0);
    signal ix_in_1_reg_633 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_0_reg_643 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i_0_i_phi_fu_669_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_i_phi_fu_692_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_i5_reg_699 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal p_Val2_22_reg_710 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_i10_reg_722 : STD_LOGIC_VECTOR (5 downto 0);
    signal d_0_i_reg_733 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal p_Val2_28_reg_744 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_0_i_reg_756 : STD_LOGIC_VECTOR (4 downto 0);
    signal i24_0_reg_767 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_conv_1_fu_778_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_conv_2_fu_784_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_soft_max_fu_828_ap_start_reg : STD_LOGIC := '0';
    signal grp_max_pool_1_fu_840_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_max_pool_2_fu_846_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_flat_fu_852_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln27_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_1225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_37_fu_1287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_fu_1278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_fu_1453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_1413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_3_fu_1596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_1556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnn_input_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_fu_1372_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln19_1_fu_1515_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_7_fu_1630_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal prediction_output_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_880_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_98_fu_892_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_fu_888_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_20_fu_900_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_21_fu_922_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_958_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_972_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_976_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_30_fu_984_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_29_fu_950_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_988_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_946_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_968_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_1008_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_1020_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_1026_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_1032_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_994_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_fu_1040_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_1066_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_1070_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_1080_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_1083_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_1050_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln581cast_fu_1099_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln571_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_1054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_1103_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln586_fu_1076_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln585_1_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_1091_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln582_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_1175_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_1_fu_1189_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln603_1_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_1211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_1203_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_fu_1241_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln14_fu_1253_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1945_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_2_fu_1311_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1954_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_1335_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln703_fu_1348_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_fu_1335_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_fu_1339_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln703_fu_1348_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_fu_1352_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_106_fu_1364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_1358_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_99_fu_1418_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_100_fu_1430_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_38_fu_1426_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1117_39_fu_1438_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1117_fu_1442_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1117_23_fu_1448_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1964_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_1_fu_1483_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_2_fu_1491_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1265_1_fu_1483_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_2_fu_1491_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln703_fu_1487_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_6_fu_1495_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_107_fu_1507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_1_fu_1501_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_101_fu_1561_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_fu_1573_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_2_fu_1581_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_fu_1569_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_fu_1585_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_1_fu_1591_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1973_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_2_fu_1626_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_1668_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_13_fu_1682_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_32_fu_1692_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_1700_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_1718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_fu_1724_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_1740_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln947_fu_1744_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln947_fu_1750_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln947_fu_1754_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_1760_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln947_fu_1734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_1766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_1778_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln944_fu_1714_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln949_fu_1792_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_27_fu_1798_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_1786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_1806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_1772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_1812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_1836_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_1839_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_1850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_1844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_1855_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_7_fu_1861_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_8_fu_1868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s_fu_1873_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_111_fu_1887_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln964_fu_1895_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_1903_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_1908_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_11_fu_1883_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1914_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_33_fu_1921_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_1933_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1945_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1945_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1945_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1954_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1964_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1964_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1973_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1973_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1945_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1945_p20 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1964_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1973_p00 : STD_LOGIC_VECTOR (21 downto 0);

    component conv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce1 : OUT STD_LOGIC;
        input_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce1 : OUT STD_LOGIC;
        conv_out_V_we1 : OUT STD_LOGIC;
        conv_out_V_d1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component conv_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        input_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce1 : OUT STD_LOGIC;
        input_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce0 : OUT STD_LOGIC;
        dense_array_V_we0 : OUT STD_LOGIC;
        dense_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        dense_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_V_ce0 : OUT STD_LOGIC;
        prediction_V_we0 : OUT STD_LOGIC;
        prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component max_pool_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component max_pool_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component flat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        flat_array_V_ce0 : OUT STD_LOGIC;
        flat_array_V_we0 : OUT STD_LOGIC;
        flat_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_fpext_32ns_64VhK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_mac_muladd_9nWhU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component cnn_mac_muladd_14Xh4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_mac_muladd_9sYie IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_mac_muladd_13Zio IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_dense_1_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component cnn_dense_1_weighPgM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_2_weighQgW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_2_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_out_weiRg6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_out_biaShg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_dense_array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_1_input_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_max_pool_1_ouThq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_max_pool_2_ouUhA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_dense_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_dense_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    dense_1_bias_V_U : component cnn_dense_1_bias_V
    generic map (
        DataWidth => 6,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_bias_V_address0,
        ce0 => dense_1_bias_V_ce0,
        q0 => dense_1_bias_V_q0);

    dense_1_weights_V_U : component cnn_dense_1_weighPgM
    generic map (
        DataWidth => 9,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_weights_V_address0,
        ce0 => dense_1_weights_V_ce0,
        q0 => dense_1_weights_V_q0);

    dense_2_weights_V_U : component cnn_dense_2_weighQgW
    generic map (
        DataWidth => 9,
        AddressRange => 1500,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_weights_V_address0,
        ce0 => dense_2_weights_V_ce0,
        q0 => dense_2_weights_V_q0);

    dense_2_bias_V_U : component cnn_dense_2_bias_V
    generic map (
        DataWidth => 9,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_bias_V_address0,
        ce0 => dense_2_bias_V_ce0,
        q0 => dense_2_bias_V_q0);

    dense_out_weights_V_U : component cnn_dense_out_weiRg6
    generic map (
        DataWidth => 9,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_out_weights_V_address0,
        ce0 => dense_out_weights_V_ce0,
        q0 => dense_out_weights_V_q0);

    dense_out_bias_V_U : component cnn_dense_out_biaShg
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_out_bias_V_address0,
        ce0 => dense_out_bias_V_ce0,
        q0 => dense_out_bias_V_q0);

    cnn_CRTL_BUS_s_axi_U : component cnn_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    dense_array_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_array_V_address0,
        ce0 => dense_array_V_ce0,
        we0 => dense_array_V_we0,
        d0 => dense_array_V_d0,
        q0 => dense_array_V_q0);

    conv_1_input_V_U : component cnn_conv_1_input_V
    generic map (
        DataWidth => 14,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_1_input_V_address0,
        ce0 => conv_1_input_V_ce0,
        we0 => conv_1_input_V_we0,
        d0 => select_ln603_3_reg_2049,
        q0 => conv_1_input_V_q0,
        address1 => grp_conv_1_fu_778_input_V_address1,
        ce1 => conv_1_input_V_ce1,
        q1 => conv_1_input_V_q1);

    conv_1_out_V_U : component cnn_conv_1_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 4056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_1_out_V_address0,
        ce0 => conv_1_out_V_ce0,
        we0 => conv_1_out_V_we0,
        d0 => conv_1_out_V_d0,
        q0 => conv_1_out_V_q0,
        address1 => grp_conv_1_fu_778_conv_out_V_address1,
        ce1 => conv_1_out_V_ce1,
        we1 => conv_1_out_V_we1,
        d1 => grp_conv_1_fu_778_conv_out_V_d1);

    max_pool_1_out_V_U : component cnn_max_pool_1_ouThq
    generic map (
        DataWidth => 14,
        AddressRange => 1014,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_1_out_V_address0,
        ce0 => max_pool_1_out_V_ce0,
        we0 => max_pool_1_out_V_we0,
        d0 => max_pool_1_out_V_d0,
        q0 => max_pool_1_out_V_q0,
        address1 => grp_conv_2_fu_784_input_V_address1,
        ce1 => max_pool_1_out_V_ce1,
        q1 => max_pool_1_out_V_q1);

    conv_2_out_V_U : component cnn_conv_2_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 1936,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_2_out_V_address0,
        ce0 => conv_2_out_V_ce0,
        we0 => conv_2_out_V_we0,
        d0 => conv_2_out_V_d0,
        q0 => conv_2_out_V_q0);

    max_pool_2_out_V_U : component cnn_max_pool_2_ouUhA
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_2_out_V_address0,
        ce0 => max_pool_2_out_V_ce0,
        we0 => max_pool_2_out_V_we0,
        d0 => max_pool_2_out_V_d0,
        q0 => max_pool_2_out_V_q0);

    flat_array_V_U : component cnn_max_pool_2_ouUhA
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => flat_array_V_address0,
        ce0 => flat_array_V_ce0,
        we0 => flat_array_V_we0,
        d0 => flat_array_V_d0,
        q0 => flat_array_V_q0);

    dense_1_out_V_U : component cnn_dense_1_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_out_V_address0,
        ce0 => dense_1_out_V_ce0,
        we0 => dense_1_out_V_we0,
        d0 => dense_1_out_V_d0,
        q0 => dense_1_out_V_q0);

    dense_2_out_V_U : component cnn_dense_2_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_out_V_address0,
        ce0 => dense_2_out_V_ce0,
        we0 => dense_2_out_V_we0,
        d0 => dense_2_out_V_d0,
        q0 => dense_2_out_V_q0);

    prediction_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => prediction_V_address0,
        ce0 => prediction_V_ce0,
        we0 => prediction_V_we0,
        d0 => prediction_V_d0,
        q0 => prediction_V_q0);

    grp_conv_1_fu_778 : component conv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_1_fu_778_ap_start,
        ap_done => grp_conv_1_fu_778_ap_done,
        ap_idle => grp_conv_1_fu_778_ap_idle,
        ap_ready => grp_conv_1_fu_778_ap_ready,
        input_V_address0 => grp_conv_1_fu_778_input_V_address0,
        input_V_ce0 => grp_conv_1_fu_778_input_V_ce0,
        input_V_q0 => conv_1_input_V_q0,
        input_V_address1 => grp_conv_1_fu_778_input_V_address1,
        input_V_ce1 => grp_conv_1_fu_778_input_V_ce1,
        input_V_q1 => conv_1_input_V_q1,
        conv_out_V_address0 => grp_conv_1_fu_778_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_1_fu_778_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_1_fu_778_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_1_fu_778_conv_out_V_d0,
        conv_out_V_address1 => grp_conv_1_fu_778_conv_out_V_address1,
        conv_out_V_ce1 => grp_conv_1_fu_778_conv_out_V_ce1,
        conv_out_V_we1 => grp_conv_1_fu_778_conv_out_V_we1,
        conv_out_V_d1 => grp_conv_1_fu_778_conv_out_V_d1);

    grp_conv_2_fu_784 : component conv_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_2_fu_784_ap_start,
        ap_done => grp_conv_2_fu_784_ap_done,
        ap_idle => grp_conv_2_fu_784_ap_idle,
        ap_ready => grp_conv_2_fu_784_ap_ready,
        input_V_address0 => grp_conv_2_fu_784_input_V_address0,
        input_V_ce0 => grp_conv_2_fu_784_input_V_ce0,
        input_V_q0 => max_pool_1_out_V_q0,
        input_V_address1 => grp_conv_2_fu_784_input_V_address1,
        input_V_ce1 => grp_conv_2_fu_784_input_V_ce1,
        input_V_q1 => max_pool_1_out_V_q1,
        conv_out_V_address0 => grp_conv_2_fu_784_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_2_fu_784_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_2_fu_784_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_2_fu_784_conv_out_V_d0);

    grp_soft_max_fu_828 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_soft_max_fu_828_ap_start,
        ap_done => grp_soft_max_fu_828_ap_done,
        ap_idle => grp_soft_max_fu_828_ap_idle,
        ap_ready => grp_soft_max_fu_828_ap_ready,
        dense_array_V_address0 => grp_soft_max_fu_828_dense_array_V_address0,
        dense_array_V_ce0 => grp_soft_max_fu_828_dense_array_V_ce0,
        dense_array_V_we0 => grp_soft_max_fu_828_dense_array_V_we0,
        dense_array_V_d0 => grp_soft_max_fu_828_dense_array_V_d0,
        dense_array_V_q0 => dense_array_V_q0,
        prediction_V_address0 => grp_soft_max_fu_828_prediction_V_address0,
        prediction_V_ce0 => grp_soft_max_fu_828_prediction_V_ce0,
        prediction_V_we0 => grp_soft_max_fu_828_prediction_V_we0,
        prediction_V_d0 => grp_soft_max_fu_828_prediction_V_d0);

    grp_max_pool_1_fu_840 : component max_pool_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pool_1_fu_840_ap_start,
        ap_done => grp_max_pool_1_fu_840_ap_done,
        ap_idle => grp_max_pool_1_fu_840_ap_idle,
        ap_ready => grp_max_pool_1_fu_840_ap_ready,
        conv_out_V_address0 => grp_max_pool_1_fu_840_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_1_fu_840_conv_out_V_ce0,
        conv_out_V_q0 => conv_1_out_V_q0,
        max_pool_out_V_address0 => grp_max_pool_1_fu_840_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_1_fu_840_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_1_fu_840_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_1_fu_840_max_pool_out_V_d0);

    grp_max_pool_2_fu_846 : component max_pool_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pool_2_fu_846_ap_start,
        ap_done => grp_max_pool_2_fu_846_ap_done,
        ap_idle => grp_max_pool_2_fu_846_ap_idle,
        ap_ready => grp_max_pool_2_fu_846_ap_ready,
        conv_out_V_address0 => grp_max_pool_2_fu_846_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_2_fu_846_conv_out_V_ce0,
        conv_out_V_q0 => conv_2_out_V_q0,
        max_pool_out_V_address0 => grp_max_pool_2_fu_846_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_2_fu_846_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_2_fu_846_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_2_fu_846_max_pool_out_V_d0);

    grp_flat_fu_852 : component flat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_flat_fu_852_ap_start,
        ap_done => grp_flat_fu_852_ap_done,
        ap_idle => grp_flat_fu_852_ap_idle,
        ap_ready => grp_flat_fu_852_ap_ready,
        max_pool_out_V_address0 => grp_flat_fu_852_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_flat_fu_852_max_pool_out_V_ce0,
        max_pool_out_V_q0 => max_pool_2_out_V_q0,
        flat_array_V_address0 => grp_flat_fu_852_flat_array_V_address0,
        flat_array_V_ce0 => grp_flat_fu_852_flat_array_V_ce0,
        flat_array_V_we0 => grp_flat_fu_852_flat_array_V_we0,
        flat_array_V_d0 => grp_flat_fu_852_flat_array_V_d0);

    cnn_fpext_32ns_64VhK_U111 : component cnn_fpext_32ns_64VhK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => cnn_input_Dout_A,
        ce => ap_const_logic_1,
        dout => grp_fu_858_p1);

    cnn_mac_muladd_9nWhU_U112 : component cnn_mac_muladd_9nWhU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        din2_WIDTH => 6,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_1945_p0,
        din1 => grp_fu_1945_p1,
        din2 => grp_fu_1945_p2,
        dout => grp_fu_1945_p3);

    cnn_mac_muladd_14Xh4_U113 : component cnn_mac_muladd_14Xh4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => flat_array_V_q0,
        din1 => dense_1_weights_V_q0,
        din2 => grp_fu_1954_p2,
        dout => grp_fu_1954_p3);

    cnn_mac_muladd_9sYie_U114 : component cnn_mac_muladd_9sYie
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 13,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_2_weights_V_q0,
        din1 => grp_fu_1964_p1,
        din2 => grp_fu_1964_p2,
        dout => grp_fu_1964_p3);

    cnn_mac_muladd_13Zio_U115 : component cnn_mac_muladd_13Zio
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1973_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_1973_p2,
        dout => grp_fu_1973_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_flat_fu_852_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state17);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_flat_fu_852_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_1_fu_778_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_1_fu_778_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_conv_1_fu_778_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_1_fu_778_ap_ready = ap_const_logic_1)) then 
                    grp_conv_1_fu_778_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_2_fu_784_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_2_fu_784_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_conv_2_fu_784_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_2_fu_784_ap_ready = ap_const_logic_1)) then 
                    grp_conv_2_fu_784_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flat_fu_852_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_flat_fu_852_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_flat_fu_852_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flat_fu_852_ap_ready = ap_const_logic_1)) then 
                    grp_flat_fu_852_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_1_fu_840_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pool_1_fu_840_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_max_pool_1_fu_840_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_1_fu_840_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_1_fu_840_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_2_fu_846_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pool_2_fu_846_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_max_pool_2_fu_846_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_2_fu_846_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_2_fu_846_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_828_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_soft_max_fu_828_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln41_fu_1524_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    grp_soft_max_fu_828_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_828_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_828_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_i_reg_733_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_1_fu_1381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                d_0_i_reg_733 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                d_0_i_reg_733 <= d_reg_2157;
            end if; 
        end if;
    end process;

    f_0_i_reg_756_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                f_0_i_reg_756 <= f_reg_2176;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln41_fu_1524_p2 = ap_const_lv1_0))) then 
                f_0_i_reg_756 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i24_0_reg_767_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i24_0_reg_767 <= i_3_reg_2204;
            elsif (((grp_soft_max_fu_828_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                i24_0_reg_767 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i5_reg_699_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_0_i5_reg_699 <= i_2_reg_2110;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_0_i5_reg_699 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_665_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_2054 = ap_const_lv1_0))) then 
                i_0_i_reg_665 <= select_ln14_1_reg_2068;
            elsif (((grp_flat_fu_852_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_0_i_reg_665 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_reg_622_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_910_p2 = ap_const_lv1_1))) then 
                i_0_reg_622 <= i_reg_2005;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_622 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_654_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_fu_1229_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_654 <= add_ln9_fu_1235_p2;
            elsif (((grp_flat_fu_852_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                indvar_flatten_reg_654 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    ix_in_0_reg_610_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_910_p2 = ap_const_lv1_1))) then 
                ix_in_0_reg_610 <= ix_in_reg_2010;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ix_in_0_reg_610 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    ix_in_1_reg_633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ix_in_1_reg_633 <= add_ln28_reg_2038;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_862_p2 = ap_const_lv1_0))) then 
                ix_in_1_reg_633 <= ix_in_0_reg_610;
            end if; 
        end if;
    end process;

    j_0_i10_reg_722_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                j_0_i10_reg_722 <= j_2_reg_2129;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln9_1_fu_1381_p2 = ap_const_lv1_0))) then 
                j_0_i10_reg_722 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_688_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_2054 = ap_const_lv1_0))) then 
                j_0_i_reg_688 <= j_reg_2088;
            elsif (((grp_flat_fu_852_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                j_0_i_reg_688 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_643_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_643 <= j_1_reg_2023;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_862_p2 = ap_const_lv1_0))) then 
                j_0_reg_643 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_22_reg_710_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                p_Val2_22_reg_710 <= grp_fu_1964_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln9_1_fu_1381_p2 = ap_const_lv1_0))) then 
                p_Val2_22_reg_710 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_28_reg_744_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                p_Val2_28_reg_744 <= grp_fu_1973_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln41_fu_1524_p2 = ap_const_lv1_0))) then 
                p_Val2_28_reg_744 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_676_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_2054 = ap_const_lv1_0))) then 
                p_Val2_s_reg_676 <= grp_fu_1954_p3(21 downto 8);
            elsif (((grp_flat_fu_852_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                p_Val2_s_reg_676 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_910_p2 = ap_const_lv1_0))) then
                add_ln203_11_reg_2028 <= add_ln203_11_fu_926_p2;
                add_ln28_reg_2038 <= add_ln28_fu_936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cnn_input_load_reg_2043 <= cnn_input_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                d_reg_2157 <= d_fu_1530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                f_reg_2176 <= f_fu_1550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_2_reg_2110 <= i_2_fu_1387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                i_3_reg_2204 <= i_3_fu_1643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_2005 <= i_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_fu_1229_p2 = ap_const_lv1_0))) then
                icmp_ln13_2_reg_2093 <= icmp_ln13_2_fu_1297_p2;
                icmp_ln13_reg_2063 <= icmp_ln13_fu_1247_p2;
                    zext_ln14_reg_2073(5 downto 0) <= zext_ln14_fu_1269_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                icmp_ln935_reg_2219 <= icmp_ln935_fu_1654_p2;
                icmp_ln958_reg_2245 <= icmp_ln958_fu_1826_p2;
                    or_ln_reg_2240(0) <= or_ln_fu_1818_p3(0);
                p_Result_31_reg_2224 <= prediction_V_q0(13 downto 13);
                sub_ln944_reg_2234 <= sub_ln944_fu_1708_p2;
                tmp_V_9_reg_2229 <= tmp_V_9_fu_1674_p3;
                trunc_ln943_reg_2250 <= trunc_ln943_fu_1832_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln9_reg_2054 <= icmp_ln9_fu_1229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_862_p2 = ap_const_lv1_0))) then
                ix_in_reg_2010 <= ix_in_fu_874_p2;
                    sub_ln203_reg_2015(10 downto 2) <= sub_ln203_fu_904_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_2023 <= j_1_fu_916_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                j_2_reg_2129 <= j_2_fu_1407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_fu_1229_p2 = ap_const_lv1_0))) then
                j_reg_2088 <= j_fu_1291_p2;
                select_ln14_1_reg_2068 <= select_ln14_1_fu_1261_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                select_ln603_3_reg_2049 <= select_ln603_3_fu_1217_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln9_1_fu_1381_p2 = ap_const_lv1_0))) then
                    zext_ln13_3_reg_2121(4 downto 0) <= zext_ln13_3_fu_1397_p1(4 downto 0);
                    zext_ln14_2_reg_2115(4 downto 0) <= zext_ln14_2_fu_1393_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln41_fu_1524_p2 = ap_const_lv1_0))) then
                    zext_ln46_reg_2168(3 downto 0) <= zext_ln46_fu_1540_p1(3 downto 0);
                    zext_ln48_reg_2162(3 downto 0) <= zext_ln48_fu_1536_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln69_fu_1637_p2 = ap_const_lv1_0))) then
                    zext_ln70_reg_2209(3 downto 0) <= zext_ln70_fu_1649_p1(3 downto 0);
            end if;
        end if;
    end process;
    sub_ln203_reg_2015(1 downto 0) <= "00";
    zext_ln14_reg_2073(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln14_2_reg_2115(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln13_3_reg_2121(11 downto 5) <= "0000000";
    zext_ln48_reg_2162(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_2168(8 downto 4) <= "00000";
    zext_ln70_reg_2209(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln_reg_2240(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_862_p2, ap_CS_fsm_state3, icmp_ln25_fu_910_p2, icmp_ln9_fu_1229_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state20, icmp_ln9_1_fu_1381_p2, ap_CS_fsm_state21, icmp_ln13_1_fu_1401_p2, ap_CS_fsm_state24, icmp_ln41_fu_1524_p2, ap_CS_fsm_state25, icmp_ln46_fu_1544_p2, ap_CS_fsm_state29, icmp_ln69_fu_1637_p2, ap_CS_fsm_state16, grp_flat_fu_852_ap_done, ap_block_pp0_stage0_subdone, grp_conv_1_fu_778_ap_done, grp_conv_2_fu_784_ap_done, grp_soft_max_fu_828_ap_done, grp_max_pool_1_fu_840_ap_done, grp_max_pool_2_fu_846_ap_done, ap_CS_fsm_state28, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_862_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_910_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_conv_1_fu_778_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_max_pool_1_fu_840_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_conv_2_fu_784_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_max_pool_2_fu_846_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_flat_fu_852_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln9_fu_1229_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln9_fu_1229_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln9_1_fu_1381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln13_1_fu_1401_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln41_fu_1524_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln46_fu_1544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state28 => 
                if (((grp_soft_max_fu_828_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln69_fu_1637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_1008_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_968_p1));
    a_fu_1772_p2 <= (icmp_ln947_fu_1734_p2 and icmp_ln947_1_fu_1766_p2);
    add_ln1116_1_fu_1591_p2 <= std_logic_vector(unsigned(add_ln1116_fu_1585_p2) + unsigned(zext_ln46_reg_2168));
    add_ln1116_fu_1585_p2 <= std_logic_vector(unsigned(zext_ln1116_2_fu_1581_p1) + unsigned(zext_ln1116_fu_1569_p1));
    add_ln1117_23_fu_1448_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_1442_p2) + unsigned(zext_ln13_3_reg_2121));
    add_ln203_11_fu_926_p2 <= std_logic_vector(unsigned(sub_ln203_reg_2015) + unsigned(zext_ln203_21_fu_922_p1));
    add_ln203_1_fu_1501_p2 <= std_logic_vector(signed(sext_ln703_2_fu_1491_p1) + signed(trunc_ln703_fu_1487_p1));
    add_ln203_fu_1358_p2 <= std_logic_vector(unsigned(trunc_ln_fu_1339_p4) + unsigned(sext_ln703_fu_1348_p1));
    add_ln28_fu_936_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ix_in_1_reg_633));
    add_ln581_fu_1020_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_fu_1008_p2));
    add_ln703_6_fu_1495_p2 <= std_logic_vector(unsigned(p_Val2_22_reg_710) + unsigned(sext_ln1265_1_fu_1483_p1));
    add_ln703_7_fu_1630_p2 <= std_logic_vector(signed(sext_ln1265_2_fu_1626_p1) + signed(p_Val2_28_reg_744));
    add_ln703_fu_1352_p2 <= std_logic_vector(signed(sext_ln1265_fu_1335_p1) + signed(sum_V_fu_1326_p4));
    add_ln949_fu_1792_p2 <= std_logic_vector(signed(ap_const_lv14_3FE8) + signed(trunc_ln944_fu_1714_p1));
    add_ln958_fu_1839_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_2234));
    add_ln964_fu_1908_p2 <= std_logic_vector(unsigned(select_ln964_fu_1895_p3) + unsigned(sub_ln964_fu_1903_p2));
    add_ln9_fu_1235_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_654) + unsigned(ap_const_lv15_1));
    and_ln581_fu_1133_p2 <= (xor_ln582_fu_1127_p2 and icmp_ln581_fu_1014_p2);
    and_ln582_fu_1115_p2 <= (xor_ln571_fu_1109_p2 and icmp_ln582_fu_1044_p2);
    and_ln585_1_fu_1151_p2 <= (icmp_ln585_fu_1054_p2 and and_ln581_fu_1133_p2);
    and_ln585_fu_1145_p2 <= (xor_ln585_fu_1139_p2 and and_ln581_fu_1133_p2);
    and_ln603_fu_1169_p2 <= (xor_ln581_fu_1163_p2 and icmp_ln603_fu_1060_p2);
    and_ln949_fu_1806_p2 <= (xor_ln949_fu_1786_p2 and p_Result_27_fu_1798_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(28);
    ap_CS_fsm_state31 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state17_assign_proc : process(icmp_ln9_fu_1229_p2)
    begin
        if ((icmp_ln9_fu_1229_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state29, icmp_ln69_fu_1637_p2)
    begin
        if (((icmp_ln69_fu_1637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_669_p4_assign_proc : process(i_0_i_reg_665, icmp_ln9_reg_2054, ap_CS_fsm_pp0_stage0, select_ln14_1_reg_2068, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_2054 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i_phi_fu_669_p4 <= select_ln14_1_reg_2068;
        else 
            ap_phi_mux_i_0_i_phi_fu_669_p4 <= i_0_i_reg_665;
        end if; 
    end process;


    ap_phi_mux_j_0_i_phi_fu_692_p4_assign_proc : process(j_0_i_reg_688, icmp_ln9_reg_2054, ap_CS_fsm_pp0_stage0, j_reg_2088, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln9_reg_2054 = ap_const_lv1_0))) then 
            ap_phi_mux_j_0_i_phi_fu_692_p4 <= j_reg_2088;
        else 
            ap_phi_mux_j_0_i_phi_fu_692_p4 <= j_0_i_reg_688;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29, icmp_ln69_fu_1637_p2)
    begin
        if (((icmp_ln69_fu_1637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ashr_ln586_fu_1070_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_994_p3),to_integer(unsigned('0' & zext_ln586_fu_1066_p1(31-1 downto 0)))));
    bitcast_ln696_fu_1080_p1 <= cnn_input_load_reg_2043;
    bitcast_ln739_fu_1933_p1 <= p_Result_33_fu_1921_p5;
    cnn_input_Addr_A <= std_logic_vector(shift_left(unsigned(cnn_input_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    cnn_input_Addr_A_orig <= zext_ln27_fu_931_p1(32 - 1 downto 0);
    cnn_input_Clk_A <= ap_clk;
    cnn_input_Din_A <= ap_const_lv32_0;

    cnn_input_EN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnn_input_EN_A <= ap_const_logic_1;
        else 
            cnn_input_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    cnn_input_Rst_A <= ap_rst_n_inv;
    cnn_input_WEN_A <= ap_const_lv4_0;

    conv_1_input_V_address0_assign_proc : process(grp_conv_1_fu_778_input_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, sext_ln203_fu_1225_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_address0 <= sext_ln203_fu_1225_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_address0 <= grp_conv_1_fu_778_input_V_address0;
        else 
            conv_1_input_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_1_input_V_ce0_assign_proc : process(grp_conv_1_fu_778_input_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_ce0 <= grp_conv_1_fu_778_input_V_ce0;
        else 
            conv_1_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_V_ce1_assign_proc : process(grp_conv_1_fu_778_input_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_ce1 <= grp_conv_1_fu_778_input_V_ce1;
        else 
            conv_1_input_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_we0 <= ap_const_logic_1;
        else 
            conv_1_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_778_conv_out_V_address0, grp_max_pool_1_fu_840_conv_out_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_address0 <= grp_max_pool_1_fu_840_conv_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_address0 <= grp_conv_1_fu_778_conv_out_V_address0;
        else 
            conv_1_out_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_778_conv_out_V_ce0, grp_max_pool_1_fu_840_conv_out_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_ce0 <= grp_max_pool_1_fu_840_conv_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_ce0 <= grp_conv_1_fu_778_conv_out_V_ce0;
        else 
            conv_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_ce1_assign_proc : process(grp_conv_1_fu_778_conv_out_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_ce1 <= grp_conv_1_fu_778_conv_out_V_ce1;
        else 
            conv_1_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_778_conv_out_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_d0 <= grp_conv_1_fu_778_conv_out_V_d0;
        else 
            conv_1_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_862_p2, grp_conv_1_fu_778_conv_out_V_we0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_862_p2 = ap_const_lv1_1))) then 
            conv_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_we0 <= grp_conv_1_fu_778_conv_out_V_we0;
        else 
            conv_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_we1_assign_proc : process(grp_conv_1_fu_778_conv_out_V_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_we1 <= grp_conv_1_fu_778_conv_out_V_we1;
        else 
            conv_1_out_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_784_conv_out_V_address0, grp_max_pool_2_fu_846_conv_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_address0 <= ap_const_lv64_0(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_V_address0 <= grp_max_pool_2_fu_846_conv_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_address0 <= grp_conv_2_fu_784_conv_out_V_address0;
        else 
            conv_2_out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_784_conv_out_V_ce0, grp_max_pool_2_fu_846_conv_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_V_ce0 <= grp_max_pool_2_fu_846_conv_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_ce0 <= grp_conv_2_fu_784_conv_out_V_ce0;
        else 
            conv_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_784_conv_out_V_d0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_d0 <= grp_conv_2_fu_784_conv_out_V_d0;
        else 
            conv_2_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_862_p2, grp_conv_2_fu_784_conv_out_V_we0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_862_p2 = ap_const_lv1_1))) then 
            conv_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_we0 <= grp_conv_2_fu_784_conv_out_V_we0;
        else 
            conv_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_1530_p2 <= std_logic_vector(unsigned(d_0_i_reg_733) + unsigned(ap_const_lv4_1));
    dense_1_bias_V_address0 <= zext_ln14_fu_1269_p1(6 - 1 downto 0);

    dense_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln14_reg_2073, ap_enable_reg_pp0_iter1, ap_CS_fsm_state21, ap_CS_fsm_state16, ap_block_pp0_stage0, zext_ln14_3_fu_1413_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dense_1_out_V_address0 <= zext_ln14_3_fu_1413_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_1_out_V_address0 <= zext_ln14_reg_2073(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_1_out_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            dense_1_out_V_address0 <= "XXXXXX";
        end if; 
    end process;


    dense_1_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state21, ap_CS_fsm_state16, grp_flat_fu_852_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((grp_flat_fu_852_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dense_1_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state16, ap_block_pp0_stage0, select_ln19_fu_1372_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_1_out_V_d0 <= select_ln19_fu_1372_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_1_out_V_d0 <= ap_const_lv13_0;
        else 
            dense_1_out_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_out_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln13_2_reg_2093, ap_enable_reg_pp0_iter1, ap_CS_fsm_state16, grp_flat_fu_852_ap_done)
    begin
        if ((((grp_flat_fu_852_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln13_2_reg_2093 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dense_1_out_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_address0 <= zext_ln1117_37_fu_1287_p1(15 - 1 downto 0);

    dense_1_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_bias_V_address0 <= zext_ln14_2_reg_2115(5 - 1 downto 0);

    dense_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dense_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_address0_assign_proc : process(zext_ln14_2_reg_2115, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state23, zext_ln48_1_fu_1556_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            dense_2_out_V_address0 <= zext_ln48_1_fu_1556_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            dense_2_out_V_address0 <= zext_ln14_2_reg_2115(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_2_out_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            dense_2_out_V_address0 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_d0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state23, select_ln19_1_fu_1515_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            dense_2_out_V_d0 <= select_ln19_1_fu_1515_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_2_out_V_d0 <= ap_const_lv13_0;
        else 
            dense_2_out_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_out_V_we0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            dense_2_out_V_we0 <= ap_const_logic_1;
        else 
            dense_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_weights_V_address0 <= sext_ln1117_fu_1453_p1(11 - 1 downto 0);

    dense_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dense_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(zext_ln48_reg_2162, grp_soft_max_fu_828_dense_array_V_address0, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            dense_array_V_address0 <= zext_ln48_reg_2162(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_address0 <= grp_soft_max_fu_828_dense_array_V_address0;
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(grp_soft_max_fu_828_dense_array_V_ce0, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_ce0 <= grp_soft_max_fu_828_dense_array_V_ce0;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_d0_assign_proc : process(grp_soft_max_fu_828_dense_array_V_d0, ap_CS_fsm_state27, ap_CS_fsm_state28, add_ln703_7_fu_1630_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            dense_array_V_d0 <= add_ln703_7_fu_1630_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_d0 <= grp_soft_max_fu_828_dense_array_V_d0;
        else 
            dense_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_array_V_we0_assign_proc : process(grp_soft_max_fu_828_dense_array_V_we0, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            dense_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_we0 <= grp_soft_max_fu_828_dense_array_V_we0;
        else 
            dense_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_V_address0 <= zext_ln48_reg_2162(4 - 1 downto 0);

    dense_out_bias_V_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            dense_out_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_weights_V_address0 <= zext_ln1116_3_fu_1596_p1(9 - 1 downto 0);

    dense_out_weights_V_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            dense_out_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_958_p4 <= ireg_V_fu_942_p1(62 downto 52);
    f_fu_1550_p2 <= std_logic_vector(unsigned(f_0_i_reg_756) + unsigned(ap_const_lv5_1));

    flat_array_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, grp_flat_fu_852_flat_array_V_address0, ap_block_pp0_stage0, ap_CS_fsm_state14, zext_ln14_1_fu_1278_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flat_array_V_address0 <= zext_ln14_1_fu_1278_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flat_array_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_address0 <= grp_flat_fu_852_flat_array_V_address0;
        else 
            flat_array_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, grp_max_pool_2_fu_846_ap_done, grp_flat_fu_852_flat_array_V_ce0, ap_CS_fsm_state14)
    begin
        if ((((grp_max_pool_2_fu_846_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_ce0 <= grp_flat_fu_852_flat_array_V_ce0;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_V_d0_assign_proc : process(ap_CS_fsm_state16, grp_flat_fu_852_flat_array_V_d0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flat_array_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_d0 <= grp_flat_fu_852_flat_array_V_d0;
        else 
            flat_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    flat_array_V_we0_assign_proc : process(ap_CS_fsm_state16, grp_max_pool_2_fu_846_ap_done, grp_flat_fu_852_flat_array_V_we0, ap_CS_fsm_state14)
    begin
        if (((grp_max_pool_2_fu_846_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            flat_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_we0 <= grp_flat_fu_852_flat_array_V_we0;
        else 
            flat_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_1_fu_778_ap_start <= grp_conv_1_fu_778_ap_start_reg;
    grp_conv_2_fu_784_ap_start <= grp_conv_2_fu_784_ap_start_reg;
    grp_flat_fu_852_ap_start <= grp_flat_fu_852_ap_start_reg;
    grp_fu_1945_p0 <= grp_fu_1945_p00(9 - 1 downto 0);
    grp_fu_1945_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_1253_p3),15));
    grp_fu_1945_p1 <= ap_const_lv15_32(7 - 1 downto 0);
    grp_fu_1945_p2 <= grp_fu_1945_p20(6 - 1 downto 0);
    grp_fu_1945_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_1_fu_1261_p3),15));
    grp_fu_1954_p2 <= (select_ln14_2_fu_1311_p3 & ap_const_lv8_0);
    grp_fu_1964_p1 <= grp_fu_1964_p10(13 - 1 downto 0);
    grp_fu_1964_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_1_out_V_q0),22));
    grp_fu_1964_p2 <= (p_Val2_22_reg_710 & ap_const_lv8_0);
    grp_fu_1973_p0 <= grp_fu_1973_p00(13 - 1 downto 0);
    grp_fu_1973_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    grp_fu_1973_p2 <= (p_Val2_28_reg_744 & ap_const_lv8_0);
    grp_max_pool_1_fu_840_ap_start <= grp_max_pool_1_fu_840_ap_start_reg;
    grp_max_pool_2_fu_846_ap_start <= grp_max_pool_2_fu_846_ap_start_reg;
    grp_soft_max_fu_828_ap_start <= grp_soft_max_fu_828_ap_start_reg;
    i_1_fu_1241_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_669_p4) + unsigned(ap_const_lv6_1));
    i_2_fu_1387_p2 <= std_logic_vector(unsigned(i_0_i5_reg_699) + unsigned(ap_const_lv5_1));
    i_3_fu_1643_p2 <= std_logic_vector(unsigned(i24_0_reg_767) + unsigned(ap_const_lv4_1));
    i_fu_868_p2 <= std_logic_vector(unsigned(i_0_reg_622) + unsigned(ap_const_lv5_1));
    icmp_ln13_1_fu_1401_p2 <= "1" when (j_0_i10_reg_722 = ap_const_lv6_32) else "0";
    icmp_ln13_2_fu_1297_p2 <= "1" when (j_fu_1291_p2 = ap_const_lv9_190) else "0";
    icmp_ln13_fu_1247_p2 <= "1" when (ap_phi_mux_j_0_i_phi_fu_692_p4 = ap_const_lv9_190) else "0";
    icmp_ln23_fu_862_p2 <= "1" when (i_0_reg_622 = ap_const_lv5_1C) else "0";
    icmp_ln25_fu_910_p2 <= "1" when (j_0_reg_643 = ap_const_lv5_1C) else "0";
    icmp_ln41_fu_1524_p2 <= "1" when (d_0_i_reg_733 = ap_const_lv4_A) else "0";
    icmp_ln46_fu_1544_p2 <= "1" when (f_0_i_reg_756 = ap_const_lv5_1E) else "0";
    icmp_ln571_fu_1002_p2 <= "1" when (trunc_ln556_fu_946_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_1014_p2 <= "1" when (signed(F2_fu_1008_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln582_fu_1044_p2 <= "1" when (F2_fu_1008_p2 = ap_const_lv12_8) else "0";
    icmp_ln585_fu_1054_p2 <= "1" when (unsigned(sh_amt_fu_1032_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_1060_p2 <= "1" when (unsigned(sh_amt_fu_1032_p3) < unsigned(ap_const_lv12_E)) else "0";
    icmp_ln69_fu_1637_p2 <= "1" when (i24_0_reg_767 = ap_const_lv4_A) else "0";
    icmp_ln935_fu_1654_p2 <= "1" when (prediction_V_q0 = ap_const_lv14_0) else "0";
    icmp_ln947_1_fu_1766_p2 <= "0" when (p_Result_s_fu_1760_p2 = ap_const_lv14_0) else "1";
    icmp_ln947_fu_1734_p2 <= "1" when (signed(tmp_109_fu_1724_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_1826_p2 <= "1" when (signed(lsb_index_fu_1718_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln9_1_fu_1381_p2 <= "1" when (i_0_i5_reg_699 = ap_const_lv5_1E) else "0";
    icmp_ln9_fu_1229_p2 <= "1" when (indvar_flatten_reg_654 = ap_const_lv15_4E20) else "0";
    ireg_V_fu_942_p1 <= grp_fu_858_p1;
    ix_in_fu_874_p2 <= std_logic_vector(unsigned(ix_in_0_reg_610) + unsigned(ap_const_lv10_1C));
    j_1_fu_916_p2 <= std_logic_vector(unsigned(j_0_reg_643) + unsigned(ap_const_lv5_1));
    j_2_fu_1407_p2 <= std_logic_vector(unsigned(j_0_i10_reg_722) + unsigned(ap_const_lv6_1));
    j_fu_1291_p2 <= std_logic_vector(unsigned(select_ln14_fu_1253_p3) + unsigned(ap_const_lv9_1));
    
    l_fu_1700_p3_proc : process(p_Result_32_fu_1692_p3)
    begin
        l_fu_1700_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_32_fu_1692_p3(i) = '1' then
                l_fu_1700_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_1718_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_1708_p2));
    lshr_ln947_fu_1754_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln947_fu_1750_p1(14-1 downto 0)))));
    lshr_ln958_fu_1844_p2 <= std_logic_vector(shift_right(unsigned(m_fu_1836_p1),to_integer(unsigned('0' & add_ln958_fu_1839_p2(31-1 downto 0)))));
    m_11_fu_1883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_1873_p4),32));
    m_7_fu_1861_p3 <= 
        lshr_ln958_fu_1844_p2 when (icmp_ln958_reg_2245(0) = '1') else 
        shl_ln958_fu_1855_p2;
    m_8_fu_1868_p2 <= std_logic_vector(unsigned(m_7_fu_1861_p3) + unsigned(or_ln_reg_2240));
    m_fu_1836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_9_reg_2229),32));
    m_s_fu_1873_p4 <= m_8_fu_1868_p2(31 downto 1);
    man_V_1_fu_988_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_30_fu_984_p1));
    man_V_2_fu_994_p3 <= 
        man_V_1_fu_988_p2 when (p_Result_29_fu_950_p3(0) = '1') else 
        p_Result_30_fu_984_p1;

    max_pool_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_784_input_V_address0, grp_max_pool_1_fu_840_max_pool_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_address0 <= grp_max_pool_1_fu_840_max_pool_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_address0 <= grp_conv_2_fu_784_input_V_address0;
        else 
            max_pool_1_out_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_784_input_V_ce0, grp_max_pool_1_fu_840_max_pool_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_ce0 <= grp_max_pool_1_fu_840_max_pool_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_ce0 <= grp_conv_2_fu_784_input_V_ce0;
        else 
            max_pool_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_V_ce1_assign_proc : process(grp_conv_2_fu_784_input_V_ce1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_ce1 <= grp_conv_2_fu_784_input_V_ce1;
        else 
            max_pool_1_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_1_fu_840_max_pool_out_V_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_d0 <= grp_max_pool_1_fu_840_max_pool_out_V_d0;
        else 
            max_pool_1_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_862_p2, grp_max_pool_1_fu_840_max_pool_out_V_we0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_862_p2 = ap_const_lv1_1))) then 
            max_pool_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_we0 <= grp_max_pool_1_fu_840_max_pool_out_V_we0;
        else 
            max_pool_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16, grp_max_pool_2_fu_846_max_pool_out_V_address0, grp_flat_fu_852_max_pool_out_V_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            max_pool_2_out_V_address0 <= grp_flat_fu_852_max_pool_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_address0 <= grp_max_pool_2_fu_846_max_pool_out_V_address0;
        else 
            max_pool_2_out_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16, grp_max_pool_2_fu_846_max_pool_out_V_ce0, grp_flat_fu_852_max_pool_out_V_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            max_pool_2_out_V_ce0 <= grp_flat_fu_852_max_pool_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_ce0 <= grp_max_pool_2_fu_846_max_pool_out_V_ce0;
        else 
            max_pool_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_846_max_pool_out_V_d0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_d0 <= grp_max_pool_2_fu_846_max_pool_out_V_d0;
        else 
            max_pool_2_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_862_p2, grp_max_pool_2_fu_846_max_pool_out_V_we0, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_862_p2 = ap_const_lv1_1))) then 
            max_pool_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_we0 <= grp_max_pool_2_fu_846_max_pool_out_V_we0;
        else 
            max_pool_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln581_fu_1157_p2 <= (or_ln582_fu_1121_p2 or icmp_ln581_fu_1014_p2);
    or_ln582_fu_1121_p2 <= (icmp_ln582_fu_1044_p2 or icmp_ln571_fu_1002_p2);
    or_ln603_1_fu_1197_p2 <= (and_ln585_fu_1145_p2 or and_ln582_fu_1115_p2);
    or_ln603_2_fu_1211_p2 <= (or_ln603_fu_1183_p2 or or_ln603_1_fu_1197_p2);
    or_ln603_fu_1183_p2 <= (and_ln603_fu_1169_p2 or and_ln585_1_fu_1151_p2);
    or_ln949_fu_1812_p2 <= (and_ln949_fu_1806_p2 or a_fu_1772_p2);
    or_ln_fu_1818_p3 <= (ap_const_lv31_0 & or_ln949_fu_1812_p2);
    
    p_Result_13_fu_1682_p4_proc : process(tmp_V_9_fu_1674_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_13_fu_1682_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_9_fu_1674_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_13_fu_1682_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_13_fu_1682_p4_i) := tmp_V_9_fu_1674_p3(14-1-p_Result_13_fu_1682_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_13_fu_1682_p4 <= resvalue(14-1 downto 0);
    end process;

    p_Result_27_fu_1798_p3 <= tmp_V_9_fu_1674_p3(to_integer(unsigned(add_ln949_fu_1792_p2)) downto to_integer(unsigned(add_ln949_fu_1792_p2))) when (to_integer(unsigned(add_ln949_fu_1792_p2))>= 0 and to_integer(unsigned(add_ln949_fu_1792_p2))<=13) else "-";
    p_Result_29_fu_950_p3 <= ireg_V_fu_942_p1(63 downto 63);
    p_Result_30_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_976_p3),54));
    p_Result_31_fu_1660_p3 <= prediction_V_q0(13 downto 13);
    p_Result_32_fu_1692_p3 <= (ap_const_lv18_3FFFF & p_Result_13_fu_1682_p4);
    p_Result_33_fu_1921_p5 <= (tmp_s_fu_1914_p3 & m_11_fu_1883_p1(22 downto 0));
    p_Result_s_fu_1760_p2 <= (tmp_V_9_fu_1674_p3 and lshr_ln947_fu_1754_p2);

    prediction_V_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state29, zext_ln70_fu_1649_p1, grp_soft_max_fu_828_prediction_V_address0, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_address0 <= zext_ln70_fu_1649_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            prediction_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            prediction_V_address0 <= grp_soft_max_fu_828_prediction_V_address0;
        else 
            prediction_V_address0 <= "XXXX";
        end if; 
    end process;


    prediction_V_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state29, grp_soft_max_fu_828_prediction_V_ce0, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            prediction_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            prediction_V_ce0 <= grp_soft_max_fu_828_prediction_V_ce0;
        else 
            prediction_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_V_d0_assign_proc : process(ap_CS_fsm_state20, grp_soft_max_fu_828_prediction_V_d0, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            prediction_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            prediction_V_d0 <= grp_soft_max_fu_828_prediction_V_d0;
        else 
            prediction_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    prediction_V_we0_assign_proc : process(ap_CS_fsm_state20, icmp_ln9_1_fu_1381_p2, grp_soft_max_fu_828_prediction_V_we0, ap_CS_fsm_state28)
    begin
        if (((icmp_ln9_1_fu_1381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            prediction_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            prediction_V_we0 <= grp_soft_max_fu_828_prediction_V_we0;
        else 
            prediction_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_Addr_A <= std_logic_vector(shift_left(unsigned(prediction_output_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    prediction_output_Addr_A_orig <= zext_ln70_reg_2209(32 - 1 downto 0);
    prediction_output_Clk_A <= ap_clk;
    prediction_output_Din_A <= 
        ap_const_lv32_0 when (icmp_ln935_reg_2219(0) = '1') else 
        bitcast_ln739_fu_1933_p1;

    prediction_output_EN_A_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            prediction_output_EN_A <= ap_const_logic_1;
        else 
            prediction_output_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_Rst_A <= ap_rst_n_inv;

    prediction_output_WEN_A_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            prediction_output_WEN_A <= ap_const_lv4_F;
        else 
            prediction_output_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    select_ln14_1_fu_1261_p3 <= 
        i_1_fu_1241_p2 when (icmp_ln13_fu_1247_p2(0) = '1') else 
        ap_phi_mux_i_0_i_phi_fu_669_p4;
    select_ln14_2_fu_1311_p3 <= 
        ap_const_lv14_0 when (icmp_ln13_reg_2063(0) = '1') else 
        p_Val2_s_reg_676;
    select_ln14_fu_1253_p3 <= 
        ap_const_lv9_0 when (icmp_ln13_fu_1247_p2(0) = '1') else 
        ap_phi_mux_j_0_i_phi_fu_692_p4;
    select_ln19_1_fu_1515_p3 <= 
        ap_const_lv13_0 when (tmp_107_fu_1507_p3(0) = '1') else 
        add_ln203_1_fu_1501_p2;
    select_ln19_fu_1372_p3 <= 
        ap_const_lv13_0 when (tmp_106_fu_1364_p3(0) = '1') else 
        add_ln203_fu_1358_p2;
    select_ln588_fu_1091_p3 <= 
        ap_const_lv14_3FFF when (tmp_105_fu_1083_p3(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_1_fu_1189_p3 <= 
        select_ln588_fu_1091_p3 when (and_ln585_fu_1145_p2(0) = '1') else 
        trunc_ln583_fu_1050_p1;
    select_ln603_2_fu_1203_p3 <= 
        select_ln603_fu_1175_p3 when (or_ln603_fu_1183_p2(0) = '1') else 
        select_ln603_1_fu_1189_p3;
    select_ln603_3_fu_1217_p3 <= 
        select_ln603_2_fu_1203_p3 when (or_ln603_2_fu_1211_p2(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_fu_1175_p3 <= 
        shl_ln604_fu_1103_p2 when (and_ln603_fu_1169_p2(0) = '1') else 
        trunc_ln586_fu_1076_p1;
    select_ln964_fu_1895_p3 <= 
        ap_const_lv8_7F when (tmp_111_fu_1887_p3(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1117_fu_1453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_23_fu_1448_p2),64));

    sext_ln1265_1_fu_1483_p0 <= dense_2_bias_V_q0;
        sext_ln1265_1_fu_1483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_1_fu_1483_p0),14));

        sext_ln1265_2_fu_1626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_out_bias_V_q0),14));

    sext_ln1265_fu_1335_p0 <= dense_1_bias_V_q0;
        sext_ln1265_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_1335_p0),14));

        sext_ln203_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_11_reg_2028),64));

        sext_ln581_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_1032_p3),32));

    sext_ln581cast_fu_1099_p1 <= sext_ln581_fu_1040_p1(14 - 1 downto 0);
    sext_ln703_2_fu_1491_p0 <= dense_2_bias_V_q0;
        sext_ln703_2_fu_1491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_1491_p0),13));

    sext_ln703_fu_1348_p0 <= dense_1_bias_V_q0;
        sext_ln703_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_1348_p0),13));

    sh_amt_fu_1032_p3 <= 
        add_ln581_fu_1020_p2 when (icmp_ln581_fu_1014_p2(0) = '1') else 
        sub_ln581_fu_1026_p2;
    shl_ln604_fu_1103_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_1050_p1),to_integer(unsigned('0' & sext_ln581cast_fu_1099_p1(14-1 downto 0)))));
    shl_ln958_fu_1855_p2 <= std_logic_vector(shift_left(unsigned(m_fu_1836_p1),to_integer(unsigned('0' & sub_ln958_fu_1850_p2(31-1 downto 0)))));
    sub_ln1117_fu_1442_p2 <= std_logic_vector(unsigned(zext_ln1117_38_fu_1426_p1) - unsigned(zext_ln1117_39_fu_1438_p1));
    sub_ln203_fu_904_p2 <= std_logic_vector(unsigned(zext_ln203_fu_888_p1) - unsigned(zext_ln203_20_fu_900_p1));
    sub_ln581_fu_1026_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_1008_p2));
    sub_ln944_fu_1708_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_1700_p3));
    sub_ln947_fu_1744_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln947_fu_1740_p1));
    sub_ln958_fu_1850_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_2234));
    sub_ln964_fu_1903_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(trunc_ln943_reg_2250));
    sum_V_fu_1326_p4 <= grp_fu_1954_p3(21 downto 8);
    tmp_100_fu_1430_p3 <= (j_0_i10_reg_722 & ap_const_lv1_0);
    tmp_101_fu_1561_p3 <= (f_0_i_reg_756 & ap_const_lv3_0);
    tmp_102_fu_1573_p3 <= (f_0_i_reg_756 & ap_const_lv1_0);
    tmp_105_fu_1083_p3 <= bitcast_ln696_fu_1080_p1(31 downto 31);
    tmp_106_fu_1364_p3 <= add_ln703_fu_1352_p2(13 downto 13);
    tmp_107_fu_1507_p3 <= add_ln703_6_fu_1495_p2(13 downto 13);
    tmp_109_fu_1724_p4 <= lsb_index_fu_1718_p2(31 downto 1);
    tmp_110_fu_1778_p3 <= lsb_index_fu_1718_p2(31 downto 31);
    tmp_111_fu_1887_p3 <= m_8_fu_1868_p2(25 downto 25);
    tmp_97_fu_880_p3 <= (i_0_reg_622 & ap_const_lv5_0);
    tmp_98_fu_892_p3 <= (i_0_reg_622 & ap_const_lv2_0);
    tmp_99_fu_1418_p3 <= (j_0_i10_reg_722 & ap_const_lv5_0);
    tmp_V_9_fu_1674_p3 <= 
        tmp_V_fu_1668_p2 when (p_Result_31_fu_1660_p3(0) = '1') else 
        prediction_V_q0;
    tmp_V_fu_1668_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(prediction_V_q0));
    tmp_fu_976_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_972_p1);
    tmp_s_fu_1914_p3 <= (p_Result_31_reg_2224 & add_ln964_fu_1908_p2);
    trunc_ln556_fu_946_p1 <= ireg_V_fu_942_p1(63 - 1 downto 0);
    trunc_ln565_fu_972_p1 <= ireg_V_fu_942_p1(52 - 1 downto 0);
    trunc_ln583_fu_1050_p1 <= man_V_2_fu_994_p3(14 - 1 downto 0);
    trunc_ln586_fu_1076_p1 <= ashr_ln586_fu_1070_p2(14 - 1 downto 0);
    trunc_ln703_fu_1487_p1 <= p_Val2_22_reg_710(13 - 1 downto 0);
    trunc_ln943_fu_1832_p1 <= l_fu_1700_p3(8 - 1 downto 0);
    trunc_ln944_fu_1714_p1 <= sub_ln944_fu_1708_p2(14 - 1 downto 0);
    trunc_ln947_fu_1740_p1 <= sub_ln944_fu_1708_p2(4 - 1 downto 0);
    trunc_ln_fu_1339_p4 <= grp_fu_1954_p3(20 downto 8);
    xor_ln571_fu_1109_p2 <= (icmp_ln571_fu_1002_p2 xor ap_const_lv1_1);
    xor_ln581_fu_1163_p2 <= (or_ln581_fu_1157_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1127_p2 <= (or_ln582_fu_1121_p2 xor ap_const_lv1_1);
    xor_ln585_fu_1139_p2 <= (icmp_ln585_fu_1054_p2 xor ap_const_lv1_1);
    xor_ln949_fu_1786_p2 <= (tmp_110_fu_1778_p3 xor ap_const_lv1_1);
    zext_ln1116_2_fu_1581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_1573_p3),9));
    zext_ln1116_3_fu_1596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_1_fu_1591_p2),64));
    zext_ln1116_fu_1569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_1561_p3),9));
    zext_ln1117_37_fu_1287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1945_p3),64));
    zext_ln1117_38_fu_1426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_1418_p3),12));
    zext_ln1117_39_fu_1438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_1430_p3),12));
    zext_ln13_3_fu_1397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i5_reg_699),12));
    zext_ln14_1_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_1253_p3),64));
    zext_ln14_2_fu_1393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i5_reg_699),64));
    zext_ln14_3_fu_1413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i10_reg_722),64));
    zext_ln14_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_1_fu_1261_p3),64));
    zext_ln203_20_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_892_p3),11));
    zext_ln203_21_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_643),11));
    zext_ln203_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_fu_880_p3),11));
    zext_ln27_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_in_1_reg_633),64));
    zext_ln461_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_958_p4),12));
    zext_ln46_fu_1540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_i_reg_733),9));
    zext_ln48_1_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_i_reg_756),64));
    zext_ln48_fu_1536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_i_reg_733),64));
    zext_ln586_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_1040_p1),54));
    zext_ln70_fu_1649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i24_0_reg_767),64));
    zext_ln947_fu_1750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_1744_p2),14));
end behav;
