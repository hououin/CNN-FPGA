// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_2_HH_
#define _max_pool_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct max_pool_2 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > conv_out_V_address0;
    sc_out< sc_logic > conv_out_V_ce0;
    sc_in< sc_lv<13> > conv_out_V_q0;
    sc_out< sc_lv<9> > max_pool_out_V_address0;
    sc_out< sc_logic > max_pool_out_V_ce0;
    sc_out< sc_logic > max_pool_out_V_we0;
    sc_out< sc_lv<13> > max_pool_out_V_d0;


    // Module declarations
    max_pool_2(sc_module_name name);
    SC_HAS_PROCESS(max_pool_2);

    ~max_pool_2();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > f_fu_177_p2;
    sc_signal< sc_lv<5> > f_reg_376;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<12> > zext_ln13_fu_183_p1;
    sc_signal< sc_lv<12> > zext_ln13_reg_381;
    sc_signal< sc_lv<1> > icmp_ln10_fu_171_p2;
    sc_signal< sc_lv<10> > zext_ln13_1_fu_187_p1;
    sc_signal< sc_lv<10> > zext_ln13_1_reg_386;
    sc_signal< sc_lv<3> > r_fu_197_p2;
    sc_signal< sc_lv<3> > r_reg_394;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > shl_ln_fu_203_p3;
    sc_signal< sc_lv<4> > shl_ln_reg_399;
    sc_signal< sc_lv<1> > icmp_ln13_fu_191_p2;
    sc_signal< sc_lv<6> > add_ln203_fu_227_p2;
    sc_signal< sc_lv<6> > add_ln203_reg_404;
    sc_signal< sc_lv<3> > c_fu_239_p2;
    sc_signal< sc_lv<3> > c_reg_412;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > shl_ln1_fu_245_p3;
    sc_signal< sc_lv<4> > shl_ln1_reg_417;
    sc_signal< sc_lv<1> > icmp_ln16_fu_233_p2;
    sc_signal< sc_lv<2> > mpr_fu_263_p2;
    sc_signal< sc_lv<2> > mpr_reg_425;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > mul_ln1494_fu_278_p2;
    sc_signal< sc_lv<8> > mul_ln1494_reg_430;
    sc_signal< sc_lv<1> > icmp_ln20_fu_257_p2;
    sc_signal< sc_lv<2> > mpc_fu_321_p2;
    sc_signal< sc_lv<2> > mpc_reg_438;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > icmp_ln23_fu_315_p2;
    sc_signal< sc_lv<13> > select_ln29_fu_365_p3;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<5> > f_0_reg_90;
    sc_signal< sc_lv<3> > r_0_reg_101;
    sc_signal< sc_lv<3> > c_0_reg_112;
    sc_signal< sc_lv<13> > max_0_reg_124;
    sc_signal< sc_lv<2> > mpr_0_reg_137;
    sc_signal< sc_lv<13> > max_1_reg_148;
    sc_signal< sc_lv<2> > mpc_0_reg_160;
    sc_signal< sc_lv<64> > zext_ln203_3_fu_306_p1;
    sc_signal< sc_lv<64> > zext_ln1494_2_fu_354_p1;
    sc_signal< sc_lv<5> > tmp_4_fu_215_p3;
    sc_signal< sc_lv<6> > zext_ln203_fu_211_p1;
    sc_signal< sc_lv<6> > zext_ln203_1_fu_223_p1;
    sc_signal< sc_lv<4> > zext_ln20_fu_253_p1;
    sc_signal< sc_lv<4> > i_fu_269_p2;
    sc_signal< sc_lv<4> > mul_ln1494_fu_278_p0;
    sc_signal< sc_lv<6> > zext_ln203_2_fu_284_p1;
    sc_signal< sc_lv<6> > add_ln203_1_fu_288_p2;
    sc_signal< sc_lv<10> > tmp_6_cast_fu_293_p3;
    sc_signal< sc_lv<10> > add_ln203_2_fu_301_p2;
    sc_signal< sc_lv<4> > zext_ln23_fu_311_p1;
    sc_signal< sc_lv<4> > j_fu_327_p2;
    sc_signal< sc_lv<8> > zext_ln1494_1_fu_332_p1;
    sc_signal< sc_lv<8> > add_ln1494_fu_336_p2;
    sc_signal< sc_lv<12> > tmp_8_cast_fu_341_p3;
    sc_signal< sc_lv<12> > add_ln1494_1_fu_349_p2;
    sc_signal< sc_lv<1> > icmp_ln1494_fu_359_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_lv<8> > mul_ln1494_fu_278_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<8> ap_const_lv8_B;
    static const sc_lv<4> ap_const_lv4_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1494_1_fu_349_p2();
    void thread_add_ln1494_fu_336_p2();
    void thread_add_ln203_1_fu_288_p2();
    void thread_add_ln203_2_fu_301_p2();
    void thread_add_ln203_fu_227_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_fu_239_p2();
    void thread_conv_out_V_address0();
    void thread_conv_out_V_ce0();
    void thread_f_fu_177_p2();
    void thread_i_fu_269_p2();
    void thread_icmp_ln10_fu_171_p2();
    void thread_icmp_ln13_fu_191_p2();
    void thread_icmp_ln1494_fu_359_p2();
    void thread_icmp_ln16_fu_233_p2();
    void thread_icmp_ln20_fu_257_p2();
    void thread_icmp_ln23_fu_315_p2();
    void thread_j_fu_327_p2();
    void thread_max_pool_out_V_address0();
    void thread_max_pool_out_V_ce0();
    void thread_max_pool_out_V_d0();
    void thread_max_pool_out_V_we0();
    void thread_mpc_fu_321_p2();
    void thread_mpr_fu_263_p2();
    void thread_mul_ln1494_fu_278_p0();
    void thread_mul_ln1494_fu_278_p00();
    void thread_mul_ln1494_fu_278_p2();
    void thread_r_fu_197_p2();
    void thread_select_ln29_fu_365_p3();
    void thread_shl_ln1_fu_245_p3();
    void thread_shl_ln_fu_203_p3();
    void thread_tmp_4_fu_215_p3();
    void thread_tmp_6_cast_fu_293_p3();
    void thread_tmp_8_cast_fu_341_p3();
    void thread_zext_ln13_1_fu_187_p1();
    void thread_zext_ln13_fu_183_p1();
    void thread_zext_ln1494_1_fu_332_p1();
    void thread_zext_ln1494_2_fu_354_p1();
    void thread_zext_ln203_1_fu_223_p1();
    void thread_zext_ln203_2_fu_284_p1();
    void thread_zext_ln203_3_fu_306_p1();
    void thread_zext_ln203_fu_211_p1();
    void thread_zext_ln20_fu_253_p1();
    void thread_zext_ln23_fu_311_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
