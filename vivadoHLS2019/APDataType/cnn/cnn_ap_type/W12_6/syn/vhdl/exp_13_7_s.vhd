-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exp_13_7_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (12 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of exp_13_7_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv22_3FFFFF : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111111111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv13_FFF : STD_LOGIC_VECTOR (12 downto 0) := "0111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_x_msb_2_m_1_tabl_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal exp_x_msb_2_m_1_tabl_ce0 : STD_LOGIC;
    signal exp_x_msb_2_m_1_tabl_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_154_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_7_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_7_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_l_V_fu_128_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Result_12_fu_132_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln612_fu_142_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln612_fu_142_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_154_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_l_V_fu_128_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_fu_162_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_176_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_190_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_204_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_232_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_246_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_132_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_13_fu_146_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1498_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_50_fu_292_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Result_s_50_fu_292_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_V_fu_310_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_V_fu_310_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_14_fu_302_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln191_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_1_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_2_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_3_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_4_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_5_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_7_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln194_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_4_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln191_6_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_5_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_3_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_6_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln194_2_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_393_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_3_fu_393_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_3_fu_393_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_lo_s_V_fu_399_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal y_l_V_fu_409_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln195_fu_377_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal y_V_fu_415_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_9_fu_425_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_3_fu_432_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln255_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_462_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln255_1_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln255_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln255_1_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_484_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_3_fu_393_p00 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_3_fu_393_p10 : STD_LOGIC_VECTOR (49 downto 0);

    component exp_13_7_s_exp_x_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component exp_13_7_s_exp_x_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    exp_x_msb_2_m_1_tabl_U : component exp_13_7_s_exp_x_ibs
    generic map (
        DataWidth => 25,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_2_m_1_tabl_address0,
        ce0 => exp_x_msb_2_m_1_tabl_ce0,
        q0 => exp_x_msb_2_m_1_tabl_q0);

    exp_x_msb_1_table_V_U : component exp_13_7_s_exp_x_jbC
    generic map (
        DataWidth => 25,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln194_7_reg_517 <= or_ln194_7_fu_366_p2;
                tmp_reg_502 <= tmp_fu_154_p1(12 downto 12);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln194_fu_286_p2 <= (icmp_ln1498_fu_274_p2 and icmp_ln1494_fu_280_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv13_FFF when (or_ln255_1_fu_478_p2(0) = '1') else 
        tmp_s_fu_484_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln544_1_fu_319_p1(5 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_2_m_1_tabl_address0 <= zext_ln544_fu_314_p1(5 - 1 downto 0);

    exp_x_msb_2_m_1_tabl_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_x_msb_2_m_1_tabl_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_2_m_1_tabl_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1494_fu_280_p2 <= "1" when (unsigned(p_Result_13_fu_146_p3) > unsigned(ap_const_lv11_500)) else "0";
    icmp_ln1498_fu_274_p2 <= "1" when (p_Result_12_fu_132_p4 = ap_const_lv4_7) else "0";
    icmp_ln255_1_fu_472_p2 <= "0" when (tmp_5_fu_462_p4 = ap_const_lv2_0) else "1";
    icmp_ln255_fu_442_p2 <= "0" when (tmp_3_fu_432_p4 = ap_const_lv2_0) else "1";
    or_ln194_1_fu_330_p2 <= (xor_ln191_3_fu_212_p2 or xor_ln191_2_fu_198_p2);
    or_ln194_2_fu_336_p2 <= (or_ln194_fu_324_p2 or or_ln194_1_fu_330_p2);
    or_ln194_3_fu_342_p2 <= (xor_ln191_5_fu_240_p2 or xor_ln191_4_fu_226_p2);
    or_ln194_4_fu_348_p2 <= (xor_ln191_7_fu_268_p2 or and_ln194_fu_286_p2);
    or_ln194_5_fu_354_p2 <= (xor_ln191_6_fu_254_p2 or or_ln194_4_fu_348_p2);
    or_ln194_6_fu_360_p2 <= (or_ln194_5_fu_354_p2 or or_ln194_3_fu_342_p2);
    or_ln194_7_fu_366_p2 <= (or_ln194_6_fu_360_p2 or or_ln194_2_fu_336_p2);
    or_ln194_fu_324_p2 <= (xor_ln191_fu_170_p2 or xor_ln191_1_fu_184_p2);
    or_ln255_1_fu_478_p2 <= (or_ln255_fu_456_p2 or icmp_ln255_1_fu_472_p2);
    or_ln255_fu_456_p2 <= (tmp_4_fu_448_p3 or icmp_ln255_fu_442_p2);
    p_Result_12_fu_132_p1 <= x_V;
    p_Result_12_fu_132_p4 <= p_Result_12_fu_132_p1(9 downto 6);
    p_Result_13_fu_146_p3 <= (trunc_ln612_fu_142_p1 & ap_const_lv5_0);
    p_Result_14_fu_302_p3 <= (tmp_fu_154_p3 & p_Result_s_50_fu_292_p4);
    p_Result_1_fu_176_p3 <= x_l_V_fu_128_p1(10 downto 10);
    p_Result_2_fu_190_p3 <= x_l_V_fu_128_p1(11 downto 11);
    p_Result_3_fu_204_p3 <= x_l_V_fu_128_p1(12 downto 12);
    p_Result_4_fu_218_p3 <= x_l_V_fu_128_p1(13 downto 13);
    p_Result_5_fu_232_p3 <= x_l_V_fu_128_p1(14 downto 14);
    p_Result_6_fu_246_p3 <= x_l_V_fu_128_p1(15 downto 15);
    p_Result_7_fu_260_p3 <= x_l_V_fu_128_p1(16 downto 16);
    p_Result_s_50_fu_292_p1 <= x_V;
    p_Result_s_50_fu_292_p4 <= p_Result_s_50_fu_292_p1(8 downto 5);
    p_Result_s_fu_162_p3 <= x_l_V_fu_128_p1(9 downto 9);
    p_Val2_9_fu_425_p3 <= 
        select_ln195_fu_377_p3 when (or_ln194_7_reg_517(0) = '1') else 
        y_V_fu_415_p4;
    r_V_3_fu_393_p0 <= r_V_3_fu_393_p00(25 - 1 downto 0);
    r_V_3_fu_393_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_table_V_q0),50));
    r_V_3_fu_393_p1 <= r_V_3_fu_393_p10(25 - 1 downto 0);
    r_V_3_fu_393_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_m_1_tabl_q0),50));
    r_V_3_fu_393_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_393_p0) * unsigned(r_V_3_fu_393_p1), 50));
    select_ln195_fu_377_p3 <= 
        ap_const_lv22_3FFFFF when (xor_ln195_fu_372_p2(0) = '1') else 
        ap_const_lv22_0;
    tmp_3_fu_432_p4 <= p_Val2_9_fu_425_p3(21 downto 20);
    tmp_4_fu_448_p3 <= p_Val2_9_fu_425_p3(19 downto 19);
    tmp_5_fu_462_p4 <= p_Val2_9_fu_425_p3(18 downto 17);
    tmp_V_fu_310_p0 <= x_V;
    tmp_V_fu_310_p1 <= tmp_V_fu_310_p0(5 - 1 downto 0);
    tmp_fu_154_p1 <= x_V;
    tmp_fu_154_p3 <= tmp_fu_154_p1(12 downto 12);
    tmp_s_fu_484_p4 <= p_Val2_9_fu_425_p3(17 downto 5);
    trunc_ln612_fu_142_p0 <= x_V;
    trunc_ln612_fu_142_p1 <= trunc_ln612_fu_142_p0(6 - 1 downto 0);
    x_l_V_fu_128_p0 <= x_V;
        x_l_V_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_l_V_fu_128_p0),23));

    xor_ln191_1_fu_184_p2 <= (tmp_fu_154_p3 xor p_Result_1_fu_176_p3);
    xor_ln191_2_fu_198_p2 <= (tmp_fu_154_p3 xor p_Result_2_fu_190_p3);
    xor_ln191_3_fu_212_p2 <= (tmp_fu_154_p3 xor p_Result_3_fu_204_p3);
    xor_ln191_4_fu_226_p2 <= (tmp_fu_154_p3 xor p_Result_4_fu_218_p3);
    xor_ln191_5_fu_240_p2 <= (tmp_fu_154_p3 xor p_Result_5_fu_232_p3);
    xor_ln191_6_fu_254_p2 <= (tmp_fu_154_p3 xor p_Result_6_fu_246_p3);
    xor_ln191_7_fu_268_p2 <= (tmp_fu_154_p3 xor p_Result_7_fu_260_p3);
    xor_ln191_fu_170_p2 <= (tmp_fu_154_p3 xor p_Result_s_fu_162_p3);
    xor_ln195_fu_372_p2 <= (tmp_reg_502 xor ap_const_lv1_1);
    y_V_fu_415_p4 <= y_l_V_fu_409_p2(24 downto 3);
    y_l_V_fu_409_p2 <= std_logic_vector(unsigned(exp_x_msb_1_table_V_q0) + unsigned(y_lo_s_V_fu_399_p4));
    y_lo_s_V_fu_399_p4 <= r_V_3_fu_393_p2(49 downto 25);
    zext_ln544_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_14_fu_302_p3),64));
    zext_ln544_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_310_p1),64));
end behav;
