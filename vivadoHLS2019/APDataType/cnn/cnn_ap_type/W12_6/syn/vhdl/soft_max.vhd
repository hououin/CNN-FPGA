-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity soft_max is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_array_V_ce0 : OUT STD_LOGIC;
    dense_array_V_we0 : OUT STD_LOGIC;
    dense_array_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    dense_array_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_V_ce0 : OUT STD_LOGIC;
    prediction_V_we0 : OUT STD_LOGIC;
    prediction_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of soft_max is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_fu_148_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_reg_256 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln12_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_159_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_reg_266 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln13_fu_169_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_183_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_279 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal dense_array_V_addr_1_reg_284 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln20_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln27_fu_194_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln27_reg_289 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_4_fu_208_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_4_reg_294 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sum_V_fu_212_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_V_reg_299 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_224_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_307 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln29_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_312 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln27_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_exp_13_7_s_fu_133_ap_start : STD_LOGIC;
    signal grp_exp_13_7_s_fu_133_ap_done : STD_LOGIC;
    signal grp_exp_13_7_s_fu_133_ap_idle : STD_LOGIC;
    signal grp_exp_13_7_s_fu_133_ap_ready : STD_LOGIC;
    signal grp_exp_13_7_s_fu_133_x_V : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_exp_13_7_s_fu_133_ap_return : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_1_reg_76 : STD_LOGIC_VECTOR (11 downto 0);
    signal m_0_reg_88 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_3_reg_99 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_reg_111 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_122 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_exp_13_7_s_fu_133_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm_state5 : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln13_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1495_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_198_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_fu_198_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_243_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_243_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_243_ap_start : STD_LOGIC;
    signal grp_fu_243_ap_done : STD_LOGIC;

    component exp_13_7_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (12 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_sdiv_18ns_12skbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    grp_exp_13_7_s_fu_133 : component exp_13_7_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_13_7_s_fu_133_ap_start,
        ap_done => grp_exp_13_7_s_fu_133_ap_done,
        ap_idle => grp_exp_13_7_s_fu_133_ap_idle,
        ap_ready => grp_exp_13_7_s_fu_133_ap_ready,
        x_V => grp_exp_13_7_s_fu_133_x_V,
        ap_return => grp_exp_13_7_s_fu_133_ap_return);

    cnn_sdiv_18ns_12skbM_U25 : component cnn_sdiv_18ns_12skbM
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_243_ap_start,
        done => grp_fu_243_ap_done,
        din0 => grp_fu_243_p0,
        din1 => grp_fu_243_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_exp_13_7_s_fu_133_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_13_7_s_fu_133_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_NS_fsm_state5))) then 
                    grp_exp_13_7_s_fu_133_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_13_7_s_fu_133_ap_ready = ap_const_logic_1)) then 
                    grp_exp_13_7_s_fu_133_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_111 <= i_reg_279;
            elsif (((icmp_ln12_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_111 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_122 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                j_0_reg_122 <= j_reg_307;
            end if; 
        end if;
    end process;

    m_0_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_0_reg_88 <= m_reg_256;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_0_reg_88 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_Val2_1_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_1_reg_76 <= select_ln13_fu_169_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_1_reg_76 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_Val2_3_reg_99 <= sum_V_reg_299;
            elsif (((icmp_ln12_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_3_reg_99 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                dense_array_V_addr_1_reg_284 <= zext_ln22_fu_189_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_279 <= i_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_reg_307 <= j_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m_reg_256 <= m_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_Val2_4_reg_294 <= p_Val2_4_fu_208_p1;
                sum_V_reg_299 <= sum_V_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                rhs_V_reg_266 <= rhs_V_fu_159_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sext_ln27_reg_289 <= sext_ln27_fu_194_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    zext_ln29_reg_312(3 downto 0) <= zext_ln29_fu_230_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln29_reg_312(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln12_fu_142_p2, ap_CS_fsm_state4, icmp_ln20_fu_177_p2, ap_CS_fsm_state8, icmp_ln27_fu_218_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln12_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln20_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln27_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state5 <= ap_NS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, icmp_ln27_fu_218_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln27_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln27_fu_218_p2)
    begin
        if (((icmp_ln27_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, dense_array_V_addr_1_reg_284, ap_CS_fsm_state8, zext_ln29_fu_230_p1, ap_CS_fsm_state7, zext_ln13_fu_154_p1, zext_ln22_fu_189_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dense_array_V_address0 <= zext_ln29_fu_230_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dense_array_V_address0 <= dense_array_V_addr_1_reg_284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dense_array_V_address0 <= zext_ln22_fu_189_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dense_array_V_address0 <= zext_ln13_fu_154_p1(4 - 1 downto 0);
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_array_V_d0 <= p_Val2_4_reg_294;

    dense_array_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dense_array_V_we0 <= ap_const_logic_1;
        else 
            dense_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_exp_13_7_s_fu_133_ap_start <= grp_exp_13_7_s_fu_133_ap_start_reg;
    grp_exp_13_7_s_fu_133_x_V <= std_logic_vector(signed(lhs_V_fu_198_p1) - signed(rhs_V_reg_266));

    grp_fu_243_ap_start_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_243_ap_start <= ap_const_logic_1;
        else 
            grp_fu_243_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_243_p0 <= (dense_array_V_q0 & ap_const_lv6_0);
    grp_fu_243_p1 <= sext_ln27_reg_289(12 - 1 downto 0);
    i_fu_183_p2 <= std_logic_vector(unsigned(i_0_reg_111) + unsigned(ap_const_lv4_1));
    icmp_ln12_fu_142_p2 <= "1" when (m_0_reg_88 = ap_const_lv4_A) else "0";
    icmp_ln1495_fu_163_p2 <= "1" when (signed(p_Val2_1_reg_76) < signed(dense_array_V_q0)) else "0";
    icmp_ln20_fu_177_p2 <= "1" when (i_0_reg_111 = ap_const_lv4_A) else "0";
    icmp_ln27_fu_218_p2 <= "1" when (j_0_reg_122 = ap_const_lv4_A) else "0";
    j_fu_224_p2 <= std_logic_vector(unsigned(j_0_reg_122) + unsigned(ap_const_lv4_1));
    lhs_V_fu_198_p0 <= dense_array_V_q0;
        lhs_V_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_198_p0),13));

    m_fu_148_p2 <= std_logic_vector(unsigned(m_0_reg_88) + unsigned(ap_const_lv4_1));
    p_Val2_4_fu_208_p1 <= grp_exp_13_7_s_fu_133_ap_return(12 - 1 downto 0);
    prediction_V_address0 <= zext_ln29_reg_312(4 - 1 downto 0);

    prediction_V_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            prediction_V_ce0 <= ap_const_logic_1;
        else 
            prediction_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_V_d0 <= grp_fu_243_p2(12 - 1 downto 0);

    prediction_V_we0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            prediction_V_we0 <= ap_const_logic_1;
        else 
            prediction_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        rhs_V_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_76),13));

    select_ln13_fu_169_p3 <= 
        dense_array_V_q0 when (icmp_ln1495_fu_163_p2(0) = '1') else 
        p_Val2_1_reg_76;
        sext_ln27_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_reg_99),18));

    sum_V_fu_212_p2 <= std_logic_vector(unsigned(p_Val2_4_fu_208_p1) + unsigned(p_Val2_3_reg_99));
    zext_ln13_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_88),64));
    zext_ln22_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_111),64));
    zext_ln29_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_122),64));
end behav;
