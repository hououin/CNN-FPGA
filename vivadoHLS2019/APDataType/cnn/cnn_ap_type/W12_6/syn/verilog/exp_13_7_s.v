// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exp_13_7_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [12:0] x_V;
output  [12:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] exp_x_msb_2_m_1_tabl_address0;
reg    exp_x_msb_2_m_1_tabl_ce0;
wire   [24:0] exp_x_msb_2_m_1_tabl_q0;
wire   [4:0] exp_x_msb_1_table_V_address0;
reg    exp_x_msb_1_table_V_ce0;
wire   [24:0] exp_x_msb_1_table_V_q0;
wire   [0:0] tmp_fu_154_p3;
reg   [0:0] tmp_reg_502;
wire   [0:0] or_ln194_7_fu_366_p2;
reg   [0:0] or_ln194_7_reg_517;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln544_fu_314_p1;
wire   [63:0] zext_ln544_1_fu_319_p1;
wire  signed [12:0] x_l_V_fu_128_p0;
wire  signed [12:0] p_Result_12_fu_132_p1;
wire  signed [12:0] trunc_ln612_fu_142_p0;
wire   [5:0] trunc_ln612_fu_142_p1;
wire  signed [12:0] tmp_fu_154_p1;
wire  signed [22:0] x_l_V_fu_128_p1;
wire   [0:0] p_Result_s_fu_162_p3;
wire   [0:0] p_Result_1_fu_176_p3;
wire   [0:0] p_Result_2_fu_190_p3;
wire   [0:0] p_Result_3_fu_204_p3;
wire   [0:0] p_Result_4_fu_218_p3;
wire   [0:0] p_Result_5_fu_232_p3;
wire   [0:0] p_Result_6_fu_246_p3;
wire   [0:0] p_Result_7_fu_260_p3;
wire   [3:0] p_Result_12_fu_132_p4;
wire   [10:0] p_Result_13_fu_146_p3;
wire   [0:0] icmp_ln1498_fu_274_p2;
wire   [0:0] icmp_ln1494_fu_280_p2;
wire  signed [12:0] p_Result_s_50_fu_292_p1;
wire   [3:0] p_Result_s_50_fu_292_p4;
wire  signed [12:0] tmp_V_fu_310_p0;
wire   [4:0] tmp_V_fu_310_p1;
wire   [4:0] p_Result_14_fu_302_p3;
wire   [0:0] xor_ln191_fu_170_p2;
wire   [0:0] xor_ln191_1_fu_184_p2;
wire   [0:0] xor_ln191_2_fu_198_p2;
wire   [0:0] xor_ln191_3_fu_212_p2;
wire   [0:0] or_ln194_1_fu_330_p2;
wire   [0:0] or_ln194_fu_324_p2;
wire   [0:0] xor_ln191_4_fu_226_p2;
wire   [0:0] xor_ln191_5_fu_240_p2;
wire   [0:0] xor_ln191_7_fu_268_p2;
wire   [0:0] and_ln194_fu_286_p2;
wire   [0:0] or_ln194_4_fu_348_p2;
wire   [0:0] xor_ln191_6_fu_254_p2;
wire   [0:0] or_ln194_5_fu_354_p2;
wire   [0:0] or_ln194_3_fu_342_p2;
wire   [0:0] or_ln194_6_fu_360_p2;
wire   [0:0] or_ln194_2_fu_336_p2;
wire   [0:0] xor_ln195_fu_372_p2;
wire   [24:0] r_V_3_fu_393_p0;
wire   [24:0] r_V_3_fu_393_p1;
wire   [49:0] r_V_3_fu_393_p2;
wire   [24:0] y_lo_s_V_fu_399_p4;
wire   [24:0] y_l_V_fu_409_p2;
wire   [21:0] select_ln195_fu_377_p3;
wire   [21:0] y_V_fu_415_p4;
wire   [21:0] p_Val2_9_fu_425_p3;
wire   [1:0] tmp_3_fu_432_p4;
wire   [0:0] icmp_ln255_fu_442_p2;
wire   [0:0] tmp_4_fu_448_p3;
wire   [1:0] tmp_5_fu_462_p4;
wire   [0:0] icmp_ln255_1_fu_472_p2;
wire   [0:0] or_ln255_fu_456_p2;
wire   [0:0] or_ln255_1_fu_478_p2;
wire   [12:0] tmp_s_fu_484_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [49:0] r_V_3_fu_393_p00;
wire   [49:0] r_V_3_fu_393_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

exp_13_7_s_exp_x_ibs #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_2_m_1_tabl_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_2_m_1_tabl_address0),
    .ce0(exp_x_msb_2_m_1_tabl_ce0),
    .q0(exp_x_msb_2_m_1_tabl_q0)
);

exp_13_7_s_exp_x_jbC #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_1_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table_V_address0),
    .ce0(exp_x_msb_1_table_V_ce0),
    .q0(exp_x_msb_1_table_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln194_7_reg_517 <= or_ln194_7_fu_366_p2;
        tmp_reg_502 <= tmp_fu_154_p1[32'd12];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_1_table_V_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_2_m_1_tabl_ce0 = 1'b1;
    end else begin
        exp_x_msb_2_m_1_tabl_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln194_fu_286_p2 = (icmp_ln1498_fu_274_p2 & icmp_ln1494_fu_280_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln255_1_fu_478_p2[0:0] === 1'b1) ? 13'd4095 : tmp_s_fu_484_p4);

assign exp_x_msb_1_table_V_address0 = zext_ln544_1_fu_319_p1;

assign exp_x_msb_2_m_1_tabl_address0 = zext_ln544_fu_314_p1;

assign icmp_ln1494_fu_280_p2 = ((p_Result_13_fu_146_p3 > 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln1498_fu_274_p2 = ((p_Result_12_fu_132_p4 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln255_1_fu_472_p2 = ((tmp_5_fu_462_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln255_fu_442_p2 = ((tmp_3_fu_432_p4 != 2'd0) ? 1'b1 : 1'b0);

assign or_ln194_1_fu_330_p2 = (xor_ln191_3_fu_212_p2 | xor_ln191_2_fu_198_p2);

assign or_ln194_2_fu_336_p2 = (or_ln194_fu_324_p2 | or_ln194_1_fu_330_p2);

assign or_ln194_3_fu_342_p2 = (xor_ln191_5_fu_240_p2 | xor_ln191_4_fu_226_p2);

assign or_ln194_4_fu_348_p2 = (xor_ln191_7_fu_268_p2 | and_ln194_fu_286_p2);

assign or_ln194_5_fu_354_p2 = (xor_ln191_6_fu_254_p2 | or_ln194_4_fu_348_p2);

assign or_ln194_6_fu_360_p2 = (or_ln194_5_fu_354_p2 | or_ln194_3_fu_342_p2);

assign or_ln194_7_fu_366_p2 = (or_ln194_6_fu_360_p2 | or_ln194_2_fu_336_p2);

assign or_ln194_fu_324_p2 = (xor_ln191_fu_170_p2 | xor_ln191_1_fu_184_p2);

assign or_ln255_1_fu_478_p2 = (or_ln255_fu_456_p2 | icmp_ln255_1_fu_472_p2);

assign or_ln255_fu_456_p2 = (tmp_4_fu_448_p3 | icmp_ln255_fu_442_p2);

assign p_Result_12_fu_132_p1 = x_V;

assign p_Result_12_fu_132_p4 = {{p_Result_12_fu_132_p1[9:6]}};

assign p_Result_13_fu_146_p3 = {{trunc_ln612_fu_142_p1}, {5'd0}};

assign p_Result_14_fu_302_p3 = {{tmp_fu_154_p3}, {p_Result_s_50_fu_292_p4}};

assign p_Result_1_fu_176_p3 = x_l_V_fu_128_p1[32'd10];

assign p_Result_2_fu_190_p3 = x_l_V_fu_128_p1[32'd11];

assign p_Result_3_fu_204_p3 = x_l_V_fu_128_p1[32'd12];

assign p_Result_4_fu_218_p3 = x_l_V_fu_128_p1[32'd13];

assign p_Result_5_fu_232_p3 = x_l_V_fu_128_p1[32'd14];

assign p_Result_6_fu_246_p3 = x_l_V_fu_128_p1[32'd15];

assign p_Result_7_fu_260_p3 = x_l_V_fu_128_p1[32'd16];

assign p_Result_s_50_fu_292_p1 = x_V;

assign p_Result_s_50_fu_292_p4 = {{p_Result_s_50_fu_292_p1[8:5]}};

assign p_Result_s_fu_162_p3 = x_l_V_fu_128_p1[32'd9];

assign p_Val2_9_fu_425_p3 = ((or_ln194_7_reg_517[0:0] === 1'b1) ? select_ln195_fu_377_p3 : y_V_fu_415_p4);

assign r_V_3_fu_393_p0 = r_V_3_fu_393_p00;

assign r_V_3_fu_393_p00 = exp_x_msb_1_table_V_q0;

assign r_V_3_fu_393_p1 = r_V_3_fu_393_p10;

assign r_V_3_fu_393_p10 = exp_x_msb_2_m_1_tabl_q0;

assign r_V_3_fu_393_p2 = (r_V_3_fu_393_p0 * r_V_3_fu_393_p1);

assign select_ln195_fu_377_p3 = ((xor_ln195_fu_372_p2[0:0] === 1'b1) ? 22'd4194303 : 22'd0);

assign tmp_3_fu_432_p4 = {{p_Val2_9_fu_425_p3[21:20]}};

assign tmp_4_fu_448_p3 = p_Val2_9_fu_425_p3[32'd19];

assign tmp_5_fu_462_p4 = {{p_Val2_9_fu_425_p3[18:17]}};

assign tmp_V_fu_310_p0 = x_V;

assign tmp_V_fu_310_p1 = tmp_V_fu_310_p0[4:0];

assign tmp_fu_154_p1 = x_V;

assign tmp_fu_154_p3 = tmp_fu_154_p1[32'd12];

assign tmp_s_fu_484_p4 = {{p_Val2_9_fu_425_p3[17:5]}};

assign trunc_ln612_fu_142_p0 = x_V;

assign trunc_ln612_fu_142_p1 = trunc_ln612_fu_142_p0[5:0];

assign x_l_V_fu_128_p0 = x_V;

assign x_l_V_fu_128_p1 = x_l_V_fu_128_p0;

assign xor_ln191_1_fu_184_p2 = (tmp_fu_154_p3 ^ p_Result_1_fu_176_p3);

assign xor_ln191_2_fu_198_p2 = (tmp_fu_154_p3 ^ p_Result_2_fu_190_p3);

assign xor_ln191_3_fu_212_p2 = (tmp_fu_154_p3 ^ p_Result_3_fu_204_p3);

assign xor_ln191_4_fu_226_p2 = (tmp_fu_154_p3 ^ p_Result_4_fu_218_p3);

assign xor_ln191_5_fu_240_p2 = (tmp_fu_154_p3 ^ p_Result_5_fu_232_p3);

assign xor_ln191_6_fu_254_p2 = (tmp_fu_154_p3 ^ p_Result_6_fu_246_p3);

assign xor_ln191_7_fu_268_p2 = (tmp_fu_154_p3 ^ p_Result_7_fu_260_p3);

assign xor_ln191_fu_170_p2 = (tmp_fu_154_p3 ^ p_Result_s_fu_162_p3);

assign xor_ln195_fu_372_p2 = (tmp_reg_502 ^ 1'd1);

assign y_V_fu_415_p4 = {{y_l_V_fu_409_p2[24:3]}};

assign y_l_V_fu_409_p2 = (exp_x_msb_1_table_V_q0 + y_lo_s_V_fu_399_p4);

assign y_lo_s_V_fu_399_p4 = {{r_V_3_fu_393_p2[49:25]}};

assign zext_ln544_1_fu_319_p1 = p_Result_14_fu_302_p3;

assign zext_ln544_fu_314_p1 = tmp_V_fu_310_p1;

endmodule //exp_13_7_s
