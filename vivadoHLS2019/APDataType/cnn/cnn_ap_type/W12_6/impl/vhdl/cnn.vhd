-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    cnn_input_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_EN_A : OUT STD_LOGIC;
    cnn_input_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    cnn_input_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_Clk_A : OUT STD_LOGIC;
    cnn_input_Rst_A : OUT STD_LOGIC;
    prediction_output_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_EN_A : OUT STD_LOGIC;
    prediction_output_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_output_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_Clk_A : OUT STD_LOGIC;
    prediction_output_Rst_A : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.947483,HLS_SYN_LAT=458938,HLS_SYN_TPT=none,HLS_SYN_MEM=26,HLS_SYN_DSP=7,HLS_SYN_FF=2177,HLS_SYN_LUT=7970,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_FFA : STD_LOGIC_VECTOR (11 downto 0) := "111111111010";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv15_32 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110010";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv20_FFFFF : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv12_FE8 : STD_LOGIC_VECTOR (11 downto 0) := "111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal dense_1_weights_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dense_1_weights_V_ce0 : STD_LOGIC;
    signal dense_1_weights_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_1_bias_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_bias_V_ce0 : STD_LOGIC;
    signal dense_1_bias_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_2_weights_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_weights_V_ce0 : STD_LOGIC;
    signal dense_2_weights_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_2_bias_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_bias_V_ce0 : STD_LOGIC;
    signal dense_2_bias_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_out_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_ce0 : STD_LOGIC;
    signal dense_out_weights_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_out_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_V_ce0 : STD_LOGIC;
    signal dense_out_bias_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_788_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1882 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ix_in_fu_794_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_in_reg_1887 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_824_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_reg_1892 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_836_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1900 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln203_8_fu_846_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_8_reg_1905 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln25_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_856_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_reg_1915 : STD_LOGIC_VECTOR (9 downto 0);
    signal cnn_input_load_reg_1920 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln603_3_fu_1137_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln603_3_reg_1926 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_1_fu_1155_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_1934 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln14_fu_1161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_1939 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_1165_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln13_reg_1945 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_1_fu_1175_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_1953 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln1117_3_fu_1186_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1117_3_reg_1958 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln13_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_2_fu_1274_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1986 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln14_1_fu_1280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_reg_1991 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_1_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_3_fu_1284_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_3_reg_1997 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_fu_1294_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_2005 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln13_1_fu_1288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal d_fu_1417_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_2033 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln48_fu_1423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_2038 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln41_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_fu_1427_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_reg_2044 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_fu_1437_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_2052 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln46_fu_1431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_3_fu_1530_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_2080 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln70_fu_1536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_2085 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln69_fu_1524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_1541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_2095 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal p_Result_37_fu_1547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_37_reg_2100 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_12_fu_1561_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_12_reg_2105 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln944_fu_1595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_2110 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_1705_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_2116 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_1713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_2121 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_1719_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_2126 : STD_LOGIC_VECTOR (7 downto 0);
    signal dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_ce0 : STD_LOGIC;
    signal dense_array_V_we0 : STD_LOGIC;
    signal dense_array_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_array_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_1_input_V_ce0 : STD_LOGIC;
    signal conv_1_input_V_we0 : STD_LOGIC;
    signal conv_1_input_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_out_V_ce0 : STD_LOGIC;
    signal conv_1_out_V_we0 : STD_LOGIC;
    signal conv_1_out_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_out_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_pool_1_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pool_1_out_V_ce0 : STD_LOGIC;
    signal max_pool_1_out_V_we0 : STD_LOGIC;
    signal max_pool_1_out_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_pool_1_out_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_2_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_2_out_V_ce0 : STD_LOGIC;
    signal conv_2_out_V_we0 : STD_LOGIC;
    signal conv_2_out_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_2_out_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_pool_2_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_pool_2_out_V_ce0 : STD_LOGIC;
    signal max_pool_2_out_V_we0 : STD_LOGIC;
    signal max_pool_2_out_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_pool_2_out_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_array_V_ce0 : STD_LOGIC;
    signal flat_array_V_we0 : STD_LOGIC;
    signal flat_array_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal flat_array_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_1_out_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_out_V_ce0 : STD_LOGIC;
    signal dense_1_out_V_we0 : STD_LOGIC;
    signal dense_1_out_V_d0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_1_out_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_out_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_out_V_ce0 : STD_LOGIC;
    signal dense_2_out_V_we0 : STD_LOGIC;
    signal dense_2_out_V_d0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_out_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal prediction_V_ce0 : STD_LOGIC;
    signal prediction_V_we0 : STD_LOGIC;
    signal prediction_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal prediction_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_2_fu_730_ap_start : STD_LOGIC;
    signal grp_conv_2_fu_730_ap_done : STD_LOGIC;
    signal grp_conv_2_fu_730_ap_idle : STD_LOGIC;
    signal grp_conv_2_fu_730_ap_ready : STD_LOGIC;
    signal grp_conv_2_fu_730_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_2_fu_730_input_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_730_conv_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_2_fu_730_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_730_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_2_fu_730_conv_out_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_1_fu_740_ap_start : STD_LOGIC;
    signal grp_conv_1_fu_740_ap_done : STD_LOGIC;
    signal grp_conv_1_fu_740_ap_idle : STD_LOGIC;
    signal grp_conv_1_fu_740_ap_ready : STD_LOGIC;
    signal grp_conv_1_fu_740_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_1_fu_740_input_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_740_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_1_fu_740_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_740_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_1_fu_740_conv_out_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_soft_max_fu_750_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_750_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_750_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_750_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_750_dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_750_dense_array_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_750_dense_array_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_750_dense_array_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_soft_max_fu_750_prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_750_prediction_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_750_prediction_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_750_prediction_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_1_fu_760_ap_start : STD_LOGIC;
    signal grp_max_pool_1_fu_760_ap_done : STD_LOGIC;
    signal grp_max_pool_1_fu_760_ap_idle : STD_LOGIC;
    signal grp_max_pool_1_fu_760_ap_ready : STD_LOGIC;
    signal grp_max_pool_1_fu_760_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_1_fu_760_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_760_max_pool_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_1_fu_760_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_760_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_760_max_pool_out_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_2_fu_766_ap_start : STD_LOGIC;
    signal grp_max_pool_2_fu_766_ap_done : STD_LOGIC;
    signal grp_max_pool_2_fu_766_ap_idle : STD_LOGIC;
    signal grp_max_pool_2_fu_766_ap_ready : STD_LOGIC;
    signal grp_max_pool_2_fu_766_conv_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2_fu_766_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_766_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_766_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_766_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_2_fu_766_max_pool_out_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_flat_fu_772_ap_start : STD_LOGIC;
    signal grp_flat_fu_772_ap_done : STD_LOGIC;
    signal grp_flat_fu_772_ap_idle : STD_LOGIC;
    signal grp_flat_fu_772_ap_ready : STD_LOGIC;
    signal grp_flat_fu_772_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_772_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_772_flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_772_flat_array_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_772_flat_array_V_we0 : STD_LOGIC;
    signal grp_flat_fu_772_flat_array_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ix_in_0_reg_562 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_574 : STD_LOGIC_VECTOR (4 downto 0);
    signal ix_in_1_reg_585 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_0_reg_595 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_i_reg_606 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_Val2_24_reg_617 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_0_i_reg_629 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_reg_640 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_i5_reg_651 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal p_Val2_27_reg_662 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_0_i10_reg_674 : STD_LOGIC_VECTOR (5 downto 0);
    signal d_0_i_reg_685 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal p_Val2_33_reg_696 : STD_LOGIC_VECTOR (11 downto 0);
    signal f_0_i_reg_708 : STD_LOGIC_VECTOR (4 downto 0);
    signal i24_0_reg_719 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_conv_2_fu_730_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_conv_1_fu_740_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_soft_max_fu_750_ap_start_reg : STD_LOGIC := '0';
    signal grp_max_pool_1_fu_760_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_max_pool_2_fu_766_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_flat_fu_772_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln27_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_1145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_2_fu_1181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_fu_1340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_1300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_9_fu_1483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_1443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnn_input_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_fu_1259_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln19_1_fu_1402_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln703_2_fu_1517_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal prediction_output_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_800_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_812_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_fu_808_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_17_fu_820_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_18_fu_842_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_878_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_892_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_896_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_36_fu_904_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_35_fu_870_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_908_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_866_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_888_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_928_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_940_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_946_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_952_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_914_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_fu_960_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_986_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_990_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_1000_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1003_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_970_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581cast_fu_1019_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln571_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_1023_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln586_fu_996_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln585_1_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_1011_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln582_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_1095_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln603_1_fu_1109_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln603_1_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_1123_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1117_fu_1192_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1832_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1265_fu_1227_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln703_fu_1235_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1265_fu_1227_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln703_fu_1235_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln703_fu_1231_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln703_fu_1239_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_1251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_1245_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_1305_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_1317_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_6_fu_1313_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1117_7_fu_1325_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1117_fu_1329_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1117_2_fu_1335_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1841_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1265_1_fu_1370_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln703_2_fu_1378_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1265_1_fu_1370_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln703_2_fu_1378_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln703_1_fu_1374_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln703_1_fu_1382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_1394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_1_fu_1388_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_1448_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_1460_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_8_fu_1468_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_fu_1456_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_fu_1472_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_4_fu_1478_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1850_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1265_2_fu_1513_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_fu_1555_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_s_fu_1569_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_38_fu_1579_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_1587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_1605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1611_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_1627_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln947_fu_1631_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln947_fu_1637_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln947_fu_1641_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_32_fu_1647_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln947_fu_1621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_1653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1665_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln944_fu_1601_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln949_fu_1679_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_33_fu_1685_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_1673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_1659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_1699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_1723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_1726_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_1737_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_1731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_1742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_12_fu_1748_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_13_fu_1755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s_fu_1760_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_27_fu_1774_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln964_fu_1782_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_1790_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_1795_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_16_fu_1770_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1801_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_39_fu_1808_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_1820_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1832_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1841_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1841_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1850_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1850_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1841_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1850_p00 : STD_LOGIC_VECTOR (17 downto 0);

    component conv_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component conv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce0 : OUT STD_LOGIC;
        dense_array_V_we0 : OUT STD_LOGIC;
        dense_array_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        dense_array_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_V_ce0 : OUT STD_LOGIC;
        prediction_V_we0 : OUT STD_LOGIC;
        prediction_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component max_pool_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component max_pool_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component flat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        flat_array_V_ce0 : OUT STD_LOGIC;
        flat_array_V_we0 : OUT STD_LOGIC;
        flat_array_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component cnn_fpext_32ns_64rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_mac_muladd_7ssc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component cnn_mac_muladd_7stde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component cnn_mac_muladd_11udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component cnn_dense_1_weighlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component cnn_dense_1_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component cnn_dense_2_weighmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component cnn_dense_2_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component cnn_dense_out_weincg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component cnn_dense_out_biaocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component cnn_dense_array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component cnn_conv_1_input_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component cnn_conv_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component cnn_max_pool_1_oupcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component cnn_conv_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component cnn_max_pool_2_ouqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component cnn_dense_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (10 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component cnn_dense_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (10 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component cnn_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    dense_1_weights_V_U : component cnn_dense_1_weighlbW
    generic map (
        DataWidth => 7,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_weights_V_address0,
        ce0 => dense_1_weights_V_ce0,
        q0 => dense_1_weights_V_q0);

    dense_1_bias_V_U : component cnn_dense_1_bias_V
    generic map (
        DataWidth => 4,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_bias_V_address0,
        ce0 => dense_1_bias_V_ce0,
        q0 => dense_1_bias_V_q0);

    dense_2_weights_V_U : component cnn_dense_2_weighmb6
    generic map (
        DataWidth => 7,
        AddressRange => 1500,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_weights_V_address0,
        ce0 => dense_2_weights_V_ce0,
        q0 => dense_2_weights_V_q0);

    dense_2_bias_V_U : component cnn_dense_2_bias_V
    generic map (
        DataWidth => 7,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_bias_V_address0,
        ce0 => dense_2_bias_V_ce0,
        q0 => dense_2_bias_V_q0);

    dense_out_weights_V_U : component cnn_dense_out_weincg
    generic map (
        DataWidth => 7,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_out_weights_V_address0,
        ce0 => dense_out_weights_V_ce0,
        q0 => dense_out_weights_V_q0);

    dense_out_bias_V_U : component cnn_dense_out_biaocq
    generic map (
        DataWidth => 6,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_out_bias_V_address0,
        ce0 => dense_out_bias_V_ce0,
        q0 => dense_out_bias_V_q0);

    cnn_CRTL_BUS_s_axi_U : component cnn_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    dense_array_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_array_V_address0,
        ce0 => dense_array_V_ce0,
        we0 => dense_array_V_we0,
        d0 => dense_array_V_d0,
        q0 => dense_array_V_q0);

    conv_1_input_V_U : component cnn_conv_1_input_V
    generic map (
        DataWidth => 12,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_1_input_V_address0,
        ce0 => conv_1_input_V_ce0,
        we0 => conv_1_input_V_we0,
        d0 => select_ln603_3_reg_1926,
        q0 => conv_1_input_V_q0);

    conv_1_out_V_U : component cnn_conv_1_out_V
    generic map (
        DataWidth => 12,
        AddressRange => 4056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_1_out_V_address0,
        ce0 => conv_1_out_V_ce0,
        we0 => conv_1_out_V_we0,
        d0 => conv_1_out_V_d0,
        q0 => conv_1_out_V_q0);

    max_pool_1_out_V_U : component cnn_max_pool_1_oupcA
    generic map (
        DataWidth => 12,
        AddressRange => 1014,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_1_out_V_address0,
        ce0 => max_pool_1_out_V_ce0,
        we0 => max_pool_1_out_V_we0,
        d0 => max_pool_1_out_V_d0,
        q0 => max_pool_1_out_V_q0);

    conv_2_out_V_U : component cnn_conv_2_out_V
    generic map (
        DataWidth => 12,
        AddressRange => 1936,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_2_out_V_address0,
        ce0 => conv_2_out_V_ce0,
        we0 => conv_2_out_V_we0,
        d0 => conv_2_out_V_d0,
        q0 => conv_2_out_V_q0);

    max_pool_2_out_V_U : component cnn_max_pool_2_ouqcK
    generic map (
        DataWidth => 12,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_2_out_V_address0,
        ce0 => max_pool_2_out_V_ce0,
        we0 => max_pool_2_out_V_we0,
        d0 => max_pool_2_out_V_d0,
        q0 => max_pool_2_out_V_q0);

    flat_array_V_U : component cnn_max_pool_2_ouqcK
    generic map (
        DataWidth => 12,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => flat_array_V_address0,
        ce0 => flat_array_V_ce0,
        we0 => flat_array_V_we0,
        d0 => flat_array_V_d0,
        q0 => flat_array_V_q0);

    dense_1_out_V_U : component cnn_dense_1_out_V
    generic map (
        DataWidth => 11,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_out_V_address0,
        ce0 => dense_1_out_V_ce0,
        we0 => dense_1_out_V_we0,
        d0 => dense_1_out_V_d0,
        q0 => dense_1_out_V_q0);

    dense_2_out_V_U : component cnn_dense_2_out_V
    generic map (
        DataWidth => 11,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_out_V_address0,
        ce0 => dense_2_out_V_ce0,
        we0 => dense_2_out_V_we0,
        d0 => dense_2_out_V_d0,
        q0 => dense_2_out_V_q0);

    prediction_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => prediction_V_address0,
        ce0 => prediction_V_ce0,
        we0 => prediction_V_we0,
        d0 => prediction_V_d0,
        q0 => prediction_V_q0);

    grp_conv_2_fu_730 : component conv_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_2_fu_730_ap_start,
        ap_done => grp_conv_2_fu_730_ap_done,
        ap_idle => grp_conv_2_fu_730_ap_idle,
        ap_ready => grp_conv_2_fu_730_ap_ready,
        input_V_address0 => grp_conv_2_fu_730_input_V_address0,
        input_V_ce0 => grp_conv_2_fu_730_input_V_ce0,
        input_V_q0 => max_pool_1_out_V_q0,
        conv_out_V_address0 => grp_conv_2_fu_730_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_2_fu_730_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_2_fu_730_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_2_fu_730_conv_out_V_d0);

    grp_conv_1_fu_740 : component conv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_1_fu_740_ap_start,
        ap_done => grp_conv_1_fu_740_ap_done,
        ap_idle => grp_conv_1_fu_740_ap_idle,
        ap_ready => grp_conv_1_fu_740_ap_ready,
        input_V_address0 => grp_conv_1_fu_740_input_V_address0,
        input_V_ce0 => grp_conv_1_fu_740_input_V_ce0,
        input_V_q0 => conv_1_input_V_q0,
        conv_out_V_address0 => grp_conv_1_fu_740_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_1_fu_740_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_1_fu_740_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_1_fu_740_conv_out_V_d0);

    grp_soft_max_fu_750 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_soft_max_fu_750_ap_start,
        ap_done => grp_soft_max_fu_750_ap_done,
        ap_idle => grp_soft_max_fu_750_ap_idle,
        ap_ready => grp_soft_max_fu_750_ap_ready,
        dense_array_V_address0 => grp_soft_max_fu_750_dense_array_V_address0,
        dense_array_V_ce0 => grp_soft_max_fu_750_dense_array_V_ce0,
        dense_array_V_we0 => grp_soft_max_fu_750_dense_array_V_we0,
        dense_array_V_d0 => grp_soft_max_fu_750_dense_array_V_d0,
        dense_array_V_q0 => dense_array_V_q0,
        prediction_V_address0 => grp_soft_max_fu_750_prediction_V_address0,
        prediction_V_ce0 => grp_soft_max_fu_750_prediction_V_ce0,
        prediction_V_we0 => grp_soft_max_fu_750_prediction_V_we0,
        prediction_V_d0 => grp_soft_max_fu_750_prediction_V_d0);

    grp_max_pool_1_fu_760 : component max_pool_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pool_1_fu_760_ap_start,
        ap_done => grp_max_pool_1_fu_760_ap_done,
        ap_idle => grp_max_pool_1_fu_760_ap_idle,
        ap_ready => grp_max_pool_1_fu_760_ap_ready,
        conv_out_V_address0 => grp_max_pool_1_fu_760_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_1_fu_760_conv_out_V_ce0,
        conv_out_V_q0 => conv_1_out_V_q0,
        max_pool_out_V_address0 => grp_max_pool_1_fu_760_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_1_fu_760_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_1_fu_760_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_1_fu_760_max_pool_out_V_d0);

    grp_max_pool_2_fu_766 : component max_pool_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pool_2_fu_766_ap_start,
        ap_done => grp_max_pool_2_fu_766_ap_done,
        ap_idle => grp_max_pool_2_fu_766_ap_idle,
        ap_ready => grp_max_pool_2_fu_766_ap_ready,
        conv_out_V_address0 => grp_max_pool_2_fu_766_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_2_fu_766_conv_out_V_ce0,
        conv_out_V_q0 => conv_2_out_V_q0,
        max_pool_out_V_address0 => grp_max_pool_2_fu_766_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_2_fu_766_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_2_fu_766_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_2_fu_766_max_pool_out_V_d0);

    grp_flat_fu_772 : component flat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_flat_fu_772_ap_start,
        ap_done => grp_flat_fu_772_ap_done,
        ap_idle => grp_flat_fu_772_ap_idle,
        ap_ready => grp_flat_fu_772_ap_ready,
        max_pool_out_V_address0 => grp_flat_fu_772_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_flat_fu_772_max_pool_out_V_ce0,
        max_pool_out_V_q0 => max_pool_2_out_V_q0,
        flat_array_V_address0 => grp_flat_fu_772_flat_array_V_address0,
        flat_array_V_ce0 => grp_flat_fu_772_flat_array_V_ce0,
        flat_array_V_we0 => grp_flat_fu_772_flat_array_V_we0,
        flat_array_V_d0 => grp_flat_fu_772_flat_array_V_d0);

    cnn_fpext_32ns_64rcU_U29 : component cnn_fpext_32ns_64rcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => cnn_input_Dout_A,
        ce => ap_const_logic_1,
        dout => grp_fu_778_p1);

    cnn_mac_muladd_7ssc4_U30 : component cnn_mac_muladd_7ssc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 12,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => dense_1_weights_V_q0,
        din1 => flat_array_V_q0,
        din2 => grp_fu_1832_p2,
        dout => grp_fu_1832_p3);

    cnn_mac_muladd_7stde_U31 : component cnn_mac_muladd_7stde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 11,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => dense_2_weights_V_q0,
        din1 => grp_fu_1841_p1,
        din2 => grp_fu_1841_p2,
        dout => grp_fu_1841_p3);

    cnn_mac_muladd_11udo_U32 : component cnn_mac_muladd_11udo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 7,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_1850_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_1850_p2,
        dout => grp_fu_1850_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv_1_fu_740_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_1_fu_740_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_conv_1_fu_740_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_1_fu_740_ap_ready = ap_const_logic_1)) then 
                    grp_conv_1_fu_740_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_2_fu_730_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_2_fu_730_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_conv_2_fu_730_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_2_fu_730_ap_ready = ap_const_logic_1)) then 
                    grp_conv_2_fu_730_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flat_fu_772_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_flat_fu_772_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_flat_fu_772_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flat_fu_772_ap_ready = ap_const_logic_1)) then 
                    grp_flat_fu_772_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_1_fu_760_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pool_1_fu_760_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_max_pool_1_fu_760_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_1_fu_760_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_1_fu_760_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_2_fu_766_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pool_2_fu_766_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_max_pool_2_fu_766_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_2_fu_766_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_2_fu_766_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_750_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_soft_max_fu_750_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln41_fu_1411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    grp_soft_max_fu_750_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_750_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_750_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_i_reg_685_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_1_fu_1268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                d_0_i_reg_685 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                d_0_i_reg_685 <= d_reg_2033;
            end if; 
        end if;
    end process;

    f_0_i_reg_708_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                f_0_i_reg_708 <= f_reg_2052;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1411_p2 = ap_const_lv1_0))) then 
                f_0_i_reg_708 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i24_0_reg_719_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i24_0_reg_719 <= i_3_reg_2080;
            elsif (((grp_soft_max_fu_750_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i24_0_reg_719 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i5_reg_651_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_0_i5_reg_651 <= i_2_reg_1986;
            elsif (((icmp_ln9_fu_1149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_0_i5_reg_651 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_0_i_reg_606 <= i_1_reg_1934;
            elsif (((grp_flat_fu_772_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_0_i_reg_606 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_830_p2 = ap_const_lv1_1))) then 
                i_0_reg_574 <= i_reg_1882;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_574 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ix_in_0_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_830_p2 = ap_const_lv1_1))) then 
                ix_in_0_reg_562 <= ix_in_reg_1887;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ix_in_0_reg_562 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    ix_in_1_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ix_in_1_reg_585 <= add_ln28_reg_1915;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_782_p2 = ap_const_lv1_0))) then 
                ix_in_1_reg_585 <= ix_in_0_reg_562;
            end if; 
        end if;
    end process;

    j_0_i10_reg_674_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_0_i10_reg_674 <= j_2_reg_2005;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1268_p2 = ap_const_lv1_0))) then 
                j_0_i10_reg_674 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_629_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_0_i_reg_629 <= j_1_reg_1953;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1149_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_629 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_595 <= j_reg_1900;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_782_p2 = ap_const_lv1_0))) then 
                j_0_reg_595 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_24_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_Val2_24_reg_617 <= grp_fu_1832_p3(17 downto 6);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1149_p2 = ap_const_lv1_0))) then 
                p_Val2_24_reg_617 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_Val2_27_reg_662_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                p_Val2_27_reg_662 <= grp_fu_1841_p3(17 downto 6);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1268_p2 = ap_const_lv1_0))) then 
                p_Val2_27_reg_662 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_Val2_33_reg_696_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                p_Val2_33_reg_696 <= grp_fu_1850_p3(17 downto 6);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1411_p2 = ap_const_lv1_0))) then 
                p_Val2_33_reg_696 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_640_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                phi_mul_reg_640 <= add_ln1117_3_reg_1958;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1149_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_640 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln13_fu_1169_p2 = ap_const_lv1_0))) then
                add_ln1117_3_reg_1958 <= add_ln1117_3_fu_1186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_830_p2 = ap_const_lv1_0))) then
                add_ln203_8_reg_1905 <= add_ln203_8_fu_846_p2;
                add_ln28_reg_1915 <= add_ln28_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cnn_input_load_reg_1920 <= cnn_input_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                d_reg_2033 <= d_fu_1417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                f_reg_2052 <= f_fu_1437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_1_reg_1934 <= i_1_fu_1155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_2_reg_1986 <= i_2_fu_1274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                i_3_reg_2080 <= i_3_fu_1530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1882 <= i_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                icmp_ln935_reg_2095 <= icmp_ln935_fu_1541_p2;
                icmp_ln958_reg_2121 <= icmp_ln958_fu_1713_p2;
                    or_ln_reg_2116(0) <= or_ln_fu_1705_p3(0);
                p_Result_37_reg_2100 <= prediction_V_q0(11 downto 11);
                sub_ln944_reg_2110 <= sub_ln944_fu_1595_p2;
                tmp_V_12_reg_2105 <= tmp_V_12_fu_1561_p3;
                trunc_ln943_reg_2126 <= trunc_ln943_fu_1719_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_782_p2 = ap_const_lv1_0))) then
                ix_in_reg_1887 <= ix_in_fu_794_p2;
                    sub_ln203_reg_1892(10 downto 2) <= sub_ln203_fu_824_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                j_1_reg_1953 <= j_1_fu_1175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                j_2_reg_2005 <= j_2_fu_1294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1900 <= j_fu_836_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                select_ln603_3_reg_1926 <= select_ln603_3_fu_1137_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_1_fu_1268_p2 = ap_const_lv1_0))) then
                    zext_ln13_3_reg_1997(4 downto 0) <= zext_ln13_3_fu_1284_p1(4 downto 0);
                    zext_ln14_1_reg_1991(4 downto 0) <= zext_ln14_1_fu_1280_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln9_fu_1149_p2 = ap_const_lv1_0))) then
                    zext_ln13_reg_1945(5 downto 0) <= zext_ln13_fu_1165_p1(5 downto 0);
                    zext_ln14_reg_1939(5 downto 0) <= zext_ln14_fu_1161_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1411_p2 = ap_const_lv1_0))) then
                    zext_ln46_reg_2044(3 downto 0) <= zext_ln46_fu_1427_p1(3 downto 0);
                    zext_ln48_reg_2038(3 downto 0) <= zext_ln48_fu_1423_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln69_fu_1524_p2 = ap_const_lv1_0))) then
                    zext_ln70_reg_2085(3 downto 0) <= zext_ln70_fu_1536_p1(3 downto 0);
            end if;
        end if;
    end process;
    sub_ln203_reg_1892(1 downto 0) <= "00";
    zext_ln14_reg_1939(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_1945(14 downto 6) <= "000000000";
    zext_ln14_1_reg_1991(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln13_3_reg_1997(11 downto 5) <= "0000000";
    zext_ln48_reg_2038(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_2044(8 downto 4) <= "00000";
    zext_ln70_reg_2085(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln_reg_2116(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_782_p2, ap_CS_fsm_state3, icmp_ln25_fu_830_p2, ap_CS_fsm_state17, icmp_ln9_fu_1149_p2, ap_CS_fsm_state18, icmp_ln13_fu_1169_p2, ap_CS_fsm_state21, icmp_ln9_1_fu_1268_p2, ap_CS_fsm_state22, icmp_ln13_1_fu_1288_p2, ap_CS_fsm_state25, icmp_ln41_fu_1411_p2, ap_CS_fsm_state26, icmp_ln46_fu_1431_p2, ap_CS_fsm_state30, icmp_ln69_fu_1524_p2, grp_conv_2_fu_730_ap_done, grp_conv_1_fu_740_ap_done, grp_soft_max_fu_750_ap_done, grp_max_pool_1_fu_760_ap_done, grp_max_pool_2_fu_766_ap_done, grp_flat_fu_772_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_782_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_830_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_conv_1_fu_740_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_max_pool_1_fu_760_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_conv_2_fu_730_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_max_pool_2_fu_766_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_flat_fu_772_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln9_fu_1149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln13_fu_1169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln9_1_fu_1268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln13_1_fu_1288_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_1411_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln46_fu_1431_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state29 => 
                if (((grp_soft_max_fu_750_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln69_fu_1524_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_928_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_888_p1));
    a_fu_1659_p2 <= (icmp_ln947_fu_1621_p2 and icmp_ln947_1_fu_1653_p2);
    add_ln1116_4_fu_1478_p2 <= std_logic_vector(unsigned(add_ln1116_fu_1472_p2) + unsigned(zext_ln46_reg_2044));
    add_ln1116_fu_1472_p2 <= std_logic_vector(unsigned(zext_ln1116_8_fu_1468_p1) + unsigned(zext_ln1116_fu_1456_p1));
    add_ln1117_2_fu_1335_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_1329_p2) + unsigned(zext_ln13_3_reg_1997));
    add_ln1117_3_fu_1186_p2 <= std_logic_vector(unsigned(phi_mul_reg_640) + unsigned(ap_const_lv15_32));
    add_ln1117_fu_1192_p2 <= std_logic_vector(unsigned(phi_mul_reg_640) + unsigned(zext_ln13_reg_1945));
    add_ln203_1_fu_1388_p2 <= std_logic_vector(signed(sext_ln703_2_fu_1378_p1) + signed(trunc_ln703_1_fu_1374_p1));
    add_ln203_8_fu_846_p2 <= std_logic_vector(unsigned(sub_ln203_reg_1892) + unsigned(zext_ln203_18_fu_842_p1));
    add_ln203_fu_1245_p2 <= std_logic_vector(signed(sext_ln703_fu_1235_p1) + signed(trunc_ln703_fu_1231_p1));
    add_ln28_fu_856_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ix_in_1_reg_585));
    add_ln581_fu_940_p2 <= std_logic_vector(signed(ap_const_lv12_FFA) + signed(F2_fu_928_p2));
    add_ln703_1_fu_1382_p2 <= std_logic_vector(unsigned(p_Val2_27_reg_662) + unsigned(sext_ln1265_1_fu_1370_p1));
    add_ln703_2_fu_1517_p2 <= std_logic_vector(signed(sext_ln1265_2_fu_1513_p1) + signed(p_Val2_33_reg_696));
    add_ln703_fu_1239_p2 <= std_logic_vector(unsigned(p_Val2_24_reg_617) + unsigned(sext_ln1265_fu_1227_p1));
    add_ln949_fu_1679_p2 <= std_logic_vector(signed(ap_const_lv12_FE8) + signed(trunc_ln944_fu_1601_p1));
    add_ln958_fu_1726_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_2110));
    add_ln964_fu_1795_p2 <= std_logic_vector(unsigned(select_ln964_fu_1782_p3) + unsigned(sub_ln964_fu_1790_p2));
    and_ln581_fu_1053_p2 <= (xor_ln582_fu_1047_p2 and icmp_ln581_fu_934_p2);
    and_ln582_fu_1035_p2 <= (xor_ln571_fu_1029_p2 and icmp_ln582_fu_964_p2);
    and_ln585_1_fu_1071_p2 <= (icmp_ln585_fu_974_p2 and and_ln581_fu_1053_p2);
    and_ln585_fu_1065_p2 <= (xor_ln585_fu_1059_p2 and and_ln581_fu_1053_p2);
    and_ln603_fu_1089_p2 <= (xor_ln581_fu_1083_p2 and icmp_ln603_fu_980_p2);
    and_ln949_fu_1693_p2 <= (xor_ln949_fu_1673_p2 and p_Result_33_fu_1685_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state30, icmp_ln69_fu_1524_p2)
    begin
        if (((icmp_ln69_fu_1524_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, icmp_ln69_fu_1524_p2)
    begin
        if (((icmp_ln69_fu_1524_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ashr_ln586_fu_990_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_914_p3),to_integer(unsigned('0' & zext_ln586_fu_986_p1(31-1 downto 0)))));
    bitcast_ln696_fu_1000_p1 <= cnn_input_load_reg_1920;
    bitcast_ln739_fu_1820_p1 <= p_Result_39_fu_1808_p5;
    cnn_input_Addr_A <= std_logic_vector(shift_left(unsigned(cnn_input_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    cnn_input_Addr_A_orig <= zext_ln27_fu_851_p1(32 - 1 downto 0);
    cnn_input_Clk_A <= ap_clk;
    cnn_input_Din_A <= ap_const_lv32_0;

    cnn_input_EN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnn_input_EN_A <= ap_const_logic_1;
        else 
            cnn_input_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    cnn_input_Rst_A <= ap_rst_n_inv;
    cnn_input_WEN_A <= ap_const_lv4_0;

    conv_1_input_V_address0_assign_proc : process(grp_conv_1_fu_740_input_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, sext_ln203_fu_1145_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_address0 <= sext_ln203_fu_1145_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_address0 <= grp_conv_1_fu_740_input_V_address0;
        else 
            conv_1_input_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_1_input_V_ce0_assign_proc : process(grp_conv_1_fu_740_input_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_ce0 <= grp_conv_1_fu_740_input_V_ce0;
        else 
            conv_1_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_we0 <= ap_const_logic_1;
        else 
            conv_1_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_740_conv_out_V_address0, grp_max_pool_1_fu_760_conv_out_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_address0 <= grp_max_pool_1_fu_760_conv_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_address0 <= grp_conv_1_fu_740_conv_out_V_address0;
        else 
            conv_1_out_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_740_conv_out_V_ce0, grp_max_pool_1_fu_760_conv_out_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_V_ce0 <= grp_max_pool_1_fu_760_conv_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_ce0 <= grp_conv_1_fu_740_conv_out_V_ce0;
        else 
            conv_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_conv_1_fu_740_conv_out_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_d0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_d0 <= grp_conv_1_fu_740_conv_out_V_d0;
        else 
            conv_1_out_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_782_p2, grp_conv_1_fu_740_conv_out_V_we0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_782_p2 = ap_const_lv1_1))) then 
            conv_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_we0 <= grp_conv_1_fu_740_conv_out_V_we0;
        else 
            conv_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_730_conv_out_V_address0, grp_max_pool_2_fu_766_conv_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_address0 <= ap_const_lv64_0(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_V_address0 <= grp_max_pool_2_fu_766_conv_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_address0 <= grp_conv_2_fu_730_conv_out_V_address0;
        else 
            conv_2_out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_730_conv_out_V_ce0, grp_max_pool_2_fu_766_conv_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_out_V_ce0 <= grp_max_pool_2_fu_766_conv_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_ce0 <= grp_conv_2_fu_730_conv_out_V_ce0;
        else 
            conv_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_730_conv_out_V_d0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_2_out_V_d0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_d0 <= grp_conv_2_fu_730_conv_out_V_d0;
        else 
            conv_2_out_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_782_p2, grp_conv_2_fu_730_conv_out_V_we0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_782_p2 = ap_const_lv1_1))) then 
            conv_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_2_out_V_we0 <= grp_conv_2_fu_730_conv_out_V_we0;
        else 
            conv_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_1417_p2 <= std_logic_vector(unsigned(d_0_i_reg_685) + unsigned(ap_const_lv4_1));
    dense_1_bias_V_address0 <= zext_ln14_reg_1939(6 - 1 downto 0);

    dense_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_address0_assign_proc : process(zext_ln14_reg_1939, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state20, zext_ln14_3_fu_1300_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_1_out_V_address0 <= zext_ln14_3_fu_1300_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dense_1_out_V_address0 <= zext_ln14_reg_1939(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_1_out_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            dense_1_out_V_address0 <= "XXXXXX";
        end if; 
    end process;


    dense_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state22, grp_flat_fu_772_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((grp_flat_fu_772_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            dense_1_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, select_ln19_fu_1259_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dense_1_out_V_d0 <= select_ln19_fu_1259_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_1_out_V_d0 <= ap_const_lv11_0;
        else 
            dense_1_out_V_d0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    dense_1_out_V_we0_assign_proc : process(grp_flat_fu_772_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((grp_flat_fu_772_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            dense_1_out_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_address0 <= zext_ln1117_fu_1197_p1(15 - 1 downto 0);

    dense_1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_bias_V_address0 <= zext_ln14_1_reg_1991(5 - 1 downto 0);

    dense_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_address0_assign_proc : process(ap_CS_fsm_state17, zext_ln14_1_reg_1991, ap_CS_fsm_state26, ap_CS_fsm_state24, zext_ln48_1_fu_1443_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_2_out_V_address0 <= zext_ln48_1_fu_1443_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dense_2_out_V_address0 <= zext_ln14_1_reg_1991(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dense_2_out_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            dense_2_out_V_address0 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state24, select_ln19_1_fu_1402_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dense_2_out_V_d0 <= select_ln19_1_fu_1402_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dense_2_out_V_d0 <= ap_const_lv11_0;
        else 
            dense_2_out_V_d0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    dense_2_out_V_we0_assign_proc : process(ap_CS_fsm_state17, icmp_ln9_fu_1149_p2, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln9_fu_1149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            dense_2_out_V_we0 <= ap_const_logic_1;
        else 
            dense_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_weights_V_address0 <= sext_ln1117_fu_1340_p1(11 - 1 downto 0);

    dense_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(zext_ln48_reg_2038, grp_soft_max_fu_750_dense_array_V_address0, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_address0 <= zext_ln48_reg_2038(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_address0 <= grp_soft_max_fu_750_dense_array_V_address0;
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(grp_soft_max_fu_750_dense_array_V_ce0, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_ce0 <= grp_soft_max_fu_750_dense_array_V_ce0;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_d0_assign_proc : process(grp_soft_max_fu_750_dense_array_V_d0, ap_CS_fsm_state28, ap_CS_fsm_state29, add_ln703_2_fu_1517_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_d0 <= add_ln703_2_fu_1517_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_d0 <= grp_soft_max_fu_750_dense_array_V_d0;
        else 
            dense_array_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_array_V_we0_assign_proc : process(grp_soft_max_fu_750_dense_array_V_we0, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_array_V_we0 <= grp_soft_max_fu_750_dense_array_V_we0;
        else 
            dense_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_V_address0 <= zext_ln48_reg_2038(4 - 1 downto 0);

    dense_out_bias_V_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_out_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_weights_V_address0 <= zext_ln1116_9_fu_1483_p1(9 - 1 downto 0);

    dense_out_weights_V_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_out_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_878_p4 <= ireg_V_fu_862_p1(62 downto 52);
    f_fu_1437_p2 <= std_logic_vector(unsigned(f_0_i_reg_708) + unsigned(ap_const_lv5_1));

    flat_array_V_address0_assign_proc : process(ap_CS_fsm_state18, grp_flat_fu_772_flat_array_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state14, zext_ln14_2_fu_1181_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            flat_array_V_address0 <= zext_ln14_2_fu_1181_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flat_array_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_address0 <= grp_flat_fu_772_flat_array_V_address0;
        else 
            flat_array_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_state18, grp_max_pool_2_fu_766_ap_done, grp_flat_fu_772_flat_array_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((grp_max_pool_2_fu_766_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_ce0 <= grp_flat_fu_772_flat_array_V_ce0;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_V_d0_assign_proc : process(grp_flat_fu_772_flat_array_V_d0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            flat_array_V_d0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_d0 <= grp_flat_fu_772_flat_array_V_d0;
        else 
            flat_array_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    flat_array_V_we0_assign_proc : process(grp_max_pool_2_fu_766_ap_done, grp_flat_fu_772_flat_array_V_we0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if (((grp_max_pool_2_fu_766_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            flat_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_V_we0 <= grp_flat_fu_772_flat_array_V_we0;
        else 
            flat_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_1_fu_740_ap_start <= grp_conv_1_fu_740_ap_start_reg;
    grp_conv_2_fu_730_ap_start <= grp_conv_2_fu_730_ap_start_reg;
    grp_flat_fu_772_ap_start <= grp_flat_fu_772_ap_start_reg;
    grp_fu_1832_p2 <= (p_Val2_24_reg_617 & ap_const_lv6_0);
    grp_fu_1841_p1 <= grp_fu_1841_p10(11 - 1 downto 0);
    grp_fu_1841_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_1_out_V_q0),18));
    grp_fu_1841_p2 <= (p_Val2_27_reg_662 & ap_const_lv6_0);
    grp_fu_1850_p0 <= grp_fu_1850_p00(11 - 1 downto 0);
    grp_fu_1850_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),18));
    grp_fu_1850_p2 <= (p_Val2_33_reg_696 & ap_const_lv6_0);
    grp_max_pool_1_fu_760_ap_start <= grp_max_pool_1_fu_760_ap_start_reg;
    grp_max_pool_2_fu_766_ap_start <= grp_max_pool_2_fu_766_ap_start_reg;
    grp_soft_max_fu_750_ap_start <= grp_soft_max_fu_750_ap_start_reg;
    i_1_fu_1155_p2 <= std_logic_vector(unsigned(i_0_i_reg_606) + unsigned(ap_const_lv6_1));
    i_2_fu_1274_p2 <= std_logic_vector(unsigned(i_0_i5_reg_651) + unsigned(ap_const_lv5_1));
    i_3_fu_1530_p2 <= std_logic_vector(unsigned(i24_0_reg_719) + unsigned(ap_const_lv4_1));
    i_fu_788_p2 <= std_logic_vector(unsigned(i_0_reg_574) + unsigned(ap_const_lv5_1));
    icmp_ln13_1_fu_1288_p2 <= "1" when (j_0_i10_reg_674 = ap_const_lv6_32) else "0";
    icmp_ln13_fu_1169_p2 <= "1" when (j_0_i_reg_629 = ap_const_lv9_190) else "0";
    icmp_ln23_fu_782_p2 <= "1" when (i_0_reg_574 = ap_const_lv5_1C) else "0";
    icmp_ln25_fu_830_p2 <= "1" when (j_0_reg_595 = ap_const_lv5_1C) else "0";
    icmp_ln41_fu_1411_p2 <= "1" when (d_0_i_reg_685 = ap_const_lv4_A) else "0";
    icmp_ln46_fu_1431_p2 <= "1" when (f_0_i_reg_708 = ap_const_lv5_1E) else "0";
    icmp_ln571_fu_922_p2 <= "1" when (trunc_ln556_fu_866_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_934_p2 <= "1" when (signed(F2_fu_928_p2) > signed(ap_const_lv12_6)) else "0";
    icmp_ln582_fu_964_p2 <= "1" when (F2_fu_928_p2 = ap_const_lv12_6) else "0";
    icmp_ln585_fu_974_p2 <= "1" when (unsigned(sh_amt_fu_952_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_980_p2 <= "1" when (unsigned(sh_amt_fu_952_p3) < unsigned(ap_const_lv12_C)) else "0";
    icmp_ln69_fu_1524_p2 <= "1" when (i24_0_reg_719 = ap_const_lv4_A) else "0";
    icmp_ln935_fu_1541_p2 <= "1" when (prediction_V_q0 = ap_const_lv12_0) else "0";
    icmp_ln947_1_fu_1653_p2 <= "0" when (p_Result_32_fu_1647_p2 = ap_const_lv12_0) else "1";
    icmp_ln947_fu_1621_p2 <= "1" when (signed(tmp_25_fu_1611_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_1713_p2 <= "1" when (signed(lsb_index_fu_1605_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln9_1_fu_1268_p2 <= "1" when (i_0_i5_reg_651 = ap_const_lv5_1E) else "0";
    icmp_ln9_fu_1149_p2 <= "1" when (i_0_i_reg_606 = ap_const_lv6_32) else "0";
    ireg_V_fu_862_p1 <= grp_fu_778_p1;
    ix_in_fu_794_p2 <= std_logic_vector(unsigned(ix_in_0_reg_562) + unsigned(ap_const_lv10_1C));
    j_1_fu_1175_p2 <= std_logic_vector(unsigned(j_0_i_reg_629) + unsigned(ap_const_lv9_1));
    j_2_fu_1294_p2 <= std_logic_vector(unsigned(j_0_i10_reg_674) + unsigned(ap_const_lv6_1));
    j_fu_836_p2 <= std_logic_vector(unsigned(j_0_reg_595) + unsigned(ap_const_lv5_1));
    
    l_fu_1587_p3_proc : process(p_Result_38_fu_1579_p3)
    begin
        l_fu_1587_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_38_fu_1579_p3(i) = '1' then
                l_fu_1587_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_1605_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_1595_p2));
    lshr_ln947_fu_1641_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv12_FFF),to_integer(unsigned('0' & zext_ln947_fu_1637_p1(12-1 downto 0)))));
    lshr_ln958_fu_1731_p2 <= std_logic_vector(shift_right(unsigned(m_fu_1723_p1),to_integer(unsigned('0' & add_ln958_fu_1726_p2(31-1 downto 0)))));
    m_12_fu_1748_p3 <= 
        lshr_ln958_fu_1731_p2 when (icmp_ln958_reg_2121(0) = '1') else 
        shl_ln958_fu_1742_p2;
    m_13_fu_1755_p2 <= std_logic_vector(unsigned(m_12_fu_1748_p3) + unsigned(or_ln_reg_2116));
    m_16_fu_1770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_1760_p4),32));
    m_fu_1723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_12_reg_2105),32));
    m_s_fu_1760_p4 <= m_13_fu_1755_p2(31 downto 1);
    man_V_1_fu_908_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_36_fu_904_p1));
    man_V_2_fu_914_p3 <= 
        man_V_1_fu_908_p2 when (p_Result_35_fu_870_p3(0) = '1') else 
        p_Result_36_fu_904_p1;

    max_pool_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_730_input_V_address0, grp_max_pool_1_fu_760_max_pool_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_address0 <= grp_max_pool_1_fu_760_max_pool_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_address0 <= grp_conv_2_fu_730_input_V_address0;
        else 
            max_pool_1_out_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_conv_2_fu_730_input_V_ce0, grp_max_pool_1_fu_760_max_pool_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_ce0 <= grp_max_pool_1_fu_760_max_pool_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max_pool_1_out_V_ce0 <= grp_conv_2_fu_730_input_V_ce0;
        else 
            max_pool_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_1_fu_760_max_pool_out_V_d0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_1_out_V_d0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_d0 <= grp_max_pool_1_fu_760_max_pool_out_V_d0;
        else 
            max_pool_1_out_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_782_p2, grp_max_pool_1_fu_760_max_pool_out_V_we0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_782_p2 = ap_const_lv1_1))) then 
            max_pool_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_1_out_V_we0 <= grp_max_pool_1_fu_760_max_pool_out_V_we0;
        else 
            max_pool_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_766_max_pool_out_V_address0, grp_flat_fu_772_max_pool_out_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            max_pool_2_out_V_address0 <= grp_flat_fu_772_max_pool_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_address0 <= grp_max_pool_2_fu_766_max_pool_out_V_address0;
        else 
            max_pool_2_out_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_766_max_pool_out_V_ce0, grp_flat_fu_772_max_pool_out_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            max_pool_2_out_V_ce0 <= grp_flat_fu_772_max_pool_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_ce0 <= grp_max_pool_2_fu_766_max_pool_out_V_ce0;
        else 
            max_pool_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_max_pool_2_fu_766_max_pool_out_V_d0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pool_2_out_V_d0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_d0 <= grp_max_pool_2_fu_766_max_pool_out_V_d0;
        else 
            max_pool_2_out_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_782_p2, grp_max_pool_2_fu_766_max_pool_out_V_we0, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_782_p2 = ap_const_lv1_1))) then 
            max_pool_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max_pool_2_out_V_we0 <= grp_max_pool_2_fu_766_max_pool_out_V_we0;
        else 
            max_pool_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln581_fu_1077_p2 <= (or_ln582_fu_1041_p2 or icmp_ln581_fu_934_p2);
    or_ln582_fu_1041_p2 <= (icmp_ln582_fu_964_p2 or icmp_ln571_fu_922_p2);
    or_ln603_1_fu_1117_p2 <= (and_ln585_fu_1065_p2 or and_ln582_fu_1035_p2);
    or_ln603_2_fu_1131_p2 <= (or_ln603_fu_1103_p2 or or_ln603_1_fu_1117_p2);
    or_ln603_fu_1103_p2 <= (and_ln603_fu_1089_p2 or and_ln585_1_fu_1071_p2);
    or_ln949_fu_1699_p2 <= (and_ln949_fu_1693_p2 or a_fu_1659_p2);
    or_ln_fu_1705_p3 <= (ap_const_lv31_0 & or_ln949_fu_1699_p2);
    p_Result_32_fu_1647_p2 <= (tmp_V_12_fu_1561_p3 and lshr_ln947_fu_1641_p2);
    p_Result_33_fu_1685_p3 <= tmp_V_12_fu_1561_p3(to_integer(unsigned(add_ln949_fu_1679_p2)) downto to_integer(unsigned(add_ln949_fu_1679_p2))) when (to_integer(unsigned(add_ln949_fu_1679_p2))>= 0 and to_integer(unsigned(add_ln949_fu_1679_p2))<=11) else "-";
    p_Result_35_fu_870_p3 <= ireg_V_fu_862_p1(63 downto 63);
    p_Result_36_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_896_p3),54));
    p_Result_37_fu_1547_p3 <= prediction_V_q0(11 downto 11);
    p_Result_38_fu_1579_p3 <= (ap_const_lv20_FFFFF & p_Result_s_fu_1569_p4);
    p_Result_39_fu_1808_p5 <= (tmp_8_fu_1801_p3 & m_16_fu_1770_p1(22 downto 0));
    
    p_Result_s_fu_1569_p4_proc : process(tmp_V_12_fu_1561_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(12+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(12+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable p_Result_s_fu_1569_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(12 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_B(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_12_fu_1561_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(12-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(12-1-unsigned(ap_const_lv32_B(4-1 downto 0)));
            for p_Result_s_fu_1569_p4_i in 0 to 12-1 loop
                v0_cpy(p_Result_s_fu_1569_p4_i) := tmp_V_12_fu_1561_p3(12-1-p_Result_s_fu_1569_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(12-1 downto 0)))));
        res_mask := res_mask(12-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_1569_p4 <= resvalue(12-1 downto 0);
    end process;


    prediction_V_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state30, zext_ln70_fu_1536_p1, grp_soft_max_fu_750_prediction_V_address0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            prediction_V_address0 <= zext_ln70_fu_1536_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            prediction_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_address0 <= grp_soft_max_fu_750_prediction_V_address0;
        else 
            prediction_V_address0 <= "XXXX";
        end if; 
    end process;


    prediction_V_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state30, grp_soft_max_fu_750_prediction_V_ce0, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            prediction_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_ce0 <= grp_soft_max_fu_750_prediction_V_ce0;
        else 
            prediction_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_V_d0_assign_proc : process(ap_CS_fsm_state21, grp_soft_max_fu_750_prediction_V_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            prediction_V_d0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_d0 <= grp_soft_max_fu_750_prediction_V_d0;
        else 
            prediction_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    prediction_V_we0_assign_proc : process(ap_CS_fsm_state21, icmp_ln9_1_fu_1268_p2, grp_soft_max_fu_750_prediction_V_we0, ap_CS_fsm_state29)
    begin
        if (((icmp_ln9_1_fu_1268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            prediction_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_V_we0 <= grp_soft_max_fu_750_prediction_V_we0;
        else 
            prediction_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_Addr_A <= std_logic_vector(shift_left(unsigned(prediction_output_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    prediction_output_Addr_A_orig <= zext_ln70_reg_2085(32 - 1 downto 0);
    prediction_output_Clk_A <= ap_clk;
    prediction_output_Din_A <= 
        ap_const_lv32_0 when (icmp_ln935_reg_2095(0) = '1') else 
        bitcast_ln739_fu_1820_p1;

    prediction_output_EN_A_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_output_EN_A <= ap_const_logic_1;
        else 
            prediction_output_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_Rst_A <= ap_rst_n_inv;

    prediction_output_WEN_A_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            prediction_output_WEN_A <= ap_const_lv4_F;
        else 
            prediction_output_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    select_ln19_1_fu_1402_p3 <= 
        ap_const_lv11_0 when (tmp_23_fu_1394_p3(0) = '1') else 
        add_ln203_1_fu_1388_p2;
    select_ln19_fu_1259_p3 <= 
        ap_const_lv11_0 when (tmp_22_fu_1251_p3(0) = '1') else 
        add_ln203_fu_1245_p2;
    select_ln588_fu_1011_p3 <= 
        ap_const_lv12_FFF when (tmp_21_fu_1003_p3(0) = '1') else 
        ap_const_lv12_0;
    select_ln603_1_fu_1109_p3 <= 
        select_ln588_fu_1011_p3 when (and_ln585_fu_1065_p2(0) = '1') else 
        trunc_ln583_fu_970_p1;
    select_ln603_2_fu_1123_p3 <= 
        select_ln603_fu_1095_p3 when (or_ln603_fu_1103_p2(0) = '1') else 
        select_ln603_1_fu_1109_p3;
    select_ln603_3_fu_1137_p3 <= 
        select_ln603_2_fu_1123_p3 when (or_ln603_2_fu_1131_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln603_fu_1095_p3 <= 
        shl_ln604_fu_1023_p2 when (and_ln603_fu_1089_p2(0) = '1') else 
        trunc_ln586_fu_996_p1;
    select_ln964_fu_1782_p3 <= 
        ap_const_lv8_7F when (tmp_27_fu_1774_p3(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1117_fu_1340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_2_fu_1335_p2),64));

    sext_ln1265_1_fu_1370_p0 <= dense_2_bias_V_q0;
        sext_ln1265_1_fu_1370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_1_fu_1370_p0),12));

        sext_ln1265_2_fu_1513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_out_bias_V_q0),12));

    sext_ln1265_fu_1227_p0 <= dense_1_bias_V_q0;
        sext_ln1265_fu_1227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_1227_p0),12));

        sext_ln203_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_8_reg_1905),64));

        sext_ln581_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_952_p3),32));

    sext_ln581cast_fu_1019_p1 <= sext_ln581_fu_960_p1(12 - 1 downto 0);
    sext_ln703_2_fu_1378_p0 <= dense_2_bias_V_q0;
        sext_ln703_2_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_1378_p0),11));

    sext_ln703_fu_1235_p0 <= dense_1_bias_V_q0;
        sext_ln703_fu_1235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_1235_p0),11));

    sh_amt_fu_952_p3 <= 
        add_ln581_fu_940_p2 when (icmp_ln581_fu_934_p2(0) = '1') else 
        sub_ln581_fu_946_p2;
    shl_ln604_fu_1023_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_970_p1),to_integer(unsigned('0' & sext_ln581cast_fu_1019_p1(12-1 downto 0)))));
    shl_ln958_fu_1742_p2 <= std_logic_vector(shift_left(unsigned(m_fu_1723_p1),to_integer(unsigned('0' & sub_ln958_fu_1737_p2(31-1 downto 0)))));
    sub_ln1117_fu_1329_p2 <= std_logic_vector(unsigned(zext_ln1117_6_fu_1313_p1) - unsigned(zext_ln1117_7_fu_1325_p1));
    sub_ln203_fu_824_p2 <= std_logic_vector(unsigned(zext_ln203_fu_808_p1) - unsigned(zext_ln203_17_fu_820_p1));
    sub_ln581_fu_946_p2 <= std_logic_vector(unsigned(ap_const_lv12_6) - unsigned(F2_fu_928_p2));
    sub_ln944_fu_1595_p2 <= std_logic_vector(unsigned(ap_const_lv32_C) - unsigned(l_fu_1587_p3));
    sub_ln947_fu_1631_p2 <= std_logic_vector(unsigned(ap_const_lv4_5) - unsigned(trunc_ln947_fu_1627_p1));
    sub_ln958_fu_1737_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_2110));
    sub_ln964_fu_1790_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(trunc_ln943_reg_2126));
    tmp_10_fu_812_p3 <= (i_0_reg_574 & ap_const_lv2_0);
    tmp_11_fu_1305_p3 <= (j_0_i10_reg_674 & ap_const_lv5_0);
    tmp_12_fu_1317_p3 <= (j_0_i10_reg_674 & ap_const_lv1_0);
    tmp_13_fu_1448_p3 <= (f_0_i_reg_708 & ap_const_lv3_0);
    tmp_14_fu_1460_p3 <= (f_0_i_reg_708 & ap_const_lv1_0);
    tmp_21_fu_1003_p3 <= bitcast_ln696_fu_1000_p1(31 downto 31);
    tmp_22_fu_1251_p3 <= add_ln703_fu_1239_p2(11 downto 11);
    tmp_23_fu_1394_p3 <= add_ln703_1_fu_1382_p2(11 downto 11);
    tmp_25_fu_1611_p4 <= lsb_index_fu_1605_p2(31 downto 1);
    tmp_26_fu_1665_p3 <= lsb_index_fu_1605_p2(31 downto 31);
    tmp_27_fu_1774_p3 <= m_13_fu_1755_p2(25 downto 25);
    tmp_8_fu_1801_p3 <= (p_Result_37_reg_2100 & add_ln964_fu_1795_p2);
    tmp_V_12_fu_1561_p3 <= 
        tmp_V_fu_1555_p2 when (p_Result_37_fu_1547_p3(0) = '1') else 
        prediction_V_q0;
    tmp_V_fu_1555_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(prediction_V_q0));
    tmp_fu_896_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_892_p1);
    tmp_s_fu_800_p3 <= (i_0_reg_574 & ap_const_lv5_0);
    trunc_ln556_fu_866_p1 <= ireg_V_fu_862_p1(63 - 1 downto 0);
    trunc_ln565_fu_892_p1 <= ireg_V_fu_862_p1(52 - 1 downto 0);
    trunc_ln583_fu_970_p1 <= man_V_2_fu_914_p3(12 - 1 downto 0);
    trunc_ln586_fu_996_p1 <= ashr_ln586_fu_990_p2(12 - 1 downto 0);
    trunc_ln703_1_fu_1374_p1 <= p_Val2_27_reg_662(11 - 1 downto 0);
    trunc_ln703_fu_1231_p1 <= p_Val2_24_reg_617(11 - 1 downto 0);
    trunc_ln943_fu_1719_p1 <= l_fu_1587_p3(8 - 1 downto 0);
    trunc_ln944_fu_1601_p1 <= sub_ln944_fu_1595_p2(12 - 1 downto 0);
    trunc_ln947_fu_1627_p1 <= sub_ln944_fu_1595_p2(4 - 1 downto 0);
    xor_ln571_fu_1029_p2 <= (icmp_ln571_fu_922_p2 xor ap_const_lv1_1);
    xor_ln581_fu_1083_p2 <= (or_ln581_fu_1077_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1047_p2 <= (or_ln582_fu_1041_p2 xor ap_const_lv1_1);
    xor_ln585_fu_1059_p2 <= (icmp_ln585_fu_974_p2 xor ap_const_lv1_1);
    xor_ln949_fu_1673_p2 <= (tmp_26_fu_1665_p3 xor ap_const_lv1_1);
    zext_ln1116_8_fu_1468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_1460_p3),9));
    zext_ln1116_9_fu_1483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_4_fu_1478_p2),64));
    zext_ln1116_fu_1456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_1448_p3),9));
    zext_ln1117_6_fu_1313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1305_p3),12));
    zext_ln1117_7_fu_1325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1317_p3),12));
    zext_ln1117_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_fu_1192_p2),64));
    zext_ln13_3_fu_1284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i5_reg_651),12));
    zext_ln13_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_606),15));
    zext_ln14_1_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i5_reg_651),64));
    zext_ln14_2_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_629),64));
    zext_ln14_3_fu_1300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i10_reg_674),64));
    zext_ln14_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_606),64));
    zext_ln203_17_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_812_p3),11));
    zext_ln203_18_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_595),11));
    zext_ln203_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_800_p3),11));
    zext_ln27_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_in_1_reg_585),64));
    zext_ln461_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_878_p4),12));
    zext_ln46_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_i_reg_685),9));
    zext_ln48_1_fu_1443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_i_reg_708),64));
    zext_ln48_fu_1423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_i_reg_685),64));
    zext_ln586_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_960_p1),54));
    zext_ln70_fu_1536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i24_0_reg_719),64));
    zext_ln947_fu_1637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_1631_p2),12));
end behav;
