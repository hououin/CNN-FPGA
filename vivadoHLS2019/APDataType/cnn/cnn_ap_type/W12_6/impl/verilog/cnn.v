// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cnn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.947483,HLS_SYN_LAT=458938,HLS_SYN_TPT=none,HLS_SYN_MEM=26,HLS_SYN_DSP=7,HLS_SYN_FF=2177,HLS_SYN_LUT=7970,HLS_VERSION=2019_1}" *)

module cnn (
        ap_clk,
        ap_rst_n,
        cnn_input_Addr_A,
        cnn_input_EN_A,
        cnn_input_WEN_A,
        cnn_input_Din_A,
        cnn_input_Dout_A,
        cnn_input_Clk_A,
        cnn_input_Rst_A,
        prediction_output_Addr_A,
        prediction_output_EN_A,
        prediction_output_WEN_A,
        prediction_output_Din_A,
        prediction_output_Dout_A,
        prediction_output_Clk_A,
        prediction_output_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] cnn_input_Addr_A;
output   cnn_input_EN_A;
output  [3:0] cnn_input_WEN_A;
output  [31:0] cnn_input_Din_A;
input  [31:0] cnn_input_Dout_A;
output   cnn_input_Clk_A;
output   cnn_input_Rst_A;
output  [31:0] prediction_output_Addr_A;
output   prediction_output_EN_A;
output  [3:0] prediction_output_WEN_A;
output  [31:0] prediction_output_Din_A;
input  [31:0] prediction_output_Dout_A;
output   prediction_output_Clk_A;
output   prediction_output_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg cnn_input_EN_A;
reg prediction_output_EN_A;
reg[3:0] prediction_output_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [14:0] dense_1_weights_V_address0;
reg    dense_1_weights_V_ce0;
wire  signed [6:0] dense_1_weights_V_q0;
wire   [5:0] dense_1_bias_V_address0;
reg    dense_1_bias_V_ce0;
wire   [3:0] dense_1_bias_V_q0;
wire   [10:0] dense_2_weights_V_address0;
reg    dense_2_weights_V_ce0;
wire  signed [6:0] dense_2_weights_V_q0;
wire   [4:0] dense_2_bias_V_address0;
reg    dense_2_bias_V_ce0;
wire   [6:0] dense_2_bias_V_q0;
wire   [8:0] dense_out_weights_V_address0;
reg    dense_out_weights_V_ce0;
wire  signed [6:0] dense_out_weights_V_q0;
wire   [3:0] dense_out_bias_V_address0;
reg    dense_out_bias_V_ce0;
wire   [5:0] dense_out_bias_V_q0;
wire   [4:0] i_fu_788_p2;
reg   [4:0] i_reg_1882;
wire    ap_CS_fsm_state2;
wire   [9:0] ix_in_fu_794_p2;
reg   [9:0] ix_in_reg_1887;
wire   [0:0] icmp_ln23_fu_782_p2;
wire   [10:0] sub_ln203_fu_824_p2;
reg   [10:0] sub_ln203_reg_1892;
wire   [4:0] j_fu_836_p2;
reg   [4:0] j_reg_1900;
wire    ap_CS_fsm_state3;
wire   [10:0] add_ln203_8_fu_846_p2;
reg   [10:0] add_ln203_8_reg_1905;
wire   [0:0] icmp_ln25_fu_830_p2;
wire   [9:0] add_ln28_fu_856_p2;
reg   [9:0] add_ln28_reg_1915;
reg   [31:0] cnn_input_load_reg_1920;
wire    ap_CS_fsm_state4;
wire   [11:0] select_ln603_3_fu_1137_p3;
reg   [11:0] select_ln603_3_reg_1926;
wire    ap_CS_fsm_state5;
wire   [5:0] i_1_fu_1155_p2;
reg   [5:0] i_1_reg_1934;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln14_fu_1161_p1;
reg   [63:0] zext_ln14_reg_1939;
wire   [0:0] icmp_ln9_fu_1149_p2;
wire   [14:0] zext_ln13_fu_1165_p1;
reg   [14:0] zext_ln13_reg_1945;
wire   [8:0] j_1_fu_1175_p2;
reg   [8:0] j_1_reg_1953;
wire    ap_CS_fsm_state18;
wire   [14:0] add_ln1117_3_fu_1186_p2;
reg   [14:0] add_ln1117_3_reg_1958;
wire   [0:0] icmp_ln13_fu_1169_p2;
wire    ap_CS_fsm_state19;
wire   [4:0] i_2_fu_1274_p2;
reg   [4:0] i_2_reg_1986;
wire    ap_CS_fsm_state21;
wire   [63:0] zext_ln14_1_fu_1280_p1;
reg   [63:0] zext_ln14_1_reg_1991;
wire   [0:0] icmp_ln9_1_fu_1268_p2;
wire   [11:0] zext_ln13_3_fu_1284_p1;
reg   [11:0] zext_ln13_3_reg_1997;
wire   [5:0] j_2_fu_1294_p2;
reg   [5:0] j_2_reg_2005;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln13_1_fu_1288_p2;
wire    ap_CS_fsm_state23;
wire   [3:0] d_fu_1417_p2;
reg   [3:0] d_reg_2033;
wire    ap_CS_fsm_state25;
wire   [63:0] zext_ln48_fu_1423_p1;
reg   [63:0] zext_ln48_reg_2038;
wire   [0:0] icmp_ln41_fu_1411_p2;
wire   [8:0] zext_ln46_fu_1427_p1;
reg   [8:0] zext_ln46_reg_2044;
wire   [4:0] f_fu_1437_p2;
reg   [4:0] f_reg_2052;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln46_fu_1431_p2;
wire    ap_CS_fsm_state27;
wire   [3:0] i_3_fu_1530_p2;
reg   [3:0] i_3_reg_2080;
wire    ap_CS_fsm_state30;
wire   [63:0] zext_ln70_fu_1536_p1;
reg   [63:0] zext_ln70_reg_2085;
wire   [0:0] icmp_ln69_fu_1524_p2;
wire   [0:0] icmp_ln935_fu_1541_p2;
reg   [0:0] icmp_ln935_reg_2095;
wire    ap_CS_fsm_state31;
wire   [0:0] p_Result_37_fu_1547_p3;
reg   [0:0] p_Result_37_reg_2100;
wire   [11:0] tmp_V_12_fu_1561_p3;
reg   [11:0] tmp_V_12_reg_2105;
wire   [31:0] sub_ln944_fu_1595_p2;
reg   [31:0] sub_ln944_reg_2110;
wire   [31:0] or_ln_fu_1705_p3;
reg   [31:0] or_ln_reg_2116;
wire   [0:0] icmp_ln958_fu_1713_p2;
reg   [0:0] icmp_ln958_reg_2121;
wire   [7:0] trunc_ln943_fu_1719_p1;
reg   [7:0] trunc_ln943_reg_2126;
reg   [3:0] dense_array_V_address0;
reg    dense_array_V_ce0;
reg    dense_array_V_we0;
reg   [11:0] dense_array_V_d0;
wire   [11:0] dense_array_V_q0;
reg   [9:0] conv_1_input_V_address0;
reg    conv_1_input_V_ce0;
reg    conv_1_input_V_we0;
wire   [11:0] conv_1_input_V_q0;
reg   [11:0] conv_1_out_V_address0;
reg    conv_1_out_V_ce0;
reg    conv_1_out_V_we0;
reg   [11:0] conv_1_out_V_d0;
wire   [11:0] conv_1_out_V_q0;
reg   [9:0] max_pool_1_out_V_address0;
reg    max_pool_1_out_V_ce0;
reg    max_pool_1_out_V_we0;
reg   [11:0] max_pool_1_out_V_d0;
wire   [11:0] max_pool_1_out_V_q0;
reg   [10:0] conv_2_out_V_address0;
reg    conv_2_out_V_ce0;
reg    conv_2_out_V_we0;
reg   [11:0] conv_2_out_V_d0;
wire   [11:0] conv_2_out_V_q0;
reg   [8:0] max_pool_2_out_V_address0;
reg    max_pool_2_out_V_ce0;
reg    max_pool_2_out_V_we0;
reg   [11:0] max_pool_2_out_V_d0;
wire   [11:0] max_pool_2_out_V_q0;
reg   [8:0] flat_array_V_address0;
reg    flat_array_V_ce0;
reg    flat_array_V_we0;
reg   [11:0] flat_array_V_d0;
wire  signed [11:0] flat_array_V_q0;
reg   [5:0] dense_1_out_V_address0;
reg    dense_1_out_V_ce0;
reg    dense_1_out_V_we0;
reg   [10:0] dense_1_out_V_d0;
wire   [10:0] dense_1_out_V_q0;
reg   [4:0] dense_2_out_V_address0;
reg    dense_2_out_V_ce0;
reg    dense_2_out_V_we0;
reg   [10:0] dense_2_out_V_d0;
wire   [10:0] dense_2_out_V_q0;
reg   [3:0] prediction_V_address0;
reg    prediction_V_ce0;
reg    prediction_V_we0;
reg   [11:0] prediction_V_d0;
wire   [11:0] prediction_V_q0;
wire    grp_conv_2_fu_730_ap_start;
wire    grp_conv_2_fu_730_ap_done;
wire    grp_conv_2_fu_730_ap_idle;
wire    grp_conv_2_fu_730_ap_ready;
wire   [9:0] grp_conv_2_fu_730_input_V_address0;
wire    grp_conv_2_fu_730_input_V_ce0;
wire   [10:0] grp_conv_2_fu_730_conv_out_V_address0;
wire    grp_conv_2_fu_730_conv_out_V_ce0;
wire    grp_conv_2_fu_730_conv_out_V_we0;
wire   [11:0] grp_conv_2_fu_730_conv_out_V_d0;
wire    grp_conv_1_fu_740_ap_start;
wire    grp_conv_1_fu_740_ap_done;
wire    grp_conv_1_fu_740_ap_idle;
wire    grp_conv_1_fu_740_ap_ready;
wire   [9:0] grp_conv_1_fu_740_input_V_address0;
wire    grp_conv_1_fu_740_input_V_ce0;
wire   [11:0] grp_conv_1_fu_740_conv_out_V_address0;
wire    grp_conv_1_fu_740_conv_out_V_ce0;
wire    grp_conv_1_fu_740_conv_out_V_we0;
wire   [11:0] grp_conv_1_fu_740_conv_out_V_d0;
wire    grp_soft_max_fu_750_ap_start;
wire    grp_soft_max_fu_750_ap_done;
wire    grp_soft_max_fu_750_ap_idle;
wire    grp_soft_max_fu_750_ap_ready;
wire   [3:0] grp_soft_max_fu_750_dense_array_V_address0;
wire    grp_soft_max_fu_750_dense_array_V_ce0;
wire    grp_soft_max_fu_750_dense_array_V_we0;
wire   [11:0] grp_soft_max_fu_750_dense_array_V_d0;
wire   [3:0] grp_soft_max_fu_750_prediction_V_address0;
wire    grp_soft_max_fu_750_prediction_V_ce0;
wire    grp_soft_max_fu_750_prediction_V_we0;
wire   [11:0] grp_soft_max_fu_750_prediction_V_d0;
wire    grp_max_pool_1_fu_760_ap_start;
wire    grp_max_pool_1_fu_760_ap_done;
wire    grp_max_pool_1_fu_760_ap_idle;
wire    grp_max_pool_1_fu_760_ap_ready;
wire   [11:0] grp_max_pool_1_fu_760_conv_out_V_address0;
wire    grp_max_pool_1_fu_760_conv_out_V_ce0;
wire   [9:0] grp_max_pool_1_fu_760_max_pool_out_V_address0;
wire    grp_max_pool_1_fu_760_max_pool_out_V_ce0;
wire    grp_max_pool_1_fu_760_max_pool_out_V_we0;
wire   [11:0] grp_max_pool_1_fu_760_max_pool_out_V_d0;
wire    grp_max_pool_2_fu_766_ap_start;
wire    grp_max_pool_2_fu_766_ap_done;
wire    grp_max_pool_2_fu_766_ap_idle;
wire    grp_max_pool_2_fu_766_ap_ready;
wire   [10:0] grp_max_pool_2_fu_766_conv_out_V_address0;
wire    grp_max_pool_2_fu_766_conv_out_V_ce0;
wire   [8:0] grp_max_pool_2_fu_766_max_pool_out_V_address0;
wire    grp_max_pool_2_fu_766_max_pool_out_V_ce0;
wire    grp_max_pool_2_fu_766_max_pool_out_V_we0;
wire   [11:0] grp_max_pool_2_fu_766_max_pool_out_V_d0;
wire    grp_flat_fu_772_ap_start;
wire    grp_flat_fu_772_ap_done;
wire    grp_flat_fu_772_ap_idle;
wire    grp_flat_fu_772_ap_ready;
wire   [8:0] grp_flat_fu_772_max_pool_out_V_address0;
wire    grp_flat_fu_772_max_pool_out_V_ce0;
wire   [8:0] grp_flat_fu_772_flat_array_V_address0;
wire    grp_flat_fu_772_flat_array_V_ce0;
wire    grp_flat_fu_772_flat_array_V_we0;
wire   [11:0] grp_flat_fu_772_flat_array_V_d0;
reg   [9:0] ix_in_0_reg_562;
reg   [4:0] i_0_reg_574;
reg   [9:0] ix_in_1_reg_585;
wire    ap_CS_fsm_state6;
reg   [4:0] j_0_reg_595;
reg   [5:0] i_0_i_reg_606;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state20;
reg   [11:0] p_Val2_24_reg_617;
reg   [8:0] j_0_i_reg_629;
reg   [14:0] phi_mul_reg_640;
reg   [4:0] i_0_i5_reg_651;
wire    ap_CS_fsm_state24;
reg   [11:0] p_Val2_27_reg_662;
reg   [5:0] j_0_i10_reg_674;
reg   [3:0] d_0_i_reg_685;
wire    ap_CS_fsm_state28;
reg   [11:0] p_Val2_33_reg_696;
reg   [4:0] f_0_i_reg_708;
reg   [3:0] i24_0_reg_719;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state32;
reg    grp_conv_2_fu_730_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_conv_1_fu_740_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_soft_max_fu_750_ap_start_reg;
reg    grp_max_pool_1_fu_760_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_max_pool_2_fu_766_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    grp_flat_fu_772_ap_start_reg;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln27_fu_851_p1;
wire  signed [63:0] sext_ln203_fu_1145_p1;
wire   [63:0] zext_ln1117_fu_1197_p1;
wire   [63:0] zext_ln14_2_fu_1181_p1;
wire  signed [63:0] sext_ln1117_fu_1340_p1;
wire   [63:0] zext_ln14_3_fu_1300_p1;
wire   [63:0] zext_ln1116_9_fu_1483_p1;
wire   [63:0] zext_ln48_1_fu_1443_p1;
wire   [31:0] cnn_input_Addr_A_orig;
wire   [10:0] select_ln19_fu_1259_p3;
wire   [10:0] select_ln19_1_fu_1402_p3;
wire   [11:0] add_ln703_2_fu_1517_p2;
wire   [31:0] prediction_output_Addr_A_orig;
wire   [9:0] tmp_s_fu_800_p3;
wire   [6:0] tmp_10_fu_812_p3;
wire   [10:0] zext_ln203_fu_808_p1;
wire   [10:0] zext_ln203_17_fu_820_p1;
wire   [10:0] zext_ln203_18_fu_842_p1;
wire   [63:0] grp_fu_778_p1;
wire   [63:0] ireg_V_fu_862_p1;
wire   [10:0] exp_tmp_V_fu_878_p4;
wire   [51:0] trunc_ln565_fu_892_p1;
wire   [52:0] tmp_fu_896_p3;
wire   [53:0] p_Result_36_fu_904_p1;
wire   [0:0] p_Result_35_fu_870_p3;
wire   [53:0] man_V_1_fu_908_p2;
wire   [62:0] trunc_ln556_fu_866_p1;
wire   [11:0] zext_ln461_fu_888_p1;
wire   [11:0] F2_fu_928_p2;
wire   [0:0] icmp_ln581_fu_934_p2;
wire   [11:0] add_ln581_fu_940_p2;
wire   [11:0] sub_ln581_fu_946_p2;
wire  signed [11:0] sh_amt_fu_952_p3;
wire   [53:0] man_V_2_fu_914_p3;
wire  signed [31:0] sext_ln581_fu_960_p1;
wire   [53:0] zext_ln586_fu_986_p1;
wire   [53:0] ashr_ln586_fu_990_p2;
wire   [31:0] bitcast_ln696_fu_1000_p1;
wire   [0:0] tmp_21_fu_1003_p3;
wire   [11:0] trunc_ln583_fu_970_p1;
wire   [11:0] sext_ln581cast_fu_1019_p1;
wire   [0:0] icmp_ln571_fu_922_p2;
wire   [0:0] icmp_ln582_fu_964_p2;
wire   [0:0] xor_ln571_fu_1029_p2;
wire   [0:0] or_ln582_fu_1041_p2;
wire   [0:0] xor_ln582_fu_1047_p2;
wire   [0:0] icmp_ln585_fu_974_p2;
wire   [0:0] and_ln581_fu_1053_p2;
wire   [0:0] xor_ln585_fu_1059_p2;
wire   [0:0] or_ln581_fu_1077_p2;
wire   [0:0] icmp_ln603_fu_980_p2;
wire   [0:0] xor_ln581_fu_1083_p2;
wire   [0:0] and_ln603_fu_1089_p2;
wire   [11:0] shl_ln604_fu_1023_p2;
wire   [11:0] trunc_ln586_fu_996_p1;
wire   [0:0] and_ln585_1_fu_1071_p2;
wire   [0:0] and_ln585_fu_1065_p2;
wire   [11:0] select_ln588_fu_1011_p3;
wire   [0:0] and_ln582_fu_1035_p2;
wire   [0:0] or_ln603_fu_1103_p2;
wire   [11:0] select_ln603_fu_1095_p3;
wire   [11:0] select_ln603_1_fu_1109_p3;
wire   [0:0] or_ln603_1_fu_1117_p2;
wire   [0:0] or_ln603_2_fu_1131_p2;
wire   [11:0] select_ln603_2_fu_1123_p3;
wire   [14:0] add_ln1117_fu_1192_p2;
wire  signed [17:0] grp_fu_1832_p3;
wire  signed [3:0] sext_ln1265_fu_1227_p0;
wire  signed [3:0] sext_ln703_fu_1235_p0;
wire  signed [11:0] sext_ln1265_fu_1227_p1;
wire  signed [10:0] sext_ln703_fu_1235_p1;
wire   [10:0] trunc_ln703_fu_1231_p1;
wire   [11:0] add_ln703_fu_1239_p2;
wire   [0:0] tmp_22_fu_1251_p3;
wire   [10:0] add_ln203_fu_1245_p2;
wire   [10:0] tmp_11_fu_1305_p3;
wire   [6:0] tmp_12_fu_1317_p3;
wire   [11:0] zext_ln1117_6_fu_1313_p1;
wire   [11:0] zext_ln1117_7_fu_1325_p1;
wire   [11:0] sub_ln1117_fu_1329_p2;
wire   [11:0] add_ln1117_2_fu_1335_p2;
wire  signed [17:0] grp_fu_1841_p3;
wire  signed [6:0] sext_ln1265_1_fu_1370_p0;
wire  signed [6:0] sext_ln703_2_fu_1378_p0;
wire  signed [11:0] sext_ln1265_1_fu_1370_p1;
wire  signed [10:0] sext_ln703_2_fu_1378_p1;
wire   [10:0] trunc_ln703_1_fu_1374_p1;
wire   [11:0] add_ln703_1_fu_1382_p2;
wire   [0:0] tmp_23_fu_1394_p3;
wire   [10:0] add_ln203_1_fu_1388_p2;
wire   [7:0] tmp_13_fu_1448_p3;
wire   [5:0] tmp_14_fu_1460_p3;
wire   [8:0] zext_ln1116_8_fu_1468_p1;
wire   [8:0] zext_ln1116_fu_1456_p1;
wire   [8:0] add_ln1116_fu_1472_p2;
wire   [8:0] add_ln1116_4_fu_1478_p2;
wire  signed [17:0] grp_fu_1850_p3;
wire  signed [11:0] sext_ln1265_2_fu_1513_p1;
wire   [11:0] tmp_V_fu_1555_p2;
reg   [11:0] p_Result_s_fu_1569_p4;
wire   [31:0] p_Result_38_fu_1579_p3;
reg   [31:0] l_fu_1587_p3;
wire   [31:0] lsb_index_fu_1605_p2;
wire   [30:0] tmp_25_fu_1611_p4;
wire   [3:0] trunc_ln947_fu_1627_p1;
wire   [3:0] sub_ln947_fu_1631_p2;
wire   [11:0] zext_ln947_fu_1637_p1;
wire   [11:0] lshr_ln947_fu_1641_p2;
wire   [11:0] p_Result_32_fu_1647_p2;
wire   [0:0] icmp_ln947_fu_1621_p2;
wire   [0:0] icmp_ln947_1_fu_1653_p2;
wire   [0:0] tmp_26_fu_1665_p3;
wire   [11:0] trunc_ln944_fu_1601_p1;
wire   [11:0] add_ln949_fu_1679_p2;
wire   [0:0] p_Result_33_fu_1685_p3;
wire   [0:0] xor_ln949_fu_1673_p2;
wire   [0:0] and_ln949_fu_1693_p2;
wire   [0:0] a_fu_1659_p2;
wire   [0:0] or_ln949_fu_1699_p2;
wire   [31:0] m_fu_1723_p1;
wire   [31:0] add_ln958_fu_1726_p2;
wire   [31:0] sub_ln958_fu_1737_p2;
wire   [31:0] lshr_ln958_fu_1731_p2;
wire   [31:0] shl_ln958_fu_1742_p2;
wire   [31:0] m_12_fu_1748_p3;
wire   [31:0] m_13_fu_1755_p2;
wire   [30:0] m_s_fu_1760_p4;
wire   [0:0] tmp_27_fu_1774_p3;
wire   [7:0] select_ln964_fu_1782_p3;
wire   [7:0] sub_ln964_fu_1790_p2;
wire   [7:0] add_ln964_fu_1795_p2;
wire   [31:0] m_16_fu_1770_p1;
wire   [8:0] tmp_8_fu_1801_p3;
wire   [31:0] p_Result_39_fu_1808_p5;
wire   [31:0] bitcast_ln739_fu_1820_p1;
wire   [17:0] grp_fu_1832_p2;
wire   [10:0] grp_fu_1841_p1;
wire   [17:0] grp_fu_1841_p2;
wire   [10:0] grp_fu_1850_p0;
wire   [17:0] grp_fu_1850_p2;
reg   [31:0] ap_NS_fsm;
wire   [17:0] grp_fu_1841_p10;
wire   [17:0] grp_fu_1850_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 grp_conv_2_fu_730_ap_start_reg = 1'b0;
#0 grp_conv_1_fu_740_ap_start_reg = 1'b0;
#0 grp_soft_max_fu_750_ap_start_reg = 1'b0;
#0 grp_max_pool_1_fu_760_ap_start_reg = 1'b0;
#0 grp_max_pool_2_fu_766_ap_start_reg = 1'b0;
#0 grp_flat_fu_772_ap_start_reg = 1'b0;
end

cnn_dense_1_weighlbW #(
    .DataWidth( 7 ),
    .AddressRange( 20000 ),
    .AddressWidth( 15 ))
dense_1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dense_1_weights_V_address0),
    .ce0(dense_1_weights_V_ce0),
    .q0(dense_1_weights_V_q0)
);

cnn_dense_1_bias_V #(
    .DataWidth( 4 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
dense_1_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dense_1_bias_V_address0),
    .ce0(dense_1_bias_V_ce0),
    .q0(dense_1_bias_V_q0)
);

cnn_dense_2_weighmb6 #(
    .DataWidth( 7 ),
    .AddressRange( 1500 ),
    .AddressWidth( 11 ))
dense_2_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dense_2_weights_V_address0),
    .ce0(dense_2_weights_V_ce0),
    .q0(dense_2_weights_V_q0)
);

cnn_dense_2_bias_V #(
    .DataWidth( 7 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
dense_2_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dense_2_bias_V_address0),
    .ce0(dense_2_bias_V_ce0),
    .q0(dense_2_bias_V_q0)
);

cnn_dense_out_weincg #(
    .DataWidth( 7 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
dense_out_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dense_out_weights_V_address0),
    .ce0(dense_out_weights_V_ce0),
    .q0(dense_out_weights_V_q0)
);

cnn_dense_out_biaocq #(
    .DataWidth( 6 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dense_out_bias_V_address0),
    .ce0(dense_out_bias_V_ce0),
    .q0(dense_out_bias_V_q0)
);

cnn_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
cnn_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

cnn_dense_array_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dense_array_V_address0),
    .ce0(dense_array_V_ce0),
    .we0(dense_array_V_we0),
    .d0(dense_array_V_d0),
    .q0(dense_array_V_q0)
);

cnn_conv_1_input_V #(
    .DataWidth( 12 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
conv_1_input_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv_1_input_V_address0),
    .ce0(conv_1_input_V_ce0),
    .we0(conv_1_input_V_we0),
    .d0(select_ln603_3_reg_1926),
    .q0(conv_1_input_V_q0)
);

cnn_conv_1_out_V #(
    .DataWidth( 12 ),
    .AddressRange( 4056 ),
    .AddressWidth( 12 ))
conv_1_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv_1_out_V_address0),
    .ce0(conv_1_out_V_ce0),
    .we0(conv_1_out_V_we0),
    .d0(conv_1_out_V_d0),
    .q0(conv_1_out_V_q0)
);

cnn_max_pool_1_oupcA #(
    .DataWidth( 12 ),
    .AddressRange( 1014 ),
    .AddressWidth( 10 ))
max_pool_1_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(max_pool_1_out_V_address0),
    .ce0(max_pool_1_out_V_ce0),
    .we0(max_pool_1_out_V_we0),
    .d0(max_pool_1_out_V_d0),
    .q0(max_pool_1_out_V_q0)
);

cnn_conv_2_out_V #(
    .DataWidth( 12 ),
    .AddressRange( 1936 ),
    .AddressWidth( 11 ))
conv_2_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv_2_out_V_address0),
    .ce0(conv_2_out_V_ce0),
    .we0(conv_2_out_V_we0),
    .d0(conv_2_out_V_d0),
    .q0(conv_2_out_V_q0)
);

cnn_max_pool_2_ouqcK #(
    .DataWidth( 12 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
max_pool_2_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(max_pool_2_out_V_address0),
    .ce0(max_pool_2_out_V_ce0),
    .we0(max_pool_2_out_V_we0),
    .d0(max_pool_2_out_V_d0),
    .q0(max_pool_2_out_V_q0)
);

cnn_max_pool_2_ouqcK #(
    .DataWidth( 12 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
flat_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(flat_array_V_address0),
    .ce0(flat_array_V_ce0),
    .we0(flat_array_V_we0),
    .d0(flat_array_V_d0),
    .q0(flat_array_V_q0)
);

cnn_dense_1_out_V #(
    .DataWidth( 11 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
dense_1_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dense_1_out_V_address0),
    .ce0(dense_1_out_V_ce0),
    .we0(dense_1_out_V_we0),
    .d0(dense_1_out_V_d0),
    .q0(dense_1_out_V_q0)
);

cnn_dense_2_out_V #(
    .DataWidth( 11 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
dense_2_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dense_2_out_V_address0),
    .ce0(dense_2_out_V_ce0),
    .we0(dense_2_out_V_we0),
    .d0(dense_2_out_V_d0),
    .q0(dense_2_out_V_q0)
);

cnn_dense_array_V #(
    .DataWidth( 12 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
prediction_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(prediction_V_address0),
    .ce0(prediction_V_ce0),
    .we0(prediction_V_we0),
    .d0(prediction_V_d0),
    .q0(prediction_V_q0)
);

conv_2 grp_conv_2_fu_730(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv_2_fu_730_ap_start),
    .ap_done(grp_conv_2_fu_730_ap_done),
    .ap_idle(grp_conv_2_fu_730_ap_idle),
    .ap_ready(grp_conv_2_fu_730_ap_ready),
    .input_V_address0(grp_conv_2_fu_730_input_V_address0),
    .input_V_ce0(grp_conv_2_fu_730_input_V_ce0),
    .input_V_q0(max_pool_1_out_V_q0),
    .conv_out_V_address0(grp_conv_2_fu_730_conv_out_V_address0),
    .conv_out_V_ce0(grp_conv_2_fu_730_conv_out_V_ce0),
    .conv_out_V_we0(grp_conv_2_fu_730_conv_out_V_we0),
    .conv_out_V_d0(grp_conv_2_fu_730_conv_out_V_d0)
);

conv_1 grp_conv_1_fu_740(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_conv_1_fu_740_ap_start),
    .ap_done(grp_conv_1_fu_740_ap_done),
    .ap_idle(grp_conv_1_fu_740_ap_idle),
    .ap_ready(grp_conv_1_fu_740_ap_ready),
    .input_V_address0(grp_conv_1_fu_740_input_V_address0),
    .input_V_ce0(grp_conv_1_fu_740_input_V_ce0),
    .input_V_q0(conv_1_input_V_q0),
    .conv_out_V_address0(grp_conv_1_fu_740_conv_out_V_address0),
    .conv_out_V_ce0(grp_conv_1_fu_740_conv_out_V_ce0),
    .conv_out_V_we0(grp_conv_1_fu_740_conv_out_V_we0),
    .conv_out_V_d0(grp_conv_1_fu_740_conv_out_V_d0)
);

soft_max grp_soft_max_fu_750(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_soft_max_fu_750_ap_start),
    .ap_done(grp_soft_max_fu_750_ap_done),
    .ap_idle(grp_soft_max_fu_750_ap_idle),
    .ap_ready(grp_soft_max_fu_750_ap_ready),
    .dense_array_V_address0(grp_soft_max_fu_750_dense_array_V_address0),
    .dense_array_V_ce0(grp_soft_max_fu_750_dense_array_V_ce0),
    .dense_array_V_we0(grp_soft_max_fu_750_dense_array_V_we0),
    .dense_array_V_d0(grp_soft_max_fu_750_dense_array_V_d0),
    .dense_array_V_q0(dense_array_V_q0),
    .prediction_V_address0(grp_soft_max_fu_750_prediction_V_address0),
    .prediction_V_ce0(grp_soft_max_fu_750_prediction_V_ce0),
    .prediction_V_we0(grp_soft_max_fu_750_prediction_V_we0),
    .prediction_V_d0(grp_soft_max_fu_750_prediction_V_d0)
);

max_pool_1 grp_max_pool_1_fu_760(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pool_1_fu_760_ap_start),
    .ap_done(grp_max_pool_1_fu_760_ap_done),
    .ap_idle(grp_max_pool_1_fu_760_ap_idle),
    .ap_ready(grp_max_pool_1_fu_760_ap_ready),
    .conv_out_V_address0(grp_max_pool_1_fu_760_conv_out_V_address0),
    .conv_out_V_ce0(grp_max_pool_1_fu_760_conv_out_V_ce0),
    .conv_out_V_q0(conv_1_out_V_q0),
    .max_pool_out_V_address0(grp_max_pool_1_fu_760_max_pool_out_V_address0),
    .max_pool_out_V_ce0(grp_max_pool_1_fu_760_max_pool_out_V_ce0),
    .max_pool_out_V_we0(grp_max_pool_1_fu_760_max_pool_out_V_we0),
    .max_pool_out_V_d0(grp_max_pool_1_fu_760_max_pool_out_V_d0)
);

max_pool_2 grp_max_pool_2_fu_766(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pool_2_fu_766_ap_start),
    .ap_done(grp_max_pool_2_fu_766_ap_done),
    .ap_idle(grp_max_pool_2_fu_766_ap_idle),
    .ap_ready(grp_max_pool_2_fu_766_ap_ready),
    .conv_out_V_address0(grp_max_pool_2_fu_766_conv_out_V_address0),
    .conv_out_V_ce0(grp_max_pool_2_fu_766_conv_out_V_ce0),
    .conv_out_V_q0(conv_2_out_V_q0),
    .max_pool_out_V_address0(grp_max_pool_2_fu_766_max_pool_out_V_address0),
    .max_pool_out_V_ce0(grp_max_pool_2_fu_766_max_pool_out_V_ce0),
    .max_pool_out_V_we0(grp_max_pool_2_fu_766_max_pool_out_V_we0),
    .max_pool_out_V_d0(grp_max_pool_2_fu_766_max_pool_out_V_d0)
);

flat grp_flat_fu_772(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_flat_fu_772_ap_start),
    .ap_done(grp_flat_fu_772_ap_done),
    .ap_idle(grp_flat_fu_772_ap_idle),
    .ap_ready(grp_flat_fu_772_ap_ready),
    .max_pool_out_V_address0(grp_flat_fu_772_max_pool_out_V_address0),
    .max_pool_out_V_ce0(grp_flat_fu_772_max_pool_out_V_ce0),
    .max_pool_out_V_q0(max_pool_2_out_V_q0),
    .flat_array_V_address0(grp_flat_fu_772_flat_array_V_address0),
    .flat_array_V_ce0(grp_flat_fu_772_flat_array_V_ce0),
    .flat_array_V_we0(grp_flat_fu_772_flat_array_V_we0),
    .flat_array_V_d0(grp_flat_fu_772_flat_array_V_d0)
);

cnn_fpext_32ns_64rcU #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
cnn_fpext_32ns_64rcU_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(cnn_input_Dout_A),
    .ce(1'b1),
    .dout(grp_fu_778_p1)
);

cnn_mac_muladd_7ssc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
cnn_mac_muladd_7ssc4_U30(
    .din0(dense_1_weights_V_q0),
    .din1(flat_array_V_q0),
    .din2(grp_fu_1832_p2),
    .dout(grp_fu_1832_p3)
);

cnn_mac_muladd_7stde #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
cnn_mac_muladd_7stde_U31(
    .din0(dense_2_weights_V_q0),
    .din1(grp_fu_1841_p1),
    .din2(grp_fu_1841_p2),
    .dout(grp_fu_1841_p3)
);

cnn_mac_muladd_11udo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
cnn_mac_muladd_11udo_U32(
    .din0(grp_fu_1850_p0),
    .din1(dense_out_weights_V_q0),
    .din2(grp_fu_1850_p2),
    .dout(grp_fu_1850_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv_1_fu_740_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_conv_1_fu_740_ap_start_reg <= 1'b1;
        end else if ((grp_conv_1_fu_740_ap_ready == 1'b1)) begin
            grp_conv_1_fu_740_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_conv_2_fu_730_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_conv_2_fu_730_ap_start_reg <= 1'b1;
        end else if ((grp_conv_2_fu_730_ap_ready == 1'b1)) begin
            grp_conv_2_fu_730_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_flat_fu_772_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_flat_fu_772_ap_start_reg <= 1'b1;
        end else if ((grp_flat_fu_772_ap_ready == 1'b1)) begin
            grp_flat_fu_772_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_max_pool_1_fu_760_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_max_pool_1_fu_760_ap_start_reg <= 1'b1;
        end else if ((grp_max_pool_1_fu_760_ap_ready == 1'b1)) begin
            grp_max_pool_1_fu_760_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_max_pool_2_fu_766_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_max_pool_2_fu_766_ap_start_reg <= 1'b1;
        end else if ((grp_max_pool_2_fu_766_ap_ready == 1'b1)) begin
            grp_max_pool_2_fu_766_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_soft_max_fu_750_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln41_fu_1411_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
            grp_soft_max_fu_750_ap_start_reg <= 1'b1;
        end else if ((grp_soft_max_fu_750_ap_ready == 1'b1)) begin
            grp_soft_max_fu_750_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_1_fu_1268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        d_0_i_reg_685 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        d_0_i_reg_685 <= d_reg_2033;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        f_0_i_reg_708 <= f_reg_2052;
    end else if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln41_fu_1411_p2 == 1'd0))) begin
        f_0_i_reg_708 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i24_0_reg_719 <= i_3_reg_2080;
    end else if (((grp_soft_max_fu_750_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        i24_0_reg_719 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_0_i5_reg_651 <= i_2_reg_1986;
    end else if (((icmp_ln9_fu_1149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i_0_i5_reg_651 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_0_i_reg_606 <= i_1_reg_1934;
    end else if (((grp_flat_fu_772_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        i_0_i_reg_606 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln25_fu_830_p2 == 1'd1))) begin
        i_0_reg_574 <= i_reg_1882;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_574 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln25_fu_830_p2 == 1'd1))) begin
        ix_in_0_reg_562 <= ix_in_reg_1887;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ix_in_0_reg_562 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ix_in_1_reg_585 <= add_ln28_reg_1915;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_782_p2 == 1'd0))) begin
        ix_in_1_reg_585 <= ix_in_0_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        j_0_i10_reg_674 <= j_2_reg_2005;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln9_1_fu_1268_p2 == 1'd0))) begin
        j_0_i10_reg_674 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_0_i_reg_629 <= j_1_reg_1953;
    end else if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln9_fu_1149_p2 == 1'd0))) begin
        j_0_i_reg_629 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_595 <= j_reg_1900;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_782_p2 == 1'd0))) begin
        j_0_reg_595 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_Val2_24_reg_617 <= {{grp_fu_1832_p3[17:6]}};
    end else if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln9_fu_1149_p2 == 1'd0))) begin
        p_Val2_24_reg_617 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        p_Val2_27_reg_662 <= {{grp_fu_1841_p3[17:6]}};
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln9_1_fu_1268_p2 == 1'd0))) begin
        p_Val2_27_reg_662 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        p_Val2_33_reg_696 <= {{grp_fu_1850_p3[17:6]}};
    end else if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln41_fu_1411_p2 == 1'd0))) begin
        p_Val2_33_reg_696 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        phi_mul_reg_640 <= add_ln1117_3_reg_1958;
    end else if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln9_fu_1149_p2 == 1'd0))) begin
        phi_mul_reg_640 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln13_fu_1169_p2 == 1'd0))) begin
        add_ln1117_3_reg_1958 <= add_ln1117_3_fu_1186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln25_fu_830_p2 == 1'd0))) begin
        add_ln203_8_reg_1905 <= add_ln203_8_fu_846_p2;
        add_ln28_reg_1915 <= add_ln28_fu_856_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cnn_input_load_reg_1920 <= cnn_input_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        d_reg_2033 <= d_fu_1417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        f_reg_2052 <= f_fu_1437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_1_reg_1934 <= i_1_fu_1155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_2_reg_1986 <= i_2_fu_1274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_3_reg_2080 <= i_3_fu_1530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1882 <= i_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        icmp_ln935_reg_2095 <= icmp_ln935_fu_1541_p2;
        icmp_ln958_reg_2121 <= icmp_ln958_fu_1713_p2;
        or_ln_reg_2116[0] <= or_ln_fu_1705_p3[0];
        p_Result_37_reg_2100 <= prediction_V_q0[32'd11];
        sub_ln944_reg_2110 <= sub_ln944_fu_1595_p2;
        tmp_V_12_reg_2105 <= tmp_V_12_fu_1561_p3;
        trunc_ln943_reg_2126 <= trunc_ln943_fu_1719_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_782_p2 == 1'd0))) begin
        ix_in_reg_1887 <= ix_in_fu_794_p2;
        sub_ln203_reg_1892[10 : 2] <= sub_ln203_fu_824_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        j_1_reg_1953 <= j_1_fu_1175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j_2_reg_2005 <= j_2_fu_1294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_1900 <= j_fu_836_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        select_ln603_3_reg_1926 <= select_ln603_3_fu_1137_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln9_1_fu_1268_p2 == 1'd0))) begin
        zext_ln13_3_reg_1997[4 : 0] <= zext_ln13_3_fu_1284_p1[4 : 0];
        zext_ln14_1_reg_1991[4 : 0] <= zext_ln14_1_fu_1280_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln9_fu_1149_p2 == 1'd0))) begin
        zext_ln13_reg_1945[5 : 0] <= zext_ln13_fu_1165_p1[5 : 0];
        zext_ln14_reg_1939[5 : 0] <= zext_ln14_fu_1161_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln41_fu_1411_p2 == 1'd0))) begin
        zext_ln46_reg_2044[3 : 0] <= zext_ln46_fu_1427_p1[3 : 0];
        zext_ln48_reg_2038[3 : 0] <= zext_ln48_fu_1423_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln69_fu_1524_p2 == 1'd0))) begin
        zext_ln70_reg_2085[3 : 0] <= zext_ln70_fu_1536_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_1524_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_1524_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cnn_input_EN_A = 1'b1;
    end else begin
        cnn_input_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_1_input_V_address0 = sext_ln203_fu_1145_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_1_input_V_address0 = grp_conv_1_fu_740_input_V_address0;
    end else begin
        conv_1_input_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_1_input_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_1_input_V_ce0 = grp_conv_1_fu_740_input_V_ce0;
    end else begin
        conv_1_input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_1_input_V_we0 = 1'b1;
    end else begin
        conv_1_input_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_out_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_1_out_V_address0 = grp_max_pool_1_fu_760_conv_out_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_1_out_V_address0 = grp_conv_1_fu_740_conv_out_V_address0;
    end else begin
        conv_1_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_out_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_1_out_V_ce0 = grp_max_pool_1_fu_760_conv_out_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_1_out_V_ce0 = grp_conv_1_fu_740_conv_out_V_ce0;
    end else begin
        conv_1_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_out_V_d0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_1_out_V_d0 = grp_conv_1_fu_740_conv_out_V_d0;
    end else begin
        conv_1_out_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_782_p2 == 1'd1))) begin
        conv_1_out_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_1_out_V_we0 = grp_conv_1_fu_740_conv_out_V_we0;
    end else begin
        conv_1_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_2_out_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_2_out_V_address0 = grp_max_pool_2_fu_766_conv_out_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_2_out_V_address0 = grp_conv_2_fu_730_conv_out_V_address0;
    end else begin
        conv_2_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_2_out_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_2_out_V_ce0 = grp_max_pool_2_fu_766_conv_out_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_2_out_V_ce0 = grp_conv_2_fu_730_conv_out_V_ce0;
    end else begin
        conv_2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_2_out_V_d0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_2_out_V_d0 = grp_conv_2_fu_730_conv_out_V_d0;
    end else begin
        conv_2_out_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_782_p2 == 1'd1))) begin
        conv_2_out_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_2_out_V_we0 = grp_conv_2_fu_730_conv_out_V_we0;
    end else begin
        conv_2_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        dense_1_bias_V_ce0 = 1'b1;
    end else begin
        dense_1_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        dense_1_out_V_address0 = zext_ln14_3_fu_1300_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        dense_1_out_V_address0 = zext_ln14_reg_1939;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        dense_1_out_V_address0 = 64'd0;
    end else begin
        dense_1_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22) | ((grp_flat_fu_772_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        dense_1_out_V_ce0 = 1'b1;
    end else begin
        dense_1_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        dense_1_out_V_d0 = select_ln19_fu_1259_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        dense_1_out_V_d0 = 11'd0;
    end else begin
        dense_1_out_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((grp_flat_fu_772_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        dense_1_out_V_we0 = 1'b1;
    end else begin
        dense_1_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        dense_1_weights_V_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        dense_2_bias_V_ce0 = 1'b1;
    end else begin
        dense_2_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        dense_2_out_V_address0 = zext_ln48_1_fu_1443_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        dense_2_out_V_address0 = zext_ln14_1_reg_1991;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dense_2_out_V_address0 = 64'd0;
    end else begin
        dense_2_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state17))) begin
        dense_2_out_V_ce0 = 1'b1;
    end else begin
        dense_2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        dense_2_out_V_d0 = select_ln19_1_fu_1402_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dense_2_out_V_d0 = 11'd0;
    end else begin
        dense_2_out_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((icmp_ln9_fu_1149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        dense_2_out_V_we0 = 1'b1;
    end else begin
        dense_2_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        dense_2_weights_V_ce0 = 1'b1;
    end else begin
        dense_2_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        dense_array_V_address0 = zext_ln48_reg_2038;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        dense_array_V_address0 = grp_soft_max_fu_750_dense_array_V_address0;
    end else begin
        dense_array_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        dense_array_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        dense_array_V_ce0 = grp_soft_max_fu_750_dense_array_V_ce0;
    end else begin
        dense_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        dense_array_V_d0 = add_ln703_2_fu_1517_p2;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        dense_array_V_d0 = grp_soft_max_fu_750_dense_array_V_d0;
    end else begin
        dense_array_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        dense_array_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        dense_array_V_we0 = grp_soft_max_fu_750_dense_array_V_we0;
    end else begin
        dense_array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        dense_out_bias_V_ce0 = 1'b1;
    end else begin
        dense_out_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        dense_out_weights_V_ce0 = 1'b1;
    end else begin
        dense_out_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        flat_array_V_address0 = zext_ln14_2_fu_1181_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        flat_array_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_V_address0 = grp_flat_fu_772_flat_array_V_address0;
    end else begin
        flat_array_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((grp_max_pool_2_fu_766_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        flat_array_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_V_ce0 = grp_flat_fu_772_flat_array_V_ce0;
    end else begin
        flat_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        flat_array_V_d0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_V_d0 = grp_flat_fu_772_flat_array_V_d0;
    end else begin
        flat_array_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((grp_max_pool_2_fu_766_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        flat_array_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_V_we0 = grp_flat_fu_772_flat_array_V_we0;
    end else begin
        flat_array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_pool_1_out_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        max_pool_1_out_V_address0 = grp_max_pool_1_fu_760_max_pool_out_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        max_pool_1_out_V_address0 = grp_conv_2_fu_730_input_V_address0;
    end else begin
        max_pool_1_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_pool_1_out_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        max_pool_1_out_V_ce0 = grp_max_pool_1_fu_760_max_pool_out_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        max_pool_1_out_V_ce0 = grp_conv_2_fu_730_input_V_ce0;
    end else begin
        max_pool_1_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_pool_1_out_V_d0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        max_pool_1_out_V_d0 = grp_max_pool_1_fu_760_max_pool_out_V_d0;
    end else begin
        max_pool_1_out_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_782_p2 == 1'd1))) begin
        max_pool_1_out_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        max_pool_1_out_V_we0 = grp_max_pool_1_fu_760_max_pool_out_V_we0;
    end else begin
        max_pool_1_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_pool_2_out_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        max_pool_2_out_V_address0 = grp_flat_fu_772_max_pool_out_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        max_pool_2_out_V_address0 = grp_max_pool_2_fu_766_max_pool_out_V_address0;
    end else begin
        max_pool_2_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_pool_2_out_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        max_pool_2_out_V_ce0 = grp_flat_fu_772_max_pool_out_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        max_pool_2_out_V_ce0 = grp_max_pool_2_fu_766_max_pool_out_V_ce0;
    end else begin
        max_pool_2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_pool_2_out_V_d0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        max_pool_2_out_V_d0 = grp_max_pool_2_fu_766_max_pool_out_V_d0;
    end else begin
        max_pool_2_out_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_782_p2 == 1'd1))) begin
        max_pool_2_out_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        max_pool_2_out_V_we0 = grp_max_pool_2_fu_766_max_pool_out_V_we0;
    end else begin
        max_pool_2_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        prediction_V_address0 = zext_ln70_fu_1536_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        prediction_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        prediction_V_address0 = grp_soft_max_fu_750_prediction_V_address0;
    end else begin
        prediction_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state21))) begin
        prediction_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        prediction_V_ce0 = grp_soft_max_fu_750_prediction_V_ce0;
    end else begin
        prediction_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        prediction_V_d0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        prediction_V_d0 = grp_soft_max_fu_750_prediction_V_d0;
    end else begin
        prediction_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln9_1_fu_1268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        prediction_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        prediction_V_we0 = grp_soft_max_fu_750_prediction_V_we0;
    end else begin
        prediction_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        prediction_output_EN_A = 1'b1;
    end else begin
        prediction_output_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        prediction_output_WEN_A = 4'd15;
    end else begin
        prediction_output_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_782_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln25_fu_830_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_conv_1_fu_740_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_max_pool_1_fu_760_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_conv_2_fu_730_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_max_pool_2_fu_766_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_flat_fu_772_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln9_fu_1149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln13_fu_1169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln9_1_fu_1268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln13_1_fu_1288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln41_fu_1411_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln46_fu_1431_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_soft_max_fu_750_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln69_fu_1524_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_928_p2 = (12'd1075 - zext_ln461_fu_888_p1);

assign a_fu_1659_p2 = (icmp_ln947_fu_1621_p2 & icmp_ln947_1_fu_1653_p2);

assign add_ln1116_4_fu_1478_p2 = (add_ln1116_fu_1472_p2 + zext_ln46_reg_2044);

assign add_ln1116_fu_1472_p2 = (zext_ln1116_8_fu_1468_p1 + zext_ln1116_fu_1456_p1);

assign add_ln1117_2_fu_1335_p2 = (sub_ln1117_fu_1329_p2 + zext_ln13_3_reg_1997);

assign add_ln1117_3_fu_1186_p2 = (phi_mul_reg_640 + 15'd50);

assign add_ln1117_fu_1192_p2 = (phi_mul_reg_640 + zext_ln13_reg_1945);

assign add_ln203_1_fu_1388_p2 = ($signed(sext_ln703_2_fu_1378_p1) + $signed(trunc_ln703_1_fu_1374_p1));

assign add_ln203_8_fu_846_p2 = (sub_ln203_reg_1892 + zext_ln203_18_fu_842_p1);

assign add_ln203_fu_1245_p2 = ($signed(sext_ln703_fu_1235_p1) + $signed(trunc_ln703_fu_1231_p1));

assign add_ln28_fu_856_p2 = (10'd1 + ix_in_1_reg_585);

assign add_ln581_fu_940_p2 = ($signed(12'd4090) + $signed(F2_fu_928_p2));

assign add_ln703_1_fu_1382_p2 = ($signed(p_Val2_27_reg_662) + $signed(sext_ln1265_1_fu_1370_p1));

assign add_ln703_2_fu_1517_p2 = ($signed(sext_ln1265_2_fu_1513_p1) + $signed(p_Val2_33_reg_696));

assign add_ln703_fu_1239_p2 = ($signed(p_Val2_24_reg_617) + $signed(sext_ln1265_fu_1227_p1));

assign add_ln949_fu_1679_p2 = ($signed(12'd4072) + $signed(trunc_ln944_fu_1601_p1));

assign add_ln958_fu_1726_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_reg_2110));

assign add_ln964_fu_1795_p2 = (select_ln964_fu_1782_p3 + sub_ln964_fu_1790_p2);

assign and_ln581_fu_1053_p2 = (xor_ln582_fu_1047_p2 & icmp_ln581_fu_934_p2);

assign and_ln582_fu_1035_p2 = (xor_ln571_fu_1029_p2 & icmp_ln582_fu_964_p2);

assign and_ln585_1_fu_1071_p2 = (icmp_ln585_fu_974_p2 & and_ln581_fu_1053_p2);

assign and_ln585_fu_1065_p2 = (xor_ln585_fu_1059_p2 & and_ln581_fu_1053_p2);

assign and_ln603_fu_1089_p2 = (xor_ln581_fu_1083_p2 & icmp_ln603_fu_980_p2);

assign and_ln949_fu_1693_p2 = (xor_ln949_fu_1673_p2 & p_Result_33_fu_1685_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ashr_ln586_fu_990_p2 = $signed(man_V_2_fu_914_p3) >>> zext_ln586_fu_986_p1;

assign bitcast_ln696_fu_1000_p1 = cnn_input_load_reg_1920;

assign bitcast_ln739_fu_1820_p1 = p_Result_39_fu_1808_p5;

assign cnn_input_Addr_A = cnn_input_Addr_A_orig << 32'd2;

assign cnn_input_Addr_A_orig = zext_ln27_fu_851_p1;

assign cnn_input_Clk_A = ap_clk;

assign cnn_input_Din_A = 32'd0;

assign cnn_input_Rst_A = ap_rst_n_inv;

assign cnn_input_WEN_A = 4'd0;

assign d_fu_1417_p2 = (d_0_i_reg_685 + 4'd1);

assign dense_1_bias_V_address0 = zext_ln14_reg_1939;

assign dense_1_weights_V_address0 = zext_ln1117_fu_1197_p1;

assign dense_2_bias_V_address0 = zext_ln14_1_reg_1991;

assign dense_2_weights_V_address0 = sext_ln1117_fu_1340_p1;

assign dense_out_bias_V_address0 = zext_ln48_reg_2038;

assign dense_out_weights_V_address0 = zext_ln1116_9_fu_1483_p1;

assign exp_tmp_V_fu_878_p4 = {{ireg_V_fu_862_p1[62:52]}};

assign f_fu_1437_p2 = (f_0_i_reg_708 + 5'd1);

assign grp_conv_1_fu_740_ap_start = grp_conv_1_fu_740_ap_start_reg;

assign grp_conv_2_fu_730_ap_start = grp_conv_2_fu_730_ap_start_reg;

assign grp_flat_fu_772_ap_start = grp_flat_fu_772_ap_start_reg;

assign grp_fu_1832_p2 = {{p_Val2_24_reg_617}, {6'd0}};

assign grp_fu_1841_p1 = grp_fu_1841_p10;

assign grp_fu_1841_p10 = dense_1_out_V_q0;

assign grp_fu_1841_p2 = {{p_Val2_27_reg_662}, {6'd0}};

assign grp_fu_1850_p0 = grp_fu_1850_p00;

assign grp_fu_1850_p00 = dense_2_out_V_q0;

assign grp_fu_1850_p2 = {{p_Val2_33_reg_696}, {6'd0}};

assign grp_max_pool_1_fu_760_ap_start = grp_max_pool_1_fu_760_ap_start_reg;

assign grp_max_pool_2_fu_766_ap_start = grp_max_pool_2_fu_766_ap_start_reg;

assign grp_soft_max_fu_750_ap_start = grp_soft_max_fu_750_ap_start_reg;

assign i_1_fu_1155_p2 = (i_0_i_reg_606 + 6'd1);

assign i_2_fu_1274_p2 = (i_0_i5_reg_651 + 5'd1);

assign i_3_fu_1530_p2 = (i24_0_reg_719 + 4'd1);

assign i_fu_788_p2 = (i_0_reg_574 + 5'd1);

assign icmp_ln13_1_fu_1288_p2 = ((j_0_i10_reg_674 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_1169_p2 = ((j_0_i_reg_629 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_782_p2 = ((i_0_reg_574 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_830_p2 = ((j_0_reg_595 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_1411_p2 = ((d_0_i_reg_685 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_1431_p2 = ((f_0_i_reg_708 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_922_p2 = ((trunc_ln556_fu_866_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_934_p2 = (($signed(F2_fu_928_p2) > $signed(12'd6)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_964_p2 = ((F2_fu_928_p2 == 12'd6) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_974_p2 = ((sh_amt_fu_952_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_980_p2 = ((sh_amt_fu_952_p3 < 12'd12) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_1524_p2 = ((i24_0_reg_719 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_1541_p2 = ((prediction_V_q0 == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_1653_p2 = ((p_Result_32_fu_1647_p2 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_1621_p2 = (($signed(tmp_25_fu_1611_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_1713_p2 = (($signed(lsb_index_fu_1605_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln9_1_fu_1268_p2 = ((i_0_i5_reg_651 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_1149_p2 = ((i_0_i_reg_606 == 6'd50) ? 1'b1 : 1'b0);

assign ireg_V_fu_862_p1 = grp_fu_778_p1;

assign ix_in_fu_794_p2 = (ix_in_0_reg_562 + 10'd28);

assign j_1_fu_1175_p2 = (j_0_i_reg_629 + 9'd1);

assign j_2_fu_1294_p2 = (j_0_i10_reg_674 + 6'd1);

assign j_fu_836_p2 = (j_0_reg_595 + 5'd1);


always @ (p_Result_38_fu_1579_p3) begin
    if (p_Result_38_fu_1579_p3[0] == 1'b1) begin
        l_fu_1587_p3 = 32'd0;
    end else if (p_Result_38_fu_1579_p3[1] == 1'b1) begin
        l_fu_1587_p3 = 32'd1;
    end else if (p_Result_38_fu_1579_p3[2] == 1'b1) begin
        l_fu_1587_p3 = 32'd2;
    end else if (p_Result_38_fu_1579_p3[3] == 1'b1) begin
        l_fu_1587_p3 = 32'd3;
    end else if (p_Result_38_fu_1579_p3[4] == 1'b1) begin
        l_fu_1587_p3 = 32'd4;
    end else if (p_Result_38_fu_1579_p3[5] == 1'b1) begin
        l_fu_1587_p3 = 32'd5;
    end else if (p_Result_38_fu_1579_p3[6] == 1'b1) begin
        l_fu_1587_p3 = 32'd6;
    end else if (p_Result_38_fu_1579_p3[7] == 1'b1) begin
        l_fu_1587_p3 = 32'd7;
    end else if (p_Result_38_fu_1579_p3[8] == 1'b1) begin
        l_fu_1587_p3 = 32'd8;
    end else if (p_Result_38_fu_1579_p3[9] == 1'b1) begin
        l_fu_1587_p3 = 32'd9;
    end else if (p_Result_38_fu_1579_p3[10] == 1'b1) begin
        l_fu_1587_p3 = 32'd10;
    end else if (p_Result_38_fu_1579_p3[11] == 1'b1) begin
        l_fu_1587_p3 = 32'd11;
    end else if (p_Result_38_fu_1579_p3[12] == 1'b1) begin
        l_fu_1587_p3 = 32'd12;
    end else if (p_Result_38_fu_1579_p3[13] == 1'b1) begin
        l_fu_1587_p3 = 32'd13;
    end else if (p_Result_38_fu_1579_p3[14] == 1'b1) begin
        l_fu_1587_p3 = 32'd14;
    end else if (p_Result_38_fu_1579_p3[15] == 1'b1) begin
        l_fu_1587_p3 = 32'd15;
    end else if (p_Result_38_fu_1579_p3[16] == 1'b1) begin
        l_fu_1587_p3 = 32'd16;
    end else if (p_Result_38_fu_1579_p3[17] == 1'b1) begin
        l_fu_1587_p3 = 32'd17;
    end else if (p_Result_38_fu_1579_p3[18] == 1'b1) begin
        l_fu_1587_p3 = 32'd18;
    end else if (p_Result_38_fu_1579_p3[19] == 1'b1) begin
        l_fu_1587_p3 = 32'd19;
    end else if (p_Result_38_fu_1579_p3[20] == 1'b1) begin
        l_fu_1587_p3 = 32'd20;
    end else if (p_Result_38_fu_1579_p3[21] == 1'b1) begin
        l_fu_1587_p3 = 32'd21;
    end else if (p_Result_38_fu_1579_p3[22] == 1'b1) begin
        l_fu_1587_p3 = 32'd22;
    end else if (p_Result_38_fu_1579_p3[23] == 1'b1) begin
        l_fu_1587_p3 = 32'd23;
    end else if (p_Result_38_fu_1579_p3[24] == 1'b1) begin
        l_fu_1587_p3 = 32'd24;
    end else if (p_Result_38_fu_1579_p3[25] == 1'b1) begin
        l_fu_1587_p3 = 32'd25;
    end else if (p_Result_38_fu_1579_p3[26] == 1'b1) begin
        l_fu_1587_p3 = 32'd26;
    end else if (p_Result_38_fu_1579_p3[27] == 1'b1) begin
        l_fu_1587_p3 = 32'd27;
    end else if (p_Result_38_fu_1579_p3[28] == 1'b1) begin
        l_fu_1587_p3 = 32'd28;
    end else if (p_Result_38_fu_1579_p3[29] == 1'b1) begin
        l_fu_1587_p3 = 32'd29;
    end else if (p_Result_38_fu_1579_p3[30] == 1'b1) begin
        l_fu_1587_p3 = 32'd30;
    end else if (p_Result_38_fu_1579_p3[31] == 1'b1) begin
        l_fu_1587_p3 = 32'd31;
    end else begin
        l_fu_1587_p3 = 32'd32;
    end
end

assign lsb_index_fu_1605_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_fu_1595_p2));

assign lshr_ln947_fu_1641_p2 = 12'd4095 >> zext_ln947_fu_1637_p1;

assign lshr_ln958_fu_1731_p2 = m_fu_1723_p1 >> add_ln958_fu_1726_p2;

assign m_12_fu_1748_p3 = ((icmp_ln958_reg_2121[0:0] === 1'b1) ? lshr_ln958_fu_1731_p2 : shl_ln958_fu_1742_p2);

assign m_13_fu_1755_p2 = (m_12_fu_1748_p3 + or_ln_reg_2116);

assign m_16_fu_1770_p1 = m_s_fu_1760_p4;

assign m_fu_1723_p1 = tmp_V_12_reg_2105;

assign m_s_fu_1760_p4 = {{m_13_fu_1755_p2[31:1]}};

assign man_V_1_fu_908_p2 = (54'd0 - p_Result_36_fu_904_p1);

assign man_V_2_fu_914_p3 = ((p_Result_35_fu_870_p3[0:0] === 1'b1) ? man_V_1_fu_908_p2 : p_Result_36_fu_904_p1);

assign or_ln581_fu_1077_p2 = (or_ln582_fu_1041_p2 | icmp_ln581_fu_934_p2);

assign or_ln582_fu_1041_p2 = (icmp_ln582_fu_964_p2 | icmp_ln571_fu_922_p2);

assign or_ln603_1_fu_1117_p2 = (and_ln585_fu_1065_p2 | and_ln582_fu_1035_p2);

assign or_ln603_2_fu_1131_p2 = (or_ln603_fu_1103_p2 | or_ln603_1_fu_1117_p2);

assign or_ln603_fu_1103_p2 = (and_ln603_fu_1089_p2 | and_ln585_1_fu_1071_p2);

assign or_ln949_fu_1699_p2 = (and_ln949_fu_1693_p2 | a_fu_1659_p2);

assign or_ln_fu_1705_p3 = {{31'd0}, {or_ln949_fu_1699_p2}};

assign p_Result_32_fu_1647_p2 = (tmp_V_12_fu_1561_p3 & lshr_ln947_fu_1641_p2);

assign p_Result_33_fu_1685_p3 = tmp_V_12_fu_1561_p3[add_ln949_fu_1679_p2];

assign p_Result_35_fu_870_p3 = ireg_V_fu_862_p1[32'd63];

assign p_Result_36_fu_904_p1 = tmp_fu_896_p3;

assign p_Result_37_fu_1547_p3 = prediction_V_q0[32'd11];

assign p_Result_38_fu_1579_p3 = {{20'd1048575}, {p_Result_s_fu_1569_p4}};

assign p_Result_39_fu_1808_p5 = {{tmp_8_fu_1801_p3}, {m_16_fu_1770_p1[22:0]}};

integer ap_tvar_int_0;

always @ (tmp_V_12_fu_1561_p3) begin
    for (ap_tvar_int_0 = 12 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 11 - 0) begin
            p_Result_s_fu_1569_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_1569_p4[ap_tvar_int_0] = tmp_V_12_fu_1561_p3[11 - ap_tvar_int_0];
        end
    end
end

assign prediction_output_Addr_A = prediction_output_Addr_A_orig << 32'd2;

assign prediction_output_Addr_A_orig = zext_ln70_reg_2085;

assign prediction_output_Clk_A = ap_clk;

assign prediction_output_Din_A = ((icmp_ln935_reg_2095[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_1820_p1);

assign prediction_output_Rst_A = ap_rst_n_inv;

assign select_ln19_1_fu_1402_p3 = ((tmp_23_fu_1394_p3[0:0] === 1'b1) ? 11'd0 : add_ln203_1_fu_1388_p2);

assign select_ln19_fu_1259_p3 = ((tmp_22_fu_1251_p3[0:0] === 1'b1) ? 11'd0 : add_ln203_fu_1245_p2);

assign select_ln588_fu_1011_p3 = ((tmp_21_fu_1003_p3[0:0] === 1'b1) ? 12'd4095 : 12'd0);

assign select_ln603_1_fu_1109_p3 = ((and_ln585_fu_1065_p2[0:0] === 1'b1) ? select_ln588_fu_1011_p3 : trunc_ln583_fu_970_p1);

assign select_ln603_2_fu_1123_p3 = ((or_ln603_fu_1103_p2[0:0] === 1'b1) ? select_ln603_fu_1095_p3 : select_ln603_1_fu_1109_p3);

assign select_ln603_3_fu_1137_p3 = ((or_ln603_2_fu_1131_p2[0:0] === 1'b1) ? select_ln603_2_fu_1123_p3 : 12'd0);

assign select_ln603_fu_1095_p3 = ((and_ln603_fu_1089_p2[0:0] === 1'b1) ? shl_ln604_fu_1023_p2 : trunc_ln586_fu_996_p1);

assign select_ln964_fu_1782_p3 = ((tmp_27_fu_1774_p3[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign sext_ln1117_fu_1340_p1 = $signed(add_ln1117_2_fu_1335_p2);

assign sext_ln1265_1_fu_1370_p0 = dense_2_bias_V_q0;

assign sext_ln1265_1_fu_1370_p1 = sext_ln1265_1_fu_1370_p0;

assign sext_ln1265_2_fu_1513_p1 = $signed(dense_out_bias_V_q0);

assign sext_ln1265_fu_1227_p0 = dense_1_bias_V_q0;

assign sext_ln1265_fu_1227_p1 = sext_ln1265_fu_1227_p0;

assign sext_ln203_fu_1145_p1 = $signed(add_ln203_8_reg_1905);

assign sext_ln581_fu_960_p1 = sh_amt_fu_952_p3;

assign sext_ln581cast_fu_1019_p1 = sext_ln581_fu_960_p1[11:0];

assign sext_ln703_2_fu_1378_p0 = dense_2_bias_V_q0;

assign sext_ln703_2_fu_1378_p1 = sext_ln703_2_fu_1378_p0;

assign sext_ln703_fu_1235_p0 = dense_1_bias_V_q0;

assign sext_ln703_fu_1235_p1 = sext_ln703_fu_1235_p0;

assign sh_amt_fu_952_p3 = ((icmp_ln581_fu_934_p2[0:0] === 1'b1) ? add_ln581_fu_940_p2 : sub_ln581_fu_946_p2);

assign shl_ln604_fu_1023_p2 = trunc_ln583_fu_970_p1 << sext_ln581cast_fu_1019_p1;

assign shl_ln958_fu_1742_p2 = m_fu_1723_p1 << sub_ln958_fu_1737_p2;

assign sub_ln1117_fu_1329_p2 = (zext_ln1117_6_fu_1313_p1 - zext_ln1117_7_fu_1325_p1);

assign sub_ln203_fu_824_p2 = (zext_ln203_fu_808_p1 - zext_ln203_17_fu_820_p1);

assign sub_ln581_fu_946_p2 = (12'd6 - F2_fu_928_p2);

assign sub_ln944_fu_1595_p2 = (32'd12 - l_fu_1587_p3);

assign sub_ln947_fu_1631_p2 = (4'd5 - trunc_ln947_fu_1627_p1);

assign sub_ln958_fu_1737_p2 = (32'd25 - sub_ln944_reg_2110);

assign sub_ln964_fu_1790_p2 = (8'd6 - trunc_ln943_reg_2126);

assign tmp_10_fu_812_p3 = {{i_0_reg_574}, {2'd0}};

assign tmp_11_fu_1305_p3 = {{j_0_i10_reg_674}, {5'd0}};

assign tmp_12_fu_1317_p3 = {{j_0_i10_reg_674}, {1'd0}};

assign tmp_13_fu_1448_p3 = {{f_0_i_reg_708}, {3'd0}};

assign tmp_14_fu_1460_p3 = {{f_0_i_reg_708}, {1'd0}};

assign tmp_21_fu_1003_p3 = bitcast_ln696_fu_1000_p1[32'd31];

assign tmp_22_fu_1251_p3 = add_ln703_fu_1239_p2[32'd11];

assign tmp_23_fu_1394_p3 = add_ln703_1_fu_1382_p2[32'd11];

assign tmp_25_fu_1611_p4 = {{lsb_index_fu_1605_p2[31:1]}};

assign tmp_26_fu_1665_p3 = lsb_index_fu_1605_p2[32'd31];

assign tmp_27_fu_1774_p3 = m_13_fu_1755_p2[32'd25];

assign tmp_8_fu_1801_p3 = {{p_Result_37_reg_2100}, {add_ln964_fu_1795_p2}};

assign tmp_V_12_fu_1561_p3 = ((p_Result_37_fu_1547_p3[0:0] === 1'b1) ? tmp_V_fu_1555_p2 : prediction_V_q0);

assign tmp_V_fu_1555_p2 = (12'd0 - prediction_V_q0);

assign tmp_fu_896_p3 = {{1'd1}, {trunc_ln565_fu_892_p1}};

assign tmp_s_fu_800_p3 = {{i_0_reg_574}, {5'd0}};

assign trunc_ln556_fu_866_p1 = ireg_V_fu_862_p1[62:0];

assign trunc_ln565_fu_892_p1 = ireg_V_fu_862_p1[51:0];

assign trunc_ln583_fu_970_p1 = man_V_2_fu_914_p3[11:0];

assign trunc_ln586_fu_996_p1 = ashr_ln586_fu_990_p2[11:0];

assign trunc_ln703_1_fu_1374_p1 = p_Val2_27_reg_662[10:0];

assign trunc_ln703_fu_1231_p1 = p_Val2_24_reg_617[10:0];

assign trunc_ln943_fu_1719_p1 = l_fu_1587_p3[7:0];

assign trunc_ln944_fu_1601_p1 = sub_ln944_fu_1595_p2[11:0];

assign trunc_ln947_fu_1627_p1 = sub_ln944_fu_1595_p2[3:0];

assign xor_ln571_fu_1029_p2 = (icmp_ln571_fu_922_p2 ^ 1'd1);

assign xor_ln581_fu_1083_p2 = (or_ln581_fu_1077_p2 ^ 1'd1);

assign xor_ln582_fu_1047_p2 = (or_ln582_fu_1041_p2 ^ 1'd1);

assign xor_ln585_fu_1059_p2 = (icmp_ln585_fu_974_p2 ^ 1'd1);

assign xor_ln949_fu_1673_p2 = (tmp_26_fu_1665_p3 ^ 1'd1);

assign zext_ln1116_8_fu_1468_p1 = tmp_14_fu_1460_p3;

assign zext_ln1116_9_fu_1483_p1 = add_ln1116_4_fu_1478_p2;

assign zext_ln1116_fu_1456_p1 = tmp_13_fu_1448_p3;

assign zext_ln1117_6_fu_1313_p1 = tmp_11_fu_1305_p3;

assign zext_ln1117_7_fu_1325_p1 = tmp_12_fu_1317_p3;

assign zext_ln1117_fu_1197_p1 = add_ln1117_fu_1192_p2;

assign zext_ln13_3_fu_1284_p1 = i_0_i5_reg_651;

assign zext_ln13_fu_1165_p1 = i_0_i_reg_606;

assign zext_ln14_1_fu_1280_p1 = i_0_i5_reg_651;

assign zext_ln14_2_fu_1181_p1 = j_0_i_reg_629;

assign zext_ln14_3_fu_1300_p1 = j_0_i10_reg_674;

assign zext_ln14_fu_1161_p1 = i_0_i_reg_606;

assign zext_ln203_17_fu_820_p1 = tmp_10_fu_812_p3;

assign zext_ln203_18_fu_842_p1 = j_0_reg_595;

assign zext_ln203_fu_808_p1 = tmp_s_fu_800_p3;

assign zext_ln27_fu_851_p1 = ix_in_1_reg_585;

assign zext_ln461_fu_888_p1 = exp_tmp_V_fu_878_p4;

assign zext_ln46_fu_1427_p1 = d_0_i_reg_685;

assign zext_ln48_1_fu_1443_p1 = f_0_i_reg_708;

assign zext_ln48_fu_1423_p1 = d_0_i_reg_685;

assign zext_ln586_fu_986_p1 = $unsigned(sext_ln581_fu_960_p1);

assign zext_ln70_fu_1536_p1 = i24_0_reg_719;

assign zext_ln947_fu_1637_p1 = sub_ln947_fu_1631_p2;

always @ (posedge ap_clk) begin
    sub_ln203_reg_1892[1:0] <= 2'b00;
    zext_ln14_reg_1939[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_1945[14:6] <= 9'b000000000;
    zext_ln14_1_reg_1991[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln13_3_reg_1997[11:5] <= 7'b0000000;
    zext_ln48_reg_2038[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln46_reg_2044[8:4] <= 5'b00000;
    zext_ln70_reg_2085[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    or_ln_reg_2116[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //cnn
