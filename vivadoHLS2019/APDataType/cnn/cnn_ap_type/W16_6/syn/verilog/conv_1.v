// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        conv_out_V_address0,
        conv_out_V_ce0,
        conv_out_V_we0,
        conv_out_V_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_V_address0;
output   input_V_ce0;
input  [15:0] input_V_q0;
output  [11:0] conv_out_V_address0;
output   conv_out_V_ce0;
output   conv_out_V_we0;
output  [15:0] conv_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg conv_out_V_ce0;
reg conv_out_V_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] conv_1_weights_V_address0;
reg    conv_1_weights_V_ce0;
wire  signed [10:0] conv_1_weights_V_q0;
wire   [2:0] conv_1_bias_V_address0;
reg    conv_1_bias_V_ce0;
wire   [8:0] conv_1_bias_V_q0;
wire   [9:0] add_ln8_fu_310_p2;
reg   [9:0] add_ln8_reg_953;
wire    ap_CS_fsm_state2;
wire   [4:0] r_fu_322_p2;
reg   [4:0] r_reg_961;
wire   [4:0] c_fu_334_p2;
reg   [4:0] c_reg_969;
wire    ap_CS_fsm_state3;
wire   [12:0] sub_ln203_fu_370_p2;
reg   [12:0] sub_ln203_reg_974;
wire   [0:0] icmp_ln11_fu_328_p2;
wire   [2:0] f_fu_382_p2;
reg   [2:0] f_reg_982;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln23_fu_388_p1;
reg   [63:0] zext_ln23_reg_987;
wire   [0:0] icmp_ln14_fu_376_p2;
wire   [6:0] zext_ln203_14_fu_392_p1;
reg   [6:0] zext_ln203_14_reg_992;
reg   [11:0] conv_out_V_addr_reg_997;
wire   [1:0] wr_fu_420_p2;
reg   [1:0] wr_reg_1005;
wire    ap_CS_fsm_state5;
wire  signed [5:0] sext_ln1116_fu_444_p1;
reg  signed [5:0] sext_ln1116_reg_1010;
wire   [0:0] icmp_ln18_fu_414_p2;
wire   [10:0] sub_ln1117_fu_478_p2;
reg   [10:0] sub_ln1117_reg_1015;
wire   [1:0] wc_fu_494_p2;
reg   [1:0] wc_reg_1028;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln21_fu_488_p2;
wire    ap_CS_fsm_state7;
wire   [15:0] tmp_V_8_fu_612_p2;
reg   [15:0] tmp_V_8_reg_1048;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln885_fu_618_p2;
reg   [0:0] icmp_ln885_reg_1056;
wire   [0:0] p_Result_32_fu_624_p3;
reg   [0:0] p_Result_32_reg_1060;
wire    ap_CS_fsm_state9;
wire   [15:0] tmp_V_9_fu_636_p3;
reg   [15:0] tmp_V_9_reg_1065;
wire   [31:0] sub_ln894_fu_669_p2;
reg   [31:0] sub_ln894_reg_1071;
wire   [31:0] or_ln_fu_779_p3;
reg   [31:0] or_ln_reg_1077;
wire   [0:0] icmp_ln908_fu_787_p2;
reg   [0:0] icmp_ln908_reg_1082;
wire   [10:0] trunc_ln893_fu_793_p1;
reg   [10:0] trunc_ln893_reg_1087;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln924_fu_924_p2;
reg   [0:0] icmp_ln924_reg_1097;
wire   [0:0] icmp_ln924_2_fu_930_p2;
reg   [0:0] icmp_ln924_2_reg_1102;
reg   [4:0] r_0_reg_201;
reg   [9:0] phi_mul_reg_213;
reg   [4:0] c_0_reg_225;
wire   [0:0] icmp_ln8_fu_316_p2;
reg   [2:0] f_0_reg_237;
wire    ap_CS_fsm_state11;
reg   [15:0] p_Val2_s_reg_248;
reg   [1:0] wr_0_reg_260;
reg   [15:0] p_Val2_26_reg_271;
reg   [1:0] wc_0_reg_283;
reg   [15:0] ap_phi_mux_storemerge_phi_fu_297_p4;
wire   [0:0] and_ln924_fu_940_p2;
wire   [63:0] zext_ln203_16_fu_405_p1;
wire   [63:0] zext_ln1116_7_fu_540_p1;
wire  signed [63:0] sext_ln1117_fu_560_p1;
wire   [63:0] grp_fu_305_p0;
wire   [9:0] zext_ln203_fu_340_p1;
wire   [9:0] add_ln203_fu_344_p2;
wire   [10:0] tmp_14_fu_358_p3;
wire   [12:0] p_shl_cast_fu_350_p3;
wire   [12:0] zext_ln203_13_fu_366_p1;
wire   [12:0] zext_ln203_15_fu_396_p1;
wire   [12:0] add_ln203_7_fu_400_p2;
wire   [3:0] tmp_7_fu_426_p3;
wire   [4:0] zext_ln1116_fu_434_p1;
wire   [4:0] zext_ln18_fu_410_p1;
wire   [4:0] sub_ln1116_fu_438_p2;
wire   [4:0] add_ln23_fu_448_p2;
wire   [9:0] tmp_9_fu_454_p3;
wire   [6:0] tmp_10_fu_466_p3;
wire   [10:0] zext_ln1117_fu_462_p1;
wire   [10:0] zext_ln1117_4_fu_474_p1;
wire   [5:0] zext_ln1116_6_fu_500_p1;
wire   [5:0] add_ln1116_fu_504_p2;
wire   [3:0] trunc_ln1116_fu_509_p1;
wire   [6:0] p_shl5_cast_fu_513_p3;
wire   [6:0] p_shl6_cast_fu_521_p3;
wire   [6:0] sub_ln1116_2_fu_529_p2;
wire   [6:0] add_ln1116_3_fu_535_p2;
wire   [4:0] zext_ln21_fu_484_p1;
wire   [4:0] add_ln23_1_fu_545_p2;
wire   [10:0] zext_ln1117_5_fu_551_p1;
wire   [10:0] add_ln1117_fu_555_p2;
wire  signed [27:0] r_V_fu_946_p2;
wire   [25:0] lhs_V_fu_576_p3;
wire  signed [31:0] sext_ln1118_2_fu_573_p1;
wire   [32:0] zext_ln703_fu_588_p1;
wire   [32:0] zext_ln728_fu_584_p1;
wire   [32:0] ret_V_fu_592_p2;
wire  signed [15:0] sext_ln1265_fu_608_p1;
wire   [15:0] tmp_V_fu_631_p2;
reg   [15:0] p_Result_s_fu_643_p4;
wire   [31:0] p_Result_33_fu_653_p3;
reg   [31:0] l_fu_661_p3;
wire   [31:0] lsb_index_fu_679_p2;
wire   [30:0] tmp_16_fu_685_p4;
wire   [4:0] trunc_ln897_fu_701_p1;
wire   [4:0] sub_ln897_fu_705_p2;
wire   [15:0] zext_ln897_fu_711_p1;
wire   [15:0] lshr_ln897_fu_715_p2;
wire   [15:0] p_Result_29_fu_721_p2;
wire   [0:0] icmp_ln897_fu_695_p2;
wire   [0:0] icmp_ln897_2_fu_727_p2;
wire   [0:0] tmp_17_fu_739_p3;
wire   [15:0] trunc_ln894_fu_675_p1;
wire   [15:0] add_ln899_fu_753_p2;
wire   [0:0] p_Result_30_fu_759_p3;
wire   [0:0] xor_ln899_fu_747_p2;
wire   [0:0] and_ln899_fu_767_p2;
wire   [0:0] a_fu_733_p2;
wire   [0:0] or_ln899_fu_773_p2;
wire   [31:0] zext_ln907_2_fu_800_p1;
wire   [31:0] add_ln908_fu_803_p2;
wire   [31:0] lshr_ln908_fu_808_p2;
wire   [31:0] sub_ln908_fu_818_p2;
wire   [63:0] m_fu_797_p1;
wire   [63:0] zext_ln908_2_fu_823_p1;
wire   [63:0] zext_ln908_fu_814_p1;
wire   [63:0] shl_ln908_fu_827_p2;
wire   [63:0] zext_ln911_fu_840_p1;
wire   [63:0] m_7_fu_833_p3;
wire   [63:0] m_8_fu_843_p2;
wire   [62:0] m_s_fu_849_p4;
wire   [0:0] tmp_18_fu_863_p3;
wire   [10:0] sub_ln915_fu_879_p2;
wire   [10:0] select_ln915_fu_871_p3;
wire   [10:0] add_ln915_fu_884_p2;
wire   [63:0] m_11_fu_859_p1;
wire   [11:0] tmp_8_fu_890_p3;
wire   [63:0] p_Result_34_fu_897_p5;
wire   [51:0] trunc_ln7_fu_914_p4;
wire   [0:0] or_ln924_fu_936_p2;
wire   [0:0] grp_fu_305_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 11 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
conv_1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_address0),
    .ce0(conv_1_weights_V_ce0),
    .q0(conv_1_weights_V_q0)
);

conv_1_conv_1_biacud #(
    .DataWidth( 9 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_V_address0),
    .ce0(conv_1_bias_V_ce0),
    .q0(conv_1_bias_V_q0)
);

cnn_dcmp_64ns_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
cnn_dcmp_64ns_64ndEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_305_p0),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_305_p2)
);

cnn_mul_mul_16s_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 28 ))
cnn_mul_mul_16s_1eOg_U2(
    .din0(input_V_q0),
    .din1(conv_1_weights_V_q0),
    .dout(r_V_fu_946_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_225 <= c_reg_969;
    end else if (((icmp_ln8_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_225 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        f_0_reg_237 <= f_reg_982;
    end else if (((icmp_ln11_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_237 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_26_reg_271 <= {{ret_V_fu_592_p2[25:10]}};
    end else if (((icmp_ln18_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_26_reg_271 <= p_Val2_s_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_488_p2 == 1'd1))) begin
        p_Val2_s_reg_248 <= p_Val2_26_reg_271;
    end else if (((icmp_ln14_fu_376_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_s_reg_248 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_213 <= add_ln8_reg_953;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_213 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_201 <= r_reg_961;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_201 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        wc_0_reg_283 <= wc_reg_1028;
    end else if (((icmp_ln18_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        wc_0_reg_283 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_488_p2 == 1'd1))) begin
        wr_0_reg_260 <= wr_reg_1005;
    end else if (((icmp_ln14_fu_376_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_260 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_953 <= add_ln8_fu_310_p2;
        r_reg_961 <= r_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_969 <= c_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_376_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        conv_out_V_addr_reg_997 <= zext_ln203_16_fu_405_p1;
        zext_ln203_14_reg_992[2 : 0] <= zext_ln203_14_fu_392_p1[2 : 0];
        zext_ln23_reg_987[2 : 0] <= zext_ln23_fu_388_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_982 <= f_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln885_reg_1056 <= icmp_ln885_fu_618_p2;
        tmp_V_8_reg_1048 <= tmp_V_8_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        icmp_ln908_reg_1082 <= icmp_ln908_fu_787_p2;
        or_ln_reg_1077[0] <= or_ln_fu_779_p3[0];
        p_Result_32_reg_1060 <= tmp_V_8_reg_1048[32'd15];
        sub_ln894_reg_1071 <= sub_ln894_fu_669_p2;
        tmp_V_9_reg_1065 <= tmp_V_9_fu_636_p3;
        trunc_ln893_reg_1087 <= trunc_ln893_fu_793_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln924_2_reg_1102 <= icmp_ln924_2_fu_930_p2;
        icmp_ln924_reg_1097 <= icmp_ln924_fu_924_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sext_ln1116_reg_1010 <= sext_ln1116_fu_444_p1;
        sub_ln1117_reg_1015[10 : 2] <= sub_ln1117_fu_478_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln203_reg_974[12 : 1] <= sub_ln203_fu_370_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wc_reg_1028 <= wc_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_1005 <= wr_fu_420_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_316_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        if (((icmp_ln885_reg_1056 == 1'd0) & (1'd1 == and_ln924_fu_940_p2))) begin
            ap_phi_mux_storemerge_phi_fu_297_p4 = tmp_V_8_reg_1048;
        end else if (((1'd0 == and_ln924_fu_940_p2) | (icmp_ln885_reg_1056 == 1'd1))) begin
            ap_phi_mux_storemerge_phi_fu_297_p4 = 16'd0;
        end else begin
            ap_phi_mux_storemerge_phi_fu_297_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_297_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_316_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_bias_V_ce0 = 1'b1;
    end else begin
        conv_1_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_1_weights_V_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_out_V_ce0 = 1'b1;
    end else begin
        conv_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_out_V_we0 = 1'b1;
    end else begin
        conv_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_316_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_328_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln18_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_488_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln885_fu_618_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_733_p2 = (icmp_ln897_fu_695_p2 & icmp_ln897_2_fu_727_p2);

assign add_ln1116_3_fu_535_p2 = (sub_ln1116_2_fu_529_p2 + zext_ln203_14_reg_992);

assign add_ln1116_fu_504_p2 = ($signed(sext_ln1116_reg_1010) + $signed(zext_ln1116_6_fu_500_p1));

assign add_ln1117_fu_555_p2 = (sub_ln1117_reg_1015 + zext_ln1117_5_fu_551_p1);

assign add_ln203_7_fu_400_p2 = (sub_ln203_reg_974 + zext_ln203_15_fu_396_p1);

assign add_ln203_fu_344_p2 = (zext_ln203_fu_340_p1 + phi_mul_reg_213);

assign add_ln23_1_fu_545_p2 = (zext_ln21_fu_484_p1 + c_0_reg_225);

assign add_ln23_fu_448_p2 = (zext_ln18_fu_410_p1 + r_0_reg_201);

assign add_ln899_fu_753_p2 = ($signed(16'd65483) + $signed(trunc_ln894_fu_675_p1));

assign add_ln8_fu_310_p2 = (phi_mul_reg_213 + 10'd26);

assign add_ln908_fu_803_p2 = ($signed(32'd4294967242) + $signed(sub_ln894_reg_1071));

assign add_ln915_fu_884_p2 = (sub_ln915_fu_879_p2 + select_ln915_fu_871_p3);

assign and_ln899_fu_767_p2 = (xor_ln899_fu_747_p2 & p_Result_30_fu_759_p3);

assign and_ln924_fu_940_p2 = (or_ln924_fu_936_p2 & grp_fu_305_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_334_p2 = (c_0_reg_225 + 5'd1);

assign conv_1_bias_V_address0 = zext_ln23_reg_987;

assign conv_1_weights_V_address0 = zext_ln1116_7_fu_540_p1;

assign conv_out_V_address0 = conv_out_V_addr_reg_997;

assign conv_out_V_d0 = ap_phi_mux_storemerge_phi_fu_297_p4;

assign f_fu_382_p2 = (f_0_reg_237 + 3'd1);

assign grp_fu_305_p0 = p_Result_34_fu_897_p5;

assign icmp_ln11_fu_328_p2 = ((c_0_reg_225 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_376_p2 = ((f_0_reg_237 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_414_p2 = ((wr_0_reg_260 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_488_p2 = ((wc_0_reg_283 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_618_p2 = ((tmp_V_8_fu_612_p2 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_2_fu_727_p2 = ((p_Result_29_fu_721_p2 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_fu_695_p2 = (($signed(tmp_16_fu_685_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_316_p2 = ((r_0_reg_201 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_787_p2 = (($signed(lsb_index_fu_679_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln924_2_fu_930_p2 = ((trunc_ln7_fu_914_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln924_fu_924_p2 = ((add_ln915_fu_884_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign input_V_address0 = sext_ln1117_fu_560_p1;


always @ (p_Result_33_fu_653_p3) begin
    if (p_Result_33_fu_653_p3[0] == 1'b1) begin
        l_fu_661_p3 = 32'd0;
    end else if (p_Result_33_fu_653_p3[1] == 1'b1) begin
        l_fu_661_p3 = 32'd1;
    end else if (p_Result_33_fu_653_p3[2] == 1'b1) begin
        l_fu_661_p3 = 32'd2;
    end else if (p_Result_33_fu_653_p3[3] == 1'b1) begin
        l_fu_661_p3 = 32'd3;
    end else if (p_Result_33_fu_653_p3[4] == 1'b1) begin
        l_fu_661_p3 = 32'd4;
    end else if (p_Result_33_fu_653_p3[5] == 1'b1) begin
        l_fu_661_p3 = 32'd5;
    end else if (p_Result_33_fu_653_p3[6] == 1'b1) begin
        l_fu_661_p3 = 32'd6;
    end else if (p_Result_33_fu_653_p3[7] == 1'b1) begin
        l_fu_661_p3 = 32'd7;
    end else if (p_Result_33_fu_653_p3[8] == 1'b1) begin
        l_fu_661_p3 = 32'd8;
    end else if (p_Result_33_fu_653_p3[9] == 1'b1) begin
        l_fu_661_p3 = 32'd9;
    end else if (p_Result_33_fu_653_p3[10] == 1'b1) begin
        l_fu_661_p3 = 32'd10;
    end else if (p_Result_33_fu_653_p3[11] == 1'b1) begin
        l_fu_661_p3 = 32'd11;
    end else if (p_Result_33_fu_653_p3[12] == 1'b1) begin
        l_fu_661_p3 = 32'd12;
    end else if (p_Result_33_fu_653_p3[13] == 1'b1) begin
        l_fu_661_p3 = 32'd13;
    end else if (p_Result_33_fu_653_p3[14] == 1'b1) begin
        l_fu_661_p3 = 32'd14;
    end else if (p_Result_33_fu_653_p3[15] == 1'b1) begin
        l_fu_661_p3 = 32'd15;
    end else if (p_Result_33_fu_653_p3[16] == 1'b1) begin
        l_fu_661_p3 = 32'd16;
    end else if (p_Result_33_fu_653_p3[17] == 1'b1) begin
        l_fu_661_p3 = 32'd17;
    end else if (p_Result_33_fu_653_p3[18] == 1'b1) begin
        l_fu_661_p3 = 32'd18;
    end else if (p_Result_33_fu_653_p3[19] == 1'b1) begin
        l_fu_661_p3 = 32'd19;
    end else if (p_Result_33_fu_653_p3[20] == 1'b1) begin
        l_fu_661_p3 = 32'd20;
    end else if (p_Result_33_fu_653_p3[21] == 1'b1) begin
        l_fu_661_p3 = 32'd21;
    end else if (p_Result_33_fu_653_p3[22] == 1'b1) begin
        l_fu_661_p3 = 32'd22;
    end else if (p_Result_33_fu_653_p3[23] == 1'b1) begin
        l_fu_661_p3 = 32'd23;
    end else if (p_Result_33_fu_653_p3[24] == 1'b1) begin
        l_fu_661_p3 = 32'd24;
    end else if (p_Result_33_fu_653_p3[25] == 1'b1) begin
        l_fu_661_p3 = 32'd25;
    end else if (p_Result_33_fu_653_p3[26] == 1'b1) begin
        l_fu_661_p3 = 32'd26;
    end else if (p_Result_33_fu_653_p3[27] == 1'b1) begin
        l_fu_661_p3 = 32'd27;
    end else if (p_Result_33_fu_653_p3[28] == 1'b1) begin
        l_fu_661_p3 = 32'd28;
    end else if (p_Result_33_fu_653_p3[29] == 1'b1) begin
        l_fu_661_p3 = 32'd29;
    end else if (p_Result_33_fu_653_p3[30] == 1'b1) begin
        l_fu_661_p3 = 32'd30;
    end else if (p_Result_33_fu_653_p3[31] == 1'b1) begin
        l_fu_661_p3 = 32'd31;
    end else begin
        l_fu_661_p3 = 32'd32;
    end
end

assign lhs_V_fu_576_p3 = {{p_Val2_26_reg_271}, {10'd0}};

assign lsb_index_fu_679_p2 = ($signed(32'd4294967243) + $signed(sub_ln894_fu_669_p2));

assign lshr_ln897_fu_715_p2 = 16'd65535 >> zext_ln897_fu_711_p1;

assign lshr_ln908_fu_808_p2 = zext_ln907_2_fu_800_p1 >> add_ln908_fu_803_p2;

assign m_11_fu_859_p1 = m_s_fu_849_p4;

assign m_7_fu_833_p3 = ((icmp_ln908_reg_1082[0:0] === 1'b1) ? zext_ln908_fu_814_p1 : shl_ln908_fu_827_p2);

assign m_8_fu_843_p2 = (zext_ln911_fu_840_p1 + m_7_fu_833_p3);

assign m_fu_797_p1 = tmp_V_9_reg_1065;

assign m_s_fu_849_p4 = {{m_8_fu_843_p2[63:1]}};

assign or_ln899_fu_773_p2 = (and_ln899_fu_767_p2 | a_fu_733_p2);

assign or_ln924_fu_936_p2 = (icmp_ln924_reg_1097 | icmp_ln924_2_reg_1102);

assign or_ln_fu_779_p3 = {{31'd0}, {or_ln899_fu_773_p2}};

assign p_Result_29_fu_721_p2 = (tmp_V_9_fu_636_p3 & lshr_ln897_fu_715_p2);

assign p_Result_30_fu_759_p3 = tmp_V_9_fu_636_p3[add_ln899_fu_753_p2];

assign p_Result_32_fu_624_p3 = tmp_V_8_reg_1048[32'd15];

assign p_Result_33_fu_653_p3 = {{16'd65535}, {p_Result_s_fu_643_p4}};

assign p_Result_34_fu_897_p5 = {{tmp_8_fu_890_p3}, {m_11_fu_859_p1[51:0]}};

integer ap_tvar_int_0;

always @ (tmp_V_9_fu_636_p3) begin
    for (ap_tvar_int_0 = 16 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 15 - 0) begin
            p_Result_s_fu_643_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_643_p4[ap_tvar_int_0] = tmp_V_9_fu_636_p3[15 - ap_tvar_int_0];
        end
    end
end

assign p_shl5_cast_fu_513_p3 = {{trunc_ln1116_fu_509_p1}, {3'd0}};

assign p_shl6_cast_fu_521_p3 = {{add_ln1116_fu_504_p2}, {1'd0}};

assign p_shl_cast_fu_350_p3 = {{add_ln203_fu_344_p2}, {3'd0}};

assign r_fu_322_p2 = (r_0_reg_201 + 5'd1);

assign ret_V_fu_592_p2 = (zext_ln703_fu_588_p1 + zext_ln728_fu_584_p1);

assign select_ln915_fu_871_p3 = ((tmp_18_fu_863_p3[0:0] === 1'b1) ? 11'd1023 : 11'd1022);

assign sext_ln1116_fu_444_p1 = $signed(sub_ln1116_fu_438_p2);

assign sext_ln1117_fu_560_p1 = $signed(add_ln1117_fu_555_p2);

assign sext_ln1118_2_fu_573_p1 = r_V_fu_946_p2;

assign sext_ln1265_fu_608_p1 = $signed(conv_1_bias_V_q0);

assign shl_ln908_fu_827_p2 = m_fu_797_p1 << zext_ln908_2_fu_823_p1;

assign sub_ln1116_2_fu_529_p2 = (p_shl5_cast_fu_513_p3 - p_shl6_cast_fu_521_p3);

assign sub_ln1116_fu_438_p2 = (zext_ln1116_fu_434_p1 - zext_ln18_fu_410_p1);

assign sub_ln1117_fu_478_p2 = (zext_ln1117_fu_462_p1 - zext_ln1117_4_fu_474_p1);

assign sub_ln203_fu_370_p2 = (p_shl_cast_fu_350_p3 - zext_ln203_13_fu_366_p1);

assign sub_ln894_fu_669_p2 = (32'd16 - l_fu_661_p3);

assign sub_ln897_fu_705_p2 = (5'd6 - trunc_ln897_fu_701_p1);

assign sub_ln908_fu_818_p2 = (32'd54 - sub_ln894_reg_1071);

assign sub_ln915_fu_879_p2 = (11'd6 - trunc_ln893_reg_1087);

assign tmp_10_fu_466_p3 = {{add_ln23_fu_448_p2}, {2'd0}};

assign tmp_14_fu_358_p3 = {{add_ln203_fu_344_p2}, {1'd0}};

assign tmp_16_fu_685_p4 = {{lsb_index_fu_679_p2[31:1]}};

assign tmp_17_fu_739_p3 = lsb_index_fu_679_p2[32'd31];

assign tmp_18_fu_863_p3 = m_8_fu_843_p2[32'd54];

assign tmp_7_fu_426_p3 = {{wr_0_reg_260}, {2'd0}};

assign tmp_8_fu_890_p3 = {{p_Result_32_reg_1060}, {add_ln915_fu_884_p2}};

assign tmp_9_fu_454_p3 = {{add_ln23_fu_448_p2}, {5'd0}};

assign tmp_V_8_fu_612_p2 = ($signed(sext_ln1265_fu_608_p1) + $signed(p_Val2_s_reg_248));

assign tmp_V_9_fu_636_p3 = ((p_Result_32_fu_624_p3[0:0] === 1'b1) ? tmp_V_fu_631_p2 : tmp_V_8_reg_1048);

assign tmp_V_fu_631_p2 = (16'd0 - tmp_V_8_reg_1048);

assign trunc_ln1116_fu_509_p1 = add_ln1116_fu_504_p2[3:0];

assign trunc_ln7_fu_914_p4 = {{m_8_fu_843_p2[52:1]}};

assign trunc_ln893_fu_793_p1 = l_fu_661_p3[10:0];

assign trunc_ln894_fu_675_p1 = sub_ln894_fu_669_p2[15:0];

assign trunc_ln897_fu_701_p1 = sub_ln894_fu_669_p2[4:0];

assign wc_fu_494_p2 = (wc_0_reg_283 + 2'd1);

assign wr_fu_420_p2 = (wr_0_reg_260 + 2'd1);

assign xor_ln899_fu_747_p2 = (tmp_17_fu_739_p3 ^ 1'd1);

assign zext_ln1116_6_fu_500_p1 = wc_0_reg_283;

assign zext_ln1116_7_fu_540_p1 = add_ln1116_3_fu_535_p2;

assign zext_ln1116_fu_434_p1 = tmp_7_fu_426_p3;

assign zext_ln1117_4_fu_474_p1 = tmp_10_fu_466_p3;

assign zext_ln1117_5_fu_551_p1 = add_ln23_1_fu_545_p2;

assign zext_ln1117_fu_462_p1 = tmp_9_fu_454_p3;

assign zext_ln18_fu_410_p1 = wr_0_reg_260;

assign zext_ln203_13_fu_366_p1 = tmp_14_fu_358_p3;

assign zext_ln203_14_fu_392_p1 = f_0_reg_237;

assign zext_ln203_15_fu_396_p1 = f_0_reg_237;

assign zext_ln203_16_fu_405_p1 = add_ln203_7_fu_400_p2;

assign zext_ln203_fu_340_p1 = c_0_reg_225;

assign zext_ln21_fu_484_p1 = wc_0_reg_283;

assign zext_ln23_fu_388_p1 = f_0_reg_237;

assign zext_ln703_fu_588_p1 = $unsigned(sext_ln1118_2_fu_573_p1);

assign zext_ln728_fu_584_p1 = lhs_V_fu_576_p3;

assign zext_ln897_fu_711_p1 = sub_ln897_fu_705_p2;

assign zext_ln907_2_fu_800_p1 = tmp_V_9_reg_1065;

assign zext_ln908_2_fu_823_p1 = sub_ln908_fu_818_p2;

assign zext_ln908_fu_814_p1 = lshr_ln908_fu_808_p2;

assign zext_ln911_fu_840_p1 = or_ln_reg_1077;

always @ (posedge ap_clk) begin
    sub_ln203_reg_974[0] <= 1'b0;
    zext_ln23_reg_987[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln203_14_reg_992[6:3] <= 4'b0000;
    sub_ln1117_reg_1015[1:0] <= 2'b00;
    or_ln_reg_1077[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //conv_1
