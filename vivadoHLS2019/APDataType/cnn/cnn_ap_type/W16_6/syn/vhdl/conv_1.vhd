-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_we0 : OUT STD_LOGIC;
    conv_out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv16_FFCB : STD_LOGIC_VECTOR (15 downto 0) := "1111111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_1_weights_V_ce0 : STD_LOGIC;
    signal conv_1_weights_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_1_bias_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_bias_V_ce0 : STD_LOGIC;
    signal conv_1_bias_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln8_fu_310_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln8_reg_953 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_322_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_961 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_334_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_969 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln203_fu_370_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln203_reg_974 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln11_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_382_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_982 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln23_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_987 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_14_fu_392_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_14_reg_992 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_out_V_addr_reg_997 : STD_LOGIC_VECTOR (11 downto 0);
    signal wr_fu_420_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_1005 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln1116_fu_444_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1116_reg_1010 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1117_fu_478_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1117_reg_1015 : STD_LOGIC_VECTOR (10 downto 0);
    signal wc_fu_494_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_1028 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln21_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_V_8_fu_612_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_8_reg_1048 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln885_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_624_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_V_9_fu_636_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_9_reg_1065 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln894_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_1082 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_793_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1087 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln924_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_reg_1097 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_2_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_2_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_0_reg_201 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_213 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_reg_225 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln8_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_237 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_s_reg_248 : STD_LOGIC_VECTOR (15 downto 0);
    signal wr_0_reg_260 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_26_reg_271 : STD_LOGIC_VECTOR (15 downto 0);
    signal wc_0_reg_283 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_297_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln924_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_16_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_7_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_305_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_fu_340_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_fu_344_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_358_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_350_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln203_13_fu_366_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln203_15_fu_396_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_7_fu_400_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_fu_426_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_fu_434_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_410_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1116_fu_438_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_448_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_454_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_466_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_fu_462_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1117_4_fu_474_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1116_6_fu_500_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1116_fu_504_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1116_fu_509_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl5_cast_fu_513_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_cast_fu_521_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1116_2_fu_529_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1116_3_fu_535_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_fu_484_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_1_fu_545_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1117_5_fu_551_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1117_fu_555_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_946_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal lhs_V_fu_576_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_2_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln703_fu_588_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln728_fu_584_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_592_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1265_fu_608_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_fu_631_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_643_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_33_fu_653_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_661_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_685_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_701_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln897_fu_705_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln897_fu_711_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln897_fu_715_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_29_fu_721_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln897_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_2_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_739_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_675_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln899_fu_753_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_30_fu_759_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_2_fu_800_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_803_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_2_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_827_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_7_fu_833_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_8_fu_843_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_s_fu_849_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_18_fu_863_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_879_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_871_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_884_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_11_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_890_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_34_fu_897_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_914_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln924_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component cnn_dcmp_64ns_64ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mul_mul_16s_1eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component conv_1_conv_1_biacud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    conv_1_weights_V_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 11,
        AddressRange => 54,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_V_address0,
        ce0 => conv_1_weights_V_ce0,
        q0 => conv_1_weights_V_q0);

    conv_1_bias_V_U : component conv_1_conv_1_biacud
    generic map (
        DataWidth => 9,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_V_address0,
        ce0 => conv_1_bias_V_ce0,
        q0 => conv_1_bias_V_q0);

    cnn_dcmp_64ns_64ndEe_U1 : component cnn_dcmp_64ns_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_305_p0,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_305_p2);

    cnn_mul_mul_16s_1eOg_U2 : component cnn_mul_mul_16s_1eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => input_V_q0,
        din1 => conv_1_weights_V_q0,
        dout => r_V_fu_946_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_225 <= c_reg_969;
            elsif (((icmp_ln8_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_225 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                f_0_reg_237 <= f_reg_982;
            elsif (((icmp_ln11_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_237 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_Val2_26_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_Val2_26_reg_271 <= ret_V_fu_592_p2(25 downto 10);
            elsif (((icmp_ln18_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_Val2_26_reg_271 <= p_Val2_s_reg_248;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_488_p2 = ap_const_lv1_1))) then 
                p_Val2_s_reg_248 <= p_Val2_26_reg_271;
            elsif (((icmp_ln14_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_s_reg_248 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_328_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_213 <= add_ln8_reg_953;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_213 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    r_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_328_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_201 <= r_reg_961;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_201 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    wc_0_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                wc_0_reg_283 <= wc_reg_1028;
            elsif (((icmp_ln18_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                wc_0_reg_283 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_488_p2 = ap_const_lv1_1))) then 
                wr_0_reg_260 <= wr_reg_1005;
            elsif (((icmp_ln14_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_260 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_953 <= add_ln8_fu_310_p2;
                r_reg_961 <= r_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_969 <= c_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_V_addr_reg_997 <= zext_ln203_16_fu_405_p1(12 - 1 downto 0);
                    zext_ln203_14_reg_992(2 downto 0) <= zext_ln203_14_fu_392_p1(2 downto 0);
                    zext_ln23_reg_987(2 downto 0) <= zext_ln23_fu_388_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_982 <= f_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln885_reg_1056 <= icmp_ln885_fu_618_p2;
                tmp_V_8_reg_1048 <= tmp_V_8_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln908_reg_1082 <= icmp_ln908_fu_787_p2;
                    or_ln_reg_1077(0) <= or_ln_fu_779_p3(0);
                p_Result_32_reg_1060 <= tmp_V_8_reg_1048(15 downto 15);
                sub_ln894_reg_1071 <= sub_ln894_fu_669_p2;
                tmp_V_9_reg_1065 <= tmp_V_9_fu_636_p3;
                trunc_ln893_reg_1087 <= trunc_ln893_fu_793_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln924_2_reg_1102 <= icmp_ln924_2_fu_930_p2;
                icmp_ln924_reg_1097 <= icmp_ln924_fu_924_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                sext_ln1116_reg_1010 <= sext_ln1116_fu_444_p1;
                    sub_ln1117_reg_1015(10 downto 2) <= sub_ln1117_fu_478_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln203_reg_974(12 downto 1) <= sub_ln203_fu_370_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_1028 <= wc_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_1005 <= wr_fu_420_p2;
            end if;
        end if;
    end process;
    sub_ln203_reg_974(0) <= '0';
    zext_ln23_reg_987(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln203_14_reg_992(6 downto 3) <= "0000";
    sub_ln1117_reg_1015(1 downto 0) <= "00";
    or_ln_reg_1077(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_328_p2, ap_CS_fsm_state4, icmp_ln14_fu_376_p2, ap_CS_fsm_state5, icmp_ln18_fu_414_p2, ap_CS_fsm_state6, icmp_ln21_fu_488_p2, ap_CS_fsm_state8, icmp_ln885_fu_618_p2, icmp_ln8_fu_316_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_316_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_328_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_488_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln885_fu_618_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    a_fu_733_p2 <= (icmp_ln897_fu_695_p2 and icmp_ln897_2_fu_727_p2);
    add_ln1116_3_fu_535_p2 <= std_logic_vector(unsigned(sub_ln1116_2_fu_529_p2) + unsigned(zext_ln203_14_reg_992));
    add_ln1116_fu_504_p2 <= std_logic_vector(signed(sext_ln1116_reg_1010) + signed(zext_ln1116_6_fu_500_p1));
    add_ln1117_fu_555_p2 <= std_logic_vector(unsigned(sub_ln1117_reg_1015) + unsigned(zext_ln1117_5_fu_551_p1));
    add_ln203_7_fu_400_p2 <= std_logic_vector(unsigned(sub_ln203_reg_974) + unsigned(zext_ln203_15_fu_396_p1));
    add_ln203_fu_344_p2 <= std_logic_vector(unsigned(zext_ln203_fu_340_p1) + unsigned(phi_mul_reg_213));
    add_ln23_1_fu_545_p2 <= std_logic_vector(unsigned(zext_ln21_fu_484_p1) + unsigned(c_0_reg_225));
    add_ln23_fu_448_p2 <= std_logic_vector(unsigned(zext_ln18_fu_410_p1) + unsigned(r_0_reg_201));
    add_ln899_fu_753_p2 <= std_logic_vector(signed(ap_const_lv16_FFCB) + signed(trunc_ln894_fu_675_p1));
    add_ln8_fu_310_p2 <= std_logic_vector(unsigned(phi_mul_reg_213) + unsigned(ap_const_lv10_1A));
    add_ln908_fu_803_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_1071));
    add_ln915_fu_884_p2 <= std_logic_vector(unsigned(sub_ln915_fu_879_p2) + unsigned(select_ln915_fu_871_p3));
    and_ln899_fu_767_p2 <= (xor_ln899_fu_747_p2 and p_Result_30_fu_759_p3);
    and_ln924_fu_940_p2 <= (or_ln924_fu_936_p2 and grp_fu_305_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_316_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_316_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_297_p4_assign_proc : process(tmp_V_8_reg_1048, icmp_ln885_reg_1056, ap_CS_fsm_state11, and_ln924_fu_940_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
            if (((icmp_ln885_reg_1056 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln924_fu_940_p2))) then 
                ap_phi_mux_storemerge_phi_fu_297_p4 <= tmp_V_8_reg_1048;
            elsif (((ap_const_lv1_0 = and_ln924_fu_940_p2) or (icmp_ln885_reg_1056 = ap_const_lv1_1))) then 
                ap_phi_mux_storemerge_phi_fu_297_p4 <= ap_const_lv16_0;
            else 
                ap_phi_mux_storemerge_phi_fu_297_p4 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_297_p4 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_316_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_316_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_334_p2 <= std_logic_vector(unsigned(c_0_reg_225) + unsigned(ap_const_lv5_1));
    conv_1_bias_V_address0 <= zext_ln23_reg_987(3 - 1 downto 0);

    conv_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_V_address0 <= zext_ln1116_7_fu_540_p1(6 - 1 downto 0);

    conv_1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_address0 <= conv_out_V_addr_reg_997;

    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_d0 <= ap_phi_mux_storemerge_phi_fu_297_p4;

    conv_out_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_out_V_we0 <= ap_const_logic_1;
        else 
            conv_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_382_p2 <= std_logic_vector(unsigned(f_0_reg_237) + unsigned(ap_const_lv3_1));
    grp_fu_305_p0 <= p_Result_34_fu_897_p5;
    icmp_ln11_fu_328_p2 <= "1" when (c_0_reg_225 = ap_const_lv5_1A) else "0";
    icmp_ln14_fu_376_p2 <= "1" when (f_0_reg_237 = ap_const_lv3_6) else "0";
    icmp_ln18_fu_414_p2 <= "1" when (wr_0_reg_260 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_488_p2 <= "1" when (wc_0_reg_283 = ap_const_lv2_3) else "0";
    icmp_ln885_fu_618_p2 <= "1" when (tmp_V_8_fu_612_p2 = ap_const_lv16_0) else "0";
    icmp_ln897_2_fu_727_p2 <= "0" when (p_Result_29_fu_721_p2 = ap_const_lv16_0) else "1";
    icmp_ln897_fu_695_p2 <= "1" when (signed(tmp_16_fu_685_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln8_fu_316_p2 <= "1" when (r_0_reg_201 = ap_const_lv5_1A) else "0";
    icmp_ln908_fu_787_p2 <= "1" when (signed(lsb_index_fu_679_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln924_2_fu_930_p2 <= "1" when (trunc_ln7_fu_914_p4 = ap_const_lv52_0) else "0";
    icmp_ln924_fu_924_p2 <= "0" when (add_ln915_fu_884_p2 = ap_const_lv11_7FF) else "1";
    input_V_address0 <= sext_ln1117_fu_560_p1(10 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    l_fu_661_p3_proc : process(p_Result_33_fu_653_p3)
    begin
        l_fu_661_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_33_fu_653_p3(i) = '1' then
                l_fu_661_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lhs_V_fu_576_p3 <= (p_Val2_26_reg_271 & ap_const_lv10_0);
    lsb_index_fu_679_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_669_p2));
    lshr_ln897_fu_715_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln897_fu_711_p1(16-1 downto 0)))));
    lshr_ln908_fu_808_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_2_fu_800_p1),to_integer(unsigned('0' & add_ln908_fu_803_p2(31-1 downto 0)))));
    m_11_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_849_p4),64));
    m_7_fu_833_p3 <= 
        zext_ln908_fu_814_p1 when (icmp_ln908_reg_1082(0) = '1') else 
        shl_ln908_fu_827_p2;
    m_8_fu_843_p2 <= std_logic_vector(unsigned(zext_ln911_fu_840_p1) + unsigned(m_7_fu_833_p3));
    m_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_9_reg_1065),64));
    m_s_fu_849_p4 <= m_8_fu_843_p2(63 downto 1);
    or_ln899_fu_773_p2 <= (and_ln899_fu_767_p2 or a_fu_733_p2);
    or_ln924_fu_936_p2 <= (icmp_ln924_reg_1097 or icmp_ln924_2_reg_1102);
    or_ln_fu_779_p3 <= (ap_const_lv31_0 & or_ln899_fu_773_p2);
    p_Result_29_fu_721_p2 <= (tmp_V_9_fu_636_p3 and lshr_ln897_fu_715_p2);
    p_Result_30_fu_759_p3 <= tmp_V_9_fu_636_p3(to_integer(unsigned(add_ln899_fu_753_p2)) downto to_integer(unsigned(add_ln899_fu_753_p2))) when (to_integer(unsigned(add_ln899_fu_753_p2))>= 0 and to_integer(unsigned(add_ln899_fu_753_p2))<=15) else "-";
    p_Result_32_fu_624_p3 <= tmp_V_8_reg_1048(15 downto 15);
    p_Result_33_fu_653_p3 <= (ap_const_lv16_FFFF & p_Result_s_fu_643_p4);
    p_Result_34_fu_897_p5 <= (tmp_8_fu_890_p3 & m_11_fu_859_p1(51 downto 0));
    
    p_Result_s_fu_643_p4_proc : process(tmp_V_9_fu_636_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_s_fu_643_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_9_fu_636_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_s_fu_643_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_s_fu_643_p4_i) := tmp_V_9_fu_636_p3(16-1-p_Result_s_fu_643_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_643_p4 <= resvalue(16-1 downto 0);
    end process;

    p_shl5_cast_fu_513_p3 <= (trunc_ln1116_fu_509_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_521_p3 <= (add_ln1116_fu_504_p2 & ap_const_lv1_0);
    p_shl_cast_fu_350_p3 <= (add_ln203_fu_344_p2 & ap_const_lv3_0);
    r_fu_322_p2 <= std_logic_vector(unsigned(r_0_reg_201) + unsigned(ap_const_lv5_1));
    ret_V_fu_592_p2 <= std_logic_vector(unsigned(zext_ln703_fu_588_p1) + unsigned(zext_ln728_fu_584_p1));
    select_ln915_fu_871_p3 <= 
        ap_const_lv11_3FF when (tmp_18_fu_863_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1116_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1116_fu_438_p2),6));

        sext_ln1117_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_fu_555_p2),64));

        sext_ln1118_2_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_946_p2),32));

        sext_ln1265_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_1_bias_V_q0),16));

    shl_ln908_fu_827_p2 <= std_logic_vector(shift_left(unsigned(m_fu_797_p1),to_integer(unsigned('0' & zext_ln908_2_fu_823_p1(31-1 downto 0)))));
    sub_ln1116_2_fu_529_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_513_p3) - unsigned(p_shl6_cast_fu_521_p3));
    sub_ln1116_fu_438_p2 <= std_logic_vector(unsigned(zext_ln1116_fu_434_p1) - unsigned(zext_ln18_fu_410_p1));
    sub_ln1117_fu_478_p2 <= std_logic_vector(unsigned(zext_ln1117_fu_462_p1) - unsigned(zext_ln1117_4_fu_474_p1));
    sub_ln203_fu_370_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_350_p3) - unsigned(zext_ln203_13_fu_366_p1));
    sub_ln894_fu_669_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_fu_661_p3));
    sub_ln897_fu_705_p2 <= std_logic_vector(unsigned(ap_const_lv5_6) - unsigned(trunc_ln897_fu_701_p1));
    sub_ln908_fu_818_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_1071));
    sub_ln915_fu_879_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) - unsigned(trunc_ln893_reg_1087));
    tmp_10_fu_466_p3 <= (add_ln23_fu_448_p2 & ap_const_lv2_0);
    tmp_14_fu_358_p3 <= (add_ln203_fu_344_p2 & ap_const_lv1_0);
    tmp_16_fu_685_p4 <= lsb_index_fu_679_p2(31 downto 1);
    tmp_17_fu_739_p3 <= lsb_index_fu_679_p2(31 downto 31);
    tmp_18_fu_863_p3 <= m_8_fu_843_p2(54 downto 54);
    tmp_7_fu_426_p3 <= (wr_0_reg_260 & ap_const_lv2_0);
    tmp_8_fu_890_p3 <= (p_Result_32_reg_1060 & add_ln915_fu_884_p2);
    tmp_9_fu_454_p3 <= (add_ln23_fu_448_p2 & ap_const_lv5_0);
    tmp_V_8_fu_612_p2 <= std_logic_vector(signed(sext_ln1265_fu_608_p1) + signed(p_Val2_s_reg_248));
    tmp_V_9_fu_636_p3 <= 
        tmp_V_fu_631_p2 when (p_Result_32_fu_624_p3(0) = '1') else 
        tmp_V_8_reg_1048;
    tmp_V_fu_631_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_8_reg_1048));
    trunc_ln1116_fu_509_p1 <= add_ln1116_fu_504_p2(4 - 1 downto 0);
    trunc_ln7_fu_914_p4 <= m_8_fu_843_p2(52 downto 1);
    trunc_ln893_fu_793_p1 <= l_fu_661_p3(11 - 1 downto 0);
    trunc_ln894_fu_675_p1 <= sub_ln894_fu_669_p2(16 - 1 downto 0);
    trunc_ln897_fu_701_p1 <= sub_ln894_fu_669_p2(5 - 1 downto 0);
    wc_fu_494_p2 <= std_logic_vector(unsigned(wc_0_reg_283) + unsigned(ap_const_lv2_1));
    wr_fu_420_p2 <= std_logic_vector(unsigned(wr_0_reg_260) + unsigned(ap_const_lv2_1));
    xor_ln899_fu_747_p2 <= (tmp_17_fu_739_p3 xor ap_const_lv1_1);
    zext_ln1116_6_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_283),6));
    zext_ln1116_7_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_3_fu_535_p2),64));
    zext_ln1116_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_426_p3),5));
    zext_ln1117_4_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_466_p3),11));
    zext_ln1117_5_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_1_fu_545_p2),11));
    zext_ln1117_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_454_p3),11));
    zext_ln18_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_260),5));
    zext_ln203_13_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_358_p3),13));
    zext_ln203_14_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_237),7));
    zext_ln203_15_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_237),13));
    zext_ln203_16_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_7_fu_400_p2),64));
    zext_ln203_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_225),10));
    zext_ln21_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_283),5));
    zext_ln23_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_237),64));
    zext_ln703_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_2_fu_573_p1),33));
    zext_ln728_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_576_p3),33));
    zext_ln897_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_705_p2),16));
    zext_ln907_2_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_9_reg_1065),32));
    zext_ln908_2_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_818_p2),64));
    zext_ln908_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_808_p2),64));
    zext_ln911_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1077),64));
end behav;
