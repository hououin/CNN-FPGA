-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cnn_dense_out_weiocq_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 300
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cnn_dense_out_weiocq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11111110011", 1 => "00101100100", 2 => "11111001111", 
    3 => "00010100000", 4 => "11011111011", 5 => "10111010101", 
    6 => "11100000101", 7 => "00001010110", 8 => "00011101111", 
    9 => "11010001011", 10 => "10101101000", 11 => "00101110010", 
    12 => "11000111110", 13 => "11001001011", 14 => "00101101110", 
    15 => "11010001010", 16 => "11011001011", 17 => "00100100001", 
    18 => "11001111000", 19 => "11001001101", 20 => "11010111001", 
    21 => "11110010011", 22 => "11100010000", 23 => "11000011001", 
    24 => "00011001010", 25 => "11101010110", 26 => "00110011101", 
    27 => "00011001100", 28 => "00110100100", 29 => "00110011010", 
    30 => "11000000000", 31 => "00110010100", 32 => "00001101111", 
    33 => "00011011100", 34 => "11010100001", 35 => "11110101000", 
    36 => "11101111001", 37 => "00000101101", 38 => "11000110100", 
    39 => "11001010110", 40 => "00010001001", 41 => "11100010101", 
    42 => "11111111100", 43 => "11110101001", 44 => "10111001001", 
    45 => "11010011110", 46 => "11110110011", 47 => "00101111111", 
    48 => "11100000111", 49 => "11000100010", 50 => "00010011110", 
    51 => "10111101111", 52 => "00000000010", 53 => "11011111101", 
    54 => "01010000010", 55 => "11001000101", 56 => "00001110110", 
    57 => "11011100001", 58 => "11111000100", 59 => "11110001101", 
    60 => "11001001111", 61 => "11011110101", 62 => "11101100100", 
    63 => "11100001111", 64 => "00110111101", 65 => "10111110000", 
    66 => "11000101101", 67 => "11110110010", 68 => "00101110001", 
    69 => "00000100011", 70 => "00011111010", 71 => "11010001001", 
    72 => "00111110101", 73 => "11110011011", 74 => "00001111011", 
    75 => "11001100110", 76 => "00000101100", 77 => "00000011101", 
    78 => "11011001101", 79 => "11111011001", 80 => "00001011100", 
    81 => "11100100100", 82 => "11111001010", 83 => "00101001011", 
    84 => "00010010000", 85 => "11100011001", 86 => "11100101001", 
    87 => "11100100001", 88 => "00001001001", 89 => "11010101001", 
    90 => "01000000101", 91 => "11011111111", 92 => "00100010010", 
    93 => "00010001000", 94 => "00000100110", 95 => "00000010101", 
    96 => "00100001101", 97 => "00100111000", 98 => "11100101000", 
    99 => "11111110000", 100 => "01010001011", 101 => "00011110100", 
    102 => "11011011100", 103 => "10111001001", 104 => "11011100000", 
    105 => "00010010001", 106 => "00010111100", 107 => "00000110110", 
    108 => "11110111000", 109 => "11011010110", 110 => "11111111100", 
    111 => "11111101110", 112 => "00100111111", 113 => "00100111110", 
    114 => "11111100100", 115 => "00101101110", 116 => "11000001111", 
    117 => "00111011001", 118 => "00100010011", 119 => "11101101010", 
    120 => "11100111001", 121 => "01001111001", 122 => "11100101010", 
    123 => "11111100101", 124 => "00011000111", 125 => "00001001100", 
    126 => "11100011000", 127 => "11010111111", 128 => "00001001101", 
    129 => "00101000110", 130 => "11010101100", 131 => "00011101011", 
    132 => "00001111101", 133 => "11101001111", 134 => "11110001101", 
    135 => "00001010100", 136 => "00100010001", 137 => "00110011111", 
    138 => "11010111011", 139 => "00101001110", 140 => "01001000011", 
    141 => "11010001000", 142 => "11011101111", 143 => "00000100110", 
    144 => "11011000010", 145 => "11111010100", 146 => "11101100110", 
    147 => "10110010111", 148 => "00010110001", 149 => "11010000000", 
    150 => "11101101001", 151 => "00100101010", 152 => "00110001000", 
    153 => "00010110011", 154 => "11001101001", 155 => "11001100111", 
    156 => "00001111100", 157 => "00000100111", 158 => "00101111101", 
    159 => "11011001111", 160 to 161=> "11101011011", 162 => "11001101001", 
    163 => "00011011100", 164 => "10100101111", 165 => "00011001110", 
    166 => "10110111001", 167 => "11011110110", 168 => "11100110010", 
    169 => "00111111111", 170 => "11101110010", 171 => "10110101010", 
    172 => "00000000011", 173 => "01000011001", 174 => "00011111100", 
    175 => "11110010110", 176 => "11110011100", 177 => "11110110001", 
    178 => "11011111110", 179 => "00110100110", 180 => "00001010010", 
    181 => "01000111010", 182 => "00000100101", 183 => "11000111001", 
    184 => "00100010011", 185 => "11100101001", 186 => "00000111110", 
    187 => "11011010000", 188 => "11010100111", 189 => "11110011011", 
    190 => "11000101010", 191 => "11001010110", 192 => "11101101111", 
    193 => "00011001011", 194 => "10110011010", 195 => "11010000111", 
    196 => "10011101100", 197 => "00111000111", 198 => "00001100000", 
    199 => "11110110011", 200 => "11110011001", 201 => "11011000110", 
    202 => "00000000000", 203 => "11101010110", 204 => "00010010001", 
    205 => "00101010111", 206 => "11101000011", 207 => "11111001111", 
    208 => "00100110000", 209 => "01000110110", 210 => "11010100111", 
    211 => "00010111110", 212 => "01000011001", 213 => "11100000000", 
    214 => "00010000110", 215 => "11101000100", 216 => "00111000110", 
    217 => "00001110000", 218 => "11111101101", 219 => "11101001110", 
    220 => "00100000011", 221 => "00000001010", 222 => "11110111111", 
    223 => "11010111001", 224 => "00001001101", 225 => "00100010010", 
    226 => "00011100000", 227 => "11010110111", 228 => "00011010010", 
    229 => "11011101001", 230 => "00101100111", 231 => "11010001101", 
    232 => "11101001011", 233 => "11101100010", 234 => "11100110001", 
    235 => "11100110110", 236 => "11111000101", 237 => "10110101001", 
    238 => "00100100101", 239 => "00111010101", 240 => "11010010111", 
    241 => "11010011111", 242 => "11100000000", 243 => "11011111010", 
    244 => "11101000001", 245 => "00110101111", 246 => "00110101011", 
    247 => "10110010010", 248 => "00000110101", 249 => "11000111011", 
    250 => "00101101110", 251 => "10110001100", 252 => "11000010110", 
    253 => "11101111100", 254 => "10111110110", 255 => "01000010001", 
    256 => "00101101000", 257 => "00001000100", 258 => "11011011101", 
    259 => "11101110000", 260 => "11100110010", 261 => "00110001110", 
    262 => "11011101100", 263 => "00111100011", 264 => "00101100111", 
    265 => "00101101001", 266 => "00101010000", 267 => "00001110001", 
    268 => "11011111111", 269 => "11110110110", 270 => "11000011110", 
    271 => "11010010011", 272 => "00100110111", 273 => "00101010000", 
    274 => "11101000110", 275 => "00111010000", 276 => "11001100110", 
    277 => "11101000110", 278 => "00100111001", 279 => "11101011110", 
    280 => "00110000101", 281 => "11010111100", 282 => "11111100000", 
    283 => "11001111011", 284 => "00001000001", 285 => "11110111111", 
    286 => "11010111110", 287 => "00111010110", 288 => "11111110000", 
    289 => "00101100000", 290 => "00101000100", 291 => "11010101000", 
    292 => "00111011100", 293 => "11110110010", 294 => "00000101101", 
    295 => "00000011000", 296 => "11101010011", 297 => "11101010000", 
    298 => "11001001110", 299 => "11011001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity cnn_dense_out_weiocq is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 300;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of cnn_dense_out_weiocq is
    component cnn_dense_out_weiocq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    cnn_dense_out_weiocq_rom_U :  component cnn_dense_out_weiocq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


