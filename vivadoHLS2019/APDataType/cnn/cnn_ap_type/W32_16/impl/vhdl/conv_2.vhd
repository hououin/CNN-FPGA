-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_we0 : OUT STD_LOGIC;
    conv_out_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_10 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_weights_V_ce0 : STD_LOGIC;
    signal conv_2_weights_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal conv_2_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_2_bias_V_ce0 : STD_LOGIC;
    signal conv_2_bias_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln8_fu_333_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_reg_984 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_345_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_992 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_357_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_1000 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_381_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_reg_1005 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_391_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_1013 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1018 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_10_fu_401_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_10_reg_1023 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_V_addr_reg_1028 : STD_LOGIC_VECTOR (10 downto 0);
    signal wr_fu_429_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_1036 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln1116_1_fu_457_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1116_1_reg_1041 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1117_fu_471_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1117_reg_1046 : STD_LOGIC_VECTOR (7 downto 0);
    signal wc_fu_487_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_1059 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln1116_1_fu_522_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1116_1_reg_1064 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln21_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1117_fu_563_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1117_reg_1069 : STD_LOGIC_VECTOR (10 downto 0);
    signal ch_fu_575_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_reg_1077 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln24_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_V_4_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_reg_1097 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln885_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1105 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_34_fu_684_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_34_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_V_5_fu_696_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_5_reg_1114 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_1120 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_835_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1136 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln924_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_reg_1146 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_0_reg_201 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_213 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_225 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_237 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_Val2_s_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal wr_0_reg_260 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_283 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_23_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_306 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_320_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln924_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_12_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_6_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_3_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_328_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_fu_363_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln203_fu_367_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_373_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_11_fu_405_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_6_fu_409_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_439_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_2_fu_447_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1116_fu_435_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1116_fu_451_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_419_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_461_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1117_fu_471_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_3_fu_493_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1116_fu_497_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1116_fu_502_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_506_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_514_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_fu_477_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_528_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1117_1_fu_534_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1117_fu_538_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_551_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_543_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1117_2_fu_559_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1116_4_fu_581_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1116_1_fu_589_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_cast_fu_594_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1116_2_fu_602_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1116_5_fu_585_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1117_1_fu_612_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_630_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_fu_630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_636_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_fu_630_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln728_fu_644_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln1192_fu_648_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_fu_652_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln1265_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_35_fu_703_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_713_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_733_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_749_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln897_fu_753_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln897_fu_759_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln897_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_769_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln897_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_787_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_801_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln908_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_856_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_861_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_865_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_871_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_881_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_887_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_12_fu_901_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_917_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_909_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_922_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_6_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_928_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_36_fu_935_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_952_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln924_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1117_fu_471_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_dcmp_64ns_64ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_2_conv_2_weieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component conv_2_conv_2_biafYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    conv_2_weights_V_U : component conv_2_conv_2_weieOg
    generic map (
        DataWidth => 18,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_V_address0,
        ce0 => conv_2_weights_V_ce0,
        q0 => conv_2_weights_V_q0);

    conv_2_bias_V_U : component conv_2_conv_2_biafYi
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_V_address0,
        ce0 => conv_2_bias_V_ce0,
        q0 => conv_2_bias_V_q0);

    cnn_dcmp_64ns_64ndEe_U9 : component cnn_dcmp_64ns_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_328_p0,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_328_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_385_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_225 <= c_reg_1000;
            elsif (((icmp_ln8_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_225 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                ch_0_reg_306 <= ch_reg_1077;
            elsif (((icmp_ln21_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ch_0_reg_306 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                f_0_reg_237 <= f_reg_1013;
            elsif (((icmp_ln11_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_237 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_23_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_Val2_23_reg_294 <= ret_V_fu_652_p2(47 downto 16);
            elsif (((icmp_ln21_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_Val2_23_reg_294 <= w_sum_1_reg_271;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_481_p2 = ap_const_lv1_1))) then 
                p_Val2_s_reg_248 <= w_sum_1_reg_271;
            elsif (((icmp_ln14_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_s_reg_248 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_213 <= add_ln8_reg_984;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_213 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_201 <= r_reg_992;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_201 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_569_p2 = ap_const_lv1_1))) then 
                w_sum_1_reg_271 <= p_Val2_23_reg_294;
            elsif (((icmp_ln18_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_sum_1_reg_271 <= p_Val2_s_reg_248;
            end if; 
        end if;
    end process;

    wc_0_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_569_p2 = ap_const_lv1_1))) then 
                wc_0_reg_283 <= wc_reg_1059;
            elsif (((icmp_ln18_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                wc_0_reg_283 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_481_p2 = ap_const_lv1_1))) then 
                wr_0_reg_260 <= wr_reg_1036;
            elsif (((icmp_ln14_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_260 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_984 <= add_ln8_fu_333_p2;
                r_reg_992 <= r_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_1000 <= c_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ch_reg_1077 <= ch_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_V_addr_reg_1028 <= zext_ln203_12_fu_414_p1(11 - 1 downto 0);
                    zext_ln203_10_reg_1023(4 downto 0) <= zext_ln203_10_fu_401_p1(4 downto 0);
                    zext_ln26_reg_1018(4 downto 0) <= zext_ln26_fu_397_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_1013 <= f_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln885_reg_1105 <= icmp_ln885_fu_678_p2;
                tmp_V_4_reg_1097 <= tmp_V_4_fu_672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln908_reg_1131 <= icmp_ln908_fu_829_p2;
                    or_ln_reg_1126(0) <= or_ln_fu_821_p3(0);
                p_Result_34_reg_1109 <= tmp_V_4_reg_1097(31 downto 31);
                sub_ln894_reg_1120 <= sub_ln894_fu_721_p2;
                tmp_V_5_reg_1114 <= tmp_V_5_fu_696_p3;
                trunc_ln893_reg_1136 <= trunc_ln893_fu_835_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                icmp_ln924_1_reg_1151 <= icmp_ln924_1_fu_968_p2;
                icmp_ln924_reg_1146 <= icmp_ln924_fu_962_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_ln1117_reg_1046 <= mul_ln1117_fu_471_p2;
                sext_ln1116_1_reg_1041 <= sext_ln1116_1_fu_457_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln1116_1_reg_1064(6 downto 1) <= sub_ln1116_1_fu_522_p2(6 downto 1);
                    sub_ln1117_reg_1069(10 downto 1) <= sub_ln1117_fu_563_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_1059 <= wc_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_1036 <= wr_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln14_reg_1005(10 downto 4) <= zext_ln14_fu_381_p1(10 downto 4);
            end if;
        end if;
    end process;
    zext_ln14_reg_1005(3 downto 0) <= "0000";
    zext_ln14_reg_1005(11) <= '0';
    zext_ln26_reg_1018(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln203_10_reg_1023(10 downto 5) <= "000000";
    sub_ln1116_1_reg_1064(0) <= '0';
    sub_ln1117_reg_1069(0) <= '0';
    or_ln_reg_1126(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_351_p2, ap_CS_fsm_state4, icmp_ln14_fu_385_p2, ap_CS_fsm_state5, icmp_ln18_fu_423_p2, ap_CS_fsm_state6, icmp_ln21_fu_481_p2, ap_CS_fsm_state7, icmp_ln24_fu_569_p2, ap_CS_fsm_state9, icmp_ln885_fu_678_p2, icmp_ln8_fu_339_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_339_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_385_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_481_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_569_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln885_fu_678_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    a_fu_781_p2 <= (icmp_ln897_fu_743_p2 and icmp_ln897_1_fu_775_p2);
    add_ln1116_1_fu_589_p2 <= std_logic_vector(unsigned(zext_ln1116_4_fu_581_p1) + unsigned(sub_ln1116_1_reg_1064));
    add_ln1116_2_fu_602_p2 <= std_logic_vector(unsigned(zext_ln203_10_reg_1023) + unsigned(tmp_26_cast_fu_594_p3));
    add_ln1116_fu_497_p2 <= std_logic_vector(unsigned(zext_ln1116_3_fu_493_p1) + unsigned(sext_ln1116_1_reg_1041));
    add_ln1117_1_fu_612_p2 <= std_logic_vector(unsigned(zext_ln1116_5_fu_585_p1) + unsigned(sub_ln1117_reg_1069));
    add_ln1117_fu_538_p2 <= std_logic_vector(unsigned(zext_ln1117_1_fu_534_p1) + unsigned(mul_ln1117_reg_1046));
    add_ln203_6_fu_409_p2 <= std_logic_vector(unsigned(zext_ln14_reg_1005) + unsigned(zext_ln203_11_fu_405_p1));
    add_ln203_fu_367_p2 <= std_logic_vector(unsigned(phi_mul_reg_213) + unsigned(zext_ln203_fu_363_p1));
    add_ln26_1_fu_528_p2 <= std_logic_vector(unsigned(c_0_reg_225) + unsigned(zext_ln21_fu_477_p1));
    add_ln26_fu_461_p2 <= std_logic_vector(unsigned(zext_ln18_fu_419_p1) + unsigned(r_0_reg_201));
    add_ln8_fu_333_p2 <= std_logic_vector(unsigned(phi_mul_reg_213) + unsigned(ap_const_lv7_B));
    add_ln908_fu_842_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_1120));
    add_ln915_fu_922_p2 <= std_logic_vector(unsigned(sub_ln915_fu_917_p2) + unsigned(select_ln915_fu_909_p3));
    and_ln899_fu_809_p2 <= (xor_ln899_fu_795_p2 and p_Result_32_fu_801_p3);
    and_ln924_fu_978_p2 <= (or_ln924_fu_974_p2 and grp_fu_328_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_339_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_339_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_320_p4_assign_proc : process(tmp_V_4_reg_1097, icmp_ln885_reg_1105, ap_CS_fsm_state12, and_ln924_fu_978_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
            if (((icmp_ln885_reg_1105 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln924_fu_978_p2))) then 
                ap_phi_mux_storemerge_phi_fu_320_p4 <= tmp_V_4_reg_1097;
            elsif (((ap_const_lv1_0 = and_ln924_fu_978_p2) or (icmp_ln885_reg_1105 = ap_const_lv1_1))) then 
                ap_phi_mux_storemerge_phi_fu_320_p4 <= ap_const_lv32_0;
            else 
                ap_phi_mux_storemerge_phi_fu_320_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_320_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_339_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_339_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_357_p2 <= std_logic_vector(unsigned(c_0_reg_225) + unsigned(ap_const_lv4_1));
    ch_fu_575_p2 <= std_logic_vector(unsigned(ch_0_reg_306) + unsigned(ap_const_lv3_1));
    conv_2_bias_V_address0 <= zext_ln26_reg_1018(4 - 1 downto 0);

    conv_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_V_address0 <= zext_ln1116_6_fu_607_p1(10 - 1 downto 0);

    conv_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_address0 <= conv_out_V_addr_reg_1028;

    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_d0 <= ap_phi_mux_storemerge_phi_fu_320_p4;

    conv_out_V_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_out_V_we0 <= ap_const_logic_1;
        else 
            conv_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_391_p2 <= std_logic_vector(unsigned(f_0_reg_237) + unsigned(ap_const_lv5_1));
    grp_fu_328_p0 <= p_Result_36_fu_935_p5;
    icmp_ln11_fu_351_p2 <= "1" when (c_0_reg_225 = ap_const_lv4_B) else "0";
    icmp_ln14_fu_385_p2 <= "1" when (f_0_reg_237 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_423_p2 <= "1" when (wr_0_reg_260 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_481_p2 <= "1" when (wc_0_reg_283 = ap_const_lv2_3) else "0";
    icmp_ln24_fu_569_p2 <= "1" when (ch_0_reg_306 = ap_const_lv3_6) else "0";
    icmp_ln885_fu_678_p2 <= "1" when (tmp_V_4_fu_672_p2 = ap_const_lv32_0) else "0";
    icmp_ln897_1_fu_775_p2 <= "0" when (p_Result_s_fu_769_p2 = ap_const_lv32_0) else "1";
    icmp_ln897_fu_743_p2 <= "1" when (signed(tmp_10_fu_733_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln8_fu_339_p2 <= "1" when (r_0_reg_201 = ap_const_lv4_B) else "0";
    icmp_ln908_fu_829_p2 <= "1" when (signed(lsb_index_fu_727_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln924_1_fu_968_p2 <= "1" when (trunc_ln3_fu_952_p4 = ap_const_lv52_0) else "0";
    icmp_ln924_fu_962_p2 <= "0" when (add_ln915_fu_922_p2 = ap_const_lv11_7FF) else "1";
    input_V_address0 <= zext_ln1117_3_fu_617_p1(10 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    l_fu_713_p3_proc : process(p_Result_35_fu_703_p4)
    begin
        l_fu_713_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_35_fu_703_p4(i) = '1' then
                l_fu_713_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lhs_V_fu_636_p3 <= (p_Val2_23_reg_294 & ap_const_lv16_0);
    lsb_index_fu_727_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_721_p2));
    lshr_ln897_fu_763_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln897_fu_759_p1(31-1 downto 0)))));
    lshr_ln908_fu_847_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_5_reg_1114),to_integer(unsigned('0' & add_ln908_fu_842_p2(31-1 downto 0)))));
    m_1_fu_871_p3 <= 
        zext_ln908_fu_852_p1 when (icmp_ln908_reg_1131(0) = '1') else 
        shl_ln908_fu_865_p2;
    m_2_fu_881_p2 <= std_logic_vector(unsigned(zext_ln911_fu_878_p1) + unsigned(m_1_fu_871_p3));
    m_5_fu_887_p4 <= m_2_fu_881_p2(63 downto 1);
    m_6_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_fu_887_p4),64));
    m_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1114),64));
    mul_ln1117_fu_471_p0 <= mul_ln1117_fu_471_p00(4 - 1 downto 0);
    mul_ln1117_fu_471_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_461_p2),8));
    mul_ln1117_fu_471_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1117_fu_471_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln899_fu_815_p2 <= (and_ln899_fu_809_p2 or a_fu_781_p2);
    or_ln924_fu_974_p2 <= (icmp_ln924_reg_1146 or icmp_ln924_1_reg_1151);
    or_ln_fu_821_p3 <= (ap_const_lv31_0 & or_ln899_fu_815_p2);
    p_Result_32_fu_801_p3 <= tmp_V_5_fu_696_p3(to_integer(unsigned(lsb_index_fu_727_p2)) downto to_integer(unsigned(lsb_index_fu_727_p2))) when (to_integer(unsigned(lsb_index_fu_727_p2))>= 0 and to_integer(unsigned(lsb_index_fu_727_p2))<=31) else "-";
    p_Result_34_fu_684_p3 <= tmp_V_4_reg_1097(31 downto 31);
    
    p_Result_35_fu_703_p4_proc : process(tmp_V_5_fu_696_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_35_fu_703_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_696_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_35_fu_703_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_35_fu_703_p4_i) := tmp_V_5_fu_696_p3(32-1-p_Result_35_fu_703_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_35_fu_703_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_36_fu_935_p5 <= (tmp_3_fu_928_p3 & m_6_fu_897_p1(51 downto 0));
    p_Result_s_fu_769_p2 <= (tmp_V_5_fu_696_p3 and lshr_ln897_fu_763_p2);
    p_shl1_cast_fu_543_p3 <= (add_ln1117_fu_538_p2 & ap_const_lv3_0);
    p_shl_fu_506_p3 <= (trunc_ln1116_fu_502_p1 & ap_const_lv3_0);
    r_V_fu_630_p0 <= conv_2_weights_V_q0;
    r_V_fu_630_p1 <= input_V_q0;
    r_V_fu_630_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_630_p0) * signed(r_V_fu_630_p1))), 49));
    r_fu_345_p2 <= std_logic_vector(unsigned(r_0_reg_201) + unsigned(ap_const_lv4_1));
    ret_V_fu_652_p2 <= std_logic_vector(unsigned(zext_ln728_fu_644_p1) + unsigned(zext_ln1192_fu_648_p1));
    select_ln915_fu_909_p3 <= 
        ap_const_lv11_3FF when (tmp_12_fu_901_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1116_1_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1116_fu_451_p2),6));

        sext_ln1265_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_2_bias_V_q0),32));

    shl_ln908_fu_865_p2 <= std_logic_vector(shift_left(unsigned(m_fu_839_p1),to_integer(unsigned('0' & zext_ln908_1_fu_861_p1(31-1 downto 0)))));
    sub_ln1116_1_fu_522_p2 <= std_logic_vector(unsigned(p_shl_fu_506_p3) - unsigned(tmp_13_fu_514_p3));
    sub_ln1116_fu_451_p2 <= std_logic_vector(unsigned(zext_ln1116_2_fu_447_p1) - unsigned(zext_ln1116_fu_435_p1));
    sub_ln1117_fu_563_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_543_p3) - unsigned(zext_ln1117_2_fu_559_p1));
    sub_ln894_fu_721_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_713_p3));
    sub_ln897_fu_753_p2 <= std_logic_vector(unsigned(ap_const_lv6_16) - unsigned(trunc_ln897_fu_749_p1));
    sub_ln908_fu_856_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_1120));
    sub_ln915_fu_917_p2 <= std_logic_vector(unsigned(ap_const_lv11_10) - unsigned(trunc_ln893_reg_1136));
    tmp_10_fu_733_p4 <= lsb_index_fu_727_p2(31 downto 1);
    tmp_11_fu_787_p3 <= lsb_index_fu_727_p2(31 downto 31);
    tmp_12_fu_901_p3 <= m_2_fu_881_p2(54 downto 54);
    tmp_13_fu_514_p3 <= (add_ln1116_fu_497_p2 & ap_const_lv1_0);
    tmp_14_fu_551_p3 <= (add_ln1117_fu_538_p2 & ap_const_lv1_0);
    tmp_26_cast_fu_594_p3 <= (add_ln1116_1_fu_589_p2 & ap_const_lv4_0);
    tmp_3_fu_928_p3 <= (p_Result_34_reg_1109 & add_ln915_fu_922_p2);
    tmp_4_fu_439_p3 <= (wr_0_reg_260 & ap_const_lv2_0);
    tmp_6_fu_373_p3 <= (add_ln203_fu_367_p2 & ap_const_lv4_0);
    tmp_V_4_fu_672_p2 <= std_logic_vector(signed(sext_ln1265_fu_668_p1) + signed(p_Val2_s_reg_248));
    tmp_V_5_fu_696_p3 <= 
        tmp_V_fu_691_p2 when (p_Result_34_fu_684_p3(0) = '1') else 
        tmp_V_4_reg_1097;
    tmp_V_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_V_4_reg_1097));
    trunc_ln1116_fu_502_p1 <= add_ln1116_fu_497_p2(4 - 1 downto 0);
    trunc_ln3_fu_952_p4 <= m_2_fu_881_p2(52 downto 1);
    trunc_ln893_fu_835_p1 <= l_fu_713_p3(11 - 1 downto 0);
    trunc_ln897_fu_749_p1 <= sub_ln894_fu_721_p2(6 - 1 downto 0);
    wc_fu_487_p2 <= std_logic_vector(unsigned(wc_0_reg_283) + unsigned(ap_const_lv2_1));
    wr_fu_429_p2 <= std_logic_vector(unsigned(wr_0_reg_260) + unsigned(ap_const_lv2_1));
    xor_ln899_fu_795_p2 <= (tmp_11_fu_787_p3 xor ap_const_lv1_1);
    zext_ln1116_2_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_439_p3),5));
    zext_ln1116_3_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_283),6));
    zext_ln1116_4_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_306),7));
    zext_ln1116_5_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_306),11));
    zext_ln1116_6_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_2_fu_602_p2),64));
    zext_ln1116_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_260),5));
    zext_ln1117_1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_528_p2),8));
    zext_ln1117_2_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_551_p3),11));
    zext_ln1117_3_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_1_fu_612_p2),64));
    zext_ln1192_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_630_p2),50));
    zext_ln14_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_373_p3),12));
    zext_ln18_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_260),4));
    zext_ln203_10_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_237),11));
    zext_ln203_11_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_237),12));
    zext_ln203_12_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_6_fu_409_p2),64));
    zext_ln203_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_225),7));
    zext_ln21_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_283),4));
    zext_ln26_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_237),64));
    zext_ln728_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_636_p3),50));
    zext_ln897_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_753_p2),32));
    zext_ln908_1_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_856_p2),64));
    zext_ln908_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_847_p2),64));
    zext_ln911_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1126),64));
end behav;
