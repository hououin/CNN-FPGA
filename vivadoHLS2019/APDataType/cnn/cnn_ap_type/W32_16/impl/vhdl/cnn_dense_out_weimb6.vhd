-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cnn_dense_out_weimb6_rom is 
    generic(
             DWIDTH     : integer := 17; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 300
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cnn_dense_out_weimb6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11111110011111111", 1 => "00101100100011100", 
    2 => "11111001111010100", 3 => "00010100000111100", 
    4 => "11011111011011001", 5 => "10111010101111000", 
    6 => "11100000101000110", 7 => "00001010110111111", 
    8 => "00011101111011001", 9 => "11010001011100011", 
    10 => "10101101000010011", 11 => "00101110010010011", 
    12 => "11000111110111010", 13 => "11001001011110101", 
    14 => "00101101110000001", 15 => "11010001010101110", 
    16 => "11011001011111011", 17 => "00100100001100000", 
    18 => "11001111000000111", 19 => "11001001101100010", 
    20 => "11010111001011011", 21 => "11110010011100100", 
    22 => "11100010000010010", 23 => "11000011001100000", 
    24 => "00011001010011000", 25 => "11101010110100111", 
    26 => "00110011101110111", 27 => "00011001100001001", 
    28 => "00110100100011000", 29 => "00110011010110000", 
    30 => "11000000000110101", 31 => "00110010100100100", 
    32 => "00001101111110010", 33 => "00011011100100111", 
    34 => "11010100001001000", 35 => "11110101000111101", 
    36 => "11101111001010111", 37 => "00000101101101110", 
    38 => "11000110100010101", 39 => "11001010110010000", 
    40 => "00010001001010111", 41 => "11100010101100000", 
    42 => "11111111100000111", 43 => "11110101001101000", 
    44 => "10111001001100001", 45 => "11010011110000000", 
    46 => "11110110011011001", 47 => "00101111111000110", 
    48 => "11100000111001100", 49 => "11000100010011000", 
    50 => "00010011110011000", 51 => "10111101111011001", 
    52 => "00000000010010011", 53 => "11011111101110110", 
    54 => "01010000010000100", 55 => "11001000101010101", 
    56 => "00001110110001100", 57 => "11011100001011100", 
    58 => "11111000100100010", 59 => "11110001101000001", 
    60 => "11001001111100000", 61 => "11011110101111000", 
    62 => "11101100100000011", 63 => "11100001111100100", 
    64 => "00110111101101111", 65 => "10111110000101101", 
    66 => "11000101101010100", 67 => "11110110010010101", 
    68 => "00101110001100101", 69 => "00000100011000001", 
    70 => "00011111010000001", 71 => "11010001001010011", 
    72 => "00111110101110001", 73 => "11110011011000101", 
    74 => "00001111011011010", 75 => "11001100110011111", 
    76 => "00000101100101111", 77 => "00000011101010011", 
    78 => "11011001101101010", 79 => "11111011001011110", 
    80 => "00001011100100111", 81 => "11100100100011010", 
    82 => "11111001010111001", 83 => "00101001011111001", 
    84 => "00010010000100001", 85 => "11100011001001000", 
    86 => "11100101001010000", 87 => "11100100001011010", 
    88 => "00001001001111100", 89 => "11010101001111001", 
    90 => "01000000101001011", 91 => "11011111111101011", 
    92 => "00100010010111010", 93 => "00010001000001101", 
    94 => "00000100110000001", 95 => "00000010101100100", 
    96 => "00100001101100001", 97 => "00100111000111011", 
    98 => "11100101000010111", 99 => "11111110000100111", 
    100 => "01010001011011000", 101 => "00011110100111111", 
    102 => "11011011100011100", 103 => "10111001001100111", 
    104 => "11011100000110100", 105 => "00010010001101110", 
    106 => "00010111100110110", 107 => "00000110110101111", 
    108 => "11110111000111010", 109 => "11011010110110111", 
    110 => "11111111100001111", 111 => "11111101110011011", 
    112 => "00100111111001001", 113 => "00100111110000011", 
    114 => "11111100100011001", 115 => "00101101110000101", 
    116 => "11000001111001011", 117 => "00111011001111011", 
    118 => "00100010011011110", 119 => "11101101010000001", 
    120 => "11100111001011010", 121 => "01001111001101100", 
    122 => "11100101010010101", 123 => "11111100101100000", 
    124 => "00011000111000101", 125 => "00001001100010100", 
    126 => "11100011000111001", 127 => "11010111111011100", 
    128 => "00001001101101010", 129 => "00101000110100110", 
    130 => "11010101100100011", 131 => "00011101011010010", 
    132 => "00001111101000010", 133 => "11101001111101010", 
    134 => "11110001101001001", 135 => "00001010100110101", 
    136 => "00100010001111011", 137 => "00110011111001010", 
    138 => "11010111011110100", 139 => "00101001110100011", 
    140 => "01001000011111111", 141 => "11010001000100110", 
    142 => "11011101111010101", 143 => "00000100110010001", 
    144 => "11011000010001110", 145 => "11111010100011110", 
    146 => "11101100110111001", 147 => "10110010111101100", 
    148 => "00010110001111010", 149 => "11010000000011100", 
    150 => "11101101001010010", 151 => "00100101010101101", 
    152 => "00110001000110001", 153 => "00010110011101000", 
    154 => "11001101001100011", 155 => "11001100111100100", 
    156 => "00001111100000001", 157 => "00000100111100001", 
    158 => "00101111101110100", 159 => "11011001111001000", 
    160 => "11101011011110011", 161 => "11101011011000001", 
    162 => "11001101001100001", 163 => "00011011100100011", 
    164 => "10100101111110101", 165 => "00011001110001110", 
    166 => "10110111001011110", 167 => "11011110110001010", 
    168 => "11100110010111111", 169 => "00111111111000010", 
    170 => "11101110010111111", 171 => "10110101010001011", 
    172 => "00000000011001101", 173 => "01000011001100101", 
    174 => "00011111100010011", 175 => "11110010110100110", 
    176 => "11110011100100010", 177 => "11110110001111100", 
    178 => "11011111110110001", 179 => "00110100110010011", 
    180 => "00001010010000100", 181 => "01000111010001000", 
    182 => "00000100101101011", 183 => "11000111001100001", 
    184 => "00100010011000010", 185 => "11100101001001110", 
    186 => "00000111110111101", 187 => "11011010000010010", 
    188 => "11010100111100101", 189 => "11110011011010011", 
    190 => "11000101010011000", 191 => "11001010110011101", 
    192 => "11101101111101001", 193 => "00011001011000011", 
    194 => "10110011010011000", 195 => "11010000111100101", 
    196 => "10011101100110011", 197 => "00111000111010001", 
    198 => "00001100000101000", 199 => "11110110011101000", 
    200 => "11110011001100011", 201 => "11011000110110001", 
    202 => "00000000000011100", 203 => "11101010110100000", 
    204 => "00010010001111110", 205 => "00101010111100011", 
    206 => "11101000011110001", 207 => "11111001111000101", 
    208 => "00100110000011001", 209 => "01000110110111010", 
    210 => "11010100111011101", 211 => "00010111110100000", 
    212 => "01000011001110010", 213 => "11100000000000001", 
    214 => "00010000110110101", 215 => "11101000100101101", 
    216 => "00111000110111001", 217 => "00001110000010110", 
    218 => "11111101101001011", 219 => "11101001110010001", 
    220 => "00100000011000101", 221 => "00000001010011100", 
    222 => "11110111111110111", 223 => "11010111001110101", 
    224 => "00001001101101110", 225 => "00100010010101000", 
    226 => "00011100000100010", 227 => "11010110111001010", 
    228 => "00011010010000110", 229 => "11011101001110100", 
    230 => "00101100111111110", 231 => "11010001101001001", 
    232 => "11101001011111000", 233 => "11101100010110100", 
    234 => "11100110001010100", 235 => "11100110110101111", 
    236 => "11111000101011010", 237 => "10110101001011101", 
    238 => "00100100101001101", 239 => "00111010101001101", 
    240 => "11010010111100111", 241 => "11010011111111000", 
    242 => "11100000000010100", 243 => "11011111010001000", 
    244 => "11101000001011111", 245 => "00110101111010010", 
    246 => "00110101011000011", 247 => "10110010010011001", 
    248 => "00000110101010110", 249 => "11000111011000010", 
    250 => "00101101110111001", 251 => "10110001100101100", 
    252 => "11000010110111001", 253 => "11101111100100100", 
    254 => "10111110110010010", 255 => "01000010001110110", 
    256 => "00101101000100000", 257 => "00001000100110010", 
    258 => "11011011101100001", 259 => "11101110000100100", 
    260 => "11100110010001111", 261 => "00110001110010001", 
    262 => "11011101100010101", 263 => "00111100011101101", 
    264 => "00101100111111000", 265 => "00101101001101010", 
    266 => "00101010000011110", 267 => "00001110001101000", 
    268 => "11011111111010001", 269 => "11110110110110101", 
    270 => "11000011110011100", 271 => "11010010011110110", 
    272 => "00100110111001001", 273 => "00101010000100100", 
    274 => "11101000110001110", 275 => "00111010000001111", 
    276 => "11001100110101011", 277 => "11101000110011100", 
    278 => "00100111001001110", 279 => "11101011110110111", 
    280 => "00110000101010100", 281 => "11010111100111011", 
    282 => "11111100000001001", 283 => "11001111011010011", 
    284 => "00001000001100011", 285 => "11110111111101000", 
    286 => "11010111110100010", 287 => "00111010110010110", 
    288 => "11111110000101111", 289 => "00101100000011100", 
    290 => "00101000100010000", 291 => "11010101000101011", 
    292 => "00111011100101110", 293 => "11110110010000110", 
    294 => "00000101101011111", 295 => "00000011000111010", 
    296 => "11101010011110011", 297 => "11101010000000100", 
    298 => "11001001110000001", 299 => "11011001011110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity cnn_dense_out_weimb6 is
    generic (
        DataWidth : INTEGER := 17;
        AddressRange : INTEGER := 300;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of cnn_dense_out_weimb6 is
    component cnn_dense_out_weimb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    cnn_dense_out_weimb6_rom_U :  component cnn_dense_out_weimb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


