-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_2_out_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_V_ce0 : OUT STD_LOGIC;
    dense_2_out_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_V_ce0 : OUT STD_LOGIC;
    prediction_V_we0 : OUT STD_LOGIC;
    prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of dense_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_out_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_ce0 : STD_LOGIC;
    signal dense_out_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_V_ce0 : STD_LOGIC;
    signal dense_out_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_fu_198_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_612 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln48_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_617 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln41_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_fu_208_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_reg_623 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_fu_218_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_631 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln46_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal w_sum_V_fu_341_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_sum_V_reg_657 : STD_LOGIC_VECTOR (13 downto 0);
    signal carry_1_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_367_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_375_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_reg_674 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_7_fu_498_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_ce0 : STD_LOGIC;
    signal dense_array_V_we0 : STD_LOGIC;
    signal dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_179_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_179_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_179_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_179_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_179_dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_179_dense_array_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_179_dense_array_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_179_dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_179_prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_179_prediction_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_179_prediction_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_179_prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal d_0_reg_145 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_Val2_s_reg_156 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_0_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_soft_max_fu_179_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln1116_2_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln340_6_fu_592_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_229_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_241_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_fu_237_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_1_fu_249_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_fu_253_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_1_fu_259_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln703_fu_601_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal lhs_V_2_fu_280_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln728_fu_288_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln703_fu_277_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_fu_297_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_fu_292_p2 : STD_LOGIC_VECTOR (21 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1192_fu_292_p2 : signal is "no";
    signal tmp_17_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_fu_311_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_fu_337_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_2_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_1_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_484_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln388_3_fu_491_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1265_fu_510_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_514_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_514_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_506_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_6_fu_518_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1265_fu_510_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_22_fu_532_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_22_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_576_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln388_fu_584_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln703_fu_601_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln703_fu_601_p10 : STD_LOGIC_VECTOR (21 downto 0);

    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce0 : OUT STD_LOGIC;
        dense_array_V_we0 : OUT STD_LOGIC;
        dense_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        dense_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_V_ce0 : OUT STD_LOGIC;
        prediction_V_we0 : OUT STD_LOGIC;
        prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_mul_mul_9s_13bwn IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component dense_out_dense_obtn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component dense_out_dense_obun IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dense_out_dense_abvn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    dense_out_weights_V_U : component dense_out_dense_obtn
    generic map (
        DataWidth => 9,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_weights_V_address0,
        ce0 => dense_out_weights_V_ce0,
        q0 => dense_out_weights_V_q0);

    dense_out_bias_V_U : component dense_out_dense_obun
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_bias_V_address0,
        ce0 => dense_out_bias_V_ce0,
        q0 => dense_out_bias_V_q0);

    dense_array_V_U : component dense_out_dense_abvn
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_V_address0,
        ce0 => dense_array_V_ce0,
        we0 => dense_array_V_we0,
        d0 => dense_array_V_d0,
        q0 => dense_array_V_q0);

    grp_soft_max_fu_179 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_soft_max_fu_179_ap_start,
        ap_done => grp_soft_max_fu_179_ap_done,
        ap_idle => grp_soft_max_fu_179_ap_idle,
        ap_ready => grp_soft_max_fu_179_ap_ready,
        dense_array_V_address0 => grp_soft_max_fu_179_dense_array_V_address0,
        dense_array_V_ce0 => grp_soft_max_fu_179_dense_array_V_ce0,
        dense_array_V_we0 => grp_soft_max_fu_179_dense_array_V_we0,
        dense_array_V_d0 => grp_soft_max_fu_179_dense_array_V_d0,
        dense_array_V_q0 => dense_array_V_q0,
        prediction_V_address0 => grp_soft_max_fu_179_prediction_V_address0,
        prediction_V_ce0 => grp_soft_max_fu_179_prediction_V_ce0,
        prediction_V_we0 => grp_soft_max_fu_179_prediction_V_we0,
        prediction_V_d0 => grp_soft_max_fu_179_prediction_V_d0);

    cnn_mul_mul_9s_13bwn_U668 : component cnn_mul_mul_9s_13bwn
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 13,
        dout_WIDTH => 22)
    port map (
        din0 => dense_out_weights_V_q0,
        din1 => mul_ln703_fu_601_p1,
        dout => mul_ln703_fu_601_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_soft_max_fu_179_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_soft_max_fu_179_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln41_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_soft_max_fu_179_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_179_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_179_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                d_0_reg_145 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                d_0_reg_145 <= d_reg_612;
            end if; 
        end if;
    end process;

    f_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                f_0_reg_168 <= f_reg_631;
            elsif (((icmp_ln41_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                f_0_reg_168 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_s_reg_156 <= select_ln340_7_fu_498_p3;
            elsif (((icmp_ln41_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_s_reg_156 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Range2_all_ones_reg_674 <= ret_V_fu_297_p2(22 downto 22);
                and_ln786_reg_680 <= and_ln786_fu_421_p2;
                carry_1_reg_663 <= carry_1_fu_361_p2;
                p_Result_20_reg_669 <= w_sum_V_fu_341_p2(13 downto 13);
                p_Result_s_reg_651 <= ret_V_fu_297_p2(22 downto 22);
                w_sum_V_reg_657 <= w_sum_V_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                d_reg_612 <= d_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                f_reg_631 <= f_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln46_reg_623(3 downto 0) <= zext_ln46_fu_208_p1(3 downto 0);
                    zext_ln48_reg_617(3 downto 0) <= zext_ln48_fu_204_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln48_reg_617(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_623(8 downto 4) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln41_fu_192_p2, ap_CS_fsm_state3, icmp_ln46_fu_212_p2, grp_soft_max_fu_179_ap_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln41_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln46_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_soft_max_fu_179_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    Range2_all_ones_fu_375_p3 <= ret_V_fu_297_p2(22 downto 22);
    add_ln1116_1_fu_259_p2 <= std_logic_vector(unsigned(zext_ln46_reg_623) + unsigned(add_ln1116_fu_253_p2));
    add_ln1116_fu_253_p2 <= std_logic_vector(unsigned(zext_ln1116_fu_237_p1) + unsigned(zext_ln1116_1_fu_249_p1));
    add_ln1192_fu_292_p2 <= std_logic_vector(signed(mul_ln703_fu_601_p2) + signed(lhs_V_2_fu_280_p3));
    and_ln781_fu_427_p2 <= (carry_1_reg_663 and Range2_all_ones_reg_674);
    and_ln786_fu_421_p2 <= (p_Result_20_fu_367_p3 and deleted_ones_fu_415_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_soft_max_fu_179_ap_done, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_soft_max_fu_179_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_soft_max_fu_179_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_soft_max_fu_179_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    carry_1_fu_361_p2 <= (xor_ln416_1_fu_355_p2 and p_Result_19_fu_321_p3);
    d_fu_198_p2 <= std_logic_vector(unsigned(d_0_reg_145) + unsigned(ap_const_lv4_1));
    deleted_ones_fu_415_p2 <= (or_ln416_fu_409_p2 and Range2_all_ones_fu_375_p3);
    dense_2_out_V_address0 <= zext_ln48_1_fu_224_p1(5 - 1 downto 0);

    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(zext_ln48_reg_617, grp_soft_max_fu_179_dense_array_V_address0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dense_array_V_address0 <= zext_ln48_reg_617(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dense_array_V_address0 <= grp_soft_max_fu_179_dense_array_V_address0;
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(grp_soft_max_fu_179_dense_array_V_ce0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dense_array_V_ce0 <= grp_soft_max_fu_179_dense_array_V_ce0;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_d0_assign_proc : process(grp_soft_max_fu_179_dense_array_V_d0, ap_CS_fsm_state6, ap_CS_fsm_state7, select_ln340_6_fu_592_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dense_array_V_d0 <= select_ln340_6_fu_592_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dense_array_V_d0 <= grp_soft_max_fu_179_dense_array_V_d0;
        else 
            dense_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_array_V_we0_assign_proc : process(grp_soft_max_fu_179_dense_array_V_we0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dense_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dense_array_V_we0 <= grp_soft_max_fu_179_dense_array_V_we0;
        else 
            dense_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_V_address0 <= zext_ln48_reg_617(4 - 1 downto 0);

    dense_out_bias_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_out_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_weights_V_address0 <= zext_ln1116_2_fu_264_p1(9 - 1 downto 0);

    dense_out_weights_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_out_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_218_p2 <= std_logic_vector(unsigned(f_0_reg_168) + unsigned(ap_const_lv5_1));
    grp_soft_max_fu_179_ap_start <= grp_soft_max_fu_179_ap_start_reg;
    icmp_ln41_fu_192_p2 <= "1" when (d_0_reg_145 = ap_const_lv4_A) else "0";
    icmp_ln46_fu_212_p2 <= "1" when (f_0_reg_168 = ap_const_lv5_1E) else "0";
    lhs_V_2_fu_280_p3 <= (p_Val2_s_reg_156 & ap_const_lv8_0);
        lhs_V_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_156),15));

    mul_ln703_fu_601_p1 <= mul_ln703_fu_601_p10(13 - 1 downto 0);
    mul_ln703_fu_601_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    or_ln340_4_fu_467_p2 <= (underflow_fu_462_p2 or overflow_fu_445_p2);
    or_ln340_5_fu_473_p2 <= (xor_ln785_1_fu_440_p2 or and_ln786_reg_680);
    or_ln340_6_fu_478_p2 <= (or_ln340_5_fu_473_p2 or and_ln781_fu_427_p2);
    or_ln340_fu_570_p2 <= (xor_ln340_fu_564_p2 or p_Result_22_fu_538_p3);
    or_ln416_1_fu_403_p2 <= (xor_ln416_2_fu_397_p2 or tmp_18_fu_347_p3);
    or_ln416_fu_409_p2 <= (xor_ln779_fu_391_p2 or or_ln416_1_fu_403_p2);
    or_ln785_fu_435_p2 <= (xor_ln785_fu_431_p2 or p_Result_20_reg_669);
    or_ln786_fu_451_p2 <= (and_ln786_reg_680 or and_ln781_fu_427_p2);
    overflow_fu_445_p2 <= (xor_ln785_1_fu_440_p2 and or_ln785_fu_435_p2);
    p_Result_19_fu_321_p3 <= add_ln1192_fu_292_p2(21 downto 21);
    p_Result_20_fu_367_p3 <= w_sum_V_fu_341_p2(13 downto 13);
    p_Result_21_fu_524_p3 <= ret_V_6_fu_518_p2(14 downto 14);
    p_Result_22_fu_538_p3 <= p_Val2_22_fu_532_p2(13 downto 13);
    p_Val2_22_fu_532_p2 <= std_logic_vector(signed(sext_ln1265_fu_510_p1) + signed(p_Val2_s_reg_156));
    p_Val2_24_fu_311_p4 <= add_ln1192_fu_292_p2(21 downto 8);
    prediction_V_address0 <= grp_soft_max_fu_179_prediction_V_address0;
    prediction_V_ce0 <= grp_soft_max_fu_179_prediction_V_ce0;
    prediction_V_d0 <= grp_soft_max_fu_179_prediction_V_d0;
    prediction_V_we0 <= grp_soft_max_fu_179_prediction_V_we0;
    ret_V_6_fu_518_p2 <= std_logic_vector(signed(rhs_V_fu_514_p1) + signed(lhs_V_fu_506_p1));
    ret_V_fu_297_p2 <= std_logic_vector(signed(sext_ln728_fu_288_p1) + signed(sext_ln703_fu_277_p1));
    rhs_V_fu_514_p0 <= dense_out_bias_V_q0;
        rhs_V_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_514_p0),15));

    select_ln340_3_fu_484_p3 <= 
        ap_const_lv14_1FFF when (or_ln340_4_fu_467_p2(0) = '1') else 
        w_sum_V_reg_657;
    select_ln340_6_fu_592_p3 <= 
        select_ln340_fu_576_p3 when (or_ln340_fu_570_p2(0) = '1') else 
        select_ln388_fu_584_p3;
    select_ln340_7_fu_498_p3 <= 
        select_ln340_3_fu_484_p3 when (or_ln340_6_fu_478_p2(0) = '1') else 
        select_ln388_3_fu_491_p3;
    select_ln340_fu_576_p3 <= 
        ap_const_lv14_1FFF when (xor_ln340_5_fu_558_p2(0) = '1') else 
        p_Val2_22_fu_532_p2;
    select_ln388_3_fu_491_p3 <= 
        ap_const_lv14_2000 when (underflow_fu_462_p2(0) = '1') else 
        w_sum_V_reg_657;
    select_ln388_fu_584_p3 <= 
        ap_const_lv14_2000 when (underflow_3_fu_552_p2(0) = '1') else 
        p_Val2_22_fu_532_p2;
    sext_ln1265_fu_510_p0 <= dense_out_bias_V_q0;
        sext_ln1265_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_510_p0),14));

        sext_ln703_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln703_fu_601_p2),23));

        sext_ln728_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_2_fu_280_p3),23));

    tmp_17_fu_329_p3 <= add_ln1192_fu_292_p2(7 downto 7);
    tmp_18_fu_347_p3 <= w_sum_V_fu_341_p2(13 downto 13);
    tmp_21_fu_383_p3 <= ret_V_fu_297_p2(22 downto 22);
    tmp_2_fu_241_p3 <= (f_0_reg_168 & ap_const_lv1_0);
    tmp_s_fu_229_p3 <= (f_0_reg_168 & ap_const_lv3_0);
    underflow_3_fu_552_p2 <= (xor_ln786_fu_546_p2 and p_Result_21_fu_524_p3);
    underflow_fu_462_p2 <= (xor_ln786_3_fu_456_p2 and p_Result_s_reg_651);
    w_sum_V_fu_341_p2 <= std_logic_vector(unsigned(p_Val2_24_fu_311_p4) + unsigned(zext_ln415_fu_337_p1));
    xor_ln340_5_fu_558_p2 <= (p_Result_22_fu_538_p3 xor p_Result_21_fu_524_p3);
    xor_ln340_fu_564_p2 <= (p_Result_21_fu_524_p3 xor ap_const_lv1_1);
    xor_ln416_1_fu_355_p2 <= (tmp_18_fu_347_p3 xor ap_const_lv1_1);
    xor_ln416_2_fu_397_p2 <= (p_Result_19_fu_321_p3 xor ap_const_lv1_1);
    xor_ln779_fu_391_p2 <= (tmp_21_fu_383_p3 xor ap_const_lv1_1);
    xor_ln785_1_fu_440_p2 <= (p_Result_s_reg_651 xor ap_const_lv1_1);
    xor_ln785_fu_431_p2 <= (carry_1_reg_663 xor Range2_all_ones_reg_674);
    xor_ln786_3_fu_456_p2 <= (or_ln786_fu_451_p2 xor ap_const_lv1_1);
    xor_ln786_fu_546_p2 <= (p_Result_22_fu_538_p3 xor ap_const_lv1_1);
    zext_ln1116_1_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_241_p3),9));
    zext_ln1116_2_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_1_fu_259_p2),64));
    zext_ln1116_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_229_p3),9));
    zext_ln415_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_329_p3),14));
    zext_ln46_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_145),9));
    zext_ln48_1_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_168),64));
    zext_ln48_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_145),64));
end behav;
