-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_1_out_0_V_rea : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_1_V_rea : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_2_V_rea : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_3_V_rea : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_4_V_rea : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_5_V_rea : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_6_V_rea : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_7_V_rea : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_8_V_rea : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_9_V_rea : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_10_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_11_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_12_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_13_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_14_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_15_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_16_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_17_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_18_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_19_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_20_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_21_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_22_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_23_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_24_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_25_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_26_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_27_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_28_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_29_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_30_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_31_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_32_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_33_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_34_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_35_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_36_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_37_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_38_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_39_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_40_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_41_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_42_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_43_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_44_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_45_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_46_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_47_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_48_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_49_V_re : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_2_out_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_V_ce0 : OUT STD_LOGIC;
    dense_2_out_V_we0 : OUT STD_LOGIC;
    dense_2_out_V_d0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of dense_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_2_weights_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_weights_V_ce0 : STD_LOGIC;
    signal dense_2_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_2_bias_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_bias_V_ce0 : STD_LOGIC;
    signal dense_2_bias_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_559_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1290 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln14_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_1295 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_569_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_reg_1301 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_579_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_1309 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln13_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_625_p52 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_reg_1319 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln340_9_fu_900_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_0_reg_519 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Val2_s_reg_530 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_reg_542 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1117_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_585_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_597_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_fu_593_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1117_1_fu_605_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1117_fu_609_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1117_fu_615_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_3_fu_688_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1023_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_29_fu_723_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_30_fu_707_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_fu_730_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_V_fu_734_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_fu_740_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_23_fu_716_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_3_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_775_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_4_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_2_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_768_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_2_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_700_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_2_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_8_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_7_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_9_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_884_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln388_4_fu_892_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1265_fu_912_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_916_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_916_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_908_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_8_fu_920_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1265_fu_912_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_28_fu_934_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_26_fu_940_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_fu_926_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_978_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln388_fu_986_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln340_8_fu_994_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_fu_1006_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_fu_1002_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component cnn_mux_506_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        din4 : IN STD_LOGIC_VECTOR (13 downto 0);
        din5 : IN STD_LOGIC_VECTOR (13 downto 0);
        din6 : IN STD_LOGIC_VECTOR (13 downto 0);
        din7 : IN STD_LOGIC_VECTOR (13 downto 0);
        din8 : IN STD_LOGIC_VECTOR (13 downto 0);
        din9 : IN STD_LOGIC_VECTOR (13 downto 0);
        din10 : IN STD_LOGIC_VECTOR (13 downto 0);
        din11 : IN STD_LOGIC_VECTOR (13 downto 0);
        din12 : IN STD_LOGIC_VECTOR (13 downto 0);
        din13 : IN STD_LOGIC_VECTOR (13 downto 0);
        din14 : IN STD_LOGIC_VECTOR (13 downto 0);
        din15 : IN STD_LOGIC_VECTOR (13 downto 0);
        din16 : IN STD_LOGIC_VECTOR (13 downto 0);
        din17 : IN STD_LOGIC_VECTOR (13 downto 0);
        din18 : IN STD_LOGIC_VECTOR (13 downto 0);
        din19 : IN STD_LOGIC_VECTOR (13 downto 0);
        din20 : IN STD_LOGIC_VECTOR (13 downto 0);
        din21 : IN STD_LOGIC_VECTOR (13 downto 0);
        din22 : IN STD_LOGIC_VECTOR (13 downto 0);
        din23 : IN STD_LOGIC_VECTOR (13 downto 0);
        din24 : IN STD_LOGIC_VECTOR (13 downto 0);
        din25 : IN STD_LOGIC_VECTOR (13 downto 0);
        din26 : IN STD_LOGIC_VECTOR (13 downto 0);
        din27 : IN STD_LOGIC_VECTOR (13 downto 0);
        din28 : IN STD_LOGIC_VECTOR (13 downto 0);
        din29 : IN STD_LOGIC_VECTOR (13 downto 0);
        din30 : IN STD_LOGIC_VECTOR (13 downto 0);
        din31 : IN STD_LOGIC_VECTOR (13 downto 0);
        din32 : IN STD_LOGIC_VECTOR (13 downto 0);
        din33 : IN STD_LOGIC_VECTOR (13 downto 0);
        din34 : IN STD_LOGIC_VECTOR (13 downto 0);
        din35 : IN STD_LOGIC_VECTOR (13 downto 0);
        din36 : IN STD_LOGIC_VECTOR (13 downto 0);
        din37 : IN STD_LOGIC_VECTOR (13 downto 0);
        din38 : IN STD_LOGIC_VECTOR (13 downto 0);
        din39 : IN STD_LOGIC_VECTOR (13 downto 0);
        din40 : IN STD_LOGIC_VECTOR (13 downto 0);
        din41 : IN STD_LOGIC_VECTOR (13 downto 0);
        din42 : IN STD_LOGIC_VECTOR (13 downto 0);
        din43 : IN STD_LOGIC_VECTOR (13 downto 0);
        din44 : IN STD_LOGIC_VECTOR (13 downto 0);
        din45 : IN STD_LOGIC_VECTOR (13 downto 0);
        din46 : IN STD_LOGIC_VECTOR (13 downto 0);
        din47 : IN STD_LOGIC_VECTOR (13 downto 0);
        din48 : IN STD_LOGIC_VECTOR (13 downto 0);
        din49 : IN STD_LOGIC_VECTOR (13 downto 0);
        din50 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_mac_muladd_14bgk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component dense_2_dense_2_wbnm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component dense_2_dense_2_bbom IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    dense_2_weights_V_U : component dense_2_dense_2_wbnm
    generic map (
        DataWidth => 9,
        AddressRange => 1500,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_weights_V_address0,
        ce0 => dense_2_weights_V_ce0,
        q0 => dense_2_weights_V_q0);

    dense_2_bias_V_U : component dense_2_dense_2_bbom
    generic map (
        DataWidth => 9,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_bias_V_address0,
        ce0 => dense_2_bias_V_ce0,
        q0 => dense_2_bias_V_q0);

    cnn_mux_506_14_1_1_U604 : component cnn_mux_506_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        din4_WIDTH => 14,
        din5_WIDTH => 14,
        din6_WIDTH => 14,
        din7_WIDTH => 14,
        din8_WIDTH => 14,
        din9_WIDTH => 14,
        din10_WIDTH => 14,
        din11_WIDTH => 14,
        din12_WIDTH => 14,
        din13_WIDTH => 14,
        din14_WIDTH => 14,
        din15_WIDTH => 14,
        din16_WIDTH => 14,
        din17_WIDTH => 14,
        din18_WIDTH => 14,
        din19_WIDTH => 14,
        din20_WIDTH => 14,
        din21_WIDTH => 14,
        din22_WIDTH => 14,
        din23_WIDTH => 14,
        din24_WIDTH => 14,
        din25_WIDTH => 14,
        din26_WIDTH => 14,
        din27_WIDTH => 14,
        din28_WIDTH => 14,
        din29_WIDTH => 14,
        din30_WIDTH => 14,
        din31_WIDTH => 14,
        din32_WIDTH => 14,
        din33_WIDTH => 14,
        din34_WIDTH => 14,
        din35_WIDTH => 14,
        din36_WIDTH => 14,
        din37_WIDTH => 14,
        din38_WIDTH => 14,
        din39_WIDTH => 14,
        din40_WIDTH => 14,
        din41_WIDTH => 14,
        din42_WIDTH => 14,
        din43_WIDTH => 14,
        din44_WIDTH => 14,
        din45_WIDTH => 14,
        din46_WIDTH => 14,
        din47_WIDTH => 14,
        din48_WIDTH => 14,
        din49_WIDTH => 14,
        din50_WIDTH => 6,
        dout_WIDTH => 14)
    port map (
        din0 => dense_1_out_0_V_rea,
        din1 => dense_1_out_1_V_rea,
        din2 => dense_1_out_2_V_rea,
        din3 => dense_1_out_3_V_rea,
        din4 => dense_1_out_4_V_rea,
        din5 => dense_1_out_5_V_rea,
        din6 => dense_1_out_6_V_rea,
        din7 => dense_1_out_7_V_rea,
        din8 => dense_1_out_8_V_rea,
        din9 => dense_1_out_9_V_rea,
        din10 => dense_1_out_10_V_re,
        din11 => dense_1_out_11_V_re,
        din12 => dense_1_out_12_V_re,
        din13 => dense_1_out_13_V_re,
        din14 => dense_1_out_14_V_re,
        din15 => dense_1_out_15_V_re,
        din16 => dense_1_out_16_V_re,
        din17 => dense_1_out_17_V_re,
        din18 => dense_1_out_18_V_re,
        din19 => dense_1_out_19_V_re,
        din20 => dense_1_out_20_V_re,
        din21 => dense_1_out_21_V_re,
        din22 => dense_1_out_22_V_re,
        din23 => dense_1_out_23_V_re,
        din24 => dense_1_out_24_V_re,
        din25 => dense_1_out_25_V_re,
        din26 => dense_1_out_26_V_re,
        din27 => dense_1_out_27_V_re,
        din28 => dense_1_out_28_V_re,
        din29 => dense_1_out_29_V_re,
        din30 => dense_1_out_30_V_re,
        din31 => dense_1_out_31_V_re,
        din32 => dense_1_out_32_V_re,
        din33 => dense_1_out_33_V_re,
        din34 => dense_1_out_34_V_re,
        din35 => dense_1_out_35_V_re,
        din36 => dense_1_out_36_V_re,
        din37 => dense_1_out_37_V_re,
        din38 => dense_1_out_38_V_re,
        din39 => dense_1_out_39_V_re,
        din40 => dense_1_out_40_V_re,
        din41 => dense_1_out_41_V_re,
        din42 => dense_1_out_42_V_re,
        din43 => dense_1_out_43_V_re,
        din44 => dense_1_out_44_V_re,
        din45 => dense_1_out_45_V_re,
        din46 => dense_1_out_46_V_re,
        din47 => dense_1_out_47_V_re,
        din48 => dense_1_out_48_V_re,
        din49 => dense_1_out_49_V_re,
        din50 => j_0_reg_542,
        dout => tmp_3_fu_625_p52);

    cnn_mac_muladd_14bgk_U605 : component cnn_mac_muladd_14bgk
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        din0 => tmp_3_reg_1319,
        din1 => dense_2_weights_V_q0,
        din2 => lhs_V_3_fu_688_p3,
        dout => grp_fu_1023_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_519 <= i_reg_1290;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_519 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_542 <= j_reg_1309;
            elsif (((icmp_ln9_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_542 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_s_reg_530 <= select_ln340_9_fu_900_p3;
            elsif (((icmp_ln9_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_s_reg_530 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1290 <= i_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1309 <= j_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_573_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_3_reg_1319 <= tmp_3_fu_625_p52;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_reg_1301(4 downto 0) <= zext_ln13_fu_569_p1(4 downto 0);
                    zext_ln14_reg_1295(4 downto 0) <= zext_ln14_fu_565_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln14_reg_1295(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_1301(11 downto 5) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_553_p2, ap_CS_fsm_state3, icmp_ln13_fu_573_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln9_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_573_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    Range2_all_ones_fu_768_p3 <= grp_fu_1023_p3(22 downto 22);
    add_ln1117_fu_615_p2 <= std_logic_vector(unsigned(zext_ln13_reg_1301) + unsigned(sub_ln1117_fu_609_p2));
    and_ln781_fu_812_p2 <= (carry_2_fu_754_p2 and Range2_all_ones_fu_768_p3);
    and_ln786_fu_842_p2 <= (p_Result_24_fu_760_p3 and deleted_ones_fu_806_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_553_p2)
    begin
        if ((((icmp_ln9_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_553_p2)
    begin
        if (((icmp_ln9_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    carry_2_fu_754_p2 <= (xor_ln416_3_fu_748_p2 and p_Result_23_fu_716_p3);
    deleted_ones_fu_806_p2 <= (or_ln416_fu_800_p2 and Range2_all_ones_fu_768_p3);
    dense_2_bias_V_address0 <= zext_ln14_reg_1295(5 - 1 downto 0);

    dense_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_out_V_address0 <= zext_ln14_reg_1295(5 - 1 downto 0);

    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_out_V_d0 <= 
        ap_const_lv13_0 when (tmp_26_fu_1006_p3(0) = '1') else 
        trunc_ln203_fu_1002_p1;

    dense_2_out_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_2_out_V_we0 <= ap_const_logic_1;
        else 
            dense_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_weights_V_address0 <= sext_ln1117_fu_620_p1(11 - 1 downto 0);

    dense_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_559_p2 <= std_logic_vector(unsigned(i_0_reg_519) + unsigned(ap_const_lv5_1));
    icmp_ln13_fu_573_p2 <= "1" when (j_0_reg_542 = ap_const_lv6_32) else "0";
    icmp_ln9_fu_553_p2 <= "1" when (i_0_reg_519 = ap_const_lv5_1E) else "0";
    j_fu_579_p2 <= std_logic_vector(unsigned(j_0_reg_542) + unsigned(ap_const_lv6_1));
    lhs_V_3_fu_688_p3 <= (p_Val2_s_reg_530 & ap_const_lv8_0);
        lhs_V_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_530),15));

    or_ln340_7_fu_866_p2 <= (underflow_fu_860_p2 or overflow_fu_836_p2);
    or_ln340_8_fu_872_p2 <= (xor_ln785_2_fu_830_p2 or and_ln786_fu_842_p2);
    or_ln340_9_fu_878_p2 <= (or_ln340_8_fu_872_p2 or and_ln781_fu_812_p2);
    or_ln340_fu_972_p2 <= (xor_ln340_fu_966_p2 or p_Result_26_fu_940_p3);
    or_ln416_2_fu_794_p2 <= (xor_ln416_4_fu_788_p2 or tmp_30_fu_740_p3);
    or_ln416_fu_800_p2 <= (xor_ln779_fu_782_p2 or or_ln416_2_fu_794_p2);
    or_ln785_fu_824_p2 <= (xor_ln785_fu_818_p2 or p_Result_24_fu_760_p3);
    or_ln786_fu_848_p2 <= (and_ln786_fu_842_p2 or and_ln781_fu_812_p2);
    overflow_fu_836_p2 <= (xor_ln785_2_fu_830_p2 and or_ln785_fu_824_p2);
    p_Result_23_fu_716_p3 <= grp_fu_1023_p3(21 downto 21);
    p_Result_24_fu_760_p3 <= sum_V_fu_734_p2(13 downto 13);
    p_Result_25_fu_926_p3 <= ret_V_8_fu_920_p2(14 downto 14);
    p_Result_26_fu_940_p3 <= p_Val2_28_fu_934_p2(13 downto 13);
    p_Result_s_fu_700_p3 <= grp_fu_1023_p3(22 downto 22);
    p_Val2_28_fu_934_p2 <= std_logic_vector(signed(sext_ln1265_fu_912_p1) + signed(p_Val2_s_reg_530));
    p_Val2_30_fu_707_p4 <= grp_fu_1023_p3(21 downto 8);
    ret_V_8_fu_920_p2 <= std_logic_vector(signed(rhs_V_fu_916_p1) + signed(lhs_V_fu_908_p1));
    rhs_V_fu_916_p0 <= dense_2_bias_V_q0;
        rhs_V_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_916_p0),15));

    select_ln340_4_fu_884_p3 <= 
        ap_const_lv14_1FFF when (or_ln340_7_fu_866_p2(0) = '1') else 
        sum_V_fu_734_p2;
    select_ln340_8_fu_994_p3 <= 
        select_ln340_fu_978_p3 when (or_ln340_fu_972_p2(0) = '1') else 
        select_ln388_fu_986_p3;
    select_ln340_9_fu_900_p3 <= 
        select_ln340_4_fu_884_p3 when (or_ln340_9_fu_878_p2(0) = '1') else 
        select_ln388_4_fu_892_p3;
    select_ln340_fu_978_p3 <= 
        ap_const_lv14_1FFF when (xor_ln340_6_fu_960_p2(0) = '1') else 
        p_Val2_28_fu_934_p2;
    select_ln388_4_fu_892_p3 <= 
        ap_const_lv14_2000 when (underflow_fu_860_p2(0) = '1') else 
        sum_V_fu_734_p2;
    select_ln388_fu_986_p3 <= 
        ap_const_lv14_2000 when (underflow_4_fu_954_p2(0) = '1') else 
        p_Val2_28_fu_934_p2;
        sext_ln1117_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_fu_615_p2),64));

    sext_ln1265_fu_912_p0 <= dense_2_bias_V_q0;
        sext_ln1265_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_912_p0),14));

    sub_ln1117_fu_609_p2 <= std_logic_vector(unsigned(zext_ln1117_fu_593_p1) - unsigned(zext_ln1117_1_fu_605_p1));
    sum_V_fu_734_p2 <= std_logic_vector(unsigned(p_Val2_30_fu_707_p4) + unsigned(zext_ln415_fu_730_p1));
    tmp_26_fu_1006_p3 <= select_ln340_8_fu_994_p3(13 downto 13);
    tmp_29_fu_723_p3 <= grp_fu_1023_p3(7 downto 7);
    tmp_30_fu_740_p3 <= sum_V_fu_734_p2(13 downto 13);
    tmp_33_fu_775_p3 <= grp_fu_1023_p3(22 downto 22);
    tmp_4_fu_597_p3 <= (j_0_reg_542 & ap_const_lv1_0);
    tmp_s_fu_585_p3 <= (j_0_reg_542 & ap_const_lv5_0);
    trunc_ln203_fu_1002_p1 <= select_ln340_8_fu_994_p3(13 - 1 downto 0);
    underflow_4_fu_954_p2 <= (xor_ln786_fu_948_p2 and p_Result_25_fu_926_p3);
    underflow_fu_860_p2 <= (xor_ln786_4_fu_854_p2 and p_Result_s_fu_700_p3);
    xor_ln340_6_fu_960_p2 <= (p_Result_26_fu_940_p3 xor p_Result_25_fu_926_p3);
    xor_ln340_fu_966_p2 <= (p_Result_25_fu_926_p3 xor ap_const_lv1_1);
    xor_ln416_3_fu_748_p2 <= (tmp_30_fu_740_p3 xor ap_const_lv1_1);
    xor_ln416_4_fu_788_p2 <= (p_Result_23_fu_716_p3 xor ap_const_lv1_1);
    xor_ln779_fu_782_p2 <= (tmp_33_fu_775_p3 xor ap_const_lv1_1);
    xor_ln785_2_fu_830_p2 <= (p_Result_s_fu_700_p3 xor ap_const_lv1_1);
    xor_ln785_fu_818_p2 <= (carry_2_fu_754_p2 xor Range2_all_ones_fu_768_p3);
    xor_ln786_4_fu_854_p2 <= (or_ln786_fu_848_p2 xor ap_const_lv1_1);
    xor_ln786_fu_948_p2 <= (p_Result_26_fu_940_p3 xor ap_const_lv1_1);
    zext_ln1117_1_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_597_p3),12));
    zext_ln1117_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_585_p3),12));
    zext_ln13_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_519),12));
    zext_ln14_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_519),64));
    zext_ln415_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_723_p3),14));
end behav;
