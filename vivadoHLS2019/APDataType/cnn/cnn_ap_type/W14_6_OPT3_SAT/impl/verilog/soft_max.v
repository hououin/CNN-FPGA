// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module soft_max (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_array_V_address0,
        dense_array_V_ce0,
        dense_array_V_we0,
        dense_array_V_d0,
        dense_array_V_q0,
        prediction_V_address0,
        prediction_V_ce0,
        prediction_V_we0,
        prediction_V_d0
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] dense_array_V_address0;
output   dense_array_V_ce0;
output   dense_array_V_we0;
output  [13:0] dense_array_V_d0;
input  [13:0] dense_array_V_q0;
output  [3:0] prediction_V_address0;
output   prediction_V_ce0;
output   prediction_V_we0;
output  [13:0] prediction_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] dense_array_V_address0;
reg dense_array_V_ce0;
reg dense_array_V_we0;
reg prediction_V_ce0;
reg prediction_V_we0;

(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] m_fu_176_p2;
reg   [3:0] m_reg_552;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln12_fu_170_p2;
wire  signed [14:0] rhs_V_fu_187_p1;
reg  signed [14:0] rhs_V_reg_562;
wire   [13:0] select_ln13_fu_197_p3;
wire    ap_CS_fsm_state3;
wire   [3:0] i_fu_211_p2;
reg   [3:0] i_reg_575;
wire    ap_CS_fsm_state4;
reg   [3:0] dense_array_V_addr_1_reg_580;
wire   [0:0] icmp_ln20_fu_205_p2;
wire  signed [21:0] sext_ln27_fu_222_p1;
reg  signed [21:0] sext_ln27_reg_585;
wire  signed [13:0] p_Val2_5_fu_302_p3;
reg  signed [13:0] p_Val2_5_reg_590;
wire    ap_CS_fsm_state7;
wire   [13:0] select_ln340_4_fu_390_p3;
wire    ap_CS_fsm_state8;
wire   [3:0] j_fu_404_p2;
reg   [3:0] j_reg_605;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln29_fu_410_p1;
reg   [63:0] zext_ln29_reg_610;
wire   [0:0] icmp_ln27_fu_398_p2;
wire    ap_CS_fsm_state10;
wire    grp_exp_15_7_s_fu_159_ap_start;
wire    grp_exp_15_7_s_fu_159_ap_done;
wire    grp_exp_15_7_s_fu_159_ap_idle;
wire    grp_exp_15_7_s_fu_159_ap_ready;
wire   [14:0] grp_exp_15_7_s_fu_159_x_V;
wire   [14:0] grp_exp_15_7_s_fu_159_ap_return;
reg  signed [13:0] p_Val2_1_reg_102;
reg   [3:0] m_0_reg_114;
reg  signed [13:0] p_Val2_4_reg_125;
reg   [3:0] i_0_reg_137;
reg   [3:0] j_0_reg_148;
wire    ap_CS_fsm_state35;
reg    grp_exp_15_7_s_fu_159_ap_start_reg;
reg   [34:0] ap_NS_fsm;
wire    ap_NS_fsm_state5;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln13_fu_182_p1;
wire   [63:0] zext_ln22_fu_217_p1;
wire   [0:0] icmp_ln1495_fu_191_p2;
wire  signed [13:0] lhs_V_fu_226_p0;
wire  signed [14:0] lhs_V_fu_226_p1;
wire   [0:0] p_Result_1_fu_248_p3;
wire   [0:0] p_Result_s_fu_236_p3;
wire   [0:0] xor_ln786_fu_256_p2;
wire   [0:0] xor_ln340_fu_274_p2;
wire   [0:0] xor_ln340_3_fu_268_p2;
wire   [13:0] p_Val2_3_fu_244_p1;
wire   [0:0] underflow_fu_262_p2;
wire   [0:0] or_ln340_fu_280_p2;
wire   [13:0] select_ln340_fu_286_p3;
wire   [13:0] select_ln388_fu_294_p3;
wire  signed [14:0] lhs_V_1_fu_310_p1;
wire  signed [14:0] rhs_V_1_fu_314_p1;
wire   [14:0] ret_V_2_fu_317_p2;
wire   [13:0] sum_V_fu_331_p2;
wire   [0:0] p_Result_3_fu_336_p3;
wire   [0:0] p_Result_2_fu_323_p3;
wire   [0:0] xor_ln786_2_fu_344_p2;
wire   [0:0] xor_ln340_2_fu_362_p2;
wire   [0:0] xor_ln340_4_fu_356_p2;
wire   [0:0] underflow_1_fu_350_p2;
wire   [0:0] or_ln340_1_fu_368_p2;
wire   [13:0] select_ln340_2_fu_374_p3;
wire   [13:0] select_ln388_2_fu_382_p3;
wire   [21:0] grp_fu_423_p0;
wire  signed [13:0] grp_fu_423_p1;
wire   [21:0] grp_fu_423_p2;
wire   [7:0] tmp_fu_448_p4;
wire   [0:0] p_Result_5_fu_440_p3;
wire   [0:0] icmp_ln785_fu_458_p2;
wire   [0:0] p_Result_4_fu_428_p3;
wire   [0:0] or_ln785_fu_464_p2;
wire   [0:0] xor_ln785_fu_470_p2;
wire   [0:0] icmp_ln786_fu_488_p2;
wire   [0:0] xor_ln786_1_fu_482_p2;
wire   [0:0] or_ln786_fu_494_p2;
wire   [0:0] underflow_2_fu_500_p2;
wire   [0:0] overflow_fu_476_p2;
wire   [0:0] xor_ln340_1_fu_512_p2;
wire   [0:0] or_ln340_2_fu_506_p2;
wire   [13:0] p_Val2_10_fu_436_p1;
wire   [0:0] or_ln340_3_fu_518_p2;
wire   [13:0] select_ln340_1_fu_524_p3;
wire   [13:0] select_ln388_1_fu_532_p3;
reg    grp_fu_423_ap_start;
wire    grp_fu_423_ap_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 grp_exp_15_7_s_fu_159_ap_start_reg = 1'b0;
end

exp_15_7_s grp_exp_15_7_s_fu_159(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_15_7_s_fu_159_ap_start),
    .ap_done(grp_exp_15_7_s_fu_159_ap_done),
    .ap_idle(grp_exp_15_7_s_fu_159_ap_idle),
    .ap_ready(grp_exp_15_7_s_fu_159_ap_ready),
    .x_V(grp_exp_15_7_s_fu_159_x_V),
    .ap_return(grp_exp_15_7_s_fu_159_ap_return)
);

cnn_sdiv_22ns_14sbsm #(
    .ID( 1 ),
    .NUM_STAGE( 26 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 22 ))
cnn_sdiv_22ns_14sbsm_U664(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_423_ap_start),
    .done(grp_fu_423_ap_done),
    .din0(grp_fu_423_p0),
    .din1(grp_fu_423_p1),
    .ce(1'b1),
    .dout(grp_fu_423_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_exp_15_7_s_fu_159_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state5) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_exp_15_7_s_fu_159_ap_start_reg <= 1'b1;
        end else if ((grp_exp_15_7_s_fu_159_ap_ready == 1'b1)) begin
            grp_exp_15_7_s_fu_159_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_137 <= i_reg_575;
    end else if (((icmp_ln12_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_137 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_148 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        j_0_reg_148 <= j_reg_605;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_0_reg_114 <= m_reg_552;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        m_0_reg_114 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_1_reg_102 <= select_ln13_fu_197_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_1_reg_102 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_4_reg_125 <= select_ln340_4_fu_390_p3;
    end else if (((icmp_ln12_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_4_reg_125 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        dense_array_V_addr_1_reg_580 <= zext_ln22_fu_217_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_575 <= i_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_605 <= j_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_reg_552 <= m_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_5_reg_590 <= p_Val2_5_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        rhs_V_reg_562 <= rhs_V_fu_187_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sext_ln27_reg_585 <= sext_ln27_fu_222_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        zext_ln29_reg_610[3 : 0] <= zext_ln29_fu_410_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln27_fu_398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln27_fu_398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        dense_array_V_address0 = zext_ln29_fu_410_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dense_array_V_address0 = dense_array_V_addr_1_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dense_array_V_address0 = zext_ln22_fu_217_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_V_address0 = zext_ln13_fu_182_p1;
    end else begin
        dense_array_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        dense_array_V_ce0 = 1'b1;
    end else begin
        dense_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dense_array_V_we0 = 1'b1;
    end else begin
        dense_array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_423_ap_start = 1'b1;
    end else begin
        grp_fu_423_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        prediction_V_ce0 = 1'b1;
    end else begin
        prediction_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        prediction_V_we0 = 1'b1;
    end else begin
        prediction_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln12_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln20_fu_205_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln27_fu_398_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state5 = ap_NS_fsm[32'd4];

assign dense_array_V_d0 = p_Val2_5_reg_590;

assign grp_exp_15_7_s_fu_159_ap_start = grp_exp_15_7_s_fu_159_ap_start_reg;

assign grp_exp_15_7_s_fu_159_x_V = ($signed(lhs_V_fu_226_p1) - $signed(rhs_V_reg_562));

assign grp_fu_423_p0 = {{dense_array_V_q0}, {8'd0}};

assign grp_fu_423_p1 = sext_ln27_reg_585;

assign i_fu_211_p2 = (i_0_reg_137 + 4'd1);

assign icmp_ln12_fu_170_p2 = ((m_0_reg_114 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln1495_fu_191_p2 = (($signed(p_Val2_1_reg_102) < $signed(dense_array_V_q0)) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_205_p2 = ((i_0_reg_137 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_398_p2 = ((j_0_reg_148 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln785_fu_458_p2 = ((tmp_fu_448_p4 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln786_fu_488_p2 = ((tmp_fu_448_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_fu_404_p2 = (j_0_reg_148 + 4'd1);

assign lhs_V_1_fu_310_p1 = p_Val2_4_reg_125;

assign lhs_V_fu_226_p0 = dense_array_V_q0;

assign lhs_V_fu_226_p1 = lhs_V_fu_226_p0;

assign m_fu_176_p2 = (m_0_reg_114 + 4'd1);

assign or_ln340_1_fu_368_p2 = (xor_ln340_2_fu_362_p2 | p_Result_3_fu_336_p3);

assign or_ln340_2_fu_506_p2 = (underflow_2_fu_500_p2 | overflow_fu_476_p2);

assign or_ln340_3_fu_518_p2 = (xor_ln340_1_fu_512_p2 | overflow_fu_476_p2);

assign or_ln340_fu_280_p2 = (xor_ln340_fu_274_p2 | p_Result_1_fu_248_p3);

assign or_ln785_fu_464_p2 = (p_Result_5_fu_440_p3 | icmp_ln785_fu_458_p2);

assign or_ln786_fu_494_p2 = (xor_ln786_1_fu_482_p2 | icmp_ln786_fu_488_p2);

assign overflow_fu_476_p2 = (xor_ln785_fu_470_p2 & or_ln785_fu_464_p2);

assign p_Result_1_fu_248_p3 = grp_exp_15_7_s_fu_159_ap_return[32'd13];

assign p_Result_2_fu_323_p3 = ret_V_2_fu_317_p2[32'd14];

assign p_Result_3_fu_336_p3 = sum_V_fu_331_p2[32'd13];

assign p_Result_4_fu_428_p3 = grp_fu_423_p2[32'd21];

assign p_Result_5_fu_440_p3 = grp_fu_423_p2[32'd13];

assign p_Result_s_fu_236_p3 = grp_exp_15_7_s_fu_159_ap_return[32'd14];

assign p_Val2_10_fu_436_p1 = grp_fu_423_p2[13:0];

assign p_Val2_3_fu_244_p1 = grp_exp_15_7_s_fu_159_ap_return[13:0];

assign p_Val2_5_fu_302_p3 = ((or_ln340_fu_280_p2[0:0] === 1'b1) ? select_ln340_fu_286_p3 : select_ln388_fu_294_p3);

assign prediction_V_address0 = zext_ln29_reg_610;

assign prediction_V_d0 = ((or_ln340_3_fu_518_p2[0:0] === 1'b1) ? select_ln340_1_fu_524_p3 : select_ln388_1_fu_532_p3);

assign ret_V_2_fu_317_p2 = ($signed(lhs_V_1_fu_310_p1) + $signed(rhs_V_1_fu_314_p1));

assign rhs_V_1_fu_314_p1 = p_Val2_5_reg_590;

assign rhs_V_fu_187_p1 = p_Val2_1_reg_102;

assign select_ln13_fu_197_p3 = ((icmp_ln1495_fu_191_p2[0:0] === 1'b1) ? dense_array_V_q0 : p_Val2_1_reg_102);

assign select_ln340_1_fu_524_p3 = ((or_ln340_2_fu_506_p2[0:0] === 1'b1) ? 14'd8191 : p_Val2_10_fu_436_p1);

assign select_ln340_2_fu_374_p3 = ((xor_ln340_4_fu_356_p2[0:0] === 1'b1) ? 14'd8191 : sum_V_fu_331_p2);

assign select_ln340_4_fu_390_p3 = ((or_ln340_1_fu_368_p2[0:0] === 1'b1) ? select_ln340_2_fu_374_p3 : select_ln388_2_fu_382_p3);

assign select_ln340_fu_286_p3 = ((xor_ln340_3_fu_268_p2[0:0] === 1'b1) ? 14'd8191 : p_Val2_3_fu_244_p1);

assign select_ln388_1_fu_532_p3 = ((underflow_2_fu_500_p2[0:0] === 1'b1) ? 14'd8192 : p_Val2_10_fu_436_p1);

assign select_ln388_2_fu_382_p3 = ((underflow_1_fu_350_p2[0:0] === 1'b1) ? 14'd8192 : sum_V_fu_331_p2);

assign select_ln388_fu_294_p3 = ((underflow_fu_262_p2[0:0] === 1'b1) ? 14'd8192 : p_Val2_3_fu_244_p1);

assign sext_ln27_fu_222_p1 = p_Val2_4_reg_125;

assign sum_V_fu_331_p2 = ($signed(p_Val2_5_reg_590) + $signed(p_Val2_4_reg_125));

assign tmp_fu_448_p4 = {{grp_fu_423_p2[21:14]}};

assign underflow_1_fu_350_p2 = (xor_ln786_2_fu_344_p2 & p_Result_2_fu_323_p3);

assign underflow_2_fu_500_p2 = (p_Result_4_fu_428_p3 & or_ln786_fu_494_p2);

assign underflow_fu_262_p2 = (xor_ln786_fu_256_p2 & p_Result_s_fu_236_p3);

assign xor_ln340_1_fu_512_p2 = (underflow_2_fu_500_p2 ^ 1'd1);

assign xor_ln340_2_fu_362_p2 = (p_Result_2_fu_323_p3 ^ 1'd1);

assign xor_ln340_3_fu_268_p2 = (p_Result_s_fu_236_p3 ^ p_Result_1_fu_248_p3);

assign xor_ln340_4_fu_356_p2 = (p_Result_3_fu_336_p3 ^ p_Result_2_fu_323_p3);

assign xor_ln340_fu_274_p2 = (p_Result_s_fu_236_p3 ^ 1'd1);

assign xor_ln785_fu_470_p2 = (p_Result_4_fu_428_p3 ^ 1'd1);

assign xor_ln786_1_fu_482_p2 = (p_Result_5_fu_440_p3 ^ 1'd1);

assign xor_ln786_2_fu_344_p2 = (p_Result_3_fu_336_p3 ^ 1'd1);

assign xor_ln786_fu_256_p2 = (p_Result_1_fu_248_p3 ^ 1'd1);

assign zext_ln13_fu_182_p1 = m_0_reg_114;

assign zext_ln22_fu_217_p1 = i_0_reg_137;

assign zext_ln29_fu_410_p1 = j_0_reg_148;

always @ (posedge ap_clk) begin
    zext_ln29_reg_610[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //soft_max
