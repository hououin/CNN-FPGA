// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=32053,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=19,HLS_SYN_FF=1759,HLS_SYN_LUT=5149,HLS_VERSION=2019_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0,
        prediction_address1,
        prediction_ce1,
        prediction_we1,
        prediction_d1
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_pp0_stage0 = 22'd4;
parameter    ap_ST_fsm_pp0_stage1 = 22'd8;
parameter    ap_ST_fsm_state7 = 22'd16;
parameter    ap_ST_fsm_pp1_stage0 = 22'd32;
parameter    ap_ST_fsm_pp1_stage1 = 22'd64;
parameter    ap_ST_fsm_state15 = 22'd128;
parameter    ap_ST_fsm_state16 = 22'd256;
parameter    ap_ST_fsm_state17 = 22'd512;
parameter    ap_ST_fsm_state18 = 22'd1024;
parameter    ap_ST_fsm_state19 = 22'd2048;
parameter    ap_ST_fsm_state20 = 22'd4096;
parameter    ap_ST_fsm_state21 = 22'd8192;
parameter    ap_ST_fsm_state22 = 22'd16384;
parameter    ap_ST_fsm_state23 = 22'd32768;
parameter    ap_ST_fsm_state24 = 22'd65536;
parameter    ap_ST_fsm_state25 = 22'd131072;
parameter    ap_ST_fsm_state26 = 22'd262144;
parameter    ap_ST_fsm_state27 = 22'd524288;
parameter    ap_ST_fsm_state28 = 22'd1048576;
parameter    ap_ST_fsm_state29 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;
output  [3:0] prediction_address1;
output   prediction_ce1;
output   prediction_we1;
output  [31:0] prediction_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_ce0;
reg[3:0] prediction_address0;
reg prediction_ce0;
reg prediction_we0;
reg[3:0] prediction_address1;
reg prediction_ce1;
reg prediction_we1;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] dense_weights_address0;
reg    dense_weights_ce0;
wire   [31:0] dense_weights_q0;
reg   [13:0] indvar_flatten_reg_349;
reg   [3:0] d_0_reg_360;
reg   [10:0] f_0_reg_371;
reg   [31:0] w_sum_0_reg_382;
reg   [31:0] sum_0_reg_394;
reg   [3:0] i_0_reg_406;
wire   [31:0] grp_fu_417_p2;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln11_reg_645;
reg   [0:0] icmp_ln11_reg_645_pp0_iter1_reg;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state10_pp1_stage0_iter1;
wire    ap_block_state12_pp1_stage0_iter2;
wire    ap_block_state14_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln27_reg_710;
reg   [0:0] icmp_ln27_reg_710_pp1_iter2_reg;
wire   [31:0] dense_array_q0;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state9_pp1_stage1_iter0;
wire    ap_block_state11_pp1_stage1_iter1;
wire    ap_block_state13_pp1_stage1_iter2;
wire    ap_block_pp1_stage1_11001;
wire    ap_CS_fsm_state16;
wire   [31:0] dense_array_q1;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_442_p2;
reg   [31:0] reg_468;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln27_reg_710_pp1_iter1_reg;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state20;
wire   [3:0] add_ln8_fu_490_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_fu_501_p2;
wire   [0:0] icmp_ln11_fu_507_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [13:0] add_ln11_fu_513_p2;
reg   [13:0] add_ln11_reg_649;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln16_fu_525_p2;
reg   [0:0] icmp_ln16_reg_654;
wire   [10:0] select_ln18_fu_531_p3;
reg   [10:0] select_ln18_reg_659;
wire   [3:0] select_ln18_2_fu_539_p3;
reg   [3:0] select_ln18_2_reg_664;
reg   [3:0] select_ln18_2_reg_664_pp0_iter1_reg;
wire   [10:0] f_fu_597_p2;
reg   [10:0] f_reg_690;
wire   [31:0] select_ln18_1_fu_602_p3;
wire   [31:0] grp_fu_423_p2;
wire   [0:0] icmp_ln16_1_fu_610_p2;
reg   [0:0] icmp_ln16_1_reg_706;
wire   [0:0] icmp_ln27_fu_619_p2;
wire   [3:0] i_fu_625_p2;
reg   [3:0] i_reg_714;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_448_p2;
reg   [31:0] tmp_4_1_reg_774;
reg   [31:0] tmp_4_2_reg_789;
reg   [31:0] tmp_4_3_reg_794;
reg   [31:0] tmp_4_4_reg_799;
wire    ap_CS_fsm_state21;
reg   [31:0] tmp_4_5_reg_804;
reg   [31:0] tmp_4_6_reg_809;
wire    ap_CS_fsm_state22;
reg   [31:0] tmp_4_7_reg_814;
reg   [31:0] tmp_4_8_reg_819;
wire    ap_CS_fsm_state23;
reg   [31:0] tmp_4_9_reg_824;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_state7;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage1_subdone;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
reg   [31:0] dense_array_d0;
reg   [3:0] dense_array_address1;
reg    dense_array_ce1;
reg   [3:0] phi_ln8_reg_338;
reg   [13:0] ap_phi_mux_indvar_flatten_phi_fu_353_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_d_0_phi_fu_364_p4;
reg   [10:0] ap_phi_mux_f_0_phi_fu_375_p4;
reg   [3:0] ap_phi_mux_i_0_phi_fu_410_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln8_fu_496_p1;
wire   [63:0] zext_ln18_4_fu_592_p1;
wire   [63:0] zext_ln18_1_fu_551_p1;
wire   [63:0] zext_ln18_fu_615_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln29_fu_631_p1;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire   [31:0] grp_fu_430_p2;
wire   [31:0] grp_fu_436_p2;
reg   [31:0] grp_fu_417_p0;
reg   [31:0] grp_fu_417_p1;
wire    ap_block_pp1_stage1;
reg   [31:0] grp_fu_430_p0;
wire    ap_CS_fsm_state24;
reg   [31:0] grp_fu_436_p0;
reg   [31:0] grp_fu_442_p1;
reg   [31:0] grp_fu_448_p1;
wire   [3:0] d_fu_519_p2;
wire   [13:0] tmp_3_fu_556_p3;
wire   [11:0] tmp_8_fu_568_p3;
wire   [14:0] zext_ln18_3_fu_576_p1;
wire   [14:0] zext_ln18_2_fu_564_p1;
wire   [14:0] add_ln18_fu_580_p2;
wire   [14:0] zext_ln17_fu_547_p1;
wire   [14:0] add_ln18_1_fu_586_p2;
reg   [21:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

dense_dense_weights #(
    .DataWidth( 32 ),
    .AddressRange( 16000 ),
    .AddressWidth( 14 ))
dense_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_weights_address0),
    .ce0(dense_weights_ce0),
    .q0(dense_weights_q0)
);

dense_dense_array #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(dense_array_d0),
    .q0(dense_array_q0),
    .address1(dense_array_address1),
    .ce1(dense_array_ce1),
    .q1(dense_array_q1)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_417_p0),
    .din1(grp_fu_417_p1),
    .ce(1'b1),
    .dout(grp_fu_417_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_weights_q0),
    .din1(flat_array_q0),
    .ce(1'b1),
    .dout(grp_fu_423_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_430_p0),
    .din1(sum_0_reg_394),
    .ce(1'b1),
    .dout(grp_fu_430_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_436_p0),
    .din1(sum_0_reg_394),
    .ce(1'b1),
    .dout(grp_fu_436_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_442_p1),
    .ce(1'b1),
    .dout(grp_fu_442_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_448_p1),
    .ce(1'b1),
    .dout(grp_fu_448_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_501_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_501_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_501_p2 == 1'd1))) begin
        d_0_reg_360 <= 4'd0;
    end else if (((icmp_ln11_reg_645 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_0_reg_360 <= select_ln18_2_reg_664;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_501_p2 == 1'd1))) begin
        f_0_reg_371 <= 11'd0;
    end else if (((icmp_ln11_reg_645 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f_0_reg_371 <= f_reg_690;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_710 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_0_reg_406 <= i_reg_714;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_406 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_501_p2 == 1'd1))) begin
        indvar_flatten_reg_349 <= 14'd0;
    end else if (((icmp_ln11_reg_645 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_349 <= add_ln11_reg_649;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_501_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln8_reg_338 <= add_ln8_fu_490_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln8_reg_338 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_710_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_0_reg_394 <= grp_fu_417_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sum_0_reg_394 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_501_p2 == 1'd1))) begin
        w_sum_0_reg_382 <= 32'd0;
    end else if (((icmp_ln11_reg_645_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        w_sum_0_reg_382 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln11_reg_649 <= add_ln11_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_reg_690 <= f_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_reg_714 <= i_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln11_reg_645 <= icmp_ln11_fu_507_p2;
        icmp_ln11_reg_645_pp0_iter1_reg <= icmp_ln11_reg_645;
        select_ln18_2_reg_664_pp0_iter1_reg <= select_ln18_2_reg_664;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_reg_645 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln16_1_reg_706 <= icmp_ln16_1_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln16_reg_654 <= icmp_ln16_fu_525_p2;
        select_ln18_reg_659 <= select_ln18_fu_531_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln27_reg_710 <= icmp_ln27_fu_619_p2;
        icmp_ln27_reg_710_pp1_iter1_reg <= icmp_ln27_reg_710;
        icmp_ln27_reg_710_pp1_iter2_reg <= icmp_ln27_reg_710_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((icmp_ln27_reg_710_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        reg_468 <= grp_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_507_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln18_2_reg_664 <= select_ln18_2_fu_539_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_4_1_reg_774 <= grp_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_4_2_reg_789 <= grp_fu_442_p2;
        tmp_4_3_reg_794 <= grp_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_4_4_reg_799 <= grp_fu_442_p2;
        tmp_4_5_reg_804 <= grp_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_4_6_reg_809 <= grp_fu_442_p2;
        tmp_4_7_reg_814 <= grp_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_4_8_reg_819 <= grp_fu_442_p2;
        tmp_4_9_reg_824 <= grp_fu_448_p2;
    end
end

always @ (*) begin
    if ((icmp_ln11_fu_507_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln27_fu_619_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_d_0_phi_fu_364_p4 = select_ln18_2_reg_664;
    end else begin
        ap_phi_mux_d_0_phi_fu_364_p4 = d_0_reg_360;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_375_p4 = f_reg_690;
    end else begin
        ap_phi_mux_f_0_phi_fu_375_p4 = f_0_reg_371;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_710 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i_0_phi_fu_410_p4 = i_reg_714;
    end else begin
        ap_phi_mux_i_0_phi_fu_410_p4 = i_0_reg_406;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_353_p4 = add_ln11_reg_649;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_353_p4 = indvar_flatten_reg_349;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        dense_array_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        dense_array_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dense_array_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        dense_array_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dense_array_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dense_array_address0 = zext_ln29_fu_631_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_array_address0 = zext_ln18_fu_615_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_address0 = zext_ln8_fu_496_p1;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        dense_array_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        dense_array_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dense_array_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        dense_array_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dense_array_address1 = 64'd1;
    end else begin
        dense_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state16) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state16))) begin
        dense_array_ce1 = 1'b1;
    end else begin
        dense_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_array_d0 = grp_fu_417_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_d0 = 32'd0;
    end else begin
        dense_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln16_1_reg_706 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_weights_ce0 = 1'b1;
    end else begin
        dense_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_417_p0 = sum_0_reg_394;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_417_p0 = select_ln18_1_fu_602_p3;
    end else begin
        grp_fu_417_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_417_p1 = reg_468;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_417_p1 = grp_fu_423_p2;
    end else begin
        grp_fu_417_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_430_p0 = tmp_4_8_reg_819;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_430_p0 = tmp_4_6_reg_809;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_430_p0 = tmp_4_4_reg_799;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_430_p0 = tmp_4_2_reg_789;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_430_p0 = reg_468;
    end else begin
        grp_fu_430_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_436_p0 = tmp_4_9_reg_824;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_436_p0 = tmp_4_7_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_436_p0 = tmp_4_5_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_436_p0 = tmp_4_3_reg_794;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_436_p0 = tmp_4_1_reg_774;
    end else begin
        grp_fu_436_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_442_p1 = dense_array_q1;
    end else if (((1'b1 == ap_CS_fsm_state16) | ((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        grp_fu_442_p1 = dense_array_q0;
    end else begin
        grp_fu_442_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_448_p1 = dense_array_q0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_448_p1 = dense_array_q1;
    end else begin
        grp_fu_448_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        prediction_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        prediction_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        prediction_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        prediction_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        prediction_address0 = 64'd0;
    end else begin
        prediction_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        prediction_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        prediction_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        prediction_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        prediction_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        prediction_address1 = 64'd1;
    end else begin
        prediction_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        prediction_ce1 = 1'b1;
    end else begin
        prediction_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        prediction_we1 = 1'b1;
    end else begin
        prediction_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_501_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln11_fu_507_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln11_fu_507_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln27_fu_619_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln27_fu_619_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_513_p2 = (ap_phi_mux_indvar_flatten_phi_fu_353_p4 + 14'd1);

assign add_ln18_1_fu_586_p2 = (add_ln18_fu_580_p2 + zext_ln17_fu_547_p1);

assign add_ln18_fu_580_p2 = (zext_ln18_3_fu_576_p1 + zext_ln18_2_fu_564_p1);

assign add_ln8_fu_490_p2 = (phi_ln8_reg_338 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign d_fu_519_p2 = (ap_phi_mux_d_0_phi_fu_364_p4 + 4'd1);

assign dense_weights_address0 = zext_ln18_4_fu_592_p1;

assign f_fu_597_p2 = (select_ln18_reg_659 + 11'd1);

assign flat_array_address0 = zext_ln18_1_fu_551_p1;

assign i_fu_625_p2 = (ap_phi_mux_i_0_phi_fu_410_p4 + 4'd1);

assign icmp_ln11_fu_507_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_353_p4 == 14'd16000) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_610_p2 = ((f_reg_690 == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_525_p2 = ((ap_phi_mux_f_0_phi_fu_375_p4 == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_619_p2 = ((ap_phi_mux_i_0_phi_fu_410_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_501_p2 = ((phi_ln8_reg_338 == 4'd9) ? 1'b1 : 1'b0);

assign prediction_d0 = grp_fu_430_p2;

assign prediction_d1 = grp_fu_436_p2;

assign select_ln18_1_fu_602_p3 = ((icmp_ln16_reg_654[0:0] === 1'b1) ? 32'd0 : w_sum_0_reg_382);

assign select_ln18_2_fu_539_p3 = ((icmp_ln16_fu_525_p2[0:0] === 1'b1) ? d_fu_519_p2 : ap_phi_mux_d_0_phi_fu_364_p4);

assign select_ln18_fu_531_p3 = ((icmp_ln16_fu_525_p2[0:0] === 1'b1) ? 11'd0 : ap_phi_mux_f_0_phi_fu_375_p4);

assign tmp_3_fu_556_p3 = {{select_ln18_fu_531_p3}, {3'd0}};

assign tmp_8_fu_568_p3 = {{select_ln18_fu_531_p3}, {1'd0}};

assign zext_ln17_fu_547_p1 = select_ln18_2_fu_539_p3;

assign zext_ln18_1_fu_551_p1 = select_ln18_fu_531_p3;

assign zext_ln18_2_fu_564_p1 = tmp_3_fu_556_p3;

assign zext_ln18_3_fu_576_p1 = tmp_8_fu_568_p3;

assign zext_ln18_4_fu_592_p1 = add_ln18_1_fu_586_p2;

assign zext_ln18_fu_615_p1 = select_ln18_2_reg_664_pp0_iter1_reg;

assign zext_ln29_fu_631_p1 = ap_phi_mux_i_0_phi_fu_410_p4;

assign zext_ln8_fu_496_p1 = phi_ln8_reg_338;

endmodule //dense
