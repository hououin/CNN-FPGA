-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flat_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    flat_array_ce0 : OUT STD_LOGIC;
    flat_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_ce0 : OUT STD_LOGIC;
    prediction_we0 : OUT STD_LOGIC;
    prediction_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_ce1 : OUT STD_LOGIC;
    prediction_we1 : OUT STD_LOGIC;
    prediction_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dense is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dense,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=32053,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=19,HLS_SYN_FF=1759,HLS_SYN_LUT=5149,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv14_3E80 : STD_LOGIC_VECTOR (13 downto 0) := "11111010000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv11_640 : STD_LOGIC_VECTOR (10 downto 0) := "11001000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_weights_ce0 : STD_LOGIC;
    signal dense_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_349 : STD_LOGIC_VECTOR (13 downto 0);
    signal d_0_reg_360 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_371 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_sum_0_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_0_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_406 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln11_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_645_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln27_reg_710 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_710_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dense_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal dense_array_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal icmp_ln27_reg_710_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln8_fu_490_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln8_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln11_fu_513_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln11_reg_649 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln16_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_531_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln18_reg_659 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln18_2_fu_539_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_2_reg_664 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_2_reg_664_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal f_fu_597_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_reg_690 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln18_1_fu_602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln16_1_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_1_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_625_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_714 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_1_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_3_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_4_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_4_5_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_4_7_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_8_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_4_9_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal dense_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_ce0 : STD_LOGIC;
    signal dense_array_we0 : STD_LOGIC;
    signal dense_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_ce1 : STD_LOGIC;
    signal phi_ln8_reg_338 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_353_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_d_0_phi_fu_364_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_f_0_phi_fu_375_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_i_0_phi_fu_410_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln8_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_4_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_1_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln29_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal grp_fu_430_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_436_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_fu_519_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_556_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_568_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln18_3_fu_576_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln18_2_fu_564_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_fu_580_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln17_fu_547_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_1_fu_586_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component dense_fadd_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_fdiv_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_fexp_32ns_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_dense_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_dense_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_weights_U : component dense_dense_weights
    generic map (
        DataWidth => 32,
        AddressRange => 16000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_weights_address0,
        ce0 => dense_weights_ce0,
        q0 => dense_weights_q0);

    dense_array_U : component dense_dense_array
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_address0,
        ce0 => dense_array_ce0,
        we0 => dense_array_we0,
        d0 => dense_array_d0,
        q0 => dense_array_q0,
        address1 => dense_array_address1,
        ce1 => dense_array_ce1,
        q1 => dense_array_q1);

    dense_fadd_32ns_3bkb_U1 : component dense_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_417_p0,
        din1 => grp_fu_417_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_417_p2);

    dense_fmul_32ns_3cud_U2 : component dense_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_weights_q0,
        din1 => flat_array_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_423_p2);

    dense_fdiv_32ns_3dEe_U3 : component dense_fdiv_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_430_p0,
        din1 => sum_0_reg_394,
        ce => ap_const_logic_1,
        dout => grp_fu_430_p2);

    dense_fdiv_32ns_3dEe_U4 : component dense_fdiv_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_436_p0,
        din1 => sum_0_reg_394,
        ce => ap_const_logic_1,
        dout => grp_fu_436_p2);

    dense_fexp_32ns_3eOg_U5 : component dense_fexp_32ns_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_442_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_442_p2);

    dense_fexp_32ns_3eOg_U6 : component dense_fexp_32ns_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_448_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_448_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_501_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_501_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_501_p2 = ap_const_lv1_1))) then 
                d_0_reg_360 <= ap_const_lv4_0;
            elsif (((icmp_ln11_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                d_0_reg_360 <= select_ln18_2_reg_664;
            end if; 
        end if;
    end process;

    f_0_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_501_p2 = ap_const_lv1_1))) then 
                f_0_reg_371 <= ap_const_lv11_0;
            elsif (((icmp_ln11_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                f_0_reg_371 <= f_reg_690;
            end if; 
        end if;
    end process;

    i_0_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_710 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_0_reg_406 <= i_reg_714;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_406 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_501_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_349 <= ap_const_lv14_0;
            elsif (((icmp_ln11_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_349 <= add_ln11_reg_649;
            end if; 
        end if;
    end process;

    phi_ln8_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln8_reg_338 <= add_ln8_fu_490_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln8_reg_338 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sum_0_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_710_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                sum_0_reg_394 <= grp_fu_417_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sum_0_reg_394 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_501_p2 = ap_const_lv1_1))) then 
                w_sum_0_reg_382 <= ap_const_lv32_0;
            elsif (((icmp_ln11_reg_645_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                w_sum_0_reg_382 <= grp_fu_417_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln11_reg_649 <= add_ln11_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                f_reg_690 <= f_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_reg_714 <= i_fu_625_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln11_reg_645 <= icmp_ln11_fu_507_p2;
                icmp_ln11_reg_645_pp0_iter1_reg <= icmp_ln11_reg_645;
                select_ln18_2_reg_664_pp0_iter1_reg <= select_ln18_2_reg_664;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_reg_645 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln16_1_reg_706 <= icmp_ln16_1_fu_610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_507_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln16_reg_654 <= icmp_ln16_fu_525_p2;
                select_ln18_reg_659 <= select_ln18_fu_531_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln27_reg_710 <= icmp_ln27_fu_619_p2;
                icmp_ln27_reg_710_pp1_iter1_reg <= icmp_ln27_reg_710;
                icmp_ln27_reg_710_pp1_iter2_reg <= icmp_ln27_reg_710_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((icmp_ln27_reg_710_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then
                reg_468 <= grp_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_507_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_2_reg_664 <= select_ln18_2_fu_539_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_4_1_reg_774 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_4_2_reg_789 <= grp_fu_442_p2;
                tmp_4_3_reg_794 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_4_4_reg_799 <= grp_fu_442_p2;
                tmp_4_5_reg_804 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_4_6_reg_809 <= grp_fu_442_p2;
                tmp_4_7_reg_814 <= grp_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_4_8_reg_819 <= grp_fu_442_p2;
                tmp_4_9_reg_824 <= grp_fu_448_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_CS_fsm_state2, icmp_ln8_fu_501_p2, icmp_ln11_fu_507_p2, ap_enable_reg_pp0_iter0, icmp_ln27_fu_619_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_501_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln11_fu_507_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln11_fu_507_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln27_fu_619_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln27_fu_619_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_fu_513_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_353_p4) + unsigned(ap_const_lv14_1));
    add_ln18_1_fu_586_p2 <= std_logic_vector(unsigned(add_ln18_fu_580_p2) + unsigned(zext_ln17_fu_547_p1));
    add_ln18_fu_580_p2 <= std_logic_vector(unsigned(zext_ln18_3_fu_576_p1) + unsigned(zext_ln18_2_fu_564_p1));
    add_ln8_fu_490_p2 <= std_logic_vector(unsigned(phi_ln8_reg_338) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(7);
    ap_CS_fsm_state16 <= ap_CS_fsm(8);
    ap_CS_fsm_state17 <= ap_CS_fsm(9);
    ap_CS_fsm_state18 <= ap_CS_fsm(10);
    ap_CS_fsm_state19 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(12);
    ap_CS_fsm_state21 <= ap_CS_fsm(13);
    ap_CS_fsm_state22 <= ap_CS_fsm(14);
    ap_CS_fsm_state23 <= ap_CS_fsm(15);
    ap_CS_fsm_state24 <= ap_CS_fsm(16);
    ap_CS_fsm_state25 <= ap_CS_fsm(17);
    ap_CS_fsm_state26 <= ap_CS_fsm(18);
    ap_CS_fsm_state27 <= ap_CS_fsm(19);
    ap_CS_fsm_state28 <= ap_CS_fsm(20);
    ap_CS_fsm_state29 <= ap_CS_fsm(21);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln11_fu_507_p2)
    begin
        if ((icmp_ln11_fu_507_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln27_fu_619_p2)
    begin
        if ((icmp_ln27_fu_619_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_d_0_phi_fu_364_p4_assign_proc : process(d_0_reg_360, ap_enable_reg_pp0_iter1, icmp_ln11_reg_645, ap_CS_fsm_pp0_stage0, select_ln18_2_reg_664, ap_block_pp0_stage0)
    begin
        if (((icmp_ln11_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_d_0_phi_fu_364_p4 <= select_ln18_2_reg_664;
        else 
            ap_phi_mux_d_0_phi_fu_364_p4 <= d_0_reg_360;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_375_p4_assign_proc : process(f_0_reg_371, ap_enable_reg_pp0_iter1, icmp_ln11_reg_645, ap_CS_fsm_pp0_stage0, f_reg_690, ap_block_pp0_stage0)
    begin
        if (((icmp_ln11_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_375_p4 <= f_reg_690;
        else 
            ap_phi_mux_f_0_phi_fu_375_p4 <= f_0_reg_371;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_410_p4_assign_proc : process(i_0_reg_406, ap_CS_fsm_pp1_stage0, icmp_ln27_reg_710, i_reg_714, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln27_reg_710 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_0_phi_fu_410_p4 <= i_reg_714;
        else 
            ap_phi_mux_i_0_phi_fu_410_p4 <= i_0_reg_406;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_353_p4_assign_proc : process(indvar_flatten_reg_349, ap_enable_reg_pp0_iter1, icmp_ln11_reg_645, ap_CS_fsm_pp0_stage0, add_ln11_reg_649, ap_block_pp0_stage0)
    begin
        if (((icmp_ln11_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_353_p4 <= add_ln11_reg_649;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_353_p4 <= indvar_flatten_reg_349;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_519_p2 <= std_logic_vector(unsigned(ap_phi_mux_d_0_phi_fu_364_p4) + unsigned(ap_const_lv4_1));

    dense_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_block_pp1_stage0, zext_ln8_fu_496_p1, zext_ln18_fu_615_p1, ap_block_pp0_stage1, zext_ln29_fu_631_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_array_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_array_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dense_array_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_array_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dense_array_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dense_array_address0 <= zext_ln29_fu_631_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_array_address0 <= zext_ln18_fu_615_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dense_array_address0 <= zext_ln8_fu_496_p1(4 - 1 downto 0);
        else 
            dense_array_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_address1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state15, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_array_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_array_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dense_array_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_array_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dense_array_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            dense_array_address1 <= "XXXX";
        end if; 
    end process;


    dense_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            dense_array_ce0 <= ap_const_logic_1;
        else 
            dense_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_ce1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state15, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            dense_array_ce1 <= ap_const_logic_1;
        else 
            dense_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_d0_assign_proc : process(grp_fu_417_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_array_d0 <= grp_fu_417_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dense_array_d0 <= ap_const_lv32_0;
        else 
            dense_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_array_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_state2, icmp_ln16_1_reg_706)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln16_1_reg_706 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dense_array_we0 <= ap_const_logic_1;
        else 
            dense_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_weights_address0 <= zext_ln18_4_fu_592_p1(14 - 1 downto 0);

    dense_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_ce0 <= ap_const_logic_1;
        else 
            dense_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_597_p2 <= std_logic_vector(unsigned(select_ln18_reg_659) + unsigned(ap_const_lv11_1));
    flat_array_address0 <= zext_ln18_1_fu_551_p1(11 - 1 downto 0);

    flat_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            flat_array_ce0 <= ap_const_logic_1;
        else 
            flat_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_417_p0_assign_proc : process(sum_0_reg_394, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter2, ap_CS_fsm_pp0_stage0, select_ln18_1_fu_602_p3, ap_block_pp0_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            grp_fu_417_p0 <= sum_0_reg_394;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_417_p0 <= select_ln18_1_fu_602_p3;
        else 
            grp_fu_417_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_417_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage1, reg_468, ap_enable_reg_pp1_iter2, ap_CS_fsm_pp0_stage0, grp_fu_423_p2, ap_block_pp0_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            grp_fu_417_p1 <= reg_468;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_417_p1 <= grp_fu_423_p2;
        else 
            grp_fu_417_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_430_p0_assign_proc : process(reg_468, ap_CS_fsm_state20, tmp_4_2_reg_789, tmp_4_4_reg_799, ap_CS_fsm_state21, tmp_4_6_reg_809, ap_CS_fsm_state22, tmp_4_8_reg_819, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_430_p0 <= tmp_4_8_reg_819;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_430_p0 <= tmp_4_6_reg_809;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_430_p0 <= tmp_4_4_reg_799;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_430_p0 <= tmp_4_2_reg_789;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_430_p0 <= reg_468;
        else 
            grp_fu_430_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_436_p0_assign_proc : process(ap_CS_fsm_state20, tmp_4_1_reg_774, tmp_4_3_reg_794, ap_CS_fsm_state21, tmp_4_5_reg_804, ap_CS_fsm_state22, tmp_4_7_reg_814, ap_CS_fsm_state23, tmp_4_9_reg_824, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_436_p0 <= tmp_4_9_reg_824;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_436_p0 <= tmp_4_7_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_436_p0 <= tmp_4_5_reg_804;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_436_p0 <= tmp_4_3_reg_794;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_436_p0 <= tmp_4_1_reg_774;
        else 
            grp_fu_436_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_442_p1_assign_proc : process(dense_array_q0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state16, dense_array_q1, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state18, ap_block_pp1_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_442_p1 <= dense_array_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_442_p1 <= dense_array_q0;
        else 
            grp_fu_442_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_448_p1_assign_proc : process(dense_array_q0, ap_CS_fsm_state16, dense_array_q1, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_448_p1 <= dense_array_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_448_p1 <= dense_array_q1;
        else 
            grp_fu_448_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_625_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_410_p4) + unsigned(ap_const_lv4_1));
    icmp_ln11_fu_507_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_353_p4 = ap_const_lv14_3E80) else "0";
    icmp_ln16_1_fu_610_p2 <= "1" when (f_reg_690 = ap_const_lv11_640) else "0";
    icmp_ln16_fu_525_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_375_p4 = ap_const_lv11_640) else "0";
    icmp_ln27_fu_619_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_410_p4 = ap_const_lv4_A) else "0";
    icmp_ln8_fu_501_p2 <= "1" when (phi_ln8_reg_338 = ap_const_lv4_9) else "0";

    prediction_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            prediction_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            prediction_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            prediction_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            prediction_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            prediction_address0 <= "XXXX";
        end if; 
    end process;


    prediction_address1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            prediction_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            prediction_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            prediction_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            prediction_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            prediction_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            prediction_address1 <= "XXXX";
        end if; 
    end process;


    prediction_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            prediction_ce0 <= ap_const_logic_1;
        else 
            prediction_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_ce1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            prediction_ce1 <= ap_const_logic_1;
        else 
            prediction_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_d0 <= grp_fu_430_p2;
    prediction_d1 <= grp_fu_436_p2;

    prediction_we0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            prediction_we0 <= ap_const_logic_1;
        else 
            prediction_we0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_we1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            prediction_we1 <= ap_const_logic_1;
        else 
            prediction_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln18_1_fu_602_p3 <= 
        ap_const_lv32_0 when (icmp_ln16_reg_654(0) = '1') else 
        w_sum_0_reg_382;
    select_ln18_2_fu_539_p3 <= 
        d_fu_519_p2 when (icmp_ln16_fu_525_p2(0) = '1') else 
        ap_phi_mux_d_0_phi_fu_364_p4;
    select_ln18_fu_531_p3 <= 
        ap_const_lv11_0 when (icmp_ln16_fu_525_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_375_p4;
    tmp_3_fu_556_p3 <= (select_ln18_fu_531_p3 & ap_const_lv3_0);
    tmp_8_fu_568_p3 <= (select_ln18_fu_531_p3 & ap_const_lv1_0);
    zext_ln17_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_2_fu_539_p3),15));
    zext_ln18_1_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_531_p3),64));
    zext_ln18_2_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_556_p3),15));
    zext_ln18_3_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_568_p3),15));
    zext_ln18_4_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_1_fu_586_p2),64));
    zext_ln18_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_2_reg_664_pp0_iter1_reg),64));
    zext_ln29_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_410_p4),64));
    zext_ln8_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln8_reg_338),64));
end behav;
