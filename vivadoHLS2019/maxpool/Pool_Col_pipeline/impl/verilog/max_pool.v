// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.229250,HLS_SYN_LAT=9127,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=287,HLS_SYN_LUT=812,HLS_VERSION=2019_1}" *)

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [9:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_ce0;
reg max_pool_out_ce0;
reg max_pool_out_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] indvar_flatten_reg_188;
reg   [1:0] mpr_0_reg_199;
reg   [31:0] max_1_reg_210;
reg   [1:0] mpc_0_reg_223;
wire   [0:0] icmp_ln10_fu_240_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln10_fu_246_p2;
reg   [9:0] add_ln10_reg_654;
wire   [0:0] icmp_ln13_fu_258_p2;
reg   [0:0] icmp_ln13_reg_659;
wire   [2:0] select_ln29_1_fu_272_p3;
reg   [2:0] select_ln29_1_reg_664;
wire   [12:0] zext_ln26_fu_280_p1;
reg   [12:0] zext_ln26_reg_669;
wire   [10:0] zext_ln26_1_fu_284_p1;
reg   [10:0] zext_ln26_1_reg_674;
wire   [3:0] select_ln13_fu_334_p3;
reg   [3:0] select_ln13_reg_679;
wire   [4:0] select_ln13_1_fu_350_p3;
reg   [4:0] select_ln13_1_reg_685;
wire   [3:0] select_ln13_2_fu_358_p3;
reg   [3:0] select_ln13_2_reg_690;
wire   [7:0] mul_ln36_fu_370_p2;
reg   [7:0] mul_ln36_reg_695;
wire   [4:0] shl_ln1_fu_376_p3;
reg   [4:0] shl_ln1_reg_700;
wire   [0:0] icmp_ln20_fu_384_p2;
reg   [0:0] icmp_ln20_reg_705;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln20_reg_705_pp0_iter1_reg;
reg   [0:0] icmp_ln20_reg_705_pp0_iter2_reg;
wire   [2:0] add_ln20_1_fu_390_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln20_fu_408_p3;
reg   [1:0] select_ln20_reg_714;
wire   [1:0] select_ln20_1_fu_416_p3;
reg   [1:0] select_ln20_1_reg_719;
wire   [1:0] mpc_fu_424_p2;
reg   [31:0] max_reg_735;
wire   [31:0] max_2_fu_571_p3;
reg    ap_enable_reg_pp0_iter3;
wire   [3:0] c_fu_622_p2;
wire    ap_CS_fsm_state7;
wire   [7:0] select_ln13_3_fu_633_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [9:0] indvar_flatten25_reg_132;
reg   [2:0] f_0_reg_143;
reg   [7:0] indvar_flatten7_reg_154;
reg   [3:0] r_0_reg_166;
reg   [3:0] c_0_reg_177;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_203_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_max_1_phi_fu_215_p4;
wire   [63:0] zext_ln29_3_fu_483_p1;
wire   [63:0] zext_ln36_3_fu_617_p1;
wire   [2:0] f_fu_252_p2;
wire   [4:0] shl_ln_fu_288_p3;
wire   [0:0] icmp_ln16_fu_310_p2;
wire   [0:0] xor_ln29_fu_304_p2;
wire   [3:0] select_ln29_fu_264_p3;
wire   [0:0] and_ln29_2_fu_316_p2;
wire   [0:0] or_ln13_fu_328_p2;
wire   [3:0] r_fu_322_p2;
wire   [4:0] shl_ln26_mid1_fu_342_p3;
wire   [4:0] select_ln29_2_fu_296_p3;
wire   [3:0] mul_ln36_fu_370_p0;
wire   [0:0] icmp_ln23_fu_402_p2;
wire   [1:0] mpr_fu_396_p2;
wire   [4:0] zext_ln20_fu_430_p1;
wire   [4:0] add_ln20_fu_433_p2;
wire   [4:0] zext_ln23_fu_442_p1;
wire   [4:0] j_fu_445_p2;
wire   [9:0] grp_fu_640_p3;
wire   [10:0] tmp_2_fu_461_p3;
wire   [12:0] p_shl_cast_fu_454_p3;
wire   [12:0] zext_ln29_2_fu_468_p1;
wire   [12:0] sub_ln29_fu_472_p2;
wire   [12:0] add_ln29_1_fu_478_p2;
wire   [31:0] bitcast_ln29_fu_488_p1;
wire   [31:0] bitcast_ln29_1_fu_505_p1;
wire   [7:0] tmp_fu_491_p4;
wire   [22:0] trunc_ln29_fu_501_p1;
wire   [0:0] icmp_ln29_1_fu_529_p2;
wire   [0:0] icmp_ln29_fu_523_p2;
wire   [7:0] tmp_6_fu_509_p4;
wire   [22:0] trunc_ln29_1_fu_519_p1;
wire   [0:0] icmp_ln29_3_fu_547_p2;
wire   [0:0] icmp_ln29_2_fu_541_p2;
wire   [0:0] or_ln29_fu_535_p2;
wire   [0:0] or_ln29_1_fu_553_p2;
wire   [0:0] and_ln29_fu_559_p2;
wire   [0:0] grp_fu_234_p2;
wire   [0:0] and_ln29_1_fu_565_p2;
wire   [7:0] zext_ln36_1_fu_578_p1;
wire   [7:0] add_ln36_fu_581_p2;
wire   [8:0] tmp_1_fu_594_p3;
wire   [10:0] p_shl2_cast_fu_586_p3;
wire   [10:0] zext_ln36_2_fu_602_p1;
wire   [10:0] sub_ln36_fu_606_p2;
wire   [10:0] add_ln36_1_fu_612_p2;
wire   [7:0] add_ln13_1_fu_627_p2;
wire   [5:0] grp_fu_640_p0;
wire   [4:0] grp_fu_640_p1;
wire   [4:0] grp_fu_640_p2;
wire    ap_block_pp0_stage0_00001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_640_p10;
wire   [9:0] grp_fu_640_p20;
wire   [7:0] mul_ln36_fu_370_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

max_pool_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_fcmp_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_out_q0),
    .din1(ap_phi_mux_max_1_phi_fu_215_p4),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_234_p2)
);

max_pool_mac_mulacud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
max_pool_mac_mulacud_U2(
    .din0(grp_fu_640_p0),
    .din1(grp_fu_640_p1),
    .din2(grp_fu_640_p2),
    .dout(grp_fu_640_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln10_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln10_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_0_reg_177 <= c_fu_622_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_177 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        f_0_reg_143 <= select_ln29_1_reg_664;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_143 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten25_reg_132 <= add_ln10_reg_654;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten25_reg_132 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten7_reg_154 <= select_ln13_3_fu_633_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten7_reg_154 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_384_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_188 <= add_ln20_1_fu_390_p2;
    end else if (((icmp_ln10_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_188 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_705_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_1_reg_210 <= max_2_fu_571_p3;
    end else if (((icmp_ln10_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        max_1_reg_210 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_384_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mpc_0_reg_223 <= mpc_fu_424_p2;
    end else if (((icmp_ln10_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mpc_0_reg_223 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_705 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mpr_0_reg_199 <= select_ln20_1_reg_719;
    end else if (((icmp_ln10_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mpr_0_reg_199 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_0_reg_166 <= select_ln13_2_reg_690;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_166 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln10_reg_654 <= add_ln10_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln13_reg_659 <= icmp_ln13_fu_258_p2;
        mul_ln36_reg_695 <= mul_ln36_fu_370_p2;
        select_ln13_1_reg_685[4 : 1] <= select_ln13_1_fu_350_p3[4 : 1];
        select_ln13_2_reg_690 <= select_ln13_2_fu_358_p3;
        select_ln13_reg_679 <= select_ln13_fu_334_p3;
        select_ln29_1_reg_664 <= select_ln29_1_fu_272_p3;
        shl_ln1_reg_700[4 : 1] <= shl_ln1_fu_376_p3[4 : 1];
        zext_ln26_1_reg_674[2 : 0] <= zext_ln26_1_fu_284_p1[2 : 0];
        zext_ln26_reg_669[2 : 0] <= zext_ln26_fu_280_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln20_reg_705 <= icmp_ln20_fu_384_p2;
        icmp_ln20_reg_705_pp0_iter1_reg <= icmp_ln20_reg_705;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln20_reg_705_pp0_iter2_reg <= icmp_ln20_reg_705_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_705_pp0_iter1_reg == 1'd0))) begin
        max_reg_735 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_384_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln20_1_reg_719 <= select_ln20_1_fu_416_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_384_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln20_reg_714 <= select_ln20_fu_408_p3;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_384_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_705_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_max_1_phi_fu_215_p4 = max_2_fu_571_p3;
    end else begin
        ap_phi_mux_max_1_phi_fu_215_p4 = max_1_reg_210;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_705 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_203_p4 = select_ln20_1_reg_719;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_203_p4 = mpr_0_reg_199;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln20_fu_384_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln20_fu_384_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_246_p2 = (indvar_flatten25_reg_132 + 10'd1);

assign add_ln13_1_fu_627_p2 = (indvar_flatten7_reg_154 + 8'd1);

assign add_ln20_1_fu_390_p2 = (indvar_flatten_reg_188 + 3'd1);

assign add_ln20_fu_433_p2 = (zext_ln20_fu_430_p1 + select_ln13_1_reg_685);

assign add_ln29_1_fu_478_p2 = (sub_ln29_fu_472_p2 + zext_ln26_reg_669);

assign add_ln36_1_fu_612_p2 = (zext_ln26_1_reg_674 + sub_ln36_fu_606_p2);

assign add_ln36_fu_581_p2 = (zext_ln36_1_fu_578_p1 + mul_ln36_reg_695);

assign and_ln29_1_fu_565_p2 = (grp_fu_234_p2 & and_ln29_fu_559_p2);

assign and_ln29_2_fu_316_p2 = (xor_ln29_fu_304_p2 & icmp_ln16_fu_310_p2);

assign and_ln29_fu_559_p2 = (or_ln29_fu_535_p2 & or_ln29_1_fu_553_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_1_fu_505_p1 = max_1_reg_210;

assign bitcast_ln29_fu_488_p1 = max_reg_735;

assign c_fu_622_p2 = (select_ln13_reg_679 + 4'd1);

assign conv_out_address0 = zext_ln29_3_fu_483_p1;

assign f_fu_252_p2 = (f_0_reg_143 + 3'd1);

assign grp_fu_640_p0 = 10'd26;

assign grp_fu_640_p1 = grp_fu_640_p10;

assign grp_fu_640_p10 = add_ln20_fu_433_p2;

assign grp_fu_640_p2 = grp_fu_640_p20;

assign grp_fu_640_p20 = j_fu_445_p2;

assign icmp_ln10_fu_240_p2 = ((indvar_flatten25_reg_132 == 10'd1014) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_258_p2 = ((indvar_flatten7_reg_154 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_310_p2 = ((c_0_reg_177 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_384_p2 = ((indvar_flatten_reg_188 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_402_p2 = ((mpc_0_reg_223 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_529_p2 = ((trunc_ln29_fu_501_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_541_p2 = ((tmp_6_fu_509_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_547_p2 = ((trunc_ln29_1_fu_519_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_523_p2 = ((tmp_fu_491_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_fu_445_p2 = (zext_ln23_fu_442_p1 + shl_ln1_reg_700);

assign max_2_fu_571_p3 = ((and_ln29_1_fu_565_p2[0:0] === 1'b1) ? max_reg_735 : max_1_reg_210);

assign max_pool_out_address0 = zext_ln36_3_fu_617_p1;

assign max_pool_out_d0 = max_1_reg_210;

assign mpc_fu_424_p2 = (2'd1 + select_ln20_fu_408_p3);

assign mpr_fu_396_p2 = (2'd1 + ap_phi_mux_mpr_0_phi_fu_203_p4);

assign mul_ln36_fu_370_p0 = mul_ln36_fu_370_p00;

assign mul_ln36_fu_370_p00 = select_ln13_2_fu_358_p3;

assign mul_ln36_fu_370_p2 = (mul_ln36_fu_370_p0 * $signed('hD));

assign or_ln13_fu_328_p2 = (icmp_ln13_fu_258_p2 | and_ln29_2_fu_316_p2);

assign or_ln29_1_fu_553_p2 = (icmp_ln29_3_fu_547_p2 | icmp_ln29_2_fu_541_p2);

assign or_ln29_fu_535_p2 = (icmp_ln29_fu_523_p2 | icmp_ln29_1_fu_529_p2);

assign p_shl2_cast_fu_586_p3 = {{add_ln36_fu_581_p2}, {3'd0}};

assign p_shl_cast_fu_454_p3 = {{grp_fu_640_p3}, {3'd0}};

assign r_fu_322_p2 = (select_ln29_fu_264_p3 + 4'd1);

assign select_ln13_1_fu_350_p3 = ((and_ln29_2_fu_316_p2[0:0] === 1'b1) ? shl_ln26_mid1_fu_342_p3 : select_ln29_2_fu_296_p3);

assign select_ln13_2_fu_358_p3 = ((and_ln29_2_fu_316_p2[0:0] === 1'b1) ? r_fu_322_p2 : select_ln29_fu_264_p3);

assign select_ln13_3_fu_633_p3 = ((icmp_ln13_reg_659[0:0] === 1'b1) ? 8'd1 : add_ln13_1_fu_627_p2);

assign select_ln13_fu_334_p3 = ((or_ln13_fu_328_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_177);

assign select_ln20_1_fu_416_p3 = ((icmp_ln23_fu_402_p2[0:0] === 1'b1) ? mpr_fu_396_p2 : ap_phi_mux_mpr_0_phi_fu_203_p4);

assign select_ln20_fu_408_p3 = ((icmp_ln23_fu_402_p2[0:0] === 1'b1) ? 2'd0 : mpc_0_reg_223);

assign select_ln29_1_fu_272_p3 = ((icmp_ln13_fu_258_p2[0:0] === 1'b1) ? f_fu_252_p2 : f_0_reg_143);

assign select_ln29_2_fu_296_p3 = ((icmp_ln13_fu_258_p2[0:0] === 1'b1) ? 5'd0 : shl_ln_fu_288_p3);

assign select_ln29_fu_264_p3 = ((icmp_ln13_fu_258_p2[0:0] === 1'b1) ? 4'd0 : r_0_reg_166);

assign shl_ln1_fu_376_p3 = {{select_ln13_fu_334_p3}, {1'd0}};

assign shl_ln26_mid1_fu_342_p3 = {{r_fu_322_p2}, {1'd0}};

assign shl_ln_fu_288_p3 = {{r_0_reg_166}, {1'd0}};

assign sub_ln29_fu_472_p2 = (p_shl_cast_fu_454_p3 - zext_ln29_2_fu_468_p1);

assign sub_ln36_fu_606_p2 = (p_shl2_cast_fu_586_p3 - zext_ln36_2_fu_602_p1);

assign tmp_1_fu_594_p3 = {{add_ln36_fu_581_p2}, {1'd0}};

assign tmp_2_fu_461_p3 = {{grp_fu_640_p3}, {1'd0}};

assign tmp_6_fu_509_p4 = {{bitcast_ln29_1_fu_505_p1[30:23]}};

assign tmp_fu_491_p4 = {{bitcast_ln29_fu_488_p1[30:23]}};

assign trunc_ln29_1_fu_519_p1 = bitcast_ln29_1_fu_505_p1[22:0];

assign trunc_ln29_fu_501_p1 = bitcast_ln29_fu_488_p1[22:0];

assign xor_ln29_fu_304_p2 = (icmp_ln13_fu_258_p2 ^ 1'd1);

assign zext_ln20_fu_430_p1 = select_ln20_1_reg_719;

assign zext_ln23_fu_442_p1 = select_ln20_reg_714;

assign zext_ln26_1_fu_284_p1 = select_ln29_1_fu_272_p3;

assign zext_ln26_fu_280_p1 = select_ln29_1_fu_272_p3;

assign zext_ln29_2_fu_468_p1 = tmp_2_fu_461_p3;

assign zext_ln29_3_fu_483_p1 = add_ln29_1_fu_478_p2;

assign zext_ln36_1_fu_578_p1 = select_ln13_reg_679;

assign zext_ln36_2_fu_602_p1 = tmp_1_fu_594_p3;

assign zext_ln36_3_fu_617_p1 = add_ln36_1_fu_612_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_669[12:3] <= 10'b0000000000;
    zext_ln26_1_reg_674[10:3] <= 8'b00000000;
    select_ln13_1_reg_685[0] <= 1'b0;
    shl_ln1_reg_700[0] <= 1'b0;
end

endmodule //max_pool
