-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce1 : OUT STD_LOGIC;
    conv_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.538400,HLS_SYN_LAT=2509,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=559,HLS_SYN_LUT=1399,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_0_reg_172 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln16_reg_878 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln16_reg_878_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_207_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_834 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_213_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13_reg_839 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln10_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_217_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln13_1_reg_844 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln13_fu_221_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_852 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln13_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_233_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_861 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln29_fu_251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_reg_866 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_1_fu_267_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_1_reg_872 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln16_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_878_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_882 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln29_2_fu_338_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_2_reg_892 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_6_fu_394_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_6_reg_903 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_6_reg_903_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_fu_403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_reg_909 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_reg_909_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_reg_909_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out_load_1_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_fu_485_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_reg_927 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out_load_2_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln29_1_fu_610_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_1_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_2_fu_699_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_2_reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal f_0_reg_138 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_0_reg_149 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal phi_mul_reg_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_c_0_phi_fu_176_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln29_4_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_9_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_6_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln29_11_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_2_fu_826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_239_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_251_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln26_fu_257_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_1_fu_267_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_fu_285_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_2_fu_293_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_310_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_cast_fu_302_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_3_fu_318_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_fu_322_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_1_fu_328_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln27_fu_343_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_7_fu_349_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_4_fu_353_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_366_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_358_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_8_fu_374_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_2_fu_378_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_5_fu_384_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln36_fu_399_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_416_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_409_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_5_fu_423_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_1_fu_427_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_3_fu_433_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_447_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_457_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_1_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_501_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_494_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_10_fu_508_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_3_fu_512_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_7_fu_518_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_1_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_2_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_531_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_541_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_3_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_548_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_fu_558_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_5_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_4_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_2_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_2_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_3_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_4_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_620_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_3_fu_630_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_6_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_637_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_4_fu_647_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_9_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_8_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_3_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_4_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_3_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_4_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_5_fu_706_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_6_fu_724_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_710_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_5_fu_720_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_11_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_10_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_727_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_6_fu_737_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_13_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_12_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_5_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_6_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_5_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_6_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_804_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_797_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_1_fu_811_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln36_fu_815_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_1_fu_821_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln29_1_fu_267_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_fu_251_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component max_pool_fcmp_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_fcmp_32nbkb_U1 : component max_pool_fcmp_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_183_p0,
        din1 => grp_fu_183_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_183_p2);

    max_pool_fcmp_32nbkb_U2 : component max_pool_fcmp_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_189_p0,
        din1 => grp_fu_189_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_189_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln13_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln13_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_reg_878 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_172 <= c_reg_882;
            elsif (((icmp_ln13_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_172 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_227_p2 = ap_const_lv1_1))) then 
                f_0_reg_138 <= f_reg_834;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_138 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_mul_reg_160 <= add_ln13_reg_852;
            elsif (((icmp_ln10_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_160 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                r_0_reg_149 <= r_reg_861;
            elsif (((icmp_ln10_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_149 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_reg_878_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_194 <= conv_out_q1;
            elsif (((icmp_ln16_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_194 <= conv_out_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_reg_852 <= add_ln13_fu_221_p2;
                r_reg_861 <= r_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln29_2_reg_892(9 downto 1) <= add_ln29_2_fu_338_p2(9 downto 1);
                    add_ln29_6_reg_903(9 downto 1) <= add_ln29_6_fu_394_p2(9 downto 1);
                add_ln36_reg_909 <= add_ln36_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln29_6_reg_903_pp0_iter1_reg(9 downto 1) <= add_ln29_6_reg_903(9 downto 1);
                add_ln36_reg_909_pp0_iter1_reg <= add_ln36_reg_909;
                add_ln36_reg_909_pp0_iter2_reg <= add_ln36_reg_909_pp0_iter1_reg;
                icmp_ln16_reg_878 <= icmp_ln16_fu_273_p2;
                icmp_ln16_reg_878_pp0_iter1_reg <= icmp_ln16_reg_878;
                icmp_ln16_reg_878_pp0_iter2_reg <= icmp_ln16_reg_878_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                c_reg_882 <= c_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_878 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv_out_load_1_reg_920 <= conv_out_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_reg_878 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                conv_out_load_2_reg_934 <= conv_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_834 <= f_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    mul_ln29_1_reg_872(9 downto 1) <= mul_ln29_1_fu_267_p2(9 downto 1);
                    mul_ln29_reg_866(9 downto 1) <= mul_ln29_fu_251_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_878_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln29_1_reg_946 <= select_ln29_1_fu_610_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_reg_878_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln29_2_reg_953 <= select_ln29_2_fu_699_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_reg_878 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln29_reg_927 <= select_ln29_fu_485_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_1_reg_844(2 downto 0) <= zext_ln13_1_fu_217_p1(2 downto 0);
                    zext_ln13_reg_839(2 downto 0) <= zext_ln13_fu_213_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_839(10 downto 3) <= "00000000";
    zext_ln13_1_reg_844(12 downto 3) <= "0000000000";
    mul_ln29_reg_866(0) <= '0';
    mul_ln29_1_reg_872(0) <= '0';
    add_ln29_2_reg_892(0) <= '0';
    add_ln29_6_reg_903(0) <= '1';
    add_ln29_6_reg_903_pp0_iter1_reg(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, icmp_ln10_fu_201_p2, ap_CS_fsm_state3, icmp_ln13_fu_227_p2, icmp_ln16_fu_273_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_227_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln16_fu_273_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln16_fu_273_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln13_fu_221_p2 <= std_logic_vector(unsigned(phi_mul_reg_160) + unsigned(ap_const_lv8_D));
    add_ln29_1_fu_328_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_844) + unsigned(sub_ln29_fu_322_p2));
    add_ln29_2_fu_338_p2 <= std_logic_vector(unsigned(zext_ln29_2_fu_293_p1) + unsigned(mul_ln29_1_reg_872));
    add_ln29_3_fu_433_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_844) + unsigned(sub_ln29_1_fu_427_p2));
    add_ln29_4_fu_353_p2 <= std_logic_vector(unsigned(zext_ln29_7_fu_349_p1) + unsigned(mul_ln29_reg_866));
    add_ln29_5_fu_384_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_844) + unsigned(sub_ln29_2_fu_378_p2));
    add_ln29_6_fu_394_p2 <= std_logic_vector(unsigned(zext_ln29_7_fu_349_p1) + unsigned(mul_ln29_1_reg_872));
    add_ln29_7_fu_518_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_844) + unsigned(sub_ln29_3_fu_512_p2));
    add_ln29_fu_297_p2 <= std_logic_vector(unsigned(zext_ln29_2_fu_293_p1) + unsigned(mul_ln29_reg_866));
    add_ln36_1_fu_821_p2 <= std_logic_vector(unsigned(zext_ln13_reg_839) + unsigned(sub_ln36_fu_815_p2));
    add_ln36_fu_403_p2 <= std_logic_vector(unsigned(zext_ln36_fu_399_p1) + unsigned(phi_mul_reg_160));
    and_ln29_1_fu_598_p2 <= (or_ln29_2_fu_592_p2 and or_ln29_1_fu_574_p2);
    and_ln29_2_fu_604_p2 <= (grp_fu_183_p2 and and_ln29_1_fu_598_p2);
    and_ln29_3_fu_687_p2 <= (or_ln29_4_fu_681_p2 and or_ln29_3_fu_663_p2);
    and_ln29_4_fu_693_p2 <= (grp_fu_189_p2 and and_ln29_3_fu_687_p2);
    and_ln29_5_fu_777_p2 <= (or_ln29_6_fu_771_p2 and or_ln29_5_fu_753_p2);
    and_ln29_6_fu_783_p2 <= (grp_fu_189_p2 and and_ln29_5_fu_777_p2);
    and_ln29_fu_479_p2 <= (or_ln29_fu_473_p2 and grp_fu_183_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln16_fu_273_p2)
    begin
        if ((icmp_ln16_fu_273_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_201_p2)
    begin
        if (((icmp_ln10_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_176_p4_assign_proc : process(c_0_reg_172, icmp_ln16_reg_878, ap_CS_fsm_pp0_stage0, c_reg_882, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln16_reg_878 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_176_p4 <= c_reg_882;
        else 
            ap_phi_mux_c_0_phi_fu_176_p4 <= c_0_reg_172;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_201_p2)
    begin
        if (((icmp_ln10_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_1_fu_528_p1 <= conv_out_load_1_reg_920;
    bitcast_ln29_2_fu_545_p1 <= select_ln29_reg_927;
    bitcast_ln29_3_fu_617_p1 <= conv_out_load_2_reg_934;
    bitcast_ln29_4_fu_634_p1 <= select_ln29_1_reg_946;
    bitcast_ln29_5_fu_706_p1 <= reg_194;
    bitcast_ln29_6_fu_724_p1 <= select_ln29_2_reg_953;
    bitcast_ln29_fu_443_p1 <= reg_194;
    c_fu_279_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_176_p4) + unsigned(ap_const_lv4_1));

    conv_out_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln29_4_fu_333_p1, zext_ln29_6_fu_438_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_out_address0 <= zext_ln29_6_fu_438_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_out_address0 <= zext_ln29_4_fu_333_p1(12 - 1 downto 0);
            else 
                conv_out_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            conv_out_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln29_9_fu_389_p1, ap_block_pp0_stage1, zext_ln29_11_fu_523_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_out_address1 <= zext_ln29_11_fu_523_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_out_address1 <= zext_ln29_9_fu_389_p1(12 - 1 downto 0);
        else 
            conv_out_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            conv_out_ce1 <= ap_const_logic_1;
        else 
            conv_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_207_p2 <= std_logic_vector(unsigned(f_0_reg_138) + unsigned(ap_const_lv3_1));

    grp_fu_183_p0_assign_proc : process(conv_out_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, conv_out_load_1_reg_920, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_183_p0 <= conv_out_load_1_reg_920;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_183_p0 <= conv_out_q0;
        else 
            grp_fu_183_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_183_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, select_ln29_fu_485_p3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_183_p1 <= select_ln29_fu_485_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_183_p1 <= ap_const_lv32_800000;
        else 
            grp_fu_183_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_189_p0_assign_proc : process(conv_out_q1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, conv_out_load_2_reg_934, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_189_p0 <= conv_out_q1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_189_p0 <= conv_out_load_2_reg_934;
        else 
            grp_fu_189_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_189_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, select_ln29_1_fu_610_p3, select_ln29_2_fu_699_p3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_189_p1 <= select_ln29_2_fu_699_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_189_p1 <= select_ln29_1_fu_610_p3;
        else 
            grp_fu_189_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_201_p2 <= "1" when (f_0_reg_138 = ap_const_lv3_6) else "0";
    icmp_ln13_fu_227_p2 <= "1" when (r_0_reg_149 = ap_const_lv4_D) else "0";
    icmp_ln16_fu_273_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_176_p4 = ap_const_lv4_D) else "0";
    icmp_ln29_10_fu_741_p2 <= "0" when (tmp_10_fu_710_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_11_fu_747_p2 <= "1" when (trunc_ln29_5_fu_720_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_12_fu_759_p2 <= "0" when (tmp_11_fu_727_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_13_fu_765_p2 <= "1" when (trunc_ln29_6_fu_737_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_1_fu_467_p2 <= "1" when (trunc_ln29_fu_457_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_562_p2 <= "0" when (tmp_5_fu_531_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_568_p2 <= "1" when (trunc_ln29_1_fu_541_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_4_fu_580_p2 <= "0" when (tmp_6_fu_548_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_5_fu_586_p2 <= "1" when (trunc_ln29_2_fu_558_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_6_fu_651_p2 <= "0" when (tmp_8_fu_620_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_7_fu_657_p2 <= "1" when (trunc_ln29_3_fu_630_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_8_fu_669_p2 <= "0" when (tmp_9_fu_637_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_9_fu_675_p2 <= "1" when (trunc_ln29_4_fu_647_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_461_p2 <= "0" when (tmp_3_fu_447_p4 = ap_const_lv8_FF) else "1";
    max_pool_out_address0 <= zext_ln36_2_fu_826_p1(10 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= 
        reg_194 when (and_ln29_6_fu_783_p2(0) = '1') else 
        select_ln29_2_reg_953;

    max_pool_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2, icmp_ln16_reg_878_pp0_iter2_reg)
    begin
        if (((icmp_ln16_reg_878_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln29_1_fu_267_p0 <= mul_ln29_1_fu_267_p00(5 - 1 downto 0);
    mul_ln29_1_fu_267_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_257_p2),10));
    mul_ln29_1_fu_267_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln29_1_fu_267_p0) * unsigned(ap_const_lv10_1A), 10));
    mul_ln29_fu_251_p0 <= mul_ln29_fu_251_p00(5 - 1 downto 0);
    mul_ln29_fu_251_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_239_p3),10));
    mul_ln29_fu_251_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln29_fu_251_p0) * unsigned(ap_const_lv10_1A), 10));
    or_ln26_fu_257_p2 <= (shl_ln_fu_239_p3 or ap_const_lv5_1);
    or_ln27_fu_343_p2 <= (shl_ln1_fu_285_p3 or ap_const_lv5_1);
    or_ln29_1_fu_574_p2 <= (icmp_ln29_3_fu_568_p2 or icmp_ln29_2_fu_562_p2);
    or_ln29_2_fu_592_p2 <= (icmp_ln29_5_fu_586_p2 or icmp_ln29_4_fu_580_p2);
    or_ln29_3_fu_663_p2 <= (icmp_ln29_7_fu_657_p2 or icmp_ln29_6_fu_651_p2);
    or_ln29_4_fu_681_p2 <= (icmp_ln29_9_fu_675_p2 or icmp_ln29_8_fu_669_p2);
    or_ln29_5_fu_753_p2 <= (icmp_ln29_11_fu_747_p2 or icmp_ln29_10_fu_741_p2);
    or_ln29_6_fu_771_p2 <= (icmp_ln29_13_fu_765_p2 or icmp_ln29_12_fu_759_p2);
    or_ln29_fu_473_p2 <= (icmp_ln29_fu_461_p2 or icmp_ln29_1_fu_467_p2);
    p_shl2_cast_fu_494_p3 <= (add_ln29_6_reg_903_pp0_iter1_reg & ap_const_lv3_0);
    p_shl4_cast_fu_358_p3 <= (add_ln29_4_fu_353_p2 & ap_const_lv3_0);
    p_shl6_cast_fu_409_p3 <= (add_ln29_2_reg_892 & ap_const_lv3_0);
    p_shl8_cast_fu_302_p3 <= (add_ln29_fu_297_p2 & ap_const_lv3_0);
    p_shl_cast_fu_797_p3 <= (add_ln36_reg_909_pp0_iter2_reg & ap_const_lv3_0);
    r_fu_233_p2 <= std_logic_vector(unsigned(r_0_reg_149) + unsigned(ap_const_lv4_1));
    select_ln29_1_fu_610_p3 <= 
        conv_out_load_1_reg_920 when (and_ln29_2_fu_604_p2(0) = '1') else 
        select_ln29_reg_927;
    select_ln29_2_fu_699_p3 <= 
        conv_out_load_2_reg_934 when (and_ln29_4_fu_693_p2(0) = '1') else 
        select_ln29_1_reg_946;
    select_ln29_fu_485_p3 <= 
        reg_194 when (and_ln29_fu_479_p2(0) = '1') else 
        ap_const_lv32_800000;
    shl_ln1_fu_285_p3 <= (ap_phi_mux_c_0_phi_fu_176_p4 & ap_const_lv1_0);
    shl_ln_fu_239_p3 <= (r_0_reg_149 & ap_const_lv1_0);
    sub_ln29_1_fu_427_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_409_p3) - unsigned(zext_ln29_5_fu_423_p1));
    sub_ln29_2_fu_378_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_358_p3) - unsigned(zext_ln29_8_fu_374_p1));
    sub_ln29_3_fu_512_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_494_p3) - unsigned(zext_ln29_10_fu_508_p1));
    sub_ln29_fu_322_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_302_p3) - unsigned(zext_ln29_3_fu_318_p1));
    sub_ln36_fu_815_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_797_p3) - unsigned(zext_ln36_1_fu_811_p1));
    tmp_10_fu_710_p4 <= bitcast_ln29_5_fu_706_p1(30 downto 23);
    tmp_11_fu_727_p4 <= bitcast_ln29_6_fu_724_p1(30 downto 23);
    tmp_13_fu_310_p3 <= (add_ln29_fu_297_p2 & ap_const_lv1_0);
    tmp_14_fu_416_p3 <= (add_ln29_2_reg_892 & ap_const_lv1_0);
    tmp_15_fu_366_p3 <= (add_ln29_4_fu_353_p2 & ap_const_lv1_0);
    tmp_16_fu_501_p3 <= (add_ln29_6_reg_903_pp0_iter1_reg & ap_const_lv1_0);
    tmp_17_fu_804_p3 <= (add_ln36_reg_909_pp0_iter2_reg & ap_const_lv1_0);
    tmp_3_fu_447_p4 <= bitcast_ln29_fu_443_p1(30 downto 23);
    tmp_5_fu_531_p4 <= bitcast_ln29_1_fu_528_p1(30 downto 23);
    tmp_6_fu_548_p4 <= bitcast_ln29_2_fu_545_p1(30 downto 23);
    tmp_8_fu_620_p4 <= bitcast_ln29_3_fu_617_p1(30 downto 23);
    tmp_9_fu_637_p4 <= bitcast_ln29_4_fu_634_p1(30 downto 23);
    trunc_ln29_1_fu_541_p1 <= bitcast_ln29_1_fu_528_p1(23 - 1 downto 0);
    trunc_ln29_2_fu_558_p1 <= bitcast_ln29_2_fu_545_p1(23 - 1 downto 0);
    trunc_ln29_3_fu_630_p1 <= bitcast_ln29_3_fu_617_p1(23 - 1 downto 0);
    trunc_ln29_4_fu_647_p1 <= bitcast_ln29_4_fu_634_p1(23 - 1 downto 0);
    trunc_ln29_5_fu_720_p1 <= bitcast_ln29_5_fu_706_p1(23 - 1 downto 0);
    trunc_ln29_6_fu_737_p1 <= bitcast_ln29_6_fu_724_p1(23 - 1 downto 0);
    trunc_ln29_fu_457_p1 <= bitcast_ln29_fu_443_p1(23 - 1 downto 0);
    zext_ln13_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_138),13));
    zext_ln13_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_138),11));
    zext_ln29_10_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_501_p3),13));
    zext_ln29_11_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_7_fu_518_p2),64));
    zext_ln29_2_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_285_p3),10));
    zext_ln29_3_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_310_p3),13));
    zext_ln29_4_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_fu_328_p2),64));
    zext_ln29_5_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_416_p3),13));
    zext_ln29_6_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_3_fu_433_p2),64));
    zext_ln29_7_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_343_p2),10));
    zext_ln29_8_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_366_p3),13));
    zext_ln29_9_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_5_fu_384_p2),64));
    zext_ln36_1_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_804_p3),11));
    zext_ln36_2_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_fu_821_p2),64));
    zext_ln36_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_c_0_phi_fu_176_p4),8));
end behav;
