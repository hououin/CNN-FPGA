// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.538400,HLS_SYN_LAT=2509,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=559,HLS_SYN_LUT=1399,HLS_VERSION=2019_1}" *)

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        conv_out_address1,
        conv_out_ce1,
        conv_out_q1,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_pp0_stage0 = 6'd8;
parameter    ap_ST_fsm_pp0_stage1 = 6'd16;
parameter    ap_ST_fsm_state10 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [11:0] conv_out_address1;
output   conv_out_ce1;
input  [31:0] conv_out_q1;
output  [9:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] conv_out_address0;
reg conv_out_ce0;
reg[11:0] conv_out_address1;
reg conv_out_ce1;
reg max_pool_out_ce0;
reg max_pool_out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] c_0_reg_172;
reg   [31:0] reg_194;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln16_reg_878;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln16_reg_878_pp0_iter1_reg;
wire   [2:0] f_fu_207_p2;
reg   [2:0] f_reg_834;
wire    ap_CS_fsm_state2;
wire   [10:0] zext_ln13_fu_213_p1;
reg   [10:0] zext_ln13_reg_839;
wire   [0:0] icmp_ln10_fu_201_p2;
wire   [12:0] zext_ln13_1_fu_217_p1;
reg   [12:0] zext_ln13_1_reg_844;
wire   [7:0] add_ln13_fu_221_p2;
reg   [7:0] add_ln13_reg_852;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln13_fu_227_p2;
wire   [3:0] r_fu_233_p2;
reg   [3:0] r_reg_861;
wire   [9:0] mul_ln29_fu_251_p2;
reg   [9:0] mul_ln29_reg_866;
wire   [9:0] mul_ln29_1_fu_267_p2;
reg   [9:0] mul_ln29_1_reg_872;
wire   [0:0] icmp_ln16_fu_273_p2;
reg   [0:0] icmp_ln16_reg_878_pp0_iter2_reg;
wire   [3:0] c_fu_279_p2;
reg   [3:0] c_reg_882;
wire   [9:0] add_ln29_2_fu_338_p2;
reg   [9:0] add_ln29_2_reg_892;
wire   [9:0] add_ln29_6_fu_394_p2;
reg   [9:0] add_ln29_6_reg_903;
reg   [9:0] add_ln29_6_reg_903_pp0_iter1_reg;
wire   [7:0] add_ln36_fu_403_p2;
reg   [7:0] add_ln36_reg_909;
reg   [7:0] add_ln36_reg_909_pp0_iter1_reg;
reg   [7:0] add_ln36_reg_909_pp0_iter2_reg;
reg   [31:0] conv_out_load_1_reg_920;
wire   [31:0] select_ln29_fu_485_p3;
reg   [31:0] select_ln29_reg_927;
reg   [31:0] conv_out_load_2_reg_934;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] select_ln29_1_fu_610_p3;
reg   [31:0] select_ln29_1_reg_946;
wire   [31:0] select_ln29_2_fu_699_p3;
reg   [31:0] select_ln29_2_reg_953;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_pp0_stage1_subdone;
reg   [2:0] f_0_reg_138;
reg   [3:0] r_0_reg_149;
wire    ap_CS_fsm_state10;
reg   [7:0] phi_mul_reg_160;
reg   [3:0] ap_phi_mux_c_0_phi_fu_176_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln29_4_fu_333_p1;
wire   [63:0] zext_ln29_9_fu_389_p1;
wire   [63:0] zext_ln29_6_fu_438_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln29_11_fu_523_p1;
wire   [63:0] zext_ln36_2_fu_826_p1;
reg   [31:0] grp_fu_183_p0;
reg   [31:0] grp_fu_183_p1;
reg   [31:0] grp_fu_189_p0;
reg   [31:0] grp_fu_189_p1;
wire   [4:0] shl_ln_fu_239_p3;
wire   [4:0] mul_ln29_fu_251_p0;
wire   [4:0] or_ln26_fu_257_p2;
wire   [4:0] mul_ln29_1_fu_267_p0;
wire   [4:0] shl_ln1_fu_285_p3;
wire   [9:0] zext_ln29_2_fu_293_p1;
wire   [9:0] add_ln29_fu_297_p2;
wire   [10:0] tmp_13_fu_310_p3;
wire   [12:0] p_shl8_cast_fu_302_p3;
wire   [12:0] zext_ln29_3_fu_318_p1;
wire   [12:0] sub_ln29_fu_322_p2;
wire   [12:0] add_ln29_1_fu_328_p2;
wire   [4:0] or_ln27_fu_343_p2;
wire   [9:0] zext_ln29_7_fu_349_p1;
wire   [9:0] add_ln29_4_fu_353_p2;
wire   [10:0] tmp_15_fu_366_p3;
wire   [12:0] p_shl4_cast_fu_358_p3;
wire   [12:0] zext_ln29_8_fu_374_p1;
wire   [12:0] sub_ln29_2_fu_378_p2;
wire   [12:0] add_ln29_5_fu_384_p2;
wire   [7:0] zext_ln36_fu_399_p1;
wire   [10:0] tmp_14_fu_416_p3;
wire   [12:0] p_shl6_cast_fu_409_p3;
wire   [12:0] zext_ln29_5_fu_423_p1;
wire   [12:0] sub_ln29_1_fu_427_p2;
wire   [12:0] add_ln29_3_fu_433_p2;
wire   [31:0] bitcast_ln29_fu_443_p1;
wire   [7:0] tmp_3_fu_447_p4;
wire   [22:0] trunc_ln29_fu_457_p1;
wire   [0:0] icmp_ln29_1_fu_467_p2;
wire   [0:0] icmp_ln29_fu_461_p2;
wire   [0:0] or_ln29_fu_473_p2;
wire   [0:0] grp_fu_183_p2;
wire   [0:0] and_ln29_fu_479_p2;
wire   [10:0] tmp_16_fu_501_p3;
wire   [12:0] p_shl2_cast_fu_494_p3;
wire   [12:0] zext_ln29_10_fu_508_p1;
wire   [12:0] sub_ln29_3_fu_512_p2;
wire   [12:0] add_ln29_7_fu_518_p2;
wire   [31:0] bitcast_ln29_1_fu_528_p1;
wire   [31:0] bitcast_ln29_2_fu_545_p1;
wire   [7:0] tmp_5_fu_531_p4;
wire   [22:0] trunc_ln29_1_fu_541_p1;
wire   [0:0] icmp_ln29_3_fu_568_p2;
wire   [0:0] icmp_ln29_2_fu_562_p2;
wire   [7:0] tmp_6_fu_548_p4;
wire   [22:0] trunc_ln29_2_fu_558_p1;
wire   [0:0] icmp_ln29_5_fu_586_p2;
wire   [0:0] icmp_ln29_4_fu_580_p2;
wire   [0:0] or_ln29_1_fu_574_p2;
wire   [0:0] or_ln29_2_fu_592_p2;
wire   [0:0] and_ln29_1_fu_598_p2;
wire   [0:0] and_ln29_2_fu_604_p2;
wire   [31:0] bitcast_ln29_3_fu_617_p1;
wire   [31:0] bitcast_ln29_4_fu_634_p1;
wire   [7:0] tmp_8_fu_620_p4;
wire   [22:0] trunc_ln29_3_fu_630_p1;
wire   [0:0] icmp_ln29_7_fu_657_p2;
wire   [0:0] icmp_ln29_6_fu_651_p2;
wire   [7:0] tmp_9_fu_637_p4;
wire   [22:0] trunc_ln29_4_fu_647_p1;
wire   [0:0] icmp_ln29_9_fu_675_p2;
wire   [0:0] icmp_ln29_8_fu_669_p2;
wire   [0:0] or_ln29_3_fu_663_p2;
wire   [0:0] or_ln29_4_fu_681_p2;
wire   [0:0] and_ln29_3_fu_687_p2;
wire   [0:0] grp_fu_189_p2;
wire   [0:0] and_ln29_4_fu_693_p2;
wire   [31:0] bitcast_ln29_5_fu_706_p1;
wire   [31:0] bitcast_ln29_6_fu_724_p1;
wire   [7:0] tmp_10_fu_710_p4;
wire   [22:0] trunc_ln29_5_fu_720_p1;
wire   [0:0] icmp_ln29_11_fu_747_p2;
wire   [0:0] icmp_ln29_10_fu_741_p2;
wire   [7:0] tmp_11_fu_727_p4;
wire   [22:0] trunc_ln29_6_fu_737_p1;
wire   [0:0] icmp_ln29_13_fu_765_p2;
wire   [0:0] icmp_ln29_12_fu_759_p2;
wire   [0:0] or_ln29_5_fu_753_p2;
wire   [0:0] or_ln29_6_fu_771_p2;
wire   [0:0] and_ln29_5_fu_777_p2;
wire   [0:0] and_ln29_6_fu_783_p2;
wire   [8:0] tmp_17_fu_804_p3;
wire   [10:0] p_shl_cast_fu_797_p3;
wire   [10:0] zext_ln36_1_fu_811_p1;
wire   [10:0] sub_ln36_fu_815_p2;
wire   [10:0] add_ln36_1_fu_821_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] mul_ln29_1_fu_267_p00;
wire   [9:0] mul_ln29_fu_251_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_fcmp_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_183_p0),
    .din1(grp_fu_183_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_183_p2)
);

max_pool_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_fcmp_32nbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_189_p0),
    .din1(grp_fu_189_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_189_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln13_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln13_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_172 <= c_reg_882;
    end else if (((icmp_ln13_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_172 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_227_p2 == 1'd1))) begin
        f_0_reg_138 <= f_reg_834;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_138 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        phi_mul_reg_160 <= add_ln13_reg_852;
    end else if (((icmp_ln10_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_160 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_0_reg_149 <= r_reg_861;
    end else if (((icmp_ln10_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_149 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_878_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_194 <= conv_out_q1;
    end else if (((icmp_ln16_reg_878 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_194 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_852 <= add_ln13_fu_221_p2;
        r_reg_861 <= r_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln29_2_reg_892[9 : 1] <= add_ln29_2_fu_338_p2[9 : 1];
        add_ln29_6_reg_903[9 : 1] <= add_ln29_6_fu_394_p2[9 : 1];
        add_ln36_reg_909 <= add_ln36_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln29_6_reg_903_pp0_iter1_reg[9 : 1] <= add_ln29_6_reg_903[9 : 1];
        add_ln36_reg_909_pp0_iter1_reg <= add_ln36_reg_909;
        add_ln36_reg_909_pp0_iter2_reg <= add_ln36_reg_909_pp0_iter1_reg;
        icmp_ln16_reg_878 <= icmp_ln16_fu_273_p2;
        icmp_ln16_reg_878_pp0_iter1_reg <= icmp_ln16_reg_878;
        icmp_ln16_reg_878_pp0_iter2_reg <= icmp_ln16_reg_878_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_reg_882 <= c_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_878 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv_out_load_1_reg_920 <= conv_out_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_load_2_reg_934 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_834 <= f_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mul_ln29_1_reg_872[9 : 1] <= mul_ln29_1_fu_267_p2[9 : 1];
        mul_ln29_reg_866[9 : 1] <= mul_ln29_fu_251_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_878_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln29_1_reg_946 <= select_ln29_1_fu_610_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_878_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln29_2_reg_953 <= select_ln29_2_fu_699_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln29_reg_927 <= select_ln29_fu_485_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_844[2 : 0] <= zext_ln13_1_fu_217_p1[2 : 0];
        zext_ln13_reg_839[2 : 0] <= zext_ln13_fu_213_p1[2 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln16_fu_273_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_176_p4 = c_reg_882;
    end else begin
        ap_phi_mux_c_0_phi_fu_176_p4 = c_0_reg_172;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_out_address0 = zext_ln29_6_fu_438_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_out_address0 = zext_ln29_4_fu_333_p1;
        end else begin
            conv_out_address0 = 'bx;
        end
    end else begin
        conv_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_address1 = zext_ln29_11_fu_523_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        conv_out_address1 = zext_ln29_9_fu_389_p1;
    end else begin
        conv_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        conv_out_ce1 = 1'b1;
    end else begin
        conv_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_183_p0 = conv_out_load_1_reg_920;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_183_p0 = conv_out_q0;
    end else begin
        grp_fu_183_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_183_p1 = select_ln29_fu_485_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_183_p1 = 32'd8388608;
    end else begin
        grp_fu_183_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_189_p0 = conv_out_q1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_189_p0 = conv_out_load_2_reg_934;
    end else begin
        grp_fu_189_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_189_p1 = select_ln29_2_fu_699_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_189_p1 = select_ln29_1_fu_610_p3;
    end else begin
        grp_fu_189_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_878_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_227_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln16_fu_273_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln16_fu_273_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_221_p2 = (phi_mul_reg_160 + 8'd13);

assign add_ln29_1_fu_328_p2 = (zext_ln13_1_reg_844 + sub_ln29_fu_322_p2);

assign add_ln29_2_fu_338_p2 = (zext_ln29_2_fu_293_p1 + mul_ln29_1_reg_872);

assign add_ln29_3_fu_433_p2 = (zext_ln13_1_reg_844 + sub_ln29_1_fu_427_p2);

assign add_ln29_4_fu_353_p2 = (zext_ln29_7_fu_349_p1 + mul_ln29_reg_866);

assign add_ln29_5_fu_384_p2 = (zext_ln13_1_reg_844 + sub_ln29_2_fu_378_p2);

assign add_ln29_6_fu_394_p2 = (zext_ln29_7_fu_349_p1 + mul_ln29_1_reg_872);

assign add_ln29_7_fu_518_p2 = (zext_ln13_1_reg_844 + sub_ln29_3_fu_512_p2);

assign add_ln29_fu_297_p2 = (zext_ln29_2_fu_293_p1 + mul_ln29_reg_866);

assign add_ln36_1_fu_821_p2 = (zext_ln13_reg_839 + sub_ln36_fu_815_p2);

assign add_ln36_fu_403_p2 = (zext_ln36_fu_399_p1 + phi_mul_reg_160);

assign and_ln29_1_fu_598_p2 = (or_ln29_2_fu_592_p2 & or_ln29_1_fu_574_p2);

assign and_ln29_2_fu_604_p2 = (grp_fu_183_p2 & and_ln29_1_fu_598_p2);

assign and_ln29_3_fu_687_p2 = (or_ln29_4_fu_681_p2 & or_ln29_3_fu_663_p2);

assign and_ln29_4_fu_693_p2 = (grp_fu_189_p2 & and_ln29_3_fu_687_p2);

assign and_ln29_5_fu_777_p2 = (or_ln29_6_fu_771_p2 & or_ln29_5_fu_753_p2);

assign and_ln29_6_fu_783_p2 = (grp_fu_189_p2 & and_ln29_5_fu_777_p2);

assign and_ln29_fu_479_p2 = (or_ln29_fu_473_p2 & grp_fu_183_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_1_fu_528_p1 = conv_out_load_1_reg_920;

assign bitcast_ln29_2_fu_545_p1 = select_ln29_reg_927;

assign bitcast_ln29_3_fu_617_p1 = conv_out_load_2_reg_934;

assign bitcast_ln29_4_fu_634_p1 = select_ln29_1_reg_946;

assign bitcast_ln29_5_fu_706_p1 = reg_194;

assign bitcast_ln29_6_fu_724_p1 = select_ln29_2_reg_953;

assign bitcast_ln29_fu_443_p1 = reg_194;

assign c_fu_279_p2 = (ap_phi_mux_c_0_phi_fu_176_p4 + 4'd1);

assign f_fu_207_p2 = (f_0_reg_138 + 3'd1);

assign icmp_ln10_fu_201_p2 = ((f_0_reg_138 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_227_p2 = ((r_0_reg_149 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_273_p2 = ((ap_phi_mux_c_0_phi_fu_176_p4 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln29_10_fu_741_p2 = ((tmp_10_fu_710_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_11_fu_747_p2 = ((trunc_ln29_5_fu_720_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_12_fu_759_p2 = ((tmp_11_fu_727_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_13_fu_765_p2 = ((trunc_ln29_6_fu_737_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_467_p2 = ((trunc_ln29_fu_457_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_562_p2 = ((tmp_5_fu_531_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_568_p2 = ((trunc_ln29_1_fu_541_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_580_p2 = ((tmp_6_fu_548_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_586_p2 = ((trunc_ln29_2_fu_558_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_651_p2 = ((tmp_8_fu_620_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_657_p2 = ((trunc_ln29_3_fu_630_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_8_fu_669_p2 = ((tmp_9_fu_637_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_9_fu_675_p2 = ((trunc_ln29_4_fu_647_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_461_p2 = ((tmp_3_fu_447_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln36_2_fu_826_p1;

assign max_pool_out_d0 = ((and_ln29_6_fu_783_p2[0:0] === 1'b1) ? reg_194 : select_ln29_2_reg_953);

assign mul_ln29_1_fu_267_p0 = mul_ln29_1_fu_267_p00;

assign mul_ln29_1_fu_267_p00 = or_ln26_fu_257_p2;

assign mul_ln29_1_fu_267_p2 = (mul_ln29_1_fu_267_p0 * $signed('h1A));

assign mul_ln29_fu_251_p0 = mul_ln29_fu_251_p00;

assign mul_ln29_fu_251_p00 = shl_ln_fu_239_p3;

assign mul_ln29_fu_251_p2 = (mul_ln29_fu_251_p0 * $signed('h1A));

assign or_ln26_fu_257_p2 = (shl_ln_fu_239_p3 | 5'd1);

assign or_ln27_fu_343_p2 = (shl_ln1_fu_285_p3 | 5'd1);

assign or_ln29_1_fu_574_p2 = (icmp_ln29_3_fu_568_p2 | icmp_ln29_2_fu_562_p2);

assign or_ln29_2_fu_592_p2 = (icmp_ln29_5_fu_586_p2 | icmp_ln29_4_fu_580_p2);

assign or_ln29_3_fu_663_p2 = (icmp_ln29_7_fu_657_p2 | icmp_ln29_6_fu_651_p2);

assign or_ln29_4_fu_681_p2 = (icmp_ln29_9_fu_675_p2 | icmp_ln29_8_fu_669_p2);

assign or_ln29_5_fu_753_p2 = (icmp_ln29_11_fu_747_p2 | icmp_ln29_10_fu_741_p2);

assign or_ln29_6_fu_771_p2 = (icmp_ln29_13_fu_765_p2 | icmp_ln29_12_fu_759_p2);

assign or_ln29_fu_473_p2 = (icmp_ln29_fu_461_p2 | icmp_ln29_1_fu_467_p2);

assign p_shl2_cast_fu_494_p3 = {{add_ln29_6_reg_903_pp0_iter1_reg}, {3'd0}};

assign p_shl4_cast_fu_358_p3 = {{add_ln29_4_fu_353_p2}, {3'd0}};

assign p_shl6_cast_fu_409_p3 = {{add_ln29_2_reg_892}, {3'd0}};

assign p_shl8_cast_fu_302_p3 = {{add_ln29_fu_297_p2}, {3'd0}};

assign p_shl_cast_fu_797_p3 = {{add_ln36_reg_909_pp0_iter2_reg}, {3'd0}};

assign r_fu_233_p2 = (r_0_reg_149 + 4'd1);

assign select_ln29_1_fu_610_p3 = ((and_ln29_2_fu_604_p2[0:0] === 1'b1) ? conv_out_load_1_reg_920 : select_ln29_reg_927);

assign select_ln29_2_fu_699_p3 = ((and_ln29_4_fu_693_p2[0:0] === 1'b1) ? conv_out_load_2_reg_934 : select_ln29_1_reg_946);

assign select_ln29_fu_485_p3 = ((and_ln29_fu_479_p2[0:0] === 1'b1) ? reg_194 : 32'd8388608);

assign shl_ln1_fu_285_p3 = {{ap_phi_mux_c_0_phi_fu_176_p4}, {1'd0}};

assign shl_ln_fu_239_p3 = {{r_0_reg_149}, {1'd0}};

assign sub_ln29_1_fu_427_p2 = (p_shl6_cast_fu_409_p3 - zext_ln29_5_fu_423_p1);

assign sub_ln29_2_fu_378_p2 = (p_shl4_cast_fu_358_p3 - zext_ln29_8_fu_374_p1);

assign sub_ln29_3_fu_512_p2 = (p_shl2_cast_fu_494_p3 - zext_ln29_10_fu_508_p1);

assign sub_ln29_fu_322_p2 = (p_shl8_cast_fu_302_p3 - zext_ln29_3_fu_318_p1);

assign sub_ln36_fu_815_p2 = (p_shl_cast_fu_797_p3 - zext_ln36_1_fu_811_p1);

assign tmp_10_fu_710_p4 = {{bitcast_ln29_5_fu_706_p1[30:23]}};

assign tmp_11_fu_727_p4 = {{bitcast_ln29_6_fu_724_p1[30:23]}};

assign tmp_13_fu_310_p3 = {{add_ln29_fu_297_p2}, {1'd0}};

assign tmp_14_fu_416_p3 = {{add_ln29_2_reg_892}, {1'd0}};

assign tmp_15_fu_366_p3 = {{add_ln29_4_fu_353_p2}, {1'd0}};

assign tmp_16_fu_501_p3 = {{add_ln29_6_reg_903_pp0_iter1_reg}, {1'd0}};

assign tmp_17_fu_804_p3 = {{add_ln36_reg_909_pp0_iter2_reg}, {1'd0}};

assign tmp_3_fu_447_p4 = {{bitcast_ln29_fu_443_p1[30:23]}};

assign tmp_5_fu_531_p4 = {{bitcast_ln29_1_fu_528_p1[30:23]}};

assign tmp_6_fu_548_p4 = {{bitcast_ln29_2_fu_545_p1[30:23]}};

assign tmp_8_fu_620_p4 = {{bitcast_ln29_3_fu_617_p1[30:23]}};

assign tmp_9_fu_637_p4 = {{bitcast_ln29_4_fu_634_p1[30:23]}};

assign trunc_ln29_1_fu_541_p1 = bitcast_ln29_1_fu_528_p1[22:0];

assign trunc_ln29_2_fu_558_p1 = bitcast_ln29_2_fu_545_p1[22:0];

assign trunc_ln29_3_fu_630_p1 = bitcast_ln29_3_fu_617_p1[22:0];

assign trunc_ln29_4_fu_647_p1 = bitcast_ln29_4_fu_634_p1[22:0];

assign trunc_ln29_5_fu_720_p1 = bitcast_ln29_5_fu_706_p1[22:0];

assign trunc_ln29_6_fu_737_p1 = bitcast_ln29_6_fu_724_p1[22:0];

assign trunc_ln29_fu_457_p1 = bitcast_ln29_fu_443_p1[22:0];

assign zext_ln13_1_fu_217_p1 = f_0_reg_138;

assign zext_ln13_fu_213_p1 = f_0_reg_138;

assign zext_ln29_10_fu_508_p1 = tmp_16_fu_501_p3;

assign zext_ln29_11_fu_523_p1 = add_ln29_7_fu_518_p2;

assign zext_ln29_2_fu_293_p1 = shl_ln1_fu_285_p3;

assign zext_ln29_3_fu_318_p1 = tmp_13_fu_310_p3;

assign zext_ln29_4_fu_333_p1 = add_ln29_1_fu_328_p2;

assign zext_ln29_5_fu_423_p1 = tmp_14_fu_416_p3;

assign zext_ln29_6_fu_438_p1 = add_ln29_3_fu_433_p2;

assign zext_ln29_7_fu_349_p1 = or_ln27_fu_343_p2;

assign zext_ln29_8_fu_374_p1 = tmp_15_fu_366_p3;

assign zext_ln29_9_fu_389_p1 = add_ln29_5_fu_384_p2;

assign zext_ln36_1_fu_811_p1 = tmp_17_fu_804_p3;

assign zext_ln36_2_fu_826_p1 = add_ln36_1_fu_821_p2;

assign zext_ln36_fu_399_p1 = ap_phi_mux_c_0_phi_fu_176_p4;

always @ (posedge ap_clk) begin
    zext_ln13_reg_839[10:3] <= 8'b00000000;
    zext_ln13_1_reg_844[12:3] <= 10'b0000000000;
    mul_ln29_reg_866[0] <= 1'b0;
    mul_ln29_1_reg_872[0] <= 1'b0;
    add_ln29_2_reg_892[0] <= 1'b0;
    add_ln29_6_reg_903[0] <= 1'b1;
    add_ln29_6_reg_903_pp0_iter1_reg[0] <= 1'b1;
end

endmodule //max_pool
