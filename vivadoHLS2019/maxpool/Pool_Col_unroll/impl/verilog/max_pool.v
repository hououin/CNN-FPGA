// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.360250,HLS_SYN_LAT=10309,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=243,HLS_SYN_LUT=808,HLS_VERSION=2019_1}" *)

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [9:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] conv_out_address0;
reg conv_out_ce0;
reg max_pool_out_ce0;
reg max_pool_out_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_194;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [2:0] f_fu_205_p2;
reg   [2:0] f_reg_623;
wire    ap_CS_fsm_state2;
wire   [12:0] zext_ln13_fu_211_p1;
reg   [12:0] zext_ln13_reg_628;
wire   [0:0] icmp_ln10_fu_199_p2;
wire   [10:0] zext_ln13_1_fu_215_p1;
reg   [10:0] zext_ln13_1_reg_634;
wire   [7:0] add_ln13_fu_219_p2;
reg   [7:0] add_ln13_reg_639;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_231_p2;
reg   [3:0] r_reg_647;
wire   [4:0] shl_ln_fu_237_p3;
reg   [4:0] shl_ln_reg_652;
wire   [0:0] icmp_ln13_fu_225_p2;
wire   [3:0] c_fu_251_p2;
reg   [3:0] c_reg_660;
wire    ap_CS_fsm_state4;
wire   [9:0] zext_ln27_fu_265_p1;
reg   [9:0] zext_ln27_reg_665;
wire   [0:0] icmp_ln16_fu_245_p2;
wire   [9:0] zext_ln20_1_fu_275_p1;
reg   [9:0] zext_ln20_1_reg_670;
wire   [1:0] mpr_fu_289_p2;
reg   [1:0] mpr_reg_678;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln20_fu_283_p2;
wire   [12:0] add_ln29_3_fu_382_p2;
reg   [12:0] add_ln29_3_reg_688;
wire   [31:0] select_ln29_fu_521_p3;
reg   [31:0] select_ln29_reg_698;
wire   [31:0] select_ln29_1_fu_613_p3;
wire    ap_CS_fsm_state8;
reg   [2:0] f_0_reg_118;
reg   [3:0] r_0_reg_129;
reg   [7:0] phi_mul_reg_140;
reg   [3:0] c_0_reg_152;
reg   [31:0] max_0_reg_164;
reg   [1:0] mpr_0_reg_177;
wire   [63:0] zext_ln29_2_fu_346_p1;
wire   [63:0] zext_ln36_2_fu_428_p1;
wire   [63:0] zext_ln29_4_fu_433_p1;
reg   [31:0] grp_fu_188_p1;
wire   [4:0] shl_ln1_fu_257_p3;
wire   [4:0] or_ln27_fu_269_p2;
wire   [4:0] zext_ln20_fu_279_p1;
wire   [4:0] i_fu_295_p2;
wire   [4:0] mul_ln29_fu_304_p1;
wire   [9:0] mul_ln29_fu_304_p2;
wire   [9:0] add_ln29_fu_310_p2;
wire   [10:0] tmp_10_fu_323_p3;
wire   [12:0] p_shl2_cast_fu_315_p3;
wire   [12:0] zext_ln29_1_fu_331_p1;
wire   [12:0] sub_ln29_fu_335_p2;
wire   [12:0] add_ln29_1_fu_341_p2;
wire   [9:0] add_ln29_2_fu_351_p2;
wire   [10:0] tmp_11_fu_364_p3;
wire   [12:0] p_shl_cast_fu_356_p3;
wire   [12:0] zext_ln29_3_fu_372_p1;
wire   [12:0] sub_ln29_1_fu_376_p2;
wire   [7:0] zext_ln36_fu_387_p1;
wire   [7:0] add_ln36_fu_391_p2;
wire   [8:0] tmp_9_fu_405_p3;
wire   [10:0] p_shl4_cast_fu_397_p3;
wire   [10:0] zext_ln36_1_fu_413_p1;
wire   [10:0] sub_ln36_fu_417_p2;
wire   [10:0] add_ln36_1_fu_423_p2;
wire   [31:0] bitcast_ln29_fu_437_p1;
wire   [31:0] bitcast_ln29_1_fu_455_p1;
wire   [7:0] tmp_1_fu_441_p4;
wire   [22:0] trunc_ln29_fu_451_p1;
wire   [0:0] icmp_ln29_1_fu_479_p2;
wire   [0:0] icmp_ln29_fu_473_p2;
wire   [7:0] tmp_4_fu_459_p4;
wire   [22:0] trunc_ln29_1_fu_469_p1;
wire   [0:0] icmp_ln29_3_fu_497_p2;
wire   [0:0] icmp_ln29_2_fu_491_p2;
wire   [0:0] or_ln29_fu_485_p2;
wire   [0:0] or_ln29_1_fu_503_p2;
wire   [0:0] and_ln29_fu_509_p2;
wire   [0:0] grp_fu_188_p2;
wire   [0:0] and_ln29_1_fu_515_p2;
wire   [31:0] bitcast_ln29_2_fu_530_p1;
wire   [31:0] bitcast_ln29_3_fu_548_p1;
wire   [7:0] tmp_6_fu_534_p4;
wire   [22:0] trunc_ln29_2_fu_544_p1;
wire   [0:0] icmp_ln29_5_fu_571_p2;
wire   [0:0] icmp_ln29_4_fu_565_p2;
wire   [7:0] tmp_7_fu_551_p4;
wire   [22:0] trunc_ln29_3_fu_561_p1;
wire   [0:0] icmp_ln29_7_fu_589_p2;
wire   [0:0] icmp_ln29_6_fu_583_p2;
wire   [0:0] or_ln29_2_fu_577_p2;
wire   [0:0] or_ln29_3_fu_595_p2;
wire   [0:0] and_ln29_2_fu_601_p2;
wire   [0:0] and_ln29_3_fu_607_p2;
reg   [7:0] ap_NS_fsm;
wire   [9:0] mul_ln29_fu_304_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

max_pool_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_fcmp_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_out_q0),
    .din1(grp_fu_188_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_188_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_283_p2 == 1'd1))) begin
        c_0_reg_152 <= c_reg_660;
    end else if (((icmp_ln13_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_152 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_118 <= f_reg_623;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_118 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_0_reg_164 <= select_ln29_1_fu_613_p3;
    end else if (((icmp_ln16_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_164 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mpr_0_reg_177 <= mpr_reg_678;
    end else if (((icmp_ln16_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_177 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_140 <= add_ln13_reg_639;
    end else if (((icmp_ln10_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_140 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_129 <= r_reg_647;
    end else if (((icmp_ln10_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_129 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_639 <= add_ln13_fu_219_p2;
        r_reg_647 <= r_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln29_3_reg_688 <= add_ln29_3_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_660 <= c_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_623 <= f_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_678 <= mpr_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_194 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        select_ln29_reg_698 <= select_ln29_fu_521_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_652[4 : 1] <= shl_ln_fu_237_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_634[2 : 0] <= zext_ln13_1_fu_215_p1[2 : 0];
        zext_ln13_reg_628[2 : 0] <= zext_ln13_fu_211_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln20_1_reg_670[4 : 1] <= zext_ln20_1_fu_275_p1[4 : 1];
        zext_ln27_reg_665[4 : 1] <= zext_ln27_fu_265_p1[4 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_address0 = zext_ln29_4_fu_433_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_out_address0 = zext_ln29_2_fu_346_p1;
    end else begin
        conv_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_188_p1 = select_ln29_fu_521_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_188_p1 = max_0_reg_164;
    end else begin
        grp_fu_188_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_283_p2 == 1'd1))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_283_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_219_p2 = (phi_mul_reg_140 + 8'd13);

assign add_ln29_1_fu_341_p2 = (sub_ln29_fu_335_p2 + zext_ln13_reg_628);

assign add_ln29_2_fu_351_p2 = (mul_ln29_fu_304_p2 + zext_ln20_1_reg_670);

assign add_ln29_3_fu_382_p2 = (sub_ln29_1_fu_376_p2 + zext_ln13_reg_628);

assign add_ln29_fu_310_p2 = (mul_ln29_fu_304_p2 + zext_ln27_reg_665);

assign add_ln36_1_fu_423_p2 = (zext_ln13_1_reg_634 + sub_ln36_fu_417_p2);

assign add_ln36_fu_391_p2 = (zext_ln36_fu_387_p1 + phi_mul_reg_140);

assign and_ln29_1_fu_515_p2 = (grp_fu_188_p2 & and_ln29_fu_509_p2);

assign and_ln29_2_fu_601_p2 = (or_ln29_3_fu_595_p2 & or_ln29_2_fu_577_p2);

assign and_ln29_3_fu_607_p2 = (grp_fu_188_p2 & and_ln29_2_fu_601_p2);

assign and_ln29_fu_509_p2 = (or_ln29_fu_485_p2 & or_ln29_1_fu_503_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln29_1_fu_455_p1 = max_0_reg_164;

assign bitcast_ln29_2_fu_530_p1 = reg_194;

assign bitcast_ln29_3_fu_548_p1 = select_ln29_reg_698;

assign bitcast_ln29_fu_437_p1 = reg_194;

assign c_fu_251_p2 = (c_0_reg_152 + 4'd1);

assign f_fu_205_p2 = (f_0_reg_118 + 3'd1);

assign i_fu_295_p2 = (zext_ln20_fu_279_p1 + shl_ln_reg_652);

assign icmp_ln10_fu_199_p2 = ((f_0_reg_118 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_225_p2 = ((r_0_reg_129 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_245_p2 = ((c_0_reg_152 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_283_p2 = ((mpr_0_reg_177 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_479_p2 = ((trunc_ln29_fu_451_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_491_p2 = ((tmp_4_fu_459_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_497_p2 = ((trunc_ln29_1_fu_469_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_565_p2 = ((tmp_6_fu_534_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_571_p2 = ((trunc_ln29_2_fu_544_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_583_p2 = ((tmp_7_fu_551_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_589_p2 = ((trunc_ln29_3_fu_561_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_473_p2 = ((tmp_1_fu_441_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln36_2_fu_428_p1;

assign max_pool_out_d0 = max_0_reg_164;

assign mpr_fu_289_p2 = (mpr_0_reg_177 + 2'd1);

assign mul_ln29_fu_304_p1 = mul_ln29_fu_304_p10;

assign mul_ln29_fu_304_p10 = i_fu_295_p2;

assign mul_ln29_fu_304_p2 = (10'd26 * mul_ln29_fu_304_p1);

assign or_ln27_fu_269_p2 = (shl_ln1_fu_257_p3 | 5'd1);

assign or_ln29_1_fu_503_p2 = (icmp_ln29_3_fu_497_p2 | icmp_ln29_2_fu_491_p2);

assign or_ln29_2_fu_577_p2 = (icmp_ln29_5_fu_571_p2 | icmp_ln29_4_fu_565_p2);

assign or_ln29_3_fu_595_p2 = (icmp_ln29_7_fu_589_p2 | icmp_ln29_6_fu_583_p2);

assign or_ln29_fu_485_p2 = (icmp_ln29_fu_473_p2 | icmp_ln29_1_fu_479_p2);

assign p_shl2_cast_fu_315_p3 = {{add_ln29_fu_310_p2}, {3'd0}};

assign p_shl4_cast_fu_397_p3 = {{add_ln36_fu_391_p2}, {3'd0}};

assign p_shl_cast_fu_356_p3 = {{add_ln29_2_fu_351_p2}, {3'd0}};

assign r_fu_231_p2 = (r_0_reg_129 + 4'd1);

assign select_ln29_1_fu_613_p3 = ((and_ln29_3_fu_607_p2[0:0] === 1'b1) ? reg_194 : select_ln29_reg_698);

assign select_ln29_fu_521_p3 = ((and_ln29_1_fu_515_p2[0:0] === 1'b1) ? reg_194 : max_0_reg_164);

assign shl_ln1_fu_257_p3 = {{c_0_reg_152}, {1'd0}};

assign shl_ln_fu_237_p3 = {{r_0_reg_129}, {1'd0}};

assign sub_ln29_1_fu_376_p2 = (p_shl_cast_fu_356_p3 - zext_ln29_3_fu_372_p1);

assign sub_ln29_fu_335_p2 = (p_shl2_cast_fu_315_p3 - zext_ln29_1_fu_331_p1);

assign sub_ln36_fu_417_p2 = (p_shl4_cast_fu_397_p3 - zext_ln36_1_fu_413_p1);

assign tmp_10_fu_323_p3 = {{add_ln29_fu_310_p2}, {1'd0}};

assign tmp_11_fu_364_p3 = {{add_ln29_2_fu_351_p2}, {1'd0}};

assign tmp_1_fu_441_p4 = {{bitcast_ln29_fu_437_p1[30:23]}};

assign tmp_4_fu_459_p4 = {{bitcast_ln29_1_fu_455_p1[30:23]}};

assign tmp_6_fu_534_p4 = {{bitcast_ln29_2_fu_530_p1[30:23]}};

assign tmp_7_fu_551_p4 = {{bitcast_ln29_3_fu_548_p1[30:23]}};

assign tmp_9_fu_405_p3 = {{add_ln36_fu_391_p2}, {1'd0}};

assign trunc_ln29_1_fu_469_p1 = bitcast_ln29_1_fu_455_p1[22:0];

assign trunc_ln29_2_fu_544_p1 = bitcast_ln29_2_fu_530_p1[22:0];

assign trunc_ln29_3_fu_561_p1 = bitcast_ln29_3_fu_548_p1[22:0];

assign trunc_ln29_fu_451_p1 = bitcast_ln29_fu_437_p1[22:0];

assign zext_ln13_1_fu_215_p1 = f_0_reg_118;

assign zext_ln13_fu_211_p1 = f_0_reg_118;

assign zext_ln20_1_fu_275_p1 = or_ln27_fu_269_p2;

assign zext_ln20_fu_279_p1 = mpr_0_reg_177;

assign zext_ln27_fu_265_p1 = shl_ln1_fu_257_p3;

assign zext_ln29_1_fu_331_p1 = tmp_10_fu_323_p3;

assign zext_ln29_2_fu_346_p1 = add_ln29_1_fu_341_p2;

assign zext_ln29_3_fu_372_p1 = tmp_11_fu_364_p3;

assign zext_ln29_4_fu_433_p1 = add_ln29_3_reg_688;

assign zext_ln36_1_fu_413_p1 = tmp_9_fu_405_p3;

assign zext_ln36_2_fu_428_p1 = add_ln36_1_fu_423_p2;

assign zext_ln36_fu_387_p1 = c_0_reg_152;

always @ (posedge ap_clk) begin
    zext_ln13_reg_628[12:3] <= 10'b0000000000;
    zext_ln13_1_reg_634[10:3] <= 8'b00000000;
    shl_ln_reg_652[0] <= 1'b0;
    zext_ln27_reg_665[0] <= 1'b0;
    zext_ln27_reg_665[9:5] <= 5'b00000;
    zext_ln20_1_reg_670[0] <= 1'b1;
    zext_ln20_1_reg_670[9:5] <= 5'b00000;
end

endmodule //max_pool
