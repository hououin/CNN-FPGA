-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce1 : OUT STD_LOGIC;
    conv_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.236400,HLS_SYN_LAT=4060,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=366,HLS_SYN_LUT=1073,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_7EC : STD_LOGIC_VECTOR (10 downto 0) := "11111101100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_152 : STD_LOGIC_VECTOR (8 downto 0) := "101010010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten59_reg_144 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_0_reg_155 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten22_reg_167 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_0_reg_178 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_189 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_0_reg_201 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_0_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_225 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln1_fu_241_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_reg_867 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln27_fu_249_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln27_reg_872 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln10_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_877_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_261_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln10_reg_881 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_886 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_2_fu_273_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_2_reg_893 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln29_5_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_5_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_904 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln13_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln13_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_1_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_1_reg_916 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_1_fu_379_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_1_reg_921 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln29_fu_401_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_reg_926 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_1_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln13_1_reg_932 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln29_3_fu_419_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_3_reg_937 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln13_2_fu_442_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_2_reg_943 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_4_fu_503_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_4_reg_949 : STD_LOGIC_VECTOR (3 downto 0);
    signal mpr_fu_594_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_965 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_5_fu_605_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_5_reg_971 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln13_5_fu_613_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_5_reg_976 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln16_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln16_reg_981 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out_load_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal conv_out_load_1_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln20_1_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_726_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_fu_768_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_1_reg_1013 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_1_fu_856_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten59_phi_fu_148_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_phi_fu_159_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten22_phi_fu_171_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_r_0_phi_fu_182_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_193_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_c_0_phi_fu_205_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_max_0_phi_fu_217_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_229_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln29_2_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_4_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_3_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_281_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln20_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln26_mid1_fu_333_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_4_fu_289_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln13_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_4_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_1_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_1_fu_341_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln20_fu_387_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_391_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_401_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_fu_413_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln13_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_434_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_461_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln27_mid1_fu_467_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_3_fu_447_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_2_fu_475_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln27_1_fu_486_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_4_fu_454_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_3_fu_492_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_fu_482_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_510_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_523_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_515_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_1_fu_531_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_1_fu_426_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_fu_535_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_1_fu_541_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln16_1_fu_499_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_2_fu_552_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_565_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_557_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_3_fu_573_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_1_fu_577_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_3_fu_583_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln16_fu_599_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln36_fu_638_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln29_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_1_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_647_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_657_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_1_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_664_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_674_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_3_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_1_fu_733_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln36_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_750_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_742_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_2_fu_758_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_fu_632_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln36_fu_762_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln29_2_fu_774_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_3_fu_791_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_777_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_fu_787_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_5_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_4_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_794_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_3_fu_804_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_6_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_2_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_3_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_2_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_3_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln29_fu_401_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln36_fu_638_p10 : STD_LOGIC_VECTOR (7 downto 0);

    component max_pool_fcmp_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_fcmp_32nbkb_U1 : component max_pool_fcmp_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_236_p0,
        din1 => grp_fu_236_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_236_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_201 <= select_ln16_4_reg_949;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_201 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                f_0_reg_155 <= select_ln29_3_reg_937;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_155 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten22_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten22_reg_167 <= select_ln13_5_reg_976;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten22_reg_167 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten59_reg_144 <= add_ln10_reg_881;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten59_reg_144 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_189 <= select_ln16_5_reg_971;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_189 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    max_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                max_0_reg_213 <= select_ln29_1_fu_856_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_0_reg_213 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpr_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                mpr_0_reg_225 <= mpr_reg_965;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpr_0_reg_225 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_178 <= select_ln13_2_reg_943;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_178 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln10_reg_881 <= add_ln10_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_255_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln13_1_reg_932 <= add_ln13_1_fu_407_p2;
                and_ln13_reg_909 <= and_ln13_fu_361_p2;
                and_ln29_5_reg_898 <= and_ln29_5_fu_321_p2;
                icmp_ln13_reg_886 <= icmp_ln13_fu_267_p2;
                mul_ln29_reg_926 <= mul_ln29_fu_401_p2;
                or_ln16_1_reg_916 <= or_ln16_1_fu_373_p2;
                r_reg_904 <= r_fu_327_p2;
                select_ln16_1_reg_921 <= select_ln16_1_fu_379_p3;
                select_ln29_2_reg_893 <= select_ln29_2_fu_273_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln20_1_reg_1002 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln36_1_reg_1013 <= add_ln36_1_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                conv_out_load_1_reg_995 <= conv_out_q1;
                conv_out_load_reg_988 <= conv_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_877 <= icmp_ln10_fu_255_p2;
                icmp_ln10_reg_877_pp0_iter1_reg <= icmp_ln10_reg_877;
                    or_ln27_reg_872(4 downto 1) <= or_ln27_fu_249_p2(4 downto 1);
                    shl_ln1_reg_867(4 downto 1) <= shl_ln1_fu_241_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_1_reg_1002 <= icmp_ln20_1_fu_627_p2;
                select_ln16_reg_981 <= select_ln16_fu_619_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mpr_reg_965 <= mpr_fu_594_p2;
                select_ln13_2_reg_943 <= select_ln13_2_fu_442_p3;
                select_ln13_5_reg_976 <= select_ln13_5_fu_613_p3;
                select_ln16_4_reg_949 <= select_ln16_4_fu_503_p3;
                select_ln16_5_reg_971 <= select_ln16_5_fu_605_p3;
                select_ln29_3_reg_937 <= select_ln29_3_fu_419_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_877_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln29_reg_1006 <= select_ln29_fu_726_p3;
            end if;
        end if;
    end process;
    shl_ln1_reg_867(0) <= '0';
    or_ln27_reg_872(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, icmp_ln10_fu_255_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_255_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((icmp_ln10_fu_255_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_261_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten59_phi_fu_148_p4) + unsigned(ap_const_lv11_1));
    add_ln13_1_fu_407_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten22_phi_fu_171_p4) + unsigned(ap_const_lv9_1));
    add_ln16_fu_599_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_189) + unsigned(ap_const_lv6_1));
    add_ln29_1_fu_541_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_426_p1) + unsigned(sub_ln29_fu_535_p2));
    add_ln29_2_fu_552_p2 <= std_logic_vector(unsigned(zext_ln16_1_fu_499_p1) + unsigned(mul_ln29_reg_926));
    add_ln29_3_fu_583_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_426_p1) + unsigned(sub_ln29_1_fu_577_p2));
    add_ln29_fu_510_p2 <= std_logic_vector(unsigned(zext_ln16_fu_482_p1) + unsigned(mul_ln29_reg_926));
    add_ln36_1_fu_768_p2 <= std_logic_vector(unsigned(zext_ln26_fu_632_p1) + unsigned(sub_ln36_fu_762_p2));
    add_ln36_fu_736_p2 <= std_logic_vector(unsigned(zext_ln36_1_fu_733_p1) + unsigned(mul_ln36_fu_638_p2));
    and_ln13_fu_361_p2 <= (or_ln13_1_fu_355_p2 and and_ln29_4_fu_309_p2);
    and_ln29_1_fu_720_p2 <= (grp_fu_236_p2 and and_ln29_fu_714_p2);
    and_ln29_2_fu_844_p2 <= (or_ln29_3_fu_838_p2 and or_ln29_2_fu_820_p2);
    and_ln29_3_fu_850_p2 <= (grp_fu_236_p2 and and_ln29_2_fu_844_p2);
    and_ln29_4_fu_309_p2 <= (xor_ln29_fu_297_p2 and icmp_ln20_fu_303_p2);
    and_ln29_5_fu_321_p2 <= (xor_ln29_fu_297_p2 and icmp_ln16_fu_315_p2);
    and_ln29_fu_714_p2 <= (or_ln29_fu_690_p2 and or_ln29_1_fu_708_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_255_p2)
    begin
        if ((icmp_ln10_fu_255_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_205_p4_assign_proc : process(c_0_reg_201, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_877, select_ln16_4_reg_949, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_205_p4 <= select_ln16_4_reg_949;
        else 
            ap_phi_mux_c_0_phi_fu_205_p4 <= c_0_reg_201;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_159_p4_assign_proc : process(f_0_reg_155, icmp_ln10_reg_877_pp0_iter1_reg, select_ln29_3_reg_937, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln10_reg_877_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_f_0_phi_fu_159_p4 <= select_ln29_3_reg_937;
        else 
            ap_phi_mux_f_0_phi_fu_159_p4 <= f_0_reg_155;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten22_phi_fu_171_p4_assign_proc : process(indvar_flatten22_reg_167, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_877, select_ln13_5_reg_976, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten22_phi_fu_171_p4 <= select_ln13_5_reg_976;
        else 
            ap_phi_mux_indvar_flatten22_phi_fu_171_p4 <= indvar_flatten22_reg_167;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten59_phi_fu_148_p4_assign_proc : process(indvar_flatten59_reg_144, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_877, add_ln10_reg_881, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten59_phi_fu_148_p4 <= add_ln10_reg_881;
        else 
            ap_phi_mux_indvar_flatten59_phi_fu_148_p4 <= indvar_flatten59_reg_144;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_193_p4_assign_proc : process(indvar_flatten_reg_189, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_877, select_ln16_5_reg_971, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_193_p4 <= select_ln16_5_reg_971;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_193_p4 <= indvar_flatten_reg_189;
        end if; 
    end process;


    ap_phi_mux_max_0_phi_fu_217_p4_assign_proc : process(max_0_reg_213, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_877_pp0_iter1_reg, select_ln29_1_fu_856_p3, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_877_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_max_0_phi_fu_217_p4 <= select_ln29_1_fu_856_p3;
        else 
            ap_phi_mux_max_0_phi_fu_217_p4 <= max_0_reg_213;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_229_p4_assign_proc : process(mpr_0_reg_225, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_877, mpr_reg_965, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_229_p4 <= mpr_reg_965;
        else 
            ap_phi_mux_mpr_0_phi_fu_229_p4 <= mpr_0_reg_225;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_182_p4_assign_proc : process(r_0_reg_178, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_877, select_ln13_2_reg_943, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_182_p4 <= select_ln13_2_reg_943;
        else 
            ap_phi_mux_r_0_phi_fu_182_p4 <= r_0_reg_178;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_1_fu_661_p1 <= select_ln16_reg_981;
    bitcast_ln29_2_fu_774_p1 <= conv_out_load_1_reg_995;
    bitcast_ln29_3_fu_791_p1 <= select_ln29_reg_1006;
    bitcast_ln29_fu_644_p1 <= conv_out_load_reg_988;
    c_fu_461_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln13_fu_434_p3));
    conv_out_address0 <= zext_ln29_2_fu_547_p1(12 - 1 downto 0);
    conv_out_address1 <= zext_ln29_4_fu_589_p1(12 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            conv_out_ce1 <= ap_const_logic_1;
        else 
            conv_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_f_0_phi_fu_159_p4));

    grp_fu_236_p0_assign_proc : process(conv_out_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, conv_out_load_1_reg_995, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_236_p0 <= conv_out_load_1_reg_995;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_236_p0 <= conv_out_q0;
            else 
                grp_fu_236_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_236_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_236_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, select_ln16_fu_619_p3, ap_enable_reg_pp0_iter1, select_ln29_fu_726_p3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_236_p1 <= select_ln29_fu_726_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_236_p1 <= select_ln16_fu_619_p3;
            else 
                grp_fu_236_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_236_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_391_p2 <= std_logic_vector(unsigned(select_ln13_1_fu_341_p3) + unsigned(zext_ln20_fu_387_p1));
    icmp_ln10_fu_255_p2 <= "1" when (ap_phi_mux_indvar_flatten59_phi_fu_148_p4 = ap_const_lv11_7EC) else "0";
    icmp_ln13_fu_267_p2 <= "1" when (ap_phi_mux_indvar_flatten22_phi_fu_171_p4 = ap_const_lv9_152) else "0";
    icmp_ln16_fu_315_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_193_p4 = ap_const_lv6_1A) else "0";
    icmp_ln20_1_fu_627_p2 <= "1" when (mpr_reg_965 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_303_p2 <= "1" when (ap_phi_mux_mpr_0_phi_fu_229_p4 = ap_const_lv2_2) else "0";
    icmp_ln29_1_fu_684_p2 <= "1" when (trunc_ln29_fu_657_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_696_p2 <= "0" when (tmp_5_fu_664_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_702_p2 <= "1" when (trunc_ln29_1_fu_674_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_4_fu_808_p2 <= "0" when (tmp_7_fu_777_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_5_fu_814_p2 <= "1" when (trunc_ln29_2_fu_787_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_6_fu_826_p2 <= "0" when (tmp_8_fu_794_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_7_fu_832_p2 <= "1" when (trunc_ln29_3_fu_804_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_678_p2 <= "0" when (tmp_1_fu_647_p4 = ap_const_lv8_FF) else "1";
    max_pool_out_address0 <= zext_ln36_3_fu_863_p1(10 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= 
        conv_out_load_1_reg_995 when (and_ln29_3_fu_850_p2(0) = '1') else 
        select_ln29_reg_1006;

    max_pool_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln20_1_reg_1002, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln20_1_reg_1002 = ap_const_lv1_1))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_594_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln16_1_reg_921));
    mul_ln29_fu_401_p1 <= mul_ln29_fu_401_p10(5 - 1 downto 0);
    mul_ln29_fu_401_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_391_p2),10));
    mul_ln29_fu_401_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln29_fu_401_p1), 10));
    mul_ln36_fu_638_p1 <= mul_ln36_fu_638_p10(4 - 1 downto 0);
    mul_ln36_fu_638_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_reg_943),8));
    mul_ln36_fu_638_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_D) * unsigned(mul_ln36_fu_638_p1), 8));
    or_ln13_1_fu_355_p2 <= (xor_ln13_fu_349_p2 or icmp_ln13_fu_267_p2);
    or_ln13_fu_430_p2 <= (icmp_ln13_reg_886 or and_ln29_5_reg_898);
    or_ln16_1_fu_373_p2 <= (or_ln16_fu_367_p2 or icmp_ln13_fu_267_p2);
    or_ln16_fu_367_p2 <= (and_ln29_5_fu_321_p2 or and_ln13_fu_361_p2);
    or_ln27_1_fu_486_p2 <= (shl_ln27_mid1_fu_467_p3 or ap_const_lv5_1);
    or_ln27_fu_249_p2 <= (shl_ln1_fu_241_p3 or ap_const_lv5_1);
    or_ln29_1_fu_708_p2 <= (icmp_ln29_3_fu_702_p2 or icmp_ln29_2_fu_696_p2);
    or_ln29_2_fu_820_p2 <= (icmp_ln29_5_fu_814_p2 or icmp_ln29_4_fu_808_p2);
    or_ln29_3_fu_838_p2 <= (icmp_ln29_7_fu_832_p2 or icmp_ln29_6_fu_826_p2);
    or_ln29_fu_690_p2 <= (icmp_ln29_fu_678_p2 or icmp_ln29_1_fu_684_p2);
    p_shl3_cast_fu_515_p3 <= (add_ln29_fu_510_p2 & ap_const_lv3_0);
    p_shl5_cast_fu_742_p3 <= (add_ln36_fu_736_p2 & ap_const_lv3_0);
    p_shl_cast_fu_557_p3 <= (add_ln29_2_fu_552_p2 & ap_const_lv3_0);
    r_fu_327_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln29_2_fu_273_p3));
    select_ln13_1_fu_341_p3 <= 
        shl_ln26_mid1_fu_333_p3 when (and_ln29_5_fu_321_p2(0) = '1') else 
        select_ln29_4_fu_289_p3;
    select_ln13_2_fu_442_p3 <= 
        r_reg_904 when (and_ln29_5_reg_898(0) = '1') else 
        select_ln29_2_reg_893;
    select_ln13_3_fu_447_p3 <= 
        ap_const_lv5_0 when (or_ln13_fu_430_p2(0) = '1') else 
        shl_ln1_reg_867;
    select_ln13_4_fu_454_p3 <= 
        ap_const_lv5_1 when (or_ln13_fu_430_p2(0) = '1') else 
        or_ln27_reg_872;
    select_ln13_5_fu_613_p3 <= 
        ap_const_lv9_1 when (icmp_ln13_reg_886(0) = '1') else 
        add_ln13_1_reg_932;
    select_ln13_fu_434_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_430_p2(0) = '1') else 
        c_0_reg_201;
    select_ln16_1_fu_379_p3 <= 
        ap_const_lv2_0 when (or_ln16_1_fu_373_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_229_p4;
    select_ln16_2_fu_475_p3 <= 
        shl_ln27_mid1_fu_467_p3 when (and_ln13_reg_909(0) = '1') else 
        select_ln13_3_fu_447_p3;
    select_ln16_3_fu_492_p3 <= 
        or_ln27_1_fu_486_p2 when (and_ln13_reg_909(0) = '1') else 
        select_ln13_4_fu_454_p3;
    select_ln16_4_fu_503_p3 <= 
        c_fu_461_p2 when (and_ln13_reg_909(0) = '1') else 
        select_ln13_fu_434_p3;
    select_ln16_5_fu_605_p3 <= 
        ap_const_lv6_1 when (or_ln13_fu_430_p2(0) = '1') else 
        add_ln16_fu_599_p2;
    select_ln16_fu_619_p3 <= 
        ap_const_lv32_800000 when (or_ln16_1_reg_916(0) = '1') else 
        ap_phi_mux_max_0_phi_fu_217_p4;
    select_ln29_1_fu_856_p3 <= 
        conv_out_load_1_reg_995 when (and_ln29_3_fu_850_p2(0) = '1') else 
        select_ln29_reg_1006;
    select_ln29_2_fu_273_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_267_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_182_p4;
    select_ln29_3_fu_419_p3 <= 
        f_fu_413_p2 when (icmp_ln13_reg_886(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_159_p4;
    select_ln29_4_fu_289_p3 <= 
        ap_const_lv5_0 when (icmp_ln13_fu_267_p2(0) = '1') else 
        shl_ln_fu_281_p3;
    select_ln29_fu_726_p3 <= 
        conv_out_load_reg_988 when (and_ln29_1_fu_720_p2(0) = '1') else 
        select_ln16_reg_981;
    shl_ln1_fu_241_p3 <= (ap_phi_mux_c_0_phi_fu_205_p4 & ap_const_lv1_0);
    shl_ln26_mid1_fu_333_p3 <= (r_fu_327_p2 & ap_const_lv1_0);
    shl_ln27_mid1_fu_467_p3 <= (c_fu_461_p2 & ap_const_lv1_0);
    shl_ln_fu_281_p3 <= (ap_phi_mux_r_0_phi_fu_182_p4 & ap_const_lv1_0);
    sub_ln29_1_fu_577_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_557_p3) - unsigned(zext_ln29_3_fu_573_p1));
    sub_ln29_fu_535_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_515_p3) - unsigned(zext_ln29_1_fu_531_p1));
    sub_ln36_fu_762_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_742_p3) - unsigned(zext_ln36_2_fu_758_p1));
    tmp_1_fu_647_p4 <= bitcast_ln29_fu_644_p1(30 downto 23);
    tmp_2_fu_565_p3 <= (add_ln29_2_fu_552_p2 & ap_const_lv1_0);
    tmp_3_fu_750_p3 <= (add_ln36_fu_736_p2 & ap_const_lv1_0);
    tmp_5_fu_664_p4 <= bitcast_ln29_1_fu_661_p1(30 downto 23);
    tmp_7_fu_777_p4 <= bitcast_ln29_2_fu_774_p1(30 downto 23);
    tmp_8_fu_794_p4 <= bitcast_ln29_3_fu_791_p1(30 downto 23);
    tmp_fu_523_p3 <= (add_ln29_fu_510_p2 & ap_const_lv1_0);
    trunc_ln29_1_fu_674_p1 <= bitcast_ln29_1_fu_661_p1(23 - 1 downto 0);
    trunc_ln29_2_fu_787_p1 <= bitcast_ln29_2_fu_774_p1(23 - 1 downto 0);
    trunc_ln29_3_fu_804_p1 <= bitcast_ln29_3_fu_791_p1(23 - 1 downto 0);
    trunc_ln29_fu_657_p1 <= bitcast_ln29_fu_644_p1(23 - 1 downto 0);
    xor_ln13_fu_349_p2 <= (icmp_ln16_fu_315_p2 xor ap_const_lv1_1);
    xor_ln29_fu_297_p2 <= (icmp_ln13_fu_267_p2 xor ap_const_lv1_1);
    zext_ln16_1_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_3_fu_492_p3),10));
    zext_ln16_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_2_fu_475_p3),10));
    zext_ln20_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_1_fu_379_p3),5));
    zext_ln26_1_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_3_fu_419_p3),13));
    zext_ln26_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_3_reg_937),11));
    zext_ln29_1_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_523_p3),13));
    zext_ln29_2_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_fu_541_p2),64));
    zext_ln29_3_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_565_p3),13));
    zext_ln29_4_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_3_fu_583_p2),64));
    zext_ln36_1_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_4_reg_949),8));
    zext_ln36_2_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_750_p3),11));
    zext_ln36_3_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_reg_1013),64));
end behav;
