// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.236400,HLS_SYN_LAT=4060,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=366,HLS_SYN_LUT=1073,HLS_VERSION=2019_1}" *)

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        conv_out_address1,
        conv_out_ce1,
        conv_out_q1,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [11:0] conv_out_address1;
output   conv_out_ce1;
input  [31:0] conv_out_q1;
output  [9:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_ce0;
reg conv_out_ce1;
reg max_pool_out_ce0;
reg max_pool_out_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten59_reg_144;
reg   [2:0] f_0_reg_155;
reg   [8:0] indvar_flatten22_reg_167;
reg   [3:0] r_0_reg_178;
reg   [5:0] indvar_flatten_reg_189;
reg   [3:0] c_0_reg_201;
reg   [31:0] max_0_reg_213;
reg   [1:0] mpr_0_reg_225;
wire   [4:0] shl_ln1_fu_241_p3;
reg   [4:0] shl_ln1_reg_867;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] or_ln27_fu_249_p2;
reg   [4:0] or_ln27_reg_872;
wire   [0:0] icmp_ln10_fu_255_p2;
reg   [0:0] icmp_ln10_reg_877;
reg   [0:0] icmp_ln10_reg_877_pp0_iter1_reg;
wire   [10:0] add_ln10_fu_261_p2;
reg   [10:0] add_ln10_reg_881;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_267_p2;
reg   [0:0] icmp_ln13_reg_886;
wire   [3:0] select_ln29_2_fu_273_p3;
reg   [3:0] select_ln29_2_reg_893;
wire   [0:0] and_ln29_5_fu_321_p2;
reg   [0:0] and_ln29_5_reg_898;
wire   [3:0] r_fu_327_p2;
reg   [3:0] r_reg_904;
wire   [0:0] and_ln13_fu_361_p2;
reg   [0:0] and_ln13_reg_909;
wire   [0:0] or_ln16_1_fu_373_p2;
reg   [0:0] or_ln16_1_reg_916;
wire   [1:0] select_ln16_1_fu_379_p3;
reg   [1:0] select_ln16_1_reg_921;
wire   [9:0] mul_ln29_fu_401_p2;
reg   [9:0] mul_ln29_reg_926;
wire   [8:0] add_ln13_1_fu_407_p2;
reg   [8:0] add_ln13_1_reg_932;
wire   [2:0] select_ln29_3_fu_419_p3;
reg   [2:0] select_ln29_3_reg_937;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] select_ln13_2_fu_442_p3;
reg   [3:0] select_ln13_2_reg_943;
wire   [3:0] select_ln16_4_fu_503_p3;
reg   [3:0] select_ln16_4_reg_949;
wire   [1:0] mpr_fu_594_p2;
reg   [1:0] mpr_reg_965;
wire   [5:0] select_ln16_5_fu_605_p3;
reg   [5:0] select_ln16_5_reg_971;
wire   [8:0] select_ln13_5_fu_613_p3;
reg   [8:0] select_ln13_5_reg_976;
wire   [31:0] select_ln16_fu_619_p3;
reg   [31:0] select_ln16_reg_981;
reg   [31:0] conv_out_load_reg_988;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] conv_out_load_1_reg_995;
wire   [0:0] icmp_ln20_1_fu_627_p2;
reg   [0:0] icmp_ln20_1_reg_1002;
wire   [31:0] select_ln29_fu_726_p3;
reg   [31:0] select_ln29_reg_1006;
wire   [10:0] add_ln36_1_fu_768_p2;
reg   [10:0] add_ln36_1_reg_1013;
wire   [31:0] select_ln29_1_fu_856_p3;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
reg   [10:0] ap_phi_mux_indvar_flatten59_phi_fu_148_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_f_0_phi_fu_159_p4;
wire    ap_block_pp0_stage1;
reg   [8:0] ap_phi_mux_indvar_flatten22_phi_fu_171_p4;
reg   [3:0] ap_phi_mux_r_0_phi_fu_182_p4;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_193_p4;
reg   [3:0] ap_phi_mux_c_0_phi_fu_205_p4;
reg   [31:0] ap_phi_mux_max_0_phi_fu_217_p4;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_229_p4;
wire   [63:0] zext_ln29_2_fu_547_p1;
wire   [63:0] zext_ln29_4_fu_589_p1;
wire   [63:0] zext_ln36_3_fu_863_p1;
reg   [31:0] grp_fu_236_p0;
reg   [31:0] grp_fu_236_p1;
wire   [4:0] shl_ln_fu_281_p3;
wire   [0:0] icmp_ln20_fu_303_p2;
wire   [0:0] xor_ln29_fu_297_p2;
wire   [0:0] icmp_ln16_fu_315_p2;
wire   [4:0] shl_ln26_mid1_fu_333_p3;
wire   [4:0] select_ln29_4_fu_289_p3;
wire   [0:0] xor_ln13_fu_349_p2;
wire   [0:0] and_ln29_4_fu_309_p2;
wire   [0:0] or_ln13_1_fu_355_p2;
wire   [0:0] or_ln16_fu_367_p2;
wire   [4:0] select_ln13_1_fu_341_p3;
wire   [4:0] zext_ln20_fu_387_p1;
wire   [4:0] i_fu_391_p2;
wire   [4:0] mul_ln29_fu_401_p1;
wire   [2:0] f_fu_413_p2;
wire   [0:0] or_ln13_fu_430_p2;
wire   [3:0] select_ln13_fu_434_p3;
wire   [3:0] c_fu_461_p2;
wire   [4:0] shl_ln27_mid1_fu_467_p3;
wire   [4:0] select_ln13_3_fu_447_p3;
wire   [4:0] select_ln16_2_fu_475_p3;
wire   [4:0] or_ln27_1_fu_486_p2;
wire   [4:0] select_ln13_4_fu_454_p3;
wire   [4:0] select_ln16_3_fu_492_p3;
wire   [9:0] zext_ln16_fu_482_p1;
wire   [9:0] add_ln29_fu_510_p2;
wire   [10:0] tmp_fu_523_p3;
wire   [12:0] p_shl3_cast_fu_515_p3;
wire   [12:0] zext_ln29_1_fu_531_p1;
wire   [12:0] zext_ln26_1_fu_426_p1;
wire   [12:0] sub_ln29_fu_535_p2;
wire   [12:0] add_ln29_1_fu_541_p2;
wire   [9:0] zext_ln16_1_fu_499_p1;
wire   [9:0] add_ln29_2_fu_552_p2;
wire   [10:0] tmp_2_fu_565_p3;
wire   [12:0] p_shl_cast_fu_557_p3;
wire   [12:0] zext_ln29_3_fu_573_p1;
wire   [12:0] sub_ln29_1_fu_577_p2;
wire   [12:0] add_ln29_3_fu_583_p2;
wire   [5:0] add_ln16_fu_599_p2;
wire   [3:0] mul_ln36_fu_638_p1;
wire   [31:0] bitcast_ln29_fu_644_p1;
wire   [31:0] bitcast_ln29_1_fu_661_p1;
wire   [7:0] tmp_1_fu_647_p4;
wire   [22:0] trunc_ln29_fu_657_p1;
wire   [0:0] icmp_ln29_1_fu_684_p2;
wire   [0:0] icmp_ln29_fu_678_p2;
wire   [7:0] tmp_5_fu_664_p4;
wire   [22:0] trunc_ln29_1_fu_674_p1;
wire   [0:0] icmp_ln29_3_fu_702_p2;
wire   [0:0] icmp_ln29_2_fu_696_p2;
wire   [0:0] or_ln29_fu_690_p2;
wire   [0:0] or_ln29_1_fu_708_p2;
wire   [0:0] and_ln29_fu_714_p2;
wire   [0:0] grp_fu_236_p2;
wire   [0:0] and_ln29_1_fu_720_p2;
wire   [7:0] zext_ln36_1_fu_733_p1;
wire   [7:0] mul_ln36_fu_638_p2;
wire   [7:0] add_ln36_fu_736_p2;
wire   [8:0] tmp_3_fu_750_p3;
wire   [10:0] p_shl5_cast_fu_742_p3;
wire   [10:0] zext_ln36_2_fu_758_p1;
wire   [10:0] zext_ln26_fu_632_p1;
wire   [10:0] sub_ln36_fu_762_p2;
wire   [31:0] bitcast_ln29_2_fu_774_p1;
wire   [31:0] bitcast_ln29_3_fu_791_p1;
wire   [7:0] tmp_7_fu_777_p4;
wire   [22:0] trunc_ln29_2_fu_787_p1;
wire   [0:0] icmp_ln29_5_fu_814_p2;
wire   [0:0] icmp_ln29_4_fu_808_p2;
wire   [7:0] tmp_8_fu_794_p4;
wire   [22:0] trunc_ln29_3_fu_804_p1;
wire   [0:0] icmp_ln29_7_fu_832_p2;
wire   [0:0] icmp_ln29_6_fu_826_p2;
wire   [0:0] or_ln29_2_fu_820_p2;
wire   [0:0] or_ln29_3_fu_838_p2;
wire   [0:0] and_ln29_2_fu_844_p2;
wire   [0:0] and_ln29_3_fu_850_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] mul_ln29_fu_401_p10;
wire   [7:0] mul_ln36_fu_638_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

max_pool_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_fcmp_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_236_p0),
    .din1(grp_fu_236_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_236_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_201 <= select_ln16_4_reg_949;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_201 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        f_0_reg_155 <= select_ln29_3_reg_937;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_155 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten22_reg_167 <= select_ln13_5_reg_976;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten22_reg_167 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten59_reg_144 <= add_ln10_reg_881;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten59_reg_144 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_189 <= select_ln16_5_reg_971;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_189 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_0_reg_213 <= select_ln29_1_fu_856_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        max_0_reg_213 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mpr_0_reg_225 <= mpr_reg_965;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mpr_0_reg_225 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_178 <= select_ln13_2_reg_943;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_178 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln10_reg_881 <= add_ln10_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_255_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln13_1_reg_932 <= add_ln13_1_fu_407_p2;
        and_ln13_reg_909 <= and_ln13_fu_361_p2;
        and_ln29_5_reg_898 <= and_ln29_5_fu_321_p2;
        icmp_ln13_reg_886 <= icmp_ln13_fu_267_p2;
        mul_ln29_reg_926 <= mul_ln29_fu_401_p2;
        or_ln16_1_reg_916 <= or_ln16_1_fu_373_p2;
        r_reg_904 <= r_fu_327_p2;
        select_ln16_1_reg_921 <= select_ln16_1_fu_379_p3;
        select_ln29_2_reg_893 <= select_ln29_2_fu_273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln20_1_reg_1002 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln36_1_reg_1013 <= add_ln36_1_fu_768_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_load_1_reg_995 <= conv_out_q1;
        conv_out_load_reg_988 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_877 <= icmp_ln10_fu_255_p2;
        icmp_ln10_reg_877_pp0_iter1_reg <= icmp_ln10_reg_877;
        or_ln27_reg_872[4 : 1] <= or_ln27_fu_249_p2[4 : 1];
        shl_ln1_reg_867[4 : 1] <= shl_ln1_fu_241_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln20_1_reg_1002 <= icmp_ln20_1_fu_627_p2;
        select_ln16_reg_981 <= select_ln16_fu_619_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mpr_reg_965 <= mpr_fu_594_p2;
        select_ln13_2_reg_943 <= select_ln13_2_fu_442_p3;
        select_ln13_5_reg_976 <= select_ln13_5_fu_613_p3;
        select_ln16_4_reg_949 <= select_ln16_4_fu_503_p3;
        select_ln16_5_reg_971 <= select_ln16_5_fu_605_p3;
        select_ln29_3_reg_937 <= select_ln29_3_fu_419_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_877_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln29_reg_1006 <= select_ln29_fu_726_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_255_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_205_p4 = select_ln16_4_reg_949;
    end else begin
        ap_phi_mux_c_0_phi_fu_205_p4 = c_0_reg_201;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_877_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_f_0_phi_fu_159_p4 = select_ln29_3_reg_937;
    end else begin
        ap_phi_mux_f_0_phi_fu_159_p4 = f_0_reg_155;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten22_phi_fu_171_p4 = select_ln13_5_reg_976;
    end else begin
        ap_phi_mux_indvar_flatten22_phi_fu_171_p4 = indvar_flatten22_reg_167;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten59_phi_fu_148_p4 = add_ln10_reg_881;
    end else begin
        ap_phi_mux_indvar_flatten59_phi_fu_148_p4 = indvar_flatten59_reg_144;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_193_p4 = select_ln16_5_reg_971;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_193_p4 = indvar_flatten_reg_189;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_877_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_max_0_phi_fu_217_p4 = select_ln29_1_fu_856_p3;
    end else begin
        ap_phi_mux_max_0_phi_fu_217_p4 = max_0_reg_213;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_229_p4 = mpr_reg_965;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_229_p4 = mpr_0_reg_225;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_182_p4 = select_ln13_2_reg_943;
    end else begin
        ap_phi_mux_r_0_phi_fu_182_p4 = r_0_reg_178;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_out_ce1 = 1'b1;
    end else begin
        conv_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_236_p0 = conv_out_load_1_reg_995;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_236_p0 = conv_out_q0;
        end else begin
            grp_fu_236_p0 = 'bx;
        end
    end else begin
        grp_fu_236_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_236_p1 = select_ln29_fu_726_p3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_236_p1 = select_ln16_fu_619_p3;
        end else begin
            grp_fu_236_p1 = 'bx;
        end
    end else begin
        grp_fu_236_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln20_1_reg_1002 == 1'd1))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_255_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((icmp_ln10_fu_255_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_261_p2 = (ap_phi_mux_indvar_flatten59_phi_fu_148_p4 + 11'd1);

assign add_ln13_1_fu_407_p2 = (ap_phi_mux_indvar_flatten22_phi_fu_171_p4 + 9'd1);

assign add_ln16_fu_599_p2 = (indvar_flatten_reg_189 + 6'd1);

assign add_ln29_1_fu_541_p2 = (zext_ln26_1_fu_426_p1 + sub_ln29_fu_535_p2);

assign add_ln29_2_fu_552_p2 = (zext_ln16_1_fu_499_p1 + mul_ln29_reg_926);

assign add_ln29_3_fu_583_p2 = (zext_ln26_1_fu_426_p1 + sub_ln29_1_fu_577_p2);

assign add_ln29_fu_510_p2 = (zext_ln16_fu_482_p1 + mul_ln29_reg_926);

assign add_ln36_1_fu_768_p2 = (zext_ln26_fu_632_p1 + sub_ln36_fu_762_p2);

assign add_ln36_fu_736_p2 = (zext_ln36_1_fu_733_p1 + mul_ln36_fu_638_p2);

assign and_ln13_fu_361_p2 = (or_ln13_1_fu_355_p2 & and_ln29_4_fu_309_p2);

assign and_ln29_1_fu_720_p2 = (grp_fu_236_p2 & and_ln29_fu_714_p2);

assign and_ln29_2_fu_844_p2 = (or_ln29_3_fu_838_p2 & or_ln29_2_fu_820_p2);

assign and_ln29_3_fu_850_p2 = (grp_fu_236_p2 & and_ln29_2_fu_844_p2);

assign and_ln29_4_fu_309_p2 = (xor_ln29_fu_297_p2 & icmp_ln20_fu_303_p2);

assign and_ln29_5_fu_321_p2 = (xor_ln29_fu_297_p2 & icmp_ln16_fu_315_p2);

assign and_ln29_fu_714_p2 = (or_ln29_fu_690_p2 & or_ln29_1_fu_708_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_1_fu_661_p1 = select_ln16_reg_981;

assign bitcast_ln29_2_fu_774_p1 = conv_out_load_1_reg_995;

assign bitcast_ln29_3_fu_791_p1 = select_ln29_reg_1006;

assign bitcast_ln29_fu_644_p1 = conv_out_load_reg_988;

assign c_fu_461_p2 = (4'd1 + select_ln13_fu_434_p3);

assign conv_out_address0 = zext_ln29_2_fu_547_p1;

assign conv_out_address1 = zext_ln29_4_fu_589_p1;

assign f_fu_413_p2 = (3'd1 + ap_phi_mux_f_0_phi_fu_159_p4);

assign i_fu_391_p2 = (select_ln13_1_fu_341_p3 + zext_ln20_fu_387_p1);

assign icmp_ln10_fu_255_p2 = ((ap_phi_mux_indvar_flatten59_phi_fu_148_p4 == 11'd2028) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_267_p2 = ((ap_phi_mux_indvar_flatten22_phi_fu_171_p4 == 9'd338) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_315_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_193_p4 == 6'd26) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_627_p2 = ((mpr_reg_965 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_303_p2 = ((ap_phi_mux_mpr_0_phi_fu_229_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_684_p2 = ((trunc_ln29_fu_657_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_696_p2 = ((tmp_5_fu_664_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_702_p2 = ((trunc_ln29_1_fu_674_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_808_p2 = ((tmp_7_fu_777_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_814_p2 = ((trunc_ln29_2_fu_787_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_826_p2 = ((tmp_8_fu_794_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_832_p2 = ((trunc_ln29_3_fu_804_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_678_p2 = ((tmp_1_fu_647_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln36_3_fu_863_p1;

assign max_pool_out_d0 = ((and_ln29_3_fu_850_p2[0:0] === 1'b1) ? conv_out_load_1_reg_995 : select_ln29_reg_1006);

assign mpr_fu_594_p2 = (2'd1 + select_ln16_1_reg_921);

assign mul_ln29_fu_401_p1 = mul_ln29_fu_401_p10;

assign mul_ln29_fu_401_p10 = i_fu_391_p2;

assign mul_ln29_fu_401_p2 = (10'd26 * mul_ln29_fu_401_p1);

assign mul_ln36_fu_638_p1 = mul_ln36_fu_638_p10;

assign mul_ln36_fu_638_p10 = select_ln13_2_reg_943;

assign mul_ln36_fu_638_p2 = (8'd13 * mul_ln36_fu_638_p1);

assign or_ln13_1_fu_355_p2 = (xor_ln13_fu_349_p2 | icmp_ln13_fu_267_p2);

assign or_ln13_fu_430_p2 = (icmp_ln13_reg_886 | and_ln29_5_reg_898);

assign or_ln16_1_fu_373_p2 = (or_ln16_fu_367_p2 | icmp_ln13_fu_267_p2);

assign or_ln16_fu_367_p2 = (and_ln29_5_fu_321_p2 | and_ln13_fu_361_p2);

assign or_ln27_1_fu_486_p2 = (shl_ln27_mid1_fu_467_p3 | 5'd1);

assign or_ln27_fu_249_p2 = (shl_ln1_fu_241_p3 | 5'd1);

assign or_ln29_1_fu_708_p2 = (icmp_ln29_3_fu_702_p2 | icmp_ln29_2_fu_696_p2);

assign or_ln29_2_fu_820_p2 = (icmp_ln29_5_fu_814_p2 | icmp_ln29_4_fu_808_p2);

assign or_ln29_3_fu_838_p2 = (icmp_ln29_7_fu_832_p2 | icmp_ln29_6_fu_826_p2);

assign or_ln29_fu_690_p2 = (icmp_ln29_fu_678_p2 | icmp_ln29_1_fu_684_p2);

assign p_shl3_cast_fu_515_p3 = {{add_ln29_fu_510_p2}, {3'd0}};

assign p_shl5_cast_fu_742_p3 = {{add_ln36_fu_736_p2}, {3'd0}};

assign p_shl_cast_fu_557_p3 = {{add_ln29_2_fu_552_p2}, {3'd0}};

assign r_fu_327_p2 = (4'd1 + select_ln29_2_fu_273_p3);

assign select_ln13_1_fu_341_p3 = ((and_ln29_5_fu_321_p2[0:0] === 1'b1) ? shl_ln26_mid1_fu_333_p3 : select_ln29_4_fu_289_p3);

assign select_ln13_2_fu_442_p3 = ((and_ln29_5_reg_898[0:0] === 1'b1) ? r_reg_904 : select_ln29_2_reg_893);

assign select_ln13_3_fu_447_p3 = ((or_ln13_fu_430_p2[0:0] === 1'b1) ? 5'd0 : shl_ln1_reg_867);

assign select_ln13_4_fu_454_p3 = ((or_ln13_fu_430_p2[0:0] === 1'b1) ? 5'd1 : or_ln27_reg_872);

assign select_ln13_5_fu_613_p3 = ((icmp_ln13_reg_886[0:0] === 1'b1) ? 9'd1 : add_ln13_1_reg_932);

assign select_ln13_fu_434_p3 = ((or_ln13_fu_430_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_201);

assign select_ln16_1_fu_379_p3 = ((or_ln16_1_fu_373_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_mpr_0_phi_fu_229_p4);

assign select_ln16_2_fu_475_p3 = ((and_ln13_reg_909[0:0] === 1'b1) ? shl_ln27_mid1_fu_467_p3 : select_ln13_3_fu_447_p3);

assign select_ln16_3_fu_492_p3 = ((and_ln13_reg_909[0:0] === 1'b1) ? or_ln27_1_fu_486_p2 : select_ln13_4_fu_454_p3);

assign select_ln16_4_fu_503_p3 = ((and_ln13_reg_909[0:0] === 1'b1) ? c_fu_461_p2 : select_ln13_fu_434_p3);

assign select_ln16_5_fu_605_p3 = ((or_ln13_fu_430_p2[0:0] === 1'b1) ? 6'd1 : add_ln16_fu_599_p2);

assign select_ln16_fu_619_p3 = ((or_ln16_1_reg_916[0:0] === 1'b1) ? 32'd8388608 : ap_phi_mux_max_0_phi_fu_217_p4);

assign select_ln29_1_fu_856_p3 = ((and_ln29_3_fu_850_p2[0:0] === 1'b1) ? conv_out_load_1_reg_995 : select_ln29_reg_1006);

assign select_ln29_2_fu_273_p3 = ((icmp_ln13_fu_267_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_r_0_phi_fu_182_p4);

assign select_ln29_3_fu_419_p3 = ((icmp_ln13_reg_886[0:0] === 1'b1) ? f_fu_413_p2 : ap_phi_mux_f_0_phi_fu_159_p4);

assign select_ln29_4_fu_289_p3 = ((icmp_ln13_fu_267_p2[0:0] === 1'b1) ? 5'd0 : shl_ln_fu_281_p3);

assign select_ln29_fu_726_p3 = ((and_ln29_1_fu_720_p2[0:0] === 1'b1) ? conv_out_load_reg_988 : select_ln16_reg_981);

assign shl_ln1_fu_241_p3 = {{ap_phi_mux_c_0_phi_fu_205_p4}, {1'd0}};

assign shl_ln26_mid1_fu_333_p3 = {{r_fu_327_p2}, {1'd0}};

assign shl_ln27_mid1_fu_467_p3 = {{c_fu_461_p2}, {1'd0}};

assign shl_ln_fu_281_p3 = {{ap_phi_mux_r_0_phi_fu_182_p4}, {1'd0}};

assign sub_ln29_1_fu_577_p2 = (p_shl_cast_fu_557_p3 - zext_ln29_3_fu_573_p1);

assign sub_ln29_fu_535_p2 = (p_shl3_cast_fu_515_p3 - zext_ln29_1_fu_531_p1);

assign sub_ln36_fu_762_p2 = (p_shl5_cast_fu_742_p3 - zext_ln36_2_fu_758_p1);

assign tmp_1_fu_647_p4 = {{bitcast_ln29_fu_644_p1[30:23]}};

assign tmp_2_fu_565_p3 = {{add_ln29_2_fu_552_p2}, {1'd0}};

assign tmp_3_fu_750_p3 = {{add_ln36_fu_736_p2}, {1'd0}};

assign tmp_5_fu_664_p4 = {{bitcast_ln29_1_fu_661_p1[30:23]}};

assign tmp_7_fu_777_p4 = {{bitcast_ln29_2_fu_774_p1[30:23]}};

assign tmp_8_fu_794_p4 = {{bitcast_ln29_3_fu_791_p1[30:23]}};

assign tmp_fu_523_p3 = {{add_ln29_fu_510_p2}, {1'd0}};

assign trunc_ln29_1_fu_674_p1 = bitcast_ln29_1_fu_661_p1[22:0];

assign trunc_ln29_2_fu_787_p1 = bitcast_ln29_2_fu_774_p1[22:0];

assign trunc_ln29_3_fu_804_p1 = bitcast_ln29_3_fu_791_p1[22:0];

assign trunc_ln29_fu_657_p1 = bitcast_ln29_fu_644_p1[22:0];

assign xor_ln13_fu_349_p2 = (icmp_ln16_fu_315_p2 ^ 1'd1);

assign xor_ln29_fu_297_p2 = (icmp_ln13_fu_267_p2 ^ 1'd1);

assign zext_ln16_1_fu_499_p1 = select_ln16_3_fu_492_p3;

assign zext_ln16_fu_482_p1 = select_ln16_2_fu_475_p3;

assign zext_ln20_fu_387_p1 = select_ln16_1_fu_379_p3;

assign zext_ln26_1_fu_426_p1 = select_ln29_3_fu_419_p3;

assign zext_ln26_fu_632_p1 = select_ln29_3_reg_937;

assign zext_ln29_1_fu_531_p1 = tmp_fu_523_p3;

assign zext_ln29_2_fu_547_p1 = add_ln29_1_fu_541_p2;

assign zext_ln29_3_fu_573_p1 = tmp_2_fu_565_p3;

assign zext_ln29_4_fu_589_p1 = add_ln29_3_fu_583_p2;

assign zext_ln36_1_fu_733_p1 = select_ln16_4_reg_949;

assign zext_ln36_2_fu_758_p1 = tmp_3_fu_750_p3;

assign zext_ln36_3_fu_863_p1 = add_ln36_1_reg_1013;

always @ (posedge ap_clk) begin
    shl_ln1_reg_867[0] <= 1'b0;
    or_ln27_reg_872[0] <= 1'b1;
end

endmodule //max_pool
