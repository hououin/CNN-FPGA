// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.580250,HLS_SYN_LAT=18421,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=239,HLS_SYN_LUT=691,HLS_VERSION=2019_1}" *)

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [9:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_ce0;
reg max_pool_out_ce0;
reg max_pool_out_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] f_fu_215_p2;
reg   [2:0] f_reg_511;
wire    ap_CS_fsm_state2;
wire   [12:0] zext_ln13_fu_221_p1;
reg   [12:0] zext_ln13_reg_516;
wire   [0:0] icmp_ln10_fu_209_p2;
wire   [10:0] zext_ln13_1_fu_225_p1;
reg   [10:0] zext_ln13_1_reg_521;
wire   [7:0] add_ln13_fu_229_p2;
reg   [7:0] add_ln13_reg_526;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_241_p2;
reg   [3:0] r_reg_534;
wire   [4:0] shl_ln_fu_247_p3;
reg   [4:0] shl_ln_reg_539;
wire   [0:0] icmp_ln13_fu_235_p2;
wire   [3:0] c_fu_261_p2;
reg   [3:0] c_reg_547;
wire    ap_CS_fsm_state4;
wire   [4:0] shl_ln1_fu_267_p3;
reg   [4:0] shl_ln1_reg_552;
wire   [0:0] icmp_ln16_fu_255_p2;
wire   [1:0] mpr_fu_285_p2;
reg   [1:0] mpr_reg_560;
wire    ap_CS_fsm_state5;
wire   [9:0] mul_ln29_fu_300_p2;
reg   [9:0] mul_ln29_reg_565;
wire   [0:0] icmp_ln20_fu_279_p2;
wire   [1:0] mpc_fu_362_p2;
reg   [1:0] mpc_reg_573;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln23_fu_356_p2;
reg   [31:0] max_reg_583;
wire    ap_CS_fsm_state7;
wire   [31:0] max_2_fu_501_p3;
wire    ap_CS_fsm_state8;
reg   [2:0] f_0_reg_110;
reg   [3:0] r_0_reg_121;
reg   [7:0] phi_mul_reg_132;
reg   [3:0] c_0_reg_144;
reg   [31:0] max_0_reg_156;
reg   [1:0] mpr_0_reg_169;
reg   [31:0] max_1_reg_180;
reg   [1:0] mpc_0_reg_192;
wire   [63:0] zext_ln36_2_fu_347_p1;
wire   [63:0] zext_ln29_3_fu_413_p1;
wire   [4:0] zext_ln20_fu_275_p1;
wire   [4:0] i_fu_291_p2;
wire   [4:0] mul_ln29_fu_300_p0;
wire   [7:0] zext_ln36_fu_306_p1;
wire   [7:0] add_ln36_fu_310_p2;
wire   [8:0] tmp_7_fu_324_p3;
wire   [10:0] p_shl2_cast_fu_316_p3;
wire   [10:0] zext_ln36_1_fu_332_p1;
wire   [10:0] sub_ln36_fu_336_p2;
wire   [10:0] add_ln36_1_fu_342_p2;
wire   [4:0] zext_ln23_fu_352_p1;
wire   [4:0] j_fu_368_p2;
wire   [9:0] zext_ln29_1_fu_373_p1;
wire   [9:0] add_ln29_fu_377_p2;
wire   [10:0] tmp_8_fu_390_p3;
wire   [12:0] p_shl_cast_fu_382_p3;
wire   [12:0] zext_ln29_2_fu_398_p1;
wire   [12:0] sub_ln29_fu_402_p2;
wire   [12:0] add_ln29_1_fu_408_p2;
wire   [31:0] bitcast_ln29_fu_418_p1;
wire   [31:0] bitcast_ln29_1_fu_435_p1;
wire   [7:0] tmp_fu_421_p4;
wire   [22:0] trunc_ln29_fu_431_p1;
wire   [0:0] icmp_ln29_1_fu_459_p2;
wire   [0:0] icmp_ln29_fu_453_p2;
wire   [7:0] tmp_5_fu_439_p4;
wire   [22:0] trunc_ln29_1_fu_449_p1;
wire   [0:0] icmp_ln29_3_fu_477_p2;
wire   [0:0] icmp_ln29_2_fu_471_p2;
wire   [0:0] or_ln29_fu_465_p2;
wire   [0:0] or_ln29_1_fu_483_p2;
wire   [0:0] and_ln29_fu_489_p2;
wire   [0:0] grp_fu_203_p2;
wire   [0:0] and_ln29_1_fu_495_p2;
reg   [7:0] ap_NS_fsm;
wire   [9:0] mul_ln29_fu_300_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

max_pool_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_fcmp_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_out_q0),
    .din1(max_1_reg_180),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_203_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_reg_144 <= c_reg_547;
    end else if (((icmp_ln13_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_144 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_110 <= f_reg_511;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_110 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_356_p2 == 1'd1))) begin
        max_0_reg_156 <= max_1_reg_180;
    end else if (((icmp_ln16_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_156 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_1_reg_180 <= max_2_fu_501_p3;
    end else if (((icmp_ln20_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_1_reg_180 <= max_0_reg_156;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mpc_0_reg_192 <= mpc_reg_573;
    end else if (((icmp_ln20_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mpc_0_reg_192 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_356_p2 == 1'd1))) begin
        mpr_0_reg_169 <= mpr_reg_560;
    end else if (((icmp_ln16_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_169 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_132 <= add_ln13_reg_526;
    end else if (((icmp_ln10_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_132 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_121 <= r_reg_534;
    end else if (((icmp_ln10_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_121 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_526 <= add_ln13_fu_229_p2;
        r_reg_534 <= r_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_547 <= c_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_511 <= f_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_reg_583 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_reg_573 <= mpc_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_560 <= mpr_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln29_reg_565[9 : 1] <= mul_ln29_fu_300_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln1_reg_552[4 : 1] <= shl_ln1_fu_267_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_539[4 : 1] <= shl_ln_fu_247_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_521[2 : 0] <= zext_ln13_1_fu_225_p1[2 : 0];
        zext_ln13_reg_516[2 : 0] <= zext_ln13_fu_221_p1[2 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_255_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln20_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_356_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_229_p2 = (phi_mul_reg_132 + 8'd13);

assign add_ln29_1_fu_408_p2 = (sub_ln29_fu_402_p2 + zext_ln13_reg_516);

assign add_ln29_fu_377_p2 = (mul_ln29_reg_565 + zext_ln29_1_fu_373_p1);

assign add_ln36_1_fu_342_p2 = (zext_ln13_1_reg_521 + sub_ln36_fu_336_p2);

assign add_ln36_fu_310_p2 = (zext_ln36_fu_306_p1 + phi_mul_reg_132);

assign and_ln29_1_fu_495_p2 = (grp_fu_203_p2 & and_ln29_fu_489_p2);

assign and_ln29_fu_489_p2 = (or_ln29_fu_465_p2 & or_ln29_1_fu_483_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln29_1_fu_435_p1 = max_1_reg_180;

assign bitcast_ln29_fu_418_p1 = max_reg_583;

assign c_fu_261_p2 = (c_0_reg_144 + 4'd1);

assign conv_out_address0 = zext_ln29_3_fu_413_p1;

assign f_fu_215_p2 = (f_0_reg_110 + 3'd1);

assign i_fu_291_p2 = (zext_ln20_fu_275_p1 + shl_ln_reg_539);

assign icmp_ln10_fu_209_p2 = ((f_0_reg_110 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_235_p2 = ((r_0_reg_121 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_255_p2 = ((c_0_reg_144 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_279_p2 = ((mpr_0_reg_169 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_356_p2 = ((mpc_0_reg_192 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_459_p2 = ((trunc_ln29_fu_431_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_471_p2 = ((tmp_5_fu_439_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_477_p2 = ((trunc_ln29_1_fu_449_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_453_p2 = ((tmp_fu_421_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_fu_368_p2 = (zext_ln23_fu_352_p1 + shl_ln1_reg_552);

assign max_2_fu_501_p3 = ((and_ln29_1_fu_495_p2[0:0] === 1'b1) ? max_reg_583 : max_1_reg_180);

assign max_pool_out_address0 = zext_ln36_2_fu_347_p1;

assign max_pool_out_d0 = max_0_reg_156;

assign mpc_fu_362_p2 = (mpc_0_reg_192 + 2'd1);

assign mpr_fu_285_p2 = (mpr_0_reg_169 + 2'd1);

assign mul_ln29_fu_300_p0 = mul_ln29_fu_300_p00;

assign mul_ln29_fu_300_p00 = i_fu_291_p2;

assign mul_ln29_fu_300_p2 = (mul_ln29_fu_300_p0 * $signed('h1A));

assign or_ln29_1_fu_483_p2 = (icmp_ln29_3_fu_477_p2 | icmp_ln29_2_fu_471_p2);

assign or_ln29_fu_465_p2 = (icmp_ln29_fu_453_p2 | icmp_ln29_1_fu_459_p2);

assign p_shl2_cast_fu_316_p3 = {{add_ln36_fu_310_p2}, {3'd0}};

assign p_shl_cast_fu_382_p3 = {{add_ln29_fu_377_p2}, {3'd0}};

assign r_fu_241_p2 = (r_0_reg_121 + 4'd1);

assign shl_ln1_fu_267_p3 = {{c_0_reg_144}, {1'd0}};

assign shl_ln_fu_247_p3 = {{r_0_reg_121}, {1'd0}};

assign sub_ln29_fu_402_p2 = (p_shl_cast_fu_382_p3 - zext_ln29_2_fu_398_p1);

assign sub_ln36_fu_336_p2 = (p_shl2_cast_fu_316_p3 - zext_ln36_1_fu_332_p1);

assign tmp_5_fu_439_p4 = {{bitcast_ln29_1_fu_435_p1[30:23]}};

assign tmp_7_fu_324_p3 = {{add_ln36_fu_310_p2}, {1'd0}};

assign tmp_8_fu_390_p3 = {{add_ln29_fu_377_p2}, {1'd0}};

assign tmp_fu_421_p4 = {{bitcast_ln29_fu_418_p1[30:23]}};

assign trunc_ln29_1_fu_449_p1 = bitcast_ln29_1_fu_435_p1[22:0];

assign trunc_ln29_fu_431_p1 = bitcast_ln29_fu_418_p1[22:0];

assign zext_ln13_1_fu_225_p1 = f_0_reg_110;

assign zext_ln13_fu_221_p1 = f_0_reg_110;

assign zext_ln20_fu_275_p1 = mpr_0_reg_169;

assign zext_ln23_fu_352_p1 = mpc_0_reg_192;

assign zext_ln29_1_fu_373_p1 = j_fu_368_p2;

assign zext_ln29_2_fu_398_p1 = tmp_8_fu_390_p3;

assign zext_ln29_3_fu_413_p1 = add_ln29_1_fu_408_p2;

assign zext_ln36_1_fu_332_p1 = tmp_7_fu_324_p3;

assign zext_ln36_2_fu_347_p1 = add_ln36_1_fu_342_p2;

assign zext_ln36_fu_306_p1 = c_0_reg_144;

always @ (posedge ap_clk) begin
    zext_ln13_reg_516[12:3] <= 10'b0000000000;
    zext_ln13_1_reg_521[10:3] <= 8'b00000000;
    shl_ln_reg_539[0] <= 1'b0;
    shl_ln1_reg_552[0] <= 1'b0;
    mul_ln29_reg_565[0] <= 1'b0;
end

endmodule //max_pool
