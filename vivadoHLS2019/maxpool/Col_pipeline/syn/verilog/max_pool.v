// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.538400,HLS_SYN_LAT=2034,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=604,HLS_SYN_LUT=1492,HLS_VERSION=2019_1}" *)

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        conv_out_address1,
        conv_out_ce1,
        conv_out_q1,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [11:0] conv_out_address1;
output   conv_out_ce1;
input  [31:0] conv_out_q1;
output  [9:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] conv_out_address0;
reg conv_out_ce0;
reg[11:0] conv_out_address1;
reg conv_out_ce1;
reg max_pool_out_ce0;
reg max_pool_out_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten23_reg_148;
reg   [2:0] f_0_reg_159;
reg   [7:0] indvar_flatten_reg_170;
reg   [3:0] r_0_reg_181;
reg   [3:0] c_0_reg_192;
reg   [31:0] reg_214;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_966;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln10_reg_966_pp0_iter2_reg;
wire   [0:0] icmp_ln10_fu_235_p2;
reg   [0:0] icmp_ln10_reg_966_pp0_iter1_reg;
wire   [9:0] add_ln10_fu_241_p2;
reg   [9:0] add_ln10_reg_970;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_253_p2;
reg   [0:0] icmp_ln13_reg_975;
wire   [3:0] select_ln29_4_fu_259_p3;
reg   [3:0] select_ln29_4_reg_980;
wire   [2:0] select_ln29_5_fu_267_p3;
reg   [2:0] select_ln29_5_reg_985;
wire   [0:0] and_ln29_7_fu_303_p2;
reg   [0:0] and_ln29_7_reg_992;
wire   [3:0] r_fu_309_p2;
reg   [3:0] r_reg_997;
wire   [3:0] select_ln13_fu_321_p3;
reg   [3:0] select_ln13_reg_1002;
wire   [9:0] mul_ln29_fu_349_p2;
reg   [9:0] mul_ln29_reg_1009;
wire   [4:0] select_ln13_3_fu_361_p3;
reg   [4:0] select_ln13_3_reg_1015;
wire   [7:0] add_ln13_fu_369_p2;
reg   [7:0] add_ln13_reg_1020;
wire   [3:0] select_ln13_1_fu_381_p3;
reg   [3:0] select_ln13_1_reg_1025;
wire   [12:0] add_ln29_3_fu_484_p2;
reg   [12:0] add_ln29_3_reg_1035;
wire   [12:0] add_ln29_7_fu_574_p2;
reg   [12:0] add_ln29_7_reg_1045;
reg   [12:0] add_ln29_7_reg_1045_pp0_iter1_reg;
wire   [10:0] add_ln36_1_fu_607_p2;
reg   [10:0] add_ln36_1_reg_1050;
reg   [10:0] add_ln36_1_reg_1050_pp0_iter1_reg;
reg   [10:0] add_ln36_1_reg_1050_pp0_iter2_reg;
wire   [3:0] c_fu_613_p2;
reg   [3:0] c_reg_1055;
wire   [7:0] select_ln13_4_fu_618_p3;
reg   [7:0] select_ln13_4_reg_1060;
reg   [31:0] conv_out_load_1_reg_1070;
wire   [31:0] select_ln29_fu_670_p3;
reg   [31:0] select_ln29_reg_1077;
reg   [31:0] conv_out_load_2_reg_1084;
wire   [31:0] select_ln29_1_fu_765_p3;
reg   [31:0] select_ln29_1_reg_1096;
wire   [31:0] select_ln29_2_fu_854_p3;
reg   [31:0] select_ln29_2_reg_1103;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter3;
reg   [9:0] ap_phi_mux_indvar_flatten23_phi_fu_152_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_f_0_phi_fu_163_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_174_p4;
reg   [3:0] ap_phi_mux_r_0_phi_fu_185_p4;
reg   [3:0] ap_phi_mux_c_0_phi_fu_196_p4;
wire   [63:0] zext_ln29_6_fu_447_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln29_11_fu_537_p1;
wire   [63:0] zext_ln29_8_fu_624_p1;
wire   [63:0] zext_ln29_13_fu_679_p1;
wire   [63:0] zext_ln36_3_fu_952_p1;
reg   [31:0] grp_fu_203_p0;
reg   [31:0] grp_fu_203_p1;
reg   [31:0] grp_fu_209_p0;
reg   [31:0] grp_fu_209_p1;
wire   [4:0] shl_ln_fu_221_p3;
wire   [2:0] f_fu_247_p2;
wire   [4:0] or_ln26_fu_229_p2;
wire   [0:0] icmp_ln16_fu_297_p2;
wire   [0:0] xor_ln29_fu_291_p2;
wire   [0:0] or_ln13_fu_315_p2;
wire   [4:0] shl_ln26_mid1_fu_329_p3;
wire   [4:0] select_ln29_6_fu_275_p3;
wire   [4:0] select_ln13_2_fu_337_p3;
wire   [4:0] mul_ln29_fu_349_p1;
wire   [4:0] or_ln26_1_fu_355_p2;
wire   [4:0] select_ln29_7_fu_283_p3;
wire   [4:0] mul_ln29_1_fu_393_p1;
wire   [4:0] shl_ln1_fu_399_p3;
wire   [9:0] zext_ln29_4_fu_406_p1;
wire   [9:0] add_ln29_fu_410_p2;
wire   [10:0] tmp_fu_423_p3;
wire   [12:0] p_shl8_cast_fu_415_p3;
wire   [12:0] zext_ln29_5_fu_431_p1;
wire   [12:0] zext_ln29_1_fu_378_p1;
wire   [12:0] sub_ln29_fu_435_p2;
wire   [12:0] add_ln29_1_fu_441_p2;
wire   [9:0] mul_ln29_1_fu_393_p2;
wire   [9:0] add_ln29_2_fu_452_p2;
wire   [10:0] tmp_1_fu_466_p3;
wire   [12:0] p_shl6_cast_fu_458_p3;
wire   [12:0] zext_ln29_7_fu_474_p1;
wire   [12:0] sub_ln29_1_fu_478_p2;
wire   [4:0] or_ln27_fu_490_p2;
wire   [9:0] zext_ln29_9_fu_496_p1;
wire   [9:0] add_ln29_4_fu_500_p2;
wire   [10:0] tmp_13_fu_513_p3;
wire   [12:0] p_shl4_cast_fu_505_p3;
wire   [12:0] zext_ln29_10_fu_521_p1;
wire   [12:0] sub_ln29_2_fu_525_p2;
wire   [12:0] add_ln29_5_fu_531_p2;
wire   [9:0] add_ln29_6_fu_542_p2;
wire   [10:0] tmp_14_fu_556_p3;
wire   [12:0] p_shl2_cast_fu_548_p3;
wire   [12:0] zext_ln29_12_fu_564_p1;
wire   [12:0] sub_ln29_3_fu_568_p2;
wire   [7:0] grp_fu_956_p3;
wire   [8:0] tmp_15_fu_590_p3;
wire   [10:0] p_shl_cast_fu_583_p3;
wire   [10:0] zext_ln36_2_fu_597_p1;
wire   [10:0] zext_ln29_fu_375_p1;
wire   [10:0] sub_ln36_fu_601_p2;
wire   [31:0] bitcast_ln29_fu_628_p1;
wire   [7:0] tmp_3_fu_632_p4;
wire   [22:0] trunc_ln29_fu_642_p1;
wire   [0:0] icmp_ln29_1_fu_652_p2;
wire   [0:0] icmp_ln29_fu_646_p2;
wire   [0:0] or_ln29_fu_658_p2;
wire   [0:0] grp_fu_203_p2;
wire   [0:0] and_ln29_fu_664_p2;
wire   [31:0] bitcast_ln29_1_fu_683_p1;
wire   [31:0] bitcast_ln29_2_fu_700_p1;
wire   [7:0] tmp_5_fu_686_p4;
wire   [22:0] trunc_ln29_1_fu_696_p1;
wire   [0:0] icmp_ln29_3_fu_723_p2;
wire   [0:0] icmp_ln29_2_fu_717_p2;
wire   [7:0] tmp_6_fu_703_p4;
wire   [22:0] trunc_ln29_2_fu_713_p1;
wire   [0:0] icmp_ln29_5_fu_741_p2;
wire   [0:0] icmp_ln29_4_fu_735_p2;
wire   [0:0] or_ln29_1_fu_729_p2;
wire   [0:0] or_ln29_2_fu_747_p2;
wire   [0:0] and_ln29_1_fu_753_p2;
wire   [0:0] and_ln29_2_fu_759_p2;
wire   [31:0] bitcast_ln29_3_fu_772_p1;
wire   [31:0] bitcast_ln29_4_fu_789_p1;
wire   [7:0] tmp_8_fu_775_p4;
wire   [22:0] trunc_ln29_3_fu_785_p1;
wire   [0:0] icmp_ln29_7_fu_812_p2;
wire   [0:0] icmp_ln29_6_fu_806_p2;
wire   [7:0] tmp_9_fu_792_p4;
wire   [22:0] trunc_ln29_4_fu_802_p1;
wire   [0:0] icmp_ln29_9_fu_830_p2;
wire   [0:0] icmp_ln29_8_fu_824_p2;
wire   [0:0] or_ln29_3_fu_818_p2;
wire   [0:0] or_ln29_4_fu_836_p2;
wire   [0:0] and_ln29_3_fu_842_p2;
wire   [0:0] grp_fu_209_p2;
wire   [0:0] and_ln29_4_fu_848_p2;
wire   [31:0] bitcast_ln29_5_fu_861_p1;
wire   [31:0] bitcast_ln29_6_fu_879_p1;
wire   [7:0] tmp_10_fu_865_p4;
wire   [22:0] trunc_ln29_5_fu_875_p1;
wire   [0:0] icmp_ln29_11_fu_902_p2;
wire   [0:0] icmp_ln29_10_fu_896_p2;
wire   [7:0] tmp_11_fu_882_p4;
wire   [22:0] trunc_ln29_6_fu_892_p1;
wire   [0:0] icmp_ln29_13_fu_920_p2;
wire   [0:0] icmp_ln29_12_fu_914_p2;
wire   [0:0] or_ln29_5_fu_908_p2;
wire   [0:0] or_ln29_6_fu_926_p2;
wire   [0:0] and_ln29_5_fu_932_p2;
wire   [0:0] and_ln29_6_fu_938_p2;
wire   [4:0] grp_fu_956_p0;
wire   [3:0] grp_fu_956_p1;
wire   [3:0] grp_fu_956_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
wire    ap_CS_fsm_state9;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_956_p10;
wire   [7:0] grp_fu_956_p20;
wire   [9:0] mul_ln29_1_fu_393_p10;
wire   [9:0] mul_ln29_fu_349_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

max_pool_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_fcmp_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_203_p0),
    .din1(grp_fu_203_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_203_p2)
);

max_pool_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_fcmp_32nbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_209_p0),
    .din1(grp_fu_209_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_209_p2)
);

max_pool_mac_mulacud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
max_pool_mac_mulacud_U3(
    .din0(grp_fu_956_p0),
    .din1(grp_fu_956_p1),
    .din2(grp_fu_956_p2),
    .dout(grp_fu_956_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_reg_192 <= c_reg_1055;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_192 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_0_reg_159 <= select_ln29_5_reg_985;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_159 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten23_reg_148 <= add_ln10_reg_970;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten23_reg_148 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_170 <= select_ln13_4_reg_1060;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_170 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_0_reg_181 <= select_ln13_1_reg_1025;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_181 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln10_reg_966_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_214 <= conv_out_q1;
    end else if (((icmp_ln10_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_214 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln10_reg_970 <= add_ln10_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln13_reg_1020 <= add_ln13_fu_369_p2;
        and_ln29_7_reg_992 <= and_ln29_7_fu_303_p2;
        icmp_ln13_reg_975 <= icmp_ln13_fu_253_p2;
        mul_ln29_reg_1009[9 : 1] <= mul_ln29_fu_349_p2[9 : 1];
        r_reg_997 <= r_fu_309_p2;
        select_ln13_3_reg_1015[4 : 1] <= select_ln13_3_fu_361_p3[4 : 1];
        select_ln13_reg_1002 <= select_ln13_fu_321_p3;
        select_ln29_4_reg_980 <= select_ln29_4_fu_259_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln10_reg_966 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln29_3_reg_1035 <= add_ln29_3_fu_484_p2;
        add_ln29_7_reg_1045 <= add_ln29_7_fu_574_p2;
        add_ln36_1_reg_1050 <= add_ln36_1_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln29_7_reg_1045_pp0_iter1_reg <= add_ln29_7_reg_1045;
        add_ln36_1_reg_1050_pp0_iter1_reg <= add_ln36_1_reg_1050;
        add_ln36_1_reg_1050_pp0_iter2_reg <= add_ln36_1_reg_1050_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln10_reg_966 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_reg_1055 <= c_fu_613_p2;
        select_ln13_1_reg_1025 <= select_ln13_1_fu_381_p3;
        select_ln13_4_reg_1060 <= select_ln13_4_fu_618_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_out_load_1_reg_1070 <= conv_out_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln10_reg_966_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_load_2_reg_1084 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_966 <= icmp_ln10_fu_235_p2;
        icmp_ln10_reg_966_pp0_iter1_reg <= icmp_ln10_reg_966;
        icmp_ln10_reg_966_pp0_iter2_reg <= icmp_ln10_reg_966_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_966_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln29_1_reg_1096 <= select_ln29_1_fu_765_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln10_reg_966_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln29_2_reg_1103 <= select_ln29_2_fu_854_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln29_5_reg_985 <= select_ln29_5_fu_267_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln10_reg_966_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln29_reg_1077 <= select_ln29_fu_670_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_235_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_196_p4 = c_reg_1055;
    end else begin
        ap_phi_mux_c_0_phi_fu_196_p4 = c_0_reg_192;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_163_p4 = select_ln29_5_reg_985;
    end else begin
        ap_phi_mux_f_0_phi_fu_163_p4 = f_0_reg_159;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten23_phi_fu_152_p4 = add_ln10_reg_970;
    end else begin
        ap_phi_mux_indvar_flatten23_phi_fu_152_p4 = indvar_flatten23_reg_148;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_174_p4 = select_ln13_4_reg_1060;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_174_p4 = indvar_flatten_reg_170;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_966 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_185_p4 = select_ln13_1_reg_1025;
    end else begin
        ap_phi_mux_r_0_phi_fu_185_p4 = r_0_reg_181;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        conv_out_address0 = zext_ln29_8_fu_624_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv_out_address0 = zext_ln29_6_fu_447_p1;
    end else begin
        conv_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        conv_out_address1 = zext_ln29_13_fu_679_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv_out_address1 = zext_ln29_11_fu_537_p1;
    end else begin
        conv_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_out_ce1 = 1'b1;
    end else begin
        conv_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_203_p0 = conv_out_load_1_reg_1070;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_203_p0 = conv_out_q0;
        end else begin
            grp_fu_203_p0 = 'bx;
        end
    end else begin
        grp_fu_203_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_203_p1 = select_ln29_fu_670_p3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_203_p1 = 32'd8388608;
        end else begin
            grp_fu_203_p1 = 'bx;
        end
    end else begin
        grp_fu_203_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_209_p0 = conv_out_q1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_209_p0 = conv_out_load_2_reg_1084;
        end else begin
            grp_fu_209_p0 = 'bx;
        end
    end else begin
        grp_fu_209_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_209_p1 = select_ln29_2_fu_854_p3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_209_p1 = select_ln29_1_fu_765_p3;
        end else begin
            grp_fu_209_p1 = 'bx;
        end
    end else begin
        grp_fu_209_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_966_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((icmp_ln10_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_241_p2 = (ap_phi_mux_indvar_flatten23_phi_fu_152_p4 + 10'd1);

assign add_ln13_fu_369_p2 = (8'd1 + ap_phi_mux_indvar_flatten_phi_fu_174_p4);

assign add_ln29_1_fu_441_p2 = (zext_ln29_1_fu_378_p1 + sub_ln29_fu_435_p2);

assign add_ln29_2_fu_452_p2 = (zext_ln29_4_fu_406_p1 + mul_ln29_1_fu_393_p2);

assign add_ln29_3_fu_484_p2 = (zext_ln29_1_fu_378_p1 + sub_ln29_1_fu_478_p2);

assign add_ln29_4_fu_500_p2 = (zext_ln29_9_fu_496_p1 + mul_ln29_reg_1009);

assign add_ln29_5_fu_531_p2 = (zext_ln29_1_fu_378_p1 + sub_ln29_2_fu_525_p2);

assign add_ln29_6_fu_542_p2 = (zext_ln29_9_fu_496_p1 + mul_ln29_1_fu_393_p2);

assign add_ln29_7_fu_574_p2 = (zext_ln29_1_fu_378_p1 + sub_ln29_3_fu_568_p2);

assign add_ln29_fu_410_p2 = (zext_ln29_4_fu_406_p1 + mul_ln29_reg_1009);

assign add_ln36_1_fu_607_p2 = (zext_ln29_fu_375_p1 + sub_ln36_fu_601_p2);

assign and_ln29_1_fu_753_p2 = (or_ln29_2_fu_747_p2 & or_ln29_1_fu_729_p2);

assign and_ln29_2_fu_759_p2 = (grp_fu_203_p2 & and_ln29_1_fu_753_p2);

assign and_ln29_3_fu_842_p2 = (or_ln29_4_fu_836_p2 & or_ln29_3_fu_818_p2);

assign and_ln29_4_fu_848_p2 = (grp_fu_209_p2 & and_ln29_3_fu_842_p2);

assign and_ln29_5_fu_932_p2 = (or_ln29_6_fu_926_p2 & or_ln29_5_fu_908_p2);

assign and_ln29_6_fu_938_p2 = (grp_fu_209_p2 & and_ln29_5_fu_932_p2);

assign and_ln29_7_fu_303_p2 = (xor_ln29_fu_291_p2 & icmp_ln16_fu_297_p2);

assign and_ln29_fu_664_p2 = (or_ln29_fu_658_p2 & grp_fu_203_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_1_fu_683_p1 = conv_out_load_1_reg_1070;

assign bitcast_ln29_2_fu_700_p1 = select_ln29_reg_1077;

assign bitcast_ln29_3_fu_772_p1 = conv_out_load_2_reg_1084;

assign bitcast_ln29_4_fu_789_p1 = select_ln29_1_reg_1096;

assign bitcast_ln29_5_fu_861_p1 = reg_214;

assign bitcast_ln29_6_fu_879_p1 = select_ln29_2_reg_1103;

assign bitcast_ln29_fu_628_p1 = reg_214;

assign c_fu_613_p2 = (4'd1 + select_ln13_reg_1002);

assign f_fu_247_p2 = (3'd1 + ap_phi_mux_f_0_phi_fu_163_p4);

assign grp_fu_956_p0 = 8'd13;

assign grp_fu_956_p1 = grp_fu_956_p10;

assign grp_fu_956_p10 = select_ln13_1_fu_381_p3;

assign grp_fu_956_p2 = grp_fu_956_p20;

assign grp_fu_956_p20 = select_ln13_reg_1002;

assign icmp_ln10_fu_235_p2 = ((ap_phi_mux_indvar_flatten23_phi_fu_152_p4 == 10'd1014) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_253_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_174_p4 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_297_p2 = ((ap_phi_mux_c_0_phi_fu_196_p4 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln29_10_fu_896_p2 = ((tmp_10_fu_865_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_11_fu_902_p2 = ((trunc_ln29_5_fu_875_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_12_fu_914_p2 = ((tmp_11_fu_882_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_13_fu_920_p2 = ((trunc_ln29_6_fu_892_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_652_p2 = ((trunc_ln29_fu_642_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_717_p2 = ((tmp_5_fu_686_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_723_p2 = ((trunc_ln29_1_fu_696_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_735_p2 = ((tmp_6_fu_703_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_741_p2 = ((trunc_ln29_2_fu_713_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_806_p2 = ((tmp_8_fu_775_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_812_p2 = ((trunc_ln29_3_fu_785_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_8_fu_824_p2 = ((tmp_9_fu_792_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_9_fu_830_p2 = ((trunc_ln29_4_fu_802_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_646_p2 = ((tmp_3_fu_632_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln36_3_fu_952_p1;

assign max_pool_out_d0 = ((and_ln29_6_fu_938_p2[0:0] === 1'b1) ? reg_214 : select_ln29_2_reg_1103);

assign mul_ln29_1_fu_393_p1 = mul_ln29_1_fu_393_p10;

assign mul_ln29_1_fu_393_p10 = select_ln13_3_reg_1015;

assign mul_ln29_1_fu_393_p2 = (10'd26 * mul_ln29_1_fu_393_p1);

assign mul_ln29_fu_349_p1 = mul_ln29_fu_349_p10;

assign mul_ln29_fu_349_p10 = select_ln13_2_fu_337_p3;

assign mul_ln29_fu_349_p2 = (10'd26 * mul_ln29_fu_349_p1);

assign or_ln13_fu_315_p2 = (icmp_ln13_fu_253_p2 | and_ln29_7_fu_303_p2);

assign or_ln26_1_fu_355_p2 = (shl_ln26_mid1_fu_329_p3 | 5'd1);

assign or_ln26_fu_229_p2 = (shl_ln_fu_221_p3 | 5'd1);

assign or_ln27_fu_490_p2 = (shl_ln1_fu_399_p3 | 5'd1);

assign or_ln29_1_fu_729_p2 = (icmp_ln29_3_fu_723_p2 | icmp_ln29_2_fu_717_p2);

assign or_ln29_2_fu_747_p2 = (icmp_ln29_5_fu_741_p2 | icmp_ln29_4_fu_735_p2);

assign or_ln29_3_fu_818_p2 = (icmp_ln29_7_fu_812_p2 | icmp_ln29_6_fu_806_p2);

assign or_ln29_4_fu_836_p2 = (icmp_ln29_9_fu_830_p2 | icmp_ln29_8_fu_824_p2);

assign or_ln29_5_fu_908_p2 = (icmp_ln29_11_fu_902_p2 | icmp_ln29_10_fu_896_p2);

assign or_ln29_6_fu_926_p2 = (icmp_ln29_13_fu_920_p2 | icmp_ln29_12_fu_914_p2);

assign or_ln29_fu_658_p2 = (icmp_ln29_fu_646_p2 | icmp_ln29_1_fu_652_p2);

assign p_shl2_cast_fu_548_p3 = {{add_ln29_6_fu_542_p2}, {3'd0}};

assign p_shl4_cast_fu_505_p3 = {{add_ln29_4_fu_500_p2}, {3'd0}};

assign p_shl6_cast_fu_458_p3 = {{add_ln29_2_fu_452_p2}, {3'd0}};

assign p_shl8_cast_fu_415_p3 = {{add_ln29_fu_410_p2}, {3'd0}};

assign p_shl_cast_fu_583_p3 = {{grp_fu_956_p3}, {3'd0}};

assign r_fu_309_p2 = (4'd1 + select_ln29_4_fu_259_p3);

assign select_ln13_1_fu_381_p3 = ((and_ln29_7_reg_992[0:0] === 1'b1) ? r_reg_997 : select_ln29_4_reg_980);

assign select_ln13_2_fu_337_p3 = ((and_ln29_7_fu_303_p2[0:0] === 1'b1) ? shl_ln26_mid1_fu_329_p3 : select_ln29_6_fu_275_p3);

assign select_ln13_3_fu_361_p3 = ((and_ln29_7_fu_303_p2[0:0] === 1'b1) ? or_ln26_1_fu_355_p2 : select_ln29_7_fu_283_p3);

assign select_ln13_4_fu_618_p3 = ((icmp_ln13_reg_975[0:0] === 1'b1) ? 8'd1 : add_ln13_reg_1020);

assign select_ln13_fu_321_p3 = ((or_ln13_fu_315_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_c_0_phi_fu_196_p4);

assign select_ln29_1_fu_765_p3 = ((and_ln29_2_fu_759_p2[0:0] === 1'b1) ? conv_out_load_1_reg_1070 : select_ln29_reg_1077);

assign select_ln29_2_fu_854_p3 = ((and_ln29_4_fu_848_p2[0:0] === 1'b1) ? conv_out_load_2_reg_1084 : select_ln29_1_reg_1096);

assign select_ln29_4_fu_259_p3 = ((icmp_ln13_fu_253_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_r_0_phi_fu_185_p4);

assign select_ln29_5_fu_267_p3 = ((icmp_ln13_fu_253_p2[0:0] === 1'b1) ? f_fu_247_p2 : ap_phi_mux_f_0_phi_fu_163_p4);

assign select_ln29_6_fu_275_p3 = ((icmp_ln13_fu_253_p2[0:0] === 1'b1) ? 5'd0 : shl_ln_fu_221_p3);

assign select_ln29_7_fu_283_p3 = ((icmp_ln13_fu_253_p2[0:0] === 1'b1) ? 5'd1 : or_ln26_fu_229_p2);

assign select_ln29_fu_670_p3 = ((and_ln29_fu_664_p2[0:0] === 1'b1) ? reg_214 : 32'd8388608);

assign shl_ln1_fu_399_p3 = {{select_ln13_reg_1002}, {1'd0}};

assign shl_ln26_mid1_fu_329_p3 = {{r_fu_309_p2}, {1'd0}};

assign shl_ln_fu_221_p3 = {{ap_phi_mux_r_0_phi_fu_185_p4}, {1'd0}};

assign sub_ln29_1_fu_478_p2 = (p_shl6_cast_fu_458_p3 - zext_ln29_7_fu_474_p1);

assign sub_ln29_2_fu_525_p2 = (p_shl4_cast_fu_505_p3 - zext_ln29_10_fu_521_p1);

assign sub_ln29_3_fu_568_p2 = (p_shl2_cast_fu_548_p3 - zext_ln29_12_fu_564_p1);

assign sub_ln29_fu_435_p2 = (p_shl8_cast_fu_415_p3 - zext_ln29_5_fu_431_p1);

assign sub_ln36_fu_601_p2 = (p_shl_cast_fu_583_p3 - zext_ln36_2_fu_597_p1);

assign tmp_10_fu_865_p4 = {{bitcast_ln29_5_fu_861_p1[30:23]}};

assign tmp_11_fu_882_p4 = {{bitcast_ln29_6_fu_879_p1[30:23]}};

assign tmp_13_fu_513_p3 = {{add_ln29_4_fu_500_p2}, {1'd0}};

assign tmp_14_fu_556_p3 = {{add_ln29_6_fu_542_p2}, {1'd0}};

assign tmp_15_fu_590_p3 = {{grp_fu_956_p3}, {1'd0}};

assign tmp_1_fu_466_p3 = {{add_ln29_2_fu_452_p2}, {1'd0}};

assign tmp_3_fu_632_p4 = {{bitcast_ln29_fu_628_p1[30:23]}};

assign tmp_5_fu_686_p4 = {{bitcast_ln29_1_fu_683_p1[30:23]}};

assign tmp_6_fu_703_p4 = {{bitcast_ln29_2_fu_700_p1[30:23]}};

assign tmp_8_fu_775_p4 = {{bitcast_ln29_3_fu_772_p1[30:23]}};

assign tmp_9_fu_792_p4 = {{bitcast_ln29_4_fu_789_p1[30:23]}};

assign tmp_fu_423_p3 = {{add_ln29_fu_410_p2}, {1'd0}};

assign trunc_ln29_1_fu_696_p1 = bitcast_ln29_1_fu_683_p1[22:0];

assign trunc_ln29_2_fu_713_p1 = bitcast_ln29_2_fu_700_p1[22:0];

assign trunc_ln29_3_fu_785_p1 = bitcast_ln29_3_fu_772_p1[22:0];

assign trunc_ln29_4_fu_802_p1 = bitcast_ln29_4_fu_789_p1[22:0];

assign trunc_ln29_5_fu_875_p1 = bitcast_ln29_5_fu_861_p1[22:0];

assign trunc_ln29_6_fu_892_p1 = bitcast_ln29_6_fu_879_p1[22:0];

assign trunc_ln29_fu_642_p1 = bitcast_ln29_fu_628_p1[22:0];

assign xor_ln29_fu_291_p2 = (icmp_ln13_fu_253_p2 ^ 1'd1);

assign zext_ln29_10_fu_521_p1 = tmp_13_fu_513_p3;

assign zext_ln29_11_fu_537_p1 = add_ln29_5_fu_531_p2;

assign zext_ln29_12_fu_564_p1 = tmp_14_fu_556_p3;

assign zext_ln29_13_fu_679_p1 = add_ln29_7_reg_1045_pp0_iter1_reg;

assign zext_ln29_1_fu_378_p1 = select_ln29_5_reg_985;

assign zext_ln29_4_fu_406_p1 = shl_ln1_fu_399_p3;

assign zext_ln29_5_fu_431_p1 = tmp_fu_423_p3;

assign zext_ln29_6_fu_447_p1 = add_ln29_1_fu_441_p2;

assign zext_ln29_7_fu_474_p1 = tmp_1_fu_466_p3;

assign zext_ln29_8_fu_624_p1 = add_ln29_3_reg_1035;

assign zext_ln29_9_fu_496_p1 = or_ln27_fu_490_p2;

assign zext_ln29_fu_375_p1 = select_ln29_5_reg_985;

assign zext_ln36_2_fu_597_p1 = tmp_15_fu_590_p3;

assign zext_ln36_3_fu_952_p1 = add_ln36_1_reg_1050_pp0_iter2_reg;

always @ (posedge ap_clk) begin
    mul_ln29_reg_1009[0] <= 1'b0;
    select_ln13_3_reg_1015[0] <= 1'b1;
end

endmodule //max_pool
