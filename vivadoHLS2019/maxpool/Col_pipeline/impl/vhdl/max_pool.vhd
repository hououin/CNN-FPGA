-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce1 : OUT STD_LOGIC;
    conv_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.538400,HLS_SYN_LAT=2034,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=604,HLS_SYN_LUT=1492,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_3F6 : STD_LOGIC_VECTOR (9 downto 0) := "1111110110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten23_reg_148 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_0_reg_159 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_181 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_192 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_966 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln10_reg_966_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_966_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_241_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln10_reg_970 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_4_fu_259_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_4_reg_980 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_5_fu_267_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_5_reg_985 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln29_7_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_7_reg_992 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_997 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_fu_321_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_reg_1002 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln29_fu_349_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_reg_1009 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln13_3_fu_361_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_3_reg_1015 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_fu_369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_1020 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln13_1_fu_381_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_1_reg_1025 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln29_3_fu_484_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_3_reg_1035 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_7_fu_574_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_7_reg_1045 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_7_reg_1045_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln36_1_fu_607_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_1_reg_1050 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_1_reg_1050_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_1_reg_1050_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal c_fu_613_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_4_fu_618_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln13_4_reg_1060 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out_load_1_reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_fu_670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_out_load_2_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_1_fu_765_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_1_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_2_fu_854_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_2_reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten23_phi_fu_152_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_phi_fu_163_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_174_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_r_0_phi_fu_185_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_196_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln29_6_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln29_11_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_8_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_13_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_3_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_203_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_221_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_fu_247_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln26_fu_229_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln26_mid1_fu_329_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_6_fu_275_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_2_fu_337_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_349_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln26_1_fu_355_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_7_fu_283_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_1_fu_393_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_fu_399_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_4_fu_406_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_410_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_423_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_cast_fu_415_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_5_fu_431_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_1_fu_378_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_fu_435_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_1_fu_441_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln29_1_fu_393_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_2_fu_452_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_466_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_458_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_7_fu_474_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_1_fu_478_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln27_fu_490_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_9_fu_496_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_4_fu_500_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_513_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_505_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_10_fu_521_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_2_fu_525_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_5_fu_531_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_6_fu_542_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_556_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_548_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_12_fu_564_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_3_fu_568_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_956_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_590_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_583_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_2_fu_597_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln29_fu_375_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln36_fu_601_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln29_fu_628_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_632_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_642_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_1_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_1_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_2_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_686_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_696_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_3_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_703_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_fu_713_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_5_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_4_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_2_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_2_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_3_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_4_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_775_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_3_fu_785_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_6_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_792_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_4_fu_802_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_9_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_8_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_3_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_4_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_3_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_4_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_5_fu_861_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_6_fu_879_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_865_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_5_fu_875_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_11_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_10_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_882_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_6_fu_892_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_13_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_12_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_5_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_6_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_5_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_6_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_956_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_956_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_956_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_956_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_956_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_1_fu_393_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_fu_349_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component max_pool_fcmp_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component max_pool_mac_mulacud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    max_pool_fcmp_32nbkb_U1 : component max_pool_fcmp_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_203_p0,
        din1 => grp_fu_203_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_203_p2);

    max_pool_fcmp_32nbkb_U2 : component max_pool_fcmp_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_209_p0,
        din1 => grp_fu_209_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_209_p2);

    max_pool_mac_mulacud_U3 : component max_pool_mac_mulacud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_956_p0,
        din1 => grp_fu_956_p1,
        din2 => grp_fu_956_p2,
        dout => grp_fu_956_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_0_reg_192 <= c_reg_1055;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_192 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                f_0_reg_159 <= select_ln29_5_reg_985;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_159 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten23_reg_148 <= add_ln10_reg_970;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_148 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_170 <= select_ln13_4_reg_1060;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_170 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                r_0_reg_181 <= select_ln13_1_reg_1025;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_181 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln10_reg_966_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_214 <= conv_out_q1;
            elsif (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_214 <= conv_out_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln10_reg_970 <= add_ln10_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln13_reg_1020 <= add_ln13_fu_369_p2;
                and_ln29_7_reg_992 <= and_ln29_7_fu_303_p2;
                icmp_ln13_reg_975 <= icmp_ln13_fu_253_p2;
                    mul_ln29_reg_1009(9 downto 1) <= mul_ln29_fu_349_p2(9 downto 1);
                r_reg_997 <= r_fu_309_p2;
                    select_ln13_3_reg_1015(4 downto 1) <= select_ln13_3_fu_361_p3(4 downto 1);
                select_ln13_reg_1002 <= select_ln13_fu_321_p3;
                select_ln29_4_reg_980 <= select_ln29_4_fu_259_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln29_3_reg_1035 <= add_ln29_3_fu_484_p2;
                add_ln29_7_reg_1045 <= add_ln29_7_fu_574_p2;
                add_ln36_1_reg_1050 <= add_ln36_1_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln29_7_reg_1045_pp0_iter1_reg <= add_ln29_7_reg_1045;
                add_ln36_1_reg_1050_pp0_iter1_reg <= add_ln36_1_reg_1050;
                add_ln36_1_reg_1050_pp0_iter2_reg <= add_ln36_1_reg_1050_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                c_reg_1055 <= c_fu_613_p2;
                select_ln13_1_reg_1025 <= select_ln13_1_fu_381_p3;
                select_ln13_4_reg_1060 <= select_ln13_4_fu_618_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv_out_load_1_reg_1070 <= conv_out_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln10_reg_966_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                conv_out_load_2_reg_1084 <= conv_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_966 <= icmp_ln10_fu_235_p2;
                icmp_ln10_reg_966_pp0_iter1_reg <= icmp_ln10_reg_966;
                icmp_ln10_reg_966_pp0_iter2_reg <= icmp_ln10_reg_966_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_966_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln29_1_reg_1096 <= select_ln29_1_fu_765_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln10_reg_966_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln29_2_reg_1103 <= select_ln29_2_fu_854_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_235_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln29_5_reg_985 <= select_ln29_5_fu_267_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln10_reg_966_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln29_reg_1077 <= select_ln29_fu_670_p3;
            end if;
        end if;
    end process;
    mul_ln29_reg_1009(0) <= '0';
    select_ln13_3_reg_1015(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln10_fu_235_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_235_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((icmp_ln10_fu_235_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_241_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten23_phi_fu_152_p4) + unsigned(ap_const_lv10_1));
    add_ln13_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_174_p4));
    add_ln29_1_fu_441_p2 <= std_logic_vector(unsigned(zext_ln29_1_fu_378_p1) + unsigned(sub_ln29_fu_435_p2));
    add_ln29_2_fu_452_p2 <= std_logic_vector(unsigned(zext_ln29_4_fu_406_p1) + unsigned(mul_ln29_1_fu_393_p2));
    add_ln29_3_fu_484_p2 <= std_logic_vector(unsigned(zext_ln29_1_fu_378_p1) + unsigned(sub_ln29_1_fu_478_p2));
    add_ln29_4_fu_500_p2 <= std_logic_vector(unsigned(zext_ln29_9_fu_496_p1) + unsigned(mul_ln29_reg_1009));
    add_ln29_5_fu_531_p2 <= std_logic_vector(unsigned(zext_ln29_1_fu_378_p1) + unsigned(sub_ln29_2_fu_525_p2));
    add_ln29_6_fu_542_p2 <= std_logic_vector(unsigned(zext_ln29_9_fu_496_p1) + unsigned(mul_ln29_1_fu_393_p2));
    add_ln29_7_fu_574_p2 <= std_logic_vector(unsigned(zext_ln29_1_fu_378_p1) + unsigned(sub_ln29_3_fu_568_p2));
    add_ln29_fu_410_p2 <= std_logic_vector(unsigned(zext_ln29_4_fu_406_p1) + unsigned(mul_ln29_reg_1009));
    add_ln36_1_fu_607_p2 <= std_logic_vector(unsigned(zext_ln29_fu_375_p1) + unsigned(sub_ln36_fu_601_p2));
    and_ln29_1_fu_753_p2 <= (or_ln29_2_fu_747_p2 and or_ln29_1_fu_729_p2);
    and_ln29_2_fu_759_p2 <= (grp_fu_203_p2 and and_ln29_1_fu_753_p2);
    and_ln29_3_fu_842_p2 <= (or_ln29_4_fu_836_p2 and or_ln29_3_fu_818_p2);
    and_ln29_4_fu_848_p2 <= (grp_fu_209_p2 and and_ln29_3_fu_842_p2);
    and_ln29_5_fu_932_p2 <= (or_ln29_6_fu_926_p2 and or_ln29_5_fu_908_p2);
    and_ln29_6_fu_938_p2 <= (grp_fu_209_p2 and and_ln29_5_fu_932_p2);
    and_ln29_7_fu_303_p2 <= (xor_ln29_fu_291_p2 and icmp_ln16_fu_297_p2);
    and_ln29_fu_664_p2 <= (or_ln29_fu_658_p2 and grp_fu_203_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_235_p2)
    begin
        if ((icmp_ln10_fu_235_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_196_p4_assign_proc : process(c_0_reg_192, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln10_reg_966, c_reg_1055, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_196_p4 <= c_reg_1055;
        else 
            ap_phi_mux_c_0_phi_fu_196_p4 <= c_0_reg_192;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_163_p4_assign_proc : process(f_0_reg_159, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln10_reg_966, select_ln29_5_reg_985, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_163_p4 <= select_ln29_5_reg_985;
        else 
            ap_phi_mux_f_0_phi_fu_163_p4 <= f_0_reg_159;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten23_phi_fu_152_p4_assign_proc : process(indvar_flatten23_reg_148, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln10_reg_966, add_ln10_reg_970, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten23_phi_fu_152_p4 <= add_ln10_reg_970;
        else 
            ap_phi_mux_indvar_flatten23_phi_fu_152_p4 <= indvar_flatten23_reg_148;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_174_p4_assign_proc : process(indvar_flatten_reg_170, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln10_reg_966, select_ln13_4_reg_1060, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_174_p4 <= select_ln13_4_reg_1060;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_174_p4 <= indvar_flatten_reg_170;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_185_p4_assign_proc : process(r_0_reg_181, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln10_reg_966, select_ln13_1_reg_1025, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_966 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_185_p4 <= select_ln13_1_reg_1025;
        else 
            ap_phi_mux_r_0_phi_fu_185_p4 <= r_0_reg_181;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_1_fu_683_p1 <= conv_out_load_1_reg_1070;
    bitcast_ln29_2_fu_700_p1 <= select_ln29_reg_1077;
    bitcast_ln29_3_fu_772_p1 <= conv_out_load_2_reg_1084;
    bitcast_ln29_4_fu_789_p1 <= select_ln29_1_reg_1096;
    bitcast_ln29_5_fu_861_p1 <= reg_214;
    bitcast_ln29_6_fu_879_p1 <= select_ln29_2_reg_1103;
    bitcast_ln29_fu_628_p1 <= reg_214;
    c_fu_613_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln13_reg_1002));

    conv_out_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln29_6_fu_447_p1, ap_block_pp0_stage1, zext_ln29_8_fu_624_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_out_address0 <= zext_ln29_8_fu_624_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            conv_out_address0 <= zext_ln29_6_fu_447_p1(12 - 1 downto 0);
        else 
            conv_out_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln29_11_fu_537_p1, zext_ln29_13_fu_679_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_out_address1 <= zext_ln29_13_fu_679_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            conv_out_address1 <= zext_ln29_11_fu_537_p1(12 - 1 downto 0);
        else 
            conv_out_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_out_ce1 <= ap_const_logic_1;
        else 
            conv_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_247_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_f_0_phi_fu_163_p4));

    grp_fu_203_p0_assign_proc : process(conv_out_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, conv_out_load_1_reg_1070, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_203_p0 <= conv_out_load_1_reg_1070;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_203_p0 <= conv_out_q0;
            else 
                grp_fu_203_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_203_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_203_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln29_fu_670_p3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_203_p1 <= select_ln29_fu_670_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_203_p1 <= ap_const_lv32_800000;
            else 
                grp_fu_203_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_203_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_209_p0_assign_proc : process(conv_out_q1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, conv_out_load_2_reg_1084, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_209_p0 <= conv_out_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_209_p0 <= conv_out_load_2_reg_1084;
            else 
                grp_fu_209_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_209_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_209_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, select_ln29_1_fu_765_p3, select_ln29_2_fu_854_p3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_209_p1 <= select_ln29_2_fu_854_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_209_p1 <= select_ln29_1_fu_765_p3;
            else 
                grp_fu_209_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_209_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_956_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_956_p1 <= grp_fu_956_p10(4 - 1 downto 0);
    grp_fu_956_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_1_fu_381_p3),8));
    grp_fu_956_p2 <= grp_fu_956_p20(4 - 1 downto 0);
    grp_fu_956_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_reg_1002),8));
    icmp_ln10_fu_235_p2 <= "1" when (ap_phi_mux_indvar_flatten23_phi_fu_152_p4 = ap_const_lv10_3F6) else "0";
    icmp_ln13_fu_253_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_174_p4 = ap_const_lv8_A9) else "0";
    icmp_ln16_fu_297_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_196_p4 = ap_const_lv4_D) else "0";
    icmp_ln29_10_fu_896_p2 <= "0" when (tmp_10_fu_865_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_11_fu_902_p2 <= "1" when (trunc_ln29_5_fu_875_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_12_fu_914_p2 <= "0" when (tmp_11_fu_882_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_13_fu_920_p2 <= "1" when (trunc_ln29_6_fu_892_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_1_fu_652_p2 <= "1" when (trunc_ln29_fu_642_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_717_p2 <= "0" when (tmp_5_fu_686_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_723_p2 <= "1" when (trunc_ln29_1_fu_696_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_4_fu_735_p2 <= "0" when (tmp_6_fu_703_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_5_fu_741_p2 <= "1" when (trunc_ln29_2_fu_713_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_6_fu_806_p2 <= "0" when (tmp_8_fu_775_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_7_fu_812_p2 <= "1" when (trunc_ln29_3_fu_785_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_8_fu_824_p2 <= "0" when (tmp_9_fu_792_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_9_fu_830_p2 <= "1" when (trunc_ln29_4_fu_802_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_646_p2 <= "0" when (tmp_3_fu_632_p4 = ap_const_lv8_FF) else "1";
    max_pool_out_address0 <= zext_ln36_3_fu_952_p1(10 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= 
        reg_214 when (and_ln29_6_fu_938_p2(0) = '1') else 
        select_ln29_2_reg_1103;

    max_pool_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln10_reg_966_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((icmp_ln10_reg_966_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln29_1_fu_393_p1 <= mul_ln29_1_fu_393_p10(5 - 1 downto 0);
    mul_ln29_1_fu_393_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_3_reg_1015),10));
    mul_ln29_1_fu_393_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln29_1_fu_393_p1), 10));
    mul_ln29_fu_349_p1 <= mul_ln29_fu_349_p10(5 - 1 downto 0);
    mul_ln29_fu_349_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_fu_337_p3),10));
    mul_ln29_fu_349_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln29_fu_349_p1), 10));
    or_ln13_fu_315_p2 <= (icmp_ln13_fu_253_p2 or and_ln29_7_fu_303_p2);
    or_ln26_1_fu_355_p2 <= (shl_ln26_mid1_fu_329_p3 or ap_const_lv5_1);
    or_ln26_fu_229_p2 <= (shl_ln_fu_221_p3 or ap_const_lv5_1);
    or_ln27_fu_490_p2 <= (shl_ln1_fu_399_p3 or ap_const_lv5_1);
    or_ln29_1_fu_729_p2 <= (icmp_ln29_3_fu_723_p2 or icmp_ln29_2_fu_717_p2);
    or_ln29_2_fu_747_p2 <= (icmp_ln29_5_fu_741_p2 or icmp_ln29_4_fu_735_p2);
    or_ln29_3_fu_818_p2 <= (icmp_ln29_7_fu_812_p2 or icmp_ln29_6_fu_806_p2);
    or_ln29_4_fu_836_p2 <= (icmp_ln29_9_fu_830_p2 or icmp_ln29_8_fu_824_p2);
    or_ln29_5_fu_908_p2 <= (icmp_ln29_11_fu_902_p2 or icmp_ln29_10_fu_896_p2);
    or_ln29_6_fu_926_p2 <= (icmp_ln29_13_fu_920_p2 or icmp_ln29_12_fu_914_p2);
    or_ln29_fu_658_p2 <= (icmp_ln29_fu_646_p2 or icmp_ln29_1_fu_652_p2);
    p_shl2_cast_fu_548_p3 <= (add_ln29_6_fu_542_p2 & ap_const_lv3_0);
    p_shl4_cast_fu_505_p3 <= (add_ln29_4_fu_500_p2 & ap_const_lv3_0);
    p_shl6_cast_fu_458_p3 <= (add_ln29_2_fu_452_p2 & ap_const_lv3_0);
    p_shl8_cast_fu_415_p3 <= (add_ln29_fu_410_p2 & ap_const_lv3_0);
    p_shl_cast_fu_583_p3 <= (grp_fu_956_p3 & ap_const_lv3_0);
    r_fu_309_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln29_4_fu_259_p3));
    select_ln13_1_fu_381_p3 <= 
        r_reg_997 when (and_ln29_7_reg_992(0) = '1') else 
        select_ln29_4_reg_980;
    select_ln13_2_fu_337_p3 <= 
        shl_ln26_mid1_fu_329_p3 when (and_ln29_7_fu_303_p2(0) = '1') else 
        select_ln29_6_fu_275_p3;
    select_ln13_3_fu_361_p3 <= 
        or_ln26_1_fu_355_p2 when (and_ln29_7_fu_303_p2(0) = '1') else 
        select_ln29_7_fu_283_p3;
    select_ln13_4_fu_618_p3 <= 
        ap_const_lv8_1 when (icmp_ln13_reg_975(0) = '1') else 
        add_ln13_reg_1020;
    select_ln13_fu_321_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_315_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_196_p4;
    select_ln29_1_fu_765_p3 <= 
        conv_out_load_1_reg_1070 when (and_ln29_2_fu_759_p2(0) = '1') else 
        select_ln29_reg_1077;
    select_ln29_2_fu_854_p3 <= 
        conv_out_load_2_reg_1084 when (and_ln29_4_fu_848_p2(0) = '1') else 
        select_ln29_1_reg_1096;
    select_ln29_4_fu_259_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_253_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_185_p4;
    select_ln29_5_fu_267_p3 <= 
        f_fu_247_p2 when (icmp_ln13_fu_253_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_163_p4;
    select_ln29_6_fu_275_p3 <= 
        ap_const_lv5_0 when (icmp_ln13_fu_253_p2(0) = '1') else 
        shl_ln_fu_221_p3;
    select_ln29_7_fu_283_p3 <= 
        ap_const_lv5_1 when (icmp_ln13_fu_253_p2(0) = '1') else 
        or_ln26_fu_229_p2;
    select_ln29_fu_670_p3 <= 
        reg_214 when (and_ln29_fu_664_p2(0) = '1') else 
        ap_const_lv32_800000;
    shl_ln1_fu_399_p3 <= (select_ln13_reg_1002 & ap_const_lv1_0);
    shl_ln26_mid1_fu_329_p3 <= (r_fu_309_p2 & ap_const_lv1_0);
    shl_ln_fu_221_p3 <= (ap_phi_mux_r_0_phi_fu_185_p4 & ap_const_lv1_0);
    sub_ln29_1_fu_478_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_458_p3) - unsigned(zext_ln29_7_fu_474_p1));
    sub_ln29_2_fu_525_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_505_p3) - unsigned(zext_ln29_10_fu_521_p1));
    sub_ln29_3_fu_568_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_548_p3) - unsigned(zext_ln29_12_fu_564_p1));
    sub_ln29_fu_435_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_415_p3) - unsigned(zext_ln29_5_fu_431_p1));
    sub_ln36_fu_601_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_583_p3) - unsigned(zext_ln36_2_fu_597_p1));
    tmp_10_fu_865_p4 <= bitcast_ln29_5_fu_861_p1(30 downto 23);
    tmp_11_fu_882_p4 <= bitcast_ln29_6_fu_879_p1(30 downto 23);
    tmp_13_fu_513_p3 <= (add_ln29_4_fu_500_p2 & ap_const_lv1_0);
    tmp_14_fu_556_p3 <= (add_ln29_6_fu_542_p2 & ap_const_lv1_0);
    tmp_15_fu_590_p3 <= (grp_fu_956_p3 & ap_const_lv1_0);
    tmp_1_fu_466_p3 <= (add_ln29_2_fu_452_p2 & ap_const_lv1_0);
    tmp_3_fu_632_p4 <= bitcast_ln29_fu_628_p1(30 downto 23);
    tmp_5_fu_686_p4 <= bitcast_ln29_1_fu_683_p1(30 downto 23);
    tmp_6_fu_703_p4 <= bitcast_ln29_2_fu_700_p1(30 downto 23);
    tmp_8_fu_775_p4 <= bitcast_ln29_3_fu_772_p1(30 downto 23);
    tmp_9_fu_792_p4 <= bitcast_ln29_4_fu_789_p1(30 downto 23);
    tmp_fu_423_p3 <= (add_ln29_fu_410_p2 & ap_const_lv1_0);
    trunc_ln29_1_fu_696_p1 <= bitcast_ln29_1_fu_683_p1(23 - 1 downto 0);
    trunc_ln29_2_fu_713_p1 <= bitcast_ln29_2_fu_700_p1(23 - 1 downto 0);
    trunc_ln29_3_fu_785_p1 <= bitcast_ln29_3_fu_772_p1(23 - 1 downto 0);
    trunc_ln29_4_fu_802_p1 <= bitcast_ln29_4_fu_789_p1(23 - 1 downto 0);
    trunc_ln29_5_fu_875_p1 <= bitcast_ln29_5_fu_861_p1(23 - 1 downto 0);
    trunc_ln29_6_fu_892_p1 <= bitcast_ln29_6_fu_879_p1(23 - 1 downto 0);
    trunc_ln29_fu_642_p1 <= bitcast_ln29_fu_628_p1(23 - 1 downto 0);
    xor_ln29_fu_291_p2 <= (icmp_ln13_fu_253_p2 xor ap_const_lv1_1);
    zext_ln29_10_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_513_p3),13));
    zext_ln29_11_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_5_fu_531_p2),64));
    zext_ln29_12_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_556_p3),13));
    zext_ln29_13_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_7_reg_1045_pp0_iter1_reg),64));
    zext_ln29_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_reg_985),13));
    zext_ln29_4_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_399_p3),10));
    zext_ln29_5_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_423_p3),13));
    zext_ln29_6_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_fu_441_p2),64));
    zext_ln29_7_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_466_p3),13));
    zext_ln29_8_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_3_reg_1035),64));
    zext_ln29_9_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_490_p2),10));
    zext_ln29_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_reg_985),11));
    zext_ln36_2_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_590_p3),11));
    zext_ln36_3_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_reg_1050_pp0_iter2_reg),64));
end behav;
