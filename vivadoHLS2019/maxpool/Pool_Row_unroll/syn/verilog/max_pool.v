// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.580250,HLS_SYN_LAT=15379,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=246,HLS_SYN_LUT=883,HLS_VERSION=2019_1}" *)

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [9:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] conv_out_address0;
reg conv_out_ce0;
reg max_pool_out_ce0;
reg max_pool_out_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_219;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire   [2:0] f_fu_230_p2;
reg   [2:0] f_reg_681;
wire    ap_CS_fsm_state2;
wire   [12:0] zext_ln13_fu_236_p1;
reg   [12:0] zext_ln13_reg_686;
wire   [0:0] icmp_ln10_fu_224_p2;
wire   [10:0] zext_ln13_1_fu_240_p1;
reg   [10:0] zext_ln13_1_reg_692;
wire   [7:0] add_ln13_fu_244_p2;
reg   [7:0] add_ln13_reg_697;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_256_p2;
reg   [3:0] r_reg_705;
wire   [9:0] mul_ln29_fu_274_p2;
reg   [9:0] mul_ln29_reg_710;
wire   [0:0] icmp_ln13_fu_250_p2;
wire   [9:0] mul_ln29_1_fu_290_p2;
reg   [9:0] mul_ln29_1_reg_715;
wire   [3:0] c_fu_302_p2;
reg   [3:0] c_reg_723;
wire    ap_CS_fsm_state4;
wire   [4:0] shl_ln1_fu_308_p3;
reg   [4:0] shl_ln1_reg_728;
wire   [0:0] icmp_ln16_fu_296_p2;
wire   [1:0] add_ln23_fu_326_p2;
reg   [1:0] add_ln23_reg_737;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln23_fu_320_p2;
wire   [31:0] select_ln29_fu_466_p3;
wire    ap_CS_fsm_state7;
wire   [1:0] add_ln23_1_fu_484_p2;
reg   [1:0] add_ln23_1_reg_755;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln23_1_fu_478_p2;
wire   [31:0] select_ln29_1_fu_670_p3;
wire    ap_CS_fsm_state10;
reg   [2:0] f_0_reg_120;
reg   [3:0] r_0_reg_131;
reg   [7:0] phi_mul_reg_142;
reg   [3:0] c_0_reg_154;
reg   [31:0] max_1_0_reg_166;
reg   [1:0] mpc_0_0_reg_178;
reg   [31:0] max_1_1_reg_189;
reg   [1:0] mpc_0_1_reg_201;
wire   [63:0] zext_ln29_4_fu_377_p1;
wire   [63:0] zext_ln29_7_fu_535_p1;
wire   [63:0] zext_ln36_2_fu_581_p1;
reg   [31:0] grp_fu_212_p1;
wire   [4:0] shl_ln_fu_262_p3;
wire   [4:0] mul_ln29_fu_274_p0;
wire   [4:0] or_ln26_fu_280_p2;
wire   [4:0] mul_ln29_1_fu_290_p0;
wire   [4:0] zext_ln23_fu_316_p1;
wire   [4:0] add_ln27_fu_332_p2;
wire   [9:0] zext_ln29_2_fu_337_p1;
wire   [9:0] add_ln29_fu_341_p2;
wire   [10:0] tmp_10_fu_354_p3;
wire   [12:0] p_shl_cast_fu_346_p3;
wire   [12:0] zext_ln29_3_fu_362_p1;
wire   [12:0] sub_ln29_fu_366_p2;
wire   [12:0] add_ln29_1_fu_372_p2;
wire   [31:0] bitcast_ln29_fu_382_p1;
wire   [31:0] bitcast_ln29_1_fu_400_p1;
wire   [7:0] tmp_1_fu_386_p4;
wire   [22:0] trunc_ln29_fu_396_p1;
wire   [0:0] icmp_ln29_1_fu_424_p2;
wire   [0:0] icmp_ln29_fu_418_p2;
wire   [7:0] tmp_5_fu_404_p4;
wire   [22:0] trunc_ln29_1_fu_414_p1;
wire   [0:0] icmp_ln29_3_fu_442_p2;
wire   [0:0] icmp_ln29_2_fu_436_p2;
wire   [0:0] or_ln29_fu_430_p2;
wire   [0:0] or_ln29_1_fu_448_p2;
wire   [0:0] and_ln29_fu_454_p2;
wire   [0:0] grp_fu_212_p2;
wire   [0:0] and_ln29_1_fu_460_p2;
wire   [4:0] zext_ln23_1_fu_474_p1;
wire   [4:0] add_ln27_1_fu_490_p2;
wire   [9:0] zext_ln29_5_fu_495_p1;
wire   [9:0] add_ln29_2_fu_499_p2;
wire   [10:0] tmp_12_fu_512_p3;
wire   [12:0] p_shl4_cast_fu_504_p3;
wire   [12:0] zext_ln29_6_fu_520_p1;
wire   [12:0] sub_ln29_1_fu_524_p2;
wire   [12:0] add_ln29_3_fu_530_p2;
wire   [7:0] zext_ln36_fu_540_p1;
wire   [7:0] add_ln36_fu_544_p2;
wire   [8:0] tmp_11_fu_558_p3;
wire   [10:0] p_shl2_cast_fu_550_p3;
wire   [10:0] zext_ln36_1_fu_566_p1;
wire   [10:0] sub_ln36_fu_570_p2;
wire   [10:0] add_ln36_1_fu_576_p2;
wire   [31:0] bitcast_ln29_2_fu_586_p1;
wire   [31:0] bitcast_ln29_3_fu_604_p1;
wire   [7:0] tmp_7_fu_590_p4;
wire   [22:0] trunc_ln29_2_fu_600_p1;
wire   [0:0] icmp_ln29_5_fu_628_p2;
wire   [0:0] icmp_ln29_4_fu_622_p2;
wire   [7:0] tmp_8_fu_608_p4;
wire   [22:0] trunc_ln29_3_fu_618_p1;
wire   [0:0] icmp_ln29_7_fu_646_p2;
wire   [0:0] icmp_ln29_6_fu_640_p2;
wire   [0:0] or_ln29_2_fu_634_p2;
wire   [0:0] or_ln29_3_fu_652_p2;
wire   [0:0] and_ln29_2_fu_658_p2;
wire   [0:0] and_ln29_3_fu_664_p2;
reg   [9:0] ap_NS_fsm;
wire   [9:0] mul_ln29_1_fu_290_p00;
wire   [9:0] mul_ln29_fu_274_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

max_pool_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_fcmp_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_out_q0),
    .din1(grp_fu_212_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_212_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln23_1_fu_478_p2 == 1'd1))) begin
        c_0_reg_154 <= c_reg_723;
    end else if (((icmp_ln13_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_154 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_120 <= f_reg_681;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_120 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_1_0_reg_166 <= select_ln29_fu_466_p3;
    end else if (((icmp_ln16_fu_296_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_1_0_reg_166 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        max_1_1_reg_189 <= select_ln29_1_fu_670_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln23_fu_320_p2 == 1'd1))) begin
        max_1_1_reg_189 <= max_1_0_reg_166;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mpc_0_0_reg_178 <= add_ln23_reg_737;
    end else if (((icmp_ln16_fu_296_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpc_0_0_reg_178 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mpc_0_1_reg_201 <= add_ln23_1_reg_755;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln23_fu_320_p2 == 1'd1))) begin
        mpc_0_1_reg_201 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_142 <= add_ln13_reg_697;
    end else if (((icmp_ln10_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_142 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_131 <= r_reg_705;
    end else if (((icmp_ln10_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_131 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_697 <= add_ln13_fu_244_p2;
        r_reg_705 <= r_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln23_1_reg_755 <= add_ln23_1_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln23_reg_737 <= add_ln23_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_723 <= c_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_681 <= f_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mul_ln29_1_reg_715[9 : 1] <= mul_ln29_1_fu_290_p2[9 : 1];
        mul_ln29_reg_710[9 : 1] <= mul_ln29_fu_274_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_219 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_296_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln1_reg_728[4 : 1] <= shl_ln1_fu_308_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_692[2 : 0] <= zext_ln13_1_fu_240_p1[2 : 0];
        zext_ln13_reg_686[2 : 0] <= zext_ln13_fu_236_p1[2 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_out_address0 = zext_ln29_7_fu_535_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_out_address0 = zext_ln29_4_fu_377_p1;
    end else begin
        conv_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_212_p1 = max_1_1_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_212_p1 = max_1_0_reg_166;
    end else begin
        grp_fu_212_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln23_1_fu_478_p2 == 1'd1))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln23_fu_320_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln23_1_fu_478_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_244_p2 = (phi_mul_reg_142 + 8'd13);

assign add_ln23_1_fu_484_p2 = (mpc_0_1_reg_201 + 2'd1);

assign add_ln23_fu_326_p2 = (mpc_0_0_reg_178 + 2'd1);

assign add_ln27_1_fu_490_p2 = (zext_ln23_1_fu_474_p1 + shl_ln1_reg_728);

assign add_ln27_fu_332_p2 = (zext_ln23_fu_316_p1 + shl_ln1_reg_728);

assign add_ln29_1_fu_372_p2 = (sub_ln29_fu_366_p2 + zext_ln13_reg_686);

assign add_ln29_2_fu_499_p2 = (mul_ln29_1_reg_715 + zext_ln29_5_fu_495_p1);

assign add_ln29_3_fu_530_p2 = (sub_ln29_1_fu_524_p2 + zext_ln13_reg_686);

assign add_ln29_fu_341_p2 = (mul_ln29_reg_710 + zext_ln29_2_fu_337_p1);

assign add_ln36_1_fu_576_p2 = (zext_ln13_1_reg_692 + sub_ln36_fu_570_p2);

assign add_ln36_fu_544_p2 = (zext_ln36_fu_540_p1 + phi_mul_reg_142);

assign and_ln29_1_fu_460_p2 = (grp_fu_212_p2 & and_ln29_fu_454_p2);

assign and_ln29_2_fu_658_p2 = (or_ln29_3_fu_652_p2 & or_ln29_2_fu_634_p2);

assign and_ln29_3_fu_664_p2 = (grp_fu_212_p2 & and_ln29_2_fu_658_p2);

assign and_ln29_fu_454_p2 = (or_ln29_fu_430_p2 & or_ln29_1_fu_448_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln29_1_fu_400_p1 = max_1_0_reg_166;

assign bitcast_ln29_2_fu_586_p1 = reg_219;

assign bitcast_ln29_3_fu_604_p1 = max_1_1_reg_189;

assign bitcast_ln29_fu_382_p1 = reg_219;

assign c_fu_302_p2 = (c_0_reg_154 + 4'd1);

assign f_fu_230_p2 = (f_0_reg_120 + 3'd1);

assign icmp_ln10_fu_224_p2 = ((f_0_reg_120 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_250_p2 = ((r_0_reg_131 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_296_p2 = ((c_0_reg_154 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_478_p2 = ((mpc_0_1_reg_201 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_320_p2 = ((mpc_0_0_reg_178 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_424_p2 = ((trunc_ln29_fu_396_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_436_p2 = ((tmp_5_fu_404_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_442_p2 = ((trunc_ln29_1_fu_414_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_622_p2 = ((tmp_7_fu_590_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_628_p2 = ((trunc_ln29_2_fu_600_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_640_p2 = ((tmp_8_fu_608_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_646_p2 = ((trunc_ln29_3_fu_618_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_418_p2 = ((tmp_1_fu_386_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln36_2_fu_581_p1;

assign max_pool_out_d0 = max_1_1_reg_189;

assign mul_ln29_1_fu_290_p0 = mul_ln29_1_fu_290_p00;

assign mul_ln29_1_fu_290_p00 = or_ln26_fu_280_p2;

assign mul_ln29_1_fu_290_p2 = (mul_ln29_1_fu_290_p0 * $signed('h1A));

assign mul_ln29_fu_274_p0 = mul_ln29_fu_274_p00;

assign mul_ln29_fu_274_p00 = shl_ln_fu_262_p3;

assign mul_ln29_fu_274_p2 = (mul_ln29_fu_274_p0 * $signed('h1A));

assign or_ln26_fu_280_p2 = (shl_ln_fu_262_p3 | 5'd1);

assign or_ln29_1_fu_448_p2 = (icmp_ln29_3_fu_442_p2 | icmp_ln29_2_fu_436_p2);

assign or_ln29_2_fu_634_p2 = (icmp_ln29_5_fu_628_p2 | icmp_ln29_4_fu_622_p2);

assign or_ln29_3_fu_652_p2 = (icmp_ln29_7_fu_646_p2 | icmp_ln29_6_fu_640_p2);

assign or_ln29_fu_430_p2 = (icmp_ln29_fu_418_p2 | icmp_ln29_1_fu_424_p2);

assign p_shl2_cast_fu_550_p3 = {{add_ln36_fu_544_p2}, {3'd0}};

assign p_shl4_cast_fu_504_p3 = {{add_ln29_2_fu_499_p2}, {3'd0}};

assign p_shl_cast_fu_346_p3 = {{add_ln29_fu_341_p2}, {3'd0}};

assign r_fu_256_p2 = (r_0_reg_131 + 4'd1);

assign select_ln29_1_fu_670_p3 = ((and_ln29_3_fu_664_p2[0:0] === 1'b1) ? reg_219 : max_1_1_reg_189);

assign select_ln29_fu_466_p3 = ((and_ln29_1_fu_460_p2[0:0] === 1'b1) ? reg_219 : max_1_0_reg_166);

assign shl_ln1_fu_308_p3 = {{c_0_reg_154}, {1'd0}};

assign shl_ln_fu_262_p3 = {{r_0_reg_131}, {1'd0}};

assign sub_ln29_1_fu_524_p2 = (p_shl4_cast_fu_504_p3 - zext_ln29_6_fu_520_p1);

assign sub_ln29_fu_366_p2 = (p_shl_cast_fu_346_p3 - zext_ln29_3_fu_362_p1);

assign sub_ln36_fu_570_p2 = (p_shl2_cast_fu_550_p3 - zext_ln36_1_fu_566_p1);

assign tmp_10_fu_354_p3 = {{add_ln29_fu_341_p2}, {1'd0}};

assign tmp_11_fu_558_p3 = {{add_ln36_fu_544_p2}, {1'd0}};

assign tmp_12_fu_512_p3 = {{add_ln29_2_fu_499_p2}, {1'd0}};

assign tmp_1_fu_386_p4 = {{bitcast_ln29_fu_382_p1[30:23]}};

assign tmp_5_fu_404_p4 = {{bitcast_ln29_1_fu_400_p1[30:23]}};

assign tmp_7_fu_590_p4 = {{bitcast_ln29_2_fu_586_p1[30:23]}};

assign tmp_8_fu_608_p4 = {{bitcast_ln29_3_fu_604_p1[30:23]}};

assign trunc_ln29_1_fu_414_p1 = bitcast_ln29_1_fu_400_p1[22:0];

assign trunc_ln29_2_fu_600_p1 = bitcast_ln29_2_fu_586_p1[22:0];

assign trunc_ln29_3_fu_618_p1 = bitcast_ln29_3_fu_604_p1[22:0];

assign trunc_ln29_fu_396_p1 = bitcast_ln29_fu_382_p1[22:0];

assign zext_ln13_1_fu_240_p1 = f_0_reg_120;

assign zext_ln13_fu_236_p1 = f_0_reg_120;

assign zext_ln23_1_fu_474_p1 = mpc_0_1_reg_201;

assign zext_ln23_fu_316_p1 = mpc_0_0_reg_178;

assign zext_ln29_2_fu_337_p1 = add_ln27_fu_332_p2;

assign zext_ln29_3_fu_362_p1 = tmp_10_fu_354_p3;

assign zext_ln29_4_fu_377_p1 = add_ln29_1_fu_372_p2;

assign zext_ln29_5_fu_495_p1 = add_ln27_1_fu_490_p2;

assign zext_ln29_6_fu_520_p1 = tmp_12_fu_512_p3;

assign zext_ln29_7_fu_535_p1 = add_ln29_3_fu_530_p2;

assign zext_ln36_1_fu_566_p1 = tmp_11_fu_558_p3;

assign zext_ln36_2_fu_581_p1 = add_ln36_1_fu_576_p2;

assign zext_ln36_fu_540_p1 = c_0_reg_154;

always @ (posedge ap_clk) begin
    zext_ln13_reg_686[12:3] <= 10'b0000000000;
    zext_ln13_1_reg_692[10:3] <= 8'b00000000;
    mul_ln29_reg_710[0] <= 1'b0;
    mul_ln29_1_reg_715[0] <= 1'b0;
    shl_ln1_reg_728[0] <= 1'b0;
end

endmodule //max_pool
