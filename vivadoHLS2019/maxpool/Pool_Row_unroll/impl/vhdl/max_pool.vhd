-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.580250,HLS_SYN_LAT=15379,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=246,HLS_SYN_LUT=883,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal f_fu_230_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_681 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_236_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln13_reg_686 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln10_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_240_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13_1_reg_692 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln13_fu_244_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_697 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_fu_256_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_705 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln29_fu_274_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_reg_710 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln13_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln29_1_fu_290_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_1_reg_715 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_fu_302_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_723 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln1_fu_308_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_reg_728 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_fu_326_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln23_reg_737 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln23_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_466_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln23_1_fu_484_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln23_1_reg_755 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln23_1_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_1_fu_670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal f_0_reg_120 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_0_reg_131 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_1_0_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_0_reg_178 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_1_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_1_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln29_4_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_7_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_2_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_262_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_274_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln26_fu_280_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_1_fu_290_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_fu_316_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln27_fu_332_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_2_fu_337_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_354_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_346_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_3_fu_362_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_fu_366_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_1_fu_372_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_fu_382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_1_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_386_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_396_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_404_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_414_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_3_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln23_1_fu_474_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln27_1_fu_490_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_5_fu_495_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_2_fu_499_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_512_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_504_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_6_fu_520_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_1_fu_524_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_3_fu_530_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln36_fu_540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_fu_544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_558_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_550_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_1_fu_566_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln36_fu_570_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_1_fu_576_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln29_2_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_3_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_590_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_fu_600_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_5_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_4_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_608_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_3_fu_618_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_6_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_2_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_3_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_2_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_3_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_1_fu_290_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_fu_274_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component max_pool_fcmp_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_fcmp_32nbkb_U1 : component max_pool_fcmp_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_out_q0,
        din1 => grp_fu_212_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_212_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_1_fu_478_p2 = ap_const_lv1_1))) then 
                c_0_reg_154 <= c_reg_723;
            elsif (((icmp_ln13_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_154 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_120 <= f_reg_681;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_120 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_1_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                max_1_0_reg_166 <= select_ln29_fu_466_p3;
            elsif (((icmp_ln16_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_1_0_reg_166 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_1_1_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                max_1_1_reg_189 <= select_ln29_1_fu_670_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln23_fu_320_p2 = ap_const_lv1_1))) then 
                max_1_1_reg_189 <= max_1_0_reg_166;
            end if; 
        end if;
    end process;

    mpc_0_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                mpc_0_0_reg_178 <= add_ln23_reg_737;
            elsif (((icmp_ln16_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpc_0_0_reg_178 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpc_0_1_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                mpc_0_1_reg_201 <= add_ln23_1_reg_755;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln23_fu_320_p2 = ap_const_lv1_1))) then 
                mpc_0_1_reg_201 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_142 <= add_ln13_reg_697;
            elsif (((icmp_ln10_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_142 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_0_reg_131 <= r_reg_705;
            elsif (((icmp_ln10_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_131 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_reg_697 <= add_ln13_fu_244_p2;
                r_reg_705 <= r_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln23_1_reg_755 <= add_ln23_1_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln23_reg_737 <= add_ln23_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_723 <= c_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_681 <= f_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    mul_ln29_1_reg_715(9 downto 1) <= mul_ln29_1_fu_290_p2(9 downto 1);
                    mul_ln29_reg_710(9 downto 1) <= mul_ln29_fu_274_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_219 <= conv_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln1_reg_728(4 downto 1) <= shl_ln1_fu_308_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_1_reg_692(2 downto 0) <= zext_ln13_1_fu_240_p1(2 downto 0);
                    zext_ln13_reg_686(2 downto 0) <= zext_ln13_fu_236_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_686(12 downto 3) <= "0000000000";
    zext_ln13_1_reg_692(10 downto 3) <= "00000000";
    mul_ln29_reg_710(0) <= '0';
    mul_ln29_1_reg_715(0) <= '0';
    shl_ln1_reg_728(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_224_p2, ap_CS_fsm_state3, icmp_ln13_fu_250_p2, ap_CS_fsm_state4, icmp_ln16_fu_296_p2, ap_CS_fsm_state5, icmp_ln23_fu_320_p2, ap_CS_fsm_state8, icmp_ln23_1_fu_478_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln23_fu_320_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_1_fu_478_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln13_fu_244_p2 <= std_logic_vector(unsigned(phi_mul_reg_142) + unsigned(ap_const_lv8_D));
    add_ln23_1_fu_484_p2 <= std_logic_vector(unsigned(mpc_0_1_reg_201) + unsigned(ap_const_lv2_1));
    add_ln23_fu_326_p2 <= std_logic_vector(unsigned(mpc_0_0_reg_178) + unsigned(ap_const_lv2_1));
    add_ln27_1_fu_490_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_474_p1) + unsigned(shl_ln1_reg_728));
    add_ln27_fu_332_p2 <= std_logic_vector(unsigned(zext_ln23_fu_316_p1) + unsigned(shl_ln1_reg_728));
    add_ln29_1_fu_372_p2 <= std_logic_vector(unsigned(sub_ln29_fu_366_p2) + unsigned(zext_ln13_reg_686));
    add_ln29_2_fu_499_p2 <= std_logic_vector(unsigned(mul_ln29_1_reg_715) + unsigned(zext_ln29_5_fu_495_p1));
    add_ln29_3_fu_530_p2 <= std_logic_vector(unsigned(sub_ln29_1_fu_524_p2) + unsigned(zext_ln13_reg_686));
    add_ln29_fu_341_p2 <= std_logic_vector(unsigned(mul_ln29_reg_710) + unsigned(zext_ln29_2_fu_337_p1));
    add_ln36_1_fu_576_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_692) + unsigned(sub_ln36_fu_570_p2));
    add_ln36_fu_544_p2 <= std_logic_vector(unsigned(zext_ln36_fu_540_p1) + unsigned(phi_mul_reg_142));
    and_ln29_1_fu_460_p2 <= (grp_fu_212_p2 and and_ln29_fu_454_p2);
    and_ln29_2_fu_658_p2 <= (or_ln29_3_fu_652_p2 and or_ln29_2_fu_634_p2);
    and_ln29_3_fu_664_p2 <= (grp_fu_212_p2 and and_ln29_2_fu_658_p2);
    and_ln29_fu_454_p2 <= (or_ln29_fu_430_p2 and or_ln29_1_fu_448_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_224_p2)
    begin
        if (((icmp_ln10_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_224_p2)
    begin
        if (((icmp_ln10_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_1_fu_400_p1 <= max_1_0_reg_166;
    bitcast_ln29_2_fu_586_p1 <= reg_219;
    bitcast_ln29_3_fu_604_p1 <= max_1_1_reg_189;
    bitcast_ln29_fu_382_p1 <= reg_219;
    c_fu_302_p2 <= std_logic_vector(unsigned(c_0_reg_154) + unsigned(ap_const_lv4_1));

    conv_out_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln29_4_fu_377_p1, zext_ln29_7_fu_535_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_out_address0 <= zext_ln29_7_fu_535_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_out_address0 <= zext_ln29_4_fu_377_p1(12 - 1 downto 0);
        else 
            conv_out_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_230_p2 <= std_logic_vector(unsigned(f_0_reg_120) + unsigned(ap_const_lv3_1));

    grp_fu_212_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, max_1_0_reg_166, max_1_1_reg_189)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_212_p1 <= max_1_1_reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_212_p1 <= max_1_0_reg_166;
        else 
            grp_fu_212_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_224_p2 <= "1" when (f_0_reg_120 = ap_const_lv3_6) else "0";
    icmp_ln13_fu_250_p2 <= "1" when (r_0_reg_131 = ap_const_lv4_D) else "0";
    icmp_ln16_fu_296_p2 <= "1" when (c_0_reg_154 = ap_const_lv4_D) else "0";
    icmp_ln23_1_fu_478_p2 <= "1" when (mpc_0_1_reg_201 = ap_const_lv2_2) else "0";
    icmp_ln23_fu_320_p2 <= "1" when (mpc_0_0_reg_178 = ap_const_lv2_2) else "0";
    icmp_ln29_1_fu_424_p2 <= "1" when (trunc_ln29_fu_396_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_436_p2 <= "0" when (tmp_5_fu_404_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_442_p2 <= "1" when (trunc_ln29_1_fu_414_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_4_fu_622_p2 <= "0" when (tmp_7_fu_590_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_5_fu_628_p2 <= "1" when (trunc_ln29_2_fu_600_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_6_fu_640_p2 <= "0" when (tmp_8_fu_608_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_7_fu_646_p2 <= "1" when (trunc_ln29_3_fu_618_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_418_p2 <= "0" when (tmp_1_fu_386_p4 = ap_const_lv8_FF) else "1";
    max_pool_out_address0 <= zext_ln36_2_fu_581_p1(10 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= max_1_1_reg_189;

    max_pool_out_we0_assign_proc : process(ap_CS_fsm_state8, icmp_ln23_1_fu_478_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_1_fu_478_p2 = ap_const_lv1_1))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln29_1_fu_290_p0 <= mul_ln29_1_fu_290_p00(5 - 1 downto 0);
    mul_ln29_1_fu_290_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_280_p2),10));
    mul_ln29_1_fu_290_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln29_1_fu_290_p0) * unsigned(ap_const_lv10_1A), 10));
    mul_ln29_fu_274_p0 <= mul_ln29_fu_274_p00(5 - 1 downto 0);
    mul_ln29_fu_274_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_262_p3),10));
    mul_ln29_fu_274_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln29_fu_274_p0) * unsigned(ap_const_lv10_1A), 10));
    or_ln26_fu_280_p2 <= (shl_ln_fu_262_p3 or ap_const_lv5_1);
    or_ln29_1_fu_448_p2 <= (icmp_ln29_3_fu_442_p2 or icmp_ln29_2_fu_436_p2);
    or_ln29_2_fu_634_p2 <= (icmp_ln29_5_fu_628_p2 or icmp_ln29_4_fu_622_p2);
    or_ln29_3_fu_652_p2 <= (icmp_ln29_7_fu_646_p2 or icmp_ln29_6_fu_640_p2);
    or_ln29_fu_430_p2 <= (icmp_ln29_fu_418_p2 or icmp_ln29_1_fu_424_p2);
    p_shl2_cast_fu_550_p3 <= (add_ln36_fu_544_p2 & ap_const_lv3_0);
    p_shl4_cast_fu_504_p3 <= (add_ln29_2_fu_499_p2 & ap_const_lv3_0);
    p_shl_cast_fu_346_p3 <= (add_ln29_fu_341_p2 & ap_const_lv3_0);
    r_fu_256_p2 <= std_logic_vector(unsigned(r_0_reg_131) + unsigned(ap_const_lv4_1));
    select_ln29_1_fu_670_p3 <= 
        reg_219 when (and_ln29_3_fu_664_p2(0) = '1') else 
        max_1_1_reg_189;
    select_ln29_fu_466_p3 <= 
        reg_219 when (and_ln29_1_fu_460_p2(0) = '1') else 
        max_1_0_reg_166;
    shl_ln1_fu_308_p3 <= (c_0_reg_154 & ap_const_lv1_0);
    shl_ln_fu_262_p3 <= (r_0_reg_131 & ap_const_lv1_0);
    sub_ln29_1_fu_524_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_504_p3) - unsigned(zext_ln29_6_fu_520_p1));
    sub_ln29_fu_366_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_346_p3) - unsigned(zext_ln29_3_fu_362_p1));
    sub_ln36_fu_570_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_550_p3) - unsigned(zext_ln36_1_fu_566_p1));
    tmp_10_fu_354_p3 <= (add_ln29_fu_341_p2 & ap_const_lv1_0);
    tmp_11_fu_558_p3 <= (add_ln36_fu_544_p2 & ap_const_lv1_0);
    tmp_12_fu_512_p3 <= (add_ln29_2_fu_499_p2 & ap_const_lv1_0);
    tmp_1_fu_386_p4 <= bitcast_ln29_fu_382_p1(30 downto 23);
    tmp_5_fu_404_p4 <= bitcast_ln29_1_fu_400_p1(30 downto 23);
    tmp_7_fu_590_p4 <= bitcast_ln29_2_fu_586_p1(30 downto 23);
    tmp_8_fu_608_p4 <= bitcast_ln29_3_fu_604_p1(30 downto 23);
    trunc_ln29_1_fu_414_p1 <= bitcast_ln29_1_fu_400_p1(23 - 1 downto 0);
    trunc_ln29_2_fu_600_p1 <= bitcast_ln29_2_fu_586_p1(23 - 1 downto 0);
    trunc_ln29_3_fu_618_p1 <= bitcast_ln29_3_fu_604_p1(23 - 1 downto 0);
    trunc_ln29_fu_396_p1 <= bitcast_ln29_fu_382_p1(23 - 1 downto 0);
    zext_ln13_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_120),11));
    zext_ln13_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_120),13));
    zext_ln23_1_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpc_0_1_reg_201),5));
    zext_ln23_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpc_0_0_reg_178),5));
    zext_ln29_2_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_fu_332_p2),10));
    zext_ln29_3_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_354_p3),13));
    zext_ln29_4_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_fu_372_p2),64));
    zext_ln29_5_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_fu_490_p2),10));
    zext_ln29_6_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_512_p3),13));
    zext_ln29_7_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_3_fu_530_p2),64));
    zext_ln36_1_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_558_p3),11));
    zext_ln36_2_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_fu_576_p2),64));
    zext_ln36_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_154),8));
end behav;
