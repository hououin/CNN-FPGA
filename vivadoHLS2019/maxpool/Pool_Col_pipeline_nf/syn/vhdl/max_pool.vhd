-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.538400,HLS_SYN_LAT=14365,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=241,HLS_SYN_LUT=723,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mpc_0_reg_190 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_225_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_521 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_231_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln13_reg_526 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln10_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_235_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13_1_reg_531 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln13_fu_239_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_536 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_fu_251_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_544 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_257_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_549 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln13_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_271_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_557 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln1_fu_277_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_reg_562 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal mpr_fu_295_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_571 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln29_fu_310_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_reg_576 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln23_reg_581_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mpc_fu_368_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal max_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state7 : STD_LOGIC;
    signal f_0_reg_120 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_0_reg_131 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_0_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal mpr_0_reg_179 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_max_1_phi_fu_205_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln36_2_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_3_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_285_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_301_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_310_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln36_fu_316_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_fu_320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_334_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_326_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_1_fu_342_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln36_fu_346_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_1_fu_352_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_fu_374_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_378_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_1_fu_383_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_387_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_400_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_392_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_2_fu_408_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_fu_412_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_1_fu_418_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_1_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_431_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_441_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_1_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_449_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_459_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_3_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln29_fu_310_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component max_pool_fcmp_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_fcmp_32nbkb_U1 : component max_pool_fcmp_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_out_q0,
        din1 => ap_phi_mux_max_1_phi_fu_205_p4,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_213_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln23_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln20_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((icmp_ln20_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state7) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state7) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln20_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                c_0_reg_154 <= c_reg_557;
            elsif (((icmp_ln13_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_154 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_120 <= f_reg_521;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_120 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                max_0_reg_166 <= max_1_reg_201;
            elsif (((icmp_ln16_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_0_reg_166 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_1_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_581_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                max_1_reg_201 <= max_2_fu_511_p3;
            elsif (((icmp_ln20_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_1_reg_201 <= max_0_reg_166;
            end if; 
        end if;
    end process;

    mpc_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                mpc_0_reg_190 <= mpc_fu_368_p2;
            elsif (((icmp_ln20_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                mpc_0_reg_190 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                mpr_0_reg_179 <= mpr_reg_571;
            elsif (((icmp_ln16_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpr_0_reg_179 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_142 <= add_ln13_reg_536;
            elsif (((icmp_ln10_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_142 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_0_reg_131 <= r_reg_544;
            elsif (((icmp_ln10_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_131 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_reg_536 <= add_ln13_fu_239_p2;
                r_reg_544 <= r_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_557 <= c_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_521 <= f_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln23_reg_581 <= icmp_ln23_fu_362_p2;
                icmp_ln23_reg_581_pp0_iter1_reg <= icmp_ln23_reg_581;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_581 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                max_reg_595 <= conv_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mpr_reg_571 <= mpr_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    mul_ln29_reg_576(9 downto 1) <= mul_ln29_fu_310_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln1_reg_562(4 downto 1) <= shl_ln1_fu_277_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln_reg_549(4 downto 1) <= shl_ln_fu_257_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_1_reg_531(2 downto 0) <= zext_ln13_1_fu_235_p1(2 downto 0);
                    zext_ln13_reg_526(2 downto 0) <= zext_ln13_fu_231_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_526(12 downto 3) <= "0000000000";
    zext_ln13_1_reg_531(10 downto 3) <= "00000000";
    shl_ln_reg_549(0) <= '0';
    shl_ln1_reg_562(0) <= '0';
    mul_ln29_reg_576(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_219_p2, ap_CS_fsm_state3, icmp_ln13_fu_245_p2, ap_CS_fsm_state4, icmp_ln16_fu_265_p2, icmp_ln20_fu_289_p2, ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln20_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln13_fu_239_p2 <= std_logic_vector(unsigned(phi_mul_reg_142) + unsigned(ap_const_lv8_D));
    add_ln29_1_fu_418_p2 <= std_logic_vector(unsigned(sub_ln29_fu_412_p2) + unsigned(zext_ln13_reg_526));
    add_ln29_fu_387_p2 <= std_logic_vector(unsigned(mul_ln29_reg_576) + unsigned(zext_ln29_1_fu_383_p1));
    add_ln36_1_fu_352_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_531) + unsigned(sub_ln36_fu_346_p2));
    add_ln36_fu_320_p2 <= std_logic_vector(unsigned(zext_ln36_fu_316_p1) + unsigned(phi_mul_reg_142));
    and_ln29_1_fu_505_p2 <= (grp_fu_213_p2 and and_ln29_fu_499_p2);
    and_ln29_fu_499_p2 <= (or_ln29_fu_475_p2 and or_ln29_1_fu_493_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_219_p2)
    begin
        if (((icmp_ln10_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_max_1_phi_fu_205_p4_assign_proc : process(max_1_reg_201, icmp_ln23_reg_581_pp0_iter1_reg, max_2_fu_511_p3, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_581_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_max_1_phi_fu_205_p4 <= max_2_fu_511_p3;
        else 
            ap_phi_mux_max_1_phi_fu_205_p4 <= max_1_reg_201;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_219_p2)
    begin
        if (((icmp_ln10_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_1_fu_445_p1 <= max_1_reg_201;
    bitcast_ln29_fu_428_p1 <= max_reg_595;
    c_fu_271_p2 <= std_logic_vector(unsigned(c_0_reg_154) + unsigned(ap_const_lv4_1));
    conv_out_address0 <= zext_ln29_3_fu_423_p1(12 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_225_p2 <= std_logic_vector(unsigned(f_0_reg_120) + unsigned(ap_const_lv3_1));
    i_fu_301_p2 <= std_logic_vector(unsigned(zext_ln20_fu_285_p1) + unsigned(shl_ln_reg_549));
    icmp_ln10_fu_219_p2 <= "1" when (f_0_reg_120 = ap_const_lv3_6) else "0";
    icmp_ln13_fu_245_p2 <= "1" when (r_0_reg_131 = ap_const_lv4_D) else "0";
    icmp_ln16_fu_265_p2 <= "1" when (c_0_reg_154 = ap_const_lv4_D) else "0";
    icmp_ln20_fu_289_p2 <= "1" when (mpr_0_reg_179 = ap_const_lv2_2) else "0";
    icmp_ln23_fu_362_p2 <= "1" when (mpc_0_reg_190 = ap_const_lv2_2) else "0";
    icmp_ln29_1_fu_469_p2 <= "1" when (trunc_ln29_fu_441_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_481_p2 <= "0" when (tmp_6_fu_449_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_487_p2 <= "1" when (trunc_ln29_1_fu_459_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_463_p2 <= "0" when (tmp_fu_431_p4 = ap_const_lv8_FF) else "1";
    j_fu_378_p2 <= std_logic_vector(unsigned(zext_ln23_fu_374_p1) + unsigned(shl_ln1_reg_562));
    max_2_fu_511_p3 <= 
        max_reg_595 when (and_ln29_1_fu_505_p2(0) = '1') else 
        max_1_reg_201;
    max_pool_out_address0 <= zext_ln36_2_fu_357_p1(10 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= max_0_reg_166;

    max_pool_out_we0_assign_proc : process(icmp_ln20_fu_289_p2, ap_CS_fsm_state5)
    begin
        if (((icmp_ln20_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_368_p2 <= std_logic_vector(unsigned(mpc_0_reg_190) + unsigned(ap_const_lv2_1));
    mpr_fu_295_p2 <= std_logic_vector(unsigned(mpr_0_reg_179) + unsigned(ap_const_lv2_1));
    mul_ln29_fu_310_p0 <= mul_ln29_fu_310_p00(5 - 1 downto 0);
    mul_ln29_fu_310_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_301_p2),10));
    mul_ln29_fu_310_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln29_fu_310_p0) * unsigned(ap_const_lv10_1A), 10));
    or_ln29_1_fu_493_p2 <= (icmp_ln29_3_fu_487_p2 or icmp_ln29_2_fu_481_p2);
    or_ln29_fu_475_p2 <= (icmp_ln29_fu_463_p2 or icmp_ln29_1_fu_469_p2);
    p_shl2_cast_fu_326_p3 <= (add_ln36_fu_320_p2 & ap_const_lv3_0);
    p_shl_cast_fu_392_p3 <= (add_ln29_fu_387_p2 & ap_const_lv3_0);
    r_fu_251_p2 <= std_logic_vector(unsigned(r_0_reg_131) + unsigned(ap_const_lv4_1));
    shl_ln1_fu_277_p3 <= (c_0_reg_154 & ap_const_lv1_0);
    shl_ln_fu_257_p3 <= (r_0_reg_131 & ap_const_lv1_0);
    sub_ln29_fu_412_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_392_p3) - unsigned(zext_ln29_2_fu_408_p1));
    sub_ln36_fu_346_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_326_p3) - unsigned(zext_ln36_1_fu_342_p1));
    tmp_6_fu_449_p4 <= bitcast_ln29_1_fu_445_p1(30 downto 23);
    tmp_8_fu_334_p3 <= (add_ln36_fu_320_p2 & ap_const_lv1_0);
    tmp_9_fu_400_p3 <= (add_ln29_fu_387_p2 & ap_const_lv1_0);
    tmp_fu_431_p4 <= bitcast_ln29_fu_428_p1(30 downto 23);
    trunc_ln29_1_fu_459_p1 <= bitcast_ln29_1_fu_445_p1(23 - 1 downto 0);
    trunc_ln29_fu_441_p1 <= bitcast_ln29_fu_428_p1(23 - 1 downto 0);
    zext_ln13_1_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_120),11));
    zext_ln13_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_120),13));
    zext_ln20_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpr_0_reg_179),5));
    zext_ln23_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpc_0_reg_190),5));
    zext_ln29_1_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_378_p2),10));
    zext_ln29_2_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_400_p3),13));
    zext_ln29_3_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_fu_418_p2),64));
    zext_ln36_1_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_334_p3),11));
    zext_ln36_2_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_fu_352_p2),64));
    zext_ln36_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_154),8));
end behav;
