// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_HH_
#define _max_pool_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "max_pool_fcmp_32nbkb.h"

namespace ap_rtl {

struct max_pool : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<12> > conv_out_address0;
    sc_out< sc_logic > conv_out_ce0;
    sc_in< sc_lv<32> > conv_out_q0;
    sc_out< sc_lv<10> > max_pool_out_address0;
    sc_out< sc_logic > max_pool_out_ce0;
    sc_out< sc_logic > max_pool_out_we0;
    sc_out< sc_lv<32> > max_pool_out_d0;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const1;


    // Module declarations
    max_pool(sc_module_name name);
    SC_HAS_PROCESS(max_pool);

    ~max_pool();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    max_pool_fcmp_32nbkb<1,2,32,32,1>* max_pool_fcmp_32nbkb_U1;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > mpc_0_reg_190;
    sc_signal< sc_lv<32> > max_1_reg_201;
    sc_signal< sc_lv<3> > f_fu_225_p2;
    sc_signal< sc_lv<3> > f_reg_521;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<13> > zext_ln13_fu_231_p1;
    sc_signal< sc_lv<13> > zext_ln13_reg_526;
    sc_signal< sc_lv<1> > icmp_ln10_fu_219_p2;
    sc_signal< sc_lv<11> > zext_ln13_1_fu_235_p1;
    sc_signal< sc_lv<11> > zext_ln13_1_reg_531;
    sc_signal< sc_lv<8> > add_ln13_fu_239_p2;
    sc_signal< sc_lv<8> > add_ln13_reg_536;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > r_fu_251_p2;
    sc_signal< sc_lv<4> > r_reg_544;
    sc_signal< sc_lv<5> > shl_ln_fu_257_p3;
    sc_signal< sc_lv<5> > shl_ln_reg_549;
    sc_signal< sc_lv<1> > icmp_ln13_fu_245_p2;
    sc_signal< sc_lv<4> > c_fu_271_p2;
    sc_signal< sc_lv<4> > c_reg_557;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<5> > shl_ln1_fu_277_p3;
    sc_signal< sc_lv<5> > shl_ln1_reg_562;
    sc_signal< sc_lv<1> > icmp_ln16_fu_265_p2;
    sc_signal< sc_lv<1> > icmp_ln20_fu_289_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<2> > mpr_fu_295_p2;
    sc_signal< sc_lv<2> > mpr_reg_571;
    sc_signal< sc_lv<10> > mul_ln29_fu_310_p2;
    sc_signal< sc_lv<10> > mul_ln29_reg_576;
    sc_signal< sc_lv<1> > icmp_ln23_fu_362_p2;
    sc_signal< sc_lv<1> > icmp_ln23_reg_581;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln23_reg_581_pp0_iter1_reg;
    sc_signal< sc_lv<2> > mpc_fu_368_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > max_reg_595;
    sc_signal< sc_lv<32> > max_2_fu_511_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter1_state7;
    sc_signal< sc_lv<3> > f_0_reg_120;
    sc_signal< sc_lv<4> > r_0_reg_131;
    sc_signal< sc_lv<8> > phi_mul_reg_142;
    sc_signal< sc_lv<4> > c_0_reg_154;
    sc_signal< sc_lv<32> > max_0_reg_166;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<2> > mpr_0_reg_179;
    sc_signal< sc_lv<32> > ap_phi_mux_max_1_phi_fu_205_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln36_2_fu_357_p1;
    sc_signal< sc_lv<64> > zext_ln29_3_fu_423_p1;
    sc_signal< sc_lv<5> > zext_ln20_fu_285_p1;
    sc_signal< sc_lv<5> > i_fu_301_p2;
    sc_signal< sc_lv<5> > mul_ln29_fu_310_p0;
    sc_signal< sc_lv<8> > zext_ln36_fu_316_p1;
    sc_signal< sc_lv<8> > add_ln36_fu_320_p2;
    sc_signal< sc_lv<9> > tmp_8_fu_334_p3;
    sc_signal< sc_lv<11> > p_shl2_cast_fu_326_p3;
    sc_signal< sc_lv<11> > zext_ln36_1_fu_342_p1;
    sc_signal< sc_lv<11> > sub_ln36_fu_346_p2;
    sc_signal< sc_lv<11> > add_ln36_1_fu_352_p2;
    sc_signal< sc_lv<5> > zext_ln23_fu_374_p1;
    sc_signal< sc_lv<5> > j_fu_378_p2;
    sc_signal< sc_lv<10> > zext_ln29_1_fu_383_p1;
    sc_signal< sc_lv<10> > add_ln29_fu_387_p2;
    sc_signal< sc_lv<11> > tmp_9_fu_400_p3;
    sc_signal< sc_lv<13> > p_shl_cast_fu_392_p3;
    sc_signal< sc_lv<13> > zext_ln29_2_fu_408_p1;
    sc_signal< sc_lv<13> > sub_ln29_fu_412_p2;
    sc_signal< sc_lv<13> > add_ln29_1_fu_418_p2;
    sc_signal< sc_lv<32> > bitcast_ln29_fu_428_p1;
    sc_signal< sc_lv<32> > bitcast_ln29_1_fu_445_p1;
    sc_signal< sc_lv<8> > tmp_fu_431_p4;
    sc_signal< sc_lv<23> > trunc_ln29_fu_441_p1;
    sc_signal< sc_lv<1> > icmp_ln29_1_fu_469_p2;
    sc_signal< sc_lv<1> > icmp_ln29_fu_463_p2;
    sc_signal< sc_lv<8> > tmp_6_fu_449_p4;
    sc_signal< sc_lv<23> > trunc_ln29_1_fu_459_p1;
    sc_signal< sc_lv<1> > icmp_ln29_3_fu_487_p2;
    sc_signal< sc_lv<1> > icmp_ln29_2_fu_481_p2;
    sc_signal< sc_lv<1> > or_ln29_fu_475_p2;
    sc_signal< sc_lv<1> > or_ln29_1_fu_493_p2;
    sc_signal< sc_lv<1> > and_ln29_fu_499_p2;
    sc_signal< sc_lv<1> > grp_fu_213_p2;
    sc_signal< sc_lv<1> > and_ln29_1_fu_505_p2;
    sc_signal< bool > ap_block_pp0_stage0_00001;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<10> > mul_ln29_fu_310_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_800000;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<8> ap_const_lv8_D;
    static const sc_lv<4> ap_const_lv4_D;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<10> ap_const_lv10_1A;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_add_ln13_fu_239_p2();
    void thread_add_ln29_1_fu_418_p2();
    void thread_add_ln29_fu_387_p2();
    void thread_add_ln36_1_fu_352_p2();
    void thread_add_ln36_fu_320_p2();
    void thread_and_ln29_1_fu_505_p2();
    void thread_and_ln29_fu_499_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_00001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state6_pp0_stage0_iter0();
    void thread_ap_block_state7_pp0_stage0_iter1();
    void thread_ap_block_state8_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter1_state7();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_max_1_phi_fu_205_p4();
    void thread_ap_ready();
    void thread_bitcast_ln29_1_fu_445_p1();
    void thread_bitcast_ln29_fu_428_p1();
    void thread_c_fu_271_p2();
    void thread_conv_out_address0();
    void thread_conv_out_ce0();
    void thread_f_fu_225_p2();
    void thread_i_fu_301_p2();
    void thread_icmp_ln10_fu_219_p2();
    void thread_icmp_ln13_fu_245_p2();
    void thread_icmp_ln16_fu_265_p2();
    void thread_icmp_ln20_fu_289_p2();
    void thread_icmp_ln23_fu_362_p2();
    void thread_icmp_ln29_1_fu_469_p2();
    void thread_icmp_ln29_2_fu_481_p2();
    void thread_icmp_ln29_3_fu_487_p2();
    void thread_icmp_ln29_fu_463_p2();
    void thread_j_fu_378_p2();
    void thread_max_2_fu_511_p3();
    void thread_max_pool_out_address0();
    void thread_max_pool_out_ce0();
    void thread_max_pool_out_d0();
    void thread_max_pool_out_we0();
    void thread_mpc_fu_368_p2();
    void thread_mpr_fu_295_p2();
    void thread_mul_ln29_fu_310_p0();
    void thread_mul_ln29_fu_310_p00();
    void thread_mul_ln29_fu_310_p2();
    void thread_or_ln29_1_fu_493_p2();
    void thread_or_ln29_fu_475_p2();
    void thread_p_shl2_cast_fu_326_p3();
    void thread_p_shl_cast_fu_392_p3();
    void thread_r_fu_251_p2();
    void thread_shl_ln1_fu_277_p3();
    void thread_shl_ln_fu_257_p3();
    void thread_sub_ln29_fu_412_p2();
    void thread_sub_ln36_fu_346_p2();
    void thread_tmp_6_fu_449_p4();
    void thread_tmp_8_fu_334_p3();
    void thread_tmp_9_fu_400_p3();
    void thread_tmp_fu_431_p4();
    void thread_trunc_ln29_1_fu_459_p1();
    void thread_trunc_ln29_fu_441_p1();
    void thread_zext_ln13_1_fu_235_p1();
    void thread_zext_ln13_fu_231_p1();
    void thread_zext_ln20_fu_285_p1();
    void thread_zext_ln23_fu_374_p1();
    void thread_zext_ln29_1_fu_383_p1();
    void thread_zext_ln29_2_fu_408_p1();
    void thread_zext_ln29_3_fu_423_p1();
    void thread_zext_ln36_1_fu_342_p1();
    void thread_zext_ln36_2_fu_357_p1();
    void thread_zext_ln36_fu_316_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
