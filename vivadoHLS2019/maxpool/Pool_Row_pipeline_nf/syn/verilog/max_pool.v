// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.360250,HLS_SYN_LAT=8281,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=265,HLS_SYN_LUT=834,HLS_VERSION=2019_1}" *)

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        conv_out_address1,
        conv_out_ce1,
        conv_out_q1,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_pp0_stage0 = 7'd16;
parameter    ap_ST_fsm_pp0_stage1 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [11:0] conv_out_address1;
output   conv_out_ce1;
input  [31:0] conv_out_q1;
output  [9:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_ce0;
reg conv_out_ce1;
reg max_pool_out_ce0;
reg max_pool_out_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] max_0_reg_178;
reg   [1:0] mpr_0_reg_191;
wire   [2:0] f_fu_214_p2;
reg   [2:0] f_reg_629;
wire    ap_CS_fsm_state2;
wire   [12:0] zext_ln13_fu_220_p1;
reg   [12:0] zext_ln13_reg_634;
wire   [0:0] icmp_ln10_fu_208_p2;
wire   [10:0] zext_ln13_1_fu_224_p1;
reg   [10:0] zext_ln13_1_reg_640;
wire   [7:0] add_ln13_fu_228_p2;
reg   [7:0] add_ln13_reg_645;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_240_p2;
reg   [3:0] r_reg_653;
wire   [4:0] shl_ln_fu_246_p3;
reg   [4:0] shl_ln_reg_658;
wire   [0:0] icmp_ln13_fu_234_p2;
wire   [0:0] icmp_ln16_fu_254_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] c_fu_260_p2;
reg   [3:0] c_reg_667;
wire   [9:0] zext_ln27_fu_274_p1;
reg   [9:0] zext_ln27_reg_672;
wire   [9:0] zext_ln20_1_fu_284_p1;
reg   [9:0] zext_ln20_1_reg_677;
wire   [0:0] icmp_ln20_fu_288_p2;
reg   [0:0] icmp_ln20_reg_682;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln20_reg_682_pp0_iter1_reg;
wire   [1:0] mpr_fu_294_p2;
reg   [1:0] mpr_reg_686;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] conv_out_load_reg_701;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] conv_out_load_1_reg_708;
wire   [31:0] select_ln29_fu_484_p3;
reg   [31:0] select_ln29_reg_715;
wire   [31:0] select_ln29_1_fu_574_p3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
wire    ap_block_pp0_stage1_subdone;
reg   [2:0] f_0_reg_132;
reg   [3:0] r_0_reg_143;
reg   [7:0] phi_mul_reg_154;
reg   [3:0] c_0_reg_166;
wire    ap_CS_fsm_state9;
reg   [31:0] ap_phi_mux_max_0_phi_fu_183_p4;
wire    ap_block_pp0_stage1;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_195_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln29_2_fu_355_p1;
wire   [63:0] zext_ln29_4_fu_396_p1;
wire   [63:0] zext_ln36_2_fu_621_p1;
reg   [31:0] grp_fu_202_p0;
reg   [31:0] grp_fu_202_p1;
wire   [4:0] shl_ln1_fu_266_p3;
wire   [4:0] or_ln27_fu_278_p2;
wire   [4:0] zext_ln20_fu_300_p1;
wire   [4:0] i_fu_304_p2;
wire   [4:0] mul_ln29_fu_313_p1;
wire   [9:0] mul_ln29_fu_313_p2;
wire   [9:0] add_ln29_fu_319_p2;
wire   [10:0] tmp_11_fu_332_p3;
wire   [12:0] p_shl2_cast_fu_324_p3;
wire   [12:0] zext_ln29_1_fu_340_p1;
wire   [12:0] sub_ln29_fu_344_p2;
wire   [12:0] add_ln29_1_fu_350_p2;
wire   [9:0] add_ln29_2_fu_360_p2;
wire   [10:0] tmp_12_fu_373_p3;
wire   [12:0] p_shl_cast_fu_365_p3;
wire   [12:0] zext_ln29_3_fu_381_p1;
wire   [12:0] sub_ln29_1_fu_385_p2;
wire   [12:0] add_ln29_3_fu_391_p2;
wire   [31:0] bitcast_ln29_fu_401_p1;
wire   [31:0] bitcast_ln29_1_fu_418_p1;
wire   [7:0] tmp_1_fu_404_p4;
wire   [22:0] trunc_ln29_fu_414_p1;
wire   [0:0] icmp_ln29_1_fu_442_p2;
wire   [0:0] icmp_ln29_fu_436_p2;
wire   [7:0] tmp_5_fu_422_p4;
wire   [22:0] trunc_ln29_1_fu_432_p1;
wire   [0:0] icmp_ln29_3_fu_460_p2;
wire   [0:0] icmp_ln29_2_fu_454_p2;
wire   [0:0] or_ln29_fu_448_p2;
wire   [0:0] or_ln29_1_fu_466_p2;
wire   [0:0] and_ln29_fu_472_p2;
wire   [0:0] grp_fu_202_p2;
wire   [0:0] and_ln29_1_fu_478_p2;
wire   [31:0] bitcast_ln29_2_fu_492_p1;
wire   [31:0] bitcast_ln29_3_fu_509_p1;
wire   [7:0] tmp_7_fu_495_p4;
wire   [22:0] trunc_ln29_2_fu_505_p1;
wire   [0:0] icmp_ln29_5_fu_532_p2;
wire   [0:0] icmp_ln29_4_fu_526_p2;
wire   [7:0] tmp_8_fu_512_p4;
wire   [22:0] trunc_ln29_3_fu_522_p1;
wire   [0:0] icmp_ln29_7_fu_550_p2;
wire   [0:0] icmp_ln29_6_fu_544_p2;
wire   [0:0] or_ln29_2_fu_538_p2;
wire   [0:0] or_ln29_3_fu_556_p2;
wire   [0:0] and_ln29_2_fu_562_p2;
wire   [0:0] and_ln29_3_fu_568_p2;
wire   [7:0] zext_ln36_fu_580_p1;
wire   [7:0] add_ln36_fu_584_p2;
wire   [8:0] tmp_10_fu_598_p3;
wire   [10:0] p_shl4_cast_fu_590_p3;
wire   [10:0] zext_ln36_1_fu_606_p1;
wire   [10:0] sub_ln36_fu_610_p2;
wire   [10:0] add_ln36_1_fu_616_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] mul_ln29_fu_313_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_fcmp_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_fcmp_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_202_p0),
    .din1(grp_fu_202_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_202_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln16_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln16_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_0_reg_166 <= c_reg_667;
    end else if (((icmp_ln13_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_166 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_132 <= f_reg_629;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_132 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_682_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_0_reg_178 <= select_ln29_1_fu_574_p3;
    end else if (((icmp_ln16_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_178 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_682 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mpr_0_reg_191 <= mpr_reg_686;
    end else if (((icmp_ln16_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_191 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_154 <= add_ln13_reg_645;
    end else if (((icmp_ln10_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_154 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_143 <= r_reg_653;
    end else if (((icmp_ln10_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_143 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_645 <= add_ln13_fu_228_p2;
        r_reg_653 <= r_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_667 <= c_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_682 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_out_load_1_reg_708 <= conv_out_q1;
        conv_out_load_reg_701 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_629 <= f_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln20_reg_682 <= icmp_ln20_fu_288_p2;
        icmp_ln20_reg_682_pp0_iter1_reg <= icmp_ln20_reg_682;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mpr_reg_686 <= mpr_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_682 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_reg_715 <= select_ln29_fu_484_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_658[4 : 1] <= shl_ln_fu_246_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_640[2 : 0] <= zext_ln13_1_fu_224_p1[2 : 0];
        zext_ln13_reg_634[2 : 0] <= zext_ln13_fu_220_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln20_1_reg_677[4 : 1] <= zext_ln20_1_fu_284_p1[4 : 1];
        zext_ln27_reg_672[4 : 1] <= zext_ln27_fu_274_p1[4 : 1];
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_288_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_682_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_max_0_phi_fu_183_p4 = select_ln29_1_fu_574_p3;
    end else begin
        ap_phi_mux_max_0_phi_fu_183_p4 = max_0_reg_178;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_682 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_195_p4 = mpr_reg_686;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_195_p4 = mpr_0_reg_191;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_ce1 = 1'b1;
    end else begin
        conv_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_202_p0 = conv_out_load_1_reg_708;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_202_p0 = conv_out_q0;
    end else begin
        grp_fu_202_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_202_p1 = select_ln29_fu_484_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_202_p1 = ap_phi_mux_max_0_phi_fu_183_p4;
    end else begin
        grp_fu_202_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln20_fu_288_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln20_fu_288_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_228_p2 = (phi_mul_reg_154 + 8'd13);

assign add_ln29_1_fu_350_p2 = (sub_ln29_fu_344_p2 + zext_ln13_reg_634);

assign add_ln29_2_fu_360_p2 = (mul_ln29_fu_313_p2 + zext_ln20_1_reg_677);

assign add_ln29_3_fu_391_p2 = (sub_ln29_1_fu_385_p2 + zext_ln13_reg_634);

assign add_ln29_fu_319_p2 = (mul_ln29_fu_313_p2 + zext_ln27_reg_672);

assign add_ln36_1_fu_616_p2 = (zext_ln13_1_reg_640 + sub_ln36_fu_610_p2);

assign add_ln36_fu_584_p2 = (zext_ln36_fu_580_p1 + phi_mul_reg_154);

assign and_ln29_1_fu_478_p2 = (grp_fu_202_p2 & and_ln29_fu_472_p2);

assign and_ln29_2_fu_562_p2 = (or_ln29_3_fu_556_p2 & or_ln29_2_fu_538_p2);

assign and_ln29_3_fu_568_p2 = (grp_fu_202_p2 & and_ln29_2_fu_562_p2);

assign and_ln29_fu_472_p2 = (or_ln29_fu_448_p2 & or_ln29_1_fu_466_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_1_fu_418_p1 = max_0_reg_178;

assign bitcast_ln29_2_fu_492_p1 = conv_out_load_1_reg_708;

assign bitcast_ln29_3_fu_509_p1 = select_ln29_reg_715;

assign bitcast_ln29_fu_401_p1 = conv_out_load_reg_701;

assign c_fu_260_p2 = (c_0_reg_166 + 4'd1);

assign conv_out_address0 = zext_ln29_2_fu_355_p1;

assign conv_out_address1 = zext_ln29_4_fu_396_p1;

assign f_fu_214_p2 = (f_0_reg_132 + 3'd1);

assign i_fu_304_p2 = (zext_ln20_fu_300_p1 + shl_ln_reg_658);

assign icmp_ln10_fu_208_p2 = ((f_0_reg_132 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_234_p2 = ((r_0_reg_143 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_254_p2 = ((c_0_reg_166 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_288_p2 = ((ap_phi_mux_mpr_0_phi_fu_195_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_442_p2 = ((trunc_ln29_fu_414_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_454_p2 = ((tmp_5_fu_422_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_460_p2 = ((trunc_ln29_1_fu_432_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_526_p2 = ((tmp_7_fu_495_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_532_p2 = ((trunc_ln29_2_fu_505_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_544_p2 = ((tmp_8_fu_512_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_550_p2 = ((trunc_ln29_3_fu_522_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_436_p2 = ((tmp_1_fu_404_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln36_2_fu_621_p1;

assign max_pool_out_d0 = max_0_reg_178;

assign mpr_fu_294_p2 = (ap_phi_mux_mpr_0_phi_fu_195_p4 + 2'd1);

assign mul_ln29_fu_313_p1 = mul_ln29_fu_313_p10;

assign mul_ln29_fu_313_p10 = i_fu_304_p2;

assign mul_ln29_fu_313_p2 = (10'd26 * mul_ln29_fu_313_p1);

assign or_ln27_fu_278_p2 = (shl_ln1_fu_266_p3 | 5'd1);

assign or_ln29_1_fu_466_p2 = (icmp_ln29_3_fu_460_p2 | icmp_ln29_2_fu_454_p2);

assign or_ln29_2_fu_538_p2 = (icmp_ln29_5_fu_532_p2 | icmp_ln29_4_fu_526_p2);

assign or_ln29_3_fu_556_p2 = (icmp_ln29_7_fu_550_p2 | icmp_ln29_6_fu_544_p2);

assign or_ln29_fu_448_p2 = (icmp_ln29_fu_436_p2 | icmp_ln29_1_fu_442_p2);

assign p_shl2_cast_fu_324_p3 = {{add_ln29_fu_319_p2}, {3'd0}};

assign p_shl4_cast_fu_590_p3 = {{add_ln36_fu_584_p2}, {3'd0}};

assign p_shl_cast_fu_365_p3 = {{add_ln29_2_fu_360_p2}, {3'd0}};

assign r_fu_240_p2 = (r_0_reg_143 + 4'd1);

assign select_ln29_1_fu_574_p3 = ((and_ln29_3_fu_568_p2[0:0] === 1'b1) ? conv_out_load_1_reg_708 : select_ln29_reg_715);

assign select_ln29_fu_484_p3 = ((and_ln29_1_fu_478_p2[0:0] === 1'b1) ? conv_out_load_reg_701 : max_0_reg_178);

assign shl_ln1_fu_266_p3 = {{c_0_reg_166}, {1'd0}};

assign shl_ln_fu_246_p3 = {{r_0_reg_143}, {1'd0}};

assign sub_ln29_1_fu_385_p2 = (p_shl_cast_fu_365_p3 - zext_ln29_3_fu_381_p1);

assign sub_ln29_fu_344_p2 = (p_shl2_cast_fu_324_p3 - zext_ln29_1_fu_340_p1);

assign sub_ln36_fu_610_p2 = (p_shl4_cast_fu_590_p3 - zext_ln36_1_fu_606_p1);

assign tmp_10_fu_598_p3 = {{add_ln36_fu_584_p2}, {1'd0}};

assign tmp_11_fu_332_p3 = {{add_ln29_fu_319_p2}, {1'd0}};

assign tmp_12_fu_373_p3 = {{add_ln29_2_fu_360_p2}, {1'd0}};

assign tmp_1_fu_404_p4 = {{bitcast_ln29_fu_401_p1[30:23]}};

assign tmp_5_fu_422_p4 = {{bitcast_ln29_1_fu_418_p1[30:23]}};

assign tmp_7_fu_495_p4 = {{bitcast_ln29_2_fu_492_p1[30:23]}};

assign tmp_8_fu_512_p4 = {{bitcast_ln29_3_fu_509_p1[30:23]}};

assign trunc_ln29_1_fu_432_p1 = bitcast_ln29_1_fu_418_p1[22:0];

assign trunc_ln29_2_fu_505_p1 = bitcast_ln29_2_fu_492_p1[22:0];

assign trunc_ln29_3_fu_522_p1 = bitcast_ln29_3_fu_509_p1[22:0];

assign trunc_ln29_fu_414_p1 = bitcast_ln29_fu_401_p1[22:0];

assign zext_ln13_1_fu_224_p1 = f_0_reg_132;

assign zext_ln13_fu_220_p1 = f_0_reg_132;

assign zext_ln20_1_fu_284_p1 = or_ln27_fu_278_p2;

assign zext_ln20_fu_300_p1 = ap_phi_mux_mpr_0_phi_fu_195_p4;

assign zext_ln27_fu_274_p1 = shl_ln1_fu_266_p3;

assign zext_ln29_1_fu_340_p1 = tmp_11_fu_332_p3;

assign zext_ln29_2_fu_355_p1 = add_ln29_1_fu_350_p2;

assign zext_ln29_3_fu_381_p1 = tmp_12_fu_373_p3;

assign zext_ln29_4_fu_396_p1 = add_ln29_3_fu_391_p2;

assign zext_ln36_1_fu_606_p1 = tmp_10_fu_598_p3;

assign zext_ln36_2_fu_621_p1 = add_ln36_1_fu_616_p2;

assign zext_ln36_fu_580_p1 = c_0_reg_166;

always @ (posedge ap_clk) begin
    zext_ln13_reg_634[12:3] <= 10'b0000000000;
    zext_ln13_1_reg_640[10:3] <= 8'b00000000;
    shl_ln_reg_658[0] <= 1'b0;
    zext_ln27_reg_672[0] <= 1'b0;
    zext_ln27_reg_672[9:5] <= 5'b00000;
    zext_ln20_1_reg_677[0] <= 1'b1;
    zext_ln20_1_reg_677[9:5] <= 5'b00000;
end

endmodule //max_pool
