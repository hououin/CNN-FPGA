-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce1 : OUT STD_LOGIC;
    conv_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.360250,HLS_SYN_LAT=8281,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=265,HLS_SYN_LUT=834,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal max_0_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_191 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_fu_214_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_629 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_220_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln13_reg_634 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln10_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_224_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13_1_reg_640 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln13_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_645 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_fu_240_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_653 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_246_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_658 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln13_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal c_fu_260_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_667 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln27_fu_274_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln27_reg_672 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln20_1_fu_284_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln20_1_reg_677 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln20_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln20_reg_682_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_294_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_686 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal conv_out_load_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state6_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal conv_out_load_1_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_reg_715 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_1_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal f_0_reg_132 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_0_reg_143 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_phi_mux_max_0_phi_fu_183_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_mpr_0_phi_fu_195_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln29_2_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_4_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_2_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_266_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln27_fu_278_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln20_fu_300_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_304_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_313_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_313_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_319_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_332_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_324_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_1_fu_340_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_fu_344_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_1_fu_350_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_2_fu_360_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_373_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_365_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_3_fu_381_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_1_fu_385_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_3_fu_391_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_1_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_404_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_414_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_1_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_422_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_432_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_3_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_2_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_3_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_495_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_fu_505_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_5_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_4_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_512_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_3_fu_522_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_6_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_2_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_3_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_2_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_3_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_fu_584_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_598_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_590_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_1_fu_606_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln36_fu_610_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_1_fu_616_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln29_fu_313_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component max_pool_fcmp_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_fcmp_32nbkb_U1 : component max_pool_fcmp_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_202_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln16_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln16_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c_0_reg_166 <= c_reg_667;
            elsif (((icmp_ln13_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_166 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_234_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_132 <= f_reg_629;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_132 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_682_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                max_0_reg_178 <= select_ln29_1_fu_574_p3;
            elsif (((icmp_ln16_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_0_reg_178 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpr_0_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_682 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                mpr_0_reg_191 <= mpr_reg_686;
            elsif (((icmp_ln16_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpr_0_reg_191 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_154 <= add_ln13_reg_645;
            elsif (((icmp_ln10_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_154 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_0_reg_143 <= r_reg_653;
            elsif (((icmp_ln10_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_143 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_reg_645 <= add_ln13_fu_228_p2;
                r_reg_653 <= r_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_667 <= c_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_682 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_out_load_1_reg_708 <= conv_out_q1;
                conv_out_load_reg_701 <= conv_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_629 <= f_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_reg_682 <= icmp_ln20_fu_288_p2;
                icmp_ln20_reg_682_pp0_iter1_reg <= icmp_ln20_reg_682;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mpr_reg_686 <= mpr_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_682 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_reg_715 <= select_ln29_fu_484_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln_reg_658(4 downto 1) <= shl_ln_fu_246_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_1_reg_640(2 downto 0) <= zext_ln13_1_fu_224_p1(2 downto 0);
                    zext_ln13_reg_634(2 downto 0) <= zext_ln13_fu_220_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln20_1_reg_677(4 downto 1) <= zext_ln20_1_fu_284_p1(4 downto 1);
                    zext_ln27_reg_672(4 downto 1) <= zext_ln27_fu_274_p1(4 downto 1);
            end if;
        end if;
    end process;
    zext_ln13_reg_634(12 downto 3) <= "0000000000";
    zext_ln13_1_reg_640(10 downto 3) <= "00000000";
    shl_ln_reg_658(0) <= '0';
    zext_ln27_reg_672(0) <= '0';
    zext_ln27_reg_672(9 downto 5) <= "00000";
    zext_ln20_1_reg_677(0) <= '1';
    zext_ln20_1_reg_677(9 downto 5) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_208_p2, ap_CS_fsm_state3, icmp_ln13_fu_234_p2, icmp_ln16_fu_254_p2, ap_CS_fsm_state4, icmp_ln20_fu_288_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_234_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln20_fu_288_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln20_fu_288_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln13_fu_228_p2 <= std_logic_vector(unsigned(phi_mul_reg_154) + unsigned(ap_const_lv8_D));
    add_ln29_1_fu_350_p2 <= std_logic_vector(unsigned(sub_ln29_fu_344_p2) + unsigned(zext_ln13_reg_634));
    add_ln29_2_fu_360_p2 <= std_logic_vector(unsigned(mul_ln29_fu_313_p2) + unsigned(zext_ln20_1_reg_677));
    add_ln29_3_fu_391_p2 <= std_logic_vector(unsigned(sub_ln29_1_fu_385_p2) + unsigned(zext_ln13_reg_634));
    add_ln29_fu_319_p2 <= std_logic_vector(unsigned(mul_ln29_fu_313_p2) + unsigned(zext_ln27_reg_672));
    add_ln36_1_fu_616_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_640) + unsigned(sub_ln36_fu_610_p2));
    add_ln36_fu_584_p2 <= std_logic_vector(unsigned(zext_ln36_fu_580_p1) + unsigned(phi_mul_reg_154));
    and_ln29_1_fu_478_p2 <= (grp_fu_202_p2 and and_ln29_fu_472_p2);
    and_ln29_2_fu_562_p2 <= (or_ln29_3_fu_556_p2 and or_ln29_2_fu_538_p2);
    and_ln29_3_fu_568_p2 <= (grp_fu_202_p2 and and_ln29_2_fu_562_p2);
    and_ln29_fu_472_p2 <= (or_ln29_fu_448_p2 and or_ln29_1_fu_466_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln20_fu_288_p2)
    begin
        if ((icmp_ln20_fu_288_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_208_p2)
    begin
        if (((icmp_ln10_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_max_0_phi_fu_183_p4_assign_proc : process(max_0_reg_178, icmp_ln20_reg_682_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, select_ln29_1_fu_574_p3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln20_reg_682_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_max_0_phi_fu_183_p4 <= select_ln29_1_fu_574_p3;
        else 
            ap_phi_mux_max_0_phi_fu_183_p4 <= max_0_reg_178;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_195_p4_assign_proc : process(mpr_0_reg_191, icmp_ln20_reg_682, ap_CS_fsm_pp0_stage0, mpr_reg_686, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_682 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_195_p4 <= mpr_reg_686;
        else 
            ap_phi_mux_mpr_0_phi_fu_195_p4 <= mpr_0_reg_191;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_208_p2)
    begin
        if (((icmp_ln10_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_1_fu_418_p1 <= max_0_reg_178;
    bitcast_ln29_2_fu_492_p1 <= conv_out_load_1_reg_708;
    bitcast_ln29_3_fu_509_p1 <= select_ln29_reg_715;
    bitcast_ln29_fu_401_p1 <= conv_out_load_reg_701;
    c_fu_260_p2 <= std_logic_vector(unsigned(c_0_reg_166) + unsigned(ap_const_lv4_1));
    conv_out_address0 <= zext_ln29_2_fu_355_p1(12 - 1 downto 0);
    conv_out_address1 <= zext_ln29_4_fu_396_p1(12 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_ce1 <= ap_const_logic_1;
        else 
            conv_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_214_p2 <= std_logic_vector(unsigned(f_0_reg_132) + unsigned(ap_const_lv3_1));

    grp_fu_202_p0_assign_proc : process(conv_out_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, conv_out_load_1_reg_708, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_202_p0 <= conv_out_load_1_reg_708;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_202_p0 <= conv_out_q0;
        else 
            grp_fu_202_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_202_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, select_ln29_fu_484_p3, ap_enable_reg_pp0_iter1, ap_phi_mux_max_0_phi_fu_183_p4, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_202_p1 <= select_ln29_fu_484_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_202_p1 <= ap_phi_mux_max_0_phi_fu_183_p4;
        else 
            grp_fu_202_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_304_p2 <= std_logic_vector(unsigned(zext_ln20_fu_300_p1) + unsigned(shl_ln_reg_658));
    icmp_ln10_fu_208_p2 <= "1" when (f_0_reg_132 = ap_const_lv3_6) else "0";
    icmp_ln13_fu_234_p2 <= "1" when (r_0_reg_143 = ap_const_lv4_D) else "0";
    icmp_ln16_fu_254_p2 <= "1" when (c_0_reg_166 = ap_const_lv4_D) else "0";
    icmp_ln20_fu_288_p2 <= "1" when (ap_phi_mux_mpr_0_phi_fu_195_p4 = ap_const_lv2_2) else "0";
    icmp_ln29_1_fu_442_p2 <= "1" when (trunc_ln29_fu_414_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_454_p2 <= "0" when (tmp_5_fu_422_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_460_p2 <= "1" when (trunc_ln29_1_fu_432_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_4_fu_526_p2 <= "0" when (tmp_7_fu_495_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_5_fu_532_p2 <= "1" when (trunc_ln29_2_fu_505_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_6_fu_544_p2 <= "0" when (tmp_8_fu_512_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_7_fu_550_p2 <= "1" when (trunc_ln29_3_fu_522_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_436_p2 <= "0" when (tmp_1_fu_404_p4 = ap_const_lv8_FF) else "1";
    max_pool_out_address0 <= zext_ln36_2_fu_621_p1(10 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= max_0_reg_178;

    max_pool_out_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_294_p2 <= std_logic_vector(unsigned(ap_phi_mux_mpr_0_phi_fu_195_p4) + unsigned(ap_const_lv2_1));
    mul_ln29_fu_313_p1 <= mul_ln29_fu_313_p10(5 - 1 downto 0);
    mul_ln29_fu_313_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_304_p2),10));
    mul_ln29_fu_313_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln29_fu_313_p1), 10));
    or_ln27_fu_278_p2 <= (shl_ln1_fu_266_p3 or ap_const_lv5_1);
    or_ln29_1_fu_466_p2 <= (icmp_ln29_3_fu_460_p2 or icmp_ln29_2_fu_454_p2);
    or_ln29_2_fu_538_p2 <= (icmp_ln29_5_fu_532_p2 or icmp_ln29_4_fu_526_p2);
    or_ln29_3_fu_556_p2 <= (icmp_ln29_7_fu_550_p2 or icmp_ln29_6_fu_544_p2);
    or_ln29_fu_448_p2 <= (icmp_ln29_fu_436_p2 or icmp_ln29_1_fu_442_p2);
    p_shl2_cast_fu_324_p3 <= (add_ln29_fu_319_p2 & ap_const_lv3_0);
    p_shl4_cast_fu_590_p3 <= (add_ln36_fu_584_p2 & ap_const_lv3_0);
    p_shl_cast_fu_365_p3 <= (add_ln29_2_fu_360_p2 & ap_const_lv3_0);
    r_fu_240_p2 <= std_logic_vector(unsigned(r_0_reg_143) + unsigned(ap_const_lv4_1));
    select_ln29_1_fu_574_p3 <= 
        conv_out_load_1_reg_708 when (and_ln29_3_fu_568_p2(0) = '1') else 
        select_ln29_reg_715;
    select_ln29_fu_484_p3 <= 
        conv_out_load_reg_701 when (and_ln29_1_fu_478_p2(0) = '1') else 
        max_0_reg_178;
    shl_ln1_fu_266_p3 <= (c_0_reg_166 & ap_const_lv1_0);
    shl_ln_fu_246_p3 <= (r_0_reg_143 & ap_const_lv1_0);
    sub_ln29_1_fu_385_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_365_p3) - unsigned(zext_ln29_3_fu_381_p1));
    sub_ln29_fu_344_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_324_p3) - unsigned(zext_ln29_1_fu_340_p1));
    sub_ln36_fu_610_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_590_p3) - unsigned(zext_ln36_1_fu_606_p1));
    tmp_10_fu_598_p3 <= (add_ln36_fu_584_p2 & ap_const_lv1_0);
    tmp_11_fu_332_p3 <= (add_ln29_fu_319_p2 & ap_const_lv1_0);
    tmp_12_fu_373_p3 <= (add_ln29_2_fu_360_p2 & ap_const_lv1_0);
    tmp_1_fu_404_p4 <= bitcast_ln29_fu_401_p1(30 downto 23);
    tmp_5_fu_422_p4 <= bitcast_ln29_1_fu_418_p1(30 downto 23);
    tmp_7_fu_495_p4 <= bitcast_ln29_2_fu_492_p1(30 downto 23);
    tmp_8_fu_512_p4 <= bitcast_ln29_3_fu_509_p1(30 downto 23);
    trunc_ln29_1_fu_432_p1 <= bitcast_ln29_1_fu_418_p1(23 - 1 downto 0);
    trunc_ln29_2_fu_505_p1 <= bitcast_ln29_2_fu_492_p1(23 - 1 downto 0);
    trunc_ln29_3_fu_522_p1 <= bitcast_ln29_3_fu_509_p1(23 - 1 downto 0);
    trunc_ln29_fu_414_p1 <= bitcast_ln29_fu_401_p1(23 - 1 downto 0);
    zext_ln13_1_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_132),11));
    zext_ln13_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_132),13));
    zext_ln20_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_278_p2),10));
    zext_ln20_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_mpr_0_phi_fu_195_p4),5));
    zext_ln27_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_266_p3),10));
    zext_ln29_1_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_332_p3),13));
    zext_ln29_2_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_fu_350_p2),64));
    zext_ln29_3_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_373_p3),13));
    zext_ln29_4_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_3_fu_391_p2),64));
    zext_ln36_1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_598_p3),11));
    zext_ln36_2_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_fu_616_p2),64));
    zext_ln36_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_166),8));
end behav;
