// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="flat,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=831,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=197,HLS_SYN_LUT=671,HLS_VERSION=2019_1}" *)

module flat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_q0,
        flat_array_address0,
        flat_array_ce0,
        flat_array_we0,
        flat_array_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] max_pool_out_address0;
output   max_pool_out_ce0;
input  [31:0] max_pool_out_q0;
output  [8:0] flat_array_address0;
output   flat_array_ce0;
output   flat_array_we0;
output  [31:0] flat_array_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] max_pool_out_address0;
reg max_pool_out_ce0;
reg[8:0] flat_array_address0;
reg flat_array_ce0;
reg flat_array_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] r_fu_298_p2;
reg   [2:0] r_reg_576;
wire    ap_CS_fsm_state2;
wire   [8:0] i_fu_304_p2;
reg   [8:0] i_reg_581;
wire   [0:0] icmp_ln6_fu_292_p2;
wire   [9:0] add_ln14_fu_334_p2;
reg   [9:0] add_ln14_reg_586;
wire   [9:0] add_ln14_1_fu_340_p2;
reg   [9:0] add_ln14_1_reg_591;
wire   [9:0] add_ln14_2_fu_346_p2;
reg   [9:0] add_ln14_2_reg_596;
wire   [9:0] add_ln14_3_fu_352_p2;
reg   [9:0] add_ln14_3_reg_601;
wire   [9:0] add_ln14_4_fu_358_p2;
reg   [9:0] add_ln14_4_reg_606;
wire   [8:0] add_ln15_fu_364_p2;
reg   [8:0] add_ln15_reg_611;
wire   [4:0] add_ln12_fu_376_p2;
reg   [4:0] add_ln12_reg_619;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln12_fu_370_p2;
wire   [8:0] add_ln15_1_fu_396_p2;
reg   [8:0] add_ln15_1_reg_629;
wire   [8:0] add_ln15_4_fu_407_p2;
wire    ap_CS_fsm_state4;
wire   [4:0] add_ln12_1_fu_419_p2;
reg   [4:0] add_ln12_1_reg_642;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln12_1_fu_413_p2;
wire   [8:0] add_ln15_2_fu_439_p2;
reg   [8:0] add_ln15_2_reg_652;
wire   [8:0] add_ln15_5_fu_450_p2;
wire    ap_CS_fsm_state6;
wire   [4:0] add_ln12_2_fu_462_p2;
reg   [4:0] add_ln12_2_reg_665;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln12_2_fu_456_p2;
wire   [8:0] add_ln15_3_fu_482_p2;
reg   [8:0] add_ln15_3_reg_675;
wire   [8:0] add_ln15_6_fu_493_p2;
wire    ap_CS_fsm_state8;
wire   [4:0] add_ln12_3_fu_505_p2;
reg   [4:0] add_ln12_3_reg_688;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln12_3_fu_499_p2;
wire   [8:0] add_ln15_7_fu_530_p2;
wire    ap_CS_fsm_state10;
wire   [4:0] add_ln12_4_fu_542_p2;
reg   [4:0] add_ln12_4_reg_706;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln12_4_fu_536_p2;
wire   [8:0] add_ln15_8_fu_567_p2;
wire    ap_CS_fsm_state12;
reg   [2:0] r_0_reg_163;
reg   [8:0] i_0_reg_174;
reg   [8:0] i_2_0_reg_186;
reg   [4:0] f_0_0_reg_197;
reg   [8:0] i_2_1_reg_208;
reg   [4:0] f_0_1_reg_218;
reg   [8:0] i_2_2_reg_229;
reg   [4:0] f_0_2_reg_239;
reg   [8:0] i_2_3_reg_250;
reg   [4:0] f_0_3_reg_260;
reg   [8:0] i_2_4_reg_271;
reg   [4:0] f_0_4_reg_281;
wire   [63:0] zext_ln14_5_fu_391_p1;
wire   [63:0] zext_ln14_2_fu_402_p1;
wire  signed [63:0] sext_ln14_fu_434_p1;
wire   [63:0] zext_ln14_4_fu_445_p1;
wire  signed [63:0] sext_ln14_1_fu_477_p1;
wire   [63:0] zext_ln14_6_fu_488_p1;
wire  signed [63:0] sext_ln14_2_fu_520_p1;
wire   [63:0] zext_ln14_8_fu_525_p1;
wire  signed [63:0] sext_ln14_3_fu_557_p1;
wire   [63:0] zext_ln14_10_fu_562_p1;
wire   [8:0] tmp_5_fu_310_p3;
wire   [6:0] tmp_6_fu_322_p3;
wire   [9:0] zext_ln14_1_fu_330_p1;
wire   [9:0] zext_ln14_fu_318_p1;
wire   [9:0] zext_ln14_3_fu_382_p1;
wire   [9:0] add_ln14_5_fu_386_p2;
wire   [9:0] zext_ln14_7_fu_425_p1;
wire   [9:0] add_ln14_6_fu_429_p2;
wire   [9:0] zext_ln14_9_fu_468_p1;
wire   [9:0] add_ln14_7_fu_472_p2;
wire   [9:0] zext_ln14_11_fu_511_p1;
wire   [9:0] add_ln14_8_fu_515_p2;
wire   [9:0] zext_ln14_12_fu_548_p1;
wire   [9:0] add_ln14_9_fu_552_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_0_0_reg_197 <= add_ln12_reg_619;
    end else if (((icmp_ln6_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        f_0_0_reg_197 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        f_0_1_reg_218 <= add_ln12_1_reg_642;
    end else if (((icmp_ln12_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_1_reg_218 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        f_0_2_reg_239 <= add_ln12_2_reg_665;
    end else if (((icmp_ln12_1_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        f_0_2_reg_239 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        f_0_3_reg_260 <= add_ln12_3_reg_688;
    end else if (((icmp_ln12_2_fu_456_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        f_0_3_reg_260 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        f_0_4_reg_281 <= add_ln12_4_reg_706;
    end else if (((icmp_ln12_3_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        f_0_4_reg_281 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_4_fu_536_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_0_reg_174 <= i_reg_581;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_174 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_2_0_reg_186 <= add_ln15_4_fu_407_p2;
    end else if (((icmp_ln6_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_2_0_reg_186 <= i_0_reg_174;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_1_reg_208 <= add_ln15_5_fu_450_p2;
    end else if (((icmp_ln12_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_1_reg_208 <= add_ln15_reg_611;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_2_2_reg_229 <= add_ln15_6_fu_493_p2;
    end else if (((icmp_ln12_1_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_2_2_reg_229 <= add_ln15_1_reg_629;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_3_reg_250 <= add_ln15_7_fu_530_p2;
    end else if (((icmp_ln12_2_fu_456_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_2_3_reg_250 <= add_ln15_2_reg_652;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_2_4_reg_271 <= add_ln15_8_fu_567_p2;
    end else if (((icmp_ln12_3_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_2_4_reg_271 <= add_ln15_3_reg_675;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_4_fu_536_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        r_0_reg_163 <= r_reg_576;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_163 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln12_1_reg_642 <= add_ln12_1_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln12_2_reg_665 <= add_ln12_2_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln12_3_reg_688 <= add_ln12_3_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln12_4_reg_706 <= add_ln12_4_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln12_reg_619 <= add_ln12_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln14_1_reg_591[9 : 4] <= add_ln14_1_fu_340_p2[9 : 4];
        add_ln14_2_reg_596[9 : 4] <= add_ln14_2_fu_346_p2[9 : 4];
        add_ln14_3_reg_601[9 : 4] <= add_ln14_3_fu_352_p2[9 : 4];
        add_ln14_4_reg_606[9 : 4] <= add_ln14_4_fu_358_p2[9 : 4];
        add_ln14_reg_586[9 : 4] <= add_ln14_fu_334_p2[9 : 4];
        add_ln15_reg_611 <= add_ln15_fu_364_p2;
        i_reg_581 <= i_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln15_1_reg_629 <= add_ln15_1_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_1_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln15_2_reg_652 <= add_ln15_2_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_2_fu_456_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln15_3_reg_675 <= add_ln15_3_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_576 <= r_fu_298_p2;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        flat_array_address0 = zext_ln14_10_fu_562_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        flat_array_address0 = zext_ln14_8_fu_525_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        flat_array_address0 = zext_ln14_6_fu_488_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        flat_array_address0 = zext_ln14_4_fu_445_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        flat_array_address0 = zext_ln14_2_fu_402_p1;
    end else begin
        flat_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        flat_array_we0 = 1'b1;
    end else begin
        flat_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        max_pool_out_address0 = sext_ln14_3_fu_557_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        max_pool_out_address0 = sext_ln14_2_fu_520_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_address0 = sext_ln14_1_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_address0 = sext_ln14_fu_434_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        max_pool_out_address0 = zext_ln14_5_fu_391_p1;
    end else begin
        max_pool_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln12_1_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln12_2_fu_456_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln12_3_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln12_4_fu_536_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_1_fu_419_p2 = (f_0_1_reg_218 + 5'd1);

assign add_ln12_2_fu_462_p2 = (f_0_2_reg_239 + 5'd1);

assign add_ln12_3_fu_505_p2 = (f_0_3_reg_260 + 5'd1);

assign add_ln12_4_fu_542_p2 = (f_0_4_reg_281 + 5'd1);

assign add_ln12_fu_376_p2 = (f_0_0_reg_197 + 5'd1);

assign add_ln14_1_fu_340_p2 = (add_ln14_fu_334_p2 + 10'd16);

assign add_ln14_2_fu_346_p2 = (add_ln14_fu_334_p2 + 10'd32);

assign add_ln14_3_fu_352_p2 = (add_ln14_fu_334_p2 + 10'd48);

assign add_ln14_4_fu_358_p2 = (add_ln14_fu_334_p2 + 10'd64);

assign add_ln14_5_fu_386_p2 = (add_ln14_reg_586 + zext_ln14_3_fu_382_p1);

assign add_ln14_6_fu_429_p2 = (add_ln14_1_reg_591 + zext_ln14_7_fu_425_p1);

assign add_ln14_7_fu_472_p2 = (add_ln14_2_reg_596 + zext_ln14_9_fu_468_p1);

assign add_ln14_8_fu_515_p2 = (add_ln14_3_reg_601 + zext_ln14_11_fu_511_p1);

assign add_ln14_9_fu_552_p2 = (add_ln14_4_reg_606 + zext_ln14_12_fu_548_p1);

assign add_ln14_fu_334_p2 = (zext_ln14_1_fu_330_p1 + zext_ln14_fu_318_p1);

assign add_ln15_1_fu_396_p2 = (i_0_reg_174 + 9'd32);

assign add_ln15_2_fu_439_p2 = (i_0_reg_174 + 9'd48);

assign add_ln15_3_fu_482_p2 = (i_0_reg_174 + 9'd64);

assign add_ln15_4_fu_407_p2 = (i_2_0_reg_186 + 9'd1);

assign add_ln15_5_fu_450_p2 = (i_2_1_reg_208 + 9'd1);

assign add_ln15_6_fu_493_p2 = (i_2_2_reg_229 + 9'd1);

assign add_ln15_7_fu_530_p2 = (i_2_3_reg_250 + 9'd1);

assign add_ln15_8_fu_567_p2 = (i_2_4_reg_271 + 9'd1);

assign add_ln15_fu_364_p2 = (i_0_reg_174 + 9'd16);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign flat_array_d0 = max_pool_out_q0;

assign i_fu_304_p2 = (i_0_reg_174 + 9'd80);

assign icmp_ln12_1_fu_413_p2 = ((f_0_1_reg_218 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln12_2_fu_456_p2 = ((f_0_2_reg_239 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln12_3_fu_499_p2 = ((f_0_3_reg_260 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln12_4_fu_536_p2 = ((f_0_4_reg_281 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_370_p2 = ((f_0_0_reg_197 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_292_p2 = ((r_0_reg_163 == 3'd5) ? 1'b1 : 1'b0);

assign r_fu_298_p2 = (r_0_reg_163 + 3'd1);

assign sext_ln14_1_fu_477_p1 = $signed(add_ln14_7_fu_472_p2);

assign sext_ln14_2_fu_520_p1 = $signed(add_ln14_8_fu_515_p2);

assign sext_ln14_3_fu_557_p1 = $signed(add_ln14_9_fu_552_p2);

assign sext_ln14_fu_434_p1 = $signed(add_ln14_6_fu_429_p2);

assign tmp_5_fu_310_p3 = {{r_0_reg_163}, {6'd0}};

assign tmp_6_fu_322_p3 = {{r_0_reg_163}, {4'd0}};

assign zext_ln14_10_fu_562_p1 = i_2_4_reg_271;

assign zext_ln14_11_fu_511_p1 = f_0_3_reg_260;

assign zext_ln14_12_fu_548_p1 = f_0_4_reg_281;

assign zext_ln14_1_fu_330_p1 = tmp_6_fu_322_p3;

assign zext_ln14_2_fu_402_p1 = i_2_0_reg_186;

assign zext_ln14_3_fu_382_p1 = f_0_0_reg_197;

assign zext_ln14_4_fu_445_p1 = i_2_1_reg_208;

assign zext_ln14_5_fu_391_p1 = add_ln14_5_fu_386_p2;

assign zext_ln14_6_fu_488_p1 = i_2_2_reg_229;

assign zext_ln14_7_fu_425_p1 = f_0_1_reg_218;

assign zext_ln14_8_fu_525_p1 = i_2_3_reg_250;

assign zext_ln14_9_fu_468_p1 = f_0_2_reg_239;

assign zext_ln14_fu_318_p1 = tmp_5_fu_310_p3;

always @ (posedge ap_clk) begin
    add_ln14_reg_586[3:0] <= 4'b0000;
    add_ln14_1_reg_591[3:0] <= 4'b0000;
    add_ln14_2_reg_596[3:0] <= 4'b0000;
    add_ln14_3_reg_601[3:0] <= 4'b0000;
    add_ln14_4_reg_606[3:0] <= 4'b0000;
end

endmodule //flat
