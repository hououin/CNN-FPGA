-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_ce0 : OUT STD_LOGIC;
    flat_array_we0 : OUT STD_LOGIC;
    flat_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of flat is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "flat,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=831,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=197,HLS_SYN_LUT=671,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_10 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_const_lv10_20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_const_lv10_30 : STD_LOGIC_VECTOR (9 downto 0) := "0000110000";
    constant ap_const_lv10_40 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_20 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_30 : STD_LOGIC_VECTOR (8 downto 0) := "000110000";
    constant ap_const_lv9_40 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_fu_298_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_576 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_304_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_581 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln6_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_334_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_reg_586 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_1_fu_340_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_1_reg_591 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_2_fu_346_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_2_reg_596 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_3_fu_352_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_3_reg_601 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_4_fu_358_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_4_reg_606 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_fu_364_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_reg_611 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln12_fu_376_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln12_reg_619 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln12_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_1_fu_396_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_1_reg_629 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_4_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln12_1_fu_419_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln12_1_reg_642 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln12_1_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_2_fu_439_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_2_reg_652 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_5_fu_450_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln12_2_fu_462_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln12_2_reg_665 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln12_2_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_3_fu_482_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_3_reg_675 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_6_fu_493_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln12_3_fu_505_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln12_3_reg_688 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln12_3_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_7_fu_530_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln12_4_fu_542_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln12_4_reg_706 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln12_4_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_8_fu_567_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal r_0_reg_163 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_174 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_0_reg_186 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_0_reg_197 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_1_reg_208 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_1_reg_218 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_2_reg_229 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_2_reg_239 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_3_reg_250 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_3_reg_260 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_4_reg_271 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_4_reg_281 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_5_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_2_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_4_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_1_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_6_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_2_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_8_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_3_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_10_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_310_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_322_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln14_1_fu_330_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_fu_318_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_3_fu_382_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_5_fu_386_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_7_fu_425_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_6_fu_429_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_9_fu_468_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_7_fu_472_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_11_fu_511_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_8_fu_515_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_12_fu_548_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_9_fu_552_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    f_0_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                f_0_0_reg_197 <= add_ln12_reg_619;
            elsif (((icmp_ln6_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                f_0_0_reg_197 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_1_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                f_0_1_reg_218 <= add_ln12_1_reg_642;
            elsif (((icmp_ln12_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_1_reg_218 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_2_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                f_0_2_reg_239 <= add_ln12_2_reg_665;
            elsif (((icmp_ln12_1_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                f_0_2_reg_239 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_3_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                f_0_3_reg_260 <= add_ln12_3_reg_688;
            elsif (((icmp_ln12_2_fu_456_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                f_0_3_reg_260 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_4_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                f_0_4_reg_281 <= add_ln12_4_reg_706;
            elsif (((icmp_ln12_3_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                f_0_4_reg_281 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_4_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_0_reg_174 <= i_reg_581;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_174 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_2_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_2_0_reg_186 <= add_ln15_4_fu_407_p2;
            elsif (((icmp_ln6_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_2_0_reg_186 <= i_0_reg_174;
            end if; 
        end if;
    end process;

    i_2_1_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_2_1_reg_208 <= add_ln15_5_fu_450_p2;
            elsif (((icmp_ln12_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_1_reg_208 <= add_ln15_reg_611;
            end if; 
        end if;
    end process;

    i_2_2_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_2_2_reg_229 <= add_ln15_6_fu_493_p2;
            elsif (((icmp_ln12_1_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_2_2_reg_229 <= add_ln15_1_reg_629;
            end if; 
        end if;
    end process;

    i_2_3_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_2_3_reg_250 <= add_ln15_7_fu_530_p2;
            elsif (((icmp_ln12_2_fu_456_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_2_3_reg_250 <= add_ln15_2_reg_652;
            end if; 
        end if;
    end process;

    i_2_4_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_2_4_reg_271 <= add_ln15_8_fu_567_p2;
            elsif (((icmp_ln12_3_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_4_reg_271 <= add_ln15_3_reg_675;
            end if; 
        end if;
    end process;

    r_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_4_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                r_0_reg_163 <= r_reg_576;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_163 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln12_1_reg_642 <= add_ln12_1_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln12_2_reg_665 <= add_ln12_2_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln12_3_reg_688 <= add_ln12_3_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln12_4_reg_706 <= add_ln12_4_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln12_reg_619 <= add_ln12_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln14_1_reg_591(9 downto 4) <= add_ln14_1_fu_340_p2(9 downto 4);
                    add_ln14_2_reg_596(9 downto 4) <= add_ln14_2_fu_346_p2(9 downto 4);
                    add_ln14_3_reg_601(9 downto 4) <= add_ln14_3_fu_352_p2(9 downto 4);
                    add_ln14_4_reg_606(9 downto 4) <= add_ln14_4_fu_358_p2(9 downto 4);
                    add_ln14_reg_586(9 downto 4) <= add_ln14_fu_334_p2(9 downto 4);
                add_ln15_reg_611 <= add_ln15_fu_364_p2;
                i_reg_581 <= i_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln15_1_reg_629 <= add_ln15_1_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_1_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln15_2_reg_652 <= add_ln15_2_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_2_fu_456_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln15_3_reg_675 <= add_ln15_3_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_576 <= r_fu_298_p2;
            end if;
        end if;
    end process;
    add_ln14_reg_586(3 downto 0) <= "0000";
    add_ln14_1_reg_591(3 downto 0) <= "0000";
    add_ln14_2_reg_596(3 downto 0) <= "0000";
    add_ln14_3_reg_601(3 downto 0) <= "0000";
    add_ln14_4_reg_606(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_292_p2, ap_CS_fsm_state3, icmp_ln12_fu_370_p2, ap_CS_fsm_state5, icmp_ln12_1_fu_413_p2, ap_CS_fsm_state7, icmp_ln12_2_fu_456_p2, ap_CS_fsm_state9, icmp_ln12_3_fu_499_p2, ap_CS_fsm_state11, icmp_ln12_4_fu_536_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln6_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln12_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln12_1_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln12_2_fu_456_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln12_3_fu_499_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln12_4_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln12_1_fu_419_p2 <= std_logic_vector(unsigned(f_0_1_reg_218) + unsigned(ap_const_lv5_1));
    add_ln12_2_fu_462_p2 <= std_logic_vector(unsigned(f_0_2_reg_239) + unsigned(ap_const_lv5_1));
    add_ln12_3_fu_505_p2 <= std_logic_vector(unsigned(f_0_3_reg_260) + unsigned(ap_const_lv5_1));
    add_ln12_4_fu_542_p2 <= std_logic_vector(unsigned(f_0_4_reg_281) + unsigned(ap_const_lv5_1));
    add_ln12_fu_376_p2 <= std_logic_vector(unsigned(f_0_0_reg_197) + unsigned(ap_const_lv5_1));
    add_ln14_1_fu_340_p2 <= std_logic_vector(unsigned(add_ln14_fu_334_p2) + unsigned(ap_const_lv10_10));
    add_ln14_2_fu_346_p2 <= std_logic_vector(unsigned(add_ln14_fu_334_p2) + unsigned(ap_const_lv10_20));
    add_ln14_3_fu_352_p2 <= std_logic_vector(unsigned(add_ln14_fu_334_p2) + unsigned(ap_const_lv10_30));
    add_ln14_4_fu_358_p2 <= std_logic_vector(unsigned(add_ln14_fu_334_p2) + unsigned(ap_const_lv10_40));
    add_ln14_5_fu_386_p2 <= std_logic_vector(unsigned(add_ln14_reg_586) + unsigned(zext_ln14_3_fu_382_p1));
    add_ln14_6_fu_429_p2 <= std_logic_vector(unsigned(add_ln14_1_reg_591) + unsigned(zext_ln14_7_fu_425_p1));
    add_ln14_7_fu_472_p2 <= std_logic_vector(unsigned(add_ln14_2_reg_596) + unsigned(zext_ln14_9_fu_468_p1));
    add_ln14_8_fu_515_p2 <= std_logic_vector(unsigned(add_ln14_3_reg_601) + unsigned(zext_ln14_11_fu_511_p1));
    add_ln14_9_fu_552_p2 <= std_logic_vector(unsigned(add_ln14_4_reg_606) + unsigned(zext_ln14_12_fu_548_p1));
    add_ln14_fu_334_p2 <= std_logic_vector(unsigned(zext_ln14_1_fu_330_p1) + unsigned(zext_ln14_fu_318_p1));
    add_ln15_1_fu_396_p2 <= std_logic_vector(unsigned(i_0_reg_174) + unsigned(ap_const_lv9_20));
    add_ln15_2_fu_439_p2 <= std_logic_vector(unsigned(i_0_reg_174) + unsigned(ap_const_lv9_30));
    add_ln15_3_fu_482_p2 <= std_logic_vector(unsigned(i_0_reg_174) + unsigned(ap_const_lv9_40));
    add_ln15_4_fu_407_p2 <= std_logic_vector(unsigned(i_2_0_reg_186) + unsigned(ap_const_lv9_1));
    add_ln15_5_fu_450_p2 <= std_logic_vector(unsigned(i_2_1_reg_208) + unsigned(ap_const_lv9_1));
    add_ln15_6_fu_493_p2 <= std_logic_vector(unsigned(i_2_2_reg_229) + unsigned(ap_const_lv9_1));
    add_ln15_7_fu_530_p2 <= std_logic_vector(unsigned(i_2_3_reg_250) + unsigned(ap_const_lv9_1));
    add_ln15_8_fu_567_p2 <= std_logic_vector(unsigned(i_2_4_reg_271) + unsigned(ap_const_lv9_1));
    add_ln15_fu_364_p2 <= std_logic_vector(unsigned(i_0_reg_174) + unsigned(ap_const_lv9_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln6_fu_292_p2)
    begin
        if (((icmp_ln6_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln6_fu_292_p2)
    begin
        if (((icmp_ln6_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, zext_ln14_2_fu_402_p1, zext_ln14_4_fu_445_p1, zext_ln14_6_fu_488_p1, zext_ln14_8_fu_525_p1, zext_ln14_10_fu_562_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            flat_array_address0 <= zext_ln14_10_fu_562_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            flat_array_address0 <= zext_ln14_8_fu_525_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            flat_array_address0 <= zext_ln14_6_fu_488_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            flat_array_address0 <= zext_ln14_4_fu_445_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            flat_array_address0 <= zext_ln14_2_fu_402_p1(9 - 1 downto 0);
        else 
            flat_array_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            flat_array_ce0 <= ap_const_logic_1;
        else 
            flat_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_d0 <= max_pool_out_q0;

    flat_array_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            flat_array_we0 <= ap_const_logic_1;
        else 
            flat_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_304_p2 <= std_logic_vector(unsigned(i_0_reg_174) + unsigned(ap_const_lv9_50));
    icmp_ln12_1_fu_413_p2 <= "1" when (f_0_1_reg_218 = ap_const_lv5_10) else "0";
    icmp_ln12_2_fu_456_p2 <= "1" when (f_0_2_reg_239 = ap_const_lv5_10) else "0";
    icmp_ln12_3_fu_499_p2 <= "1" when (f_0_3_reg_260 = ap_const_lv5_10) else "0";
    icmp_ln12_4_fu_536_p2 <= "1" when (f_0_4_reg_281 = ap_const_lv5_10) else "0";
    icmp_ln12_fu_370_p2 <= "1" when (f_0_0_reg_197 = ap_const_lv5_10) else "0";
    icmp_ln6_fu_292_p2 <= "1" when (r_0_reg_163 = ap_const_lv3_5) else "0";

    max_pool_out_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, zext_ln14_5_fu_391_p1, sext_ln14_fu_434_p1, sext_ln14_1_fu_477_p1, sext_ln14_2_fu_520_p1, sext_ln14_3_fu_557_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            max_pool_out_address0 <= sext_ln14_3_fu_557_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_out_address0 <= sext_ln14_2_fu_520_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_out_address0 <= sext_ln14_1_fu_477_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_address0 <= sext_ln14_fu_434_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            max_pool_out_address0 <= zext_ln14_5_fu_391_p1(9 - 1 downto 0);
        else 
            max_pool_out_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_298_p2 <= std_logic_vector(unsigned(r_0_reg_163) + unsigned(ap_const_lv3_1));
        sext_ln14_1_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_7_fu_472_p2),64));

        sext_ln14_2_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_8_fu_515_p2),64));

        sext_ln14_3_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_9_fu_552_p2),64));

        sext_ln14_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_6_fu_429_p2),64));

    tmp_5_fu_310_p3 <= (r_0_reg_163 & ap_const_lv6_0);
    tmp_6_fu_322_p3 <= (r_0_reg_163 & ap_const_lv4_0);
    zext_ln14_10_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_4_reg_271),64));
    zext_ln14_11_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_3_reg_260),10));
    zext_ln14_12_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_4_reg_281),10));
    zext_ln14_1_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_322_p3),10));
    zext_ln14_2_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_0_reg_186),64));
    zext_ln14_3_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_0_reg_197),10));
    zext_ln14_4_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_1_reg_208),64));
    zext_ln14_5_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_5_fu_386_p2),64));
    zext_ln14_6_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_2_reg_229),64));
    zext_ln14_7_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_1_reg_218),10));
    zext_ln14_8_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_3_reg_250),64));
    zext_ln14_9_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_2_reg_239),10));
    zext_ln14_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_310_p3),10));
end behav;
