-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_out_ce1 : OUT STD_LOGIC;
    max_pool_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_ce0 : OUT STD_LOGIC;
    flat_array_we0 : OUT STD_LOGIC;
    flat_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    flat_array_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_ce1 : OUT STD_LOGIC;
    flat_array_we1 : OUT STD_LOGIC;
    flat_array_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of flat is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "flat,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.451750,HLS_SYN_LAT=202,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=137,HLS_SYN_LUT=639,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten17_reg_252 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_0_reg_263 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_274 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_reg_285 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_296 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_307 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_0_reg_318 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_0_reg_329 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln6_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln6_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln6_reg_758 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln9_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln15_3_fu_394_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_3_reg_768 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln6_fu_442_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln6_reg_773 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_4_fu_462_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_4_reg_778 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_5_fu_476_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln15_5_reg_791 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln15_6_fu_484_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_6_reg_796 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln14_1_fu_496_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_1_reg_801 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln9_fu_510_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln9_reg_811 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_2_fu_518_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_2_reg_816 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln9_1_fu_556_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln9_1_reg_836 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln15_2_fu_718_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_2_reg_871 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln12_fu_723_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln12_reg_876 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln9_1_fu_728_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln9_1_reg_881 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten17_phi_fu_256_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_267_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_i_0_phi_fu_278_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_289_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i_1_phi_fu_300_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_c_0_phi_fu_311_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_i_2_0_phi_fu_322_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_f_0_0_phi_fu_333_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_4_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_12_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln14_5_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_13_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_14_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_6_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln14_7_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_15_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_16_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_8_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln14_9_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_17_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_18_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_10_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_11_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_fu_358_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_fu_352_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_406_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_1_fu_414_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_fu_402_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln15_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln15_1_fu_378_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_fu_370_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln15_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_1_fu_456_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_2_fu_386_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln15_7_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_450_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln15_fu_492_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_fu_418_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_2_fu_522_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_cast_fu_502_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_2_fu_526_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln12_fu_537_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_543_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln15_fu_566_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln12_1_fu_576_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_581_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln12_2_fu_593_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_598_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln15_1_fu_610_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln15_2_fu_620_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln12_3_fu_630_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_635_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln12_4_fu_647_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_652_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln15_3_fu_664_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln15_4_fu_674_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln12_5_fu_684_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_689_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln12_6_fu_701_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_706_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln15_5_fu_734_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln15_6_fu_744_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_307 <= select_ln15_6_reg_796;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_307 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_0_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_0_reg_329 <= add_ln12_reg_876;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_0_reg_329 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_274 <= select_ln6_reg_773;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_274 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_1_reg_296 <= select_ln9_reg_811;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_reg_296 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_2_0_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_2_0_reg_318 <= add_ln15_2_reg_871;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_2_0_reg_318 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten17_reg_252 <= add_ln6_reg_758;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten17_reg_252 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_285 <= select_ln9_1_reg_881;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_285 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    r_0_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_263 <= select_ln15_3_reg_768;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_263 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln12_reg_876 <= add_ln12_fu_723_p2;
                add_ln15_2_reg_871 <= add_ln15_2_fu_718_p2;
                select_ln9_1_reg_881 <= select_ln9_1_fu_728_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_340_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln14_1_reg_801 <= add_ln14_1_fu_496_p2;
                add_ln9_1_reg_836 <= add_ln9_1_fu_556_p2;
                empty_2_reg_816 <= empty_2_fu_518_p1;
                icmp_ln9_reg_763 <= icmp_ln9_fu_364_p2;
                select_ln15_4_reg_778 <= select_ln15_4_fu_462_p3;
                select_ln15_5_reg_791 <= select_ln15_5_fu_476_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln6_reg_758 <= add_ln6_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln6_reg_754 <= icmp_ln6_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_340_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln15_3_reg_768 <= select_ln15_3_fu_394_p3;
                select_ln15_6_reg_796 <= select_ln15_6_fu_484_p3;
                select_ln6_reg_773 <= select_ln6_fu_442_p3;
                select_ln9_reg_811 <= select_ln9_fu_510_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln6_fu_340_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln6_fu_340_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln6_fu_340_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln12_fu_723_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) + unsigned(select_ln15_5_reg_791));
    add_ln14_1_fu_496_p2 <= std_logic_vector(unsigned(zext_ln15_fu_492_p1) + unsigned(add_ln14_fu_418_p2));
    add_ln14_2_fu_526_p2 <= std_logic_vector(unsigned(zext_ln14_2_fu_522_p1) + unsigned(tmp_3_cast_fu_502_p3));
    add_ln14_fu_418_p2 <= std_logic_vector(unsigned(zext_ln14_1_fu_414_p1) + unsigned(zext_ln14_fu_402_p1));
    add_ln15_1_fu_456_p2 <= std_logic_vector(unsigned(ap_const_lv9_10) + unsigned(select_ln15_fu_370_p3));
    add_ln15_2_fu_718_p2 <= std_logic_vector(unsigned(ap_const_lv9_8) + unsigned(select_ln15_4_reg_778));
    add_ln15_fu_358_p2 <= std_logic_vector(unsigned(ap_const_lv9_50) + unsigned(ap_phi_mux_i_0_phi_fu_278_p4));
    add_ln6_fu_346_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten17_phi_fu_256_p4) + unsigned(ap_const_lv6_1));
    add_ln9_1_fu_556_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_289_p4));
    and_ln15_fu_436_p2 <= (xor_ln15_fu_424_p2 and icmp_ln12_fu_430_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln6_fu_340_p2)
    begin
        if ((icmp_ln6_fu_340_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_311_p4_assign_proc : process(c_0_reg_307, icmp_ln6_reg_754, ap_CS_fsm_pp0_stage0, select_ln15_6_reg_796, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_311_p4 <= select_ln15_6_reg_796;
        else 
            ap_phi_mux_c_0_phi_fu_311_p4 <= c_0_reg_307;
        end if; 
    end process;


    ap_phi_mux_f_0_0_phi_fu_333_p4_assign_proc : process(f_0_0_reg_329, icmp_ln6_reg_754, ap_CS_fsm_pp0_stage0, add_ln12_reg_876, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_0_phi_fu_333_p4 <= add_ln12_reg_876;
        else 
            ap_phi_mux_f_0_0_phi_fu_333_p4 <= f_0_0_reg_329;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_278_p4_assign_proc : process(i_0_reg_274, icmp_ln6_reg_754, ap_CS_fsm_pp0_stage0, select_ln6_reg_773, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_278_p4 <= select_ln6_reg_773;
        else 
            ap_phi_mux_i_0_phi_fu_278_p4 <= i_0_reg_274;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_300_p4_assign_proc : process(i_1_reg_296, icmp_ln6_reg_754, ap_CS_fsm_pp0_stage0, select_ln9_reg_811, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_1_phi_fu_300_p4 <= select_ln9_reg_811;
        else 
            ap_phi_mux_i_1_phi_fu_300_p4 <= i_1_reg_296;
        end if; 
    end process;


    ap_phi_mux_i_2_0_phi_fu_322_p4_assign_proc : process(i_2_0_reg_318, icmp_ln6_reg_754, ap_CS_fsm_pp0_stage0, add_ln15_2_reg_871, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_2_0_phi_fu_322_p4 <= add_ln15_2_reg_871;
        else 
            ap_phi_mux_i_2_0_phi_fu_322_p4 <= i_2_0_reg_318;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten17_phi_fu_256_p4_assign_proc : process(indvar_flatten17_reg_252, icmp_ln6_reg_754, ap_CS_fsm_pp0_stage0, add_ln6_reg_758, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten17_phi_fu_256_p4 <= add_ln6_reg_758;
        else 
            ap_phi_mux_indvar_flatten17_phi_fu_256_p4 <= indvar_flatten17_reg_252;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_289_p4_assign_proc : process(indvar_flatten_reg_285, icmp_ln6_reg_754, ap_CS_fsm_pp0_stage0, select_ln9_1_reg_881, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_289_p4 <= select_ln9_1_reg_881;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_289_p4 <= indvar_flatten_reg_285;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_267_p4_assign_proc : process(r_0_reg_263, icmp_ln6_reg_754, ap_CS_fsm_pp0_stage0, select_ln15_3_reg_768, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_267_p4 <= select_ln15_3_reg_768;
        else 
            ap_phi_mux_r_0_phi_fu_267_p4 <= r_0_reg_263;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_450_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln15_1_fu_378_p3));
    empty_2_fu_518_p1 <= select_ln15_5_fu_476_p3(4 - 1 downto 0);

    flat_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln14_3_fu_562_p1, ap_block_pp0_stage1, zext_ln14_6_fu_615_p1, ap_block_pp0_stage2, zext_ln14_8_fu_669_p1, ap_block_pp0_stage3, zext_ln14_10_fu_739_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            flat_array_address0 <= zext_ln14_10_fu_739_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            flat_array_address0 <= zext_ln14_8_fu_669_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            flat_array_address0 <= zext_ln14_6_fu_615_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            flat_array_address0 <= zext_ln14_3_fu_562_p1(9 - 1 downto 0);
        else 
            flat_array_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln14_5_fu_571_p1, ap_block_pp0_stage2, zext_ln14_7_fu_625_p1, ap_block_pp0_stage3, zext_ln14_9_fu_679_p1, zext_ln14_11_fu_749_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            flat_array_address1 <= zext_ln14_11_fu_749_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            flat_array_address1 <= zext_ln14_9_fu_679_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            flat_array_address1 <= zext_ln14_7_fu_625_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            flat_array_address1 <= zext_ln14_5_fu_571_p1(9 - 1 downto 0);
        else 
            flat_array_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            flat_array_ce0 <= ap_const_logic_1;
        else 
            flat_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            flat_array_ce1 <= ap_const_logic_1;
        else 
            flat_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_d0 <= max_pool_out_q0;
    flat_array_d1 <= max_pool_out_q1;

    flat_array_we0_assign_proc : process(icmp_ln6_reg_754, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            flat_array_we0 <= ap_const_logic_1;
        else 
            flat_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_we1_assign_proc : process(icmp_ln6_reg_754, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_754 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            flat_array_we1 <= ap_const_logic_1;
        else 
            flat_array_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln12_fu_430_p2 <= "1" when (ap_phi_mux_f_0_0_phi_fu_333_p4 = ap_const_lv5_10) else "0";
    icmp_ln6_fu_340_p2 <= "1" when (ap_phi_mux_indvar_flatten17_phi_fu_256_p4 = ap_const_lv6_32) else "0";
    icmp_ln9_fu_364_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_289_p4 = ap_const_lv5_A) else "0";

    max_pool_out_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln14_4_fu_532_p1, ap_block_pp0_stage1, zext_ln14_13_fu_588_p1, ap_block_pp0_stage2, zext_ln14_15_fu_642_p1, ap_block_pp0_stage3, zext_ln14_17_fu_696_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                max_pool_out_address0 <= zext_ln14_17_fu_696_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                max_pool_out_address0 <= zext_ln14_15_fu_642_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                max_pool_out_address0 <= zext_ln14_13_fu_588_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                max_pool_out_address0 <= zext_ln14_4_fu_532_p1(9 - 1 downto 0);
            else 
                max_pool_out_address0 <= "XXXXXXXXX";
            end if;
        else 
            max_pool_out_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_out_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln14_12_fu_551_p1, ap_block_pp0_stage1, zext_ln14_14_fu_605_p1, ap_block_pp0_stage2, zext_ln14_16_fu_659_p1, ap_block_pp0_stage3, zext_ln14_18_fu_713_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                max_pool_out_address1 <= zext_ln14_18_fu_713_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                max_pool_out_address1 <= zext_ln14_16_fu_659_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                max_pool_out_address1 <= zext_ln14_14_fu_605_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                max_pool_out_address1 <= zext_ln14_12_fu_551_p1(9 - 1 downto 0);
            else 
                max_pool_out_address1 <= "XXXXXXXXX";
            end if;
        else 
            max_pool_out_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            max_pool_out_ce1 <= ap_const_logic_1;
        else 
            max_pool_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln12_1_fu_576_p2 <= (empty_2_reg_816 or ap_const_lv4_2);
    or_ln12_2_fu_593_p2 <= (empty_2_reg_816 or ap_const_lv4_3);
    or_ln12_3_fu_630_p2 <= (empty_2_reg_816 or ap_const_lv4_4);
    or_ln12_4_fu_647_p2 <= (empty_2_reg_816 or ap_const_lv4_5);
    or_ln12_5_fu_684_p2 <= (empty_2_reg_816 or ap_const_lv4_6);
    or_ln12_6_fu_701_p2 <= (empty_2_reg_816 or ap_const_lv4_7);
    or_ln12_fu_537_p2 <= (empty_2_fu_518_p1 or ap_const_lv4_1);
    or_ln15_1_fu_610_p2 <= (select_ln15_4_reg_778 or ap_const_lv9_2);
    or_ln15_2_fu_620_p2 <= (select_ln15_4_reg_778 or ap_const_lv9_3);
    or_ln15_3_fu_664_p2 <= (select_ln15_4_reg_778 or ap_const_lv9_4);
    or_ln15_4_fu_674_p2 <= (select_ln15_4_reg_778 or ap_const_lv9_5);
    or_ln15_5_fu_734_p2 <= (select_ln15_4_reg_778 or ap_const_lv9_6);
    or_ln15_6_fu_744_p2 <= (select_ln15_4_reg_778 or ap_const_lv9_7);
    or_ln15_7_fu_470_p2 <= (icmp_ln9_fu_364_p2 or and_ln15_fu_436_p2);
    or_ln15_fu_566_p2 <= (select_ln15_4_reg_778 or ap_const_lv9_1);
    r_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_r_0_phi_fu_267_p4));
    select_ln15_1_fu_378_p3 <= 
        ap_const_lv3_0 when (icmp_ln9_fu_364_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_311_p4;
    select_ln15_2_fu_386_p3 <= 
        add_ln15_fu_358_p2 when (icmp_ln9_fu_364_p2(0) = '1') else 
        ap_phi_mux_i_2_0_phi_fu_322_p4;
    select_ln15_3_fu_394_p3 <= 
        r_fu_352_p2 when (icmp_ln9_fu_364_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_267_p4;
    select_ln15_4_fu_462_p3 <= 
        add_ln15_1_fu_456_p2 when (and_ln15_fu_436_p2(0) = '1') else 
        select_ln15_2_fu_386_p3;
    select_ln15_5_fu_476_p3 <= 
        ap_const_lv5_0 when (or_ln15_7_fu_470_p2(0) = '1') else 
        ap_phi_mux_f_0_0_phi_fu_333_p4;
    select_ln15_6_fu_484_p3 <= 
        c_fu_450_p2 when (and_ln15_fu_436_p2(0) = '1') else 
        select_ln15_1_fu_378_p3;
    select_ln15_fu_370_p3 <= 
        add_ln15_fu_358_p2 when (icmp_ln9_fu_364_p2(0) = '1') else 
        ap_phi_mux_i_1_phi_fu_300_p4;
    select_ln6_fu_442_p3 <= 
        add_ln15_fu_358_p2 when (icmp_ln9_fu_364_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_278_p4;
    select_ln9_1_fu_728_p3 <= 
        ap_const_lv5_1 when (icmp_ln9_reg_763(0) = '1') else 
        add_ln9_1_reg_836;
    select_ln9_fu_510_p3 <= 
        add_ln15_1_fu_456_p2 when (and_ln15_fu_436_p2(0) = '1') else 
        select_ln15_fu_370_p3;
    tmp_1_fu_543_p3 <= (add_ln14_1_fu_496_p2 & or_ln12_fu_537_p2);
    tmp_3_cast_fu_502_p3 <= (add_ln14_1_fu_496_p2 & ap_const_lv4_0);
    tmp_3_fu_581_p3 <= (add_ln14_1_reg_801 & or_ln12_1_fu_576_p2);
    tmp_4_fu_598_p3 <= (add_ln14_1_reg_801 & or_ln12_2_fu_593_p2);
    tmp_5_fu_635_p3 <= (add_ln14_1_reg_801 & or_ln12_3_fu_630_p2);
    tmp_6_fu_652_p3 <= (add_ln14_1_reg_801 & or_ln12_4_fu_647_p2);
    tmp_7_fu_689_p3 <= (add_ln14_1_reg_801 & or_ln12_5_fu_684_p2);
    tmp_8_fu_706_p3 <= (add_ln14_1_reg_801 & or_ln12_6_fu_701_p2);
    tmp_fu_406_p3 <= (select_ln15_3_fu_394_p3 & ap_const_lv2_0);
    xor_ln15_fu_424_p2 <= (icmp_ln9_fu_364_p2 xor ap_const_lv1_1);
    zext_ln14_10_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_5_fu_734_p2),64));
    zext_ln14_11_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_6_fu_744_p2),64));
    zext_ln14_12_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_543_p3),64));
    zext_ln14_13_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_581_p3),64));
    zext_ln14_14_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_598_p3),64));
    zext_ln14_15_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_635_p3),64));
    zext_ln14_16_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_652_p3),64));
    zext_ln14_17_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_689_p3),64));
    zext_ln14_18_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_706_p3),64));
    zext_ln14_1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_406_p3),6));
    zext_ln14_2_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_5_fu_476_p3),10));
    zext_ln14_3_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_4_reg_778),64));
    zext_ln14_4_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_2_fu_526_p2),64));
    zext_ln14_5_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_fu_566_p2),64));
    zext_ln14_6_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_1_fu_610_p2),64));
    zext_ln14_7_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_2_fu_620_p2),64));
    zext_ln14_8_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_3_fu_664_p2),64));
    zext_ln14_9_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_4_fu_674_p2),64));
    zext_ln14_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_3_fu_394_p3),6));
    zext_ln15_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_6_fu_484_p3),6));
end behav;
