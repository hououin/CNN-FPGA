// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "flat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic flat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic flat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> flat::ap_ST_fsm_state1 = "1";
const sc_lv<3> flat::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> flat::ap_ST_fsm_state4 = "100";
const sc_lv<32> flat::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool flat::ap_const_boolean_1 = true;
const sc_lv<32> flat::ap_const_lv32_1 = "1";
const bool flat::ap_const_boolean_0 = false;
const sc_lv<1> flat::ap_const_lv1_0 = "0";
const sc_lv<1> flat::ap_const_lv1_1 = "1";
const sc_lv<9> flat::ap_const_lv9_0 = "000000000";
const sc_lv<3> flat::ap_const_lv3_0 = "000";
const sc_lv<8> flat::ap_const_lv8_0 = "00000000";
const sc_lv<5> flat::ap_const_lv5_0 = "00000";
const sc_lv<9> flat::ap_const_lv9_190 = "110010000";
const sc_lv<9> flat::ap_const_lv9_1 = "1";
const sc_lv<3> flat::ap_const_lv3_1 = "1";
const sc_lv<9> flat::ap_const_lv9_50 = "1010000";
const sc_lv<8> flat::ap_const_lv8_50 = "1010000";
const sc_lv<2> flat::ap_const_lv2_0 = "00";
const sc_lv<5> flat::ap_const_lv5_10 = "10000";
const sc_lv<9> flat::ap_const_lv9_10 = "10000";
const sc_lv<4> flat::ap_const_lv4_0 = "0000";
const sc_lv<5> flat::ap_const_lv5_1 = "1";
const sc_lv<8> flat::ap_const_lv8_1 = "1";
const sc_lv<32> flat::ap_const_lv32_2 = "10";

flat::flat(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln14_1_fu_345_p2);
    sensitive << ( add_ln14_fu_267_p2 );
    sensitive << ( zext_ln15_fu_341_p1 );

    SC_METHOD(thread_add_ln14_2_fu_371_p2);
    sensitive << ( tmp_3_cast_fu_351_p3 );
    sensitive << ( zext_ln14_2_fu_367_p1 );

    SC_METHOD(thread_add_ln14_fu_267_p2);
    sensitive << ( zext_ln14_fu_251_p1 );
    sensitive << ( zext_ln14_1_fu_263_p1 );

    SC_METHOD(thread_add_ln15_1_fu_382_p2);
    sensitive << ( select_ln15_4_fu_311_p3 );

    SC_METHOD(thread_add_ln15_2_fu_305_p2);
    sensitive << ( select_ln15_fu_219_p3 );

    SC_METHOD(thread_add_ln15_fu_207_p2);
    sensitive << ( i_0_reg_123 );

    SC_METHOD(thread_add_ln6_fu_195_p2);
    sensitive << ( indvar_flatten17_reg_101 );

    SC_METHOD(thread_add_ln9_fu_394_p2);
    sensitive << ( indvar_flatten_reg_134 );

    SC_METHOD(thread_and_ln15_fu_285_p2);
    sensitive << ( icmp_ln12_fu_279_p2 );
    sensitive << ( xor_ln15_fu_273_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln6_fu_189_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_c_0_phi_fu_160_p4);
    sensitive << ( c_0_reg_156 );
    sensitive << ( icmp_ln6_reg_412 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( select_ln15_6_reg_436 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_r_0_phi_fu_116_p4);
    sensitive << ( r_0_reg_112 );
    sensitive << ( icmp_ln6_reg_412 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( select_ln15_3_reg_421 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_c_fu_299_p2);
    sensitive << ( select_ln15_1_fu_227_p3 );

    SC_METHOD(thread_f_fu_388_p2);
    sensitive << ( select_ln15_5_fu_325_p3 );

    SC_METHOD(thread_flat_array_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln14_3_fu_408_p1 );

    SC_METHOD(thread_flat_array_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_flat_array_d0);
    sensitive << ( max_pool_out_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_flat_array_we0);
    sensitive << ( icmp_ln6_reg_412 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_icmp_ln12_fu_279_p2);
    sensitive << ( f_0_reg_178 );
    sensitive << ( icmp_ln6_fu_189_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln6_fu_189_p2);
    sensitive << ( indvar_flatten17_reg_101 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln9_fu_213_p2);
    sensitive << ( indvar_flatten_reg_134 );
    sensitive << ( icmp_ln6_fu_189_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_max_pool_out_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln14_4_fu_377_p1 );

    SC_METHOD(thread_max_pool_out_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_or_ln15_fu_319_p2);
    sensitive << ( icmp_ln9_fu_213_p2 );
    sensitive << ( and_ln15_fu_285_p2 );

    SC_METHOD(thread_r_fu_201_p2);
    sensitive << ( ap_phi_mux_r_0_phi_fu_116_p4 );

    SC_METHOD(thread_select_ln15_1_fu_227_p3);
    sensitive << ( ap_phi_mux_c_0_phi_fu_160_p4 );
    sensitive << ( icmp_ln9_fu_213_p2 );

    SC_METHOD(thread_select_ln15_2_fu_235_p3);
    sensitive << ( i_2_reg_167 );
    sensitive << ( icmp_ln9_fu_213_p2 );
    sensitive << ( add_ln15_fu_207_p2 );

    SC_METHOD(thread_select_ln15_3_fu_243_p3);
    sensitive << ( ap_phi_mux_r_0_phi_fu_116_p4 );
    sensitive << ( icmp_ln9_fu_213_p2 );
    sensitive << ( r_fu_201_p2 );

    SC_METHOD(thread_select_ln15_4_fu_311_p3);
    sensitive << ( and_ln15_fu_285_p2 );
    sensitive << ( add_ln15_2_fu_305_p2 );
    sensitive << ( select_ln15_2_fu_235_p3 );

    SC_METHOD(thread_select_ln15_5_fu_325_p3);
    sensitive << ( f_0_reg_178 );
    sensitive << ( or_ln15_fu_319_p2 );

    SC_METHOD(thread_select_ln15_6_fu_333_p3);
    sensitive << ( select_ln15_1_fu_227_p3 );
    sensitive << ( and_ln15_fu_285_p2 );
    sensitive << ( c_fu_299_p2 );

    SC_METHOD(thread_select_ln15_fu_219_p3);
    sensitive << ( i_1_reg_145 );
    sensitive << ( icmp_ln9_fu_213_p2 );
    sensitive << ( add_ln15_fu_207_p2 );

    SC_METHOD(thread_select_ln6_fu_291_p3);
    sensitive << ( i_0_reg_123 );
    sensitive << ( icmp_ln9_fu_213_p2 );
    sensitive << ( add_ln15_fu_207_p2 );

    SC_METHOD(thread_select_ln9_1_fu_400_p3);
    sensitive << ( icmp_ln9_fu_213_p2 );
    sensitive << ( add_ln9_fu_394_p2 );

    SC_METHOD(thread_select_ln9_fu_359_p3);
    sensitive << ( select_ln15_fu_219_p3 );
    sensitive << ( and_ln15_fu_285_p2 );
    sensitive << ( add_ln15_2_fu_305_p2 );

    SC_METHOD(thread_tmp_3_cast_fu_351_p3);
    sensitive << ( add_ln14_1_fu_345_p2 );

    SC_METHOD(thread_tmp_fu_255_p3);
    sensitive << ( select_ln15_3_fu_243_p3 );

    SC_METHOD(thread_xor_ln15_fu_273_p2);
    sensitive << ( icmp_ln9_fu_213_p2 );

    SC_METHOD(thread_zext_ln14_1_fu_263_p1);
    sensitive << ( tmp_fu_255_p3 );

    SC_METHOD(thread_zext_ln14_2_fu_367_p1);
    sensitive << ( select_ln15_5_fu_325_p3 );

    SC_METHOD(thread_zext_ln14_3_fu_408_p1);
    sensitive << ( select_ln15_4_reg_431 );

    SC_METHOD(thread_zext_ln14_4_fu_377_p1);
    sensitive << ( add_ln14_2_fu_371_p2 );

    SC_METHOD(thread_zext_ln14_fu_251_p1);
    sensitive << ( select_ln15_3_fu_243_p3 );

    SC_METHOD(thread_zext_ln15_fu_341_p1);
    sensitive << ( select_ln15_6_fu_333_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln6_fu_189_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "flat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, max_pool_out_address0, "(port)max_pool_out_address0");
    sc_trace(mVcdFile, max_pool_out_ce0, "(port)max_pool_out_ce0");
    sc_trace(mVcdFile, max_pool_out_q0, "(port)max_pool_out_q0");
    sc_trace(mVcdFile, flat_array_address0, "(port)flat_array_address0");
    sc_trace(mVcdFile, flat_array_ce0, "(port)flat_array_ce0");
    sc_trace(mVcdFile, flat_array_we0, "(port)flat_array_we0");
    sc_trace(mVcdFile, flat_array_d0, "(port)flat_array_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvar_flatten17_reg_101, "indvar_flatten17_reg_101");
    sc_trace(mVcdFile, r_0_reg_112, "r_0_reg_112");
    sc_trace(mVcdFile, i_0_reg_123, "i_0_reg_123");
    sc_trace(mVcdFile, indvar_flatten_reg_134, "indvar_flatten_reg_134");
    sc_trace(mVcdFile, i_1_reg_145, "i_1_reg_145");
    sc_trace(mVcdFile, c_0_reg_156, "c_0_reg_156");
    sc_trace(mVcdFile, i_2_reg_167, "i_2_reg_167");
    sc_trace(mVcdFile, f_0_reg_178, "f_0_reg_178");
    sc_trace(mVcdFile, icmp_ln6_fu_189_p2, "icmp_ln6_fu_189_p2");
    sc_trace(mVcdFile, icmp_ln6_reg_412, "icmp_ln6_reg_412");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln6_fu_195_p2, "add_ln6_fu_195_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, select_ln15_3_fu_243_p3, "select_ln15_3_fu_243_p3");
    sc_trace(mVcdFile, select_ln15_3_reg_421, "select_ln15_3_reg_421");
    sc_trace(mVcdFile, select_ln6_fu_291_p3, "select_ln6_fu_291_p3");
    sc_trace(mVcdFile, select_ln15_4_fu_311_p3, "select_ln15_4_fu_311_p3");
    sc_trace(mVcdFile, select_ln15_4_reg_431, "select_ln15_4_reg_431");
    sc_trace(mVcdFile, select_ln15_6_fu_333_p3, "select_ln15_6_fu_333_p3");
    sc_trace(mVcdFile, select_ln15_6_reg_436, "select_ln15_6_reg_436");
    sc_trace(mVcdFile, select_ln9_fu_359_p3, "select_ln9_fu_359_p3");
    sc_trace(mVcdFile, add_ln15_1_fu_382_p2, "add_ln15_1_fu_382_p2");
    sc_trace(mVcdFile, f_fu_388_p2, "f_fu_388_p2");
    sc_trace(mVcdFile, select_ln9_1_fu_400_p3, "select_ln9_1_fu_400_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_phi_mux_r_0_phi_fu_116_p4, "ap_phi_mux_r_0_phi_fu_116_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_mux_c_0_phi_fu_160_p4, "ap_phi_mux_c_0_phi_fu_160_p4");
    sc_trace(mVcdFile, zext_ln14_4_fu_377_p1, "zext_ln14_4_fu_377_p1");
    sc_trace(mVcdFile, zext_ln14_3_fu_408_p1, "zext_ln14_3_fu_408_p1");
    sc_trace(mVcdFile, icmp_ln9_fu_213_p2, "icmp_ln9_fu_213_p2");
    sc_trace(mVcdFile, add_ln15_fu_207_p2, "add_ln15_fu_207_p2");
    sc_trace(mVcdFile, r_fu_201_p2, "r_fu_201_p2");
    sc_trace(mVcdFile, tmp_fu_255_p3, "tmp_fu_255_p3");
    sc_trace(mVcdFile, zext_ln14_fu_251_p1, "zext_ln14_fu_251_p1");
    sc_trace(mVcdFile, zext_ln14_1_fu_263_p1, "zext_ln14_1_fu_263_p1");
    sc_trace(mVcdFile, icmp_ln12_fu_279_p2, "icmp_ln12_fu_279_p2");
    sc_trace(mVcdFile, xor_ln15_fu_273_p2, "xor_ln15_fu_273_p2");
    sc_trace(mVcdFile, select_ln15_1_fu_227_p3, "select_ln15_1_fu_227_p3");
    sc_trace(mVcdFile, select_ln15_fu_219_p3, "select_ln15_fu_219_p3");
    sc_trace(mVcdFile, and_ln15_fu_285_p2, "and_ln15_fu_285_p2");
    sc_trace(mVcdFile, add_ln15_2_fu_305_p2, "add_ln15_2_fu_305_p2");
    sc_trace(mVcdFile, select_ln15_2_fu_235_p3, "select_ln15_2_fu_235_p3");
    sc_trace(mVcdFile, or_ln15_fu_319_p2, "or_ln15_fu_319_p2");
    sc_trace(mVcdFile, c_fu_299_p2, "c_fu_299_p2");
    sc_trace(mVcdFile, add_ln14_fu_267_p2, "add_ln14_fu_267_p2");
    sc_trace(mVcdFile, zext_ln15_fu_341_p1, "zext_ln15_fu_341_p1");
    sc_trace(mVcdFile, add_ln14_1_fu_345_p2, "add_ln14_1_fu_345_p2");
    sc_trace(mVcdFile, select_ln15_5_fu_325_p3, "select_ln15_5_fu_325_p3");
    sc_trace(mVcdFile, tmp_3_cast_fu_351_p3, "tmp_3_cast_fu_351_p3");
    sc_trace(mVcdFile, zext_ln14_2_fu_367_p1, "zext_ln14_2_fu_367_p1");
    sc_trace(mVcdFile, add_ln14_2_fu_371_p2, "add_ln14_2_fu_371_p2");
    sc_trace(mVcdFile, add_ln9_fu_394_p2, "add_ln9_fu_394_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("flat.hdltvin.dat");
    mHdltvoutHandle.open("flat.hdltvout.dat");
}

flat::~flat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void flat::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_reg_412.read(), ap_const_lv1_0))) {
        c_0_reg_156 = select_ln15_6_reg_436.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        c_0_reg_156 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_0))) {
        f_0_reg_178 = f_fu_388_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        f_0_reg_178 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_0))) {
        i_0_reg_123 = select_ln6_fu_291_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_123 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_0))) {
        i_1_reg_145 = select_ln9_fu_359_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_1_reg_145 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_0))) {
        i_2_reg_167 = add_ln15_1_fu_382_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_2_reg_167 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_0))) {
        indvar_flatten17_reg_101 = add_ln6_fu_195_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvar_flatten17_reg_101 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_0))) {
        indvar_flatten_reg_134 = select_ln9_1_fu_400_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvar_flatten_reg_134 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_reg_412.read(), ap_const_lv1_0))) {
        r_0_reg_112 = select_ln15_3_reg_421.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_0_reg_112 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln6_reg_412 = icmp_ln6_fu_189_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_0))) {
        select_ln15_3_reg_421 = select_ln15_3_fu_243_p3.read();
        select_ln15_6_reg_436 = select_ln15_6_fu_333_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_0))) {
        select_ln15_4_reg_431 = select_ln15_4_fu_311_p3.read();
    }
}

void flat::thread_add_ln14_1_fu_345_p2() {
    add_ln14_1_fu_345_p2 = (!add_ln14_fu_267_p2.read().is_01() || !zext_ln15_fu_341_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(add_ln14_fu_267_p2.read()) + sc_biguint<6>(zext_ln15_fu_341_p1.read()));
}

void flat::thread_add_ln14_2_fu_371_p2() {
    add_ln14_2_fu_371_p2 = (!tmp_3_cast_fu_351_p3.read().is_01() || !zext_ln14_2_fu_367_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_3_cast_fu_351_p3.read()) + sc_biguint<10>(zext_ln14_2_fu_367_p1.read()));
}

void flat::thread_add_ln14_fu_267_p2() {
    add_ln14_fu_267_p2 = (!zext_ln14_fu_251_p1.read().is_01() || !zext_ln14_1_fu_263_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln14_fu_251_p1.read()) + sc_biguint<6>(zext_ln14_1_fu_263_p1.read()));
}

void flat::thread_add_ln15_1_fu_382_p2() {
    add_ln15_1_fu_382_p2 = (!select_ln15_4_fu_311_p3.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(select_ln15_4_fu_311_p3.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void flat::thread_add_ln15_2_fu_305_p2() {
    add_ln15_2_fu_305_p2 = (!select_ln15_fu_219_p3.read().is_01() || !ap_const_lv9_10.is_01())? sc_lv<9>(): (sc_biguint<9>(select_ln15_fu_219_p3.read()) + sc_biguint<9>(ap_const_lv9_10));
}

void flat::thread_add_ln15_fu_207_p2() {
    add_ln15_fu_207_p2 = (!i_0_reg_123.read().is_01() || !ap_const_lv9_50.is_01())? sc_lv<9>(): (sc_biguint<9>(i_0_reg_123.read()) + sc_biguint<9>(ap_const_lv9_50));
}

void flat::thread_add_ln6_fu_195_p2() {
    add_ln6_fu_195_p2 = (!indvar_flatten17_reg_101.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(indvar_flatten17_reg_101.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void flat::thread_add_ln9_fu_394_p2() {
    add_ln9_fu_394_p2 = (!indvar_flatten_reg_134.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(indvar_flatten_reg_134.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void flat::thread_and_ln15_fu_285_p2() {
    and_ln15_fu_285_p2 = (icmp_ln12_fu_279_p2.read() & xor_ln15_fu_273_p2.read());
}

void flat::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void flat::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void flat::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void flat::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void flat::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void flat::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void flat::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void flat::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void flat::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void flat::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void flat::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void flat::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void flat::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void flat::thread_ap_phi_mux_c_0_phi_fu_160_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_reg_412.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_c_0_phi_fu_160_p4 = select_ln15_6_reg_436.read();
    } else {
        ap_phi_mux_c_0_phi_fu_160_p4 = c_0_reg_156.read();
    }
}

void flat::thread_ap_phi_mux_r_0_phi_fu_116_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_reg_412.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_r_0_phi_fu_116_p4 = select_ln15_3_reg_421.read();
    } else {
        ap_phi_mux_r_0_phi_fu_116_p4 = r_0_reg_112.read();
    }
}

void flat::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void flat::thread_c_fu_299_p2() {
    c_fu_299_p2 = (!select_ln15_1_fu_227_p3.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(select_ln15_1_fu_227_p3.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void flat::thread_f_fu_388_p2() {
    f_fu_388_p2 = (!select_ln15_5_fu_325_p3.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(select_ln15_5_fu_325_p3.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void flat::thread_flat_array_address0() {
    flat_array_address0 =  (sc_lv<9>) (zext_ln14_3_fu_408_p1.read());
}

void flat::thread_flat_array_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        flat_array_ce0 = ap_const_logic_1;
    } else {
        flat_array_ce0 = ap_const_logic_0;
    }
}

void flat::thread_flat_array_d0() {
    flat_array_d0 = max_pool_out_q0.read();
}

void flat::thread_flat_array_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_reg_412.read(), ap_const_lv1_0))) {
        flat_array_we0 = ap_const_logic_1;
    } else {
        flat_array_we0 = ap_const_logic_0;
    }
}

void flat::thread_icmp_ln12_fu_279_p2() {
    icmp_ln12_fu_279_p2 = (!f_0_reg_178.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(f_0_reg_178.read() == ap_const_lv5_10);
}

void flat::thread_icmp_ln6_fu_189_p2() {
    icmp_ln6_fu_189_p2 = (!indvar_flatten17_reg_101.read().is_01() || !ap_const_lv9_190.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten17_reg_101.read() == ap_const_lv9_190);
}

void flat::thread_icmp_ln9_fu_213_p2() {
    icmp_ln9_fu_213_p2 = (!indvar_flatten_reg_134.read().is_01() || !ap_const_lv8_50.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_134.read() == ap_const_lv8_50);
}

void flat::thread_max_pool_out_address0() {
    max_pool_out_address0 =  (sc_lv<9>) (zext_ln14_4_fu_377_p1.read());
}

void flat::thread_max_pool_out_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        max_pool_out_ce0 = ap_const_logic_1;
    } else {
        max_pool_out_ce0 = ap_const_logic_0;
    }
}

void flat::thread_or_ln15_fu_319_p2() {
    or_ln15_fu_319_p2 = (and_ln15_fu_285_p2.read() | icmp_ln9_fu_213_p2.read());
}

void flat::thread_r_fu_201_p2() {
    r_fu_201_p2 = (!ap_phi_mux_r_0_phi_fu_116_p4.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(ap_phi_mux_r_0_phi_fu_116_p4.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void flat::thread_select_ln15_1_fu_227_p3() {
    select_ln15_1_fu_227_p3 = (!icmp_ln9_fu_213_p2.read()[0].is_01())? sc_lv<3>(): ((icmp_ln9_fu_213_p2.read()[0].to_bool())? ap_const_lv3_0: ap_phi_mux_c_0_phi_fu_160_p4.read());
}

void flat::thread_select_ln15_2_fu_235_p3() {
    select_ln15_2_fu_235_p3 = (!icmp_ln9_fu_213_p2.read()[0].is_01())? sc_lv<9>(): ((icmp_ln9_fu_213_p2.read()[0].to_bool())? add_ln15_fu_207_p2.read(): i_2_reg_167.read());
}

void flat::thread_select_ln15_3_fu_243_p3() {
    select_ln15_3_fu_243_p3 = (!icmp_ln9_fu_213_p2.read()[0].is_01())? sc_lv<3>(): ((icmp_ln9_fu_213_p2.read()[0].to_bool())? r_fu_201_p2.read(): ap_phi_mux_r_0_phi_fu_116_p4.read());
}

void flat::thread_select_ln15_4_fu_311_p3() {
    select_ln15_4_fu_311_p3 = (!and_ln15_fu_285_p2.read()[0].is_01())? sc_lv<9>(): ((and_ln15_fu_285_p2.read()[0].to_bool())? add_ln15_2_fu_305_p2.read(): select_ln15_2_fu_235_p3.read());
}

void flat::thread_select_ln15_5_fu_325_p3() {
    select_ln15_5_fu_325_p3 = (!or_ln15_fu_319_p2.read()[0].is_01())? sc_lv<5>(): ((or_ln15_fu_319_p2.read()[0].to_bool())? ap_const_lv5_0: f_0_reg_178.read());
}

void flat::thread_select_ln15_6_fu_333_p3() {
    select_ln15_6_fu_333_p3 = (!and_ln15_fu_285_p2.read()[0].is_01())? sc_lv<3>(): ((and_ln15_fu_285_p2.read()[0].to_bool())? c_fu_299_p2.read(): select_ln15_1_fu_227_p3.read());
}

void flat::thread_select_ln15_fu_219_p3() {
    select_ln15_fu_219_p3 = (!icmp_ln9_fu_213_p2.read()[0].is_01())? sc_lv<9>(): ((icmp_ln9_fu_213_p2.read()[0].to_bool())? add_ln15_fu_207_p2.read(): i_1_reg_145.read());
}

void flat::thread_select_ln6_fu_291_p3() {
    select_ln6_fu_291_p3 = (!icmp_ln9_fu_213_p2.read()[0].is_01())? sc_lv<9>(): ((icmp_ln9_fu_213_p2.read()[0].to_bool())? add_ln15_fu_207_p2.read(): i_0_reg_123.read());
}

void flat::thread_select_ln9_1_fu_400_p3() {
    select_ln9_1_fu_400_p3 = (!icmp_ln9_fu_213_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln9_fu_213_p2.read()[0].to_bool())? ap_const_lv8_1: add_ln9_fu_394_p2.read());
}

void flat::thread_select_ln9_fu_359_p3() {
    select_ln9_fu_359_p3 = (!and_ln15_fu_285_p2.read()[0].is_01())? sc_lv<9>(): ((and_ln15_fu_285_p2.read()[0].to_bool())? add_ln15_2_fu_305_p2.read(): select_ln15_fu_219_p3.read());
}

void flat::thread_tmp_3_cast_fu_351_p3() {
    tmp_3_cast_fu_351_p3 = esl_concat<6,4>(add_ln14_1_fu_345_p2.read(), ap_const_lv4_0);
}

void flat::thread_tmp_fu_255_p3() {
    tmp_fu_255_p3 = esl_concat<3,2>(select_ln15_3_fu_243_p3.read(), ap_const_lv2_0);
}

void flat::thread_xor_ln15_fu_273_p2() {
    xor_ln15_fu_273_p2 = (icmp_ln9_fu_213_p2.read() ^ ap_const_lv1_1);
}

void flat::thread_zext_ln14_1_fu_263_p1() {
    zext_ln14_1_fu_263_p1 = esl_zext<6,5>(tmp_fu_255_p3.read());
}

void flat::thread_zext_ln14_2_fu_367_p1() {
    zext_ln14_2_fu_367_p1 = esl_zext<10,5>(select_ln15_5_fu_325_p3.read());
}

void flat::thread_zext_ln14_3_fu_408_p1() {
    zext_ln14_3_fu_408_p1 = esl_zext<64,9>(select_ln15_4_reg_431.read());
}

void flat::thread_zext_ln14_4_fu_377_p1() {
    zext_ln14_4_fu_377_p1 = esl_zext<64,10>(add_ln14_2_fu_371_p2.read());
}

void flat::thread_zext_ln14_fu_251_p1() {
    zext_ln14_fu_251_p1 = esl_zext<6,3>(select_ln15_3_fu_243_p3.read());
}

void flat::thread_zext_ln15_fu_341_p1() {
    zext_ln15_fu_341_p1 = esl_zext<6,3>(select_ln15_6_fu_333_p3.read());
}

void flat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln6_fu_189_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void flat::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_pool_out_address0\" :  \"" << max_pool_out_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_pool_out_ce0\" :  \"" << max_pool_out_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_pool_out_q0\" :  \"" << max_pool_out_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"flat_array_address0\" :  \"" << flat_array_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"flat_array_ce0\" :  \"" << flat_array_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"flat_array_we0\" :  \"" << flat_array_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"flat_array_d0\" :  \"" << flat_array_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

