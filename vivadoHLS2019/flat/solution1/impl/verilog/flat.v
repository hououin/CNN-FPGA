// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="flat,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=861,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=84,HLS_SYN_LUT=244,HLS_VERSION=2019_1}" *)

module flat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_q0,
        flat_array_address0,
        flat_array_ce0,
        flat_array_we0,
        flat_array_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] max_pool_out_address0;
output   max_pool_out_ce0;
input  [31:0] max_pool_out_q0;
output  [8:0] flat_array_address0;
output   flat_array_ce0;
output   flat_array_we0;
output  [31:0] flat_array_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_ce0;
reg flat_array_ce0;
reg flat_array_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] r_fu_158_p2;
reg   [2:0] r_reg_267;
wire    ap_CS_fsm_state2;
wire   [8:0] i_fu_164_p2;
reg   [8:0] i_reg_272;
wire   [0:0] icmp_ln6_fu_152_p2;
wire   [5:0] add_ln14_fu_186_p2;
reg   [5:0] add_ln14_reg_277;
wire   [2:0] c_fu_198_p2;
reg   [2:0] c_reg_285;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln15_fu_204_p2;
reg   [8:0] add_ln15_reg_290;
wire   [0:0] icmp_ln9_fu_192_p2;
wire   [9:0] tmp_4_cast_fu_219_p3;
reg   [9:0] tmp_4_cast_reg_295;
wire   [4:0] f_fu_233_p2;
reg   [4:0] f_reg_303;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln12_fu_227_p2;
wire   [8:0] add_ln15_1_fu_258_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] r_0_reg_85;
reg   [8:0] i_0_reg_96;
reg   [8:0] i_1_reg_108;
reg   [2:0] c_0_reg_119;
reg   [8:0] i_2_reg_130;
reg   [4:0] f_0_reg_141;
wire   [63:0] zext_ln14_5_fu_248_p1;
wire   [63:0] zext_ln14_3_fu_253_p1;
wire   [4:0] tmp_2_fu_174_p3;
wire   [5:0] zext_ln14_fu_170_p1;
wire   [5:0] zext_ln14_1_fu_182_p1;
wire   [5:0] zext_ln14_2_fu_210_p1;
wire   [5:0] add_ln14_1_fu_214_p2;
wire   [9:0] zext_ln14_4_fu_239_p1;
wire   [9:0] add_ln14_2_fu_243_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_119 <= c_reg_285;
    end else if (((icmp_ln6_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_119 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        f_0_reg_141 <= f_reg_303;
    end else if (((icmp_ln9_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_141 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_96 <= i_reg_272;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_96 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_108 <= add_ln15_reg_290;
    end else if (((icmp_ln6_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_108 <= i_0_reg_96;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_130 <= add_ln15_1_fu_258_p2;
    end else if (((icmp_ln9_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_130 <= i_1_reg_108;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_85 <= r_reg_267;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_85 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln14_reg_277 <= add_ln14_fu_186_p2;
        i_reg_272 <= i_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln15_reg_290 <= add_ln15_fu_204_p2;
        tmp_4_cast_reg_295[9 : 4] <= tmp_4_cast_fu_219_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_285 <= c_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_303 <= f_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_267 <= r_fu_158_p2;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_we0 = 1'b1;
    end else begin
        flat_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln12_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_1_fu_214_p2 = (zext_ln14_2_fu_210_p1 + add_ln14_reg_277);

assign add_ln14_2_fu_243_p2 = (tmp_4_cast_reg_295 + zext_ln14_4_fu_239_p1);

assign add_ln14_fu_186_p2 = (zext_ln14_fu_170_p1 + zext_ln14_1_fu_182_p1);

assign add_ln15_1_fu_258_p2 = (i_2_reg_130 + 9'd1);

assign add_ln15_fu_204_p2 = (i_1_reg_108 + 9'd16);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign c_fu_198_p2 = (c_0_reg_119 + 3'd1);

assign f_fu_233_p2 = (f_0_reg_141 + 5'd1);

assign flat_array_address0 = zext_ln14_3_fu_253_p1;

assign flat_array_d0 = max_pool_out_q0;

assign i_fu_164_p2 = (i_0_reg_96 + 9'd80);

assign icmp_ln12_fu_227_p2 = ((f_0_reg_141 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_152_p2 = ((r_0_reg_85 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_192_p2 = ((c_0_reg_119 == 3'd5) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln14_5_fu_248_p1;

assign r_fu_158_p2 = (r_0_reg_85 + 3'd1);

assign tmp_2_fu_174_p3 = {{r_0_reg_85}, {2'd0}};

assign tmp_4_cast_fu_219_p3 = {{add_ln14_1_fu_214_p2}, {4'd0}};

assign zext_ln14_1_fu_182_p1 = tmp_2_fu_174_p3;

assign zext_ln14_2_fu_210_p1 = c_0_reg_119;

assign zext_ln14_3_fu_253_p1 = i_2_reg_130;

assign zext_ln14_4_fu_239_p1 = f_0_reg_141;

assign zext_ln14_5_fu_248_p1 = add_ln14_2_fu_243_p2;

assign zext_ln14_fu_170_p1 = r_0_reg_85;

always @ (posedge ap_clk) begin
    tmp_4_cast_reg_295[3:0] <= 4'b0000;
end

endmodule //flat
