// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "flat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic flat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic flat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> flat::ap_ST_fsm_state1 = "1";
const sc_lv<5> flat::ap_ST_fsm_state2 = "10";
const sc_lv<5> flat::ap_ST_fsm_state3 = "100";
const sc_lv<5> flat::ap_ST_fsm_state4 = "1000";
const sc_lv<5> flat::ap_ST_fsm_state5 = "10000";
const sc_lv<32> flat::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> flat::ap_const_lv32_1 = "1";
const sc_lv<1> flat::ap_const_lv1_0 = "0";
const sc_lv<32> flat::ap_const_lv32_2 = "10";
const sc_lv<32> flat::ap_const_lv32_3 = "11";
const sc_lv<32> flat::ap_const_lv32_4 = "100";
const sc_lv<3> flat::ap_const_lv3_0 = "000";
const sc_lv<1> flat::ap_const_lv1_1 = "1";
const sc_lv<9> flat::ap_const_lv9_0 = "000000000";
const sc_lv<5> flat::ap_const_lv5_0 = "00000";
const sc_lv<3> flat::ap_const_lv3_5 = "101";
const sc_lv<3> flat::ap_const_lv3_1 = "1";
const sc_lv<9> flat::ap_const_lv9_50 = "1010000";
const sc_lv<2> flat::ap_const_lv2_0 = "00";
const sc_lv<9> flat::ap_const_lv9_10 = "10000";
const sc_lv<4> flat::ap_const_lv4_0 = "0000";
const sc_lv<5> flat::ap_const_lv5_10 = "10000";
const sc_lv<5> flat::ap_const_lv5_1 = "1";
const sc_lv<9> flat::ap_const_lv9_1 = "1";
const bool flat::ap_const_boolean_1 = true;

flat::flat(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln14_1_fu_214_p2);
    sensitive << ( add_ln14_reg_277 );
    sensitive << ( zext_ln14_2_fu_210_p1 );

    SC_METHOD(thread_add_ln14_2_fu_243_p2);
    sensitive << ( tmp_4_cast_reg_295 );
    sensitive << ( zext_ln14_4_fu_239_p1 );

    SC_METHOD(thread_add_ln14_fu_186_p2);
    sensitive << ( zext_ln14_fu_170_p1 );
    sensitive << ( zext_ln14_1_fu_182_p1 );

    SC_METHOD(thread_add_ln15_1_fu_258_p2);
    sensitive << ( i_2_reg_130 );

    SC_METHOD(thread_add_ln15_fu_204_p2);
    sensitive << ( i_1_reg_108 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln6_fu_152_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln6_fu_152_p2 );

    SC_METHOD(thread_c_fu_198_p2);
    sensitive << ( c_0_reg_119 );

    SC_METHOD(thread_f_fu_233_p2);
    sensitive << ( f_0_reg_141 );

    SC_METHOD(thread_flat_array_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln14_3_fu_253_p1 );

    SC_METHOD(thread_flat_array_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_flat_array_d0);
    sensitive << ( max_pool_out_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_flat_array_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_fu_164_p2);
    sensitive << ( i_0_reg_96 );

    SC_METHOD(thread_icmp_ln12_fu_227_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( f_0_reg_141 );

    SC_METHOD(thread_icmp_ln6_fu_152_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( r_0_reg_85 );

    SC_METHOD(thread_icmp_ln9_fu_192_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( c_0_reg_119 );

    SC_METHOD(thread_max_pool_out_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln14_5_fu_248_p1 );

    SC_METHOD(thread_max_pool_out_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_fu_158_p2);
    sensitive << ( r_0_reg_85 );

    SC_METHOD(thread_tmp_2_fu_174_p3);
    sensitive << ( r_0_reg_85 );

    SC_METHOD(thread_tmp_4_cast_fu_219_p3);
    sensitive << ( add_ln14_1_fu_214_p2 );

    SC_METHOD(thread_zext_ln14_1_fu_182_p1);
    sensitive << ( tmp_2_fu_174_p3 );

    SC_METHOD(thread_zext_ln14_2_fu_210_p1);
    sensitive << ( c_0_reg_119 );

    SC_METHOD(thread_zext_ln14_3_fu_253_p1);
    sensitive << ( i_2_reg_130 );

    SC_METHOD(thread_zext_ln14_4_fu_239_p1);
    sensitive << ( f_0_reg_141 );

    SC_METHOD(thread_zext_ln14_5_fu_248_p1);
    sensitive << ( add_ln14_2_fu_243_p2 );

    SC_METHOD(thread_zext_ln14_fu_170_p1);
    sensitive << ( r_0_reg_85 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln6_fu_152_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln9_fu_192_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln12_fu_227_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "flat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, max_pool_out_address0, "(port)max_pool_out_address0");
    sc_trace(mVcdFile, max_pool_out_ce0, "(port)max_pool_out_ce0");
    sc_trace(mVcdFile, max_pool_out_q0, "(port)max_pool_out_q0");
    sc_trace(mVcdFile, flat_array_address0, "(port)flat_array_address0");
    sc_trace(mVcdFile, flat_array_ce0, "(port)flat_array_ce0");
    sc_trace(mVcdFile, flat_array_we0, "(port)flat_array_we0");
    sc_trace(mVcdFile, flat_array_d0, "(port)flat_array_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, r_fu_158_p2, "r_fu_158_p2");
    sc_trace(mVcdFile, r_reg_267, "r_reg_267");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_164_p2, "i_fu_164_p2");
    sc_trace(mVcdFile, i_reg_272, "i_reg_272");
    sc_trace(mVcdFile, icmp_ln6_fu_152_p2, "icmp_ln6_fu_152_p2");
    sc_trace(mVcdFile, add_ln14_fu_186_p2, "add_ln14_fu_186_p2");
    sc_trace(mVcdFile, add_ln14_reg_277, "add_ln14_reg_277");
    sc_trace(mVcdFile, c_fu_198_p2, "c_fu_198_p2");
    sc_trace(mVcdFile, c_reg_285, "c_reg_285");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln15_fu_204_p2, "add_ln15_fu_204_p2");
    sc_trace(mVcdFile, add_ln15_reg_290, "add_ln15_reg_290");
    sc_trace(mVcdFile, icmp_ln9_fu_192_p2, "icmp_ln9_fu_192_p2");
    sc_trace(mVcdFile, tmp_4_cast_fu_219_p3, "tmp_4_cast_fu_219_p3");
    sc_trace(mVcdFile, tmp_4_cast_reg_295, "tmp_4_cast_reg_295");
    sc_trace(mVcdFile, f_fu_233_p2, "f_fu_233_p2");
    sc_trace(mVcdFile, f_reg_303, "f_reg_303");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln12_fu_227_p2, "icmp_ln12_fu_227_p2");
    sc_trace(mVcdFile, add_ln15_1_fu_258_p2, "add_ln15_1_fu_258_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, r_0_reg_85, "r_0_reg_85");
    sc_trace(mVcdFile, i_0_reg_96, "i_0_reg_96");
    sc_trace(mVcdFile, i_1_reg_108, "i_1_reg_108");
    sc_trace(mVcdFile, c_0_reg_119, "c_0_reg_119");
    sc_trace(mVcdFile, i_2_reg_130, "i_2_reg_130");
    sc_trace(mVcdFile, f_0_reg_141, "f_0_reg_141");
    sc_trace(mVcdFile, zext_ln14_5_fu_248_p1, "zext_ln14_5_fu_248_p1");
    sc_trace(mVcdFile, zext_ln14_3_fu_253_p1, "zext_ln14_3_fu_253_p1");
    sc_trace(mVcdFile, tmp_2_fu_174_p3, "tmp_2_fu_174_p3");
    sc_trace(mVcdFile, zext_ln14_fu_170_p1, "zext_ln14_fu_170_p1");
    sc_trace(mVcdFile, zext_ln14_1_fu_182_p1, "zext_ln14_1_fu_182_p1");
    sc_trace(mVcdFile, zext_ln14_2_fu_210_p1, "zext_ln14_2_fu_210_p1");
    sc_trace(mVcdFile, add_ln14_1_fu_214_p2, "add_ln14_1_fu_214_p2");
    sc_trace(mVcdFile, zext_ln14_4_fu_239_p1, "zext_ln14_4_fu_239_p1");
    sc_trace(mVcdFile, add_ln14_2_fu_243_p2, "add_ln14_2_fu_243_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("flat.hdltvin.dat");
    mHdltvoutHandle.open("flat.hdltvout.dat");
}

flat::~flat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void flat::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_227_p2.read(), ap_const_lv1_1))) {
        c_0_reg_119 = c_reg_285.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln6_fu_152_p2.read(), ap_const_lv1_0))) {
        c_0_reg_119 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        f_0_reg_141 = f_reg_303.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln9_fu_192_p2.read()))) {
        f_0_reg_141 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_192_p2.read(), ap_const_lv1_1))) {
        i_0_reg_96 = i_reg_272.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_96 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_227_p2.read(), ap_const_lv1_1))) {
        i_1_reg_108 = add_ln15_reg_290.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln6_fu_152_p2.read(), ap_const_lv1_0))) {
        i_1_reg_108 = i_0_reg_96.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_2_reg_130 = add_ln15_1_fu_258_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln9_fu_192_p2.read()))) {
        i_2_reg_130 = i_1_reg_108.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_192_p2.read(), ap_const_lv1_1))) {
        r_0_reg_85 = r_reg_267.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_0_reg_85 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln6_fu_152_p2.read(), ap_const_lv1_0))) {
        add_ln14_reg_277 = add_ln14_fu_186_p2.read();
        i_reg_272 = i_fu_164_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln9_fu_192_p2.read()))) {
        add_ln15_reg_290 = add_ln15_fu_204_p2.read();
        tmp_4_cast_reg_295 = tmp_4_cast_fu_219_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_reg_285 = c_fu_198_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        f_reg_303 = f_fu_233_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r_reg_267 = r_fu_158_p2.read();
    }
}

void flat::thread_add_ln14_1_fu_214_p2() {
    add_ln14_1_fu_214_p2 = (!zext_ln14_2_fu_210_p1.read().is_01() || !add_ln14_reg_277.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln14_2_fu_210_p1.read()) + sc_biguint<6>(add_ln14_reg_277.read()));
}

void flat::thread_add_ln14_2_fu_243_p2() {
    add_ln14_2_fu_243_p2 = (!tmp_4_cast_reg_295.read().is_01() || !zext_ln14_4_fu_239_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_4_cast_reg_295.read()) + sc_biguint<10>(zext_ln14_4_fu_239_p1.read()));
}

void flat::thread_add_ln14_fu_186_p2() {
    add_ln14_fu_186_p2 = (!zext_ln14_fu_170_p1.read().is_01() || !zext_ln14_1_fu_182_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln14_fu_170_p1.read()) + sc_biguint<6>(zext_ln14_1_fu_182_p1.read()));
}

void flat::thread_add_ln15_1_fu_258_p2() {
    add_ln15_1_fu_258_p2 = (!i_2_reg_130.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_2_reg_130.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void flat::thread_add_ln15_fu_204_p2() {
    add_ln15_fu_204_p2 = (!i_1_reg_108.read().is_01() || !ap_const_lv9_10.is_01())? sc_lv<9>(): (sc_biguint<9>(i_1_reg_108.read()) + sc_biguint<9>(ap_const_lv9_10));
}

void flat::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void flat::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void flat::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void flat::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void flat::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void flat::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_152_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void flat::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void flat::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln6_fu_152_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void flat::thread_c_fu_198_p2() {
    c_fu_198_p2 = (!c_0_reg_119.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(c_0_reg_119.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void flat::thread_f_fu_233_p2() {
    f_fu_233_p2 = (!f_0_reg_141.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(f_0_reg_141.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void flat::thread_flat_array_address0() {
    flat_array_address0 =  (sc_lv<9>) (zext_ln14_3_fu_253_p1.read());
}

void flat::thread_flat_array_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        flat_array_ce0 = ap_const_logic_1;
    } else {
        flat_array_ce0 = ap_const_logic_0;
    }
}

void flat::thread_flat_array_d0() {
    flat_array_d0 = max_pool_out_q0.read();
}

void flat::thread_flat_array_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        flat_array_we0 = ap_const_logic_1;
    } else {
        flat_array_we0 = ap_const_logic_0;
    }
}

void flat::thread_i_fu_164_p2() {
    i_fu_164_p2 = (!i_0_reg_96.read().is_01() || !ap_const_lv9_50.is_01())? sc_lv<9>(): (sc_biguint<9>(i_0_reg_96.read()) + sc_biguint<9>(ap_const_lv9_50));
}

void flat::thread_icmp_ln12_fu_227_p2() {
    icmp_ln12_fu_227_p2 = (!f_0_reg_141.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(f_0_reg_141.read() == ap_const_lv5_10);
}

void flat::thread_icmp_ln6_fu_152_p2() {
    icmp_ln6_fu_152_p2 = (!r_0_reg_85.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(r_0_reg_85.read() == ap_const_lv3_5);
}

void flat::thread_icmp_ln9_fu_192_p2() {
    icmp_ln9_fu_192_p2 = (!c_0_reg_119.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(c_0_reg_119.read() == ap_const_lv3_5);
}

void flat::thread_max_pool_out_address0() {
    max_pool_out_address0 =  (sc_lv<9>) (zext_ln14_5_fu_248_p1.read());
}

void flat::thread_max_pool_out_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        max_pool_out_ce0 = ap_const_logic_1;
    } else {
        max_pool_out_ce0 = ap_const_logic_0;
    }
}

void flat::thread_r_fu_158_p2() {
    r_fu_158_p2 = (!r_0_reg_85.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(r_0_reg_85.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void flat::thread_tmp_2_fu_174_p3() {
    tmp_2_fu_174_p3 = esl_concat<3,2>(r_0_reg_85.read(), ap_const_lv2_0);
}

void flat::thread_tmp_4_cast_fu_219_p3() {
    tmp_4_cast_fu_219_p3 = esl_concat<6,4>(add_ln14_1_fu_214_p2.read(), ap_const_lv4_0);
}

void flat::thread_zext_ln14_1_fu_182_p1() {
    zext_ln14_1_fu_182_p1 = esl_zext<6,5>(tmp_2_fu_174_p3.read());
}

void flat::thread_zext_ln14_2_fu_210_p1() {
    zext_ln14_2_fu_210_p1 = esl_zext<6,3>(c_0_reg_119.read());
}

void flat::thread_zext_ln14_3_fu_253_p1() {
    zext_ln14_3_fu_253_p1 = esl_zext<64,9>(i_2_reg_130.read());
}

void flat::thread_zext_ln14_4_fu_239_p1() {
    zext_ln14_4_fu_239_p1 = esl_zext<10,5>(f_0_reg_141.read());
}

void flat::thread_zext_ln14_5_fu_248_p1() {
    zext_ln14_5_fu_248_p1 = esl_zext<64,10>(add_ln14_2_fu_243_p2.read());
}

void flat::thread_zext_ln14_fu_170_p1() {
    zext_ln14_fu_170_p1 = esl_zext<6,3>(r_0_reg_85.read());
}

void flat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln6_fu_152_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_192_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln12_fu_227_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void flat::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_pool_out_address0\" :  \"" << max_pool_out_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_pool_out_ce0\" :  \"" << max_pool_out_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_pool_out_q0\" :  \"" << max_pool_out_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"flat_array_address0\" :  \"" << flat_array_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"flat_array_ce0\" :  \"" << flat_array_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"flat_array_we0\" :  \"" << flat_array_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"flat_array_d0\" :  \"" << flat_array_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

