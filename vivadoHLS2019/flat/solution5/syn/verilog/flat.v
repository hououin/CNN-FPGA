// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="flat,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=236,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=96,HLS_SYN_LUT=707,HLS_VERSION=2019_1}" *)

module flat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_q0,
        max_pool_out_address1,
        max_pool_out_ce1,
        max_pool_out_q1,
        flat_array_address0,
        flat_array_ce0,
        flat_array_we0,
        flat_array_d0,
        flat_array_address1,
        flat_array_ce1,
        flat_array_we1,
        flat_array_d1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] max_pool_out_address0;
output   max_pool_out_ce0;
input  [31:0] max_pool_out_q0;
output  [8:0] max_pool_out_address1;
output   max_pool_out_ce1;
input  [31:0] max_pool_out_q1;
output  [8:0] flat_array_address0;
output   flat_array_ce0;
output   flat_array_we0;
output  [31:0] flat_array_d0;
output  [8:0] flat_array_address1;
output   flat_array_ce1;
output   flat_array_we1;
output  [31:0] flat_array_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] max_pool_out_address0;
reg max_pool_out_ce0;
reg[8:0] max_pool_out_address1;
reg max_pool_out_ce1;
reg[8:0] flat_array_address0;
reg flat_array_ce0;
reg flat_array_we0;
reg[8:0] flat_array_address1;
reg flat_array_ce1;
reg flat_array_we1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] r_fu_411_p2;
reg   [2:0] r_reg_812;
wire    ap_CS_fsm_state2;
wire   [8:0] i_fu_417_p2;
reg   [8:0] i_reg_817;
wire   [0:0] icmp_ln6_fu_405_p2;
wire   [5:0] add_ln14_fu_439_p2;
reg   [5:0] add_ln14_reg_822;
wire   [2:0] c_fu_451_p2;
reg   [2:0] c_reg_830;
wire    ap_CS_fsm_state3;
wire   [9:0] tmp_2_fu_466_p3;
reg   [9:0] tmp_2_reg_835;
wire   [0:0] icmp_ln9_fu_445_p2;
wire    ap_CS_fsm_state4;
wire   [8:0] or_ln15_fu_515_p2;
reg   [8:0] or_ln15_reg_873;
wire    ap_CS_fsm_state5;
wire   [8:0] or_ln15_1_fu_560_p2;
reg   [8:0] or_ln15_1_reg_888;
wire    ap_CS_fsm_state6;
wire   [9:0] zext_ln15_1_fu_591_p1;
reg   [9:0] zext_ln15_1_reg_903;
wire    ap_CS_fsm_state7;
wire   [8:0] or_ln15_2_fu_646_p2;
reg   [8:0] or_ln15_2_reg_918;
wire    ap_CS_fsm_state8;
wire   [9:0] zext_ln15_2_fu_677_p1;
reg   [9:0] zext_ln15_2_reg_933;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [8:0] add_ln15_fu_782_p2;
wire    ap_CS_fsm_state11;
reg   [2:0] r_0_reg_360;
reg   [8:0] i_0_reg_371;
reg   [8:0] i_1_reg_383;
reg   [2:0] c_0_reg_394;
wire   [63:0] zext_ln14_19_fu_474_p1;
wire   [63:0] zext_ln14_20_fu_485_p1;
wire   [63:0] zext_ln14_21_fu_495_p1;
wire   [63:0] zext_ln14_22_fu_505_p1;
wire   [63:0] zext_ln14_2_fu_510_p1;
wire   [63:0] zext_ln14_3_fu_521_p1;
wire   [63:0] zext_ln14_23_fu_531_p1;
wire   [63:0] zext_ln14_24_fu_541_p1;
wire   [63:0] zext_ln14_4_fu_555_p1;
wire   [63:0] zext_ln14_5_fu_566_p1;
wire   [63:0] zext_ln14_25_fu_576_p1;
wire   [63:0] zext_ln14_26_fu_586_p1;
wire   [63:0] zext_ln14_6_fu_600_p1;
wire   [63:0] zext_ln14_7_fu_611_p1;
wire   [63:0] zext_ln14_27_fu_621_p1;
wire   [63:0] zext_ln14_28_fu_631_p1;
wire   [63:0] zext_ln14_8_fu_641_p1;
wire   [63:0] zext_ln14_9_fu_652_p1;
wire   [63:0] zext_ln14_29_fu_662_p1;
wire   [63:0] zext_ln14_30_fu_672_p1;
wire   [63:0] zext_ln14_10_fu_686_p1;
wire   [63:0] zext_ln14_11_fu_697_p1;
wire   [63:0] zext_ln14_31_fu_707_p1;
wire   [63:0] zext_ln14_32_fu_717_p1;
wire   [63:0] zext_ln14_12_fu_727_p1;
wire   [63:0] zext_ln14_13_fu_737_p1;
wire   [63:0] zext_ln14_33_fu_747_p1;
wire   [63:0] zext_ln14_34_fu_757_p1;
wire   [63:0] zext_ln14_14_fu_767_p1;
wire   [63:0] zext_ln14_15_fu_777_p1;
wire   [63:0] zext_ln14_16_fu_793_p1;
wire   [63:0] zext_ln14_17_fu_804_p1;
wire   [4:0] tmp_1_fu_427_p3;
wire   [5:0] zext_ln14_fu_423_p1;
wire   [5:0] zext_ln14_1_fu_435_p1;
wire   [5:0] zext_ln14_18_fu_457_p1;
wire   [5:0] add_ln14_1_fu_461_p2;
wire   [9:0] or_ln14_fu_479_p2;
wire   [9:0] or_ln14_1_fu_490_p2;
wire   [9:0] or_ln14_2_fu_500_p2;
wire   [9:0] or_ln14_3_fu_526_p2;
wire   [9:0] or_ln14_4_fu_536_p2;
wire   [9:0] zext_ln15_fu_546_p1;
wire   [9:0] add_ln15_2_fu_549_p2;
wire   [9:0] or_ln14_5_fu_571_p2;
wire   [9:0] or_ln14_6_fu_581_p2;
wire   [9:0] add_ln15_3_fu_594_p2;
wire   [9:0] add_ln15_4_fu_605_p2;
wire   [9:0] or_ln14_7_fu_616_p2;
wire   [9:0] or_ln14_8_fu_626_p2;
wire   [9:0] add_ln15_5_fu_636_p2;
wire   [9:0] or_ln14_9_fu_657_p2;
wire   [9:0] or_ln14_10_fu_667_p2;
wire   [9:0] add_ln15_6_fu_680_p2;
wire   [9:0] add_ln15_7_fu_691_p2;
wire   [9:0] or_ln14_11_fu_702_p2;
wire   [9:0] or_ln14_12_fu_712_p2;
wire   [9:0] add_ln15_8_fu_722_p2;
wire   [9:0] add_ln15_9_fu_732_p2;
wire   [9:0] or_ln14_13_fu_742_p2;
wire   [9:0] or_ln14_14_fu_752_p2;
wire   [9:0] add_ln15_10_fu_762_p2;
wire   [9:0] add_ln15_11_fu_772_p2;
wire   [9:0] add_ln15_12_fu_788_p2;
wire   [8:0] or_ln15_3_fu_798_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c_0_reg_394 <= c_reg_830;
    end else if (((icmp_ln6_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_394 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_371 <= i_reg_817;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_371 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_383 <= add_ln15_fu_782_p2;
    end else if (((icmp_ln6_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_383 <= i_0_reg_371;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_360 <= r_reg_812;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_360 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln14_reg_822 <= add_ln14_fu_439_p2;
        i_reg_817 <= i_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_830 <= c_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        or_ln15_1_reg_888[8 : 2] <= or_ln15_1_fu_560_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        or_ln15_2_reg_918[8 : 3] <= or_ln15_2_fu_646_p2[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        or_ln15_reg_873[8 : 1] <= or_ln15_fu_515_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_812 <= r_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_2_reg_835[9 : 4] <= tmp_2_fu_466_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        zext_ln15_1_reg_903[8 : 2] <= zext_ln15_1_fu_591_p1[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        zext_ln15_2_reg_933[8 : 3] <= zext_ln15_2_fu_677_p1[8 : 3];
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_405_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_405_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        flat_array_address0 = zext_ln14_16_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        flat_array_address0 = zext_ln14_14_fu_767_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        flat_array_address0 = zext_ln14_12_fu_727_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        flat_array_address0 = zext_ln14_10_fu_686_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        flat_array_address0 = zext_ln14_8_fu_641_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        flat_array_address0 = zext_ln14_6_fu_600_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_address0 = zext_ln14_4_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        flat_array_address0 = zext_ln14_2_fu_510_p1;
    end else begin
        flat_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        flat_array_address1 = zext_ln14_17_fu_804_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        flat_array_address1 = zext_ln14_15_fu_777_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        flat_array_address1 = zext_ln14_13_fu_737_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        flat_array_address1 = zext_ln14_11_fu_697_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        flat_array_address1 = zext_ln14_9_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        flat_array_address1 = zext_ln14_7_fu_611_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_address1 = zext_ln14_5_fu_566_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        flat_array_address1 = zext_ln14_3_fu_521_p1;
    end else begin
        flat_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        flat_array_ce1 = 1'b1;
    end else begin
        flat_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        flat_array_we0 = 1'b1;
    end else begin
        flat_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        flat_array_we1 = 1'b1;
    end else begin
        flat_array_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        max_pool_out_address0 = zext_ln14_33_fu_747_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        max_pool_out_address0 = zext_ln14_31_fu_707_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        max_pool_out_address0 = zext_ln14_29_fu_662_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_address0 = zext_ln14_27_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        max_pool_out_address0 = zext_ln14_25_fu_576_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_address0 = zext_ln14_23_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_address0 = zext_ln14_21_fu_495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        max_pool_out_address0 = zext_ln14_19_fu_474_p1;
    end else begin
        max_pool_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        max_pool_out_address1 = zext_ln14_34_fu_757_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        max_pool_out_address1 = zext_ln14_32_fu_717_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        max_pool_out_address1 = zext_ln14_30_fu_672_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_address1 = zext_ln14_28_fu_631_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        max_pool_out_address1 = zext_ln14_26_fu_586_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_address1 = zext_ln14_24_fu_541_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_address1 = zext_ln14_22_fu_505_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        max_pool_out_address1 = zext_ln14_20_fu_485_p1;
    end else begin
        max_pool_out_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        max_pool_out_ce1 = 1'b1;
    end else begin
        max_pool_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_405_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_1_fu_461_p2 = (zext_ln14_18_fu_457_p1 + add_ln14_reg_822);

assign add_ln14_fu_439_p2 = (zext_ln14_fu_423_p1 + zext_ln14_1_fu_435_p1);

assign add_ln15_10_fu_762_p2 = (zext_ln15_2_reg_933 + 10'd5);

assign add_ln15_11_fu_772_p2 = (zext_ln15_2_reg_933 + 10'd6);

assign add_ln15_12_fu_788_p2 = (zext_ln15_2_reg_933 + 10'd7);

assign add_ln15_2_fu_549_p2 = (zext_ln15_fu_546_p1 + 10'd1);

assign add_ln15_3_fu_594_p2 = (zext_ln15_1_fu_591_p1 + 10'd1);

assign add_ln15_4_fu_605_p2 = (zext_ln15_1_fu_591_p1 + 10'd2);

assign add_ln15_5_fu_636_p2 = (zext_ln15_1_reg_903 + 10'd3);

assign add_ln15_6_fu_680_p2 = (zext_ln15_2_fu_677_p1 + 10'd1);

assign add_ln15_7_fu_691_p2 = (zext_ln15_2_fu_677_p1 + 10'd2);

assign add_ln15_8_fu_722_p2 = (zext_ln15_2_reg_933 + 10'd3);

assign add_ln15_9_fu_732_p2 = (zext_ln15_2_reg_933 + 10'd4);

assign add_ln15_fu_782_p2 = (i_1_reg_383 + 9'd16);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_451_p2 = (c_0_reg_394 + 3'd1);

assign flat_array_d0 = max_pool_out_q0;

assign flat_array_d1 = max_pool_out_q1;

assign i_fu_417_p2 = (i_0_reg_371 + 9'd80);

assign icmp_ln6_fu_405_p2 = ((r_0_reg_360 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_445_p2 = ((c_0_reg_394 == 3'd5) ? 1'b1 : 1'b0);

assign or_ln14_10_fu_667_p2 = (tmp_2_reg_835 | 10'd11);

assign or_ln14_11_fu_702_p2 = (tmp_2_reg_835 | 10'd12);

assign or_ln14_12_fu_712_p2 = (tmp_2_reg_835 | 10'd13);

assign or_ln14_13_fu_742_p2 = (tmp_2_reg_835 | 10'd14);

assign or_ln14_14_fu_752_p2 = (tmp_2_reg_835 | 10'd15);

assign or_ln14_1_fu_490_p2 = (tmp_2_reg_835 | 10'd2);

assign or_ln14_2_fu_500_p2 = (tmp_2_reg_835 | 10'd3);

assign or_ln14_3_fu_526_p2 = (tmp_2_reg_835 | 10'd4);

assign or_ln14_4_fu_536_p2 = (tmp_2_reg_835 | 10'd5);

assign or_ln14_5_fu_571_p2 = (tmp_2_reg_835 | 10'd6);

assign or_ln14_6_fu_581_p2 = (tmp_2_reg_835 | 10'd7);

assign or_ln14_7_fu_616_p2 = (tmp_2_reg_835 | 10'd8);

assign or_ln14_8_fu_626_p2 = (tmp_2_reg_835 | 10'd9);

assign or_ln14_9_fu_657_p2 = (tmp_2_reg_835 | 10'd10);

assign or_ln14_fu_479_p2 = (tmp_2_fu_466_p3 | 10'd1);

assign or_ln15_1_fu_560_p2 = (i_1_reg_383 | 9'd3);

assign or_ln15_2_fu_646_p2 = (i_1_reg_383 | 9'd7);

assign or_ln15_3_fu_798_p2 = (i_1_reg_383 | 9'd15);

assign or_ln15_fu_515_p2 = (i_1_reg_383 | 9'd1);

assign r_fu_411_p2 = (r_0_reg_360 + 3'd1);

assign tmp_1_fu_427_p3 = {{r_0_reg_360}, {2'd0}};

assign tmp_2_fu_466_p3 = {{add_ln14_1_fu_461_p2}, {4'd0}};

assign zext_ln14_10_fu_686_p1 = add_ln15_6_fu_680_p2;

assign zext_ln14_11_fu_697_p1 = add_ln15_7_fu_691_p2;

assign zext_ln14_12_fu_727_p1 = add_ln15_8_fu_722_p2;

assign zext_ln14_13_fu_737_p1 = add_ln15_9_fu_732_p2;

assign zext_ln14_14_fu_767_p1 = add_ln15_10_fu_762_p2;

assign zext_ln14_15_fu_777_p1 = add_ln15_11_fu_772_p2;

assign zext_ln14_16_fu_793_p1 = add_ln15_12_fu_788_p2;

assign zext_ln14_17_fu_804_p1 = or_ln15_3_fu_798_p2;

assign zext_ln14_18_fu_457_p1 = c_0_reg_394;

assign zext_ln14_19_fu_474_p1 = tmp_2_fu_466_p3;

assign zext_ln14_1_fu_435_p1 = tmp_1_fu_427_p3;

assign zext_ln14_20_fu_485_p1 = or_ln14_fu_479_p2;

assign zext_ln14_21_fu_495_p1 = or_ln14_1_fu_490_p2;

assign zext_ln14_22_fu_505_p1 = or_ln14_2_fu_500_p2;

assign zext_ln14_23_fu_531_p1 = or_ln14_3_fu_526_p2;

assign zext_ln14_24_fu_541_p1 = or_ln14_4_fu_536_p2;

assign zext_ln14_25_fu_576_p1 = or_ln14_5_fu_571_p2;

assign zext_ln14_26_fu_586_p1 = or_ln14_6_fu_581_p2;

assign zext_ln14_27_fu_621_p1 = or_ln14_7_fu_616_p2;

assign zext_ln14_28_fu_631_p1 = or_ln14_8_fu_626_p2;

assign zext_ln14_29_fu_662_p1 = or_ln14_9_fu_657_p2;

assign zext_ln14_2_fu_510_p1 = i_1_reg_383;

assign zext_ln14_30_fu_672_p1 = or_ln14_10_fu_667_p2;

assign zext_ln14_31_fu_707_p1 = or_ln14_11_fu_702_p2;

assign zext_ln14_32_fu_717_p1 = or_ln14_12_fu_712_p2;

assign zext_ln14_33_fu_747_p1 = or_ln14_13_fu_742_p2;

assign zext_ln14_34_fu_757_p1 = or_ln14_14_fu_752_p2;

assign zext_ln14_3_fu_521_p1 = or_ln15_fu_515_p2;

assign zext_ln14_4_fu_555_p1 = add_ln15_2_fu_549_p2;

assign zext_ln14_5_fu_566_p1 = or_ln15_1_fu_560_p2;

assign zext_ln14_6_fu_600_p1 = add_ln15_3_fu_594_p2;

assign zext_ln14_7_fu_611_p1 = add_ln15_4_fu_605_p2;

assign zext_ln14_8_fu_641_p1 = add_ln15_5_fu_636_p2;

assign zext_ln14_9_fu_652_p1 = or_ln15_2_fu_646_p2;

assign zext_ln14_fu_423_p1 = r_0_reg_360;

assign zext_ln15_1_fu_591_p1 = or_ln15_1_reg_888;

assign zext_ln15_2_fu_677_p1 = or_ln15_2_reg_918;

assign zext_ln15_fu_546_p1 = or_ln15_reg_873;

always @ (posedge ap_clk) begin
    tmp_2_reg_835[3:0] <= 4'b0000;
    or_ln15_reg_873[0] <= 1'b1;
    or_ln15_1_reg_888[1:0] <= 2'b11;
    zext_ln15_1_reg_903[1:0] <= 2'b11;
    zext_ln15_1_reg_903[9] <= 1'b0;
    or_ln15_2_reg_918[2:0] <= 3'b111;
    zext_ln15_2_reg_933[2:0] <= 3'b111;
    zext_ln15_2_reg_933[9] <= 1'b0;
end

endmodule //flat
