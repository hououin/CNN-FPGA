-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_out_ce1 : OUT STD_LOGIC;
    max_pool_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_ce0 : OUT STD_LOGIC;
    flat_array_we0 : OUT STD_LOGIC;
    flat_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    flat_array_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_ce1 : OUT STD_LOGIC;
    flat_array_we1 : OUT STD_LOGIC;
    flat_array_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of flat is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "flat,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=236,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=96,HLS_SYN_LUT=707,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv10_C : STD_LOGIC_VECTOR (9 downto 0) := "0000001100";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv10_E : STD_LOGIC_VECTOR (9 downto 0) := "0000001110";
    constant ap_const_lv10_F : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv9_F : STD_LOGIC_VECTOR (8 downto 0) := "000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_fu_411_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_812 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_817 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln6_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_439_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_reg_822 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_fu_451_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_830 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_466_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_835 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln9_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal or_ln15_fu_515_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln15_reg_873 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal or_ln15_1_fu_560_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln15_1_reg_888 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln15_1_fu_591_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln15_1_reg_903 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal or_ln15_2_fu_646_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln15_2_reg_918 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln15_2_fu_677_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln15_2_reg_933 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln15_fu_782_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal r_0_reg_360 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_371 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_383 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln14_19_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_20_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_21_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_22_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_2_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_23_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_24_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_4_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_5_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_25_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_26_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_6_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_7_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_27_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_28_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_8_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_9_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_29_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_30_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_10_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_11_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_31_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_32_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_12_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_13_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_33_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_34_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_14_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_15_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_16_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_17_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_427_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_fu_423_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_1_fu_435_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_18_fu_457_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_1_fu_461_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln14_fu_479_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_1_fu_490_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_2_fu_500_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_3_fu_526_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_4_fu_536_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln15_fu_546_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_2_fu_549_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_5_fu_571_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_6_fu_581_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_3_fu_594_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_4_fu_605_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_7_fu_616_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_8_fu_626_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_5_fu_636_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_9_fu_657_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_10_fu_667_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_6_fu_680_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_7_fu_691_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_11_fu_702_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_12_fu_712_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_8_fu_722_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_9_fu_732_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_13_fu_742_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln14_14_fu_752_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_10_fu_762_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_11_fu_772_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_12_fu_788_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln15_3_fu_798_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                c_0_reg_394 <= c_reg_830;
            elsif (((icmp_ln6_fu_405_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_394 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_371 <= i_reg_817;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_371 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_1_reg_383 <= add_ln15_fu_782_p2;
            elsif (((icmp_ln6_fu_405_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_383 <= i_0_reg_371;
            end if; 
        end if;
    end process;

    r_0_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_360 <= r_reg_812;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_360 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_405_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln14_reg_822 <= add_ln14_fu_439_p2;
                i_reg_817 <= i_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_830 <= c_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    or_ln15_1_reg_888(8 downto 2) <= or_ln15_1_fu_560_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    or_ln15_2_reg_918(8 downto 3) <= or_ln15_2_fu_646_p2(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    or_ln15_reg_873(8 downto 1) <= or_ln15_fu_515_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_812 <= r_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_2_reg_835(9 downto 4) <= tmp_2_fu_466_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    zext_ln15_1_reg_903(8 downto 2) <= zext_ln15_1_fu_591_p1(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    zext_ln15_2_reg_933(8 downto 3) <= zext_ln15_2_fu_677_p1(8 downto 3);
            end if;
        end if;
    end process;
    tmp_2_reg_835(3 downto 0) <= "0000";
    or_ln15_reg_873(0) <= '1';
    or_ln15_1_reg_888(1 downto 0) <= "11";
    zext_ln15_1_reg_903(1 downto 0) <= "11";
    zext_ln15_1_reg_903(9) <= '0';
    or_ln15_2_reg_918(2 downto 0) <= "111";
    zext_ln15_2_reg_933(2 downto 0) <= "111";
    zext_ln15_2_reg_933(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_405_p2, ap_CS_fsm_state3, icmp_ln9_fu_445_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln6_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln9_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln14_1_fu_461_p2 <= std_logic_vector(unsigned(zext_ln14_18_fu_457_p1) + unsigned(add_ln14_reg_822));
    add_ln14_fu_439_p2 <= std_logic_vector(unsigned(zext_ln14_fu_423_p1) + unsigned(zext_ln14_1_fu_435_p1));
    add_ln15_10_fu_762_p2 <= std_logic_vector(unsigned(zext_ln15_2_reg_933) + unsigned(ap_const_lv10_5));
    add_ln15_11_fu_772_p2 <= std_logic_vector(unsigned(zext_ln15_2_reg_933) + unsigned(ap_const_lv10_6));
    add_ln15_12_fu_788_p2 <= std_logic_vector(unsigned(zext_ln15_2_reg_933) + unsigned(ap_const_lv10_7));
    add_ln15_2_fu_549_p2 <= std_logic_vector(unsigned(zext_ln15_fu_546_p1) + unsigned(ap_const_lv10_1));
    add_ln15_3_fu_594_p2 <= std_logic_vector(unsigned(zext_ln15_1_fu_591_p1) + unsigned(ap_const_lv10_1));
    add_ln15_4_fu_605_p2 <= std_logic_vector(unsigned(zext_ln15_1_fu_591_p1) + unsigned(ap_const_lv10_2));
    add_ln15_5_fu_636_p2 <= std_logic_vector(unsigned(zext_ln15_1_reg_903) + unsigned(ap_const_lv10_3));
    add_ln15_6_fu_680_p2 <= std_logic_vector(unsigned(zext_ln15_2_fu_677_p1) + unsigned(ap_const_lv10_1));
    add_ln15_7_fu_691_p2 <= std_logic_vector(unsigned(zext_ln15_2_fu_677_p1) + unsigned(ap_const_lv10_2));
    add_ln15_8_fu_722_p2 <= std_logic_vector(unsigned(zext_ln15_2_reg_933) + unsigned(ap_const_lv10_3));
    add_ln15_9_fu_732_p2 <= std_logic_vector(unsigned(zext_ln15_2_reg_933) + unsigned(ap_const_lv10_4));
    add_ln15_fu_782_p2 <= std_logic_vector(unsigned(i_1_reg_383) + unsigned(ap_const_lv9_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln6_fu_405_p2)
    begin
        if (((icmp_ln6_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln6_fu_405_p2)
    begin
        if (((icmp_ln6_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_451_p2 <= std_logic_vector(unsigned(c_0_reg_394) + unsigned(ap_const_lv3_1));

    flat_array_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln14_2_fu_510_p1, zext_ln14_4_fu_555_p1, zext_ln14_6_fu_600_p1, zext_ln14_8_fu_641_p1, zext_ln14_10_fu_686_p1, zext_ln14_12_fu_727_p1, zext_ln14_14_fu_767_p1, zext_ln14_16_fu_793_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            flat_array_address0 <= zext_ln14_16_fu_793_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            flat_array_address0 <= zext_ln14_14_fu_767_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            flat_array_address0 <= zext_ln14_12_fu_727_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            flat_array_address0 <= zext_ln14_10_fu_686_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            flat_array_address0 <= zext_ln14_8_fu_641_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            flat_array_address0 <= zext_ln14_6_fu_600_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flat_array_address0 <= zext_ln14_4_fu_555_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            flat_array_address0 <= zext_ln14_2_fu_510_p1(9 - 1 downto 0);
        else 
            flat_array_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln14_3_fu_521_p1, zext_ln14_5_fu_566_p1, zext_ln14_7_fu_611_p1, zext_ln14_9_fu_652_p1, zext_ln14_11_fu_697_p1, zext_ln14_13_fu_737_p1, zext_ln14_15_fu_777_p1, zext_ln14_17_fu_804_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            flat_array_address1 <= zext_ln14_17_fu_804_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            flat_array_address1 <= zext_ln14_15_fu_777_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            flat_array_address1 <= zext_ln14_13_fu_737_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            flat_array_address1 <= zext_ln14_11_fu_697_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            flat_array_address1 <= zext_ln14_9_fu_652_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            flat_array_address1 <= zext_ln14_7_fu_611_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flat_array_address1 <= zext_ln14_5_fu_566_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            flat_array_address1 <= zext_ln14_3_fu_521_p1(9 - 1 downto 0);
        else 
            flat_array_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            flat_array_ce0 <= ap_const_logic_1;
        else 
            flat_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            flat_array_ce1 <= ap_const_logic_1;
        else 
            flat_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_d0 <= max_pool_out_q0;
    flat_array_d1 <= max_pool_out_q1;

    flat_array_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            flat_array_we0 <= ap_const_logic_1;
        else 
            flat_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            flat_array_we1 <= ap_const_logic_1;
        else 
            flat_array_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_417_p2 <= std_logic_vector(unsigned(i_0_reg_371) + unsigned(ap_const_lv9_50));
    icmp_ln6_fu_405_p2 <= "1" when (r_0_reg_360 = ap_const_lv3_5) else "0";
    icmp_ln9_fu_445_p2 <= "1" when (c_0_reg_394 = ap_const_lv3_5) else "0";

    max_pool_out_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln14_19_fu_474_p1, zext_ln14_21_fu_495_p1, zext_ln14_23_fu_531_p1, zext_ln14_25_fu_576_p1, zext_ln14_27_fu_621_p1, zext_ln14_29_fu_662_p1, zext_ln14_31_fu_707_p1, zext_ln14_33_fu_747_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_out_address0 <= zext_ln14_33_fu_747_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_out_address0 <= zext_ln14_31_fu_707_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_pool_out_address0 <= zext_ln14_29_fu_662_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_out_address0 <= zext_ln14_27_fu_621_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_pool_out_address0 <= zext_ln14_25_fu_576_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_address0 <= zext_ln14_23_fu_531_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_address0 <= zext_ln14_21_fu_495_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            max_pool_out_address0 <= zext_ln14_19_fu_474_p1(9 - 1 downto 0);
        else 
            max_pool_out_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_out_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln14_20_fu_485_p1, zext_ln14_22_fu_505_p1, zext_ln14_24_fu_541_p1, zext_ln14_26_fu_586_p1, zext_ln14_28_fu_631_p1, zext_ln14_30_fu_672_p1, zext_ln14_32_fu_717_p1, zext_ln14_34_fu_757_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_out_address1 <= zext_ln14_34_fu_757_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_out_address1 <= zext_ln14_32_fu_717_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_pool_out_address1 <= zext_ln14_30_fu_672_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_out_address1 <= zext_ln14_28_fu_631_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_pool_out_address1 <= zext_ln14_26_fu_586_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_address1 <= zext_ln14_24_fu_541_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_address1 <= zext_ln14_22_fu_505_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            max_pool_out_address1 <= zext_ln14_20_fu_485_p1(9 - 1 downto 0);
        else 
            max_pool_out_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_out_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            max_pool_out_ce1 <= ap_const_logic_1;
        else 
            max_pool_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln14_10_fu_667_p2 <= (tmp_2_reg_835 or ap_const_lv10_B);
    or_ln14_11_fu_702_p2 <= (tmp_2_reg_835 or ap_const_lv10_C);
    or_ln14_12_fu_712_p2 <= (tmp_2_reg_835 or ap_const_lv10_D);
    or_ln14_13_fu_742_p2 <= (tmp_2_reg_835 or ap_const_lv10_E);
    or_ln14_14_fu_752_p2 <= (tmp_2_reg_835 or ap_const_lv10_F);
    or_ln14_1_fu_490_p2 <= (tmp_2_reg_835 or ap_const_lv10_2);
    or_ln14_2_fu_500_p2 <= (tmp_2_reg_835 or ap_const_lv10_3);
    or_ln14_3_fu_526_p2 <= (tmp_2_reg_835 or ap_const_lv10_4);
    or_ln14_4_fu_536_p2 <= (tmp_2_reg_835 or ap_const_lv10_5);
    or_ln14_5_fu_571_p2 <= (tmp_2_reg_835 or ap_const_lv10_6);
    or_ln14_6_fu_581_p2 <= (tmp_2_reg_835 or ap_const_lv10_7);
    or_ln14_7_fu_616_p2 <= (tmp_2_reg_835 or ap_const_lv10_8);
    or_ln14_8_fu_626_p2 <= (tmp_2_reg_835 or ap_const_lv10_9);
    or_ln14_9_fu_657_p2 <= (tmp_2_reg_835 or ap_const_lv10_A);
    or_ln14_fu_479_p2 <= (tmp_2_fu_466_p3 or ap_const_lv10_1);
    or_ln15_1_fu_560_p2 <= (i_1_reg_383 or ap_const_lv9_3);
    or_ln15_2_fu_646_p2 <= (i_1_reg_383 or ap_const_lv9_7);
    or_ln15_3_fu_798_p2 <= (i_1_reg_383 or ap_const_lv9_F);
    or_ln15_fu_515_p2 <= (i_1_reg_383 or ap_const_lv9_1);
    r_fu_411_p2 <= std_logic_vector(unsigned(r_0_reg_360) + unsigned(ap_const_lv3_1));
    tmp_1_fu_427_p3 <= (r_0_reg_360 & ap_const_lv2_0);
    tmp_2_fu_466_p3 <= (add_ln14_1_fu_461_p2 & ap_const_lv4_0);
    zext_ln14_10_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_6_fu_680_p2),64));
    zext_ln14_11_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_7_fu_691_p2),64));
    zext_ln14_12_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_8_fu_722_p2),64));
    zext_ln14_13_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_9_fu_732_p2),64));
    zext_ln14_14_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_10_fu_762_p2),64));
    zext_ln14_15_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_11_fu_772_p2),64));
    zext_ln14_16_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_12_fu_788_p2),64));
    zext_ln14_17_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_3_fu_798_p2),64));
    zext_ln14_18_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_394),6));
    zext_ln14_19_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_466_p3),64));
    zext_ln14_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_427_p3),6));
    zext_ln14_20_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_fu_479_p2),64));
    zext_ln14_21_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_1_fu_490_p2),64));
    zext_ln14_22_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_2_fu_500_p2),64));
    zext_ln14_23_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_3_fu_526_p2),64));
    zext_ln14_24_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_4_fu_536_p2),64));
    zext_ln14_25_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_5_fu_571_p2),64));
    zext_ln14_26_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_6_fu_581_p2),64));
    zext_ln14_27_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_7_fu_616_p2),64));
    zext_ln14_28_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_8_fu_626_p2),64));
    zext_ln14_29_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_9_fu_657_p2),64));
    zext_ln14_2_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_383),64));
    zext_ln14_30_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_10_fu_667_p2),64));
    zext_ln14_31_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_11_fu_702_p2),64));
    zext_ln14_32_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_12_fu_712_p2),64));
    zext_ln14_33_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_13_fu_742_p2),64));
    zext_ln14_34_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_14_fu_752_p2),64));
    zext_ln14_3_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_fu_515_p2),64));
    zext_ln14_4_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_2_fu_549_p2),64));
    zext_ln14_5_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_1_fu_560_p2),64));
    zext_ln14_6_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_3_fu_594_p2),64));
    zext_ln14_7_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_4_fu_605_p2),64));
    zext_ln14_8_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_5_fu_636_p2),64));
    zext_ln14_9_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_2_fu_646_p2),64));
    zext_ln14_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_360),6));
    zext_ln15_1_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_1_reg_888),10));
    zext_ln15_2_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_2_reg_918),10));
    zext_ln15_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln15_reg_873),10));
end behav;
