// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="flat,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=486,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=82,HLS_SYN_LUT=263,HLS_VERSION=2019_1}" *)

module flat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_q0,
        flat_array_address0,
        flat_array_ce0,
        flat_array_we0,
        flat_array_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] max_pool_out_address0;
output   max_pool_out_ce0;
input  [31:0] max_pool_out_q0;
output  [8:0] flat_array_address0;
output   flat_array_ce0;
output   flat_array_we0;
output  [31:0] flat_array_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_ce0;
reg flat_array_ce0;
reg flat_array_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] i_2_reg_140;
reg   [4:0] f_0_reg_151;
wire   [2:0] r_fu_168_p2;
reg   [2:0] r_reg_277;
wire    ap_CS_fsm_state2;
wire   [8:0] i_fu_174_p2;
reg   [8:0] i_reg_282;
wire   [0:0] icmp_ln6_fu_162_p2;
wire   [5:0] add_ln14_fu_196_p2;
reg   [5:0] add_ln14_reg_287;
wire   [0:0] icmp_ln9_fu_202_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] c_fu_208_p2;
reg   [2:0] c_reg_296;
wire   [8:0] add_ln15_fu_214_p2;
reg   [8:0] add_ln15_reg_301;
wire   [9:0] tmp_5_cast_fu_229_p3;
reg   [9:0] tmp_5_cast_reg_306;
wire   [0:0] icmp_ln12_fu_237_p2;
reg   [0:0] icmp_ln12_reg_311;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] f_fu_243_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [8:0] add_ln15_1_fu_268_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [2:0] r_0_reg_95;
reg   [8:0] i_0_reg_106;
reg   [8:0] i_1_reg_118;
wire    ap_CS_fsm_state6;
reg   [2:0] c_0_reg_129;
wire   [63:0] zext_ln14_5_fu_258_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln14_3_fu_263_p1;
wire   [4:0] tmp_3_fu_184_p3;
wire   [5:0] zext_ln14_fu_180_p1;
wire   [5:0] zext_ln14_1_fu_192_p1;
wire   [5:0] zext_ln14_2_fu_220_p1;
wire   [5:0] add_ln14_1_fu_224_p2;
wire   [9:0] zext_ln14_4_fu_249_p1;
wire   [9:0] add_ln14_2_fu_253_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln9_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln9_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_0_reg_129 <= c_reg_296;
    end else if (((icmp_ln6_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_129 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_fu_237_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_0_reg_151 <= f_fu_243_p2;
    end else if (((icmp_ln9_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_151 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_106 <= i_reg_282;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_106 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_118 <= add_ln15_reg_301;
    end else if (((icmp_ln6_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_118 <= i_0_reg_106;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_311 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_140 <= add_ln15_1_fu_268_p2;
    end else if (((icmp_ln9_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_140 <= i_1_reg_118;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_95 <= r_reg_277;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_95 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln14_reg_287 <= add_ln14_fu_196_p2;
        i_reg_282 <= i_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln15_reg_301 <= add_ln15_fu_214_p2;
        tmp_5_cast_reg_306[9 : 4] <= tmp_5_cast_fu_229_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_296 <= c_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_reg_311 <= icmp_ln12_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_277 <= r_fu_168_p2;
    end
end

always @ (*) begin
    if ((icmp_ln12_fu_237_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_311 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flat_array_we0 = 1'b1;
    end else begin
        flat_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln12_fu_237_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln12_fu_237_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_1_fu_224_p2 = (zext_ln14_2_fu_220_p1 + add_ln14_reg_287);

assign add_ln14_2_fu_253_p2 = (tmp_5_cast_reg_306 + zext_ln14_4_fu_249_p1);

assign add_ln14_fu_196_p2 = (zext_ln14_fu_180_p1 + zext_ln14_1_fu_192_p1);

assign add_ln15_1_fu_268_p2 = (i_2_reg_140 + 9'd1);

assign add_ln15_fu_214_p2 = (i_1_reg_118 + 9'd16);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_208_p2 = (c_0_reg_129 + 3'd1);

assign f_fu_243_p2 = (f_0_reg_151 + 5'd1);

assign flat_array_address0 = zext_ln14_3_fu_263_p1;

assign flat_array_d0 = max_pool_out_q0;

assign i_fu_174_p2 = (i_0_reg_106 + 9'd80);

assign icmp_ln12_fu_237_p2 = ((f_0_reg_151 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_162_p2 = ((r_0_reg_95 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_202_p2 = ((c_0_reg_129 == 3'd5) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln14_5_fu_258_p1;

assign r_fu_168_p2 = (r_0_reg_95 + 3'd1);

assign tmp_3_fu_184_p3 = {{r_0_reg_95}, {2'd0}};

assign tmp_5_cast_fu_229_p3 = {{add_ln14_1_fu_224_p2}, {4'd0}};

assign zext_ln14_1_fu_192_p1 = tmp_3_fu_184_p3;

assign zext_ln14_2_fu_220_p1 = c_0_reg_129;

assign zext_ln14_3_fu_263_p1 = i_2_reg_140;

assign zext_ln14_4_fu_249_p1 = f_0_reg_151;

assign zext_ln14_5_fu_258_p1 = add_ln14_2_fu_253_p2;

assign zext_ln14_fu_180_p1 = r_0_reg_95;

always @ (posedge ap_clk) begin
    tmp_5_cast_reg_306[3:0] <= 4'b0000;
end

endmodule //flat
