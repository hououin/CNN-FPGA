// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=31.903000,HLS_SYN_LAT=7137,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=410,HLS_SYN_LUT=1611,HLS_VERSION=2019_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_0_address1,
        conv_1_out_0_ce1,
        conv_1_out_0_q1,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_1_address1,
        conv_1_out_1_ce1,
        conv_1_out_1_q1,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [13:0] conv_1_out_0_address1;
output   conv_1_out_0_ce1;
input  [31:0] conv_1_out_0_q1;
output  [13:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [13:0] conv_1_out_1_address1;
output   conv_1_out_1_ce1;
input  [31:0] conv_1_out_1_q1;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_0_ce0;
reg conv_1_out_0_ce1;
reg conv_1_out_1_ce0;
reg conv_1_out_1_ce1;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] c_0_reg_204;
wire   [5:0] f_fu_242_p2;
reg   [5:0] f_reg_750;
wire    ap_CS_fsm_state2;
wire   [13:0] zext_ln13_fu_248_p1;
reg   [13:0] zext_ln13_reg_755;
wire   [0:0] icmp_ln10_fu_236_p2;
wire   [14:0] zext_ln13_1_fu_252_p1;
reg   [14:0] zext_ln13_1_reg_760;
wire   [7:0] add_ln13_fu_256_p2;
reg   [7:0] add_ln13_reg_765;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln13_1_fu_262_p2;
reg   [8:0] add_ln13_1_reg_770;
wire   [0:0] icmp_ln13_fu_268_p2;
wire   [3:0] r_fu_274_p2;
reg   [3:0] r_reg_779;
wire   [0:0] icmp_ln16_fu_280_p2;
reg   [0:0] icmp_ln16_reg_784;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln16_reg_784_pp0_iter1_reg;
wire   [3:0] c_fu_286_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] shl_ln_fu_292_p3;
reg   [4:0] shl_ln_reg_793;
wire   [63:0] zext_ln28_1_fu_346_p1;
reg   [63:0] zext_ln28_1_reg_798;
wire   [7:0] add_ln35_fu_355_p2;
reg   [7:0] add_ln35_reg_808;
reg   [7:0] add_ln35_reg_808_pp0_iter1_reg;
wire   [31:0] select_ln28_fu_403_p3;
reg   [31:0] select_ln28_reg_818;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [5:0] f_0_reg_157;
reg   [3:0] r_0_reg_169;
wire    ap_CS_fsm_state7;
reg   [8:0] phi_mul_reg_180;
reg   [7:0] phi_mul1_reg_192;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_4_fu_443_p1;
wire   [63:0] zext_ln35_2_fu_742_p1;
wire   [31:0] select_ln28_1_fu_532_p3;
wire   [31:0] select_ln28_2_fu_624_p3;
wire   [8:0] zext_ln28_fu_300_p1;
wire   [8:0] add_ln28_fu_304_p2;
wire   [0:0] trunc_ln28_fu_310_p1;
wire   [5:0] tmp_13_fu_314_p3;
wire   [7:0] tmp_14_fu_328_p4;
wire   [5:0] or_ln28_7_fu_322_p2;
wire   [13:0] tmp_15_fu_338_p3;
wire   [7:0] zext_ln35_fu_351_p1;
wire   [31:0] bitcast_ln28_fu_361_p1;
wire   [7:0] tmp_3_fu_365_p4;
wire   [22:0] trunc_ln28_1_fu_375_p1;
wire   [0:0] icmp_ln28_1_fu_385_p2;
wire   [0:0] icmp_ln28_fu_379_p2;
wire   [0:0] or_ln28_fu_391_p2;
wire   [0:0] tmp_4_fu_215_p2;
wire   [0:0] and_ln28_fu_397_p2;
wire   [4:0] or_ln26_fu_411_p2;
wire   [8:0] zext_ln28_2_fu_416_p1;
wire   [8:0] add_ln28_1_fu_420_p2;
wire   [13:0] tmp_16_fu_426_p3;
wire   [14:0] zext_ln28_3_fu_434_p1;
wire   [14:0] add_ln28_2_fu_438_p2;
wire   [31:0] bitcast_ln28_1_fu_449_p1;
wire   [31:0] bitcast_ln28_2_fu_467_p1;
wire   [7:0] tmp_5_fu_453_p4;
wire   [22:0] trunc_ln28_2_fu_463_p1;
wire   [0:0] icmp_ln28_3_fu_490_p2;
wire   [0:0] icmp_ln28_2_fu_484_p2;
wire   [7:0] tmp_6_fu_470_p4;
wire   [22:0] trunc_ln28_3_fu_480_p1;
wire   [0:0] icmp_ln28_5_fu_508_p2;
wire   [0:0] icmp_ln28_4_fu_502_p2;
wire   [0:0] or_ln28_1_fu_496_p2;
wire   [0:0] or_ln28_2_fu_514_p2;
wire   [0:0] and_ln28_1_fu_520_p2;
wire   [0:0] tmp_7_fu_221_p2;
wire   [0:0] and_ln28_2_fu_526_p2;
wire   [31:0] bitcast_ln28_3_fu_540_p1;
wire   [31:0] bitcast_ln28_4_fu_558_p1;
wire   [7:0] tmp_8_fu_544_p4;
wire   [22:0] trunc_ln28_4_fu_554_p1;
wire   [0:0] icmp_ln28_7_fu_582_p2;
wire   [0:0] icmp_ln28_6_fu_576_p2;
wire   [7:0] tmp_9_fu_562_p4;
wire   [22:0] trunc_ln28_5_fu_572_p1;
wire   [0:0] icmp_ln28_9_fu_600_p2;
wire   [0:0] icmp_ln28_8_fu_594_p2;
wire   [0:0] or_ln28_3_fu_588_p2;
wire   [0:0] or_ln28_4_fu_606_p2;
wire   [0:0] and_ln28_3_fu_612_p2;
wire   [0:0] tmp_s_fu_226_p2;
wire   [0:0] and_ln28_4_fu_618_p2;
wire   [31:0] bitcast_ln28_5_fu_633_p1;
wire   [31:0] bitcast_ln28_6_fu_651_p1;
wire   [7:0] tmp_10_fu_637_p4;
wire   [22:0] trunc_ln28_6_fu_647_p1;
wire   [0:0] icmp_ln28_11_fu_675_p2;
wire   [0:0] icmp_ln28_10_fu_669_p2;
wire   [7:0] tmp_11_fu_655_p4;
wire   [22:0] trunc_ln28_7_fu_665_p1;
wire   [0:0] icmp_ln28_13_fu_693_p2;
wire   [0:0] icmp_ln28_12_fu_687_p2;
wire   [0:0] or_ln28_5_fu_681_p2;
wire   [0:0] or_ln28_6_fu_699_p2;
wire   [0:0] and_ln28_5_fu_705_p2;
wire   [0:0] tmp_12_fu_231_p2;
wire   [0:0] and_ln28_6_fu_711_p2;
wire   [12:0] tmp_17_fu_726_p3;
wire   [13:0] zext_ln35_1_fu_733_p1;
wire   [13:0] add_ln35_1_fu_737_p2;
wire    ap_block_pp0_stage0_00001;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_0_q0),
    .din1(32'd8388608),
    .opcode(5'd2),
    .dout(tmp_4_fu_215_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(conv_1_out_0_q1),
    .din1(select_ln28_reg_818),
    .opcode(5'd2),
    .dout(tmp_7_fu_221_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U3(
    .din0(conv_1_out_1_q0),
    .din1(select_ln28_1_fu_532_p3),
    .opcode(5'd2),
    .dout(tmp_s_fu_226_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U4(
    .din0(conv_1_out_1_q1),
    .din1(select_ln28_2_fu_624_p3),
    .opcode(5'd2),
    .dout(tmp_12_fu_231_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln13_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln13_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_fu_280_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_reg_204 <= c_fu_286_p2;
    end else if (((icmp_ln13_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_204 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_157 <= f_reg_750;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_157 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        phi_mul1_reg_192 <= add_ln13_reg_765;
    end else if (((icmp_ln10_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul1_reg_192 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        phi_mul_reg_180 <= add_ln13_1_reg_770;
    end else if (((icmp_ln10_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_180 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_0_reg_169 <= r_reg_779;
    end else if (((icmp_ln10_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_169 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_1_reg_770 <= add_ln13_1_fu_262_p2;
        add_ln13_reg_765 <= add_ln13_fu_256_p2;
        r_reg_779 <= r_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln35_reg_808 <= add_ln35_fu_355_p2;
        shl_ln_reg_793[4 : 1] <= shl_ln_fu_292_p3[4 : 1];
        zext_ln28_1_reg_798[13 : 0] <= zext_ln28_1_fu_346_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln35_reg_808_pp0_iter1_reg <= add_ln35_reg_808;
        icmp_ln16_reg_784 <= icmp_ln16_fu_280_p2;
        icmp_ln16_reg_784_pp0_iter1_reg <= icmp_ln16_reg_784;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_750 <= f_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_784 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln28_reg_818 <= select_ln28_fu_403_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_760[5 : 0] <= zext_ln13_1_fu_252_p1[5 : 0];
        zext_ln13_reg_755[5 : 0] <= zext_ln13_fu_248_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln16_fu_280_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_0_ce1 = 1'b1;
    end else begin
        conv_1_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_1_ce1 = 1'b1;
    end else begin
        conv_1_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_784_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln16_fu_280_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln16_fu_280_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_1_fu_262_p2 = (phi_mul_reg_180 + 9'd26);

assign add_ln13_fu_256_p2 = (phi_mul1_reg_192 + 8'd13);

assign add_ln28_1_fu_420_p2 = (zext_ln28_2_fu_416_p1 + phi_mul_reg_180);

assign add_ln28_2_fu_438_p2 = (zext_ln13_1_reg_760 + zext_ln28_3_fu_434_p1);

assign add_ln28_fu_304_p2 = (zext_ln28_fu_300_p1 + phi_mul_reg_180);

assign add_ln35_1_fu_737_p2 = (zext_ln13_reg_755 + zext_ln35_1_fu_733_p1);

assign add_ln35_fu_355_p2 = (zext_ln35_fu_351_p1 + phi_mul1_reg_192);

assign and_ln28_1_fu_520_p2 = (or_ln28_2_fu_514_p2 & or_ln28_1_fu_496_p2);

assign and_ln28_2_fu_526_p2 = (tmp_7_fu_221_p2 & and_ln28_1_fu_520_p2);

assign and_ln28_3_fu_612_p2 = (or_ln28_4_fu_606_p2 & or_ln28_3_fu_588_p2);

assign and_ln28_4_fu_618_p2 = (tmp_s_fu_226_p2 & and_ln28_3_fu_612_p2);

assign and_ln28_5_fu_705_p2 = (or_ln28_6_fu_699_p2 & or_ln28_5_fu_681_p2);

assign and_ln28_6_fu_711_p2 = (tmp_12_fu_231_p2 & and_ln28_5_fu_705_p2);

assign and_ln28_fu_397_p2 = (tmp_4_fu_215_p2 & or_ln28_fu_391_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_449_p1 = conv_1_out_0_q1;

assign bitcast_ln28_2_fu_467_p1 = select_ln28_reg_818;

assign bitcast_ln28_3_fu_540_p1 = conv_1_out_1_q0;

assign bitcast_ln28_4_fu_558_p1 = select_ln28_1_fu_532_p3;

assign bitcast_ln28_5_fu_633_p1 = conv_1_out_1_q1;

assign bitcast_ln28_6_fu_651_p1 = select_ln28_2_fu_624_p3;

assign bitcast_ln28_fu_361_p1 = conv_1_out_0_q0;

assign c_fu_286_p2 = (c_0_reg_204 + 4'd1);

assign conv_1_out_0_address0 = zext_ln28_1_fu_346_p1;

assign conv_1_out_0_address1 = zext_ln28_4_fu_443_p1;

assign conv_1_out_1_address0 = zext_ln28_1_reg_798;

assign conv_1_out_1_address1 = zext_ln28_4_fu_443_p1;

assign f_fu_242_p2 = (f_0_reg_157 + 6'd1);

assign icmp_ln10_fu_236_p2 = ((f_0_reg_157 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_268_p2 = ((r_0_reg_169 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_280_p2 = ((c_0_reg_204 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_669_p2 = ((tmp_10_fu_637_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_675_p2 = ((trunc_ln28_6_fu_647_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_12_fu_687_p2 = ((tmp_11_fu_655_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_13_fu_693_p2 = ((trunc_ln28_7_fu_665_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_385_p2 = ((trunc_ln28_1_fu_375_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_484_p2 = ((tmp_5_fu_453_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_490_p2 = ((trunc_ln28_2_fu_463_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_502_p2 = ((tmp_6_fu_470_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_508_p2 = ((trunc_ln28_3_fu_480_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_576_p2 = ((tmp_8_fu_544_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_582_p2 = ((trunc_ln28_4_fu_554_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_594_p2 = ((tmp_9_fu_562_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_600_p2 = ((trunc_ln28_5_fu_572_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_379_p2 = ((tmp_3_fu_365_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_2_fu_742_p1;

assign max_pool_1_out_d0 = ((and_ln28_6_fu_711_p2[0:0] === 1'b1) ? conv_1_out_1_q1 : select_ln28_2_fu_624_p3);

assign or_ln26_fu_411_p2 = (shl_ln_reg_793 | 5'd1);

assign or_ln28_1_fu_496_p2 = (icmp_ln28_3_fu_490_p2 | icmp_ln28_2_fu_484_p2);

assign or_ln28_2_fu_514_p2 = (icmp_ln28_5_fu_508_p2 | icmp_ln28_4_fu_502_p2);

assign or_ln28_3_fu_588_p2 = (icmp_ln28_7_fu_582_p2 | icmp_ln28_6_fu_576_p2);

assign or_ln28_4_fu_606_p2 = (icmp_ln28_9_fu_600_p2 | icmp_ln28_8_fu_594_p2);

assign or_ln28_5_fu_681_p2 = (icmp_ln28_11_fu_675_p2 | icmp_ln28_10_fu_669_p2);

assign or_ln28_6_fu_699_p2 = (icmp_ln28_13_fu_693_p2 | icmp_ln28_12_fu_687_p2);

assign or_ln28_7_fu_322_p2 = (tmp_13_fu_314_p3 | f_0_reg_157);

assign or_ln28_fu_391_p2 = (icmp_ln28_fu_379_p2 | icmp_ln28_1_fu_385_p2);

assign r_fu_274_p2 = (r_0_reg_169 + 4'd1);

assign select_ln28_1_fu_532_p3 = ((and_ln28_2_fu_526_p2[0:0] === 1'b1) ? conv_1_out_0_q1 : select_ln28_reg_818);

assign select_ln28_2_fu_624_p3 = ((and_ln28_4_fu_618_p2[0:0] === 1'b1) ? conv_1_out_1_q0 : select_ln28_1_fu_532_p3);

assign select_ln28_fu_403_p3 = ((and_ln28_fu_397_p2[0:0] === 1'b1) ? conv_1_out_0_q0 : 32'd8388608);

assign shl_ln_fu_292_p3 = {{c_0_reg_204}, {1'd0}};

assign tmp_10_fu_637_p4 = {{bitcast_ln28_5_fu_633_p1[30:23]}};

assign tmp_11_fu_655_p4 = {{bitcast_ln28_6_fu_651_p1[30:23]}};

assign tmp_13_fu_314_p3 = {{trunc_ln28_fu_310_p1}, {5'd0}};

assign tmp_14_fu_328_p4 = {{add_ln28_fu_304_p2[8:1]}};

assign tmp_15_fu_338_p3 = {{tmp_14_fu_328_p4}, {or_ln28_7_fu_322_p2}};

assign tmp_16_fu_426_p3 = {{add_ln28_1_fu_420_p2}, {5'd0}};

assign tmp_17_fu_726_p3 = {{add_ln35_reg_808_pp0_iter1_reg}, {5'd0}};

assign tmp_3_fu_365_p4 = {{bitcast_ln28_fu_361_p1[30:23]}};

assign tmp_5_fu_453_p4 = {{bitcast_ln28_1_fu_449_p1[30:23]}};

assign tmp_6_fu_470_p4 = {{bitcast_ln28_2_fu_467_p1[30:23]}};

assign tmp_8_fu_544_p4 = {{bitcast_ln28_3_fu_540_p1[30:23]}};

assign tmp_9_fu_562_p4 = {{bitcast_ln28_4_fu_558_p1[30:23]}};

assign trunc_ln28_1_fu_375_p1 = bitcast_ln28_fu_361_p1[22:0];

assign trunc_ln28_2_fu_463_p1 = bitcast_ln28_1_fu_449_p1[22:0];

assign trunc_ln28_3_fu_480_p1 = bitcast_ln28_2_fu_467_p1[22:0];

assign trunc_ln28_4_fu_554_p1 = bitcast_ln28_3_fu_540_p1[22:0];

assign trunc_ln28_5_fu_572_p1 = bitcast_ln28_4_fu_558_p1[22:0];

assign trunc_ln28_6_fu_647_p1 = bitcast_ln28_5_fu_633_p1[22:0];

assign trunc_ln28_7_fu_665_p1 = bitcast_ln28_6_fu_651_p1[22:0];

assign trunc_ln28_fu_310_p1 = add_ln28_fu_304_p2[0:0];

assign zext_ln13_1_fu_252_p1 = f_0_reg_157;

assign zext_ln13_fu_248_p1 = f_0_reg_157;

assign zext_ln28_1_fu_346_p1 = tmp_15_fu_338_p3;

assign zext_ln28_2_fu_416_p1 = or_ln26_fu_411_p2;

assign zext_ln28_3_fu_434_p1 = tmp_16_fu_426_p3;

assign zext_ln28_4_fu_443_p1 = add_ln28_2_fu_438_p2;

assign zext_ln28_fu_300_p1 = shl_ln_fu_292_p3;

assign zext_ln35_1_fu_733_p1 = tmp_17_fu_726_p3;

assign zext_ln35_2_fu_742_p1 = add_ln35_1_fu_737_p2;

assign zext_ln35_fu_351_p1 = c_0_reg_204;

always @ (posedge ap_clk) begin
    zext_ln13_reg_755[13:6] <= 8'b00000000;
    zext_ln13_1_reg_760[14:6] <= 9'b000000000;
    shl_ln_reg_793[0] <= 1'b0;
    zext_ln28_1_reg_798[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_1
