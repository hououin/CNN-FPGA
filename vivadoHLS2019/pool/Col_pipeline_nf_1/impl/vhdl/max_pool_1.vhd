-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_0_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv_1_out_0_ce0 : OUT STD_LOGIC;
    conv_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_0_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv_1_out_0_ce1 : OUT STD_LOGIC;
    conv_1_out_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv_1_out_1_ce0 : OUT STD_LOGIC;
    conv_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv_1_out_1_ce1 : OUT STD_LOGIC;
    conv_1_out_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=31.903000,HLS_SYN_LAT=7137,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=410,HLS_SYN_LUT=1611,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_0_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_fu_242_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_750 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_248_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_reg_755 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln10_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_252_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln13_1_reg_760 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln13_fu_256_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_765 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln13_1_fu_262_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln13_1_reg_770 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln13_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_274_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_779 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln16_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_784 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln16_reg_784_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_286_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal shl_ln_fu_292_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_793 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_1_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_reg_798 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln35_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_reg_808 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_reg_808_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln28_fu_403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal f_0_reg_157 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_0_reg_169 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal phi_mul_reg_180 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul1_reg_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln28_4_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln28_1_fu_532_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_fu_624_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_fu_300_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln28_fu_304_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln28_fu_310_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_314_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_328_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln28_7_fu_322_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_338_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_fu_351_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln28_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_365_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_375_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_411_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_2_fu_416_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln28_1_fu_420_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_426_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_3_fu_434_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln28_2_fu_438_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal bitcast_ln28_1_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_2_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_453_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_463_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_470_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_480_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_3_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_4_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_544_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_4_fu_554_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_562_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_5_fu_572_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_9_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_8_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_4_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_5_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_6_fu_651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_637_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_6_fu_647_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_11_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_10_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_655_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_7_fu_665_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_13_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_12_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_5_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_6_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_5_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_6_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_726_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_1_fu_733_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_1_fu_737_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_0_q0,
        din1 => ap_const_lv32_800000,
        opcode => ap_const_lv5_2,
        dout => tmp_4_fu_215_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_0_q1,
        din1 => select_ln28_reg_818,
        opcode => ap_const_lv5_2,
        dout => tmp_7_fu_221_p2);

    max_pool_1_fcmp_3bkb_U3 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_1_q0,
        din1 => select_ln28_1_fu_532_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_s_fu_226_p2);

    max_pool_1_fcmp_3bkb_U4 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_1_q1,
        din1 => select_ln28_2_fu_624_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_12_fu_231_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_fu_280_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_0_reg_204 <= c_fu_286_p2;
            elsif (((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_204 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_157 <= f_reg_750;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_157 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_mul1_reg_192 <= add_ln13_reg_765;
            elsif (((icmp_ln10_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul1_reg_192 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_mul_reg_180 <= add_ln13_1_reg_770;
            elsif (((icmp_ln10_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_180 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    r_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                r_0_reg_169 <= r_reg_779;
            elsif (((icmp_ln10_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_169 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_1_reg_770 <= add_ln13_1_fu_262_p2;
                add_ln13_reg_765 <= add_ln13_fu_256_p2;
                r_reg_779 <= r_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln35_reg_808 <= add_ln35_fu_355_p2;
                    shl_ln_reg_793(4 downto 1) <= shl_ln_fu_292_p3(4 downto 1);
                    zext_ln28_1_reg_798(13 downto 0) <= zext_ln28_1_fu_346_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln35_reg_808_pp0_iter1_reg <= add_ln35_reg_808;
                icmp_ln16_reg_784 <= icmp_ln16_fu_280_p2;
                icmp_ln16_reg_784_pp0_iter1_reg <= icmp_ln16_reg_784;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_750 <= f_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_reg_784 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln28_reg_818 <= select_ln28_fu_403_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_1_reg_760(5 downto 0) <= zext_ln13_1_fu_252_p1(5 downto 0);
                    zext_ln13_reg_755(5 downto 0) <= zext_ln13_fu_248_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_755(13 downto 6) <= "00000000";
    zext_ln13_1_reg_760(14 downto 6) <= "000000000";
    shl_ln_reg_793(0) <= '0';
    zext_ln28_1_reg_798(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_236_p2, ap_CS_fsm_state3, icmp_ln13_fu_268_p2, icmp_ln16_fu_280_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln16_fu_280_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln16_fu_280_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln13_1_fu_262_p2 <= std_logic_vector(unsigned(phi_mul_reg_180) + unsigned(ap_const_lv9_1A));
    add_ln13_fu_256_p2 <= std_logic_vector(unsigned(phi_mul1_reg_192) + unsigned(ap_const_lv8_D));
    add_ln28_1_fu_420_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_416_p1) + unsigned(phi_mul_reg_180));
    add_ln28_2_fu_438_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_760) + unsigned(zext_ln28_3_fu_434_p1));
    add_ln28_fu_304_p2 <= std_logic_vector(unsigned(zext_ln28_fu_300_p1) + unsigned(phi_mul_reg_180));
    add_ln35_1_fu_737_p2 <= std_logic_vector(unsigned(zext_ln13_reg_755) + unsigned(zext_ln35_1_fu_733_p1));
    add_ln35_fu_355_p2 <= std_logic_vector(unsigned(zext_ln35_fu_351_p1) + unsigned(phi_mul1_reg_192));
    and_ln28_1_fu_520_p2 <= (or_ln28_2_fu_514_p2 and or_ln28_1_fu_496_p2);
    and_ln28_2_fu_526_p2 <= (tmp_7_fu_221_p2 and and_ln28_1_fu_520_p2);
    and_ln28_3_fu_612_p2 <= (or_ln28_4_fu_606_p2 and or_ln28_3_fu_588_p2);
    and_ln28_4_fu_618_p2 <= (tmp_s_fu_226_p2 and and_ln28_3_fu_612_p2);
    and_ln28_5_fu_705_p2 <= (or_ln28_6_fu_699_p2 and or_ln28_5_fu_681_p2);
    and_ln28_6_fu_711_p2 <= (tmp_12_fu_231_p2 and and_ln28_5_fu_705_p2);
    and_ln28_fu_397_p2 <= (tmp_4_fu_215_p2 and or_ln28_fu_391_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln16_fu_280_p2)
    begin
        if ((icmp_ln16_fu_280_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_236_p2)
    begin
        if (((icmp_ln10_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_236_p2)
    begin
        if (((icmp_ln10_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_449_p1 <= conv_1_out_0_q1;
    bitcast_ln28_2_fu_467_p1 <= select_ln28_reg_818;
    bitcast_ln28_3_fu_540_p1 <= conv_1_out_1_q0;
    bitcast_ln28_4_fu_558_p1 <= select_ln28_1_fu_532_p3;
    bitcast_ln28_5_fu_633_p1 <= conv_1_out_1_q1;
    bitcast_ln28_6_fu_651_p1 <= select_ln28_2_fu_624_p3;
    bitcast_ln28_fu_361_p1 <= conv_1_out_0_q0;
    c_fu_286_p2 <= std_logic_vector(unsigned(c_0_reg_204) + unsigned(ap_const_lv4_1));
    conv_1_out_0_address0 <= zext_ln28_1_fu_346_p1(14 - 1 downto 0);
    conv_1_out_0_address1 <= zext_ln28_4_fu_443_p1(14 - 1 downto 0);

    conv_1_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_0_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_1_address0 <= zext_ln28_1_reg_798(14 - 1 downto 0);
    conv_1_out_1_address1 <= zext_ln28_4_fu_443_p1(14 - 1 downto 0);

    conv_1_out_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_1_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_242_p2 <= std_logic_vector(unsigned(f_0_reg_157) + unsigned(ap_const_lv6_1));
    icmp_ln10_fu_236_p2 <= "1" when (f_0_reg_157 = ap_const_lv6_20) else "0";
    icmp_ln13_fu_268_p2 <= "1" when (r_0_reg_169 = ap_const_lv4_D) else "0";
    icmp_ln16_fu_280_p2 <= "1" when (c_0_reg_204 = ap_const_lv4_D) else "0";
    icmp_ln28_10_fu_669_p2 <= "0" when (tmp_10_fu_637_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_11_fu_675_p2 <= "1" when (trunc_ln28_6_fu_647_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_12_fu_687_p2 <= "0" when (tmp_11_fu_655_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_13_fu_693_p2 <= "1" when (trunc_ln28_7_fu_665_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_1_fu_385_p2 <= "1" when (trunc_ln28_1_fu_375_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_484_p2 <= "0" when (tmp_5_fu_453_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_490_p2 <= "1" when (trunc_ln28_2_fu_463_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_502_p2 <= "0" when (tmp_6_fu_470_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_508_p2 <= "1" when (trunc_ln28_3_fu_480_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_576_p2 <= "0" when (tmp_8_fu_544_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_582_p2 <= "1" when (trunc_ln28_4_fu_554_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_8_fu_594_p2 <= "0" when (tmp_9_fu_562_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_9_fu_600_p2 <= "1" when (trunc_ln28_5_fu_572_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_379_p2 <= "0" when (tmp_3_fu_365_p4 = ap_const_lv8_FF) else "1";
    max_pool_1_out_address0 <= zext_ln35_2_fu_742_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= 
        conv_1_out_1_q1 when (and_ln28_6_fu_711_p2(0) = '1') else 
        select_ln28_2_fu_624_p3;

    max_pool_1_out_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_784_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_reg_784_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln26_fu_411_p2 <= (shl_ln_reg_793 or ap_const_lv5_1);
    or_ln28_1_fu_496_p2 <= (icmp_ln28_3_fu_490_p2 or icmp_ln28_2_fu_484_p2);
    or_ln28_2_fu_514_p2 <= (icmp_ln28_5_fu_508_p2 or icmp_ln28_4_fu_502_p2);
    or_ln28_3_fu_588_p2 <= (icmp_ln28_7_fu_582_p2 or icmp_ln28_6_fu_576_p2);
    or_ln28_4_fu_606_p2 <= (icmp_ln28_9_fu_600_p2 or icmp_ln28_8_fu_594_p2);
    or_ln28_5_fu_681_p2 <= (icmp_ln28_11_fu_675_p2 or icmp_ln28_10_fu_669_p2);
    or_ln28_6_fu_699_p2 <= (icmp_ln28_13_fu_693_p2 or icmp_ln28_12_fu_687_p2);
    or_ln28_7_fu_322_p2 <= (tmp_13_fu_314_p3 or f_0_reg_157);
    or_ln28_fu_391_p2 <= (icmp_ln28_fu_379_p2 or icmp_ln28_1_fu_385_p2);
    r_fu_274_p2 <= std_logic_vector(unsigned(r_0_reg_169) + unsigned(ap_const_lv4_1));
    select_ln28_1_fu_532_p3 <= 
        conv_1_out_0_q1 when (and_ln28_2_fu_526_p2(0) = '1') else 
        select_ln28_reg_818;
    select_ln28_2_fu_624_p3 <= 
        conv_1_out_1_q0 when (and_ln28_4_fu_618_p2(0) = '1') else 
        select_ln28_1_fu_532_p3;
    select_ln28_fu_403_p3 <= 
        conv_1_out_0_q0 when (and_ln28_fu_397_p2(0) = '1') else 
        ap_const_lv32_800000;
    shl_ln_fu_292_p3 <= (c_0_reg_204 & ap_const_lv1_0);
    tmp_10_fu_637_p4 <= bitcast_ln28_5_fu_633_p1(30 downto 23);
    tmp_11_fu_655_p4 <= bitcast_ln28_6_fu_651_p1(30 downto 23);
    tmp_13_fu_314_p3 <= (trunc_ln28_fu_310_p1 & ap_const_lv5_0);
    tmp_14_fu_328_p4 <= add_ln28_fu_304_p2(8 downto 1);
    tmp_15_fu_338_p3 <= (tmp_14_fu_328_p4 & or_ln28_7_fu_322_p2);
    tmp_16_fu_426_p3 <= (add_ln28_1_fu_420_p2 & ap_const_lv5_0);
    tmp_17_fu_726_p3 <= (add_ln35_reg_808_pp0_iter1_reg & ap_const_lv5_0);
    tmp_3_fu_365_p4 <= bitcast_ln28_fu_361_p1(30 downto 23);
    tmp_5_fu_453_p4 <= bitcast_ln28_1_fu_449_p1(30 downto 23);
    tmp_6_fu_470_p4 <= bitcast_ln28_2_fu_467_p1(30 downto 23);
    tmp_8_fu_544_p4 <= bitcast_ln28_3_fu_540_p1(30 downto 23);
    tmp_9_fu_562_p4 <= bitcast_ln28_4_fu_558_p1(30 downto 23);
    trunc_ln28_1_fu_375_p1 <= bitcast_ln28_fu_361_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_463_p1 <= bitcast_ln28_1_fu_449_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_480_p1 <= bitcast_ln28_2_fu_467_p1(23 - 1 downto 0);
    trunc_ln28_4_fu_554_p1 <= bitcast_ln28_3_fu_540_p1(23 - 1 downto 0);
    trunc_ln28_5_fu_572_p1 <= bitcast_ln28_4_fu_558_p1(23 - 1 downto 0);
    trunc_ln28_6_fu_647_p1 <= bitcast_ln28_5_fu_633_p1(23 - 1 downto 0);
    trunc_ln28_7_fu_665_p1 <= bitcast_ln28_6_fu_651_p1(23 - 1 downto 0);
    trunc_ln28_fu_310_p1 <= add_ln28_fu_304_p2(1 - 1 downto 0);
    zext_ln13_1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_157),15));
    zext_ln13_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_157),14));
    zext_ln28_1_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_338_p3),64));
    zext_ln28_2_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_411_p2),9));
    zext_ln28_3_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_426_p3),15));
    zext_ln28_4_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_fu_438_p2),64));
    zext_ln28_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_292_p3),9));
    zext_ln35_1_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_726_p3),14));
    zext_ln35_2_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_737_p2),64));
    zext_ln35_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_204),8));
end behav;
