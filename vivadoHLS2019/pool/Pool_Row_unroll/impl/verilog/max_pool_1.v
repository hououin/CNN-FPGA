// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.719000,HLS_SYN_LAT=60385,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=224,HLS_SYN_LUT=881,HLS_VERSION=2019_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] conv_1_out_address0;
reg conv_1_out_ce0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] f_fu_223_p2;
reg   [5:0] f_reg_632;
wire    ap_CS_fsm_state2;
wire   [15:0] zext_ln13_fu_229_p1;
reg   [15:0] zext_ln13_reg_637;
wire   [0:0] icmp_ln10_fu_217_p2;
wire   [13:0] zext_ln13_1_fu_233_p1;
reg   [13:0] zext_ln13_1_reg_643;
wire   [7:0] add_ln13_fu_237_p2;
reg   [7:0] add_ln13_reg_648;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_249_p2;
reg   [3:0] r_reg_656;
wire   [9:0] mul_ln28_fu_267_p2;
reg   [9:0] mul_ln28_reg_661;
wire   [0:0] icmp_ln13_fu_243_p2;
wire   [9:0] mul_ln28_1_fu_283_p2;
reg   [9:0] mul_ln28_1_reg_666;
wire   [3:0] c_fu_295_p2;
reg   [3:0] c_reg_674;
wire    ap_CS_fsm_state4;
wire   [4:0] shl_ln1_fu_301_p3;
reg   [4:0] shl_ln1_reg_679;
wire   [0:0] icmp_ln16_fu_289_p2;
wire   [1:0] add_ln23_fu_319_p2;
reg   [1:0] add_ln23_reg_688;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln23_fu_313_p2;
wire   [31:0] select_ln28_fu_445_p3;
wire    ap_CS_fsm_state6;
wire   [1:0] add_ln23_1_fu_463_p2;
reg   [1:0] add_ln23_1_reg_706;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln23_1_fu_457_p2;
wire   [31:0] select_ln28_1_fu_621_p3;
wire    ap_CS_fsm_state8;
reg   [5:0] f_0_reg_118;
reg   [3:0] r_0_reg_129;
reg   [7:0] phi_mul_reg_140;
reg   [3:0] c_0_reg_152;
reg   [31:0] max_1_0_reg_164;
reg   [1:0] mpc_0_0_reg_176;
reg   [31:0] max_1_1_reg_187;
reg   [1:0] mpc_0_1_reg_199;
wire   [63:0] zext_ln28_4_fu_356_p1;
wire   [63:0] zext_ln28_7_fu_500_p1;
wire   [63:0] zext_ln35_2_fu_532_p1;
reg   [31:0] grp_fu_210_p1;
wire   [4:0] shl_ln_fu_255_p3;
wire   [4:0] mul_ln28_fu_267_p0;
wire   [4:0] or_ln25_fu_273_p2;
wire   [4:0] mul_ln28_1_fu_283_p0;
wire   [4:0] zext_ln23_fu_309_p1;
wire   [4:0] add_ln26_fu_325_p2;
wire   [9:0] zext_ln28_2_fu_330_p1;
wire   [9:0] add_ln28_fu_334_p2;
wire   [14:0] tmp_10_fu_339_p3;
wire   [15:0] zext_ln28_3_fu_347_p1;
wire   [15:0] add_ln28_1_fu_351_p2;
wire   [31:0] bitcast_ln28_fu_361_p1;
wire   [31:0] bitcast_ln28_1_fu_379_p1;
wire   [7:0] tmp_1_fu_365_p4;
wire   [22:0] trunc_ln28_fu_375_p1;
wire   [0:0] icmp_ln28_1_fu_403_p2;
wire   [0:0] icmp_ln28_fu_397_p2;
wire   [7:0] tmp_5_fu_383_p4;
wire   [22:0] trunc_ln28_1_fu_393_p1;
wire   [0:0] icmp_ln28_3_fu_421_p2;
wire   [0:0] icmp_ln28_2_fu_415_p2;
wire   [0:0] or_ln28_fu_409_p2;
wire   [0:0] or_ln28_1_fu_427_p2;
wire   [0:0] and_ln28_fu_433_p2;
wire   [0:0] grp_fu_210_p2;
wire   [0:0] and_ln28_1_fu_439_p2;
wire   [4:0] zext_ln23_1_fu_453_p1;
wire   [4:0] add_ln26_1_fu_469_p2;
wire   [9:0] zext_ln28_5_fu_474_p1;
wire   [9:0] add_ln28_2_fu_478_p2;
wire   [14:0] tmp_12_fu_483_p3;
wire   [15:0] zext_ln28_6_fu_491_p1;
wire   [15:0] add_ln28_3_fu_495_p2;
wire   [7:0] zext_ln35_fu_505_p1;
wire   [7:0] add_ln35_fu_509_p2;
wire   [12:0] tmp_11_fu_515_p3;
wire   [13:0] zext_ln35_1_fu_523_p1;
wire   [13:0] add_ln35_1_fu_527_p2;
wire   [31:0] bitcast_ln28_2_fu_537_p1;
wire   [31:0] bitcast_ln28_3_fu_555_p1;
wire   [7:0] tmp_7_fu_541_p4;
wire   [22:0] trunc_ln28_2_fu_551_p1;
wire   [0:0] icmp_ln28_5_fu_579_p2;
wire   [0:0] icmp_ln28_4_fu_573_p2;
wire   [7:0] tmp_8_fu_559_p4;
wire   [22:0] trunc_ln28_3_fu_569_p1;
wire   [0:0] icmp_ln28_7_fu_597_p2;
wire   [0:0] icmp_ln28_6_fu_591_p2;
wire   [0:0] or_ln28_2_fu_585_p2;
wire   [0:0] or_ln28_3_fu_603_p2;
wire   [0:0] and_ln28_2_fu_609_p2;
wire   [0:0] and_ln28_3_fu_615_p2;
reg   [7:0] ap_NS_fsm;
wire   [9:0] mul_ln28_1_fu_283_p00;
wire   [9:0] mul_ln28_fu_267_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(grp_fu_210_p1),
    .opcode(5'd2),
    .dout(grp_fu_210_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln23_1_fu_457_p2 == 1'd1))) begin
        c_0_reg_152 <= c_reg_674;
    end else if (((icmp_ln13_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_152 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_118 <= f_reg_632;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_118 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_1_0_reg_164 <= select_ln28_fu_445_p3;
    end else if (((icmp_ln16_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_1_0_reg_164 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_1_1_reg_187 <= select_ln28_1_fu_621_p3;
    end else if (((icmp_ln23_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_1_1_reg_187 <= max_1_0_reg_164;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_0_0_reg_176 <= add_ln23_reg_688;
    end else if (((icmp_ln16_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpc_0_0_reg_176 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mpc_0_1_reg_199 <= add_ln23_1_reg_706;
    end else if (((icmp_ln23_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mpc_0_1_reg_199 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_140 <= add_ln13_reg_648;
    end else if (((icmp_ln10_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_140 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_129 <= r_reg_656;
    end else if (((icmp_ln10_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_129 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_648 <= add_ln13_fu_237_p2;
        r_reg_656 <= r_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln23_1_reg_706 <= add_ln23_1_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln23_reg_688 <= add_ln23_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_674 <= c_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_632 <= f_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mul_ln28_1_reg_666[9 : 1] <= mul_ln28_1_fu_283_p2[9 : 1];
        mul_ln28_reg_661[9 : 1] <= mul_ln28_fu_267_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln1_reg_679[4 : 1] <= shl_ln1_fu_301_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_643[5 : 0] <= zext_ln13_1_fu_233_p1[5 : 0];
        zext_ln13_reg_637[5 : 0] <= zext_ln13_fu_229_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_1_out_address0 = zext_ln28_7_fu_500_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_address0 = zext_ln28_4_fu_356_p1;
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_210_p1 = max_1_1_reg_187;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_210_p1 = max_1_0_reg_164;
    end else begin
        grp_fu_210_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln23_1_fu_457_p2 == 1'd1))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln23_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln23_1_fu_457_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_237_p2 = (phi_mul_reg_140 + 8'd13);

assign add_ln23_1_fu_463_p2 = (mpc_0_1_reg_199 + 2'd1);

assign add_ln23_fu_319_p2 = (mpc_0_0_reg_176 + 2'd1);

assign add_ln26_1_fu_469_p2 = (shl_ln1_reg_679 + zext_ln23_1_fu_453_p1);

assign add_ln26_fu_325_p2 = (shl_ln1_reg_679 + zext_ln23_fu_309_p1);

assign add_ln28_1_fu_351_p2 = (zext_ln13_reg_637 + zext_ln28_3_fu_347_p1);

assign add_ln28_2_fu_478_p2 = (zext_ln28_5_fu_474_p1 + mul_ln28_1_reg_666);

assign add_ln28_3_fu_495_p2 = (zext_ln13_reg_637 + zext_ln28_6_fu_491_p1);

assign add_ln28_fu_334_p2 = (zext_ln28_2_fu_330_p1 + mul_ln28_reg_661);

assign add_ln35_1_fu_527_p2 = (zext_ln35_1_fu_523_p1 + zext_ln13_1_reg_643);

assign add_ln35_fu_509_p2 = (phi_mul_reg_140 + zext_ln35_fu_505_p1);

assign and_ln28_1_fu_439_p2 = (grp_fu_210_p2 & and_ln28_fu_433_p2);

assign and_ln28_2_fu_609_p2 = (or_ln28_3_fu_603_p2 & or_ln28_2_fu_585_p2);

assign and_ln28_3_fu_615_p2 = (grp_fu_210_p2 & and_ln28_2_fu_609_p2);

assign and_ln28_fu_433_p2 = (or_ln28_fu_409_p2 & or_ln28_1_fu_427_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln28_1_fu_379_p1 = max_1_0_reg_164;

assign bitcast_ln28_2_fu_537_p1 = conv_1_out_q0;

assign bitcast_ln28_3_fu_555_p1 = max_1_1_reg_187;

assign bitcast_ln28_fu_361_p1 = conv_1_out_q0;

assign c_fu_295_p2 = (c_0_reg_152 + 4'd1);

assign f_fu_223_p2 = (f_0_reg_118 + 6'd1);

assign icmp_ln10_fu_217_p2 = ((f_0_reg_118 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_243_p2 = ((r_0_reg_129 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_289_p2 = ((c_0_reg_152 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_457_p2 = ((mpc_0_1_reg_199 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_313_p2 = ((mpc_0_0_reg_176 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_403_p2 = ((trunc_ln28_fu_375_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_415_p2 = ((tmp_5_fu_383_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_421_p2 = ((trunc_ln28_1_fu_393_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_573_p2 = ((tmp_7_fu_541_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_579_p2 = ((trunc_ln28_2_fu_551_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_591_p2 = ((tmp_8_fu_559_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_597_p2 = ((trunc_ln28_3_fu_569_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_397_p2 = ((tmp_1_fu_365_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_2_fu_532_p1;

assign max_pool_1_out_d0 = max_1_1_reg_187;

assign mul_ln28_1_fu_283_p0 = mul_ln28_1_fu_283_p00;

assign mul_ln28_1_fu_283_p00 = or_ln25_fu_273_p2;

assign mul_ln28_1_fu_283_p2 = (mul_ln28_1_fu_283_p0 * $signed('h1A));

assign mul_ln28_fu_267_p0 = mul_ln28_fu_267_p00;

assign mul_ln28_fu_267_p00 = shl_ln_fu_255_p3;

assign mul_ln28_fu_267_p2 = (mul_ln28_fu_267_p0 * $signed('h1A));

assign or_ln25_fu_273_p2 = (shl_ln_fu_255_p3 | 5'd1);

assign or_ln28_1_fu_427_p2 = (icmp_ln28_3_fu_421_p2 | icmp_ln28_2_fu_415_p2);

assign or_ln28_2_fu_585_p2 = (icmp_ln28_5_fu_579_p2 | icmp_ln28_4_fu_573_p2);

assign or_ln28_3_fu_603_p2 = (icmp_ln28_7_fu_597_p2 | icmp_ln28_6_fu_591_p2);

assign or_ln28_fu_409_p2 = (icmp_ln28_fu_397_p2 | icmp_ln28_1_fu_403_p2);

assign r_fu_249_p2 = (r_0_reg_129 + 4'd1);

assign select_ln28_1_fu_621_p3 = ((and_ln28_3_fu_615_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_1_reg_187);

assign select_ln28_fu_445_p3 = ((and_ln28_1_fu_439_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_0_reg_164);

assign shl_ln1_fu_301_p3 = {{c_0_reg_152}, {1'd0}};

assign shl_ln_fu_255_p3 = {{r_0_reg_129}, {1'd0}};

assign tmp_10_fu_339_p3 = {{add_ln28_fu_334_p2}, {5'd0}};

assign tmp_11_fu_515_p3 = {{add_ln35_fu_509_p2}, {5'd0}};

assign tmp_12_fu_483_p3 = {{add_ln28_2_fu_478_p2}, {5'd0}};

assign tmp_1_fu_365_p4 = {{bitcast_ln28_fu_361_p1[30:23]}};

assign tmp_5_fu_383_p4 = {{bitcast_ln28_1_fu_379_p1[30:23]}};

assign tmp_7_fu_541_p4 = {{bitcast_ln28_2_fu_537_p1[30:23]}};

assign tmp_8_fu_559_p4 = {{bitcast_ln28_3_fu_555_p1[30:23]}};

assign trunc_ln28_1_fu_393_p1 = bitcast_ln28_1_fu_379_p1[22:0];

assign trunc_ln28_2_fu_551_p1 = bitcast_ln28_2_fu_537_p1[22:0];

assign trunc_ln28_3_fu_569_p1 = bitcast_ln28_3_fu_555_p1[22:0];

assign trunc_ln28_fu_375_p1 = bitcast_ln28_fu_361_p1[22:0];

assign zext_ln13_1_fu_233_p1 = f_0_reg_118;

assign zext_ln13_fu_229_p1 = f_0_reg_118;

assign zext_ln23_1_fu_453_p1 = mpc_0_1_reg_199;

assign zext_ln23_fu_309_p1 = mpc_0_0_reg_176;

assign zext_ln28_2_fu_330_p1 = add_ln26_fu_325_p2;

assign zext_ln28_3_fu_347_p1 = tmp_10_fu_339_p3;

assign zext_ln28_4_fu_356_p1 = add_ln28_1_fu_351_p2;

assign zext_ln28_5_fu_474_p1 = add_ln26_1_fu_469_p2;

assign zext_ln28_6_fu_491_p1 = tmp_12_fu_483_p3;

assign zext_ln28_7_fu_500_p1 = add_ln28_3_fu_495_p2;

assign zext_ln35_1_fu_523_p1 = tmp_11_fu_515_p3;

assign zext_ln35_2_fu_532_p1 = add_ln35_1_fu_527_p2;

assign zext_ln35_fu_505_p1 = c_0_reg_152;

always @ (posedge ap_clk) begin
    zext_ln13_reg_637[15:6] <= 10'b0000000000;
    zext_ln13_1_reg_643[13:6] <= 8'b00000000;
    mul_ln28_reg_661[0] <= 1'b0;
    mul_ln28_1_reg_666[0] <= 1'b0;
    shl_ln1_reg_679[0] <= 1'b0;
end

endmodule //max_pool_1
