-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.719000,HLS_SYN_LAT=60385,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=224,HLS_SYN_LUT=881,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal f_fu_223_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_632 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_229_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_reg_637 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln10_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_233_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_1_reg_643 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_fu_237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_648 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_fu_249_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_656 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln28_fu_267_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln28_reg_661 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln13_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln28_1_fu_283_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln28_1_reg_666 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_fu_295_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_674 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln1_fu_301_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_reg_679 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_fu_319_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln23_reg_688 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln23_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_445_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln23_1_fu_463_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln23_1_reg_706 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln23_1_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_1_fu_621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal f_0_reg_118 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_0_reg_129 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_152 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_1_0_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_0_reg_176 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_1_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_1_reg_199 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_4_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_7_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_255_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_fu_267_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln25_fu_273_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_1_fu_283_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_fu_309_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_325_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_2_fu_330_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_fu_334_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_339_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_3_fu_347_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_1_fu_351_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln28_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_365_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_375_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_383_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_393_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln23_1_fu_453_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_469_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_5_fu_474_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_2_fu_478_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_483_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_6_fu_491_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_3_fu_495_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_fu_505_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_fu_509_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_515_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_1_fu_523_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_1_fu_527_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln28_2_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_3_fu_555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_541_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_551_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_559_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_569_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_1_fu_283_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln28_fu_267_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => grp_fu_210_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_210_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln23_1_fu_457_p2 = ap_const_lv1_1))) then 
                c_0_reg_152 <= c_reg_674;
            elsif (((icmp_ln13_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_152 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_118 <= f_reg_632;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_118 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    max_1_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                max_1_0_reg_164 <= select_ln28_fu_445_p3;
            elsif (((icmp_ln16_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_1_0_reg_164 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_1_1_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                max_1_1_reg_187 <= select_ln28_1_fu_621_p3;
            elsif (((icmp_ln23_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_1_1_reg_187 <= max_1_0_reg_164;
            end if; 
        end if;
    end process;

    mpc_0_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                mpc_0_0_reg_176 <= add_ln23_reg_688;
            elsif (((icmp_ln16_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpc_0_0_reg_176 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpc_0_1_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                mpc_0_1_reg_199 <= add_ln23_1_reg_706;
            elsif (((icmp_ln23_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                mpc_0_1_reg_199 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_140 <= add_ln13_reg_648;
            elsif (((icmp_ln10_fu_217_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_140 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_0_reg_129 <= r_reg_656;
            elsif (((icmp_ln10_fu_217_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_129 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_reg_648 <= add_ln13_fu_237_p2;
                r_reg_656 <= r_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln23_1_reg_706 <= add_ln23_1_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln23_reg_688 <= add_ln23_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_674 <= c_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_632 <= f_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    mul_ln28_1_reg_666(9 downto 1) <= mul_ln28_1_fu_283_p2(9 downto 1);
                    mul_ln28_reg_661(9 downto 1) <= mul_ln28_fu_267_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln1_reg_679(4 downto 1) <= shl_ln1_fu_301_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_217_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_1_reg_643(5 downto 0) <= zext_ln13_1_fu_233_p1(5 downto 0);
                    zext_ln13_reg_637(5 downto 0) <= zext_ln13_fu_229_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_637(15 downto 6) <= "0000000000";
    zext_ln13_1_reg_643(13 downto 6) <= "00000000";
    mul_ln28_reg_661(0) <= '0';
    mul_ln28_1_reg_666(0) <= '0';
    shl_ln1_reg_679(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_217_p2, ap_CS_fsm_state3, icmp_ln13_fu_243_p2, ap_CS_fsm_state4, icmp_ln16_fu_289_p2, ap_CS_fsm_state5, icmp_ln23_fu_313_p2, ap_CS_fsm_state7, icmp_ln23_1_fu_457_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln23_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln23_1_fu_457_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln13_fu_237_p2 <= std_logic_vector(unsigned(phi_mul_reg_140) + unsigned(ap_const_lv8_D));
    add_ln23_1_fu_463_p2 <= std_logic_vector(unsigned(mpc_0_1_reg_199) + unsigned(ap_const_lv2_1));
    add_ln23_fu_319_p2 <= std_logic_vector(unsigned(mpc_0_0_reg_176) + unsigned(ap_const_lv2_1));
    add_ln26_1_fu_469_p2 <= std_logic_vector(unsigned(shl_ln1_reg_679) + unsigned(zext_ln23_1_fu_453_p1));
    add_ln26_fu_325_p2 <= std_logic_vector(unsigned(shl_ln1_reg_679) + unsigned(zext_ln23_fu_309_p1));
    add_ln28_1_fu_351_p2 <= std_logic_vector(unsigned(zext_ln13_reg_637) + unsigned(zext_ln28_3_fu_347_p1));
    add_ln28_2_fu_478_p2 <= std_logic_vector(unsigned(zext_ln28_5_fu_474_p1) + unsigned(mul_ln28_1_reg_666));
    add_ln28_3_fu_495_p2 <= std_logic_vector(unsigned(zext_ln13_reg_637) + unsigned(zext_ln28_6_fu_491_p1));
    add_ln28_fu_334_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_330_p1) + unsigned(mul_ln28_reg_661));
    add_ln35_1_fu_527_p2 <= std_logic_vector(unsigned(zext_ln35_1_fu_523_p1) + unsigned(zext_ln13_1_reg_643));
    add_ln35_fu_509_p2 <= std_logic_vector(unsigned(phi_mul_reg_140) + unsigned(zext_ln35_fu_505_p1));
    and_ln28_1_fu_439_p2 <= (grp_fu_210_p2 and and_ln28_fu_433_p2);
    and_ln28_2_fu_609_p2 <= (or_ln28_3_fu_603_p2 and or_ln28_2_fu_585_p2);
    and_ln28_3_fu_615_p2 <= (grp_fu_210_p2 and and_ln28_2_fu_609_p2);
    and_ln28_fu_433_p2 <= (or_ln28_fu_409_p2 and or_ln28_1_fu_427_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_217_p2)
    begin
        if (((icmp_ln10_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_217_p2)
    begin
        if (((icmp_ln10_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_379_p1 <= max_1_0_reg_164;
    bitcast_ln28_2_fu_537_p1 <= conv_1_out_q0;
    bitcast_ln28_3_fu_555_p1 <= max_1_1_reg_187;
    bitcast_ln28_fu_361_p1 <= conv_1_out_q0;
    c_fu_295_p2 <= std_logic_vector(unsigned(c_0_reg_152) + unsigned(ap_const_lv4_1));

    conv_1_out_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, zext_ln28_4_fu_356_p1, zext_ln28_7_fu_500_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_1_out_address0 <= zext_ln28_7_fu_500_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_address0 <= zext_ln28_4_fu_356_p1(15 - 1 downto 0);
        else 
            conv_1_out_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_223_p2 <= std_logic_vector(unsigned(f_0_reg_118) + unsigned(ap_const_lv6_1));

    grp_fu_210_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, max_1_0_reg_164, max_1_1_reg_187)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_210_p1 <= max_1_1_reg_187;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_210_p1 <= max_1_0_reg_164;
        else 
            grp_fu_210_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_217_p2 <= "1" when (f_0_reg_118 = ap_const_lv6_20) else "0";
    icmp_ln13_fu_243_p2 <= "1" when (r_0_reg_129 = ap_const_lv4_D) else "0";
    icmp_ln16_fu_289_p2 <= "1" when (c_0_reg_152 = ap_const_lv4_D) else "0";
    icmp_ln23_1_fu_457_p2 <= "1" when (mpc_0_1_reg_199 = ap_const_lv2_2) else "0";
    icmp_ln23_fu_313_p2 <= "1" when (mpc_0_0_reg_176 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_403_p2 <= "1" when (trunc_ln28_fu_375_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_415_p2 <= "0" when (tmp_5_fu_383_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_421_p2 <= "1" when (trunc_ln28_1_fu_393_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_573_p2 <= "0" when (tmp_7_fu_541_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_579_p2 <= "1" when (trunc_ln28_2_fu_551_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_591_p2 <= "0" when (tmp_8_fu_559_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_597_p2 <= "1" when (trunc_ln28_3_fu_569_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_397_p2 <= "0" when (tmp_1_fu_365_p4 = ap_const_lv8_FF) else "1";
    max_pool_1_out_address0 <= zext_ln35_2_fu_532_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= max_1_1_reg_187;

    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln23_1_fu_457_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln23_1_fu_457_p2 = ap_const_lv1_1))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln28_1_fu_283_p0 <= mul_ln28_1_fu_283_p00(5 - 1 downto 0);
    mul_ln28_1_fu_283_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_fu_273_p2),10));
    mul_ln28_1_fu_283_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln28_1_fu_283_p0) * unsigned(ap_const_lv10_1A), 10));
    mul_ln28_fu_267_p0 <= mul_ln28_fu_267_p00(5 - 1 downto 0);
    mul_ln28_fu_267_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_255_p3),10));
    mul_ln28_fu_267_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln28_fu_267_p0) * unsigned(ap_const_lv10_1A), 10));
    or_ln25_fu_273_p2 <= (shl_ln_fu_255_p3 or ap_const_lv5_1);
    or_ln28_1_fu_427_p2 <= (icmp_ln28_3_fu_421_p2 or icmp_ln28_2_fu_415_p2);
    or_ln28_2_fu_585_p2 <= (icmp_ln28_5_fu_579_p2 or icmp_ln28_4_fu_573_p2);
    or_ln28_3_fu_603_p2 <= (icmp_ln28_7_fu_597_p2 or icmp_ln28_6_fu_591_p2);
    or_ln28_fu_409_p2 <= (icmp_ln28_fu_397_p2 or icmp_ln28_1_fu_403_p2);
    r_fu_249_p2 <= std_logic_vector(unsigned(r_0_reg_129) + unsigned(ap_const_lv4_1));
    select_ln28_1_fu_621_p3 <= 
        conv_1_out_q0 when (and_ln28_3_fu_615_p2(0) = '1') else 
        max_1_1_reg_187;
    select_ln28_fu_445_p3 <= 
        conv_1_out_q0 when (and_ln28_1_fu_439_p2(0) = '1') else 
        max_1_0_reg_164;
    shl_ln1_fu_301_p3 <= (c_0_reg_152 & ap_const_lv1_0);
    shl_ln_fu_255_p3 <= (r_0_reg_129 & ap_const_lv1_0);
    tmp_10_fu_339_p3 <= (add_ln28_fu_334_p2 & ap_const_lv5_0);
    tmp_11_fu_515_p3 <= (add_ln35_fu_509_p2 & ap_const_lv5_0);
    tmp_12_fu_483_p3 <= (add_ln28_2_fu_478_p2 & ap_const_lv5_0);
    tmp_1_fu_365_p4 <= bitcast_ln28_fu_361_p1(30 downto 23);
    tmp_5_fu_383_p4 <= bitcast_ln28_1_fu_379_p1(30 downto 23);
    tmp_7_fu_541_p4 <= bitcast_ln28_2_fu_537_p1(30 downto 23);
    tmp_8_fu_559_p4 <= bitcast_ln28_3_fu_555_p1(30 downto 23);
    trunc_ln28_1_fu_393_p1 <= bitcast_ln28_1_fu_379_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_551_p1 <= bitcast_ln28_2_fu_537_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_569_p1 <= bitcast_ln28_3_fu_555_p1(23 - 1 downto 0);
    trunc_ln28_fu_375_p1 <= bitcast_ln28_fu_361_p1(23 - 1 downto 0);
    zext_ln13_1_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_118),14));
    zext_ln13_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_118),16));
    zext_ln23_1_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpc_0_1_reg_199),5));
    zext_ln23_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpc_0_0_reg_176),5));
    zext_ln28_2_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_325_p2),10));
    zext_ln28_3_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_339_p3),16));
    zext_ln28_4_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_351_p2),64));
    zext_ln28_5_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_469_p2),10));
    zext_ln28_6_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_483_p3),16));
    zext_ln28_7_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_fu_495_p2),64));
    zext_ln35_1_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_515_p3),14));
    zext_ln35_2_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_527_p2),64));
    zext_ln35_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_152),8));
end behav;
