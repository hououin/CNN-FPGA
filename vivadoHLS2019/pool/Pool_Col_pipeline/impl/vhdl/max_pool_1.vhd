-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.916500,HLS_SYN_LAT=37857,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=205,HLS_SYN_LUT=775,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv13_1520 : STD_LOGIC_VECTOR (12 downto 0) := "1010100100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_188 : STD_LOGIC_VECTOR (2 downto 0);
    signal mpr_0_reg_199 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_reg_223 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_fu_246_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln10_reg_630 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln13_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_635 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_1_fu_272_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln28_1_reg_640 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln25_fu_280_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln25_reg_645 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln25_1_fu_284_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln25_1_reg_650 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln13_fu_334_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_reg_655 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_1_fu_350_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_1_reg_661 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_2_fu_358_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_2_reg_666 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln35_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln35_reg_671 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_376_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_reg_676 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln20_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln20_1_fu_390_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln20_1_fu_416_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln20_1_reg_690 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpc_fu_471_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_2_fu_561_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal c_fu_599_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln13_3_fu_610_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal indvar_flatten25_reg_132 : STD_LOGIC_VECTOR (12 downto 0);
    signal f_0_reg_143 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten7_reg_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_177 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_203_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln28_3_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_fu_252_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_288_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_264_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln28_2_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_322_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln25_mid1_fu_342_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_2_fu_296_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln35_fu_370_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln23_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_396_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln20_fu_424_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_fu_428_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln20_fu_408_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln23_fu_437_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_617_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_450_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_2_fu_457_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_1_fu_461_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln28_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_481_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_491_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_499_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_509_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_569_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_fu_572_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_577_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_2_fu_585_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_1_fu_589_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_1_fu_604_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_617_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_617_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_617_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_617_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_617_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln35_fu_370_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component max_pool_1_mac_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => max_1_reg_210,
        opcode => ap_const_lv5_2,
        dout => tmp_7_fu_234_p2);

    max_pool_1_mac_mucud_U2 : component max_pool_1_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_617_p0,
        din1 => grp_fu_617_p1,
        din2 => grp_fu_617_p2,
        dout => grp_fu_617_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln10_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln10_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_0_reg_177 <= c_fu_599_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_177 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                f_0_reg_143 <= select_ln28_1_reg_640;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_143 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten25_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten25_reg_132 <= add_ln10_reg_630;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten25_reg_132 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten7_reg_154 <= select_ln13_3_fu_610_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten7_reg_154 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_384_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_188 <= add_ln20_1_fu_390_p2;
            elsif (((icmp_ln10_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_188 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_1_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_reg_681 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                max_1_reg_210 <= max_2_fu_561_p3;
            elsif (((icmp_ln10_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_1_reg_210 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpc_0_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_384_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mpc_0_reg_223 <= mpc_fu_471_p2;
            elsif (((icmp_ln10_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpc_0_reg_223 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_reg_681 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                mpr_0_reg_199 <= select_ln20_1_reg_690;
            elsif (((icmp_ln10_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpr_0_reg_199 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                r_0_reg_166 <= select_ln13_2_reg_666;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_166 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln10_reg_630 <= add_ln10_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln13_reg_635 <= icmp_ln13_fu_258_p2;
                mul_ln35_reg_671 <= mul_ln35_fu_370_p2;
                    select_ln13_1_reg_661(4 downto 1) <= select_ln13_1_fu_350_p3(4 downto 1);
                select_ln13_2_reg_666 <= select_ln13_2_fu_358_p3;
                select_ln13_reg_655 <= select_ln13_fu_334_p3;
                select_ln28_1_reg_640 <= select_ln28_1_fu_272_p3;
                    shl_ln1_reg_676(4 downto 1) <= shl_ln1_fu_376_p3(4 downto 1);
                    zext_ln25_1_reg_650(5 downto 0) <= zext_ln25_1_fu_284_p1(5 downto 0);
                    zext_ln25_reg_645(5 downto 0) <= zext_ln25_fu_280_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_reg_681 <= icmp_ln20_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_384_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln20_1_reg_690 <= select_ln20_1_fu_416_p3;
            end if;
        end if;
    end process;
    zext_ln25_reg_645(15 downto 6) <= "0000000000";
    zext_ln25_1_reg_650(13 downto 6) <= "00000000";
    select_ln13_1_reg_661(0) <= '0';
    shl_ln1_reg_676(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_240_p2, ap_CS_fsm_state2, icmp_ln20_fu_384_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln20_fu_384_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln20_fu_384_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_246_p2 <= std_logic_vector(unsigned(indvar_flatten25_reg_132) + unsigned(ap_const_lv13_1));
    add_ln13_1_fu_604_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_154) + unsigned(ap_const_lv8_1));
    add_ln20_1_fu_390_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_188) + unsigned(ap_const_lv3_1));
    add_ln20_fu_428_p2 <= std_logic_vector(unsigned(select_ln13_1_reg_661) + unsigned(zext_ln20_fu_424_p1));
    add_ln28_1_fu_461_p2 <= std_logic_vector(unsigned(zext_ln25_reg_645) + unsigned(zext_ln28_2_fu_457_p1));
    add_ln35_1_fu_589_p2 <= std_logic_vector(unsigned(zext_ln35_2_fu_585_p1) + unsigned(zext_ln25_1_reg_650));
    add_ln35_fu_572_p2 <= std_logic_vector(unsigned(mul_ln35_reg_671) + unsigned(zext_ln35_1_fu_569_p1));
    and_ln28_1_fu_555_p2 <= (tmp_7_fu_234_p2 and and_ln28_fu_549_p2);
    and_ln28_2_fu_316_p2 <= (xor_ln28_fu_304_p2 and icmp_ln16_fu_310_p2);
    and_ln28_fu_549_p2 <= (or_ln28_fu_525_p2 and or_ln28_1_fu_543_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln20_fu_384_p2)
    begin
        if ((icmp_ln20_fu_384_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln10_fu_240_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln10_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_203_p4_assign_proc : process(mpr_0_reg_199, icmp_ln20_reg_681, ap_CS_fsm_pp0_stage0, select_ln20_1_reg_690, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_681 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_203_p4 <= select_ln20_1_reg_690;
        else 
            ap_phi_mux_mpr_0_phi_fu_203_p4 <= mpr_0_reg_199;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln10_fu_240_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln10_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_495_p1 <= max_1_reg_210;
    bitcast_ln28_fu_477_p1 <= conv_1_out_q0;
    c_fu_599_p2 <= std_logic_vector(unsigned(select_ln13_reg_655) + unsigned(ap_const_lv4_1));
    conv_1_out_address0 <= zext_ln28_3_fu_466_p1(15 - 1 downto 0);

    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_252_p2 <= std_logic_vector(unsigned(f_0_reg_143) + unsigned(ap_const_lv6_1));
    grp_fu_617_p0 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_617_p1 <= grp_fu_617_p10(5 - 1 downto 0);
    grp_fu_617_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_fu_428_p2),10));
    grp_fu_617_p2 <= grp_fu_617_p20(5 - 1 downto 0);
    grp_fu_617_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_441_p2),10));
    icmp_ln10_fu_240_p2 <= "1" when (indvar_flatten25_reg_132 = ap_const_lv13_1520) else "0";
    icmp_ln13_fu_258_p2 <= "1" when (indvar_flatten7_reg_154 = ap_const_lv8_A9) else "0";
    icmp_ln16_fu_310_p2 <= "1" when (c_0_reg_177 = ap_const_lv4_D) else "0";
    icmp_ln20_fu_384_p2 <= "1" when (indvar_flatten_reg_188 = ap_const_lv3_4) else "0";
    icmp_ln23_fu_402_p2 <= "1" when (mpc_0_reg_223 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_519_p2 <= "1" when (trunc_ln28_fu_491_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_531_p2 <= "0" when (tmp_6_fu_499_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_537_p2 <= "1" when (trunc_ln28_1_fu_509_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_513_p2 <= "0" when (tmp_fu_481_p4 = ap_const_lv8_FF) else "1";
    j_fu_441_p2 <= std_logic_vector(unsigned(shl_ln1_reg_676) + unsigned(zext_ln23_fu_437_p1));
    max_2_fu_561_p3 <= 
        conv_1_out_q0 when (and_ln28_1_fu_555_p2(0) = '1') else 
        max_1_reg_210;
    max_pool_1_out_address0 <= zext_ln35_3_fu_594_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= max_1_reg_210;

    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_471_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln20_fu_408_p3));
    mpr_fu_396_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_mpr_0_phi_fu_203_p4));
    mul_ln35_fu_370_p0 <= mul_ln35_fu_370_p00(4 - 1 downto 0);
    mul_ln35_fu_370_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_fu_358_p3),8));
    mul_ln35_fu_370_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln35_fu_370_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln13_fu_328_p2 <= (icmp_ln13_fu_258_p2 or and_ln28_2_fu_316_p2);
    or_ln28_1_fu_543_p2 <= (icmp_ln28_3_fu_537_p2 or icmp_ln28_2_fu_531_p2);
    or_ln28_fu_525_p2 <= (icmp_ln28_fu_513_p2 or icmp_ln28_1_fu_519_p2);
    r_fu_322_p2 <= std_logic_vector(unsigned(select_ln28_fu_264_p3) + unsigned(ap_const_lv4_1));
    select_ln13_1_fu_350_p3 <= 
        shl_ln25_mid1_fu_342_p3 when (and_ln28_2_fu_316_p2(0) = '1') else 
        select_ln28_2_fu_296_p3;
    select_ln13_2_fu_358_p3 <= 
        r_fu_322_p2 when (and_ln28_2_fu_316_p2(0) = '1') else 
        select_ln28_fu_264_p3;
    select_ln13_3_fu_610_p3 <= 
        ap_const_lv8_1 when (icmp_ln13_reg_635(0) = '1') else 
        add_ln13_1_fu_604_p2;
    select_ln13_fu_334_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_328_p2(0) = '1') else 
        c_0_reg_177;
    select_ln20_1_fu_416_p3 <= 
        mpr_fu_396_p2 when (icmp_ln23_fu_402_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_203_p4;
    select_ln20_fu_408_p3 <= 
        ap_const_lv2_0 when (icmp_ln23_fu_402_p2(0) = '1') else 
        mpc_0_reg_223;
    select_ln28_1_fu_272_p3 <= 
        f_fu_252_p2 when (icmp_ln13_fu_258_p2(0) = '1') else 
        f_0_reg_143;
    select_ln28_2_fu_296_p3 <= 
        ap_const_lv5_0 when (icmp_ln13_fu_258_p2(0) = '1') else 
        shl_ln_fu_288_p3;
    select_ln28_fu_264_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_258_p2(0) = '1') else 
        r_0_reg_166;
    shl_ln1_fu_376_p3 <= (select_ln13_fu_334_p3 & ap_const_lv1_0);
    shl_ln25_mid1_fu_342_p3 <= (r_fu_322_p2 & ap_const_lv1_0);
    shl_ln_fu_288_p3 <= (r_0_reg_166 & ap_const_lv1_0);
    tmp_1_fu_577_p3 <= (add_ln35_fu_572_p2 & ap_const_lv5_0);
    tmp_2_fu_450_p3 <= (grp_fu_617_p3 & ap_const_lv5_0);
    tmp_6_fu_499_p4 <= bitcast_ln28_1_fu_495_p1(30 downto 23);
    tmp_fu_481_p4 <= bitcast_ln28_fu_477_p1(30 downto 23);
    trunc_ln28_1_fu_509_p1 <= bitcast_ln28_1_fu_495_p1(23 - 1 downto 0);
    trunc_ln28_fu_491_p1 <= bitcast_ln28_fu_477_p1(23 - 1 downto 0);
    xor_ln28_fu_304_p2 <= (icmp_ln13_fu_258_p2 xor ap_const_lv1_1);
    zext_ln20_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln20_1_fu_416_p3),5));
    zext_ln23_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln20_fu_408_p3),5));
    zext_ln25_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_fu_272_p3),14));
    zext_ln25_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_fu_272_p3),16));
    zext_ln28_2_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_450_p3),16));
    zext_ln28_3_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_461_p2),64));
    zext_ln35_1_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_reg_655),8));
    zext_ln35_2_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_577_p3),14));
    zext_ln35_3_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_589_p2),64));
end behav;
