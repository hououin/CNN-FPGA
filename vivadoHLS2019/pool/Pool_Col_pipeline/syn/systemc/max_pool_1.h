// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_1_HH_
#define _max_pool_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "max_pool_1_fcmp_3bkb.h"
#include "max_pool_1_mac_mucud.h"

namespace ap_rtl {

struct max_pool_1 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<15> > conv_1_out_address0;
    sc_out< sc_logic > conv_1_out_ce0;
    sc_in< sc_lv<32> > conv_1_out_q0;
    sc_out< sc_lv<13> > max_pool_1_out_address0;
    sc_out< sc_logic > max_pool_1_out_ce0;
    sc_out< sc_logic > max_pool_1_out_we0;
    sc_out< sc_lv<32> > max_pool_1_out_d0;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    max_pool_1(sc_module_name name);
    SC_HAS_PROCESS(max_pool_1);

    ~max_pool_1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    max_pool_1_fcmp_3bkb<1,1,32,32,1>* max_pool_1_fcmp_3bkb_U1;
    max_pool_1_mac_mucud<1,1,6,5,5,10>* max_pool_1_mac_mucud_U2;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > indvar_flatten_reg_188;
    sc_signal< sc_lv<2> > mpr_0_reg_199;
    sc_signal< sc_lv<32> > max_1_reg_210;
    sc_signal< sc_lv<2> > mpc_0_reg_223;
    sc_signal< sc_lv<1> > icmp_ln10_fu_240_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<13> > add_ln10_fu_246_p2;
    sc_signal< sc_lv<13> > add_ln10_reg_630;
    sc_signal< sc_lv<1> > icmp_ln13_fu_258_p2;
    sc_signal< sc_lv<1> > icmp_ln13_reg_635;
    sc_signal< sc_lv<6> > select_ln28_1_fu_272_p3;
    sc_signal< sc_lv<6> > select_ln28_1_reg_640;
    sc_signal< sc_lv<16> > zext_ln25_fu_280_p1;
    sc_signal< sc_lv<16> > zext_ln25_reg_645;
    sc_signal< sc_lv<14> > zext_ln25_1_fu_284_p1;
    sc_signal< sc_lv<14> > zext_ln25_1_reg_650;
    sc_signal< sc_lv<4> > select_ln13_fu_334_p3;
    sc_signal< sc_lv<4> > select_ln13_reg_655;
    sc_signal< sc_lv<5> > select_ln13_1_fu_350_p3;
    sc_signal< sc_lv<5> > select_ln13_1_reg_661;
    sc_signal< sc_lv<4> > select_ln13_2_fu_358_p3;
    sc_signal< sc_lv<4> > select_ln13_2_reg_666;
    sc_signal< sc_lv<8> > mul_ln35_fu_370_p2;
    sc_signal< sc_lv<8> > mul_ln35_reg_671;
    sc_signal< sc_lv<5> > shl_ln1_fu_376_p3;
    sc_signal< sc_lv<5> > shl_ln1_reg_676;
    sc_signal< sc_lv<1> > icmp_ln20_fu_384_p2;
    sc_signal< sc_lv<1> > icmp_ln20_reg_681;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > add_ln20_1_fu_390_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > select_ln20_1_fu_416_p3;
    sc_signal< sc_lv<2> > select_ln20_1_reg_690;
    sc_signal< sc_lv<2> > mpc_fu_471_p2;
    sc_signal< sc_lv<32> > max_2_fu_561_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<4> > c_fu_599_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > select_ln13_3_fu_610_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<13> > indvar_flatten25_reg_132;
    sc_signal< sc_lv<6> > f_0_reg_143;
    sc_signal< sc_lv<8> > indvar_flatten7_reg_154;
    sc_signal< sc_lv<4> > r_0_reg_166;
    sc_signal< sc_lv<4> > c_0_reg_177;
    sc_signal< sc_lv<2> > ap_phi_mux_mpr_0_phi_fu_203_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln28_3_fu_466_p1;
    sc_signal< sc_lv<64> > zext_ln35_3_fu_594_p1;
    sc_signal< sc_lv<6> > f_fu_252_p2;
    sc_signal< sc_lv<5> > shl_ln_fu_288_p3;
    sc_signal< sc_lv<1> > icmp_ln16_fu_310_p2;
    sc_signal< sc_lv<1> > xor_ln28_fu_304_p2;
    sc_signal< sc_lv<4> > select_ln28_fu_264_p3;
    sc_signal< sc_lv<1> > and_ln28_2_fu_316_p2;
    sc_signal< sc_lv<1> > or_ln13_fu_328_p2;
    sc_signal< sc_lv<4> > r_fu_322_p2;
    sc_signal< sc_lv<5> > shl_ln25_mid1_fu_342_p3;
    sc_signal< sc_lv<5> > select_ln28_2_fu_296_p3;
    sc_signal< sc_lv<4> > mul_ln35_fu_370_p0;
    sc_signal< sc_lv<1> > icmp_ln23_fu_402_p2;
    sc_signal< sc_lv<2> > mpr_fu_396_p2;
    sc_signal< sc_lv<5> > zext_ln20_fu_424_p1;
    sc_signal< sc_lv<5> > add_ln20_fu_428_p2;
    sc_signal< sc_lv<2> > select_ln20_fu_408_p3;
    sc_signal< sc_lv<5> > zext_ln23_fu_437_p1;
    sc_signal< sc_lv<5> > j_fu_441_p2;
    sc_signal< sc_lv<10> > grp_fu_617_p3;
    sc_signal< sc_lv<15> > tmp_2_fu_450_p3;
    sc_signal< sc_lv<16> > zext_ln28_2_fu_457_p1;
    sc_signal< sc_lv<16> > add_ln28_1_fu_461_p2;
    sc_signal< sc_lv<32> > bitcast_ln28_fu_477_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_1_fu_495_p1;
    sc_signal< sc_lv<8> > tmp_fu_481_p4;
    sc_signal< sc_lv<23> > trunc_ln28_fu_491_p1;
    sc_signal< sc_lv<1> > icmp_ln28_1_fu_519_p2;
    sc_signal< sc_lv<1> > icmp_ln28_fu_513_p2;
    sc_signal< sc_lv<8> > tmp_6_fu_499_p4;
    sc_signal< sc_lv<23> > trunc_ln28_1_fu_509_p1;
    sc_signal< sc_lv<1> > icmp_ln28_3_fu_537_p2;
    sc_signal< sc_lv<1> > icmp_ln28_2_fu_531_p2;
    sc_signal< sc_lv<1> > or_ln28_fu_525_p2;
    sc_signal< sc_lv<1> > or_ln28_1_fu_543_p2;
    sc_signal< sc_lv<1> > and_ln28_fu_549_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_234_p2;
    sc_signal< sc_lv<1> > and_ln28_1_fu_555_p2;
    sc_signal< sc_lv<8> > zext_ln35_1_fu_569_p1;
    sc_signal< sc_lv<8> > add_ln35_fu_572_p2;
    sc_signal< sc_lv<13> > tmp_1_fu_577_p3;
    sc_signal< sc_lv<14> > zext_ln35_2_fu_585_p1;
    sc_signal< sc_lv<14> > add_ln35_1_fu_589_p2;
    sc_signal< sc_lv<8> > add_ln13_1_fu_604_p2;
    sc_signal< sc_lv<6> > grp_fu_617_p0;
    sc_signal< sc_lv<5> > grp_fu_617_p1;
    sc_signal< sc_lv<5> > grp_fu_617_p2;
    sc_signal< bool > ap_block_pp0_stage0_00001;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<10> > grp_fu_617_p10;
    sc_signal< sc_lv<10> > grp_fu_617_p20;
    sc_signal< sc_lv<8> > mul_ln35_fu_370_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_800000;
    static const sc_lv<13> ap_const_lv13_1520;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<8> ap_const_lv8_A9;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<4> ap_const_lv4_D;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_D;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<10> ap_const_lv10_1A;
    static const sc_lv<5> ap_const_lv5_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln10_fu_246_p2();
    void thread_add_ln13_1_fu_604_p2();
    void thread_add_ln20_1_fu_390_p2();
    void thread_add_ln20_fu_428_p2();
    void thread_add_ln28_1_fu_461_p2();
    void thread_add_ln35_1_fu_589_p2();
    void thread_add_ln35_fu_572_p2();
    void thread_and_ln28_1_fu_555_p2();
    void thread_and_ln28_2_fu_316_p2();
    void thread_and_ln28_fu_549_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_00001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_mpr_0_phi_fu_203_p4();
    void thread_ap_ready();
    void thread_bitcast_ln28_1_fu_495_p1();
    void thread_bitcast_ln28_fu_477_p1();
    void thread_c_fu_599_p2();
    void thread_conv_1_out_address0();
    void thread_conv_1_out_ce0();
    void thread_f_fu_252_p2();
    void thread_grp_fu_617_p0();
    void thread_grp_fu_617_p1();
    void thread_grp_fu_617_p10();
    void thread_grp_fu_617_p2();
    void thread_grp_fu_617_p20();
    void thread_icmp_ln10_fu_240_p2();
    void thread_icmp_ln13_fu_258_p2();
    void thread_icmp_ln16_fu_310_p2();
    void thread_icmp_ln20_fu_384_p2();
    void thread_icmp_ln23_fu_402_p2();
    void thread_icmp_ln28_1_fu_519_p2();
    void thread_icmp_ln28_2_fu_531_p2();
    void thread_icmp_ln28_3_fu_537_p2();
    void thread_icmp_ln28_fu_513_p2();
    void thread_j_fu_441_p2();
    void thread_max_2_fu_561_p3();
    void thread_max_pool_1_out_address0();
    void thread_max_pool_1_out_ce0();
    void thread_max_pool_1_out_d0();
    void thread_max_pool_1_out_we0();
    void thread_mpc_fu_471_p2();
    void thread_mpr_fu_396_p2();
    void thread_mul_ln35_fu_370_p0();
    void thread_mul_ln35_fu_370_p00();
    void thread_mul_ln35_fu_370_p2();
    void thread_or_ln13_fu_328_p2();
    void thread_or_ln28_1_fu_543_p2();
    void thread_or_ln28_fu_525_p2();
    void thread_r_fu_322_p2();
    void thread_select_ln13_1_fu_350_p3();
    void thread_select_ln13_2_fu_358_p3();
    void thread_select_ln13_3_fu_610_p3();
    void thread_select_ln13_fu_334_p3();
    void thread_select_ln20_1_fu_416_p3();
    void thread_select_ln20_fu_408_p3();
    void thread_select_ln28_1_fu_272_p3();
    void thread_select_ln28_2_fu_296_p3();
    void thread_select_ln28_fu_264_p3();
    void thread_shl_ln1_fu_376_p3();
    void thread_shl_ln25_mid1_fu_342_p3();
    void thread_shl_ln_fu_288_p3();
    void thread_tmp_1_fu_577_p3();
    void thread_tmp_2_fu_450_p3();
    void thread_tmp_6_fu_499_p4();
    void thread_tmp_fu_481_p4();
    void thread_trunc_ln28_1_fu_509_p1();
    void thread_trunc_ln28_fu_491_p1();
    void thread_xor_ln28_fu_304_p2();
    void thread_zext_ln20_fu_424_p1();
    void thread_zext_ln23_fu_437_p1();
    void thread_zext_ln25_1_fu_284_p1();
    void thread_zext_ln25_fu_280_p1();
    void thread_zext_ln28_2_fu_457_p1();
    void thread_zext_ln28_3_fu_466_p1();
    void thread_zext_ln35_1_fu_569_p1();
    void thread_zext_ln35_2_fu_585_p1();
    void thread_zext_ln35_3_fu_594_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
