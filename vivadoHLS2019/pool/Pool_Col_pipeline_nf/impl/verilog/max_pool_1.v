// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.719000,HLS_SYN_LAT=76609,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=219,HLS_SYN_LUT=702,HLS_VERSION=2019_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_ce0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] mpc_0_reg_188;
reg   [31:0] max_1_reg_199;
wire   [5:0] f_fu_223_p2;
reg   [5:0] f_reg_493;
wire    ap_CS_fsm_state2;
wire   [15:0] zext_ln13_fu_229_p1;
reg   [15:0] zext_ln13_reg_498;
wire   [0:0] icmp_ln10_fu_217_p2;
wire   [13:0] zext_ln13_1_fu_233_p1;
reg   [13:0] zext_ln13_1_reg_503;
wire   [7:0] add_ln13_fu_237_p2;
reg   [7:0] add_ln13_reg_508;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_249_p2;
reg   [3:0] r_reg_516;
wire   [4:0] shl_ln_fu_255_p3;
reg   [4:0] shl_ln_reg_521;
wire   [0:0] icmp_ln13_fu_243_p2;
wire   [3:0] c_fu_269_p2;
reg   [3:0] c_reg_529;
wire    ap_CS_fsm_state4;
wire   [4:0] shl_ln1_fu_275_p3;
reg   [4:0] shl_ln1_reg_534;
wire   [0:0] icmp_ln16_fu_263_p2;
wire   [0:0] icmp_ln20_fu_287_p2;
wire    ap_CS_fsm_state5;
wire   [1:0] mpr_fu_293_p2;
reg   [1:0] mpr_reg_543;
wire   [9:0] mul_ln28_fu_308_p2;
reg   [9:0] mul_ln28_reg_548;
wire   [0:0] icmp_ln23_fu_346_p2;
reg   [0:0] icmp_ln23_reg_553;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] mpc_fu_352_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] max_2_fu_482_p3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg   [5:0] f_0_reg_118;
reg   [3:0] r_0_reg_129;
reg   [7:0] phi_mul_reg_140;
reg   [3:0] c_0_reg_152;
reg   [31:0] max_0_reg_164;
wire    ap_CS_fsm_state8;
reg   [1:0] mpr_0_reg_177;
wire   [63:0] zext_ln35_2_fu_341_p1;
wire   [63:0] zext_ln28_3_fu_393_p1;
wire    ap_block_pp0_stage0;
wire   [4:0] zext_ln20_fu_283_p1;
wire   [4:0] i_fu_299_p2;
wire   [4:0] mul_ln28_fu_308_p0;
wire   [7:0] zext_ln35_fu_314_p1;
wire   [7:0] add_ln35_fu_318_p2;
wire   [12:0] tmp_8_fu_324_p3;
wire   [13:0] zext_ln35_1_fu_332_p1;
wire   [13:0] add_ln35_1_fu_336_p2;
wire   [4:0] zext_ln23_fu_358_p1;
wire   [4:0] j_fu_362_p2;
wire   [9:0] zext_ln28_1_fu_367_p1;
wire   [9:0] add_ln28_fu_371_p2;
wire   [14:0] tmp_9_fu_376_p3;
wire   [15:0] zext_ln28_2_fu_384_p1;
wire   [15:0] add_ln28_1_fu_388_p2;
wire   [31:0] bitcast_ln28_fu_398_p1;
wire   [31:0] bitcast_ln28_1_fu_416_p1;
wire   [7:0] tmp_fu_402_p4;
wire   [22:0] trunc_ln28_fu_412_p1;
wire   [0:0] icmp_ln28_1_fu_440_p2;
wire   [0:0] icmp_ln28_fu_434_p2;
wire   [7:0] tmp_6_fu_420_p4;
wire   [22:0] trunc_ln28_1_fu_430_p1;
wire   [0:0] icmp_ln28_3_fu_458_p2;
wire   [0:0] icmp_ln28_2_fu_452_p2;
wire   [0:0] or_ln28_fu_446_p2;
wire   [0:0] or_ln28_1_fu_464_p2;
wire   [0:0] and_ln28_fu_470_p2;
wire   [0:0] tmp_7_fu_211_p2;
wire   [0:0] and_ln28_1_fu_476_p2;
wire    ap_block_pp0_stage0_00001;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] mul_ln28_fu_308_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(max_1_reg_199),
    .opcode(5'd2),
    .dout(tmp_7_fu_211_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln23_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln20_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln20_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_reg_152 <= c_reg_529;
    end else if (((icmp_ln13_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_152 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_118 <= f_reg_493;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_118 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_0_reg_164 <= max_1_reg_199;
    end else if (((icmp_ln16_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_164 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_553 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_1_reg_199 <= max_2_fu_482_p3;
    end else if (((icmp_ln20_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_1_reg_199 <= max_0_reg_164;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_346_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mpc_0_reg_188 <= mpc_fu_352_p2;
    end else if (((icmp_ln20_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mpc_0_reg_188 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mpr_0_reg_177 <= mpr_reg_543;
    end else if (((icmp_ln16_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_177 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_140 <= add_ln13_reg_508;
    end else if (((icmp_ln10_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_140 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_129 <= r_reg_516;
    end else if (((icmp_ln10_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_129 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_508 <= add_ln13_fu_237_p2;
        r_reg_516 <= r_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_529 <= c_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_493 <= f_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln23_reg_553 <= icmp_ln23_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_543 <= mpr_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln28_reg_548[9 : 1] <= mul_ln28_fu_308_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln1_reg_534[4 : 1] <= shl_ln1_fu_275_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_521[4 : 1] <= shl_ln_fu_255_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_503[5 : 0] <= zext_ln13_1_fu_233_p1[5 : 0];
        zext_ln13_reg_498[5 : 0] <= zext_ln13_fu_229_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln20_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_237_p2 = (phi_mul_reg_140 + 8'd13);

assign add_ln28_1_fu_388_p2 = (zext_ln13_reg_498 + zext_ln28_2_fu_384_p1);

assign add_ln28_fu_371_p2 = (zext_ln28_1_fu_367_p1 + mul_ln28_reg_548);

assign add_ln35_1_fu_336_p2 = (zext_ln35_1_fu_332_p1 + zext_ln13_1_reg_503);

assign add_ln35_fu_318_p2 = (phi_mul_reg_140 + zext_ln35_fu_314_p1);

assign and_ln28_1_fu_476_p2 = (tmp_7_fu_211_p2 & and_ln28_fu_470_p2);

assign and_ln28_fu_470_p2 = (or_ln28_fu_446_p2 & or_ln28_1_fu_464_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_416_p1 = max_1_reg_199;

assign bitcast_ln28_fu_398_p1 = conv_1_out_q0;

assign c_fu_269_p2 = (c_0_reg_152 + 4'd1);

assign conv_1_out_address0 = zext_ln28_3_fu_393_p1;

assign f_fu_223_p2 = (f_0_reg_118 + 6'd1);

assign i_fu_299_p2 = (zext_ln20_fu_283_p1 + shl_ln_reg_521);

assign icmp_ln10_fu_217_p2 = ((f_0_reg_118 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_243_p2 = ((r_0_reg_129 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_263_p2 = ((c_0_reg_152 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_287_p2 = ((mpr_0_reg_177 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_346_p2 = ((mpc_0_reg_188 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_440_p2 = ((trunc_ln28_fu_412_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_452_p2 = ((tmp_6_fu_420_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_458_p2 = ((trunc_ln28_1_fu_430_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_434_p2 = ((tmp_fu_402_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_fu_362_p2 = (shl_ln1_reg_534 + zext_ln23_fu_358_p1);

assign max_2_fu_482_p3 = ((and_ln28_1_fu_476_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_reg_199);

assign max_pool_1_out_address0 = zext_ln35_2_fu_341_p1;

assign max_pool_1_out_d0 = max_0_reg_164;

assign mpc_fu_352_p2 = (mpc_0_reg_188 + 2'd1);

assign mpr_fu_293_p2 = (mpr_0_reg_177 + 2'd1);

assign mul_ln28_fu_308_p0 = mul_ln28_fu_308_p00;

assign mul_ln28_fu_308_p00 = i_fu_299_p2;

assign mul_ln28_fu_308_p2 = (mul_ln28_fu_308_p0 * $signed('h1A));

assign or_ln28_1_fu_464_p2 = (icmp_ln28_3_fu_458_p2 | icmp_ln28_2_fu_452_p2);

assign or_ln28_fu_446_p2 = (icmp_ln28_fu_434_p2 | icmp_ln28_1_fu_440_p2);

assign r_fu_249_p2 = (r_0_reg_129 + 4'd1);

assign shl_ln1_fu_275_p3 = {{c_0_reg_152}, {1'd0}};

assign shl_ln_fu_255_p3 = {{r_0_reg_129}, {1'd0}};

assign tmp_6_fu_420_p4 = {{bitcast_ln28_1_fu_416_p1[30:23]}};

assign tmp_8_fu_324_p3 = {{add_ln35_fu_318_p2}, {5'd0}};

assign tmp_9_fu_376_p3 = {{add_ln28_fu_371_p2}, {5'd0}};

assign tmp_fu_402_p4 = {{bitcast_ln28_fu_398_p1[30:23]}};

assign trunc_ln28_1_fu_430_p1 = bitcast_ln28_1_fu_416_p1[22:0];

assign trunc_ln28_fu_412_p1 = bitcast_ln28_fu_398_p1[22:0];

assign zext_ln13_1_fu_233_p1 = f_0_reg_118;

assign zext_ln13_fu_229_p1 = f_0_reg_118;

assign zext_ln20_fu_283_p1 = mpr_0_reg_177;

assign zext_ln23_fu_358_p1 = mpc_0_reg_188;

assign zext_ln28_1_fu_367_p1 = j_fu_362_p2;

assign zext_ln28_2_fu_384_p1 = tmp_9_fu_376_p3;

assign zext_ln28_3_fu_393_p1 = add_ln28_1_fu_388_p2;

assign zext_ln35_1_fu_332_p1 = tmp_8_fu_324_p3;

assign zext_ln35_2_fu_341_p1 = add_ln35_1_fu_336_p2;

assign zext_ln35_fu_314_p1 = c_0_reg_152;

always @ (posedge ap_clk) begin
    zext_ln13_reg_498[15:6] <= 10'b0000000000;
    zext_ln13_1_reg_503[13:6] <= 8'b00000000;
    shl_ln_reg_521[0] <= 1'b0;
    shl_ln1_reg_534[0] <= 1'b0;
    mul_ln28_reg_548[0] <= 1'b0;
end

endmodule //max_pool_1
