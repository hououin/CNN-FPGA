-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_1_out_ce1 : OUT STD_LOGIC;
    conv_1_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=23.438000,HLS_SYN_LAT=10818,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=232,HLS_SYN_LUT=1259,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_2A40 : STD_LOGIC_VECTOR (13 downto 0) := "10101001000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_152 : STD_LOGIC_VECTOR (8 downto 0) := "101010010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten59_reg_136 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_0_reg_147 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten22_reg_158 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_0_reg_169 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_180 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_0_reg_191 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_0_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_214 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln10_fu_255_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_3_fu_281_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln28_3_reg_853 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln13_2_fu_375_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_2_reg_859 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln16_1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_1_reg_865 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_4_fu_481_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_4_reg_870 : STD_LOGIC_VECTOR (3 downto 0);
    signal mpr_fu_567_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_886 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_5_fu_579_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln13_5_fu_593_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln28_1_fu_798_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_f_0_phi_fu_151_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_173_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_195_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_218_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_2_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_4_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln20_1_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_fu_613_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_705_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_235_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln13_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_261_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_293_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln20_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_2_fu_273_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln28_5_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_339_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln25_mid1_fu_359_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_4_fu_301_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln26_fu_243_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln13_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_1_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_351_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln13_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_417_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln26_mid1_fu_443_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_3_fu_383_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_2_fu_451_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln26_1_fu_463_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_4_fu_391_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_3_fu_469_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_1_fu_435_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln13_1_fu_367_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln20_fu_489_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_493_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_fu_503_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln16_fu_459_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln28_fu_503_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_fu_509_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_515_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln25_1_fu_289_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_1_fu_523_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_1_fu_527_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_1_fu_477_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_2_fu_538_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_544_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_3_fu_552_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_3_fu_556_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln16_fu_573_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_1_fu_587_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln35_fu_607_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln28_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_625_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_635_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_643_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_653_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_2_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_3_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_718_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_728_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_736_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_746_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln35_fu_607_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_1_fu_812_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_fu_815_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_821_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_2_fu_829_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln25_fu_601_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_1_fu_833_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln28_fu_503_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln35_fu_607_p10 : STD_LOGIC_VECTOR (7 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => select_ln16_fu_613_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_6_fu_225_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q1,
        din1 => select_ln28_fu_705_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_9_fu_230_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_844 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_0_reg_191 <= select_ln16_4_reg_870;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_191 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_844 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                f_0_reg_147 <= select_ln28_3_reg_853;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_147 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten22_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten22_reg_158 <= select_ln13_5_fu_593_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten22_reg_158 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten59_reg_136 <= add_ln10_fu_255_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten59_reg_136 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_180 <= select_ln16_5_fu_579_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_180 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    max_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_844 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                max_0_reg_202 <= select_ln28_1_fu_798_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_0_reg_202 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpr_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_844 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mpr_0_reg_214 <= mpr_reg_886;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpr_0_reg_214 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_844 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                r_0_reg_169 <= select_ln13_2_reg_859;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_169 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_844 <= icmp_ln10_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_249_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mpr_reg_886 <= mpr_fu_567_p2;
                select_ln13_2_reg_859 <= select_ln13_2_fu_375_p3;
                select_ln16_4_reg_870 <= select_ln16_4_fu_481_p3;
                select_ln28_3_reg_853 <= select_ln28_3_fu_281_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln16_1_reg_865 <= or_ln16_1_fu_429_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_249_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln10_fu_249_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln10_fu_249_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_255_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_136) + unsigned(ap_const_lv14_1));
    add_ln13_1_fu_587_p2 <= std_logic_vector(unsigned(indvar_flatten22_reg_158) + unsigned(ap_const_lv9_1));
    add_ln16_fu_573_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_180) + unsigned(ap_const_lv6_1));
    add_ln28_1_fu_527_p2 <= std_logic_vector(unsigned(zext_ln25_1_fu_289_p1) + unsigned(zext_ln28_1_fu_523_p1));
    add_ln28_2_fu_538_p2 <= std_logic_vector(unsigned(zext_ln16_1_fu_477_p1) + unsigned(mul_ln28_fu_503_p2));
    add_ln28_3_fu_556_p2 <= std_logic_vector(unsigned(zext_ln25_1_fu_289_p1) + unsigned(zext_ln28_3_fu_552_p1));
    add_ln28_fu_509_p2 <= std_logic_vector(unsigned(zext_ln16_fu_459_p1) + unsigned(mul_ln28_fu_503_p2));
    add_ln35_1_fu_833_p2 <= std_logic_vector(unsigned(zext_ln35_2_fu_829_p1) + unsigned(zext_ln25_fu_601_p1));
    add_ln35_fu_815_p2 <= std_logic_vector(unsigned(mul_ln35_fu_607_p2) + unsigned(zext_ln35_1_fu_812_p1));
    and_ln13_fu_411_p2 <= (or_ln13_1_fu_405_p2 and and_ln28_4_fu_321_p2);
    and_ln28_1_fu_699_p2 <= (tmp_6_fu_225_p2 and and_ln28_fu_693_p2);
    and_ln28_2_fu_786_p2 <= (or_ln28_3_fu_780_p2 and or_ln28_2_fu_762_p2);
    and_ln28_3_fu_792_p2 <= (tmp_9_fu_230_p2 and and_ln28_2_fu_786_p2);
    and_ln28_4_fu_321_p2 <= (xor_ln28_fu_309_p2 and icmp_ln20_fu_315_p2);
    and_ln28_5_fu_333_p2 <= (xor_ln28_fu_309_p2 and icmp_ln16_fu_327_p2);
    and_ln28_fu_693_p2 <= (or_ln28_fu_669_p2 and or_ln28_1_fu_687_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_249_p2)
    begin
        if ((icmp_ln10_fu_249_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_195_p4_assign_proc : process(c_0_reg_191, icmp_ln10_reg_844, ap_CS_fsm_pp0_stage0, select_ln16_4_reg_870, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_844 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_195_p4 <= select_ln16_4_reg_870;
        else 
            ap_phi_mux_c_0_phi_fu_195_p4 <= c_0_reg_191;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_151_p4_assign_proc : process(f_0_reg_147, icmp_ln10_reg_844, ap_CS_fsm_pp0_stage0, select_ln28_3_reg_853, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_844 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_151_p4 <= select_ln28_3_reg_853;
        else 
            ap_phi_mux_f_0_phi_fu_151_p4 <= f_0_reg_147;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_218_p4_assign_proc : process(mpr_0_reg_214, icmp_ln10_reg_844, ap_CS_fsm_pp0_stage0, mpr_reg_886, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_844 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_218_p4 <= mpr_reg_886;
        else 
            ap_phi_mux_mpr_0_phi_fu_218_p4 <= mpr_0_reg_214;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_173_p4_assign_proc : process(r_0_reg_169, icmp_ln10_reg_844, ap_CS_fsm_pp0_stage0, select_ln13_2_reg_859, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_844 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_173_p4 <= select_ln13_2_reg_859;
        else 
            ap_phi_mux_r_0_phi_fu_173_p4 <= r_0_reg_169;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_639_p1 <= select_ln16_fu_613_p3;
    bitcast_ln28_2_fu_714_p1 <= conv_1_out_q1;
    bitcast_ln28_3_fu_732_p1 <= select_ln28_fu_705_p3;
    bitcast_ln28_fu_621_p1 <= conv_1_out_q0;
    c_fu_417_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln13_fu_351_p3));
    conv_1_out_address0 <= zext_ln28_2_fu_533_p1(15 - 1 downto 0);
    conv_1_out_address1 <= zext_ln28_4_fu_562_p1(15 - 1 downto 0);

    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_out_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_261_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_f_0_phi_fu_151_p4));
    i_fu_493_p2 <= std_logic_vector(unsigned(select_ln13_1_fu_367_p3) + unsigned(zext_ln20_fu_489_p1));
    icmp_ln10_fu_249_p2 <= "1" when (indvar_flatten59_reg_136 = ap_const_lv14_2A40) else "0";
    icmp_ln13_fu_267_p2 <= "1" when (indvar_flatten22_reg_158 = ap_const_lv9_152) else "0";
    icmp_ln16_fu_327_p2 <= "1" when (indvar_flatten_reg_180 = ap_const_lv6_1A) else "0";
    icmp_ln20_1_fu_807_p2 <= "1" when (mpr_reg_886 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_315_p2 <= "1" when (ap_phi_mux_mpr_0_phi_fu_218_p4 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_663_p2 <= "1" when (trunc_ln28_fu_635_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_675_p2 <= "0" when (tmp_5_fu_643_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_681_p2 <= "1" when (trunc_ln28_1_fu_653_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_750_p2 <= "0" when (tmp_7_fu_718_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_756_p2 <= "1" when (trunc_ln28_2_fu_728_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_768_p2 <= "0" when (tmp_8_fu_736_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_774_p2 <= "1" when (trunc_ln28_3_fu_746_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_657_p2 <= "0" when (tmp_1_fu_625_p4 = ap_const_lv8_FF) else "1";
    max_pool_1_out_address0 <= zext_ln35_3_fu_839_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= 
        conv_1_out_q1 when (and_ln28_3_fu_792_p2(0) = '1') else 
        select_ln28_fu_705_p3;

    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, icmp_ln20_1_fu_807_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_1_fu_807_p2 = ap_const_lv1_1))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_567_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln16_1_fu_435_p3));
    mul_ln28_fu_503_p1 <= mul_ln28_fu_503_p10(5 - 1 downto 0);
    mul_ln28_fu_503_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_493_p2),10));
    mul_ln28_fu_503_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln28_fu_503_p1), 10));
    mul_ln35_fu_607_p1 <= mul_ln35_fu_607_p10(4 - 1 downto 0);
    mul_ln35_fu_607_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_reg_859),8));
    mul_ln35_fu_607_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_D) * unsigned(mul_ln35_fu_607_p1), 8));
    or_ln13_1_fu_405_p2 <= (xor_ln13_fu_399_p2 or icmp_ln13_fu_267_p2);
    or_ln13_fu_345_p2 <= (icmp_ln13_fu_267_p2 or and_ln28_5_fu_333_p2);
    or_ln16_1_fu_429_p2 <= (or_ln16_fu_423_p2 or icmp_ln13_fu_267_p2);
    or_ln16_fu_423_p2 <= (and_ln28_5_fu_333_p2 or and_ln13_fu_411_p2);
    or_ln26_1_fu_463_p2 <= (shl_ln26_mid1_fu_443_p3 or ap_const_lv5_1);
    or_ln26_fu_243_p2 <= (shl_ln1_fu_235_p3 or ap_const_lv5_1);
    or_ln28_1_fu_687_p2 <= (icmp_ln28_3_fu_681_p2 or icmp_ln28_2_fu_675_p2);
    or_ln28_2_fu_762_p2 <= (icmp_ln28_5_fu_756_p2 or icmp_ln28_4_fu_750_p2);
    or_ln28_3_fu_780_p2 <= (icmp_ln28_7_fu_774_p2 or icmp_ln28_6_fu_768_p2);
    or_ln28_fu_669_p2 <= (icmp_ln28_fu_657_p2 or icmp_ln28_1_fu_663_p2);
    r_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln28_2_fu_273_p3));
    select_ln13_1_fu_367_p3 <= 
        shl_ln25_mid1_fu_359_p3 when (and_ln28_5_fu_333_p2(0) = '1') else 
        select_ln28_4_fu_301_p3;
    select_ln13_2_fu_375_p3 <= 
        r_fu_339_p2 when (and_ln28_5_fu_333_p2(0) = '1') else 
        select_ln28_2_fu_273_p3;
    select_ln13_3_fu_383_p3 <= 
        ap_const_lv5_0 when (or_ln13_fu_345_p2(0) = '1') else 
        shl_ln1_fu_235_p3;
    select_ln13_4_fu_391_p3 <= 
        ap_const_lv5_1 when (or_ln13_fu_345_p2(0) = '1') else 
        or_ln26_fu_243_p2;
    select_ln13_5_fu_593_p3 <= 
        ap_const_lv9_1 when (icmp_ln13_fu_267_p2(0) = '1') else 
        add_ln13_1_fu_587_p2;
    select_ln13_fu_351_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_345_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_195_p4;
    select_ln16_1_fu_435_p3 <= 
        ap_const_lv2_0 when (or_ln16_1_fu_429_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_218_p4;
    select_ln16_2_fu_451_p3 <= 
        shl_ln26_mid1_fu_443_p3 when (and_ln13_fu_411_p2(0) = '1') else 
        select_ln13_3_fu_383_p3;
    select_ln16_3_fu_469_p3 <= 
        or_ln26_1_fu_463_p2 when (and_ln13_fu_411_p2(0) = '1') else 
        select_ln13_4_fu_391_p3;
    select_ln16_4_fu_481_p3 <= 
        c_fu_417_p2 when (and_ln13_fu_411_p2(0) = '1') else 
        select_ln13_fu_351_p3;
    select_ln16_5_fu_579_p3 <= 
        ap_const_lv6_1 when (or_ln13_fu_345_p2(0) = '1') else 
        add_ln16_fu_573_p2;
    select_ln16_fu_613_p3 <= 
        ap_const_lv32_800000 when (or_ln16_1_reg_865(0) = '1') else 
        max_0_reg_202;
    select_ln28_1_fu_798_p3 <= 
        conv_1_out_q1 when (and_ln28_3_fu_792_p2(0) = '1') else 
        select_ln28_fu_705_p3;
    select_ln28_2_fu_273_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_267_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_173_p4;
    select_ln28_3_fu_281_p3 <= 
        f_fu_261_p2 when (icmp_ln13_fu_267_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_151_p4;
    select_ln28_4_fu_301_p3 <= 
        ap_const_lv5_0 when (icmp_ln13_fu_267_p2(0) = '1') else 
        shl_ln_fu_293_p3;
    select_ln28_fu_705_p3 <= 
        conv_1_out_q0 when (and_ln28_1_fu_699_p2(0) = '1') else 
        select_ln16_fu_613_p3;
    shl_ln1_fu_235_p3 <= (ap_phi_mux_c_0_phi_fu_195_p4 & ap_const_lv1_0);
    shl_ln25_mid1_fu_359_p3 <= (r_fu_339_p2 & ap_const_lv1_0);
    shl_ln26_mid1_fu_443_p3 <= (c_fu_417_p2 & ap_const_lv1_0);
    shl_ln_fu_293_p3 <= (ap_phi_mux_r_0_phi_fu_173_p4 & ap_const_lv1_0);
    tmp_1_fu_625_p4 <= bitcast_ln28_fu_621_p1(30 downto 23);
    tmp_2_fu_544_p3 <= (add_ln28_2_fu_538_p2 & ap_const_lv5_0);
    tmp_3_fu_821_p3 <= (add_ln35_fu_815_p2 & ap_const_lv5_0);
    tmp_5_fu_643_p4 <= bitcast_ln28_1_fu_639_p1(30 downto 23);
    tmp_7_fu_718_p4 <= bitcast_ln28_2_fu_714_p1(30 downto 23);
    tmp_8_fu_736_p4 <= bitcast_ln28_3_fu_732_p1(30 downto 23);
    tmp_fu_515_p3 <= (add_ln28_fu_509_p2 & ap_const_lv5_0);
    trunc_ln28_1_fu_653_p1 <= bitcast_ln28_1_fu_639_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_728_p1 <= bitcast_ln28_2_fu_714_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_746_p1 <= bitcast_ln28_3_fu_732_p1(23 - 1 downto 0);
    trunc_ln28_fu_635_p1 <= bitcast_ln28_fu_621_p1(23 - 1 downto 0);
    xor_ln13_fu_399_p2 <= (icmp_ln16_fu_327_p2 xor ap_const_lv1_1);
    xor_ln28_fu_309_p2 <= (icmp_ln13_fu_267_p2 xor ap_const_lv1_1);
    zext_ln16_1_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_3_fu_469_p3),10));
    zext_ln16_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_2_fu_451_p3),10));
    zext_ln20_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_1_fu_435_p3),5));
    zext_ln25_1_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_3_fu_281_p3),16));
    zext_ln25_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_3_reg_853),14));
    zext_ln28_1_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_515_p3),16));
    zext_ln28_2_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_527_p2),64));
    zext_ln28_3_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_544_p3),16));
    zext_ln28_4_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_fu_556_p2),64));
    zext_ln35_1_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_4_reg_870),8));
    zext_ln35_2_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_821_p3),14));
    zext_ln35_3_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_833_p2),64));
end behav;
