-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_1_out_ce1 : OUT STD_LOGIC;
    conv_1_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=23.438000,HLS_SYN_LAT=12129,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=273,HLS_SYN_LUT=1268,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_0_reg_179 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_fu_207_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_811 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_213_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_reg_816 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln10_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_217_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_1_reg_821 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln13_fu_221_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_827 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln13_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_233_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_836 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln28_fu_251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln28_reg_841 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln28_1_fu_267_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln28_1_reg_847 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln16_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal c_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_857 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln28_1_fu_348_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln28_1_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_872 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln28_4_fu_399_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_4_reg_882 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln35_fu_408_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_reg_887 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln28_1_fu_595_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal f_0_reg_144 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_0_reg_156 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal phi_mul_reg_167 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_c_0_phi_fu_183_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln28_3_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_7_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_4_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln28_9_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_481_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_fu_686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_239_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_fu_251_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln25_fu_257_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_1_fu_267_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_fu_285_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_2_fu_293_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln28_fu_302_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_306_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_320_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln28_7_fu_314_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_330_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln28_1_fu_343_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln26_fu_362_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_5_fu_368_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_2_fu_372_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_377_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_6_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_3_fu_389_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_fu_404_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_414_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln28_8_fu_421_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_427_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal bitcast_ln28_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_443_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_453_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_490_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_8_fu_497_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_5_fu_501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln28_1_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_2_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_515_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_525_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_533_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_4_fu_543_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_3_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_4_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_607_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_5_fu_617_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_624_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_6_fu_634_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_9_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_8_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_4_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_5_fu_694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_6_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_698_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_7_fu_708_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_11_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_10_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_716_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_8_fu_726_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_13_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_12_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_5_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_6_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_5_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_6_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_787_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_1_fu_794_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_1_fu_798_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln28_1_fu_267_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln28_fu_251_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => grp_fu_190_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_190_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q1,
        din1 => grp_fu_196_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_196_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln13_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln13_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_reg_853 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_179 <= c_reg_857;
            elsif (((icmp_ln13_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_179 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_144 <= f_reg_811;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_144 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_mul_reg_167 <= add_ln13_reg_827;
            elsif (((icmp_ln10_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_167 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                r_0_reg_156 <= r_reg_836;
            elsif (((icmp_ln10_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_156 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_reg_827 <= add_ln13_fu_221_p2;
                r_reg_836 <= r_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln28_4_reg_882(9 downto 1) <= add_ln28_4_fu_399_p2(9 downto 1);
                add_ln35_reg_887 <= add_ln35_fu_408_p2;
                tmp_17_reg_872 <= add_ln28_1_fu_343_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                c_reg_857 <= c_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_811 <= f_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln16_reg_853 <= icmp_ln16_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    mul_ln28_1_reg_847(9 downto 1) <= mul_ln28_1_fu_267_p2(9 downto 1);
                    mul_ln28_reg_841(9 downto 1) <= mul_ln28_fu_251_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_853 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln28_1_reg_902 <= select_ln28_1_fu_595_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_1_reg_821(5 downto 0) <= zext_ln13_1_fu_217_p1(5 downto 0);
                    zext_ln13_reg_816(5 downto 0) <= zext_ln13_fu_213_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_816(13 downto 6) <= "00000000";
    zext_ln13_1_reg_821(15 downto 6) <= "0000000000";
    mul_ln28_reg_841(0) <= '0';
    mul_ln28_1_reg_847(0) <= '0';
    trunc_ln28_1_reg_867(0) <= '0';
    add_ln28_4_reg_882(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_201_p2, ap_CS_fsm_state3, icmp_ln13_fu_227_p2, icmp_ln16_fu_273_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln16_fu_273_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln16_fu_273_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln13_fu_221_p2 <= std_logic_vector(unsigned(phi_mul_reg_167) + unsigned(ap_const_lv8_D));
    add_ln28_1_fu_343_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_293_p1) + unsigned(mul_ln28_1_reg_847));
    add_ln28_2_fu_372_p2 <= std_logic_vector(unsigned(zext_ln28_5_fu_368_p1) + unsigned(mul_ln28_reg_841));
    add_ln28_3_fu_389_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_821) + unsigned(zext_ln28_6_fu_385_p1));
    add_ln28_4_fu_399_p2 <= std_logic_vector(unsigned(zext_ln28_5_fu_368_p1) + unsigned(mul_ln28_1_reg_847));
    add_ln28_5_fu_501_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_821) + unsigned(zext_ln28_8_fu_497_p1));
    add_ln28_fu_297_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_293_p1) + unsigned(mul_ln28_reg_841));
    add_ln35_1_fu_798_p2 <= std_logic_vector(unsigned(zext_ln13_reg_816) + unsigned(zext_ln35_1_fu_794_p1));
    add_ln35_fu_408_p2 <= std_logic_vector(unsigned(zext_ln35_fu_404_p1) + unsigned(phi_mul_reg_167));
    and_ln28_1_fu_583_p2 <= (or_ln28_2_fu_577_p2 and or_ln28_1_fu_559_p2);
    and_ln28_2_fu_589_p2 <= (grp_fu_196_p2 and and_ln28_1_fu_583_p2);
    and_ln28_3_fu_674_p2 <= (or_ln28_4_fu_668_p2 and or_ln28_3_fu_650_p2);
    and_ln28_4_fu_680_p2 <= (grp_fu_190_p2 and and_ln28_3_fu_674_p2);
    and_ln28_5_fu_766_p2 <= (or_ln28_6_fu_760_p2 and or_ln28_5_fu_742_p2);
    and_ln28_6_fu_772_p2 <= (grp_fu_196_p2 and and_ln28_5_fu_766_p2);
    and_ln28_fu_475_p2 <= (or_ln28_fu_469_p2 and grp_fu_190_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln16_fu_273_p2)
    begin
        if ((icmp_ln16_fu_273_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_201_p2)
    begin
        if (((icmp_ln10_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_183_p4_assign_proc : process(c_0_reg_179, icmp_ln16_reg_853, ap_CS_fsm_pp0_stage0, c_reg_857, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln16_reg_853 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_183_p4 <= c_reg_857;
        else 
            ap_phi_mux_c_0_phi_fu_183_p4 <= c_0_reg_179;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_201_p2)
    begin
        if (((icmp_ln10_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_511_p1 <= conv_1_out_q1;
    bitcast_ln28_2_fu_529_p1 <= select_ln28_fu_481_p3;
    bitcast_ln28_3_fu_603_p1 <= conv_1_out_q0;
    bitcast_ln28_4_fu_621_p1 <= select_ln28_1_reg_902;
    bitcast_ln28_5_fu_694_p1 <= conv_1_out_q1;
    bitcast_ln28_6_fu_712_p1 <= select_ln28_2_fu_686_p3;
    bitcast_ln28_fu_439_p1 <= conv_1_out_q0;
    c_fu_279_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_183_p4) + unsigned(ap_const_lv4_1));

    conv_1_out_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln28_3_fu_338_p1, zext_ln28_4_fu_434_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_1_out_address0 <= zext_ln28_4_fu_434_p1(15 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_1_out_address0 <= zext_ln28_3_fu_338_p1(15 - 1 downto 0);
            else 
                conv_1_out_address0 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            conv_1_out_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln28_7_fu_394_p1, ap_block_pp0_stage1, zext_ln28_9_fu_506_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_1_out_address1 <= zext_ln28_9_fu_506_p1(15 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_1_out_address1 <= zext_ln28_7_fu_394_p1(15 - 1 downto 0);
            else 
                conv_1_out_address1 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            conv_1_out_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_1_out_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_207_p2 <= std_logic_vector(unsigned(f_0_reg_144) + unsigned(ap_const_lv6_1));

    grp_fu_190_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, select_ln28_1_reg_902, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_190_p1 <= select_ln28_1_reg_902;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_190_p1 <= ap_const_lv32_800000;
        else 
            grp_fu_190_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_196_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, select_ln28_fu_481_p3, select_ln28_2_fu_686_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_196_p1 <= select_ln28_2_fu_686_p3;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_196_p1 <= select_ln28_fu_481_p3;
        else 
            grp_fu_196_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_201_p2 <= "1" when (f_0_reg_144 = ap_const_lv6_20) else "0";
    icmp_ln13_fu_227_p2 <= "1" when (r_0_reg_156 = ap_const_lv4_D) else "0";
    icmp_ln16_fu_273_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_183_p4 = ap_const_lv4_D) else "0";
    icmp_ln28_10_fu_730_p2 <= "0" when (tmp_10_fu_698_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_11_fu_736_p2 <= "1" when (trunc_ln28_7_fu_708_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_12_fu_748_p2 <= "0" when (tmp_11_fu_716_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_13_fu_754_p2 <= "1" when (trunc_ln28_8_fu_726_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_1_fu_463_p2 <= "1" when (trunc_ln28_2_fu_453_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_547_p2 <= "0" when (tmp_5_fu_515_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_553_p2 <= "1" when (trunc_ln28_3_fu_525_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_565_p2 <= "0" when (tmp_6_fu_533_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_571_p2 <= "1" when (trunc_ln28_4_fu_543_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_638_p2 <= "0" when (tmp_8_fu_607_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_644_p2 <= "1" when (trunc_ln28_5_fu_617_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_8_fu_656_p2 <= "0" when (tmp_9_fu_624_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_9_fu_662_p2 <= "1" when (trunc_ln28_6_fu_634_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_457_p2 <= "0" when (tmp_3_fu_443_p4 = ap_const_lv8_FF) else "1";
    max_pool_1_out_address0 <= zext_ln35_2_fu_803_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= 
        conv_1_out_q1 when (and_ln28_6_fu_772_p2(0) = '1') else 
        select_ln28_2_fu_686_p3;

    max_pool_1_out_we0_assign_proc : process(icmp_ln16_reg_853, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln16_reg_853 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln28_1_fu_267_p0 <= mul_ln28_1_fu_267_p00(5 - 1 downto 0);
    mul_ln28_1_fu_267_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_fu_257_p2),10));
    mul_ln28_1_fu_267_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln28_1_fu_267_p0) * unsigned(ap_const_lv10_1A), 10));
    mul_ln28_fu_251_p0 <= mul_ln28_fu_251_p00(5 - 1 downto 0);
    mul_ln28_fu_251_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_239_p3),10));
    mul_ln28_fu_251_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln28_fu_251_p0) * unsigned(ap_const_lv10_1A), 10));
    or_ln25_fu_257_p2 <= (shl_ln_fu_239_p3 or ap_const_lv5_1);
    or_ln26_fu_362_p2 <= (shl_ln1_fu_285_p3 or ap_const_lv5_1);
    or_ln28_1_fu_559_p2 <= (icmp_ln28_3_fu_553_p2 or icmp_ln28_2_fu_547_p2);
    or_ln28_2_fu_577_p2 <= (icmp_ln28_5_fu_571_p2 or icmp_ln28_4_fu_565_p2);
    or_ln28_3_fu_650_p2 <= (icmp_ln28_7_fu_644_p2 or icmp_ln28_6_fu_638_p2);
    or_ln28_4_fu_668_p2 <= (icmp_ln28_9_fu_662_p2 or icmp_ln28_8_fu_656_p2);
    or_ln28_5_fu_742_p2 <= (icmp_ln28_11_fu_736_p2 or icmp_ln28_10_fu_730_p2);
    or_ln28_6_fu_760_p2 <= (icmp_ln28_13_fu_754_p2 or icmp_ln28_12_fu_748_p2);
    or_ln28_7_fu_314_p2 <= (tmp_13_fu_306_p3 or f_0_reg_144);
    or_ln28_8_fu_421_p2 <= (tmp_16_fu_414_p3 or f_0_reg_144);
    or_ln28_fu_469_p2 <= (icmp_ln28_fu_457_p2 or icmp_ln28_1_fu_463_p2);
    r_fu_233_p2 <= std_logic_vector(unsigned(r_0_reg_156) + unsigned(ap_const_lv4_1));
    select_ln28_1_fu_595_p3 <= 
        conv_1_out_q1 when (and_ln28_2_fu_589_p2(0) = '1') else 
        select_ln28_fu_481_p3;
    select_ln28_2_fu_686_p3 <= 
        conv_1_out_q0 when (and_ln28_4_fu_680_p2(0) = '1') else 
        select_ln28_1_reg_902;
    select_ln28_fu_481_p3 <= 
        conv_1_out_q0 when (and_ln28_fu_475_p2(0) = '1') else 
        ap_const_lv32_800000;
    shl_ln1_fu_285_p3 <= (ap_phi_mux_c_0_phi_fu_183_p4 & ap_const_lv1_0);
    shl_ln_fu_239_p3 <= (r_0_reg_156 & ap_const_lv1_0);
    tmp_10_fu_698_p4 <= bitcast_ln28_5_fu_694_p1(30 downto 23);
    tmp_11_fu_716_p4 <= bitcast_ln28_6_fu_712_p1(30 downto 23);
    tmp_13_fu_306_p3 <= (trunc_ln28_fu_302_p1 & ap_const_lv5_0);
    tmp_14_fu_320_p4 <= add_ln28_fu_297_p2(9 downto 1);
    tmp_15_fu_330_p3 <= (tmp_14_fu_320_p4 & or_ln28_7_fu_314_p2);
    tmp_16_fu_414_p3 <= (trunc_ln28_1_reg_867 & ap_const_lv5_0);
    tmp_18_fu_427_p3 <= (tmp_17_reg_872 & or_ln28_8_fu_421_p2);
    tmp_19_fu_377_p3 <= (add_ln28_2_fu_372_p2 & ap_const_lv5_0);
    tmp_20_fu_490_p3 <= (add_ln28_4_reg_882 & ap_const_lv5_0);
    tmp_21_fu_787_p3 <= (add_ln35_reg_887 & ap_const_lv5_0);
    tmp_3_fu_443_p4 <= bitcast_ln28_fu_439_p1(30 downto 23);
    tmp_5_fu_515_p4 <= bitcast_ln28_1_fu_511_p1(30 downto 23);
    tmp_6_fu_533_p4 <= bitcast_ln28_2_fu_529_p1(30 downto 23);
    tmp_8_fu_607_p4 <= bitcast_ln28_3_fu_603_p1(30 downto 23);
    tmp_9_fu_624_p4 <= bitcast_ln28_4_fu_621_p1(30 downto 23);
    trunc_ln28_1_fu_348_p1 <= add_ln28_1_fu_343_p2(1 - 1 downto 0);
    trunc_ln28_2_fu_453_p1 <= bitcast_ln28_fu_439_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_525_p1 <= bitcast_ln28_1_fu_511_p1(23 - 1 downto 0);
    trunc_ln28_4_fu_543_p1 <= bitcast_ln28_2_fu_529_p1(23 - 1 downto 0);
    trunc_ln28_5_fu_617_p1 <= bitcast_ln28_3_fu_603_p1(23 - 1 downto 0);
    trunc_ln28_6_fu_634_p1 <= bitcast_ln28_4_fu_621_p1(23 - 1 downto 0);
    trunc_ln28_7_fu_708_p1 <= bitcast_ln28_5_fu_694_p1(23 - 1 downto 0);
    trunc_ln28_8_fu_726_p1 <= bitcast_ln28_6_fu_712_p1(23 - 1 downto 0);
    trunc_ln28_fu_302_p1 <= add_ln28_fu_297_p2(1 - 1 downto 0);
    zext_ln13_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_144),16));
    zext_ln13_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_144),14));
    zext_ln28_2_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_285_p3),10));
    zext_ln28_3_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_330_p3),64));
    zext_ln28_4_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_427_p3),64));
    zext_ln28_5_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_362_p2),10));
    zext_ln28_6_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_377_p3),16));
    zext_ln28_7_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_fu_389_p2),64));
    zext_ln28_8_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_490_p3),16));
    zext_ln28_9_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_5_fu_501_p2),64));
    zext_ln35_1_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_787_p3),14));
    zext_ln35_2_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_798_p2),64));
    zext_ln35_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_c_0_phi_fu_183_p4),8));
end behav;
