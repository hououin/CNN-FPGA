// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=23.438000,HLS_SYN_LAT=12129,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=273,HLS_SYN_LUT=1268,HLS_VERSION=2019_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        conv_1_out_address1,
        conv_1_out_ce1,
        conv_1_out_q1,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_pp0_stage0 = 6'd8;
parameter    ap_ST_fsm_pp0_stage1 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [14:0] conv_1_out_address1;
output   conv_1_out_ce1;
input  [31:0] conv_1_out_q1;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] conv_1_out_address0;
reg conv_1_out_ce0;
reg[14:0] conv_1_out_address1;
reg conv_1_out_ce1;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] c_0_reg_179;
wire   [5:0] f_fu_207_p2;
reg   [5:0] f_reg_811;
wire    ap_CS_fsm_state2;
wire   [13:0] zext_ln13_fu_213_p1;
reg   [13:0] zext_ln13_reg_816;
wire   [0:0] icmp_ln10_fu_201_p2;
wire   [15:0] zext_ln13_1_fu_217_p1;
reg   [15:0] zext_ln13_1_reg_821;
wire   [7:0] add_ln13_fu_221_p2;
reg   [7:0] add_ln13_reg_827;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln13_fu_227_p2;
wire   [3:0] r_fu_233_p2;
reg   [3:0] r_reg_836;
wire   [9:0] mul_ln28_fu_251_p2;
reg   [9:0] mul_ln28_reg_841;
wire   [9:0] mul_ln28_1_fu_267_p2;
reg   [9:0] mul_ln28_1_reg_847;
wire   [0:0] icmp_ln16_fu_273_p2;
reg   [0:0] icmp_ln16_reg_853;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] c_fu_279_p2;
reg   [3:0] c_reg_857;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] trunc_ln28_1_fu_348_p1;
reg   [0:0] trunc_ln28_1_reg_867;
reg   [8:0] tmp_17_reg_872;
wire   [9:0] add_ln28_4_fu_399_p2;
reg   [9:0] add_ln28_4_reg_882;
wire   [7:0] add_ln35_fu_408_p2;
reg   [7:0] add_ln35_reg_887;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] select_ln28_1_fu_595_p3;
reg   [31:0] select_ln28_1_reg_902;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [5:0] f_0_reg_144;
reg   [3:0] r_0_reg_156;
wire    ap_CS_fsm_state7;
reg   [7:0] phi_mul_reg_167;
reg   [3:0] ap_phi_mux_c_0_phi_fu_183_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_3_fu_338_p1;
wire   [63:0] zext_ln28_7_fu_394_p1;
wire   [63:0] zext_ln28_4_fu_434_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln28_9_fu_506_p1;
wire   [63:0] zext_ln35_2_fu_803_p1;
reg   [31:0] grp_fu_190_p1;
reg   [31:0] grp_fu_196_p1;
wire   [31:0] select_ln28_fu_481_p3;
wire   [31:0] select_ln28_2_fu_686_p3;
wire   [4:0] shl_ln_fu_239_p3;
wire   [4:0] mul_ln28_fu_251_p0;
wire   [4:0] or_ln25_fu_257_p2;
wire   [4:0] mul_ln28_1_fu_267_p0;
wire   [4:0] shl_ln1_fu_285_p3;
wire   [9:0] zext_ln28_2_fu_293_p1;
wire   [9:0] add_ln28_fu_297_p2;
wire   [0:0] trunc_ln28_fu_302_p1;
wire   [5:0] tmp_13_fu_306_p3;
wire   [8:0] tmp_14_fu_320_p4;
wire   [5:0] or_ln28_7_fu_314_p2;
wire   [14:0] tmp_15_fu_330_p3;
wire   [9:0] add_ln28_1_fu_343_p2;
wire   [4:0] or_ln26_fu_362_p2;
wire   [9:0] zext_ln28_5_fu_368_p1;
wire   [9:0] add_ln28_2_fu_372_p2;
wire   [14:0] tmp_19_fu_377_p3;
wire   [15:0] zext_ln28_6_fu_385_p1;
wire   [15:0] add_ln28_3_fu_389_p2;
wire   [7:0] zext_ln35_fu_404_p1;
wire   [5:0] tmp_16_fu_414_p3;
wire   [5:0] or_ln28_8_fu_421_p2;
wire   [14:0] tmp_18_fu_427_p3;
wire   [31:0] bitcast_ln28_fu_439_p1;
wire   [7:0] tmp_3_fu_443_p4;
wire   [22:0] trunc_ln28_2_fu_453_p1;
wire   [0:0] icmp_ln28_1_fu_463_p2;
wire   [0:0] icmp_ln28_fu_457_p2;
wire   [0:0] or_ln28_fu_469_p2;
wire   [0:0] grp_fu_190_p2;
wire   [0:0] and_ln28_fu_475_p2;
wire   [14:0] tmp_20_fu_490_p3;
wire   [15:0] zext_ln28_8_fu_497_p1;
wire   [15:0] add_ln28_5_fu_501_p2;
wire   [31:0] bitcast_ln28_1_fu_511_p1;
wire   [31:0] bitcast_ln28_2_fu_529_p1;
wire   [7:0] tmp_5_fu_515_p4;
wire   [22:0] trunc_ln28_3_fu_525_p1;
wire   [0:0] icmp_ln28_3_fu_553_p2;
wire   [0:0] icmp_ln28_2_fu_547_p2;
wire   [7:0] tmp_6_fu_533_p4;
wire   [22:0] trunc_ln28_4_fu_543_p1;
wire   [0:0] icmp_ln28_5_fu_571_p2;
wire   [0:0] icmp_ln28_4_fu_565_p2;
wire   [0:0] or_ln28_1_fu_559_p2;
wire   [0:0] or_ln28_2_fu_577_p2;
wire   [0:0] and_ln28_1_fu_583_p2;
wire   [0:0] grp_fu_196_p2;
wire   [0:0] and_ln28_2_fu_589_p2;
wire   [31:0] bitcast_ln28_3_fu_603_p1;
wire   [31:0] bitcast_ln28_4_fu_621_p1;
wire   [7:0] tmp_8_fu_607_p4;
wire   [22:0] trunc_ln28_5_fu_617_p1;
wire   [0:0] icmp_ln28_7_fu_644_p2;
wire   [0:0] icmp_ln28_6_fu_638_p2;
wire   [7:0] tmp_9_fu_624_p4;
wire   [22:0] trunc_ln28_6_fu_634_p1;
wire   [0:0] icmp_ln28_9_fu_662_p2;
wire   [0:0] icmp_ln28_8_fu_656_p2;
wire   [0:0] or_ln28_3_fu_650_p2;
wire   [0:0] or_ln28_4_fu_668_p2;
wire   [0:0] and_ln28_3_fu_674_p2;
wire   [0:0] and_ln28_4_fu_680_p2;
wire   [31:0] bitcast_ln28_5_fu_694_p1;
wire   [31:0] bitcast_ln28_6_fu_712_p1;
wire   [7:0] tmp_10_fu_698_p4;
wire   [22:0] trunc_ln28_7_fu_708_p1;
wire   [0:0] icmp_ln28_11_fu_736_p2;
wire   [0:0] icmp_ln28_10_fu_730_p2;
wire   [7:0] tmp_11_fu_716_p4;
wire   [22:0] trunc_ln28_8_fu_726_p1;
wire   [0:0] icmp_ln28_13_fu_754_p2;
wire   [0:0] icmp_ln28_12_fu_748_p2;
wire   [0:0] or_ln28_5_fu_742_p2;
wire   [0:0] or_ln28_6_fu_760_p2;
wire   [0:0] and_ln28_5_fu_766_p2;
wire   [0:0] and_ln28_6_fu_772_p2;
wire   [12:0] tmp_21_fu_787_p3;
wire   [13:0] zext_ln35_1_fu_794_p1;
wire   [13:0] add_ln35_1_fu_798_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] mul_ln28_1_fu_267_p00;
wire   [9:0] mul_ln28_fu_251_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(grp_fu_190_p1),
    .opcode(5'd2),
    .dout(grp_fu_190_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(conv_1_out_q1),
    .din1(grp_fu_196_p1),
    .opcode(5'd2),
    .dout(grp_fu_196_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln13_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln13_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_853 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_179 <= c_reg_857;
    end else if (((icmp_ln13_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_179 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_144 <= f_reg_811;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_144 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        phi_mul_reg_167 <= add_ln13_reg_827;
    end else if (((icmp_ln10_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_167 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_0_reg_156 <= r_reg_836;
    end else if (((icmp_ln10_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_156 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_827 <= add_ln13_fu_221_p2;
        r_reg_836 <= r_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln28_4_reg_882[9 : 1] <= add_ln28_4_fu_399_p2[9 : 1];
        add_ln35_reg_887 <= add_ln35_fu_408_p2;
        tmp_17_reg_872 <= {{add_ln28_1_fu_343_p2[9:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_reg_857 <= c_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_811 <= f_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln16_reg_853 <= icmp_ln16_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mul_ln28_1_reg_847[9 : 1] <= mul_ln28_1_fu_267_p2[9 : 1];
        mul_ln28_reg_841[9 : 1] <= mul_ln28_fu_251_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_853 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln28_1_reg_902 <= select_ln28_1_fu_595_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_821[5 : 0] <= zext_ln13_1_fu_217_p1[5 : 0];
        zext_ln13_reg_816[5 : 0] <= zext_ln13_fu_213_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln16_fu_273_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_853 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_183_p4 = c_reg_857;
    end else begin
        ap_phi_mux_c_0_phi_fu_183_p4 = c_0_reg_179;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            conv_1_out_address0 = zext_ln28_4_fu_434_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_1_out_address0 = zext_ln28_3_fu_338_p1;
        end else begin
            conv_1_out_address0 = 'bx;
        end
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            conv_1_out_address1 = zext_ln28_9_fu_506_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_1_out_address1 = zext_ln28_7_fu_394_p1;
        end else begin
            conv_1_out_address1 = 'bx;
        end
    end else begin
        conv_1_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_1_out_ce1 = 1'b1;
    end else begin
        conv_1_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_190_p1 = select_ln28_1_reg_902;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_190_p1 = 32'd8388608;
    end else begin
        grp_fu_190_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_196_p1 = select_ln28_2_fu_686_p3;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_196_p1 = select_ln28_fu_481_p3;
    end else begin
        grp_fu_196_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln16_reg_853 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln16_fu_273_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln16_fu_273_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_221_p2 = (phi_mul_reg_167 + 8'd13);

assign add_ln28_1_fu_343_p2 = (zext_ln28_2_fu_293_p1 + mul_ln28_1_reg_847);

assign add_ln28_2_fu_372_p2 = (zext_ln28_5_fu_368_p1 + mul_ln28_reg_841);

assign add_ln28_3_fu_389_p2 = (zext_ln13_1_reg_821 + zext_ln28_6_fu_385_p1);

assign add_ln28_4_fu_399_p2 = (zext_ln28_5_fu_368_p1 + mul_ln28_1_reg_847);

assign add_ln28_5_fu_501_p2 = (zext_ln13_1_reg_821 + zext_ln28_8_fu_497_p1);

assign add_ln28_fu_297_p2 = (zext_ln28_2_fu_293_p1 + mul_ln28_reg_841);

assign add_ln35_1_fu_798_p2 = (zext_ln13_reg_816 + zext_ln35_1_fu_794_p1);

assign add_ln35_fu_408_p2 = (zext_ln35_fu_404_p1 + phi_mul_reg_167);

assign and_ln28_1_fu_583_p2 = (or_ln28_2_fu_577_p2 & or_ln28_1_fu_559_p2);

assign and_ln28_2_fu_589_p2 = (grp_fu_196_p2 & and_ln28_1_fu_583_p2);

assign and_ln28_3_fu_674_p2 = (or_ln28_4_fu_668_p2 & or_ln28_3_fu_650_p2);

assign and_ln28_4_fu_680_p2 = (grp_fu_190_p2 & and_ln28_3_fu_674_p2);

assign and_ln28_5_fu_766_p2 = (or_ln28_6_fu_760_p2 & or_ln28_5_fu_742_p2);

assign and_ln28_6_fu_772_p2 = (grp_fu_196_p2 & and_ln28_5_fu_766_p2);

assign and_ln28_fu_475_p2 = (or_ln28_fu_469_p2 & grp_fu_190_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_511_p1 = conv_1_out_q1;

assign bitcast_ln28_2_fu_529_p1 = select_ln28_fu_481_p3;

assign bitcast_ln28_3_fu_603_p1 = conv_1_out_q0;

assign bitcast_ln28_4_fu_621_p1 = select_ln28_1_reg_902;

assign bitcast_ln28_5_fu_694_p1 = conv_1_out_q1;

assign bitcast_ln28_6_fu_712_p1 = select_ln28_2_fu_686_p3;

assign bitcast_ln28_fu_439_p1 = conv_1_out_q0;

assign c_fu_279_p2 = (ap_phi_mux_c_0_phi_fu_183_p4 + 4'd1);

assign f_fu_207_p2 = (f_0_reg_144 + 6'd1);

assign icmp_ln10_fu_201_p2 = ((f_0_reg_144 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_227_p2 = ((r_0_reg_156 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_273_p2 = ((ap_phi_mux_c_0_phi_fu_183_p4 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_730_p2 = ((tmp_10_fu_698_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_736_p2 = ((trunc_ln28_7_fu_708_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_12_fu_748_p2 = ((tmp_11_fu_716_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_13_fu_754_p2 = ((trunc_ln28_8_fu_726_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_463_p2 = ((trunc_ln28_2_fu_453_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_547_p2 = ((tmp_5_fu_515_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_553_p2 = ((trunc_ln28_3_fu_525_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_565_p2 = ((tmp_6_fu_533_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_571_p2 = ((trunc_ln28_4_fu_543_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_638_p2 = ((tmp_8_fu_607_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_644_p2 = ((trunc_ln28_5_fu_617_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_656_p2 = ((tmp_9_fu_624_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_662_p2 = ((trunc_ln28_6_fu_634_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_457_p2 = ((tmp_3_fu_443_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_2_fu_803_p1;

assign max_pool_1_out_d0 = ((and_ln28_6_fu_772_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_2_fu_686_p3);

assign mul_ln28_1_fu_267_p0 = mul_ln28_1_fu_267_p00;

assign mul_ln28_1_fu_267_p00 = or_ln25_fu_257_p2;

assign mul_ln28_1_fu_267_p2 = (mul_ln28_1_fu_267_p0 * $signed('h1A));

assign mul_ln28_fu_251_p0 = mul_ln28_fu_251_p00;

assign mul_ln28_fu_251_p00 = shl_ln_fu_239_p3;

assign mul_ln28_fu_251_p2 = (mul_ln28_fu_251_p0 * $signed('h1A));

assign or_ln25_fu_257_p2 = (shl_ln_fu_239_p3 | 5'd1);

assign or_ln26_fu_362_p2 = (shl_ln1_fu_285_p3 | 5'd1);

assign or_ln28_1_fu_559_p2 = (icmp_ln28_3_fu_553_p2 | icmp_ln28_2_fu_547_p2);

assign or_ln28_2_fu_577_p2 = (icmp_ln28_5_fu_571_p2 | icmp_ln28_4_fu_565_p2);

assign or_ln28_3_fu_650_p2 = (icmp_ln28_7_fu_644_p2 | icmp_ln28_6_fu_638_p2);

assign or_ln28_4_fu_668_p2 = (icmp_ln28_9_fu_662_p2 | icmp_ln28_8_fu_656_p2);

assign or_ln28_5_fu_742_p2 = (icmp_ln28_11_fu_736_p2 | icmp_ln28_10_fu_730_p2);

assign or_ln28_6_fu_760_p2 = (icmp_ln28_13_fu_754_p2 | icmp_ln28_12_fu_748_p2);

assign or_ln28_7_fu_314_p2 = (tmp_13_fu_306_p3 | f_0_reg_144);

assign or_ln28_8_fu_421_p2 = (tmp_16_fu_414_p3 | f_0_reg_144);

assign or_ln28_fu_469_p2 = (icmp_ln28_fu_457_p2 | icmp_ln28_1_fu_463_p2);

assign r_fu_233_p2 = (r_0_reg_156 + 4'd1);

assign select_ln28_1_fu_595_p3 = ((and_ln28_2_fu_589_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_fu_481_p3);

assign select_ln28_2_fu_686_p3 = ((and_ln28_4_fu_680_p2[0:0] === 1'b1) ? conv_1_out_q0 : select_ln28_1_reg_902);

assign select_ln28_fu_481_p3 = ((and_ln28_fu_475_p2[0:0] === 1'b1) ? conv_1_out_q0 : 32'd8388608);

assign shl_ln1_fu_285_p3 = {{ap_phi_mux_c_0_phi_fu_183_p4}, {1'd0}};

assign shl_ln_fu_239_p3 = {{r_0_reg_156}, {1'd0}};

assign tmp_10_fu_698_p4 = {{bitcast_ln28_5_fu_694_p1[30:23]}};

assign tmp_11_fu_716_p4 = {{bitcast_ln28_6_fu_712_p1[30:23]}};

assign tmp_13_fu_306_p3 = {{trunc_ln28_fu_302_p1}, {5'd0}};

assign tmp_14_fu_320_p4 = {{add_ln28_fu_297_p2[9:1]}};

assign tmp_15_fu_330_p3 = {{tmp_14_fu_320_p4}, {or_ln28_7_fu_314_p2}};

assign tmp_16_fu_414_p3 = {{trunc_ln28_1_reg_867}, {5'd0}};

assign tmp_18_fu_427_p3 = {{tmp_17_reg_872}, {or_ln28_8_fu_421_p2}};

assign tmp_19_fu_377_p3 = {{add_ln28_2_fu_372_p2}, {5'd0}};

assign tmp_20_fu_490_p3 = {{add_ln28_4_reg_882}, {5'd0}};

assign tmp_21_fu_787_p3 = {{add_ln35_reg_887}, {5'd0}};

assign tmp_3_fu_443_p4 = {{bitcast_ln28_fu_439_p1[30:23]}};

assign tmp_5_fu_515_p4 = {{bitcast_ln28_1_fu_511_p1[30:23]}};

assign tmp_6_fu_533_p4 = {{bitcast_ln28_2_fu_529_p1[30:23]}};

assign tmp_8_fu_607_p4 = {{bitcast_ln28_3_fu_603_p1[30:23]}};

assign tmp_9_fu_624_p4 = {{bitcast_ln28_4_fu_621_p1[30:23]}};

assign trunc_ln28_1_fu_348_p1 = add_ln28_1_fu_343_p2[0:0];

assign trunc_ln28_2_fu_453_p1 = bitcast_ln28_fu_439_p1[22:0];

assign trunc_ln28_3_fu_525_p1 = bitcast_ln28_1_fu_511_p1[22:0];

assign trunc_ln28_4_fu_543_p1 = bitcast_ln28_2_fu_529_p1[22:0];

assign trunc_ln28_5_fu_617_p1 = bitcast_ln28_3_fu_603_p1[22:0];

assign trunc_ln28_6_fu_634_p1 = bitcast_ln28_4_fu_621_p1[22:0];

assign trunc_ln28_7_fu_708_p1 = bitcast_ln28_5_fu_694_p1[22:0];

assign trunc_ln28_8_fu_726_p1 = bitcast_ln28_6_fu_712_p1[22:0];

assign trunc_ln28_fu_302_p1 = add_ln28_fu_297_p2[0:0];

assign zext_ln13_1_fu_217_p1 = f_0_reg_144;

assign zext_ln13_fu_213_p1 = f_0_reg_144;

assign zext_ln28_2_fu_293_p1 = shl_ln1_fu_285_p3;

assign zext_ln28_3_fu_338_p1 = tmp_15_fu_330_p3;

assign zext_ln28_4_fu_434_p1 = tmp_18_fu_427_p3;

assign zext_ln28_5_fu_368_p1 = or_ln26_fu_362_p2;

assign zext_ln28_6_fu_385_p1 = tmp_19_fu_377_p3;

assign zext_ln28_7_fu_394_p1 = add_ln28_3_fu_389_p2;

assign zext_ln28_8_fu_497_p1 = tmp_20_fu_490_p3;

assign zext_ln28_9_fu_506_p1 = add_ln28_5_fu_501_p2;

assign zext_ln35_1_fu_794_p1 = tmp_21_fu_787_p3;

assign zext_ln35_2_fu_803_p1 = add_ln35_1_fu_798_p2;

assign zext_ln35_fu_404_p1 = ap_phi_mux_c_0_phi_fu_183_p4;

always @ (posedge ap_clk) begin
    zext_ln13_reg_816[13:6] <= 8'b00000000;
    zext_ln13_1_reg_821[15:6] <= 10'b0000000000;
    mul_ln28_reg_841[0] <= 1'b0;
    mul_ln28_1_reg_847[0] <= 1'b0;
    trunc_ln28_1_reg_867 <= 1'b0;
    add_ln28_4_reg_882[0] <= 1'b1;
end

endmodule //max_pool_1
