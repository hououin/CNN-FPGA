// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=23.438000,HLS_SYN_LAT=10818,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=263,HLS_SYN_LUT=1365,HLS_VERSION=2019_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        conv_1_out_address1,
        conv_1_out_ce1,
        conv_1_out_q1,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [14:0] conv_1_out_address1;
output   conv_1_out_ce1;
input  [31:0] conv_1_out_q1;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] conv_1_out_address0;
reg conv_1_out_ce0;
reg[14:0] conv_1_out_address1;
reg conv_1_out_ce1;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] indvar_flatten23_reg_152;
reg   [5:0] f_0_reg_163;
reg   [7:0] indvar_flatten_reg_174;
reg   [3:0] r_0_reg_185;
reg   [3:0] c_0_reg_196;
wire   [0:0] icmp_ln10_fu_232_p2;
reg   [0:0] icmp_ln10_reg_943;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [12:0] add_ln10_fu_238_p2;
reg   [12:0] add_ln10_reg_947;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] select_ln28_5_fu_264_p3;
reg   [5:0] select_ln28_5_reg_952;
wire   [15:0] zext_ln28_1_fu_272_p1;
reg   [15:0] zext_ln28_1_reg_959;
wire   [3:0] select_ln13_fu_322_p3;
reg   [3:0] select_ln13_reg_964;
wire   [3:0] select_ln13_1_fu_338_p3;
reg   [3:0] select_ln13_1_reg_970;
wire   [4:0] select_ln13_3_fu_370_p3;
reg   [4:0] select_ln13_3_reg_976;
wire   [9:0] zext_ln28_4_fu_386_p1;
reg   [9:0] zext_ln28_4_reg_981;
wire   [9:0] zext_ln28_7_fu_443_p1;
reg   [9:0] zext_ln28_7_reg_991;
wire   [7:0] select_ln13_4_fu_482_p3;
reg   [7:0] select_ln13_4_reg_1001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] select_ln28_1_fu_706_p3;
reg   [31:0] select_ln28_1_reg_1016;
wire   [3:0] c_fu_714_p2;
reg   [3:0] c_reg_1023;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [12:0] ap_phi_mux_indvar_flatten23_phi_fu_156_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_f_0_phi_fu_167_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_178_p4;
reg   [3:0] ap_phi_mux_r_0_phi_fu_189_p4;
reg   [3:0] ap_phi_mux_c_0_phi_fu_200_p4;
wire   [63:0] zext_ln28_5_fu_432_p1;
wire   [63:0] zext_ln28_9_fu_471_p1;
wire   [63:0] zext_ln28_6_fu_539_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln28_11_fu_617_p1;
wire   [63:0] zext_ln35_3_fu_929_p1;
reg   [31:0] grp_fu_207_p1;
reg   [31:0] grp_fu_213_p1;
wire   [31:0] select_ln28_fu_586_p3;
wire   [31:0] select_ln28_2_fu_808_p3;
wire   [4:0] shl_ln_fu_218_p3;
wire   [0:0] icmp_ln13_fu_250_p2;
wire   [5:0] f_fu_244_p2;
wire   [4:0] or_ln25_fu_226_p2;
wire   [0:0] icmp_ln16_fu_298_p2;
wire   [0:0] xor_ln28_fu_292_p2;
wire   [3:0] select_ln28_4_fu_256_p3;
wire   [0:0] and_ln28_7_fu_304_p2;
wire   [0:0] or_ln13_fu_316_p2;
wire   [3:0] r_fu_310_p2;
wire   [4:0] shl_ln25_mid1_fu_330_p3;
wire   [4:0] select_ln28_6_fu_276_p3;
wire   [4:0] select_ln13_2_fu_346_p3;
wire   [4:0] mul_ln28_fu_358_p1;
wire   [4:0] or_ln25_1_fu_364_p2;
wire   [4:0] select_ln28_7_fu_284_p3;
wire   [4:0] shl_ln1_fu_378_p3;
wire   [9:0] mul_ln28_fu_358_p2;
wire   [9:0] add_ln28_fu_390_p2;
wire   [0:0] trunc_ln28_fu_396_p1;
wire   [5:0] tmp_1_fu_400_p3;
wire   [8:0] tmp_fu_414_p4;
wire   [5:0] or_ln28_7_fu_408_p2;
wire   [14:0] tmp_13_fu_424_p3;
wire   [4:0] or_ln26_fu_437_p2;
wire   [9:0] add_ln28_2_fu_447_p2;
wire   [14:0] tmp_17_fu_453_p3;
wire   [15:0] zext_ln28_8_fu_461_p1;
wire   [15:0] add_ln28_3_fu_465_p2;
wire   [7:0] add_ln13_fu_476_p2;
wire   [4:0] mul_ln28_1_fu_493_p1;
wire   [9:0] mul_ln28_1_fu_493_p2;
wire   [9:0] add_ln28_1_fu_499_p2;
wire   [0:0] trunc_ln28_1_fu_504_p1;
wire   [5:0] tmp_14_fu_508_p3;
wire   [8:0] tmp_15_fu_521_p4;
wire   [5:0] or_ln28_8_fu_516_p2;
wire   [14:0] tmp_16_fu_531_p3;
wire   [31:0] bitcast_ln28_fu_544_p1;
wire   [7:0] tmp_3_fu_548_p4;
wire   [22:0] trunc_ln28_2_fu_558_p1;
wire   [0:0] icmp_ln28_1_fu_568_p2;
wire   [0:0] icmp_ln28_fu_562_p2;
wire   [0:0] or_ln28_fu_574_p2;
wire   [0:0] grp_fu_207_p2;
wire   [0:0] and_ln28_fu_580_p2;
wire   [9:0] add_ln28_4_fu_595_p2;
wire   [14:0] tmp_18_fu_600_p3;
wire   [15:0] zext_ln28_10_fu_608_p1;
wire   [15:0] add_ln28_5_fu_612_p2;
wire   [31:0] bitcast_ln28_1_fu_622_p1;
wire   [31:0] bitcast_ln28_2_fu_640_p1;
wire   [7:0] tmp_5_fu_626_p4;
wire   [22:0] trunc_ln28_3_fu_636_p1;
wire   [0:0] icmp_ln28_3_fu_664_p2;
wire   [0:0] icmp_ln28_2_fu_658_p2;
wire   [7:0] tmp_6_fu_644_p4;
wire   [22:0] trunc_ln28_4_fu_654_p1;
wire   [0:0] icmp_ln28_5_fu_682_p2;
wire   [0:0] icmp_ln28_4_fu_676_p2;
wire   [0:0] or_ln28_1_fu_670_p2;
wire   [0:0] or_ln28_2_fu_688_p2;
wire   [0:0] and_ln28_1_fu_694_p2;
wire   [0:0] grp_fu_213_p2;
wire   [0:0] and_ln28_2_fu_700_p2;
wire   [31:0] bitcast_ln28_3_fu_725_p1;
wire   [31:0] bitcast_ln28_4_fu_743_p1;
wire   [7:0] tmp_8_fu_729_p4;
wire   [22:0] trunc_ln28_5_fu_739_p1;
wire   [0:0] icmp_ln28_7_fu_766_p2;
wire   [0:0] icmp_ln28_6_fu_760_p2;
wire   [7:0] tmp_9_fu_746_p4;
wire   [22:0] trunc_ln28_6_fu_756_p1;
wire   [0:0] icmp_ln28_9_fu_784_p2;
wire   [0:0] icmp_ln28_8_fu_778_p2;
wire   [0:0] or_ln28_3_fu_772_p2;
wire   [0:0] or_ln28_4_fu_790_p2;
wire   [0:0] and_ln28_3_fu_796_p2;
wire   [0:0] and_ln28_4_fu_802_p2;
wire   [31:0] bitcast_ln28_5_fu_816_p1;
wire   [31:0] bitcast_ln28_6_fu_834_p1;
wire   [7:0] tmp_10_fu_820_p4;
wire   [22:0] trunc_ln28_7_fu_830_p1;
wire   [0:0] icmp_ln28_11_fu_858_p2;
wire   [0:0] icmp_ln28_10_fu_852_p2;
wire   [7:0] tmp_11_fu_838_p4;
wire   [22:0] trunc_ln28_8_fu_848_p1;
wire   [0:0] icmp_ln28_13_fu_876_p2;
wire   [0:0] icmp_ln28_12_fu_870_p2;
wire   [0:0] or_ln28_5_fu_864_p2;
wire   [0:0] or_ln28_6_fu_882_p2;
wire   [0:0] and_ln28_5_fu_888_p2;
wire   [0:0] and_ln28_6_fu_894_p2;
wire   [7:0] grp_fu_934_p3;
wire   [12:0] tmp_19_fu_912_p3;
wire   [13:0] zext_ln28_fu_719_p1;
wire   [13:0] zext_ln35_2_fu_919_p1;
wire   [13:0] add_ln35_1_fu_923_p2;
wire   [4:0] grp_fu_934_p0;
wire   [3:0] grp_fu_934_p1;
wire   [3:0] grp_fu_934_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_934_p10;
wire   [7:0] grp_fu_934_p20;
wire   [9:0] mul_ln28_1_fu_493_p10;
wire   [9:0] mul_ln28_fu_358_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(grp_fu_207_p1),
    .opcode(5'd2),
    .dout(grp_fu_207_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(conv_1_out_q1),
    .din1(grp_fu_213_p1),
    .opcode(5'd2),
    .dout(grp_fu_213_p2)
);

max_pool_1_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
max_pool_1_mac_mucud_U3(
    .din0(grp_fu_934_p0),
    .din1(grp_fu_934_p1),
    .din2(grp_fu_934_p2),
    .dout(grp_fu_934_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_196 <= c_reg_1023;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_196 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_163 <= select_ln28_5_reg_952;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_163 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten23_reg_152 <= add_ln10_reg_947;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten23_reg_152 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_174 <= select_ln13_4_reg_1001;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_174 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_185 <= select_ln13_1_reg_970;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_185 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln10_reg_947 <= add_ln10_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        c_reg_1023 <= c_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_943 <= icmp_ln10_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_232_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln13_1_reg_970 <= select_ln13_1_fu_338_p3;
        select_ln13_4_reg_1001 <= select_ln13_4_fu_482_p3;
        select_ln28_5_reg_952 <= select_ln28_5_fu_264_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln13_3_reg_976[4 : 1] <= select_ln13_3_fu_370_p3[4 : 1];
        select_ln13_reg_964 <= select_ln13_fu_322_p3;
        zext_ln28_1_reg_959[5 : 0] <= zext_ln28_1_fu_272_p1[5 : 0];
        zext_ln28_4_reg_981[4 : 1] <= zext_ln28_4_fu_386_p1[4 : 1];
        zext_ln28_7_reg_991[4 : 1] <= zext_ln28_7_fu_443_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln28_1_reg_1016 <= select_ln28_1_fu_706_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_232_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_200_p4 = c_reg_1023;
    end else begin
        ap_phi_mux_c_0_phi_fu_200_p4 = c_0_reg_196;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_167_p4 = select_ln28_5_reg_952;
    end else begin
        ap_phi_mux_f_0_phi_fu_167_p4 = f_0_reg_163;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten23_phi_fu_156_p4 = add_ln10_reg_947;
    end else begin
        ap_phi_mux_indvar_flatten23_phi_fu_156_p4 = indvar_flatten23_reg_152;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_178_p4 = select_ln13_4_reg_1001;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_178_p4 = indvar_flatten_reg_174;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_189_p4 = select_ln13_1_reg_970;
    end else begin
        ap_phi_mux_r_0_phi_fu_189_p4 = r_0_reg_185;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            conv_1_out_address0 = zext_ln28_6_fu_539_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_1_out_address0 = zext_ln28_5_fu_432_p1;
        end else begin
            conv_1_out_address0 = 'bx;
        end
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            conv_1_out_address1 = zext_ln28_11_fu_617_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_1_out_address1 = zext_ln28_9_fu_471_p1;
        end else begin
            conv_1_out_address1 = 'bx;
        end
    end else begin
        conv_1_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_1_out_ce1 = 1'b1;
    end else begin
        conv_1_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_207_p1 = select_ln28_1_reg_1016;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_207_p1 = 32'd8388608;
    end else begin
        grp_fu_207_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_213_p1 = select_ln28_2_fu_808_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_213_p1 = select_ln28_fu_586_p3;
    end else begin
        grp_fu_213_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_943 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln10_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_238_p2 = (ap_phi_mux_indvar_flatten23_phi_fu_156_p4 + 13'd1);

assign add_ln13_fu_476_p2 = (8'd1 + ap_phi_mux_indvar_flatten_phi_fu_178_p4);

assign add_ln28_1_fu_499_p2 = (zext_ln28_4_reg_981 + mul_ln28_1_fu_493_p2);

assign add_ln28_2_fu_447_p2 = (zext_ln28_7_fu_443_p1 + mul_ln28_fu_358_p2);

assign add_ln28_3_fu_465_p2 = (zext_ln28_1_fu_272_p1 + zext_ln28_8_fu_461_p1);

assign add_ln28_4_fu_595_p2 = (zext_ln28_7_reg_991 + mul_ln28_1_fu_493_p2);

assign add_ln28_5_fu_612_p2 = (zext_ln28_1_reg_959 + zext_ln28_10_fu_608_p1);

assign add_ln28_fu_390_p2 = (zext_ln28_4_fu_386_p1 + mul_ln28_fu_358_p2);

assign add_ln35_1_fu_923_p2 = (zext_ln28_fu_719_p1 + zext_ln35_2_fu_919_p1);

assign and_ln28_1_fu_694_p2 = (or_ln28_2_fu_688_p2 & or_ln28_1_fu_670_p2);

assign and_ln28_2_fu_700_p2 = (grp_fu_213_p2 & and_ln28_1_fu_694_p2);

assign and_ln28_3_fu_796_p2 = (or_ln28_4_fu_790_p2 & or_ln28_3_fu_772_p2);

assign and_ln28_4_fu_802_p2 = (grp_fu_207_p2 & and_ln28_3_fu_796_p2);

assign and_ln28_5_fu_888_p2 = (or_ln28_6_fu_882_p2 & or_ln28_5_fu_864_p2);

assign and_ln28_6_fu_894_p2 = (grp_fu_213_p2 & and_ln28_5_fu_888_p2);

assign and_ln28_7_fu_304_p2 = (xor_ln28_fu_292_p2 & icmp_ln16_fu_298_p2);

assign and_ln28_fu_580_p2 = (or_ln28_fu_574_p2 & grp_fu_207_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_622_p1 = conv_1_out_q1;

assign bitcast_ln28_2_fu_640_p1 = select_ln28_fu_586_p3;

assign bitcast_ln28_3_fu_725_p1 = conv_1_out_q0;

assign bitcast_ln28_4_fu_743_p1 = select_ln28_1_reg_1016;

assign bitcast_ln28_5_fu_816_p1 = conv_1_out_q1;

assign bitcast_ln28_6_fu_834_p1 = select_ln28_2_fu_808_p3;

assign bitcast_ln28_fu_544_p1 = conv_1_out_q0;

assign c_fu_714_p2 = (4'd1 + select_ln13_reg_964);

assign f_fu_244_p2 = (6'd1 + ap_phi_mux_f_0_phi_fu_167_p4);

assign grp_fu_934_p0 = 8'd13;

assign grp_fu_934_p1 = grp_fu_934_p10;

assign grp_fu_934_p10 = select_ln13_1_reg_970;

assign grp_fu_934_p2 = grp_fu_934_p20;

assign grp_fu_934_p20 = select_ln13_reg_964;

assign icmp_ln10_fu_232_p2 = ((ap_phi_mux_indvar_flatten23_phi_fu_156_p4 == 13'd5408) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_250_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_178_p4 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_298_p2 = ((ap_phi_mux_c_0_phi_fu_200_p4 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_852_p2 = ((tmp_10_fu_820_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_858_p2 = ((trunc_ln28_7_fu_830_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_12_fu_870_p2 = ((tmp_11_fu_838_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_13_fu_876_p2 = ((trunc_ln28_8_fu_848_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_568_p2 = ((trunc_ln28_2_fu_558_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_658_p2 = ((tmp_5_fu_626_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_664_p2 = ((trunc_ln28_3_fu_636_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_676_p2 = ((tmp_6_fu_644_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_682_p2 = ((trunc_ln28_4_fu_654_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_760_p2 = ((tmp_8_fu_729_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_766_p2 = ((trunc_ln28_5_fu_739_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_778_p2 = ((tmp_9_fu_746_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_784_p2 = ((trunc_ln28_6_fu_756_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_562_p2 = ((tmp_3_fu_548_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_3_fu_929_p1;

assign max_pool_1_out_d0 = ((and_ln28_6_fu_894_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_2_fu_808_p3);

assign mul_ln28_1_fu_493_p1 = mul_ln28_1_fu_493_p10;

assign mul_ln28_1_fu_493_p10 = select_ln13_3_reg_976;

assign mul_ln28_1_fu_493_p2 = (10'd26 * mul_ln28_1_fu_493_p1);

assign mul_ln28_fu_358_p1 = mul_ln28_fu_358_p10;

assign mul_ln28_fu_358_p10 = select_ln13_2_fu_346_p3;

assign mul_ln28_fu_358_p2 = (10'd26 * mul_ln28_fu_358_p1);

assign or_ln13_fu_316_p2 = (icmp_ln13_fu_250_p2 | and_ln28_7_fu_304_p2);

assign or_ln25_1_fu_364_p2 = (shl_ln25_mid1_fu_330_p3 | 5'd1);

assign or_ln25_fu_226_p2 = (shl_ln_fu_218_p3 | 5'd1);

assign or_ln26_fu_437_p2 = (shl_ln1_fu_378_p3 | 5'd1);

assign or_ln28_1_fu_670_p2 = (icmp_ln28_3_fu_664_p2 | icmp_ln28_2_fu_658_p2);

assign or_ln28_2_fu_688_p2 = (icmp_ln28_5_fu_682_p2 | icmp_ln28_4_fu_676_p2);

assign or_ln28_3_fu_772_p2 = (icmp_ln28_7_fu_766_p2 | icmp_ln28_6_fu_760_p2);

assign or_ln28_4_fu_790_p2 = (icmp_ln28_9_fu_784_p2 | icmp_ln28_8_fu_778_p2);

assign or_ln28_5_fu_864_p2 = (icmp_ln28_11_fu_858_p2 | icmp_ln28_10_fu_852_p2);

assign or_ln28_6_fu_882_p2 = (icmp_ln28_13_fu_876_p2 | icmp_ln28_12_fu_870_p2);

assign or_ln28_7_fu_408_p2 = (tmp_1_fu_400_p3 | select_ln28_5_fu_264_p3);

assign or_ln28_8_fu_516_p2 = (tmp_14_fu_508_p3 | select_ln28_5_reg_952);

assign or_ln28_fu_574_p2 = (icmp_ln28_fu_562_p2 | icmp_ln28_1_fu_568_p2);

assign r_fu_310_p2 = (4'd1 + select_ln28_4_fu_256_p3);

assign select_ln13_1_fu_338_p3 = ((and_ln28_7_fu_304_p2[0:0] === 1'b1) ? r_fu_310_p2 : select_ln28_4_fu_256_p3);

assign select_ln13_2_fu_346_p3 = ((and_ln28_7_fu_304_p2[0:0] === 1'b1) ? shl_ln25_mid1_fu_330_p3 : select_ln28_6_fu_276_p3);

assign select_ln13_3_fu_370_p3 = ((and_ln28_7_fu_304_p2[0:0] === 1'b1) ? or_ln25_1_fu_364_p2 : select_ln28_7_fu_284_p3);

assign select_ln13_4_fu_482_p3 = ((icmp_ln13_fu_250_p2[0:0] === 1'b1) ? 8'd1 : add_ln13_fu_476_p2);

assign select_ln13_fu_322_p3 = ((or_ln13_fu_316_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_c_0_phi_fu_200_p4);

assign select_ln28_1_fu_706_p3 = ((and_ln28_2_fu_700_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_fu_586_p3);

assign select_ln28_2_fu_808_p3 = ((and_ln28_4_fu_802_p2[0:0] === 1'b1) ? conv_1_out_q0 : select_ln28_1_reg_1016);

assign select_ln28_4_fu_256_p3 = ((icmp_ln13_fu_250_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_r_0_phi_fu_189_p4);

assign select_ln28_5_fu_264_p3 = ((icmp_ln13_fu_250_p2[0:0] === 1'b1) ? f_fu_244_p2 : ap_phi_mux_f_0_phi_fu_167_p4);

assign select_ln28_6_fu_276_p3 = ((icmp_ln13_fu_250_p2[0:0] === 1'b1) ? 5'd0 : shl_ln_fu_218_p3);

assign select_ln28_7_fu_284_p3 = ((icmp_ln13_fu_250_p2[0:0] === 1'b1) ? 5'd1 : or_ln25_fu_226_p2);

assign select_ln28_fu_586_p3 = ((and_ln28_fu_580_p2[0:0] === 1'b1) ? conv_1_out_q0 : 32'd8388608);

assign shl_ln1_fu_378_p3 = {{select_ln13_fu_322_p3}, {1'd0}};

assign shl_ln25_mid1_fu_330_p3 = {{r_fu_310_p2}, {1'd0}};

assign shl_ln_fu_218_p3 = {{ap_phi_mux_r_0_phi_fu_189_p4}, {1'd0}};

assign tmp_10_fu_820_p4 = {{bitcast_ln28_5_fu_816_p1[30:23]}};

assign tmp_11_fu_838_p4 = {{bitcast_ln28_6_fu_834_p1[30:23]}};

assign tmp_13_fu_424_p3 = {{tmp_fu_414_p4}, {or_ln28_7_fu_408_p2}};

assign tmp_14_fu_508_p3 = {{trunc_ln28_1_fu_504_p1}, {5'd0}};

assign tmp_15_fu_521_p4 = {{add_ln28_1_fu_499_p2[9:1]}};

assign tmp_16_fu_531_p3 = {{tmp_15_fu_521_p4}, {or_ln28_8_fu_516_p2}};

assign tmp_17_fu_453_p3 = {{add_ln28_2_fu_447_p2}, {5'd0}};

assign tmp_18_fu_600_p3 = {{add_ln28_4_fu_595_p2}, {5'd0}};

assign tmp_19_fu_912_p3 = {{grp_fu_934_p3}, {5'd0}};

assign tmp_1_fu_400_p3 = {{trunc_ln28_fu_396_p1}, {5'd0}};

assign tmp_3_fu_548_p4 = {{bitcast_ln28_fu_544_p1[30:23]}};

assign tmp_5_fu_626_p4 = {{bitcast_ln28_1_fu_622_p1[30:23]}};

assign tmp_6_fu_644_p4 = {{bitcast_ln28_2_fu_640_p1[30:23]}};

assign tmp_8_fu_729_p4 = {{bitcast_ln28_3_fu_725_p1[30:23]}};

assign tmp_9_fu_746_p4 = {{bitcast_ln28_4_fu_743_p1[30:23]}};

assign tmp_fu_414_p4 = {{add_ln28_fu_390_p2[9:1]}};

assign trunc_ln28_1_fu_504_p1 = add_ln28_1_fu_499_p2[0:0];

assign trunc_ln28_2_fu_558_p1 = bitcast_ln28_fu_544_p1[22:0];

assign trunc_ln28_3_fu_636_p1 = bitcast_ln28_1_fu_622_p1[22:0];

assign trunc_ln28_4_fu_654_p1 = bitcast_ln28_2_fu_640_p1[22:0];

assign trunc_ln28_5_fu_739_p1 = bitcast_ln28_3_fu_725_p1[22:0];

assign trunc_ln28_6_fu_756_p1 = bitcast_ln28_4_fu_743_p1[22:0];

assign trunc_ln28_7_fu_830_p1 = bitcast_ln28_5_fu_816_p1[22:0];

assign trunc_ln28_8_fu_848_p1 = bitcast_ln28_6_fu_834_p1[22:0];

assign trunc_ln28_fu_396_p1 = add_ln28_fu_390_p2[0:0];

assign xor_ln28_fu_292_p2 = (icmp_ln13_fu_250_p2 ^ 1'd1);

assign zext_ln28_10_fu_608_p1 = tmp_18_fu_600_p3;

assign zext_ln28_11_fu_617_p1 = add_ln28_5_fu_612_p2;

assign zext_ln28_1_fu_272_p1 = select_ln28_5_fu_264_p3;

assign zext_ln28_4_fu_386_p1 = shl_ln1_fu_378_p3;

assign zext_ln28_5_fu_432_p1 = tmp_13_fu_424_p3;

assign zext_ln28_6_fu_539_p1 = tmp_16_fu_531_p3;

assign zext_ln28_7_fu_443_p1 = or_ln26_fu_437_p2;

assign zext_ln28_8_fu_461_p1 = tmp_17_fu_453_p3;

assign zext_ln28_9_fu_471_p1 = add_ln28_3_fu_465_p2;

assign zext_ln28_fu_719_p1 = select_ln28_5_reg_952;

assign zext_ln35_2_fu_919_p1 = tmp_19_fu_912_p3;

assign zext_ln35_3_fu_929_p1 = add_ln35_1_fu_923_p2;

always @ (posedge ap_clk) begin
    zext_ln28_1_reg_959[15:6] <= 10'b0000000000;
    select_ln13_3_reg_976[0] <= 1'b1;
    zext_ln28_4_reg_981[0] <= 1'b0;
    zext_ln28_4_reg_981[9:5] <= 5'b00000;
    zext_ln28_7_reg_991[0] <= 1'b1;
    zext_ln28_7_reg_991[9:5] <= 5'b00000;
end

endmodule //max_pool_1
