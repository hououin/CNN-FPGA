-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_1_out_ce1 : OUT STD_LOGIC;
    conv_1_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=23.438000,HLS_SYN_LAT=10818,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=263,HLS_SYN_LUT=1365,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv13_1520 : STD_LOGIC_VECTOR (12 downto 0) := "1010100100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten23_reg_152 : STD_LOGIC_VECTOR (12 downto 0);
    signal f_0_reg_163 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_196 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln10_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln10_fu_238_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln10_reg_947 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_5_fu_264_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln28_5_reg_952 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_1_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_1_reg_959 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln13_fu_322_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_reg_964 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_1_fu_338_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_1_reg_970 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_3_fu_370_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_3_reg_976 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_4_fu_386_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln28_4_reg_981 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln28_7_fu_443_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln28_7_reg_991 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln13_4_fu_482_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln13_4_reg_1001 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln28_1_fu_706_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_714_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_1023 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten23_phi_fu_156_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_phi_fu_167_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_178_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_r_0_phi_fu_189_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_200_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_5_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_9_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_6_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln28_11_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_fu_808_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_218_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln13_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_244_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln25_fu_226_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_4_fu_256_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln28_7_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_310_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln25_mid1_fu_330_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_6_fu_276_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_2_fu_346_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_fu_358_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln25_1_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_7_fu_284_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_fu_378_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_fu_358_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_fu_390_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln28_fu_396_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_400_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_414_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln28_7_fu_408_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_424_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln26_fu_437_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln28_2_fu_447_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_453_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_8_fu_461_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_3_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln13_fu_476_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_1_fu_493_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_1_fu_493_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_1_fu_499_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln28_1_fu_504_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_508_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_521_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln28_8_fu_516_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_531_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal bitcast_ln28_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_548_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_558_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_4_fu_595_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_600_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_10_fu_608_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_5_fu_612_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln28_1_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_2_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_626_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_636_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_644_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_4_fu_654_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_3_fu_725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_4_fu_743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_729_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_5_fu_739_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_746_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_6_fu_756_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_9_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_8_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_4_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_5_fu_816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_6_fu_834_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_820_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_7_fu_830_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_11_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_10_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_838_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_8_fu_848_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_13_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_12_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_5_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_6_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_5_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_6_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_934_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_912_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln28_fu_719_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_2_fu_919_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_1_fu_923_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_934_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_934_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_934_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_934_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_934_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_1_fu_493_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln28_fu_358_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component max_pool_1_mac_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => grp_fu_207_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_207_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q1,
        din1 => grp_fu_213_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_213_p2);

    max_pool_1_mac_mucud_U3 : component max_pool_1_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_934_p0,
        din1 => grp_fu_934_p1,
        din2 => grp_fu_934_p2,
        dout => grp_fu_934_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_196 <= c_reg_1023;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_196 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_163 <= select_ln28_5_reg_952;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_163 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten23_reg_152 <= add_ln10_reg_947;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_152 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_174 <= select_ln13_4_reg_1001;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_174 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_185 <= select_ln13_1_reg_970;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_185 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln10_reg_947 <= add_ln10_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                c_reg_1023 <= c_fu_714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_943 <= icmp_ln10_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln13_1_reg_970 <= select_ln13_1_fu_338_p3;
                select_ln13_4_reg_1001 <= select_ln13_4_fu_482_p3;
                select_ln28_5_reg_952 <= select_ln28_5_fu_264_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    select_ln13_3_reg_976(4 downto 1) <= select_ln13_3_fu_370_p3(4 downto 1);
                select_ln13_reg_964 <= select_ln13_fu_322_p3;
                    zext_ln28_1_reg_959(5 downto 0) <= zext_ln28_1_fu_272_p1(5 downto 0);
                    zext_ln28_4_reg_981(4 downto 1) <= zext_ln28_4_fu_386_p1(4 downto 1);
                    zext_ln28_7_reg_991(4 downto 1) <= zext_ln28_7_fu_443_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln28_1_reg_1016 <= select_ln28_1_fu_706_p3;
            end if;
        end if;
    end process;
    zext_ln28_1_reg_959(15 downto 6) <= "0000000000";
    select_ln13_3_reg_976(0) <= '1';
    zext_ln28_4_reg_981(0) <= '0';
    zext_ln28_4_reg_981(9 downto 5) <= "00000";
    zext_ln28_7_reg_991(0) <= '1';
    zext_ln28_7_reg_991(9 downto 5) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_232_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln10_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_238_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten23_phi_fu_156_p4) + unsigned(ap_const_lv13_1));
    add_ln13_fu_476_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_178_p4));
    add_ln28_1_fu_499_p2 <= std_logic_vector(unsigned(zext_ln28_4_reg_981) + unsigned(mul_ln28_1_fu_493_p2));
    add_ln28_2_fu_447_p2 <= std_logic_vector(unsigned(zext_ln28_7_fu_443_p1) + unsigned(mul_ln28_fu_358_p2));
    add_ln28_3_fu_465_p2 <= std_logic_vector(unsigned(zext_ln28_1_fu_272_p1) + unsigned(zext_ln28_8_fu_461_p1));
    add_ln28_4_fu_595_p2 <= std_logic_vector(unsigned(zext_ln28_7_reg_991) + unsigned(mul_ln28_1_fu_493_p2));
    add_ln28_5_fu_612_p2 <= std_logic_vector(unsigned(zext_ln28_1_reg_959) + unsigned(zext_ln28_10_fu_608_p1));
    add_ln28_fu_390_p2 <= std_logic_vector(unsigned(zext_ln28_4_fu_386_p1) + unsigned(mul_ln28_fu_358_p2));
    add_ln35_1_fu_923_p2 <= std_logic_vector(unsigned(zext_ln28_fu_719_p1) + unsigned(zext_ln35_2_fu_919_p1));
    and_ln28_1_fu_694_p2 <= (or_ln28_2_fu_688_p2 and or_ln28_1_fu_670_p2);
    and_ln28_2_fu_700_p2 <= (grp_fu_213_p2 and and_ln28_1_fu_694_p2);
    and_ln28_3_fu_796_p2 <= (or_ln28_4_fu_790_p2 and or_ln28_3_fu_772_p2);
    and_ln28_4_fu_802_p2 <= (grp_fu_207_p2 and and_ln28_3_fu_796_p2);
    and_ln28_5_fu_888_p2 <= (or_ln28_6_fu_882_p2 and or_ln28_5_fu_864_p2);
    and_ln28_6_fu_894_p2 <= (grp_fu_213_p2 and and_ln28_5_fu_888_p2);
    and_ln28_7_fu_304_p2 <= (xor_ln28_fu_292_p2 and icmp_ln16_fu_298_p2);
    and_ln28_fu_580_p2 <= (or_ln28_fu_574_p2 and grp_fu_207_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_232_p2)
    begin
        if ((icmp_ln10_fu_232_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_200_p4_assign_proc : process(c_0_reg_196, icmp_ln10_reg_943, ap_CS_fsm_pp0_stage0, c_reg_1023, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_200_p4 <= c_reg_1023;
        else 
            ap_phi_mux_c_0_phi_fu_200_p4 <= c_0_reg_196;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_167_p4_assign_proc : process(f_0_reg_163, icmp_ln10_reg_943, ap_CS_fsm_pp0_stage0, select_ln28_5_reg_952, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_167_p4 <= select_ln28_5_reg_952;
        else 
            ap_phi_mux_f_0_phi_fu_167_p4 <= f_0_reg_163;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten23_phi_fu_156_p4_assign_proc : process(indvar_flatten23_reg_152, icmp_ln10_reg_943, ap_CS_fsm_pp0_stage0, add_ln10_reg_947, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten23_phi_fu_156_p4 <= add_ln10_reg_947;
        else 
            ap_phi_mux_indvar_flatten23_phi_fu_156_p4 <= indvar_flatten23_reg_152;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_178_p4_assign_proc : process(indvar_flatten_reg_174, icmp_ln10_reg_943, ap_CS_fsm_pp0_stage0, select_ln13_4_reg_1001, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_178_p4 <= select_ln13_4_reg_1001;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_178_p4 <= indvar_flatten_reg_174;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_189_p4_assign_proc : process(r_0_reg_185, icmp_ln10_reg_943, ap_CS_fsm_pp0_stage0, select_ln13_1_reg_970, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_189_p4 <= select_ln13_1_reg_970;
        else 
            ap_phi_mux_r_0_phi_fu_189_p4 <= r_0_reg_185;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_622_p1 <= conv_1_out_q1;
    bitcast_ln28_2_fu_640_p1 <= select_ln28_fu_586_p3;
    bitcast_ln28_3_fu_725_p1 <= conv_1_out_q0;
    bitcast_ln28_4_fu_743_p1 <= select_ln28_1_reg_1016;
    bitcast_ln28_5_fu_816_p1 <= conv_1_out_q1;
    bitcast_ln28_6_fu_834_p1 <= select_ln28_2_fu_808_p3;
    bitcast_ln28_fu_544_p1 <= conv_1_out_q0;
    c_fu_714_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln13_reg_964));

    conv_1_out_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln28_5_fu_432_p1, zext_ln28_6_fu_539_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_1_out_address0 <= zext_ln28_6_fu_539_p1(15 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_1_out_address0 <= zext_ln28_5_fu_432_p1(15 - 1 downto 0);
            else 
                conv_1_out_address0 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            conv_1_out_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln28_9_fu_471_p1, ap_block_pp0_stage1, zext_ln28_11_fu_617_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_1_out_address1 <= zext_ln28_11_fu_617_p1(15 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_1_out_address1 <= zext_ln28_9_fu_471_p1(15 - 1 downto 0);
            else 
                conv_1_out_address1 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            conv_1_out_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_1_out_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_244_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_f_0_phi_fu_167_p4));

    grp_fu_207_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, select_ln28_1_reg_1016, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_207_p1 <= select_ln28_1_reg_1016;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_207_p1 <= ap_const_lv32_800000;
        else 
            grp_fu_207_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_213_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, select_ln28_fu_586_p3, select_ln28_2_fu_808_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_213_p1 <= select_ln28_2_fu_808_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_213_p1 <= select_ln28_fu_586_p3;
        else 
            grp_fu_213_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_934_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_934_p1 <= grp_fu_934_p10(4 - 1 downto 0);
    grp_fu_934_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_1_reg_970),8));
    grp_fu_934_p2 <= grp_fu_934_p20(4 - 1 downto 0);
    grp_fu_934_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_reg_964),8));
    icmp_ln10_fu_232_p2 <= "1" when (ap_phi_mux_indvar_flatten23_phi_fu_156_p4 = ap_const_lv13_1520) else "0";
    icmp_ln13_fu_250_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_178_p4 = ap_const_lv8_A9) else "0";
    icmp_ln16_fu_298_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_200_p4 = ap_const_lv4_D) else "0";
    icmp_ln28_10_fu_852_p2 <= "0" when (tmp_10_fu_820_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_11_fu_858_p2 <= "1" when (trunc_ln28_7_fu_830_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_12_fu_870_p2 <= "0" when (tmp_11_fu_838_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_13_fu_876_p2 <= "1" when (trunc_ln28_8_fu_848_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_1_fu_568_p2 <= "1" when (trunc_ln28_2_fu_558_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_658_p2 <= "0" when (tmp_5_fu_626_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_664_p2 <= "1" when (trunc_ln28_3_fu_636_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_676_p2 <= "0" when (tmp_6_fu_644_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_682_p2 <= "1" when (trunc_ln28_4_fu_654_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_760_p2 <= "0" when (tmp_8_fu_729_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_766_p2 <= "1" when (trunc_ln28_5_fu_739_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_8_fu_778_p2 <= "0" when (tmp_9_fu_746_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_9_fu_784_p2 <= "1" when (trunc_ln28_6_fu_756_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_562_p2 <= "0" when (tmp_3_fu_548_p4 = ap_const_lv8_FF) else "1";
    max_pool_1_out_address0 <= zext_ln35_3_fu_929_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= 
        conv_1_out_q1 when (and_ln28_6_fu_894_p2(0) = '1') else 
        select_ln28_2_fu_808_p3;

    max_pool_1_out_we0_assign_proc : process(icmp_ln10_reg_943, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_943 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln28_1_fu_493_p1 <= mul_ln28_1_fu_493_p10(5 - 1 downto 0);
    mul_ln28_1_fu_493_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_3_reg_976),10));
    mul_ln28_1_fu_493_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln28_1_fu_493_p1), 10));
    mul_ln28_fu_358_p1 <= mul_ln28_fu_358_p10(5 - 1 downto 0);
    mul_ln28_fu_358_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_fu_346_p3),10));
    mul_ln28_fu_358_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln28_fu_358_p1), 10));
    or_ln13_fu_316_p2 <= (icmp_ln13_fu_250_p2 or and_ln28_7_fu_304_p2);
    or_ln25_1_fu_364_p2 <= (shl_ln25_mid1_fu_330_p3 or ap_const_lv5_1);
    or_ln25_fu_226_p2 <= (shl_ln_fu_218_p3 or ap_const_lv5_1);
    or_ln26_fu_437_p2 <= (shl_ln1_fu_378_p3 or ap_const_lv5_1);
    or_ln28_1_fu_670_p2 <= (icmp_ln28_3_fu_664_p2 or icmp_ln28_2_fu_658_p2);
    or_ln28_2_fu_688_p2 <= (icmp_ln28_5_fu_682_p2 or icmp_ln28_4_fu_676_p2);
    or_ln28_3_fu_772_p2 <= (icmp_ln28_7_fu_766_p2 or icmp_ln28_6_fu_760_p2);
    or_ln28_4_fu_790_p2 <= (icmp_ln28_9_fu_784_p2 or icmp_ln28_8_fu_778_p2);
    or_ln28_5_fu_864_p2 <= (icmp_ln28_11_fu_858_p2 or icmp_ln28_10_fu_852_p2);
    or_ln28_6_fu_882_p2 <= (icmp_ln28_13_fu_876_p2 or icmp_ln28_12_fu_870_p2);
    or_ln28_7_fu_408_p2 <= (tmp_1_fu_400_p3 or select_ln28_5_fu_264_p3);
    or_ln28_8_fu_516_p2 <= (tmp_14_fu_508_p3 or select_ln28_5_reg_952);
    or_ln28_fu_574_p2 <= (icmp_ln28_fu_562_p2 or icmp_ln28_1_fu_568_p2);
    r_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln28_4_fu_256_p3));
    select_ln13_1_fu_338_p3 <= 
        r_fu_310_p2 when (and_ln28_7_fu_304_p2(0) = '1') else 
        select_ln28_4_fu_256_p3;
    select_ln13_2_fu_346_p3 <= 
        shl_ln25_mid1_fu_330_p3 when (and_ln28_7_fu_304_p2(0) = '1') else 
        select_ln28_6_fu_276_p3;
    select_ln13_3_fu_370_p3 <= 
        or_ln25_1_fu_364_p2 when (and_ln28_7_fu_304_p2(0) = '1') else 
        select_ln28_7_fu_284_p3;
    select_ln13_4_fu_482_p3 <= 
        ap_const_lv8_1 when (icmp_ln13_fu_250_p2(0) = '1') else 
        add_ln13_fu_476_p2;
    select_ln13_fu_322_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_316_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_200_p4;
    select_ln28_1_fu_706_p3 <= 
        conv_1_out_q1 when (and_ln28_2_fu_700_p2(0) = '1') else 
        select_ln28_fu_586_p3;
    select_ln28_2_fu_808_p3 <= 
        conv_1_out_q0 when (and_ln28_4_fu_802_p2(0) = '1') else 
        select_ln28_1_reg_1016;
    select_ln28_4_fu_256_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_250_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_189_p4;
    select_ln28_5_fu_264_p3 <= 
        f_fu_244_p2 when (icmp_ln13_fu_250_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_167_p4;
    select_ln28_6_fu_276_p3 <= 
        ap_const_lv5_0 when (icmp_ln13_fu_250_p2(0) = '1') else 
        shl_ln_fu_218_p3;
    select_ln28_7_fu_284_p3 <= 
        ap_const_lv5_1 when (icmp_ln13_fu_250_p2(0) = '1') else 
        or_ln25_fu_226_p2;
    select_ln28_fu_586_p3 <= 
        conv_1_out_q0 when (and_ln28_fu_580_p2(0) = '1') else 
        ap_const_lv32_800000;
    shl_ln1_fu_378_p3 <= (select_ln13_fu_322_p3 & ap_const_lv1_0);
    shl_ln25_mid1_fu_330_p3 <= (r_fu_310_p2 & ap_const_lv1_0);
    shl_ln_fu_218_p3 <= (ap_phi_mux_r_0_phi_fu_189_p4 & ap_const_lv1_0);
    tmp_10_fu_820_p4 <= bitcast_ln28_5_fu_816_p1(30 downto 23);
    tmp_11_fu_838_p4 <= bitcast_ln28_6_fu_834_p1(30 downto 23);
    tmp_13_fu_424_p3 <= (tmp_fu_414_p4 & or_ln28_7_fu_408_p2);
    tmp_14_fu_508_p3 <= (trunc_ln28_1_fu_504_p1 & ap_const_lv5_0);
    tmp_15_fu_521_p4 <= add_ln28_1_fu_499_p2(9 downto 1);
    tmp_16_fu_531_p3 <= (tmp_15_fu_521_p4 & or_ln28_8_fu_516_p2);
    tmp_17_fu_453_p3 <= (add_ln28_2_fu_447_p2 & ap_const_lv5_0);
    tmp_18_fu_600_p3 <= (add_ln28_4_fu_595_p2 & ap_const_lv5_0);
    tmp_19_fu_912_p3 <= (grp_fu_934_p3 & ap_const_lv5_0);
    tmp_1_fu_400_p3 <= (trunc_ln28_fu_396_p1 & ap_const_lv5_0);
    tmp_3_fu_548_p4 <= bitcast_ln28_fu_544_p1(30 downto 23);
    tmp_5_fu_626_p4 <= bitcast_ln28_1_fu_622_p1(30 downto 23);
    tmp_6_fu_644_p4 <= bitcast_ln28_2_fu_640_p1(30 downto 23);
    tmp_8_fu_729_p4 <= bitcast_ln28_3_fu_725_p1(30 downto 23);
    tmp_9_fu_746_p4 <= bitcast_ln28_4_fu_743_p1(30 downto 23);
    tmp_fu_414_p4 <= add_ln28_fu_390_p2(9 downto 1);
    trunc_ln28_1_fu_504_p1 <= add_ln28_1_fu_499_p2(1 - 1 downto 0);
    trunc_ln28_2_fu_558_p1 <= bitcast_ln28_fu_544_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_636_p1 <= bitcast_ln28_1_fu_622_p1(23 - 1 downto 0);
    trunc_ln28_4_fu_654_p1 <= bitcast_ln28_2_fu_640_p1(23 - 1 downto 0);
    trunc_ln28_5_fu_739_p1 <= bitcast_ln28_3_fu_725_p1(23 - 1 downto 0);
    trunc_ln28_6_fu_756_p1 <= bitcast_ln28_4_fu_743_p1(23 - 1 downto 0);
    trunc_ln28_7_fu_830_p1 <= bitcast_ln28_5_fu_816_p1(23 - 1 downto 0);
    trunc_ln28_8_fu_848_p1 <= bitcast_ln28_6_fu_834_p1(23 - 1 downto 0);
    trunc_ln28_fu_396_p1 <= add_ln28_fu_390_p2(1 - 1 downto 0);
    xor_ln28_fu_292_p2 <= (icmp_ln13_fu_250_p2 xor ap_const_lv1_1);
    zext_ln28_10_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_600_p3),16));
    zext_ln28_11_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_5_fu_612_p2),64));
    zext_ln28_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_5_fu_264_p3),16));
    zext_ln28_4_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_378_p3),10));
    zext_ln28_5_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_424_p3),64));
    zext_ln28_6_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_531_p3),64));
    zext_ln28_7_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_437_p2),10));
    zext_ln28_8_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_453_p3),16));
    zext_ln28_9_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_fu_465_p2),64));
    zext_ln28_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_5_reg_952),14));
    zext_ln35_2_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_912_p3),14));
    zext_ln35_3_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_923_p2),64));
end behav;
