// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=20.184000,HLS_SYN_LAT=33345,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=242,HLS_SYN_LUT=998,HLS_VERSION=2019_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        conv_1_out_address1,
        conv_1_out_ce1,
        conv_1_out_q1,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [14:0] conv_1_out_address1;
output   conv_1_out_ce1;
input  [31:0] conv_1_out_q1;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_ce0;
reg conv_1_out_ce1;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] f_fu_218_p2;
reg   [5:0] f_reg_616;
wire    ap_CS_fsm_state2;
wire   [15:0] zext_ln13_fu_224_p1;
reg   [15:0] zext_ln13_reg_621;
wire   [0:0] icmp_ln10_fu_212_p2;
wire   [13:0] zext_ln13_1_fu_228_p1;
reg   [13:0] zext_ln13_1_reg_626;
wire   [7:0] add_ln13_fu_232_p2;
reg   [7:0] add_ln13_reg_631;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_244_p2;
reg   [3:0] r_reg_639;
wire   [4:0] shl_ln_fu_250_p3;
reg   [4:0] shl_ln_reg_644;
wire   [0:0] icmp_ln13_fu_238_p2;
wire   [3:0] c_fu_264_p2;
reg   [3:0] c_reg_652;
wire    ap_CS_fsm_state4;
wire   [9:0] zext_ln26_fu_278_p1;
reg   [9:0] zext_ln26_reg_657;
wire   [0:0] icmp_ln16_fu_258_p2;
wire   [9:0] zext_ln20_1_fu_288_p1;
reg   [9:0] zext_ln20_1_reg_662;
wire   [1:0] mpr_fu_302_p2;
reg   [1:0] mpr_reg_670;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln20_fu_296_p2;
wire   [31:0] select_ln28_1_fu_605_p3;
wire    ap_CS_fsm_state6;
reg   [5:0] f_0_reg_130;
reg   [3:0] r_0_reg_142;
reg   [7:0] phi_mul_reg_153;
reg   [3:0] c_0_reg_165;
reg   [31:0] max_0_reg_177;
reg   [1:0] mpr_0_reg_190;
wire   [63:0] zext_ln28_1_fu_364_p1;
wire   [63:0] zext_ln28_3_fu_391_p1;
wire   [63:0] zext_ln35_2_fu_423_p1;
wire   [31:0] select_ln28_fu_512_p3;
wire   [4:0] shl_ln1_fu_270_p3;
wire   [4:0] or_ln26_fu_282_p2;
wire   [4:0] zext_ln20_fu_292_p1;
wire   [4:0] i_fu_308_p2;
wire   [4:0] mul_ln28_fu_317_p1;
wire   [9:0] mul_ln28_fu_317_p2;
wire   [9:0] add_ln28_fu_323_p2;
wire   [0:0] trunc_ln28_fu_328_p1;
wire   [5:0] tmp_s_fu_332_p3;
wire   [8:0] tmp_10_fu_346_p4;
wire   [5:0] or_ln28_4_fu_340_p2;
wire   [14:0] tmp_11_fu_356_p3;
wire   [9:0] add_ln28_1_fu_369_p2;
wire   [14:0] tmp_12_fu_374_p3;
wire   [15:0] zext_ln28_2_fu_382_p1;
wire   [15:0] add_ln28_2_fu_386_p2;
wire   [7:0] zext_ln35_fu_396_p1;
wire   [7:0] add_ln35_fu_400_p2;
wire   [12:0] tmp_9_fu_406_p3;
wire   [13:0] zext_ln35_1_fu_414_p1;
wire   [13:0] add_ln35_1_fu_418_p2;
wire   [31:0] bitcast_ln28_fu_428_p1;
wire   [31:0] bitcast_ln28_1_fu_446_p1;
wire   [7:0] tmp_1_fu_432_p4;
wire   [22:0] trunc_ln28_1_fu_442_p1;
wire   [0:0] icmp_ln28_1_fu_470_p2;
wire   [0:0] icmp_ln28_fu_464_p2;
wire   [7:0] tmp_4_fu_450_p4;
wire   [22:0] trunc_ln28_2_fu_460_p1;
wire   [0:0] icmp_ln28_3_fu_488_p2;
wire   [0:0] icmp_ln28_2_fu_482_p2;
wire   [0:0] or_ln28_fu_476_p2;
wire   [0:0] or_ln28_1_fu_494_p2;
wire   [0:0] and_ln28_fu_500_p2;
wire   [0:0] tmp_5_fu_201_p2;
wire   [0:0] and_ln28_1_fu_506_p2;
wire   [31:0] bitcast_ln28_2_fu_521_p1;
wire   [31:0] bitcast_ln28_3_fu_539_p1;
wire   [7:0] tmp_6_fu_525_p4;
wire   [22:0] trunc_ln28_3_fu_535_p1;
wire   [0:0] icmp_ln28_5_fu_563_p2;
wire   [0:0] icmp_ln28_4_fu_557_p2;
wire   [7:0] tmp_7_fu_543_p4;
wire   [22:0] trunc_ln28_4_fu_553_p1;
wire   [0:0] icmp_ln28_7_fu_581_p2;
wire   [0:0] icmp_ln28_6_fu_575_p2;
wire   [0:0] or_ln28_2_fu_569_p2;
wire   [0:0] or_ln28_3_fu_587_p2;
wire   [0:0] and_ln28_2_fu_593_p2;
wire   [0:0] tmp_8_fu_207_p2;
wire   [0:0] and_ln28_3_fu_599_p2;
reg   [5:0] ap_NS_fsm;
wire   [9:0] mul_ln28_fu_317_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(max_0_reg_177),
    .opcode(5'd2),
    .dout(tmp_5_fu_201_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(conv_1_out_q1),
    .din1(select_ln28_fu_512_p3),
    .opcode(5'd2),
    .dout(tmp_8_fu_207_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_reg_165 <= c_reg_652;
    end else if (((icmp_ln13_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_165 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_130 <= f_reg_616;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_130 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_0_reg_177 <= select_ln28_1_fu_605_p3;
    end else if (((icmp_ln16_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_177 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpr_0_reg_190 <= mpr_reg_670;
    end else if (((icmp_ln16_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_190 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_153 <= add_ln13_reg_631;
    end else if (((icmp_ln10_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_153 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_142 <= r_reg_639;
    end else if (((icmp_ln10_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_142 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_631 <= add_ln13_fu_232_p2;
        r_reg_639 <= r_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_652 <= c_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_616 <= f_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_670 <= mpr_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_644[4 : 1] <= shl_ln_fu_250_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_626[5 : 0] <= zext_ln13_1_fu_228_p1[5 : 0];
        zext_ln13_reg_621[5 : 0] <= zext_ln13_fu_224_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln20_1_reg_662[4 : 1] <= zext_ln20_1_fu_288_p1[4 : 1];
        zext_ln26_reg_657[4 : 1] <= zext_ln26_fu_278_p1[4 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_ce1 = 1'b1;
    end else begin
        conv_1_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln20_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_232_p2 = (phi_mul_reg_153 + 8'd13);

assign add_ln28_1_fu_369_p2 = (zext_ln20_1_reg_662 + mul_ln28_fu_317_p2);

assign add_ln28_2_fu_386_p2 = (zext_ln13_reg_621 + zext_ln28_2_fu_382_p1);

assign add_ln28_fu_323_p2 = (zext_ln26_reg_657 + mul_ln28_fu_317_p2);

assign add_ln35_1_fu_418_p2 = (zext_ln35_1_fu_414_p1 + zext_ln13_1_reg_626);

assign add_ln35_fu_400_p2 = (phi_mul_reg_153 + zext_ln35_fu_396_p1);

assign and_ln28_1_fu_506_p2 = (tmp_5_fu_201_p2 & and_ln28_fu_500_p2);

assign and_ln28_2_fu_593_p2 = (or_ln28_3_fu_587_p2 & or_ln28_2_fu_569_p2);

assign and_ln28_3_fu_599_p2 = (tmp_8_fu_207_p2 & and_ln28_2_fu_593_p2);

assign and_ln28_fu_500_p2 = (or_ln28_fu_476_p2 & or_ln28_1_fu_494_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign bitcast_ln28_1_fu_446_p1 = max_0_reg_177;

assign bitcast_ln28_2_fu_521_p1 = conv_1_out_q1;

assign bitcast_ln28_3_fu_539_p1 = select_ln28_fu_512_p3;

assign bitcast_ln28_fu_428_p1 = conv_1_out_q0;

assign c_fu_264_p2 = (c_0_reg_165 + 4'd1);

assign conv_1_out_address0 = zext_ln28_1_fu_364_p1;

assign conv_1_out_address1 = zext_ln28_3_fu_391_p1;

assign f_fu_218_p2 = (f_0_reg_130 + 6'd1);

assign i_fu_308_p2 = (shl_ln_reg_644 + zext_ln20_fu_292_p1);

assign icmp_ln10_fu_212_p2 = ((f_0_reg_130 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_238_p2 = ((r_0_reg_142 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_258_p2 = ((c_0_reg_165 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_296_p2 = ((mpr_0_reg_190 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_470_p2 = ((trunc_ln28_1_fu_442_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_482_p2 = ((tmp_4_fu_450_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_488_p2 = ((trunc_ln28_2_fu_460_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_557_p2 = ((tmp_6_fu_525_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_563_p2 = ((trunc_ln28_3_fu_535_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_575_p2 = ((tmp_7_fu_543_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_581_p2 = ((trunc_ln28_4_fu_553_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_464_p2 = ((tmp_1_fu_432_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_2_fu_423_p1;

assign max_pool_1_out_d0 = max_0_reg_177;

assign mpr_fu_302_p2 = (mpr_0_reg_190 + 2'd1);

assign mul_ln28_fu_317_p1 = mul_ln28_fu_317_p10;

assign mul_ln28_fu_317_p10 = i_fu_308_p2;

assign mul_ln28_fu_317_p2 = (10'd26 * mul_ln28_fu_317_p1);

assign or_ln26_fu_282_p2 = (shl_ln1_fu_270_p3 | 5'd1);

assign or_ln28_1_fu_494_p2 = (icmp_ln28_3_fu_488_p2 | icmp_ln28_2_fu_482_p2);

assign or_ln28_2_fu_569_p2 = (icmp_ln28_5_fu_563_p2 | icmp_ln28_4_fu_557_p2);

assign or_ln28_3_fu_587_p2 = (icmp_ln28_7_fu_581_p2 | icmp_ln28_6_fu_575_p2);

assign or_ln28_4_fu_340_p2 = (tmp_s_fu_332_p3 | f_0_reg_130);

assign or_ln28_fu_476_p2 = (icmp_ln28_fu_464_p2 | icmp_ln28_1_fu_470_p2);

assign r_fu_244_p2 = (r_0_reg_142 + 4'd1);

assign select_ln28_1_fu_605_p3 = ((and_ln28_3_fu_599_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_fu_512_p3);

assign select_ln28_fu_512_p3 = ((and_ln28_1_fu_506_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_0_reg_177);

assign shl_ln1_fu_270_p3 = {{c_0_reg_165}, {1'd0}};

assign shl_ln_fu_250_p3 = {{r_0_reg_142}, {1'd0}};

assign tmp_10_fu_346_p4 = {{add_ln28_fu_323_p2[9:1]}};

assign tmp_11_fu_356_p3 = {{tmp_10_fu_346_p4}, {or_ln28_4_fu_340_p2}};

assign tmp_12_fu_374_p3 = {{add_ln28_1_fu_369_p2}, {5'd0}};

assign tmp_1_fu_432_p4 = {{bitcast_ln28_fu_428_p1[30:23]}};

assign tmp_4_fu_450_p4 = {{bitcast_ln28_1_fu_446_p1[30:23]}};

assign tmp_6_fu_525_p4 = {{bitcast_ln28_2_fu_521_p1[30:23]}};

assign tmp_7_fu_543_p4 = {{bitcast_ln28_3_fu_539_p1[30:23]}};

assign tmp_9_fu_406_p3 = {{add_ln35_fu_400_p2}, {5'd0}};

assign tmp_s_fu_332_p3 = {{trunc_ln28_fu_328_p1}, {5'd0}};

assign trunc_ln28_1_fu_442_p1 = bitcast_ln28_fu_428_p1[22:0];

assign trunc_ln28_2_fu_460_p1 = bitcast_ln28_1_fu_446_p1[22:0];

assign trunc_ln28_3_fu_535_p1 = bitcast_ln28_2_fu_521_p1[22:0];

assign trunc_ln28_4_fu_553_p1 = bitcast_ln28_3_fu_539_p1[22:0];

assign trunc_ln28_fu_328_p1 = add_ln28_fu_323_p2[0:0];

assign zext_ln13_1_fu_228_p1 = f_0_reg_130;

assign zext_ln13_fu_224_p1 = f_0_reg_130;

assign zext_ln20_1_fu_288_p1 = or_ln26_fu_282_p2;

assign zext_ln20_fu_292_p1 = mpr_0_reg_190;

assign zext_ln26_fu_278_p1 = shl_ln1_fu_270_p3;

assign zext_ln28_1_fu_364_p1 = tmp_11_fu_356_p3;

assign zext_ln28_2_fu_382_p1 = tmp_12_fu_374_p3;

assign zext_ln28_3_fu_391_p1 = add_ln28_2_fu_386_p2;

assign zext_ln35_1_fu_414_p1 = tmp_9_fu_406_p3;

assign zext_ln35_2_fu_423_p1 = add_ln35_1_fu_418_p2;

assign zext_ln35_fu_396_p1 = c_0_reg_165;

always @ (posedge ap_clk) begin
    zext_ln13_reg_621[15:6] <= 10'b0000000000;
    zext_ln13_1_reg_626[13:6] <= 8'b00000000;
    shl_ln_reg_644[0] <= 1'b0;
    zext_ln26_reg_657[0] <= 1'b0;
    zext_ln26_reg_657[9:5] <= 5'b00000;
    zext_ln20_1_reg_662[0] <= 1'b1;
    zext_ln20_1_reg_662[9:5] <= 5'b00000;
end

endmodule //max_pool_1
