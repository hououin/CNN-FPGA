-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_0_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv_1_out_0_ce0 : OUT STD_LOGIC;
    conv_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_0_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv_1_out_0_ce1 : OUT STD_LOGIC;
    conv_1_out_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv_1_out_1_ce0 : OUT STD_LOGIC;
    conv_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv_1_out_1_ce1 : OUT STD_LOGIC;
    conv_1_out_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=31.903000,HLS_SYN_LAT=5411,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=390,HLS_SYN_LUT=1657,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv13_1520 : STD_LOGIC_VECTOR (12 downto 0) := "1010100100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_163 : STD_LOGIC_VECTOR (12 downto 0);
    signal f_0_reg_174 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_185 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_196 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_207 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln10_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_823_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_245_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_5_fu_271_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln28_5_reg_832 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln28_5_reg_832_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_fu_309_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_reg_839 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_reg_839_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_fu_317_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_844 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_844_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_2_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_2_reg_850 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln28_1_fu_404_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln28_1_reg_860 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_fu_410_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_fu_422_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln28_fu_475_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_reg_880 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_178_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_200_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_5_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_5_fu_809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln28_1_fu_595_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_fu_687_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln13_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_251_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln16_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_4_fu_263_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln28_7_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_297_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln28_fu_329_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_335_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_1_fu_343_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln28_fu_329_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln28_fu_347_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln28_fu_353_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_357_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_371_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln28_7_fu_365_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_381_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln26_fu_394_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_3_fu_400_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln13_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln28_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_437_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_447_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_483_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_1_fu_430_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_4_fu_490_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln28_2_fu_494_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal bitcast_ln28_1_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_2_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_516_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_526_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_533_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_543_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_3_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_4_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_607_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_4_fu_617_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_625_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_5_fu_635_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_9_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_8_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_4_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_5_fu_696_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_6_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_700_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_6_fu_710_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_11_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_10_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_718_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_7_fu_728_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_13_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_12_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_5_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_6_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_5_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_6_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_814_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_792_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_fu_506_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_4_fu_799_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_1_fu_803_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_814_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_814_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_814_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_814_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_814_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_fu_329_p10 : STD_LOGIC_VECTOR (8 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component max_pool_1_mac_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_0_q0,
        din1 => ap_const_lv32_800000,
        opcode => ap_const_lv5_2,
        dout => tmp_4_fu_218_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_0_q1,
        din1 => select_ln28_reg_880,
        opcode => ap_const_lv5_2,
        dout => tmp_7_fu_224_p2);

    max_pool_1_fcmp_3bkb_U3 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_1_q0,
        din1 => select_ln28_1_fu_595_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_s_fu_229_p2);

    max_pool_1_fcmp_3bkb_U4 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_1_q1,
        din1 => select_ln28_2_fu_687_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_12_fu_234_p2);

    max_pool_1_mac_mucud_U5 : component max_pool_1_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_814_p0,
        din1 => grp_fu_814_p1,
        din2 => grp_fu_814_p2,
        dout => grp_fu_814_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_239_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_0_reg_207 <= c_fu_410_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_207 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_174 <= select_ln28_5_reg_832;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_174 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_239_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_163 <= add_ln10_fu_245_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_163 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_239_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_185 <= select_ln13_fu_422_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_185 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_196 <= select_ln35_1_reg_844;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_196 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln28_1_reg_860 <= add_ln28_1_fu_404_p2;
                select_ln35_reg_839 <= select_ln35_fu_309_p3;
                    zext_ln28_2_reg_850(13 downto 0) <= zext_ln28_2_fu_389_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_823 <= icmp_ln10_fu_239_p2;
                icmp_ln10_reg_823_pp0_iter1_reg <= icmp_ln10_reg_823;
                select_ln28_5_reg_832_pp0_iter1_reg <= select_ln28_5_reg_832;
                select_ln35_1_reg_844_pp0_iter1_reg <= select_ln35_1_reg_844;
                select_ln35_reg_839_pp0_iter1_reg <= select_ln35_reg_839;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_239_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln28_5_reg_832 <= select_ln28_5_fu_271_p3;
                select_ln35_1_reg_844 <= select_ln35_1_fu_317_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln28_reg_880 <= select_ln28_fu_475_p3;
            end if;
        end if;
    end process;
    zext_ln28_2_reg_850(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_239_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_239_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln10_fu_239_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_245_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_163) + unsigned(ap_const_lv13_1));
    add_ln13_fu_416_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten_reg_185));
    add_ln28_1_fu_404_p2 <= std_logic_vector(unsigned(zext_ln28_3_fu_400_p1) + unsigned(mul_ln28_fu_329_p2));
    add_ln28_2_fu_494_p2 <= std_logic_vector(unsigned(zext_ln35_1_fu_430_p1) + unsigned(zext_ln28_4_fu_490_p1));
    add_ln28_fu_347_p2 <= std_logic_vector(unsigned(zext_ln28_1_fu_343_p1) + unsigned(mul_ln28_fu_329_p2));
    add_ln35_1_fu_803_p2 <= std_logic_vector(unsigned(zext_ln35_fu_506_p1) + unsigned(zext_ln35_4_fu_799_p1));
    and_ln28_1_fu_583_p2 <= (or_ln28_2_fu_577_p2 and or_ln28_1_fu_559_p2);
    and_ln28_2_fu_589_p2 <= (tmp_7_fu_224_p2 and and_ln28_1_fu_583_p2);
    and_ln28_3_fu_675_p2 <= (or_ln28_4_fu_669_p2 and or_ln28_3_fu_651_p2);
    and_ln28_4_fu_681_p2 <= (tmp_s_fu_229_p2 and and_ln28_3_fu_675_p2);
    and_ln28_5_fu_768_p2 <= (or_ln28_6_fu_762_p2 and or_ln28_5_fu_744_p2);
    and_ln28_6_fu_774_p2 <= (tmp_12_fu_234_p2 and and_ln28_5_fu_768_p2);
    and_ln28_7_fu_291_p2 <= (xor_ln28_fu_279_p2 and icmp_ln16_fu_285_p2);
    and_ln28_fu_469_p2 <= (tmp_4_fu_218_p2 and or_ln28_fu_463_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_239_p2)
    begin
        if ((icmp_ln10_fu_239_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_178_p4_assign_proc : process(f_0_reg_174, icmp_ln10_reg_823, ap_CS_fsm_pp0_stage0, select_ln28_5_reg_832, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_178_p4 <= select_ln28_5_reg_832;
        else 
            ap_phi_mux_f_0_phi_fu_178_p4 <= f_0_reg_174;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_200_p4_assign_proc : process(r_0_reg_196, icmp_ln10_reg_823, ap_CS_fsm_pp0_stage0, select_ln35_1_reg_844, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_200_p4 <= select_ln35_1_reg_844;
        else 
            ap_phi_mux_r_0_phi_fu_200_p4 <= r_0_reg_196;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_512_p1 <= conv_1_out_0_q1;
    bitcast_ln28_2_fu_530_p1 <= select_ln28_reg_880;
    bitcast_ln28_3_fu_603_p1 <= conv_1_out_1_q0;
    bitcast_ln28_4_fu_621_p1 <= select_ln28_1_fu_595_p3;
    bitcast_ln28_5_fu_696_p1 <= conv_1_out_1_q1;
    bitcast_ln28_6_fu_714_p1 <= select_ln28_2_fu_687_p3;
    bitcast_ln28_fu_433_p1 <= conv_1_out_0_q0;
    c_fu_410_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln35_fu_309_p3));
    conv_1_out_0_address0 <= zext_ln28_2_fu_389_p1(14 - 1 downto 0);
    conv_1_out_0_address1 <= zext_ln28_5_fu_500_p1(14 - 1 downto 0);

    conv_1_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_0_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_1_address0 <= zext_ln28_2_reg_850(14 - 1 downto 0);
    conv_1_out_1_address1 <= zext_ln28_5_fu_500_p1(14 - 1 downto 0);

    conv_1_out_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_1_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_f_0_phi_fu_178_p4));
    grp_fu_814_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_814_p1 <= grp_fu_814_p10(4 - 1 downto 0);
    grp_fu_814_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_reg_844_pp0_iter1_reg),8));
    grp_fu_814_p2 <= grp_fu_814_p20(4 - 1 downto 0);
    grp_fu_814_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_reg_839_pp0_iter1_reg),8));
    icmp_ln10_fu_239_p2 <= "1" when (indvar_flatten13_reg_163 = ap_const_lv13_1520) else "0";
    icmp_ln13_fu_257_p2 <= "1" when (indvar_flatten_reg_185 = ap_const_lv8_A9) else "0";
    icmp_ln16_fu_285_p2 <= "1" when (c_0_reg_207 = ap_const_lv4_D) else "0";
    icmp_ln28_10_fu_732_p2 <= "0" when (tmp_10_fu_700_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_11_fu_738_p2 <= "1" when (trunc_ln28_6_fu_710_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_12_fu_750_p2 <= "0" when (tmp_11_fu_718_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_13_fu_756_p2 <= "1" when (trunc_ln28_7_fu_728_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_1_fu_457_p2 <= "1" when (trunc_ln28_1_fu_447_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_547_p2 <= "0" when (tmp_5_fu_516_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_553_p2 <= "1" when (trunc_ln28_2_fu_526_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_565_p2 <= "0" when (tmp_6_fu_533_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_571_p2 <= "1" when (trunc_ln28_3_fu_543_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_639_p2 <= "0" when (tmp_8_fu_607_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_645_p2 <= "1" when (trunc_ln28_4_fu_617_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_8_fu_657_p2 <= "0" when (tmp_9_fu_625_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_9_fu_663_p2 <= "1" when (trunc_ln28_5_fu_635_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_451_p2 <= "0" when (tmp_3_fu_437_p4 = ap_const_lv8_FF) else "1";
    max_pool_1_out_address0 <= zext_ln35_5_fu_809_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= 
        conv_1_out_1_q1 when (and_ln28_6_fu_774_p2(0) = '1') else 
        select_ln28_2_fu_687_p3;

    max_pool_1_out_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln10_reg_823_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln10_reg_823_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln28_fu_329_p1 <= mul_ln28_fu_329_p10(4 - 1 downto 0);
    mul_ln28_fu_329_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_317_p3),9));
    mul_ln28_fu_329_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv9_1A) * unsigned(mul_ln28_fu_329_p1), 9));
    or_ln26_fu_394_p2 <= (shl_ln_fu_335_p3 or ap_const_lv5_1);
    or_ln28_1_fu_559_p2 <= (icmp_ln28_3_fu_553_p2 or icmp_ln28_2_fu_547_p2);
    or_ln28_2_fu_577_p2 <= (icmp_ln28_5_fu_571_p2 or icmp_ln28_4_fu_565_p2);
    or_ln28_3_fu_651_p2 <= (icmp_ln28_7_fu_645_p2 or icmp_ln28_6_fu_639_p2);
    or_ln28_4_fu_669_p2 <= (icmp_ln28_9_fu_663_p2 or icmp_ln28_8_fu_657_p2);
    or_ln28_5_fu_744_p2 <= (icmp_ln28_11_fu_738_p2 or icmp_ln28_10_fu_732_p2);
    or_ln28_6_fu_762_p2 <= (icmp_ln28_13_fu_756_p2 or icmp_ln28_12_fu_750_p2);
    or_ln28_7_fu_365_p2 <= (tmp_1_fu_357_p3 or select_ln28_5_fu_271_p3);
    or_ln28_fu_463_p2 <= (icmp_ln28_fu_451_p2 or icmp_ln28_1_fu_457_p2);
    or_ln35_fu_303_p2 <= (icmp_ln13_fu_257_p2 or and_ln28_7_fu_291_p2);
    r_fu_297_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln28_4_fu_263_p3));
    select_ln13_fu_422_p3 <= 
        ap_const_lv8_1 when (icmp_ln13_fu_257_p2(0) = '1') else 
        add_ln13_fu_416_p2;
    select_ln28_1_fu_595_p3 <= 
        conv_1_out_0_q1 when (and_ln28_2_fu_589_p2(0) = '1') else 
        select_ln28_reg_880;
    select_ln28_2_fu_687_p3 <= 
        conv_1_out_1_q0 when (and_ln28_4_fu_681_p2(0) = '1') else 
        select_ln28_1_fu_595_p3;
    select_ln28_4_fu_263_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_257_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_200_p4;
    select_ln28_5_fu_271_p3 <= 
        f_fu_251_p2 when (icmp_ln13_fu_257_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_178_p4;
    select_ln28_fu_475_p3 <= 
        conv_1_out_0_q0 when (and_ln28_fu_469_p2(0) = '1') else 
        ap_const_lv32_800000;
    select_ln35_1_fu_317_p3 <= 
        r_fu_297_p2 when (and_ln28_7_fu_291_p2(0) = '1') else 
        select_ln28_4_fu_263_p3;
    select_ln35_fu_309_p3 <= 
        ap_const_lv4_0 when (or_ln35_fu_303_p2(0) = '1') else 
        c_0_reg_207;
    shl_ln_fu_335_p3 <= (select_ln35_fu_309_p3 & ap_const_lv1_0);
    tmp_10_fu_700_p4 <= bitcast_ln28_5_fu_696_p1(30 downto 23);
    tmp_11_fu_718_p4 <= bitcast_ln28_6_fu_714_p1(30 downto 23);
    tmp_13_fu_381_p3 <= (tmp_fu_371_p4 & or_ln28_7_fu_365_p2);
    tmp_14_fu_483_p3 <= (add_ln28_1_reg_860 & ap_const_lv5_0);
    tmp_15_fu_792_p3 <= (grp_fu_814_p3 & ap_const_lv5_0);
    tmp_1_fu_357_p3 <= (trunc_ln28_fu_353_p1 & ap_const_lv5_0);
    tmp_3_fu_437_p4 <= bitcast_ln28_fu_433_p1(30 downto 23);
    tmp_5_fu_516_p4 <= bitcast_ln28_1_fu_512_p1(30 downto 23);
    tmp_6_fu_533_p4 <= bitcast_ln28_2_fu_530_p1(30 downto 23);
    tmp_8_fu_607_p4 <= bitcast_ln28_3_fu_603_p1(30 downto 23);
    tmp_9_fu_625_p4 <= bitcast_ln28_4_fu_621_p1(30 downto 23);
    tmp_fu_371_p4 <= add_ln28_fu_347_p2(8 downto 1);
    trunc_ln28_1_fu_447_p1 <= bitcast_ln28_fu_433_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_526_p1 <= bitcast_ln28_1_fu_512_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_543_p1 <= bitcast_ln28_2_fu_530_p1(23 - 1 downto 0);
    trunc_ln28_4_fu_617_p1 <= bitcast_ln28_3_fu_603_p1(23 - 1 downto 0);
    trunc_ln28_5_fu_635_p1 <= bitcast_ln28_4_fu_621_p1(23 - 1 downto 0);
    trunc_ln28_6_fu_710_p1 <= bitcast_ln28_5_fu_696_p1(23 - 1 downto 0);
    trunc_ln28_7_fu_728_p1 <= bitcast_ln28_6_fu_714_p1(23 - 1 downto 0);
    trunc_ln28_fu_353_p1 <= add_ln28_fu_347_p2(1 - 1 downto 0);
    xor_ln28_fu_279_p2 <= (icmp_ln13_fu_257_p2 xor ap_const_lv1_1);
    zext_ln28_1_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_335_p3),9));
    zext_ln28_2_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_381_p3),64));
    zext_ln28_3_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_394_p2),9));
    zext_ln28_4_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_483_p3),15));
    zext_ln28_5_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_fu_494_p2),64));
    zext_ln35_1_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_5_reg_832),15));
    zext_ln35_4_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_792_p3),14));
    zext_ln35_5_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_803_p2),64));
    zext_ln35_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_5_reg_832_pp0_iter1_reg),14));
end behav;
