// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=20.184000,HLS_SYN_LAT=27937,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=243,HLS_SYN_LUT=1017,HLS_VERSION=2019_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        conv_1_out_address1,
        conv_1_out_ce1,
        conv_1_out_q1,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [14:0] conv_1_out_address1;
output   conv_1_out_ce1;
input  [31:0] conv_1_out_q1;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_ce0;
reg conv_1_out_ce1;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] max_0_reg_185;
reg   [1:0] mpr_0_reg_198;
wire   [5:0] f_fu_226_p2;
reg   [5:0] f_reg_624;
wire    ap_CS_fsm_state2;
wire   [15:0] zext_ln13_fu_232_p1;
reg   [15:0] zext_ln13_reg_629;
wire   [0:0] icmp_ln10_fu_220_p2;
wire   [13:0] zext_ln13_1_fu_236_p1;
reg   [13:0] zext_ln13_1_reg_634;
wire   [7:0] add_ln13_fu_240_p2;
reg   [7:0] add_ln13_reg_639;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_252_p2;
reg   [3:0] r_reg_647;
wire   [4:0] shl_ln_fu_258_p3;
reg   [4:0] shl_ln_reg_652;
wire   [0:0] icmp_ln13_fu_246_p2;
wire   [0:0] icmp_ln16_fu_266_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] c_fu_272_p2;
reg   [3:0] c_reg_661;
wire   [9:0] zext_ln26_fu_286_p1;
reg   [9:0] zext_ln26_reg_666;
wire   [9:0] zext_ln20_1_fu_296_p1;
reg   [9:0] zext_ln20_1_reg_671;
wire   [0:0] icmp_ln20_fu_300_p2;
reg   [0:0] icmp_ln20_reg_676;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] mpr_fu_306_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] select_ln28_1_fu_581_p3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg   [5:0] f_0_reg_138;
reg   [3:0] r_0_reg_150;
reg   [7:0] phi_mul_reg_161;
reg   [3:0] c_0_reg_173;
wire    ap_CS_fsm_state7;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_1_fu_372_p1;
wire   [63:0] zext_ln28_3_fu_399_p1;
wire   [63:0] zext_ln35_2_fu_616_p1;
wire   [31:0] select_ln28_fu_488_p3;
wire   [4:0] shl_ln1_fu_278_p3;
wire   [4:0] or_ln26_fu_290_p2;
wire   [4:0] zext_ln20_fu_312_p1;
wire   [4:0] i_fu_316_p2;
wire   [4:0] mul_ln28_fu_325_p1;
wire   [9:0] mul_ln28_fu_325_p2;
wire   [9:0] add_ln28_fu_331_p2;
wire   [0:0] trunc_ln28_fu_336_p1;
wire   [5:0] tmp_s_fu_340_p3;
wire   [8:0] tmp_11_fu_354_p4;
wire   [5:0] or_ln28_4_fu_348_p2;
wire   [14:0] tmp_12_fu_364_p3;
wire   [9:0] add_ln28_1_fu_377_p2;
wire   [14:0] tmp_13_fu_382_p3;
wire   [15:0] zext_ln28_2_fu_390_p1;
wire   [15:0] add_ln28_2_fu_394_p2;
wire   [31:0] bitcast_ln28_fu_404_p1;
wire   [31:0] bitcast_ln28_1_fu_422_p1;
wire   [7:0] tmp_1_fu_408_p4;
wire   [22:0] trunc_ln28_1_fu_418_p1;
wire   [0:0] icmp_ln28_1_fu_446_p2;
wire   [0:0] icmp_ln28_fu_440_p2;
wire   [7:0] tmp_5_fu_426_p4;
wire   [22:0] trunc_ln28_2_fu_436_p1;
wire   [0:0] icmp_ln28_3_fu_464_p2;
wire   [0:0] icmp_ln28_2_fu_458_p2;
wire   [0:0] or_ln28_fu_452_p2;
wire   [0:0] or_ln28_1_fu_470_p2;
wire   [0:0] and_ln28_fu_476_p2;
wire   [0:0] tmp_6_fu_209_p2;
wire   [0:0] and_ln28_1_fu_482_p2;
wire   [31:0] bitcast_ln28_2_fu_497_p1;
wire   [31:0] bitcast_ln28_3_fu_515_p1;
wire   [7:0] tmp_7_fu_501_p4;
wire   [22:0] trunc_ln28_3_fu_511_p1;
wire   [0:0] icmp_ln28_5_fu_539_p2;
wire   [0:0] icmp_ln28_4_fu_533_p2;
wire   [7:0] tmp_8_fu_519_p4;
wire   [22:0] trunc_ln28_4_fu_529_p1;
wire   [0:0] icmp_ln28_7_fu_557_p2;
wire   [0:0] icmp_ln28_6_fu_551_p2;
wire   [0:0] or_ln28_2_fu_545_p2;
wire   [0:0] or_ln28_3_fu_563_p2;
wire   [0:0] and_ln28_2_fu_569_p2;
wire   [0:0] tmp_9_fu_215_p2;
wire   [0:0] and_ln28_3_fu_575_p2;
wire   [7:0] zext_ln35_fu_589_p1;
wire   [7:0] add_ln35_fu_593_p2;
wire   [12:0] tmp_10_fu_599_p3;
wire   [13:0] zext_ln35_1_fu_607_p1;
wire   [13:0] add_ln35_1_fu_611_p2;
wire    ap_block_pp0_stage0_00001;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] mul_ln28_fu_325_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(max_0_reg_185),
    .opcode(5'd2),
    .dout(tmp_6_fu_209_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(conv_1_out_q1),
    .din1(select_ln28_fu_488_p3),
    .opcode(5'd2),
    .dout(tmp_9_fu_215_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln16_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln16_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_0_reg_173 <= c_reg_661;
    end else if (((icmp_ln13_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_173 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_138 <= f_reg_624;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_138 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_676 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_0_reg_185 <= select_ln28_1_fu_581_p3;
    end else if (((icmp_ln16_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_185 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mpr_0_reg_198 <= mpr_fu_306_p2;
    end else if (((icmp_ln16_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_198 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_161 <= add_ln13_reg_639;
    end else if (((icmp_ln10_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_161 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_150 <= r_reg_647;
    end else if (((icmp_ln10_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_150 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_639 <= add_ln13_fu_240_p2;
        r_reg_647 <= r_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_661 <= c_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_624 <= f_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln20_reg_676 <= icmp_ln20_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_652[4 : 1] <= shl_ln_fu_258_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_634[5 : 0] <= zext_ln13_1_fu_236_p1[5 : 0];
        zext_ln13_reg_629[5 : 0] <= zext_ln13_fu_232_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln20_1_reg_671[4 : 1] <= zext_ln20_1_fu_296_p1[4 : 1];
        zext_ln26_reg_666[4 : 1] <= zext_ln26_fu_286_p1[4 : 1];
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_300_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_out_ce1 = 1'b1;
    end else begin
        conv_1_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln20_fu_300_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln20_fu_300_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_240_p2 = (phi_mul_reg_161 + 8'd13);

assign add_ln28_1_fu_377_p2 = (zext_ln20_1_reg_671 + mul_ln28_fu_325_p2);

assign add_ln28_2_fu_394_p2 = (zext_ln13_reg_629 + zext_ln28_2_fu_390_p1);

assign add_ln28_fu_331_p2 = (zext_ln26_reg_666 + mul_ln28_fu_325_p2);

assign add_ln35_1_fu_611_p2 = (zext_ln35_1_fu_607_p1 + zext_ln13_1_reg_634);

assign add_ln35_fu_593_p2 = (phi_mul_reg_161 + zext_ln35_fu_589_p1);

assign and_ln28_1_fu_482_p2 = (tmp_6_fu_209_p2 & and_ln28_fu_476_p2);

assign and_ln28_2_fu_569_p2 = (or_ln28_3_fu_563_p2 & or_ln28_2_fu_545_p2);

assign and_ln28_3_fu_575_p2 = (tmp_9_fu_215_p2 & and_ln28_2_fu_569_p2);

assign and_ln28_fu_476_p2 = (or_ln28_fu_452_p2 & or_ln28_1_fu_470_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_422_p1 = max_0_reg_185;

assign bitcast_ln28_2_fu_497_p1 = conv_1_out_q1;

assign bitcast_ln28_3_fu_515_p1 = select_ln28_fu_488_p3;

assign bitcast_ln28_fu_404_p1 = conv_1_out_q0;

assign c_fu_272_p2 = (c_0_reg_173 + 4'd1);

assign conv_1_out_address0 = zext_ln28_1_fu_372_p1;

assign conv_1_out_address1 = zext_ln28_3_fu_399_p1;

assign f_fu_226_p2 = (f_0_reg_138 + 6'd1);

assign i_fu_316_p2 = (shl_ln_reg_652 + zext_ln20_fu_312_p1);

assign icmp_ln10_fu_220_p2 = ((f_0_reg_138 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_246_p2 = ((r_0_reg_150 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_266_p2 = ((c_0_reg_173 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_300_p2 = ((mpr_0_reg_198 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_446_p2 = ((trunc_ln28_1_fu_418_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_458_p2 = ((tmp_5_fu_426_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_464_p2 = ((trunc_ln28_2_fu_436_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_533_p2 = ((tmp_7_fu_501_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_539_p2 = ((trunc_ln28_3_fu_511_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_551_p2 = ((tmp_8_fu_519_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_557_p2 = ((trunc_ln28_4_fu_529_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_440_p2 = ((tmp_1_fu_408_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_2_fu_616_p1;

assign max_pool_1_out_d0 = max_0_reg_185;

assign mpr_fu_306_p2 = (mpr_0_reg_198 + 2'd1);

assign mul_ln28_fu_325_p1 = mul_ln28_fu_325_p10;

assign mul_ln28_fu_325_p10 = i_fu_316_p2;

assign mul_ln28_fu_325_p2 = (10'd26 * mul_ln28_fu_325_p1);

assign or_ln26_fu_290_p2 = (shl_ln1_fu_278_p3 | 5'd1);

assign or_ln28_1_fu_470_p2 = (icmp_ln28_3_fu_464_p2 | icmp_ln28_2_fu_458_p2);

assign or_ln28_2_fu_545_p2 = (icmp_ln28_5_fu_539_p2 | icmp_ln28_4_fu_533_p2);

assign or_ln28_3_fu_563_p2 = (icmp_ln28_7_fu_557_p2 | icmp_ln28_6_fu_551_p2);

assign or_ln28_4_fu_348_p2 = (tmp_s_fu_340_p3 | f_0_reg_138);

assign or_ln28_fu_452_p2 = (icmp_ln28_fu_440_p2 | icmp_ln28_1_fu_446_p2);

assign r_fu_252_p2 = (r_0_reg_150 + 4'd1);

assign select_ln28_1_fu_581_p3 = ((and_ln28_3_fu_575_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_fu_488_p3);

assign select_ln28_fu_488_p3 = ((and_ln28_1_fu_482_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_0_reg_185);

assign shl_ln1_fu_278_p3 = {{c_0_reg_173}, {1'd0}};

assign shl_ln_fu_258_p3 = {{r_0_reg_150}, {1'd0}};

assign tmp_10_fu_599_p3 = {{add_ln35_fu_593_p2}, {5'd0}};

assign tmp_11_fu_354_p4 = {{add_ln28_fu_331_p2[9:1]}};

assign tmp_12_fu_364_p3 = {{tmp_11_fu_354_p4}, {or_ln28_4_fu_348_p2}};

assign tmp_13_fu_382_p3 = {{add_ln28_1_fu_377_p2}, {5'd0}};

assign tmp_1_fu_408_p4 = {{bitcast_ln28_fu_404_p1[30:23]}};

assign tmp_5_fu_426_p4 = {{bitcast_ln28_1_fu_422_p1[30:23]}};

assign tmp_7_fu_501_p4 = {{bitcast_ln28_2_fu_497_p1[30:23]}};

assign tmp_8_fu_519_p4 = {{bitcast_ln28_3_fu_515_p1[30:23]}};

assign tmp_s_fu_340_p3 = {{trunc_ln28_fu_336_p1}, {5'd0}};

assign trunc_ln28_1_fu_418_p1 = bitcast_ln28_fu_404_p1[22:0];

assign trunc_ln28_2_fu_436_p1 = bitcast_ln28_1_fu_422_p1[22:0];

assign trunc_ln28_3_fu_511_p1 = bitcast_ln28_2_fu_497_p1[22:0];

assign trunc_ln28_4_fu_529_p1 = bitcast_ln28_3_fu_515_p1[22:0];

assign trunc_ln28_fu_336_p1 = add_ln28_fu_331_p2[0:0];

assign zext_ln13_1_fu_236_p1 = f_0_reg_138;

assign zext_ln13_fu_232_p1 = f_0_reg_138;

assign zext_ln20_1_fu_296_p1 = or_ln26_fu_290_p2;

assign zext_ln20_fu_312_p1 = mpr_0_reg_198;

assign zext_ln26_fu_286_p1 = shl_ln1_fu_278_p3;

assign zext_ln28_1_fu_372_p1 = tmp_12_fu_364_p3;

assign zext_ln28_2_fu_390_p1 = tmp_13_fu_382_p3;

assign zext_ln28_3_fu_399_p1 = add_ln28_2_fu_394_p2;

assign zext_ln35_1_fu_607_p1 = tmp_10_fu_599_p3;

assign zext_ln35_2_fu_616_p1 = add_ln35_1_fu_611_p2;

assign zext_ln35_fu_589_p1 = c_0_reg_173;

always @ (posedge ap_clk) begin
    zext_ln13_reg_629[15:6] <= 10'b0000000000;
    zext_ln13_1_reg_634[13:6] <= 8'b00000000;
    shl_ln_reg_652[0] <= 1'b0;
    zext_ln26_reg_666[0] <= 1'b0;
    zext_ln26_reg_666[9:5] <= 5'b00000;
    zext_ln20_1_reg_671[0] <= 1'b1;
    zext_ln20_1_reg_671[9:5] <= 5'b00000;
end

endmodule //max_pool_1
