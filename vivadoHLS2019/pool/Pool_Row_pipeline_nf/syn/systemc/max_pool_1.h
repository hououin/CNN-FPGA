// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_1_HH_
#define _max_pool_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "max_pool_1_fcmp_3bkb.h"

namespace ap_rtl {

struct max_pool_1 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<15> > conv_1_out_address0;
    sc_out< sc_logic > conv_1_out_ce0;
    sc_in< sc_lv<32> > conv_1_out_q0;
    sc_out< sc_lv<15> > conv_1_out_address1;
    sc_out< sc_logic > conv_1_out_ce1;
    sc_in< sc_lv<32> > conv_1_out_q1;
    sc_out< sc_lv<13> > max_pool_1_out_address0;
    sc_out< sc_logic > max_pool_1_out_ce0;
    sc_out< sc_logic > max_pool_1_out_we0;
    sc_out< sc_lv<32> > max_pool_1_out_d0;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    max_pool_1(sc_module_name name);
    SC_HAS_PROCESS(max_pool_1);

    ~max_pool_1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    max_pool_1_fcmp_3bkb<1,1,32,32,1>* max_pool_1_fcmp_3bkb_U1;
    max_pool_1_fcmp_3bkb<1,1,32,32,1>* max_pool_1_fcmp_3bkb_U2;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > max_0_reg_185;
    sc_signal< sc_lv<2> > mpr_0_reg_198;
    sc_signal< sc_lv<6> > f_fu_226_p2;
    sc_signal< sc_lv<6> > f_reg_624;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<16> > zext_ln13_fu_232_p1;
    sc_signal< sc_lv<16> > zext_ln13_reg_629;
    sc_signal< sc_lv<1> > icmp_ln10_fu_220_p2;
    sc_signal< sc_lv<14> > zext_ln13_1_fu_236_p1;
    sc_signal< sc_lv<14> > zext_ln13_1_reg_634;
    sc_signal< sc_lv<8> > add_ln13_fu_240_p2;
    sc_signal< sc_lv<8> > add_ln13_reg_639;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > r_fu_252_p2;
    sc_signal< sc_lv<4> > r_reg_647;
    sc_signal< sc_lv<5> > shl_ln_fu_258_p3;
    sc_signal< sc_lv<5> > shl_ln_reg_652;
    sc_signal< sc_lv<1> > icmp_ln13_fu_246_p2;
    sc_signal< sc_lv<1> > icmp_ln16_fu_266_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > c_fu_272_p2;
    sc_signal< sc_lv<4> > c_reg_661;
    sc_signal< sc_lv<10> > zext_ln26_fu_286_p1;
    sc_signal< sc_lv<10> > zext_ln26_reg_666;
    sc_signal< sc_lv<10> > zext_ln20_1_fu_296_p1;
    sc_signal< sc_lv<10> > zext_ln20_1_reg_671;
    sc_signal< sc_lv<1> > icmp_ln20_fu_300_p2;
    sc_signal< sc_lv<1> > icmp_ln20_reg_676;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > mpr_fu_306_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > select_ln28_1_fu_581_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state5;
    sc_signal< sc_lv<6> > f_0_reg_138;
    sc_signal< sc_lv<4> > r_0_reg_150;
    sc_signal< sc_lv<8> > phi_mul_reg_161;
    sc_signal< sc_lv<4> > c_0_reg_173;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln28_1_fu_372_p1;
    sc_signal< sc_lv<64> > zext_ln28_3_fu_399_p1;
    sc_signal< sc_lv<64> > zext_ln35_2_fu_616_p1;
    sc_signal< sc_lv<32> > select_ln28_fu_488_p3;
    sc_signal< sc_lv<5> > shl_ln1_fu_278_p3;
    sc_signal< sc_lv<5> > or_ln26_fu_290_p2;
    sc_signal< sc_lv<5> > zext_ln20_fu_312_p1;
    sc_signal< sc_lv<5> > i_fu_316_p2;
    sc_signal< sc_lv<5> > mul_ln28_fu_325_p1;
    sc_signal< sc_lv<10> > mul_ln28_fu_325_p2;
    sc_signal< sc_lv<10> > add_ln28_fu_331_p2;
    sc_signal< sc_lv<1> > trunc_ln28_fu_336_p1;
    sc_signal< sc_lv<6> > tmp_s_fu_340_p3;
    sc_signal< sc_lv<9> > tmp_11_fu_354_p4;
    sc_signal< sc_lv<6> > or_ln28_4_fu_348_p2;
    sc_signal< sc_lv<15> > tmp_12_fu_364_p3;
    sc_signal< sc_lv<10> > add_ln28_1_fu_377_p2;
    sc_signal< sc_lv<15> > tmp_13_fu_382_p3;
    sc_signal< sc_lv<16> > zext_ln28_2_fu_390_p1;
    sc_signal< sc_lv<16> > add_ln28_2_fu_394_p2;
    sc_signal< sc_lv<32> > bitcast_ln28_fu_404_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_1_fu_422_p1;
    sc_signal< sc_lv<8> > tmp_1_fu_408_p4;
    sc_signal< sc_lv<23> > trunc_ln28_1_fu_418_p1;
    sc_signal< sc_lv<1> > icmp_ln28_1_fu_446_p2;
    sc_signal< sc_lv<1> > icmp_ln28_fu_440_p2;
    sc_signal< sc_lv<8> > tmp_5_fu_426_p4;
    sc_signal< sc_lv<23> > trunc_ln28_2_fu_436_p1;
    sc_signal< sc_lv<1> > icmp_ln28_3_fu_464_p2;
    sc_signal< sc_lv<1> > icmp_ln28_2_fu_458_p2;
    sc_signal< sc_lv<1> > or_ln28_fu_452_p2;
    sc_signal< sc_lv<1> > or_ln28_1_fu_470_p2;
    sc_signal< sc_lv<1> > and_ln28_fu_476_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_209_p2;
    sc_signal< sc_lv<1> > and_ln28_1_fu_482_p2;
    sc_signal< sc_lv<32> > bitcast_ln28_2_fu_497_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_3_fu_515_p1;
    sc_signal< sc_lv<8> > tmp_7_fu_501_p4;
    sc_signal< sc_lv<23> > trunc_ln28_3_fu_511_p1;
    sc_signal< sc_lv<1> > icmp_ln28_5_fu_539_p2;
    sc_signal< sc_lv<1> > icmp_ln28_4_fu_533_p2;
    sc_signal< sc_lv<8> > tmp_8_fu_519_p4;
    sc_signal< sc_lv<23> > trunc_ln28_4_fu_529_p1;
    sc_signal< sc_lv<1> > icmp_ln28_7_fu_557_p2;
    sc_signal< sc_lv<1> > icmp_ln28_6_fu_551_p2;
    sc_signal< sc_lv<1> > or_ln28_2_fu_545_p2;
    sc_signal< sc_lv<1> > or_ln28_3_fu_563_p2;
    sc_signal< sc_lv<1> > and_ln28_2_fu_569_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_215_p2;
    sc_signal< sc_lv<1> > and_ln28_3_fu_575_p2;
    sc_signal< sc_lv<8> > zext_ln35_fu_589_p1;
    sc_signal< sc_lv<8> > add_ln35_fu_593_p2;
    sc_signal< sc_lv<13> > tmp_10_fu_599_p3;
    sc_signal< sc_lv<14> > zext_ln35_1_fu_607_p1;
    sc_signal< sc_lv<14> > add_ln35_1_fu_611_p2;
    sc_signal< bool > ap_block_pp0_stage0_00001;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<10> > mul_ln28_fu_325_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_800000;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<8> ap_const_lv8_D;
    static const sc_lv<4> ap_const_lv4_D;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<10> ap_const_lv10_1A;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln13_fu_240_p2();
    void thread_add_ln28_1_fu_377_p2();
    void thread_add_ln28_2_fu_394_p2();
    void thread_add_ln28_fu_331_p2();
    void thread_add_ln35_1_fu_611_p2();
    void thread_add_ln35_fu_593_p2();
    void thread_and_ln28_1_fu_482_p2();
    void thread_and_ln28_2_fu_569_p2();
    void thread_and_ln28_3_fu_575_p2();
    void thread_and_ln28_fu_476_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_00001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state5_pp0_stage0_iter0();
    void thread_ap_block_state6_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state5();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_bitcast_ln28_1_fu_422_p1();
    void thread_bitcast_ln28_2_fu_497_p1();
    void thread_bitcast_ln28_3_fu_515_p1();
    void thread_bitcast_ln28_fu_404_p1();
    void thread_c_fu_272_p2();
    void thread_conv_1_out_address0();
    void thread_conv_1_out_address1();
    void thread_conv_1_out_ce0();
    void thread_conv_1_out_ce1();
    void thread_f_fu_226_p2();
    void thread_i_fu_316_p2();
    void thread_icmp_ln10_fu_220_p2();
    void thread_icmp_ln13_fu_246_p2();
    void thread_icmp_ln16_fu_266_p2();
    void thread_icmp_ln20_fu_300_p2();
    void thread_icmp_ln28_1_fu_446_p2();
    void thread_icmp_ln28_2_fu_458_p2();
    void thread_icmp_ln28_3_fu_464_p2();
    void thread_icmp_ln28_4_fu_533_p2();
    void thread_icmp_ln28_5_fu_539_p2();
    void thread_icmp_ln28_6_fu_551_p2();
    void thread_icmp_ln28_7_fu_557_p2();
    void thread_icmp_ln28_fu_440_p2();
    void thread_max_pool_1_out_address0();
    void thread_max_pool_1_out_ce0();
    void thread_max_pool_1_out_d0();
    void thread_max_pool_1_out_we0();
    void thread_mpr_fu_306_p2();
    void thread_mul_ln28_fu_325_p1();
    void thread_mul_ln28_fu_325_p10();
    void thread_mul_ln28_fu_325_p2();
    void thread_or_ln26_fu_290_p2();
    void thread_or_ln28_1_fu_470_p2();
    void thread_or_ln28_2_fu_545_p2();
    void thread_or_ln28_3_fu_563_p2();
    void thread_or_ln28_4_fu_348_p2();
    void thread_or_ln28_fu_452_p2();
    void thread_r_fu_252_p2();
    void thread_select_ln28_1_fu_581_p3();
    void thread_select_ln28_fu_488_p3();
    void thread_shl_ln1_fu_278_p3();
    void thread_shl_ln_fu_258_p3();
    void thread_tmp_10_fu_599_p3();
    void thread_tmp_11_fu_354_p4();
    void thread_tmp_12_fu_364_p3();
    void thread_tmp_13_fu_382_p3();
    void thread_tmp_1_fu_408_p4();
    void thread_tmp_5_fu_426_p4();
    void thread_tmp_7_fu_501_p4();
    void thread_tmp_8_fu_519_p4();
    void thread_tmp_s_fu_340_p3();
    void thread_trunc_ln28_1_fu_418_p1();
    void thread_trunc_ln28_2_fu_436_p1();
    void thread_trunc_ln28_3_fu_511_p1();
    void thread_trunc_ln28_4_fu_529_p1();
    void thread_trunc_ln28_fu_336_p1();
    void thread_zext_ln13_1_fu_236_p1();
    void thread_zext_ln13_fu_232_p1();
    void thread_zext_ln20_1_fu_296_p1();
    void thread_zext_ln20_fu_312_p1();
    void thread_zext_ln26_fu_286_p1();
    void thread_zext_ln28_1_fu_372_p1();
    void thread_zext_ln28_2_fu_390_p1();
    void thread_zext_ln28_3_fu_399_p1();
    void thread_zext_ln35_1_fu_607_p1();
    void thread_zext_ln35_2_fu_616_p1();
    void thread_zext_ln35_fu_589_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
