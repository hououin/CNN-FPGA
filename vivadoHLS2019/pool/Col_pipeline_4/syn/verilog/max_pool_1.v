// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=31.903000,HLS_SYN_LAT=5411,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=397,HLS_SYN_LUT=1650,HLS_VERSION=2019_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_0_address1,
        conv_1_out_0_ce1,
        conv_1_out_0_q1,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_1_address1,
        conv_1_out_1_ce1,
        conv_1_out_1_q1,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [13:0] conv_1_out_0_address1;
output   conv_1_out_0_ce1;
input  [31:0] conv_1_out_0_q1;
output  [13:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [13:0] conv_1_out_1_address1;
output   conv_1_out_1_ce1;
input  [31:0] conv_1_out_1_q1;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_0_ce0;
reg conv_1_out_0_ce1;
reg conv_1_out_1_ce0;
reg conv_1_out_1_ce1;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] indvar_flatten23_reg_155;
reg   [5:0] f_0_reg_166;
reg   [7:0] indvar_flatten_reg_177;
reg   [3:0] r_0_reg_188;
reg   [3:0] c_0_reg_199;
wire   [0:0] icmp_ln10_fu_245_p2;
reg   [0:0] icmp_ln10_reg_842;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_842_pp0_iter1_reg;
wire   [12:0] add_ln10_fu_251_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] select_ln28_5_fu_277_p3;
reg   [5:0] select_ln28_5_reg_851;
reg   [5:0] select_ln28_5_reg_851_pp0_iter1_reg;
wire   [3:0] select_ln13_fu_335_p3;
reg   [3:0] select_ln13_reg_857;
reg   [3:0] select_ln13_reg_857_pp0_iter1_reg;
wire   [3:0] select_ln13_1_fu_351_p3;
reg   [3:0] select_ln13_1_reg_862;
reg   [3:0] select_ln13_1_reg_862_pp0_iter1_reg;
wire   [63:0] zext_ln28_7_fu_410_p1;
reg   [63:0] zext_ln28_7_reg_868;
wire   [14:0] add_ln28_3_fu_426_p2;
reg   [14:0] add_ln28_3_reg_878;
wire   [3:0] c_fu_432_p2;
wire   [7:0] select_ln13_4_fu_444_p3;
wire   [31:0] select_ln28_fu_499_p3;
reg   [31:0] select_ln28_reg_908;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [5:0] ap_phi_mux_f_0_phi_fu_170_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_r_0_phi_fu_192_p4;
wire   [63:0] zext_ln28_9_fu_452_p1;
wire   [63:0] zext_ln35_2_fu_533_p1;
wire   [31:0] select_ln28_1_fu_621_p3;
wire   [31:0] select_ln28_2_fu_713_p3;
wire   [4:0] shl_ln_fu_231_p3;
wire   [0:0] icmp_ln13_fu_263_p2;
wire   [5:0] f_fu_257_p2;
wire   [4:0] or_ln25_fu_239_p2;
wire   [0:0] icmp_ln16_fu_311_p2;
wire   [0:0] xor_ln28_fu_305_p2;
wire   [3:0] select_ln28_4_fu_269_p3;
wire   [0:0] and_ln28_7_fu_317_p2;
wire   [0:0] or_ln13_fu_329_p2;
wire   [3:0] r_fu_323_p2;
wire   [4:0] shl_ln25_mid1_fu_343_p3;
wire   [4:0] select_ln28_6_fu_289_p3;
wire   [4:0] select_ln13_2_fu_359_p3;
wire   [4:0] or_ln25_1_fu_371_p2;
wire   [4:0] select_ln28_7_fu_297_p3;
wire   [4:0] select_ln13_3_fu_377_p3;
wire   [8:0] grp_fu_815_p3;
wire   [13:0] tmp_fu_393_p3;
wire   [14:0] zext_ln28_1_fu_285_p1;
wire   [14:0] zext_ln28_6_fu_400_p1;
wire   [14:0] add_ln28_1_fu_404_p2;
wire   [8:0] grp_fu_824_p3;
wire   [13:0] tmp_1_fu_415_p3;
wire   [14:0] zext_ln28_8_fu_422_p1;
wire   [7:0] add_ln13_fu_438_p2;
wire   [31:0] bitcast_ln28_fu_457_p1;
wire   [7:0] tmp_3_fu_461_p4;
wire   [22:0] trunc_ln28_fu_471_p1;
wire   [0:0] icmp_ln28_1_fu_481_p2;
wire   [0:0] icmp_ln28_fu_475_p2;
wire   [0:0] or_ln28_fu_487_p2;
wire   [0:0] tmp_4_fu_210_p2;
wire   [0:0] and_ln28_fu_493_p2;
wire   [7:0] grp_fu_833_p3;
wire   [12:0] tmp_13_fu_516_p3;
wire   [13:0] zext_ln28_fu_507_p1;
wire   [13:0] zext_ln35_1_fu_523_p1;
wire   [13:0] add_ln35_1_fu_527_p2;
wire   [31:0] bitcast_ln28_1_fu_538_p1;
wire   [31:0] bitcast_ln28_2_fu_556_p1;
wire   [7:0] tmp_5_fu_542_p4;
wire   [22:0] trunc_ln28_1_fu_552_p1;
wire   [0:0] icmp_ln28_3_fu_579_p2;
wire   [0:0] icmp_ln28_2_fu_573_p2;
wire   [7:0] tmp_6_fu_559_p4;
wire   [22:0] trunc_ln28_2_fu_569_p1;
wire   [0:0] icmp_ln28_5_fu_597_p2;
wire   [0:0] icmp_ln28_4_fu_591_p2;
wire   [0:0] or_ln28_1_fu_585_p2;
wire   [0:0] or_ln28_2_fu_603_p2;
wire   [0:0] and_ln28_1_fu_609_p2;
wire   [0:0] tmp_7_fu_216_p2;
wire   [0:0] and_ln28_2_fu_615_p2;
wire   [31:0] bitcast_ln28_3_fu_629_p1;
wire   [31:0] bitcast_ln28_4_fu_647_p1;
wire   [7:0] tmp_8_fu_633_p4;
wire   [22:0] trunc_ln28_3_fu_643_p1;
wire   [0:0] icmp_ln28_7_fu_671_p2;
wire   [0:0] icmp_ln28_6_fu_665_p2;
wire   [7:0] tmp_9_fu_651_p4;
wire   [22:0] trunc_ln28_4_fu_661_p1;
wire   [0:0] icmp_ln28_9_fu_689_p2;
wire   [0:0] icmp_ln28_8_fu_683_p2;
wire   [0:0] or_ln28_3_fu_677_p2;
wire   [0:0] or_ln28_4_fu_695_p2;
wire   [0:0] and_ln28_3_fu_701_p2;
wire   [0:0] tmp_s_fu_221_p2;
wire   [0:0] and_ln28_4_fu_707_p2;
wire   [31:0] bitcast_ln28_5_fu_722_p1;
wire   [31:0] bitcast_ln28_6_fu_740_p1;
wire   [7:0] tmp_10_fu_726_p4;
wire   [22:0] trunc_ln28_5_fu_736_p1;
wire   [0:0] icmp_ln28_11_fu_764_p2;
wire   [0:0] icmp_ln28_10_fu_758_p2;
wire   [7:0] tmp_11_fu_744_p4;
wire   [22:0] trunc_ln28_6_fu_754_p1;
wire   [0:0] icmp_ln28_13_fu_782_p2;
wire   [0:0] icmp_ln28_12_fu_776_p2;
wire   [0:0] or_ln28_5_fu_770_p2;
wire   [0:0] or_ln28_6_fu_788_p2;
wire   [0:0] and_ln28_5_fu_794_p2;
wire   [0:0] tmp_12_fu_226_p2;
wire   [0:0] and_ln28_6_fu_800_p2;
wire   [4:0] grp_fu_815_p0;
wire   [4:0] grp_fu_815_p1;
wire   [3:0] grp_fu_815_p2;
wire   [8:0] zext_ln28_5_fu_389_p1;
wire   [4:0] grp_fu_824_p0;
wire   [4:0] grp_fu_824_p1;
wire   [3:0] grp_fu_824_p2;
wire   [4:0] grp_fu_833_p0;
wire   [3:0] grp_fu_833_p1;
wire   [3:0] grp_fu_833_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [8:0] grp_fu_815_p10;
wire   [8:0] grp_fu_824_p10;
wire   [7:0] grp_fu_833_p10;
wire   [7:0] grp_fu_833_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_0_q0),
    .din1(32'd8388608),
    .opcode(5'd2),
    .dout(tmp_4_fu_210_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(conv_1_out_1_q0),
    .din1(select_ln28_reg_908),
    .opcode(5'd2),
    .dout(tmp_7_fu_216_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U3(
    .din0(conv_1_out_0_q1),
    .din1(select_ln28_1_fu_621_p3),
    .opcode(5'd2),
    .dout(tmp_s_fu_221_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U4(
    .din0(conv_1_out_1_q1),
    .din1(select_ln28_2_fu_713_p3),
    .opcode(5'd2),
    .dout(tmp_12_fu_226_p2)
);

max_pool_1_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
max_pool_1_mac_mucud_U5(
    .din0(grp_fu_815_p0),
    .din1(grp_fu_815_p1),
    .din2(grp_fu_815_p2),
    .dout(grp_fu_815_p3)
);

max_pool_1_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
max_pool_1_mac_mucud_U6(
    .din0(grp_fu_824_p0),
    .din1(grp_fu_824_p1),
    .din2(grp_fu_824_p2),
    .dout(grp_fu_824_p3)
);

max_pool_1_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
max_pool_1_mac_mudEe_U7(
    .din0(grp_fu_833_p0),
    .din1(grp_fu_833_p1),
    .din2(grp_fu_833_p2),
    .dout(grp_fu_833_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_245_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_reg_199 <= c_fu_432_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_199 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_166 <= select_ln28_5_reg_851;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_166 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_245_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten23_reg_155 <= add_ln10_fu_251_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten23_reg_155 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_245_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_177 <= select_ln13_4_fu_444_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_177 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_188 <= select_ln13_1_reg_862;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_188 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln28_3_reg_878 <= add_ln28_3_fu_426_p2;
        select_ln13_reg_857 <= select_ln13_fu_335_p3;
        zext_ln28_7_reg_868[14 : 0] <= zext_ln28_7_fu_410_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_842 <= icmp_ln10_fu_245_p2;
        icmp_ln10_reg_842_pp0_iter1_reg <= icmp_ln10_reg_842;
        select_ln13_1_reg_862_pp0_iter1_reg <= select_ln13_1_reg_862;
        select_ln13_reg_857_pp0_iter1_reg <= select_ln13_reg_857;
        select_ln28_5_reg_851_pp0_iter1_reg <= select_ln28_5_reg_851;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_245_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln13_1_reg_862 <= select_ln13_1_fu_351_p3;
        select_ln28_5_reg_851 <= select_ln28_5_fu_277_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln28_reg_908 <= select_ln28_fu_499_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_245_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_170_p4 = select_ln28_5_reg_851;
    end else begin
        ap_phi_mux_f_0_phi_fu_170_p4 = f_0_reg_166;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_192_p4 = select_ln13_1_reg_862;
    end else begin
        ap_phi_mux_r_0_phi_fu_192_p4 = r_0_reg_188;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_0_ce1 = 1'b1;
    end else begin
        conv_1_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_1_ce1 = 1'b1;
    end else begin
        conv_1_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_842_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_245_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln10_fu_245_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_251_p2 = (indvar_flatten23_reg_155 + 13'd1);

assign add_ln13_fu_438_p2 = (8'd1 + indvar_flatten_reg_177);

assign add_ln28_1_fu_404_p2 = (zext_ln28_1_fu_285_p1 + zext_ln28_6_fu_400_p1);

assign add_ln28_3_fu_426_p2 = (zext_ln28_1_fu_285_p1 + zext_ln28_8_fu_422_p1);

assign add_ln35_1_fu_527_p2 = (zext_ln28_fu_507_p1 + zext_ln35_1_fu_523_p1);

assign and_ln28_1_fu_609_p2 = (or_ln28_2_fu_603_p2 & or_ln28_1_fu_585_p2);

assign and_ln28_2_fu_615_p2 = (tmp_7_fu_216_p2 & and_ln28_1_fu_609_p2);

assign and_ln28_3_fu_701_p2 = (or_ln28_4_fu_695_p2 & or_ln28_3_fu_677_p2);

assign and_ln28_4_fu_707_p2 = (tmp_s_fu_221_p2 & and_ln28_3_fu_701_p2);

assign and_ln28_5_fu_794_p2 = (or_ln28_6_fu_788_p2 & or_ln28_5_fu_770_p2);

assign and_ln28_6_fu_800_p2 = (tmp_12_fu_226_p2 & and_ln28_5_fu_794_p2);

assign and_ln28_7_fu_317_p2 = (xor_ln28_fu_305_p2 & icmp_ln16_fu_311_p2);

assign and_ln28_fu_493_p2 = (tmp_4_fu_210_p2 & or_ln28_fu_487_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_538_p1 = conv_1_out_1_q0;

assign bitcast_ln28_2_fu_556_p1 = select_ln28_reg_908;

assign bitcast_ln28_3_fu_629_p1 = conv_1_out_0_q1;

assign bitcast_ln28_4_fu_647_p1 = select_ln28_1_fu_621_p3;

assign bitcast_ln28_5_fu_722_p1 = conv_1_out_1_q1;

assign bitcast_ln28_6_fu_740_p1 = select_ln28_2_fu_713_p3;

assign bitcast_ln28_fu_457_p1 = conv_1_out_0_q0;

assign c_fu_432_p2 = (4'd1 + select_ln13_fu_335_p3);

assign conv_1_out_0_address0 = zext_ln28_7_fu_410_p1;

assign conv_1_out_0_address1 = zext_ln28_9_fu_452_p1;

assign conv_1_out_1_address0 = zext_ln28_7_reg_868;

assign conv_1_out_1_address1 = zext_ln28_9_fu_452_p1;

assign f_fu_257_p2 = (6'd1 + ap_phi_mux_f_0_phi_fu_170_p4);

assign grp_fu_815_p0 = 9'd13;

assign grp_fu_815_p1 = grp_fu_815_p10;

assign grp_fu_815_p10 = select_ln13_2_fu_359_p3;

assign grp_fu_815_p2 = zext_ln28_5_fu_389_p1;

assign grp_fu_824_p0 = 9'd13;

assign grp_fu_824_p1 = grp_fu_824_p10;

assign grp_fu_824_p10 = select_ln13_3_fu_377_p3;

assign grp_fu_824_p2 = zext_ln28_5_fu_389_p1;

assign grp_fu_833_p0 = 8'd13;

assign grp_fu_833_p1 = grp_fu_833_p10;

assign grp_fu_833_p10 = select_ln13_1_reg_862_pp0_iter1_reg;

assign grp_fu_833_p2 = grp_fu_833_p20;

assign grp_fu_833_p20 = select_ln13_reg_857_pp0_iter1_reg;

assign icmp_ln10_fu_245_p2 = ((indvar_flatten23_reg_155 == 13'd5408) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_263_p2 = ((indvar_flatten_reg_177 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_311_p2 = ((c_0_reg_199 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_758_p2 = ((tmp_10_fu_726_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_764_p2 = ((trunc_ln28_5_fu_736_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_12_fu_776_p2 = ((tmp_11_fu_744_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_13_fu_782_p2 = ((trunc_ln28_6_fu_754_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_481_p2 = ((trunc_ln28_fu_471_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_573_p2 = ((tmp_5_fu_542_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_579_p2 = ((trunc_ln28_1_fu_552_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_591_p2 = ((tmp_6_fu_559_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_597_p2 = ((trunc_ln28_2_fu_569_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_665_p2 = ((tmp_8_fu_633_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_671_p2 = ((trunc_ln28_3_fu_643_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_683_p2 = ((tmp_9_fu_651_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_689_p2 = ((trunc_ln28_4_fu_661_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_475_p2 = ((tmp_3_fu_461_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_2_fu_533_p1;

assign max_pool_1_out_d0 = ((and_ln28_6_fu_800_p2[0:0] === 1'b1) ? conv_1_out_1_q1 : select_ln28_2_fu_713_p3);

assign or_ln13_fu_329_p2 = (icmp_ln13_fu_263_p2 | and_ln28_7_fu_317_p2);

assign or_ln25_1_fu_371_p2 = (shl_ln25_mid1_fu_343_p3 | 5'd1);

assign or_ln25_fu_239_p2 = (shl_ln_fu_231_p3 | 5'd1);

assign or_ln28_1_fu_585_p2 = (icmp_ln28_3_fu_579_p2 | icmp_ln28_2_fu_573_p2);

assign or_ln28_2_fu_603_p2 = (icmp_ln28_5_fu_597_p2 | icmp_ln28_4_fu_591_p2);

assign or_ln28_3_fu_677_p2 = (icmp_ln28_7_fu_671_p2 | icmp_ln28_6_fu_665_p2);

assign or_ln28_4_fu_695_p2 = (icmp_ln28_9_fu_689_p2 | icmp_ln28_8_fu_683_p2);

assign or_ln28_5_fu_770_p2 = (icmp_ln28_11_fu_764_p2 | icmp_ln28_10_fu_758_p2);

assign or_ln28_6_fu_788_p2 = (icmp_ln28_13_fu_782_p2 | icmp_ln28_12_fu_776_p2);

assign or_ln28_fu_487_p2 = (icmp_ln28_fu_475_p2 | icmp_ln28_1_fu_481_p2);

assign r_fu_323_p2 = (4'd1 + select_ln28_4_fu_269_p3);

assign select_ln13_1_fu_351_p3 = ((and_ln28_7_fu_317_p2[0:0] === 1'b1) ? r_fu_323_p2 : select_ln28_4_fu_269_p3);

assign select_ln13_2_fu_359_p3 = ((and_ln28_7_fu_317_p2[0:0] === 1'b1) ? shl_ln25_mid1_fu_343_p3 : select_ln28_6_fu_289_p3);

assign select_ln13_3_fu_377_p3 = ((and_ln28_7_fu_317_p2[0:0] === 1'b1) ? or_ln25_1_fu_371_p2 : select_ln28_7_fu_297_p3);

assign select_ln13_4_fu_444_p3 = ((icmp_ln13_fu_263_p2[0:0] === 1'b1) ? 8'd1 : add_ln13_fu_438_p2);

assign select_ln13_fu_335_p3 = ((or_ln13_fu_329_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_199);

assign select_ln28_1_fu_621_p3 = ((and_ln28_2_fu_615_p2[0:0] === 1'b1) ? conv_1_out_1_q0 : select_ln28_reg_908);

assign select_ln28_2_fu_713_p3 = ((and_ln28_4_fu_707_p2[0:0] === 1'b1) ? conv_1_out_0_q1 : select_ln28_1_fu_621_p3);

assign select_ln28_4_fu_269_p3 = ((icmp_ln13_fu_263_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_r_0_phi_fu_192_p4);

assign select_ln28_5_fu_277_p3 = ((icmp_ln13_fu_263_p2[0:0] === 1'b1) ? f_fu_257_p2 : ap_phi_mux_f_0_phi_fu_170_p4);

assign select_ln28_6_fu_289_p3 = ((icmp_ln13_fu_263_p2[0:0] === 1'b1) ? 5'd0 : shl_ln_fu_231_p3);

assign select_ln28_7_fu_297_p3 = ((icmp_ln13_fu_263_p2[0:0] === 1'b1) ? 5'd1 : or_ln25_fu_239_p2);

assign select_ln28_fu_499_p3 = ((and_ln28_fu_493_p2[0:0] === 1'b1) ? conv_1_out_0_q0 : 32'd8388608);

assign shl_ln25_mid1_fu_343_p3 = {{r_fu_323_p2}, {1'd0}};

assign shl_ln_fu_231_p3 = {{ap_phi_mux_r_0_phi_fu_192_p4}, {1'd0}};

assign tmp_10_fu_726_p4 = {{bitcast_ln28_5_fu_722_p1[30:23]}};

assign tmp_11_fu_744_p4 = {{bitcast_ln28_6_fu_740_p1[30:23]}};

assign tmp_13_fu_516_p3 = {{grp_fu_833_p3}, {5'd0}};

assign tmp_1_fu_415_p3 = {{grp_fu_824_p3}, {5'd0}};

assign tmp_3_fu_461_p4 = {{bitcast_ln28_fu_457_p1[30:23]}};

assign tmp_5_fu_542_p4 = {{bitcast_ln28_1_fu_538_p1[30:23]}};

assign tmp_6_fu_559_p4 = {{bitcast_ln28_2_fu_556_p1[30:23]}};

assign tmp_8_fu_633_p4 = {{bitcast_ln28_3_fu_629_p1[30:23]}};

assign tmp_9_fu_651_p4 = {{bitcast_ln28_4_fu_647_p1[30:23]}};

assign tmp_fu_393_p3 = {{grp_fu_815_p3}, {5'd0}};

assign trunc_ln28_1_fu_552_p1 = bitcast_ln28_1_fu_538_p1[22:0];

assign trunc_ln28_2_fu_569_p1 = bitcast_ln28_2_fu_556_p1[22:0];

assign trunc_ln28_3_fu_643_p1 = bitcast_ln28_3_fu_629_p1[22:0];

assign trunc_ln28_4_fu_661_p1 = bitcast_ln28_4_fu_647_p1[22:0];

assign trunc_ln28_5_fu_736_p1 = bitcast_ln28_5_fu_722_p1[22:0];

assign trunc_ln28_6_fu_754_p1 = bitcast_ln28_6_fu_740_p1[22:0];

assign trunc_ln28_fu_471_p1 = bitcast_ln28_fu_457_p1[22:0];

assign xor_ln28_fu_305_p2 = (icmp_ln13_fu_263_p2 ^ 1'd1);

assign zext_ln28_1_fu_285_p1 = select_ln28_5_fu_277_p3;

assign zext_ln28_5_fu_389_p1 = select_ln13_fu_335_p3;

assign zext_ln28_6_fu_400_p1 = tmp_fu_393_p3;

assign zext_ln28_7_fu_410_p1 = add_ln28_1_fu_404_p2;

assign zext_ln28_8_fu_422_p1 = tmp_1_fu_415_p3;

assign zext_ln28_9_fu_452_p1 = add_ln28_3_reg_878;

assign zext_ln28_fu_507_p1 = select_ln28_5_reg_851_pp0_iter1_reg;

assign zext_ln35_1_fu_523_p1 = tmp_13_fu_516_p3;

assign zext_ln35_2_fu_533_p1 = add_ln35_1_fu_527_p2;

always @ (posedge ap_clk) begin
    zext_ln28_7_reg_868[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_1
