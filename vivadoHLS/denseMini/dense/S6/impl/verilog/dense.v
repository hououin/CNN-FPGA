// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=31.958000,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=47,HLS_SYN_FF=3593,HLS_SYN_LUT=5288,HLS_VERSION=2020_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_0,
        flat_array_1,
        flat_array_2,
        flat_array_3,
        flat_array_4,
        flat_array_5,
        flat_array_6,
        flat_array_7,
        prediction_0,
        prediction_0_ap_vld,
        prediction_1,
        prediction_1_ap_vld,
        prediction_2,
        prediction_2_ap_vld
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_pp0_stage0 = 12'd4;
parameter    ap_ST_fsm_state13 = 12'd8;
parameter    ap_ST_fsm_state14 = 12'd16;
parameter    ap_ST_fsm_state15 = 12'd32;
parameter    ap_ST_fsm_state16 = 12'd64;
parameter    ap_ST_fsm_state17 = 12'd128;
parameter    ap_ST_fsm_state18 = 12'd256;
parameter    ap_ST_fsm_state19 = 12'd512;
parameter    ap_ST_fsm_pp1_stage0 = 12'd1024;
parameter    ap_ST_fsm_state28 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] flat_array_0;
input  [31:0] flat_array_1;
input  [31:0] flat_array_2;
input  [31:0] flat_array_3;
input  [31:0] flat_array_4;
input  [31:0] flat_array_5;
input  [31:0] flat_array_6;
input  [31:0] flat_array_7;
output  [31:0] prediction_0;
output   prediction_0_ap_vld;
output  [31:0] prediction_1;
output   prediction_1_ap_vld;
output  [31:0] prediction_2;
output   prediction_2_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg prediction_0_ap_vld;
reg prediction_1_ap_vld;
reg prediction_2_ap_vld;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] d_0_reg_236;
reg   [1:0] d_0_reg_236_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] d_0_reg_236_pp0_iter2_reg;
reg   [1:0] d_0_reg_236_pp0_iter3_reg;
reg   [1:0] d_0_reg_236_pp0_iter4_reg;
reg   [1:0] d_0_reg_236_pp0_iter5_reg;
reg   [1:0] d_0_reg_236_pp0_iter6_reg;
reg   [1:0] d_0_reg_236_pp0_iter7_reg;
reg   [1:0] d_0_reg_236_pp0_iter8_reg;
reg   [1:0] j_0_i_reg_248;
reg   [1:0] j_0_i_reg_248_pp1_iter1_reg;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state20_pp1_stage0_iter0;
wire    ap_block_state21_pp1_stage0_iter1;
wire    ap_block_state22_pp1_stage0_iter2;
wire    ap_block_state23_pp1_stage0_iter3;
wire    ap_block_state24_pp1_stage0_iter4;
wire    ap_block_state25_pp1_stage0_iter5;
wire    ap_block_state26_pp1_stage0_iter6;
wire    ap_block_state27_pp1_stage0_iter7;
wire    ap_block_pp1_stage0_11001;
reg   [1:0] j_0_i_reg_248_pp1_iter2_reg;
reg   [1:0] j_0_i_reg_248_pp1_iter3_reg;
reg   [1:0] j_0_i_reg_248_pp1_iter4_reg;
reg   [1:0] j_0_i_reg_248_pp1_iter5_reg;
reg   [1:0] j_0_i_reg_248_pp1_iter6_reg;
wire   [31:0] grp_fu_260_p2;
reg   [31:0] reg_351;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_346_p2;
reg   [31:0] reg_358;
wire    ap_CS_fsm_state15;
reg    ap_enable_reg_pp1_iter2;
wire   [1:0] add_ln26_fu_383_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln26_fu_481_p2;
wire   [0:0] icmp_ln29_fu_547_p2;
reg   [0:0] icmp_ln29_reg_842;
wire   [1:0] d_fu_553_p2;
reg   [1:0] d_reg_846;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] tmp_6_fu_559_p5;
wire   [31:0] grp_fu_301_p2;
wire   [31:0] tmp_7_fu_572_p5;
wire   [31:0] grp_fu_306_p2;
wire   [31:0] tmp_8_fu_585_p5;
wire   [31:0] grp_fu_265_p2;
wire   [31:0] grp_fu_311_p2;
wire   [31:0] tmp_9_fu_598_p5;
wire   [31:0] grp_fu_270_p2;
wire   [31:0] grp_fu_316_p2;
wire   [31:0] tmp_10_fu_611_p5;
wire   [31:0] grp_fu_275_p2;
wire   [31:0] grp_fu_321_p2;
wire   [31:0] tmp_11_fu_625_p5;
wire   [31:0] grp_fu_326_p2;
reg   [31:0] tmp_2_6_reg_923;
reg   [31:0] tmp_2_6_reg_923_pp0_iter6_reg;
wire   [31:0] grp_fu_280_p2;
wire   [31:0] grp_fu_330_p2;
wire   [31:0] grp_fu_335_p2;
reg   [31:0] tmp_2_7_reg_938;
reg   [31:0] tmp_2_7_reg_938_pp0_iter7_reg;
wire   [31:0] grp_fu_285_p2;
wire   [31:0] grp_fu_290_p2;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg   [31:0] tmp_1_reg_968;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln16_fu_681_p2;
reg   [0:0] icmp_ln16_reg_973;
wire   [1:0] j_fu_687_p2;
reg   [1:0] j_reg_977;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] tmp_13_fu_702_p5;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg   [1:0] phi_ln26_reg_225;
reg   [1:0] ap_phi_mux_d_0_phi_fu_240_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_j_0_i_phi_fu_252_p4;
wire    ap_block_pp1_stage0;
reg   [31:0] dense_array_load_0130_fu_108;
wire   [31:0] select_ln26_9_fu_473_p3;
reg   [31:0] dense_array_load_18134_fu_112;
wire   [31:0] select_ln26_8_fu_465_p3;
reg   [31:0] dense_array_load_2138_fu_116;
wire   [31:0] select_ln26_6_fu_449_p3;
reg   [31:0] dense_array_0_0_fu_120;
wire   [31:0] select_ln26_4_fu_433_p3;
reg   [31:0] dense_array_1_0_fu_124;
wire   [31:0] select_ln26_3_fu_425_p3;
reg   [31:0] dense_array_2_0_fu_128;
wire   [31:0] select_ln26_1_fu_409_p3;
reg   [31:0] dense_array_2_fu_132;
wire   [31:0] grp_fu_295_p2;
reg   [31:0] dense_array_2_1_fu_136;
reg   [31:0] dense_array_2_3_fu_140;
reg   [31:0] dense_array_2_4_fu_144;
reg   [31:0] dense_array_2_5_fu_148;
reg   [31:0] dense_array_2_2_fu_152;
wire   [31:0] grp_fu_339_p2;
wire    ap_block_pp1_stage0_01001;
reg   [31:0] grp_fu_260_p0;
reg   [31:0] grp_fu_260_p1;
reg   [31:0] grp_fu_346_p1;
wire   [0:0] icmp_ln26_1_fu_389_p2;
wire   [0:0] icmp_ln26_2_fu_403_p2;
wire   [31:0] select_ln26_fu_395_p3;
wire   [31:0] select_ln26_2_fu_417_p3;
wire   [31:0] select_ln26_5_fu_441_p3;
wire   [31:0] select_ln26_7_fu_457_p3;
wire    ap_CS_fsm_state28;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
end

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_260_p0),
    .din1(grp_fu_260_p1),
    .ce(1'b1),
    .dout(grp_fu_260_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_260_p2),
    .din1(grp_fu_306_p2),
    .ce(1'b1),
    .dout(grp_fu_265_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_265_p2),
    .din1(grp_fu_311_p2),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_270_p2),
    .din1(grp_fu_316_p2),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_275_p2),
    .din1(grp_fu_321_p2),
    .ce(1'b1),
    .dout(grp_fu_280_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_280_p2),
    .din1(grp_fu_330_p2),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_285_p2),
    .din1(tmp_2_6_reg_923_pp0_iter6_reg),
    .ce(1'b1),
    .dout(grp_fu_290_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_290_p2),
    .din1(tmp_2_7_reg_938_pp0_iter7_reg),
    .ce(1'b1),
    .dout(grp_fu_295_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_fu_559_p5),
    .din1(flat_array_0),
    .ce(1'b1),
    .dout(grp_fu_301_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_fu_572_p5),
    .din1(flat_array_1),
    .ce(1'b1),
    .dout(grp_fu_306_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_8_fu_585_p5),
    .din1(flat_array_2),
    .ce(1'b1),
    .dout(grp_fu_311_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_fu_598_p5),
    .din1(flat_array_3),
    .ce(1'b1),
    .dout(grp_fu_316_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_10_fu_611_p5),
    .din1(flat_array_4),
    .ce(1'b1),
    .dout(grp_fu_321_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_10_fu_611_p5),
    .din1(flat_array_6),
    .ce(1'b1),
    .dout(grp_fu_326_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_11_fu_625_p5),
    .din1(flat_array_5),
    .ce(1'b1),
    .dout(grp_fu_330_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_11_fu_625_p5),
    .din1(flat_array_7),
    .ce(1'b1),
    .dout(grp_fu_335_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_358),
    .din1(reg_351),
    .ce(1'b1),
    .dout(grp_fu_339_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_346_p1),
    .ce(1'b1),
    .dout(grp_fu_346_p2)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U19(
    .din0(32'd1062327069),
    .din1(32'd3196711182),
    .din2(32'd1048864114),
    .din3(ap_phi_mux_d_0_phi_fu_240_p4),
    .dout(tmp_6_fu_559_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U20(
    .din0(32'd3158336446),
    .din1(32'd3208525578),
    .din2(32'd3209630702),
    .din3(d_0_reg_236),
    .dout(tmp_7_fu_572_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U21(
    .din0(32'd1062049939),
    .din1(32'd1025270479),
    .din2(32'd1062725747),
    .din3(d_0_reg_236_pp0_iter1_reg),
    .dout(tmp_8_fu_585_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U22(
    .din0(32'd3202682398),
    .din1(32'd1054330938),
    .din2(32'd3203452870),
    .din3(d_0_reg_236_pp0_iter2_reg),
    .dout(tmp_9_fu_598_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U23(
    .din0(32'd1042709668),
    .din1(32'd3207467163),
    .din2(32'd3206060690),
    .din3(d_0_reg_236_pp0_iter3_reg),
    .dout(tmp_10_fu_611_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U24(
    .din0(32'd3197416346),
    .din1(32'd3162476193),
    .din2(32'd3191281437),
    .din3(d_0_reg_236_pp0_iter4_reg),
    .dout(tmp_11_fu_625_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U25(
    .din0(dense_array_2_4_fu_144),
    .din1(dense_array_2_5_fu_148),
    .din2(dense_array_2_2_fu_152),
    .din3(ap_phi_mux_j_0_i_phi_fu_252_p4),
    .dout(tmp_13_fu_702_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state20))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state20)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln29_reg_842 == 1'd0))) begin
        d_0_reg_236 <= d_reg_846;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd1))) begin
        d_0_reg_236 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((d_0_reg_236_pp0_iter8_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        dense_array_2_1_fu_136 <= grp_fu_295_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd1))) begin
        dense_array_2_1_fu_136 <= select_ln26_8_fu_465_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(d_0_reg_236_pp0_iter8_reg == 2'd1) & ~(d_0_reg_236_pp0_iter8_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        dense_array_2_2_fu_152 <= grp_fu_295_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd1))) begin
        dense_array_2_2_fu_152 <= select_ln26_1_fu_409_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(d_0_reg_236_pp0_iter8_reg == 2'd1) & ~(d_0_reg_236_pp0_iter8_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        dense_array_2_3_fu_140 <= grp_fu_295_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd1))) begin
        dense_array_2_3_fu_140 <= select_ln26_6_fu_449_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((d_0_reg_236_pp0_iter8_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        dense_array_2_4_fu_144 <= grp_fu_295_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd1))) begin
        dense_array_2_4_fu_144 <= select_ln26_4_fu_433_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((d_0_reg_236_pp0_iter8_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        dense_array_2_5_fu_148 <= grp_fu_295_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd1))) begin
        dense_array_2_5_fu_148 <= select_ln26_3_fu_425_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((d_0_reg_236_pp0_iter8_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        dense_array_2_fu_132 <= grp_fu_295_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd1))) begin
        dense_array_2_fu_132 <= select_ln26_9_fu_473_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_0_i_reg_248 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln16_reg_973 == 1'd0))) begin
        j_0_i_reg_248 <= j_reg_977;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd0))) begin
        phi_ln26_reg_225 <= add_ln26_fu_383_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln26_reg_225 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_0_reg_236_pp0_iter1_reg <= d_0_reg_236;
        icmp_ln29_reg_842 <= icmp_ln29_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        d_0_reg_236_pp0_iter2_reg <= d_0_reg_236_pp0_iter1_reg;
        d_0_reg_236_pp0_iter3_reg <= d_0_reg_236_pp0_iter2_reg;
        d_0_reg_236_pp0_iter4_reg <= d_0_reg_236_pp0_iter3_reg;
        d_0_reg_236_pp0_iter5_reg <= d_0_reg_236_pp0_iter4_reg;
        d_0_reg_236_pp0_iter6_reg <= d_0_reg_236_pp0_iter5_reg;
        d_0_reg_236_pp0_iter7_reg <= d_0_reg_236_pp0_iter6_reg;
        d_0_reg_236_pp0_iter8_reg <= d_0_reg_236_pp0_iter7_reg;
        tmp_2_6_reg_923 <= grp_fu_326_p2;
        tmp_2_6_reg_923_pp0_iter6_reg <= tmp_2_6_reg_923;
        tmp_2_7_reg_938 <= grp_fu_335_p2;
        tmp_2_7_reg_938_pp0_iter7_reg <= tmp_2_7_reg_938;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_reg_846 <= d_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_0_0_fu_120 <= select_ln26_4_fu_433_p3;
        dense_array_1_0_fu_124 <= select_ln26_3_fu_425_p3;
        dense_array_2_0_fu_128 <= select_ln26_1_fu_409_p3;
        dense_array_load_0130_fu_108 <= select_ln26_9_fu_473_p3;
        dense_array_load_18134_fu_112 <= select_ln26_8_fu_465_p3;
        dense_array_load_2138_fu_116 <= select_ln26_6_fu_449_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln16_reg_973 <= icmp_ln16_fu_681_p2;
        j_0_i_reg_248_pp1_iter1_reg <= j_0_i_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        j_0_i_reg_248_pp1_iter2_reg <= j_0_i_reg_248_pp1_iter1_reg;
        j_0_i_reg_248_pp1_iter3_reg <= j_0_i_reg_248_pp1_iter2_reg;
        j_0_i_reg_248_pp1_iter4_reg <= j_0_i_reg_248_pp1_iter3_reg;
        j_0_i_reg_248_pp1_iter5_reg <= j_0_i_reg_248_pp1_iter4_reg;
        j_0_i_reg_248_pp1_iter6_reg <= j_0_i_reg_248_pp1_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_reg_977 <= j_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        reg_351 <= grp_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state17) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        reg_358 <= grp_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_1_reg_968 <= grp_fu_346_p2;
    end
end

always @ (*) begin
    if ((icmp_ln29_fu_547_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln16_fu_681_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln29_reg_842 == 1'd0))) begin
        ap_phi_mux_d_0_phi_fu_240_p4 = d_reg_846;
    end else begin
        ap_phi_mux_d_0_phi_fu_240_p4 = d_0_reg_236;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln16_reg_973 == 1'd0))) begin
        ap_phi_mux_j_0_i_phi_fu_252_p4 = j_reg_977;
    end else begin
        ap_phi_mux_j_0_i_phi_fu_252_p4 = j_0_i_reg_248;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_260_p0 = grp_fu_260_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_260_p0 = reg_358;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_260_p0 = grp_fu_301_p2;
    end else begin
        grp_fu_260_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_260_p1 = reg_358;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_260_p1 = tmp_1_reg_968;
    end else if (((1'b1 == ap_CS_fsm_state16) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        grp_fu_260_p1 = 32'd0;
    end else begin
        grp_fu_260_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_346_p1 = tmp_13_fu_702_p5;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_346_p1 = dense_array_2_3_fu_140;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_346_p1 = dense_array_2_1_fu_136;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_346_p1 = dense_array_2_fu_132;
    end else begin
        grp_fu_346_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1) & (j_0_i_reg_248_pp1_iter6_reg == 2'd0))) begin
        prediction_0_ap_vld = 1'b1;
    end else begin
        prediction_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1) & (j_0_i_reg_248_pp1_iter6_reg == 2'd1))) begin
        prediction_1_ap_vld = 1'b1;
    end else begin
        prediction_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(j_0_i_reg_248_pp1_iter6_reg == 2'd0) & ~(j_0_i_reg_248_pp1_iter6_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1))) begin
        prediction_2_ap_vld = 1'b1;
    end else begin
        prediction_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_481_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_547_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_547_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln16_fu_681_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter6 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter6 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter7 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln16_fu_681_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_383_p2 = (phi_ln26_reg_225 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd11];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign d_fu_553_p2 = (ap_phi_mux_d_0_phi_fu_240_p4 + 2'd1);

assign icmp_ln16_fu_681_p2 = ((ap_phi_mux_j_0_i_phi_fu_252_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln26_1_fu_389_p2 = ((phi_ln26_reg_225 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln26_2_fu_403_p2 = ((phi_ln26_reg_225 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_481_p2 = ((phi_ln26_reg_225 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_547_p2 = ((ap_phi_mux_d_0_phi_fu_240_p4 == 2'd3) ? 1'b1 : 1'b0);

assign j_fu_687_p2 = (ap_phi_mux_j_0_i_phi_fu_252_p4 + 2'd1);

assign prediction_0 = grp_fu_339_p2;

assign prediction_1 = grp_fu_339_p2;

assign prediction_2 = grp_fu_339_p2;

assign select_ln26_1_fu_409_p3 = ((icmp_ln26_2_fu_403_p2[0:0] === 1'b1) ? dense_array_2_0_fu_128 : select_ln26_fu_395_p3);

assign select_ln26_2_fu_417_p3 = ((icmp_ln26_1_fu_389_p2[0:0] === 1'b1) ? 32'd0 : dense_array_1_0_fu_124);

assign select_ln26_3_fu_425_p3 = ((icmp_ln26_2_fu_403_p2[0:0] === 1'b1) ? dense_array_1_0_fu_124 : select_ln26_2_fu_417_p3);

assign select_ln26_4_fu_433_p3 = ((icmp_ln26_2_fu_403_p2[0:0] === 1'b1) ? 32'd0 : dense_array_0_0_fu_120);

assign select_ln26_5_fu_441_p3 = ((icmp_ln26_1_fu_389_p2[0:0] === 1'b1) ? dense_array_load_2138_fu_116 : 32'd0);

assign select_ln26_6_fu_449_p3 = ((icmp_ln26_2_fu_403_p2[0:0] === 1'b1) ? dense_array_load_2138_fu_116 : select_ln26_5_fu_441_p3);

assign select_ln26_7_fu_457_p3 = ((icmp_ln26_1_fu_389_p2[0:0] === 1'b1) ? 32'd0 : dense_array_load_18134_fu_112);

assign select_ln26_8_fu_465_p3 = ((icmp_ln26_2_fu_403_p2[0:0] === 1'b1) ? dense_array_load_18134_fu_112 : select_ln26_7_fu_457_p3);

assign select_ln26_9_fu_473_p3 = ((icmp_ln26_2_fu_403_p2[0:0] === 1'b1) ? 32'd0 : dense_array_load_0130_fu_108);

assign select_ln26_fu_395_p3 = ((icmp_ln26_1_fu_389_p2[0:0] === 1'b1) ? dense_array_2_0_fu_128 : 32'd0);

endmodule //dense
