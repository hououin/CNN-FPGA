// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=31.264250,HLS_SYN_LAT=147,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=980,HLS_SYN_LUT=2611,HLS_VERSION=2020_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;
output  [1:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_ce0;
reg prediction_ce0;
reg prediction_we0;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] dense_weights_address0;
reg    dense_weights_ce0;
wire   [31:0] dense_weights_q0;
wire   [31:0] grp_fu_223_p2;
reg   [31:0] reg_237;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire   [1:0] add_ln26_fu_252_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] d_fu_352_p2;
reg   [1:0] d_reg_527;
wire    ap_CS_fsm_state3;
wire   [5:0] zext_ln34_fu_358_p1;
reg   [5:0] zext_ln34_reg_532;
wire   [0:0] icmp_ln29_fu_346_p2;
wire   [3:0] f_fu_368_p2;
reg   [3:0] f_reg_540;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln34_fu_362_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_210_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_204_p2;
wire    ap_CS_fsm_state7;
wire   [1:0] i_fu_428_p2;
reg   [1:0] i_reg_578;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_1_fu_434_p5;
wire   [0:0] icmp_ln10_fu_422_p2;
wire    ap_CS_fsm_state12;
wire   [1:0] j_fu_453_p2;
reg   [1:0] j_reg_596;
wire    ap_CS_fsm_state13;
wire   [31:0] tmp_2_fu_459_p5;
wire   [0:0] icmp_ln16_fu_447_p2;
reg   [1:0] phi_ln26_reg_123;
wire   [0:0] icmp_ln26_fu_310_p2;
reg   [1:0] d_0_reg_134;
reg   [31:0] dense_array_0_reg_146;
reg   [3:0] f_0_reg_158;
reg   [31:0] sum_0_i_reg_169;
reg   [1:0] i_0_i_reg_181;
reg   [1:0] j_0_i_reg_192;
wire    ap_CS_fsm_state20;
wire  signed [63:0] sext_ln36_fu_402_p1;
wire   [63:0] zext_ln36_fu_374_p1;
wire   [63:0] zext_ln18_fu_472_p1;
reg   [31:0] dense_array_0_0_fu_60;
wire   [31:0] select_ln26_4_fu_302_p3;
reg   [31:0] dense_array_1_0_fu_64;
wire   [31:0] select_ln26_3_fu_294_p3;
reg   [31:0] dense_array_2_0_fu_68;
wire   [31:0] select_ln26_1_fu_278_p3;
reg   [31:0] dense_array_2_fu_72;
reg   [31:0] dense_array_2_1_fu_76;
reg   [31:0] dense_array_2_2_fu_80;
wire   [31:0] grp_fu_217_p2;
reg   [31:0] grp_fu_204_p0;
reg   [31:0] grp_fu_204_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
reg   [31:0] grp_fu_223_p1;
wire   [0:0] icmp_ln26_1_fu_258_p2;
wire   [0:0] icmp_ln26_2_fu_272_p2;
wire   [31:0] select_ln26_fu_264_p3;
wire   [31:0] select_ln26_2_fu_286_p3;
wire   [5:0] tmp_3_fu_383_p3;
wire   [5:0] zext_ln36_1_fu_379_p1;
wire   [5:0] sub_ln36_fu_391_p2;
wire   [5:0] add_ln36_fu_397_p2;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

dense_dense_weights #(
    .DataWidth( 32 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
dense_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_weights_address0),
    .ce0(dense_weights_ce0),
    .q0(dense_weights_q0)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_204_p0),
    .din1(grp_fu_204_p1),
    .ce(1'b1),
    .dout(grp_fu_204_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_weights_q0),
    .din1(flat_array_q0),
    .ce(1'b1),
    .dout(grp_fu_210_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_237),
    .din1(sum_0_i_reg_169),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_223_p1),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U5(
    .din0(dense_array_2_fu_72),
    .din1(dense_array_2_1_fu_76),
    .din2(dense_array_2_2_fu_80),
    .din3(i_0_i_reg_181),
    .dout(tmp_1_fu_434_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U6(
    .din0(dense_array_2_fu_72),
    .din1(dense_array_2_1_fu_76),
    .din2(dense_array_2_2_fu_80),
    .din3(j_0_i_reg_192),
    .dout(tmp_2_fu_459_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_310_p2 == 1'd1))) begin
        d_0_reg_134 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln34_fu_362_p2 == 1'd1))) begin
        d_0_reg_134 <= d_reg_527;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        dense_array_0_reg_146 <= grp_fu_204_p2;
    end else if (((icmp_ln29_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        dense_array_0_reg_146 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (d_0_reg_134 == 2'd1) & (icmp_ln34_fu_362_p2 == 1'd1))) begin
        dense_array_2_1_fu_76 <= dense_array_0_reg_146;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_310_p2 == 1'd1))) begin
        dense_array_2_1_fu_76 <= select_ln26_3_fu_294_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(d_0_reg_134 == 2'd1) & ~(d_0_reg_134 == 2'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln34_fu_362_p2 == 1'd1))) begin
        dense_array_2_2_fu_80 <= dense_array_0_reg_146;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_310_p2 == 1'd1))) begin
        dense_array_2_2_fu_80 <= select_ln26_1_fu_278_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (d_0_reg_134 == 2'd0) & (icmp_ln34_fu_362_p2 == 1'd1))) begin
        dense_array_2_fu_72 <= dense_array_0_reg_146;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_310_p2 == 1'd1))) begin
        dense_array_2_fu_72 <= select_ln26_4_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        f_0_reg_158 <= f_reg_540;
    end else if (((icmp_ln29_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_158 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_reg_181 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_i_reg_181 <= i_reg_578;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln10_fu_422_p2 == 1'd1))) begin
        j_0_i_reg_192 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        j_0_i_reg_192 <= j_reg_596;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_310_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln26_reg_123 <= add_ln26_fu_252_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln26_reg_123 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_0_i_reg_169 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_0_i_reg_169 <= grp_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_reg_527 <= d_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_0_0_fu_60 <= select_ln26_4_fu_302_p3;
        dense_array_1_0_fu_64 <= select_ln26_3_fu_294_p3;
        dense_array_2_0_fu_68 <= select_ln26_1_fu_278_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_540 <= f_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_578 <= i_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_596 <= j_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_237 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln34_reg_532[1 : 0] <= zext_ln34_fu_358_p1[1 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln16_fu_447_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln16_fu_447_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dense_weights_ce0 = 1'b1;
    end else begin
        dense_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_204_p0 = sum_0_i_reg_169;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_204_p0 = dense_array_0_reg_146;
    end else begin
        grp_fu_204_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_204_p1 = reg_237;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_204_p1 = grp_fu_210_p2;
    end else begin
        grp_fu_204_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_223_p1 = tmp_2_fu_459_p5;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_223_p1 = tmp_1_fu_434_p5;
    end else begin
        grp_fu_223_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln29_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln34_fu_362_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln10_fu_422_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln16_fu_447_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_252_p2 = (phi_ln26_reg_123 + 2'd1);

assign add_ln36_fu_397_p2 = (sub_ln36_fu_391_p2 + zext_ln34_reg_532);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign d_fu_352_p2 = (d_0_reg_134 + 2'd1);

assign dense_weights_address0 = sext_ln36_fu_402_p1;

assign f_fu_368_p2 = (f_0_reg_158 + 4'd1);

assign flat_array_address0 = zext_ln36_fu_374_p1;

assign i_fu_428_p2 = (i_0_i_reg_181 + 2'd1);

assign icmp_ln10_fu_422_p2 = ((i_0_i_reg_181 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_447_p2 = ((j_0_i_reg_192 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln26_1_fu_258_p2 = ((phi_ln26_reg_123 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln26_2_fu_272_p2 = ((phi_ln26_reg_123 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_310_p2 = ((phi_ln26_reg_123 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_346_p2 = ((d_0_reg_134 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_362_p2 = ((f_0_reg_158 == 4'd8) ? 1'b1 : 1'b0);

assign j_fu_453_p2 = (j_0_i_reg_192 + 2'd1);

assign prediction_address0 = zext_ln18_fu_472_p1;

assign prediction_d0 = grp_fu_217_p2;

assign select_ln26_1_fu_278_p3 = ((icmp_ln26_2_fu_272_p2[0:0] === 1'b1) ? dense_array_2_0_fu_68 : select_ln26_fu_264_p3);

assign select_ln26_2_fu_286_p3 = ((icmp_ln26_1_fu_258_p2[0:0] === 1'b1) ? 32'd0 : dense_array_1_0_fu_64);

assign select_ln26_3_fu_294_p3 = ((icmp_ln26_2_fu_272_p2[0:0] === 1'b1) ? dense_array_1_0_fu_64 : select_ln26_2_fu_286_p3);

assign select_ln26_4_fu_302_p3 = ((icmp_ln26_2_fu_272_p2[0:0] === 1'b1) ? 32'd0 : dense_array_0_0_fu_60);

assign select_ln26_fu_264_p3 = ((icmp_ln26_1_fu_258_p2[0:0] === 1'b1) ? dense_array_2_0_fu_68 : 32'd0);

assign sext_ln36_fu_402_p1 = $signed(add_ln36_fu_397_p2);

assign sub_ln36_fu_391_p2 = (tmp_3_fu_383_p3 - zext_ln36_1_fu_379_p1);

assign tmp_3_fu_383_p3 = {{f_0_reg_158}, {2'd0}};

assign zext_ln18_fu_472_p1 = j_0_i_reg_192;

assign zext_ln34_fu_358_p1 = d_0_reg_134;

assign zext_ln36_1_fu_379_p1 = f_0_reg_158;

assign zext_ln36_fu_374_p1 = f_0_reg_158;

always @ (posedge ap_clk) begin
    zext_ln34_reg_532[5:2] <= 4'b0000;
end

endmodule //dense
