-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flat_array_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    flat_array_ce0 : OUT STD_LOGIC;
    flat_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    prediction_ce0 : OUT STD_LOGIC;
    prediction_we0 : OUT STD_LOGIC;
    prediction_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dense is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dense,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=31.264250,HLS_SYN_LAT=147,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=980,HLS_SYN_LUT=2611,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_weights_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_weights_ce0 : STD_LOGIC;
    signal dense_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln26_fu_252_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal d_fu_352_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_reg_527 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln34_fu_358_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln34_reg_532 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln29_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_368_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_reg_540 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln34_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_fu_428_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_578 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_1_fu_434_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln10_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_fu_453_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_596 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_2_fu_459_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln16_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln26_reg_123 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln26_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_0_reg_134 : STD_LOGIC_VECTOR (1 downto 0);
    signal dense_array_0_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_0_reg_158 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_0_i_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_181 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_0_i_reg_192 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal sext_ln36_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_array_0_0_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_4_fu_302_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_1_0_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_3_fu_294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_2_0_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_1_fu_278_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_2_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_2_1_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_2_2_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_1_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_2_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_fu_264_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_2_fu_286_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_383_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln36_1_fu_379_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln36_fu_391_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_fu_397_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component dense_fadd_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_fdiv_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_fexp_32ns_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_dense_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_weights_U : component dense_dense_weights
    generic map (
        DataWidth => 32,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_weights_address0,
        ce0 => dense_weights_ce0,
        q0 => dense_weights_q0);

    dense_fadd_32ns_3bkb_U1 : component dense_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_204_p0,
        din1 => grp_fu_204_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_204_p2);

    dense_fmul_32ns_3cud_U2 : component dense_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_weights_q0,
        din1 => flat_array_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_210_p2);

    dense_fdiv_32ns_3dEe_U3 : component dense_fdiv_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_237,
        din1 => sum_0_i_reg_169,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    dense_fexp_32ns_3eOg_U4 : component dense_fexp_32ns_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_223_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    dense_mux_32_32_1_1_U5 : component dense_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => dense_array_2_fu_72,
        din1 => dense_array_2_1_fu_76,
        din2 => dense_array_2_2_fu_80,
        din3 => i_0_i_reg_181,
        dout => tmp_1_fu_434_p5);

    dense_mux_32_32_1_1_U6 : component dense_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => dense_array_2_fu_72,
        din1 => dense_array_2_1_fu_76,
        din2 => dense_array_2_2_fu_80,
        din3 => j_0_i_reg_192,
        dout => tmp_2_fu_459_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_310_p2 = ap_const_lv1_1))) then 
                d_0_reg_134 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln34_fu_362_p2 = ap_const_lv1_1))) then 
                d_0_reg_134 <= d_reg_527;
            end if; 
        end if;
    end process;

    dense_array_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                dense_array_0_reg_146 <= grp_fu_204_p2;
            elsif (((icmp_ln29_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                dense_array_0_reg_146 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    dense_array_2_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (d_0_reg_134 = ap_const_lv2_1) and (icmp_ln34_fu_362_p2 = ap_const_lv1_1))) then 
                dense_array_2_1_fu_76 <= dense_array_0_reg_146;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_310_p2 = ap_const_lv1_1))) then 
                dense_array_2_1_fu_76 <= select_ln26_3_fu_294_p3;
            end if; 
        end if;
    end process;

    dense_array_2_2_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((d_0_reg_134 = ap_const_lv2_1)) and not((d_0_reg_134 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln34_fu_362_p2 = ap_const_lv1_1))) then 
                dense_array_2_2_fu_80 <= dense_array_0_reg_146;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_310_p2 = ap_const_lv1_1))) then 
                dense_array_2_2_fu_80 <= select_ln26_1_fu_278_p3;
            end if; 
        end if;
    end process;

    dense_array_2_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (d_0_reg_134 = ap_const_lv2_0) and (icmp_ln34_fu_362_p2 = ap_const_lv1_1))) then 
                dense_array_2_fu_72 <= dense_array_0_reg_146;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_310_p2 = ap_const_lv1_1))) then 
                dense_array_2_fu_72 <= select_ln26_4_fu_302_p3;
            end if; 
        end if;
    end process;

    f_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                f_0_reg_158 <= f_reg_540;
            elsif (((icmp_ln29_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_158 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_346_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_181 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_i_reg_181 <= i_reg_578;
            end if; 
        end if;
    end process;

    j_0_i_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln10_fu_422_p2 = ap_const_lv1_1))) then 
                j_0_i_reg_192 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_0_i_reg_192 <= j_reg_596;
            end if; 
        end if;
    end process;

    phi_ln26_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln26_reg_123 <= add_ln26_fu_252_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln26_reg_123 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    sum_0_i_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_346_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_0_i_reg_169 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                sum_0_i_reg_169 <= grp_fu_204_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                d_reg_527 <= d_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                dense_array_0_0_fu_60 <= select_ln26_4_fu_302_p3;
                dense_array_1_0_fu_64 <= select_ln26_3_fu_294_p3;
                dense_array_2_0_fu_68 <= select_ln26_1_fu_278_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_540 <= f_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_578 <= i_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_reg_596 <= j_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_237 <= grp_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln34_reg_532(1 downto 0) <= zext_ln34_fu_358_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln34_reg_532(5 downto 2) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln29_fu_346_p2, ap_CS_fsm_state4, icmp_ln34_fu_362_p2, ap_CS_fsm_state8, icmp_ln10_fu_422_p2, ap_CS_fsm_state13, icmp_ln16_fu_447_p2, icmp_ln26_fu_310_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_310_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln29_fu_346_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln34_fu_362_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln10_fu_422_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln16_fu_447_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_fu_252_p2 <= std_logic_vector(unsigned(phi_ln26_reg_123) + unsigned(ap_const_lv2_1));
    add_ln36_fu_397_p2 <= std_logic_vector(unsigned(sub_ln36_fu_391_p2) + unsigned(zext_ln34_reg_532));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state13, icmp_ln16_fu_447_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln16_fu_447_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, icmp_ln16_fu_447_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln16_fu_447_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_352_p2 <= std_logic_vector(unsigned(d_0_reg_134) + unsigned(ap_const_lv2_1));
    dense_weights_address0 <= sext_ln36_fu_402_p1(5 - 1 downto 0);

    dense_weights_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dense_weights_ce0 <= ap_const_logic_1;
        else 
            dense_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_368_p2 <= std_logic_vector(unsigned(f_0_reg_158) + unsigned(ap_const_lv4_1));
    flat_array_address0 <= zext_ln36_fu_374_p1(3 - 1 downto 0);

    flat_array_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            flat_array_ce0 <= ap_const_logic_1;
        else 
            flat_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_204_p0_assign_proc : process(ap_CS_fsm_state6, dense_array_0_reg_146, sum_0_i_reg_169, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_204_p0 <= sum_0_i_reg_169;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_204_p0 <= dense_array_0_reg_146;
        else 
            grp_fu_204_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_204_p1_assign_proc : process(reg_237, grp_fu_210_p2, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_204_p1 <= reg_237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_204_p1 <= grp_fu_210_p2;
        else 
            grp_fu_204_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_223_p1_assign_proc : process(ap_CS_fsm_state8, tmp_1_fu_434_p5, ap_CS_fsm_state13, tmp_2_fu_459_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_223_p1 <= tmp_2_fu_459_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_223_p1 <= tmp_1_fu_434_p5;
        else 
            grp_fu_223_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_428_p2 <= std_logic_vector(unsigned(i_0_i_reg_181) + unsigned(ap_const_lv2_1));
    icmp_ln10_fu_422_p2 <= "1" when (i_0_i_reg_181 = ap_const_lv2_3) else "0";
    icmp_ln16_fu_447_p2 <= "1" when (j_0_i_reg_192 = ap_const_lv2_3) else "0";
    icmp_ln26_1_fu_258_p2 <= "1" when (phi_ln26_reg_123 = ap_const_lv2_1) else "0";
    icmp_ln26_2_fu_272_p2 <= "1" when (phi_ln26_reg_123 = ap_const_lv2_0) else "0";
    icmp_ln26_fu_310_p2 <= "1" when (phi_ln26_reg_123 = ap_const_lv2_2) else "0";
    icmp_ln29_fu_346_p2 <= "1" when (d_0_reg_134 = ap_const_lv2_3) else "0";
    icmp_ln34_fu_362_p2 <= "1" when (f_0_reg_158 = ap_const_lv4_8) else "0";
    j_fu_453_p2 <= std_logic_vector(unsigned(j_0_i_reg_192) + unsigned(ap_const_lv2_1));
    prediction_address0 <= zext_ln18_fu_472_p1(2 - 1 downto 0);

    prediction_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            prediction_ce0 <= ap_const_logic_1;
        else 
            prediction_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_d0 <= grp_fu_217_p2;

    prediction_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            prediction_we0 <= ap_const_logic_1;
        else 
            prediction_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln26_1_fu_278_p3 <= 
        dense_array_2_0_fu_68 when (icmp_ln26_2_fu_272_p2(0) = '1') else 
        select_ln26_fu_264_p3;
    select_ln26_2_fu_286_p3 <= 
        ap_const_lv32_0 when (icmp_ln26_1_fu_258_p2(0) = '1') else 
        dense_array_1_0_fu_64;
    select_ln26_3_fu_294_p3 <= 
        dense_array_1_0_fu_64 when (icmp_ln26_2_fu_272_p2(0) = '1') else 
        select_ln26_2_fu_286_p3;
    select_ln26_4_fu_302_p3 <= 
        ap_const_lv32_0 when (icmp_ln26_2_fu_272_p2(0) = '1') else 
        dense_array_0_0_fu_60;
    select_ln26_fu_264_p3 <= 
        dense_array_2_0_fu_68 when (icmp_ln26_1_fu_258_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln36_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_fu_397_p2),64));

    sub_ln36_fu_391_p2 <= std_logic_vector(unsigned(tmp_3_fu_383_p3) - unsigned(zext_ln36_1_fu_379_p1));
    tmp_3_fu_383_p3 <= (f_0_reg_158 & ap_const_lv2_0);
    zext_ln18_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_192),64));
    zext_ln34_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_134),6));
    zext_ln36_1_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_158),6));
    zext_ln36_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_158),64));
end behav;
