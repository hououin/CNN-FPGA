// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _soft_max_HH_
#define _soft_max_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dense_fadd_32ns_3bkb.h"
#include "dense_fdiv_32ns_3cud.h"
#include "dense_fexp_32ns_3dEe.h"
#include "dense_mux_32_32_1_1.h"

namespace ap_rtl {

struct soft_max : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > dense_array_0_read;
    sc_in< sc_lv<32> > dense_array_1_read;
    sc_in< sc_lv<32> > dense_array_2_read;
    sc_out< sc_lv<32> > pred_0;
    sc_out< sc_logic > pred_0_ap_vld;
    sc_out< sc_lv<32> > pred_1;
    sc_out< sc_logic > pred_1_ap_vld;
    sc_out< sc_lv<32> > pred_2;
    sc_out< sc_logic > pred_2_ap_vld;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    soft_max(sc_module_name name);
    SC_HAS_PROCESS(soft_max);

    ~soft_max();

    sc_trace_file* mVcdFile;

    dense_fadd_32ns_3bkb<1,2,32,32,32>* dense_fadd_32ns_3bkb_U1;
    dense_fdiv_32ns_3cud<1,5,32,32,32>* dense_fdiv_32ns_3cud_U2;
    dense_fexp_32ns_3dEe<1,3,32,32,32>* dense_fexp_32ns_3dEe_U3;
    dense_mux_32_32_1_1<1,1,32,32,32,2,32>* dense_mux_32_32_1_1_U4;
    dense_mux_32_32_1_1<1,1,32,32,32,2,32>* dense_mux_32_32_1_1_U5;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > sum_0_reg_91;
    sc_signal< sc_lv<2> > i_0_reg_103;
    sc_signal< sc_lv<2> > j_0_reg_114;
    sc_signal< sc_lv<2> > j_0_reg_114_pp1_iter1_reg;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state8_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state10_pp1_stage0_iter2;
    sc_signal< bool > ap_block_state11_pp1_stage0_iter3;
    sc_signal< bool > ap_block_state12_pp1_stage0_iter4;
    sc_signal< bool > ap_block_state13_pp1_stage0_iter5;
    sc_signal< bool > ap_block_state14_pp1_stage0_iter6;
    sc_signal< bool > ap_block_state15_pp1_stage0_iter7;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<2> > j_0_reg_114_pp1_iter2_reg;
    sc_signal< sc_lv<2> > j_0_reg_114_pp1_iter3_reg;
    sc_signal< sc_lv<2> > j_0_reg_114_pp1_iter4_reg;
    sc_signal< sc_lv<2> > j_0_reg_114_pp1_iter5_reg;
    sc_signal< sc_lv<2> > j_0_reg_114_pp1_iter6_reg;
    sc_signal< sc_lv<32> > grp_fu_139_p2;
    sc_signal< sc_lv<32> > reg_144;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln10_reg_212;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< sc_lv<1> > icmp_ln10_fu_150_p2;
    sc_signal< sc_lv<1> > icmp_ln10_reg_212_pp0_iter1_reg;
    sc_signal< sc_lv<2> > i_fu_156_p2;
    sc_signal< sc_lv<2> > i_reg_216;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > tmp_4_fu_162_p5;
    sc_signal< sc_lv<32> > grp_fu_126_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln16_fu_172_p2;
    sc_signal< sc_lv<1> > icmp_ln16_reg_231;
    sc_signal< sc_lv<2> > j_fu_178_p2;
    sc_signal< sc_lv<2> > j_reg_235;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<32> > tmp_6_fu_184_p5;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state8;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter7;
    sc_signal< sc_lv<2> > ap_phi_mux_i_0_phi_fu_107_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<2> > ap_phi_mux_j_0_phi_fu_118_p4;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<32> > grp_fu_131_p2;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<32> > grp_fu_139_p1;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_pp0_stage1;
    static const sc_lv<6> ap_ST_fsm_state7;
    static const sc_lv<6> ap_ST_fsm_pp1_stage0;
    static const sc_lv<6> ap_ST_fsm_state16;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_5;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state10_pp1_stage0_iter2();
    void thread_ap_block_state11_pp1_stage0_iter3();
    void thread_ap_block_state12_pp1_stage0_iter4();
    void thread_ap_block_state13_pp1_stage0_iter5();
    void thread_ap_block_state14_pp1_stage0_iter6();
    void thread_ap_block_state15_pp1_stage0_iter7();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_block_state8_pp1_stage0_iter0();
    void thread_ap_block_state9_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_i_0_phi_fu_107_p4();
    void thread_ap_phi_mux_j_0_phi_fu_118_p4();
    void thread_ap_ready();
    void thread_grp_fu_139_p1();
    void thread_i_fu_156_p2();
    void thread_icmp_ln10_fu_150_p2();
    void thread_icmp_ln16_fu_172_p2();
    void thread_j_fu_178_p2();
    void thread_pred_0();
    void thread_pred_0_ap_vld();
    void thread_pred_1();
    void thread_pred_1_ap_vld();
    void thread_pred_2();
    void thread_pred_2_ap_vld();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
