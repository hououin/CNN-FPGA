// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=31.958000,HLS_SYN_LAT=38,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=49,HLS_SYN_FF=3555,HLS_SYN_LUT=5331,HLS_VERSION=2020_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_0,
        flat_array_1,
        flat_array_2,
        flat_array_3,
        flat_array_4,
        flat_array_5,
        flat_array_6,
        flat_array_7,
        prediction_0,
        prediction_0_ap_vld,
        prediction_1,
        prediction_1_ap_vld,
        prediction_2,
        prediction_2_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_state13 = 5'd8;
parameter    ap_ST_fsm_state14 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] flat_array_0;
input  [31:0] flat_array_1;
input  [31:0] flat_array_2;
input  [31:0] flat_array_3;
input  [31:0] flat_array_4;
input  [31:0] flat_array_5;
input  [31:0] flat_array_6;
input  [31:0] flat_array_7;
output  [31:0] prediction_0;
output   prediction_0_ap_vld;
output  [31:0] prediction_1;
output   prediction_1_ap_vld;
output  [31:0] prediction_2;
output   prediction_2_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] d_0_reg_187;
reg   [1:0] d_0_reg_187_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] d_0_reg_187_pp0_iter2_reg;
reg   [1:0] d_0_reg_187_pp0_iter3_reg;
reg   [1:0] d_0_reg_187_pp0_iter4_reg;
reg   [1:0] d_0_reg_187_pp0_iter5_reg;
reg   [1:0] d_0_reg_187_pp0_iter6_reg;
reg   [1:0] d_0_reg_187_pp0_iter7_reg;
reg   [1:0] d_0_reg_187_pp0_iter8_reg;
wire   [1:0] add_ln26_fu_299_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln26_fu_357_p2;
wire   [0:0] icmp_ln29_fu_393_p2;
reg   [0:0] icmp_ln29_reg_600;
wire   [1:0] d_fu_399_p2;
reg   [1:0] d_reg_604;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] tmp_8_fu_405_p5;
wire   [31:0] grp_fu_252_p2;
wire   [31:0] tmp_9_fu_418_p5;
wire   [31:0] grp_fu_212_p2;
wire   [31:0] grp_fu_257_p2;
wire   [31:0] tmp_s_fu_431_p5;
wire   [31:0] grp_fu_217_p2;
wire   [31:0] grp_fu_262_p2;
wire   [31:0] tmp_10_fu_444_p5;
wire   [31:0] grp_fu_222_p2;
wire   [31:0] grp_fu_267_p2;
wire   [31:0] tmp_11_fu_457_p5;
wire   [31:0] grp_fu_227_p2;
wire   [31:0] grp_fu_272_p2;
wire   [31:0] tmp_12_fu_471_p5;
wire   [31:0] grp_fu_277_p2;
reg   [31:0] tmp_6_reg_686;
reg   [31:0] tmp_6_reg_686_pp0_iter6_reg;
wire   [31:0] grp_fu_232_p2;
wire   [31:0] grp_fu_281_p2;
wire   [31:0] grp_fu_286_p2;
reg   [31:0] tmp_7_reg_701;
reg   [31:0] tmp_7_reg_701_pp0_iter7_reg;
wire   [31:0] grp_fu_237_p2;
wire   [31:0] grp_fu_242_p2;
wire    ap_CS_fsm_state13;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
wire    grp_soft_max_fu_199_ap_start;
wire    grp_soft_max_fu_199_ap_done;
wire    grp_soft_max_fu_199_ap_idle;
wire    grp_soft_max_fu_199_ap_ready;
wire   [31:0] grp_soft_max_fu_199_pred_0;
wire    grp_soft_max_fu_199_pred_0_ap_vld;
wire   [31:0] grp_soft_max_fu_199_pred_1;
wire    grp_soft_max_fu_199_pred_1_ap_vld;
wire   [31:0] grp_soft_max_fu_199_pred_2;
wire    grp_soft_max_fu_199_pred_2_ap_vld;
reg   [1:0] phi_ln26_reg_176;
reg   [1:0] ap_phi_mux_d_0_phi_fu_191_p4;
wire    ap_block_pp0_stage0;
reg    grp_soft_max_fu_199_ap_start_reg;
wire    ap_CS_fsm_state14;
reg   [31:0] dense_array_0_0_fu_104;
wire   [31:0] dense_array_0_1_fu_325_p3;
reg   [31:0] dense_array_1_0_fu_108;
wire   [31:0] dense_array_1_1_fu_333_p3;
reg   [31:0] dense_array_2_0_fu_112;
wire   [31:0] dense_array_2_1_fu_349_p3;
reg   [31:0] dense_array_2_fu_116;
wire   [31:0] grp_fu_247_p2;
reg   [31:0] dense_array_2_3_fu_120;
reg   [31:0] dense_array_2_2_fu_124;
wire   [0:0] icmp_ln26_1_fu_305_p2;
wire   [0:0] icmp_ln26_2_fu_319_p2;
wire   [31:0] select_ln26_fu_311_p3;
wire   [31:0] select_ln26_1_fu_341_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 grp_soft_max_fu_199_ap_start_reg = 1'b0;
end

soft_max grp_soft_max_fu_199(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_soft_max_fu_199_ap_start),
    .ap_done(grp_soft_max_fu_199_ap_done),
    .ap_idle(grp_soft_max_fu_199_ap_idle),
    .ap_ready(grp_soft_max_fu_199_ap_ready),
    .dense_array_0_read(dense_array_2_fu_116),
    .dense_array_1_read(dense_array_2_3_fu_120),
    .dense_array_2_read(dense_array_2_2_fu_124),
    .pred_0(grp_soft_max_fu_199_pred_0),
    .pred_0_ap_vld(grp_soft_max_fu_199_pred_0_ap_vld),
    .pred_1(grp_soft_max_fu_199_pred_1),
    .pred_1_ap_vld(grp_soft_max_fu_199_pred_1_ap_vld),
    .pred_2(grp_soft_max_fu_199_pred_2),
    .pred_2_ap_vld(grp_soft_max_fu_199_pred_2_ap_vld)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_252_p2),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_212_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_212_p2),
    .din1(grp_fu_257_p2),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_217_p2),
    .din1(grp_fu_262_p2),
    .ce(1'b1),
    .dout(grp_fu_222_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_222_p2),
    .din1(grp_fu_267_p2),
    .ce(1'b1),
    .dout(grp_fu_227_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_227_p2),
    .din1(grp_fu_272_p2),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_232_p2),
    .din1(grp_fu_281_p2),
    .ce(1'b1),
    .dout(grp_fu_237_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_237_p2),
    .din1(tmp_6_reg_686_pp0_iter6_reg),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_242_p2),
    .din1(tmp_7_reg_701_pp0_iter7_reg),
    .ce(1'b1),
    .dout(grp_fu_247_p2)
);

dense_fmul_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3eOg_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_8_fu_405_p5),
    .din1(flat_array_0),
    .ce(1'b1),
    .dout(grp_fu_252_p2)
);

dense_fmul_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3eOg_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_fu_418_p5),
    .din1(flat_array_1),
    .ce(1'b1),
    .dout(grp_fu_257_p2)
);

dense_fmul_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3eOg_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_fu_431_p5),
    .din1(flat_array_2),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

dense_fmul_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3eOg_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_10_fu_444_p5),
    .din1(flat_array_3),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

dense_fmul_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3eOg_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_11_fu_457_p5),
    .din1(flat_array_4),
    .ce(1'b1),
    .dout(grp_fu_272_p2)
);

dense_fmul_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3eOg_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_11_fu_457_p5),
    .din1(flat_array_6),
    .ce(1'b1),
    .dout(grp_fu_277_p2)
);

dense_fmul_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3eOg_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_12_fu_471_p5),
    .din1(flat_array_5),
    .ce(1'b1),
    .dout(grp_fu_281_p2)
);

dense_fmul_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3eOg_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_12_fu_471_p5),
    .din1(flat_array_7),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U32(
    .din0(32'd1062327069),
    .din1(32'd3196711182),
    .din2(32'd1048864114),
    .din3(ap_phi_mux_d_0_phi_fu_191_p4),
    .dout(tmp_8_fu_405_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U33(
    .din0(32'd3158336446),
    .din1(32'd3208525578),
    .din2(32'd3209630702),
    .din3(d_0_reg_187),
    .dout(tmp_9_fu_418_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U34(
    .din0(32'd1062049939),
    .din1(32'd1025270479),
    .din2(32'd1062725747),
    .din3(d_0_reg_187_pp0_iter1_reg),
    .dout(tmp_s_fu_431_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U35(
    .din0(32'd3202682398),
    .din1(32'd1054330938),
    .din2(32'd3203452870),
    .din3(d_0_reg_187_pp0_iter2_reg),
    .dout(tmp_10_fu_444_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U36(
    .din0(32'd1042709668),
    .din1(32'd3207467163),
    .din2(32'd3206060690),
    .din3(d_0_reg_187_pp0_iter3_reg),
    .dout(tmp_11_fu_457_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U37(
    .din0(32'd3197416346),
    .din1(32'd3162476193),
    .din2(32'd3191281437),
    .din3(d_0_reg_187_pp0_iter4_reg),
    .dout(tmp_12_fu_471_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln26_fu_357_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if (((icmp_ln26_fu_357_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_soft_max_fu_199_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_soft_max_fu_199_ap_start_reg <= 1'b1;
        end else if ((grp_soft_max_fu_199_ap_ready == 1'b1)) begin
            grp_soft_max_fu_199_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        d_0_reg_187 <= d_reg_604;
    end else if (((icmp_ln26_fu_357_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        d_0_reg_187 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(d_0_reg_187_pp0_iter8_reg == 2'd1) & ~(d_0_reg_187_pp0_iter8_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        dense_array_2_2_fu_124 <= grp_fu_247_p2;
    end else if (((icmp_ln26_fu_357_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        dense_array_2_2_fu_124 <= dense_array_2_1_fu_349_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((d_0_reg_187_pp0_iter8_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        dense_array_2_3_fu_120 <= grp_fu_247_p2;
    end else if (((icmp_ln26_fu_357_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        dense_array_2_3_fu_120 <= dense_array_1_1_fu_333_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((d_0_reg_187_pp0_iter8_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        dense_array_2_fu_116 <= grp_fu_247_p2;
    end else if (((icmp_ln26_fu_357_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        dense_array_2_fu_116 <= dense_array_0_1_fu_325_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln26_reg_176 <= add_ln26_fu_299_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln26_reg_176 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_0_reg_187_pp0_iter1_reg <= d_0_reg_187;
        icmp_ln29_reg_600 <= icmp_ln29_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        d_0_reg_187_pp0_iter2_reg <= d_0_reg_187_pp0_iter1_reg;
        d_0_reg_187_pp0_iter3_reg <= d_0_reg_187_pp0_iter2_reg;
        d_0_reg_187_pp0_iter4_reg <= d_0_reg_187_pp0_iter3_reg;
        d_0_reg_187_pp0_iter5_reg <= d_0_reg_187_pp0_iter4_reg;
        d_0_reg_187_pp0_iter6_reg <= d_0_reg_187_pp0_iter5_reg;
        d_0_reg_187_pp0_iter7_reg <= d_0_reg_187_pp0_iter6_reg;
        d_0_reg_187_pp0_iter8_reg <= d_0_reg_187_pp0_iter7_reg;
        tmp_6_reg_686 <= grp_fu_277_p2;
        tmp_6_reg_686_pp0_iter6_reg <= tmp_6_reg_686;
        tmp_7_reg_701 <= grp_fu_286_p2;
        tmp_7_reg_701_pp0_iter7_reg <= tmp_7_reg_701;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_reg_604 <= d_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_0_0_fu_104 <= dense_array_0_1_fu_325_p3;
        dense_array_1_0_fu_108 <= dense_array_1_1_fu_333_p3;
        dense_array_2_0_fu_112 <= dense_array_2_1_fu_349_p3;
    end
end

always @ (*) begin
    if ((icmp_ln29_fu_393_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (grp_soft_max_fu_199_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_600 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_d_0_phi_fu_191_p4 = d_reg_604;
    end else begin
        ap_phi_mux_d_0_phi_fu_191_p4 = d_0_reg_187;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (grp_soft_max_fu_199_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln26_fu_357_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln29_fu_393_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln29_fu_393_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_soft_max_fu_199_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_299_p2 = (phi_ln26_reg_176 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign d_fu_399_p2 = (ap_phi_mux_d_0_phi_fu_191_p4 + 2'd1);

assign dense_array_0_1_fu_325_p3 = ((icmp_ln26_2_fu_319_p2[0:0] === 1'b1) ? dense_array_0_0_fu_104 : select_ln26_fu_311_p3);

assign dense_array_1_1_fu_333_p3 = ((icmp_ln26_2_fu_319_p2[0:0] === 1'b1) ? 32'd0 : dense_array_1_0_fu_108);

assign dense_array_2_1_fu_349_p3 = ((icmp_ln26_2_fu_319_p2[0:0] === 1'b1) ? dense_array_2_0_fu_112 : select_ln26_1_fu_341_p3);

assign grp_soft_max_fu_199_ap_start = grp_soft_max_fu_199_ap_start_reg;

assign icmp_ln26_1_fu_305_p2 = ((phi_ln26_reg_176 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_2_fu_319_p2 = ((phi_ln26_reg_176 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_357_p2 = ((phi_ln26_reg_176 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_393_p2 = ((ap_phi_mux_d_0_phi_fu_191_p4 == 2'd3) ? 1'b1 : 1'b0);

assign prediction_0 = grp_soft_max_fu_199_pred_0;

assign prediction_0_ap_vld = grp_soft_max_fu_199_pred_0_ap_vld;

assign prediction_1 = grp_soft_max_fu_199_pred_1;

assign prediction_1_ap_vld = grp_soft_max_fu_199_pred_1_ap_vld;

assign prediction_2 = grp_soft_max_fu_199_pred_2;

assign prediction_2_ap_vld = grp_soft_max_fu_199_pred_2_ap_vld;

assign select_ln26_1_fu_341_p3 = ((icmp_ln26_1_fu_305_p2[0:0] === 1'b1) ? dense_array_2_0_fu_112 : 32'd0);

assign select_ln26_fu_311_p3 = ((icmp_ln26_1_fu_305_p2[0:0] === 1'b1) ? 32'd0 : dense_array_0_0_fu_104);

endmodule //dense
