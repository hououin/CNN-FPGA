// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=32.701700,HLS_SYN_LAT=45,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=1591,HLS_SYN_LUT=4387,HLS_VERSION=2020_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_0,
        flat_array_1,
        flat_array_2,
        flat_array_3,
        flat_array_4,
        flat_array_5,
        flat_array_6,
        flat_array_7,
        prediction_0,
        prediction_0_ap_vld,
        prediction_1,
        prediction_1_ap_vld,
        prediction_2,
        prediction_2_ap_vld
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] flat_array_0;
input  [31:0] flat_array_1;
input  [31:0] flat_array_2;
input  [31:0] flat_array_3;
input  [31:0] flat_array_4;
input  [31:0] flat_array_5;
input  [31:0] flat_array_6;
input  [31:0] flat_array_7;
output  [31:0] prediction_0;
output   prediction_0_ap_vld;
output  [31:0] prediction_1;
output   prediction_1_ap_vld;
output  [31:0] prediction_2;
output   prediction_2_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg prediction_0_ap_vld;
reg prediction_1_ap_vld;
reg prediction_2_ap_vld;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_216_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_210_p2;
reg   [31:0] reg_252;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire   [1:0] add_ln26_fu_269_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln26_fu_327_p2;
wire   [1:0] d_fu_369_p2;
reg   [1:0] d_reg_572;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_fu_375_p5;
wire   [0:0] icmp_ln29_fu_363_p2;
wire   [31:0] tmp_8_fu_392_p5;
wire   [31:0] tmp_9_fu_405_p5;
wire   [31:0] tmp_s_fu_418_p5;
wire   [31:0] tmp_10_fu_431_p5;
wire   [31:0] tmp_11_fu_445_p5;
wire   [31:0] grp_fu_222_p2;
reg   [31:0] tmp_6_reg_614;
reg   [31:0] tmp_7_reg_619;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_241_p2;
reg   [31:0] tmp_i_reg_634;
reg   [31:0] tmp_1_i_reg_640;
wire    ap_CS_fsm_state15;
reg   [31:0] tmp_i_4_reg_646;
reg   [1:0] phi_ln26_reg_187;
reg   [1:0] d_0_reg_198;
wire    ap_CS_fsm_state12;
reg   [31:0] dense_array_0_0_fu_94;
wire   [31:0] dense_array_0_1_fu_295_p3;
reg   [31:0] dense_array_1_0_fu_98;
wire   [31:0] dense_array_1_1_fu_303_p3;
reg   [31:0] dense_array_2_0_fu_102;
wire   [31:0] dense_array_2_1_fu_319_p3;
reg   [31:0] dense_array_0_read_s_fu_106;
reg   [31:0] dense_array_1_read_s_fu_110;
reg   [31:0] dense_array_2_read_s_fu_114;
wire   [31:0] grp_fu_226_p2;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_231_p2;
wire   [31:0] grp_fu_236_p2;
reg   [31:0] grp_fu_210_p0;
reg   [31:0] grp_fu_210_p1;
reg   [31:0] grp_fu_216_p0;
reg   [31:0] grp_fu_216_p1;
reg   [31:0] grp_fu_222_p0;
reg   [31:0] grp_fu_222_p1;
wire    ap_CS_fsm_state19;
reg   [31:0] grp_fu_241_p1;
wire   [0:0] icmp_ln26_1_fu_275_p2;
wire   [0:0] icmp_ln26_2_fu_289_p2;
wire   [31:0] select_ln26_fu_281_p3;
wire   [31:0] select_ln26_1_fu_311_p3;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_210_p0),
    .din1(grp_fu_210_p1),
    .ce(1'b1),
    .dout(grp_fu_210_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_216_p0),
    .din1(grp_fu_216_p1),
    .ce(1'b1),
    .dout(grp_fu_216_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_222_p0),
    .din1(grp_fu_222_p1),
    .ce(1'b1),
    .dout(grp_fu_222_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_reg_634),
    .din1(reg_252),
    .ce(1'b1),
    .dout(grp_fu_226_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_i_reg_640),
    .din1(reg_252),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_4_reg_646),
    .din1(reg_252),
    .ce(1'b1),
    .dout(grp_fu_236_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_241_p1),
    .ce(1'b1),
    .dout(grp_fu_241_p2)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U8(
    .din0(32'd1062327069),
    .din1(32'd3196711182),
    .din2(32'd1048864114),
    .din3(d_0_reg_198),
    .dout(tmp_fu_375_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U9(
    .din0(32'd3158336446),
    .din1(32'd3208525578),
    .din2(32'd3209630702),
    .din3(d_0_reg_198),
    .dout(tmp_8_fu_392_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U10(
    .din0(32'd1062049939),
    .din1(32'd1025270479),
    .din2(32'd1062725747),
    .din3(d_0_reg_198),
    .dout(tmp_9_fu_405_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U11(
    .din0(32'd3202682398),
    .din1(32'd1054330938),
    .din2(32'd3203452870),
    .din3(d_0_reg_198),
    .dout(tmp_s_fu_418_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U12(
    .din0(32'd1042709668),
    .din1(32'd3207467163),
    .din2(32'd3206060690),
    .din3(d_0_reg_198),
    .dout(tmp_10_fu_431_p5)
);

dense_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
dense_mux_32_32_1_1_U13(
    .din0(32'd3197416346),
    .din1(32'd3162476193),
    .din2(32'd3191281437),
    .din3(d_0_reg_198),
    .dout(tmp_11_fu_445_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        d_0_reg_198 <= d_reg_572;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_327_p2 == 1'd1))) begin
        d_0_reg_198 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((d_0_reg_198 == 2'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        dense_array_0_read_s_fu_106 <= grp_fu_210_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_327_p2 == 1'd1))) begin
        dense_array_0_read_s_fu_106 <= dense_array_0_1_fu_295_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((d_0_reg_198 == 2'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        dense_array_1_read_s_fu_110 <= grp_fu_210_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_327_p2 == 1'd1))) begin
        dense_array_1_read_s_fu_110 <= dense_array_1_1_fu_303_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(d_0_reg_198 == 2'd1) & ~(d_0_reg_198 == 2'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        dense_array_2_read_s_fu_114 <= grp_fu_210_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_327_p2 == 1'd1))) begin
        dense_array_2_read_s_fu_114 <= dense_array_2_1_fu_319_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_327_p2 == 1'd0))) begin
        phi_ln26_reg_187 <= add_ln26_fu_269_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln26_reg_187 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_reg_572 <= d_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_0_0_fu_94 <= dense_array_0_1_fu_295_p3;
        dense_array_1_0_fu_98 <= dense_array_1_1_fu_303_p3;
        dense_array_2_0_fu_102 <= dense_array_2_1_fu_319_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_252 <= grp_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_1_i_reg_640 <= grp_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_6_reg_614 <= grp_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_7_reg_619 <= grp_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_i_4_reg_646 <= grp_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_i_reg_634 <= grp_fu_241_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_210_p0 = tmp_i_reg_634;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_210_p0 = grp_fu_210_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_210_p0 = grp_fu_216_p2;
    end else begin
        grp_fu_210_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_210_p1 = tmp_i_4_reg_646;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_210_p1 = tmp_1_i_reg_640;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_210_p1 = tmp_7_reg_619;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_210_p1 = tmp_6_reg_614;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_210_p1 = grp_fu_216_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_210_p1 = 32'd0;
    end else begin
        grp_fu_210_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_216_p0 = tmp_11_fu_445_p5;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_216_p0 = tmp_10_fu_431_p5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_216_p0 = tmp_s_fu_418_p5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_216_p0 = tmp_9_fu_405_p5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_216_p0 = tmp_8_fu_392_p5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_216_p0 = tmp_fu_375_p5;
    end else begin
        grp_fu_216_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_216_p1 = flat_array_5;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_216_p1 = flat_array_4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_216_p1 = flat_array_3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_216_p1 = flat_array_2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_216_p1 = flat_array_1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_216_p1 = flat_array_0;
    end else begin
        grp_fu_216_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_222_p0 = tmp_11_fu_445_p5;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_222_p0 = tmp_10_fu_431_p5;
    end else begin
        grp_fu_222_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_222_p1 = flat_array_7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_222_p1 = flat_array_6;
    end else begin
        grp_fu_222_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_241_p1 = dense_array_2_read_s_fu_114;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_241_p1 = dense_array_1_read_s_fu_110;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_241_p1 = dense_array_0_read_s_fu_106;
    end else begin
        grp_fu_241_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        prediction_0_ap_vld = 1'b1;
    end else begin
        prediction_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        prediction_1_ap_vld = 1'b1;
    end else begin
        prediction_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        prediction_2_ap_vld = 1'b1;
    end else begin
        prediction_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_327_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln29_fu_363_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_269_p2 = (phi_ln26_reg_187 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign d_fu_369_p2 = (d_0_reg_198 + 2'd1);

assign dense_array_0_1_fu_295_p3 = ((icmp_ln26_2_fu_289_p2[0:0] === 1'b1) ? dense_array_0_0_fu_94 : select_ln26_fu_281_p3);

assign dense_array_1_1_fu_303_p3 = ((icmp_ln26_2_fu_289_p2[0:0] === 1'b1) ? 32'd0 : dense_array_1_0_fu_98);

assign dense_array_2_1_fu_319_p3 = ((icmp_ln26_2_fu_289_p2[0:0] === 1'b1) ? dense_array_2_0_fu_102 : select_ln26_1_fu_311_p3);

assign icmp_ln26_1_fu_275_p2 = ((phi_ln26_reg_187 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_2_fu_289_p2 = ((phi_ln26_reg_187 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_327_p2 = ((phi_ln26_reg_187 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_363_p2 = ((d_0_reg_198 == 2'd3) ? 1'b1 : 1'b0);

assign prediction_0 = grp_fu_226_p2;

assign prediction_1 = grp_fu_231_p2;

assign prediction_2 = grp_fu_236_p2;

assign select_ln26_1_fu_311_p3 = ((icmp_ln26_1_fu_275_p2[0:0] === 1'b1) ? dense_array_2_0_fu_102 : 32'd0);

assign select_ln26_fu_281_p3 = ((icmp_ln26_1_fu_275_p2[0:0] === 1'b1) ? 32'd0 : dense_array_0_0_fu_94);

endmodule //dense
