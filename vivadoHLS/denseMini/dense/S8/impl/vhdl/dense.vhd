-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flat_array_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_0_ap_vld : OUT STD_LOGIC;
    prediction_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_1_ap_vld : OUT STD_LOGIC;
    prediction_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_2_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dense is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dense,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=32.701700,HLS_SYN_LAT=45,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=1591,HLS_SYN_LUT=4387,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_3F51D31D : STD_LOGIC_VECTOR (31 downto 0) := "00111111010100011101001100011101";
    constant ap_const_lv32_BE89F10E : STD_LOGIC_VECTOR (31 downto 0) := "10111110100010011111000100001110";
    constant ap_const_lv32_3E846572 : STD_LOGIC_VECTOR (31 downto 0) := "00111110100001000110010101110010";
    constant ap_const_lv32_BC4063BE : STD_LOGIC_VECTOR (31 downto 0) := "10111100010000000110001110111110";
    constant ap_const_lv32_BF3E370A : STD_LOGIC_VECTOR (31 downto 0) := "10111111001111100011011100001010";
    constant ap_const_lv32_BF4F13EE : STD_LOGIC_VECTOR (31 downto 0) := "10111111010011110001001111101110";
    constant ap_const_lv32_3F4D9893 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010011011001100010010011";
    constant ap_const_lv32_3D1C62CF : STD_LOGIC_VECTOR (31 downto 0) := "00111101000111000110001011001111";
    constant ap_const_lv32_3F57E873 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010101111110100001110011";
    constant ap_const_lv32_BEE50E1E : STD_LOGIC_VECTOR (31 downto 0) := "10111110111001010000111000011110";
    constant ap_const_lv32_3ED7D03A : STD_LOGIC_VECTOR (31 downto 0) := "00111110110101111101000000111010";
    constant ap_const_lv32_BEF0CFC6 : STD_LOGIC_VECTOR (31 downto 0) := "10111110111100001100111111000110";
    constant ap_const_lv32_3E267CA4 : STD_LOGIC_VECTOR (31 downto 0) := "00111110001001100111110010100100";
    constant ap_const_lv32_BF2E109B : STD_LOGIC_VECTOR (31 downto 0) := "10111111001011100001000010011011";
    constant ap_const_lv32_BF189A92 : STD_LOGIC_VECTOR (31 downto 0) := "10111111000110001001101010010010";
    constant ap_const_lv32_BE94B39A : STD_LOGIC_VECTOR (31 downto 0) := "10111110100101001011001110011010";
    constant ap_const_lv32_BC7F8EA1 : STD_LOGIC_VECTOR (31 downto 0) := "10111100011111111000111010100001";
    constant ap_const_lv32_BE37171D : STD_LOGIC_VECTOR (31 downto 0) := "10111110001101110001011100011101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln26_fu_269_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln26_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_fu_369_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_reg_572 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_375_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_392_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_405_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_418_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_431_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_445_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_i_4_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln26_reg_187 : STD_LOGIC_VECTOR (1 downto 0);
    signal d_0_reg_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal dense_array_0_0_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_0_1_fu_295_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_1_0_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_1_1_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_2_0_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_2_1_fu_319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_0_read_s_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_1_read_s_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_array_2_read_s_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_216_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_2_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_fu_281_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_1_fu_311_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component dense_fadd_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_fdiv_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_fexp_32ns_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_fadd_32ns_3bkb_U1 : component dense_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_210_p0,
        din1 => grp_fu_210_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_210_p2);

    dense_fmul_32ns_3cud_U2 : component dense_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_216_p0,
        din1 => grp_fu_216_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_216_p2);

    dense_fmul_32ns_3cud_U3 : component dense_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_222_p0,
        din1 => grp_fu_222_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_222_p2);

    dense_fdiv_32ns_3dEe_U4 : component dense_fdiv_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_634,
        din1 => reg_252,
        ce => ap_const_logic_1,
        dout => grp_fu_226_p2);

    dense_fdiv_32ns_3dEe_U5 : component dense_fdiv_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_i_reg_640,
        din1 => reg_252,
        ce => ap_const_logic_1,
        dout => grp_fu_231_p2);

    dense_fdiv_32ns_3dEe_U6 : component dense_fdiv_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_4_reg_646,
        din1 => reg_252,
        ce => ap_const_logic_1,
        dout => grp_fu_236_p2);

    dense_fexp_32ns_3eOg_U7 : component dense_fexp_32ns_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_241_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);

    dense_mux_32_32_1_1_U8 : component dense_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F51D31D,
        din1 => ap_const_lv32_BE89F10E,
        din2 => ap_const_lv32_3E846572,
        din3 => d_0_reg_198,
        dout => tmp_fu_375_p5);

    dense_mux_32_32_1_1_U9 : component dense_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BC4063BE,
        din1 => ap_const_lv32_BF3E370A,
        din2 => ap_const_lv32_BF4F13EE,
        din3 => d_0_reg_198,
        dout => tmp_8_fu_392_p5);

    dense_mux_32_32_1_1_U10 : component dense_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F4D9893,
        din1 => ap_const_lv32_3D1C62CF,
        din2 => ap_const_lv32_3F57E873,
        din3 => d_0_reg_198,
        dout => tmp_9_fu_405_p5);

    dense_mux_32_32_1_1_U11 : component dense_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BEE50E1E,
        din1 => ap_const_lv32_3ED7D03A,
        din2 => ap_const_lv32_BEF0CFC6,
        din3 => d_0_reg_198,
        dout => tmp_s_fu_418_p5);

    dense_mux_32_32_1_1_U12 : component dense_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3E267CA4,
        din1 => ap_const_lv32_BF2E109B,
        din2 => ap_const_lv32_BF189A92,
        din3 => d_0_reg_198,
        dout => tmp_10_fu_431_p5);

    dense_mux_32_32_1_1_U13 : component dense_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BE94B39A,
        din1 => ap_const_lv32_BC7F8EA1,
        din2 => ap_const_lv32_BE37171D,
        din3 => d_0_reg_198,
        dout => tmp_11_fu_445_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                d_0_reg_198 <= d_reg_572;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_327_p2 = ap_const_lv1_1))) then 
                d_0_reg_198 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    dense_array_0_read_s_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((d_0_reg_198 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                dense_array_0_read_s_fu_106 <= grp_fu_210_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_327_p2 = ap_const_lv1_1))) then 
                dense_array_0_read_s_fu_106 <= dense_array_0_1_fu_295_p3;
            end if; 
        end if;
    end process;

    dense_array_1_read_s_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((d_0_reg_198 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                dense_array_1_read_s_fu_110 <= grp_fu_210_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_327_p2 = ap_const_lv1_1))) then 
                dense_array_1_read_s_fu_110 <= dense_array_1_1_fu_303_p3;
            end if; 
        end if;
    end process;

    dense_array_2_read_s_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((d_0_reg_198 = ap_const_lv2_1)) and not((d_0_reg_198 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                dense_array_2_read_s_fu_114 <= grp_fu_210_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_327_p2 = ap_const_lv1_1))) then 
                dense_array_2_read_s_fu_114 <= dense_array_2_1_fu_319_p3;
            end if; 
        end if;
    end process;

    phi_ln26_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_327_p2 = ap_const_lv1_0))) then 
                phi_ln26_reg_187 <= add_ln26_fu_269_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln26_reg_187 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                d_reg_572 <= d_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                dense_array_0_0_fu_94 <= dense_array_0_1_fu_295_p3;
                dense_array_1_0_fu_98 <= dense_array_1_1_fu_303_p3;
                dense_array_2_0_fu_102 <= dense_array_2_1_fu_319_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_252 <= grp_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_1_i_reg_640 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_6_reg_614 <= grp_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_7_reg_619 <= grp_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_i_4_reg_646 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_i_reg_634 <= grp_fu_241_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln26_fu_327_p2, ap_CS_fsm_state3, icmp_ln29_fu_363_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_327_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln29_fu_363_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_fu_269_p2 <= std_logic_vector(unsigned(phi_ln26_reg_187) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_369_p2 <= std_logic_vector(unsigned(d_0_reg_198) + unsigned(ap_const_lv2_1));
    dense_array_0_1_fu_295_p3 <= 
        dense_array_0_0_fu_94 when (icmp_ln26_2_fu_289_p2(0) = '1') else 
        select_ln26_fu_281_p3;
    dense_array_1_1_fu_303_p3 <= 
        ap_const_lv32_0 when (icmp_ln26_2_fu_289_p2(0) = '1') else 
        dense_array_1_0_fu_98;
    dense_array_2_1_fu_319_p3 <= 
        dense_array_2_0_fu_102 when (icmp_ln26_2_fu_289_p2(0) = '1') else 
        select_ln26_1_fu_311_p3;

    grp_fu_210_p0_assign_proc : process(grp_fu_216_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_fu_210_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, tmp_i_reg_634, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_210_p0 <= tmp_i_reg_634;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_210_p0 <= grp_fu_210_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_210_p0 <= grp_fu_216_p2;
        else 
            grp_fu_210_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_210_p1_assign_proc : process(grp_fu_216_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, tmp_6_reg_614, tmp_7_reg_619, tmp_1_i_reg_640, ap_CS_fsm_state15, tmp_i_4_reg_646)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_210_p1 <= tmp_i_4_reg_646;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_210_p1 <= tmp_1_i_reg_640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_210_p1 <= tmp_7_reg_619;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_210_p1 <= tmp_6_reg_614;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_210_p1 <= grp_fu_216_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_210_p1 <= ap_const_lv32_0;
        else 
            grp_fu_210_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_216_p0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state3, tmp_fu_375_p5, tmp_8_fu_392_p5, tmp_9_fu_405_p5, tmp_s_fu_418_p5, tmp_10_fu_431_p5, tmp_11_fu_445_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_216_p0 <= tmp_11_fu_445_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_216_p0 <= tmp_10_fu_431_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_216_p0 <= tmp_s_fu_418_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_216_p0 <= tmp_9_fu_405_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_216_p0 <= tmp_8_fu_392_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_216_p0 <= tmp_fu_375_p5;
        else 
            grp_fu_216_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_216_p1_assign_proc : process(flat_array_0, flat_array_1, flat_array_2, flat_array_3, flat_array_4, flat_array_5, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_216_p1 <= flat_array_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_216_p1 <= flat_array_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_216_p1 <= flat_array_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_216_p1 <= flat_array_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_216_p1 <= flat_array_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_216_p1 <= flat_array_0;
        else 
            grp_fu_216_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_p0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_10_fu_431_p5, tmp_11_fu_445_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_222_p0 <= tmp_11_fu_445_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_222_p0 <= tmp_10_fu_431_p5;
        else 
            grp_fu_222_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_p1_assign_proc : process(flat_array_6, flat_array_7, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_222_p1 <= flat_array_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_222_p1 <= flat_array_6;
        else 
            grp_fu_222_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_241_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state14, dense_array_0_read_s_fu_106, dense_array_1_read_s_fu_110, dense_array_2_read_s_fu_114)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_241_p1 <= dense_array_2_read_s_fu_114;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_241_p1 <= dense_array_1_read_s_fu_110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_241_p1 <= dense_array_0_read_s_fu_106;
        else 
            grp_fu_241_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln26_1_fu_275_p2 <= "1" when (phi_ln26_reg_187 = ap_const_lv2_0) else "0";
    icmp_ln26_2_fu_289_p2 <= "1" when (phi_ln26_reg_187 = ap_const_lv2_1) else "0";
    icmp_ln26_fu_327_p2 <= "1" when (phi_ln26_reg_187 = ap_const_lv2_2) else "0";
    icmp_ln29_fu_363_p2 <= "1" when (d_0_reg_198 = ap_const_lv2_3) else "0";
    prediction_0 <= grp_fu_226_p2;

    prediction_0_ap_vld_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            prediction_0_ap_vld <= ap_const_logic_1;
        else 
            prediction_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    prediction_1 <= grp_fu_231_p2;

    prediction_1_ap_vld_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            prediction_1_ap_vld <= ap_const_logic_1;
        else 
            prediction_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    prediction_2 <= grp_fu_236_p2;

    prediction_2_ap_vld_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            prediction_2_ap_vld <= ap_const_logic_1;
        else 
            prediction_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln26_1_fu_311_p3 <= 
        dense_array_2_0_fu_102 when (icmp_ln26_1_fu_275_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln26_fu_281_p3 <= 
        ap_const_lv32_0 when (icmp_ln26_1_fu_275_p2(0) = '1') else 
        dense_array_0_0_fu_94;
end behav;
