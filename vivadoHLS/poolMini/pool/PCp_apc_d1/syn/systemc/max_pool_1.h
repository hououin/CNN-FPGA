// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_1_HH_
#define _max_pool_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "max_pool_1_fcmp_3bkb.h"
#include "max_pool_1_mux_42cud.h"

namespace ap_rtl {

struct max_pool_1 : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > conv_1_out_0_address0;
    sc_out< sc_logic > conv_1_out_0_ce0;
    sc_in< sc_lv<32> > conv_1_out_0_q0;
    sc_out< sc_lv<3> > conv_1_out_1_address0;
    sc_out< sc_logic > conv_1_out_1_ce0;
    sc_in< sc_lv<32> > conv_1_out_1_q0;
    sc_out< sc_lv<3> > conv_1_out_2_address0;
    sc_out< sc_logic > conv_1_out_2_ce0;
    sc_in< sc_lv<32> > conv_1_out_2_q0;
    sc_out< sc_lv<3> > conv_1_out_3_address0;
    sc_out< sc_logic > conv_1_out_3_ce0;
    sc_in< sc_lv<32> > conv_1_out_3_q0;
    sc_out< sc_lv<3> > max_pool_1_out_address0;
    sc_out< sc_logic > max_pool_1_out_ce0;
    sc_out< sc_logic > max_pool_1_out_we0;
    sc_out< sc_lv<32> > max_pool_1_out_d0;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    max_pool_1(sc_module_name name);
    SC_HAS_PROCESS(max_pool_1);

    ~max_pool_1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    max_pool_1_fcmp_3bkb<1,1,32,32,1>* max_pool_1_fcmp_3bkb_U1;
    max_pool_1_mux_42cud<1,1,32,32,32,32,2,32>* max_pool_1_mux_42cud_U2;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > indvar_flatten_reg_213;
    sc_signal< sc_lv<2> > mpr_0_reg_224;
    sc_signal< sc_lv<32> > max_1_reg_235;
    sc_signal< sc_lv<2> > mpc_0_reg_248;
    sc_signal< sc_lv<1> > icmp_ln10_fu_270_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > add_ln10_fu_276_p2;
    sc_signal< sc_lv<4> > add_ln10_reg_639;
    sc_signal< sc_lv<1> > icmp_ln13_fu_288_p2;
    sc_signal< sc_lv<1> > icmp_ln13_reg_644;
    sc_signal< sc_lv<2> > select_ln28_1_fu_302_p3;
    sc_signal< sc_lv<2> > select_ln28_1_reg_649;
    sc_signal< sc_lv<4> > zext_ln28_fu_310_p1;
    sc_signal< sc_lv<4> > zext_ln28_reg_654;
    sc_signal< sc_lv<5> > zext_ln28_1_fu_314_p1;
    sc_signal< sc_lv<5> > zext_ln28_1_reg_659;
    sc_signal< sc_lv<2> > select_ln35_fu_356_p3;
    sc_signal< sc_lv<2> > select_ln35_reg_664;
    sc_signal< sc_lv<2> > select_ln35_1_fu_364_p3;
    sc_signal< sc_lv<2> > select_ln35_1_reg_670;
    sc_signal< sc_lv<4> > zext_ln35_fu_380_p1;
    sc_signal< sc_lv<4> > zext_ln35_reg_675;
    sc_signal< sc_lv<2> > select_ln35_2_fu_390_p3;
    sc_signal< sc_lv<2> > select_ln35_2_reg_680;
    sc_signal< sc_lv<2> > shl_ln26_fu_398_p2;
    sc_signal< sc_lv<2> > shl_ln26_reg_685;
    sc_signal< sc_lv<1> > icmp_ln20_fu_404_p2;
    sc_signal< sc_lv<1> > icmp_ln20_reg_690;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > add_ln20_fu_410_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > select_ln28_4_fu_436_p3;
    sc_signal< sc_lv<2> > select_ln28_4_reg_699;
    sc_signal< sc_lv<2> > mpc_fu_474_p2;
    sc_signal< sc_lv<32> > max_2_fu_583_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<2> > c_fu_617_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > select_ln13_fu_628_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<4> > indvar_flatten23_reg_157;
    sc_signal< sc_lv<2> > f_0_reg_168;
    sc_signal< sc_lv<4> > indvar_flatten7_reg_179;
    sc_signal< sc_lv<2> > r_0_reg_191;
    sc_signal< sc_lv<2> > c_0_reg_202;
    sc_signal< sc_lv<2> > ap_phi_mux_mpr_0_phi_fu_228_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln28_3_fu_466_p1;
    sc_signal< sc_lv<64> > zext_ln35_2_fu_612_p1;
    sc_signal< sc_lv<32> > max_fu_484_p6;
    sc_signal< sc_lv<2> > f_fu_282_p2;
    sc_signal< sc_lv<2> > shl_ln25_fu_264_p2;
    sc_signal< sc_lv<1> > icmp_ln16_fu_332_p2;
    sc_signal< sc_lv<1> > xor_ln28_fu_326_p2;
    sc_signal< sc_lv<2> > select_ln28_fu_294_p3;
    sc_signal< sc_lv<1> > and_ln28_2_fu_338_p2;
    sc_signal< sc_lv<1> > or_ln35_fu_350_p2;
    sc_signal< sc_lv<2> > r_fu_344_p2;
    sc_signal< sc_lv<3> > tmp_fu_372_p3;
    sc_signal< sc_lv<2> > shl_ln25_1_fu_384_p2;
    sc_signal< sc_lv<2> > select_ln28_2_fu_318_p3;
    sc_signal< sc_lv<1> > icmp_ln23_fu_422_p2;
    sc_signal< sc_lv<2> > mpr_fu_416_p2;
    sc_signal< sc_lv<2> > select_ln28_3_fu_428_p3;
    sc_signal< sc_lv<2> > j_fu_444_p2;
    sc_signal< sc_lv<3> > tmp_s_fu_449_p3;
    sc_signal< sc_lv<4> > zext_ln28_2_fu_457_p1;
    sc_signal< sc_lv<4> > add_ln28_1_fu_461_p2;
    sc_signal< sc_lv<2> > max_fu_484_p5;
    sc_signal< sc_lv<32> > bitcast_ln28_fu_499_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_1_fu_517_p1;
    sc_signal< sc_lv<8> > tmp_6_fu_503_p4;
    sc_signal< sc_lv<23> > trunc_ln28_fu_513_p1;
    sc_signal< sc_lv<1> > icmp_ln28_1_fu_541_p2;
    sc_signal< sc_lv<1> > icmp_ln28_fu_535_p2;
    sc_signal< sc_lv<8> > tmp_7_fu_521_p4;
    sc_signal< sc_lv<23> > trunc_ln28_1_fu_531_p1;
    sc_signal< sc_lv<1> > icmp_ln28_3_fu_559_p2;
    sc_signal< sc_lv<1> > icmp_ln28_2_fu_553_p2;
    sc_signal< sc_lv<1> > or_ln28_fu_547_p2;
    sc_signal< sc_lv<1> > or_ln28_1_fu_565_p2;
    sc_signal< sc_lv<1> > and_ln28_fu_571_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_259_p2;
    sc_signal< sc_lv<1> > and_ln28_1_fu_577_p2;
    sc_signal< sc_lv<4> > zext_ln35_1_fu_591_p1;
    sc_signal< sc_lv<4> > add_ln35_fu_594_p2;
    sc_signal< sc_lv<5> > tmp_10_cast_fu_599_p3;
    sc_signal< sc_lv<5> > add_ln35_1_fu_607_p2;
    sc_signal< sc_lv<4> > add_ln13_1_fu_622_p2;
    sc_signal< bool > ap_block_pp0_stage0_00001;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_800000;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln10_fu_276_p2();
    void thread_add_ln13_1_fu_622_p2();
    void thread_add_ln20_fu_410_p2();
    void thread_add_ln28_1_fu_461_p2();
    void thread_add_ln35_1_fu_607_p2();
    void thread_add_ln35_fu_594_p2();
    void thread_and_ln28_1_fu_577_p2();
    void thread_and_ln28_2_fu_338_p2();
    void thread_and_ln28_fu_571_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_00001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_mpr_0_phi_fu_228_p4();
    void thread_ap_ready();
    void thread_bitcast_ln28_1_fu_517_p1();
    void thread_bitcast_ln28_fu_499_p1();
    void thread_c_fu_617_p2();
    void thread_conv_1_out_0_address0();
    void thread_conv_1_out_0_ce0();
    void thread_conv_1_out_1_address0();
    void thread_conv_1_out_1_ce0();
    void thread_conv_1_out_2_address0();
    void thread_conv_1_out_2_ce0();
    void thread_conv_1_out_3_address0();
    void thread_conv_1_out_3_ce0();
    void thread_f_fu_282_p2();
    void thread_icmp_ln10_fu_270_p2();
    void thread_icmp_ln13_fu_288_p2();
    void thread_icmp_ln16_fu_332_p2();
    void thread_icmp_ln20_fu_404_p2();
    void thread_icmp_ln23_fu_422_p2();
    void thread_icmp_ln28_1_fu_541_p2();
    void thread_icmp_ln28_2_fu_553_p2();
    void thread_icmp_ln28_3_fu_559_p2();
    void thread_icmp_ln28_fu_535_p2();
    void thread_j_fu_444_p2();
    void thread_max_2_fu_583_p3();
    void thread_max_fu_484_p5();
    void thread_max_pool_1_out_address0();
    void thread_max_pool_1_out_ce0();
    void thread_max_pool_1_out_d0();
    void thread_max_pool_1_out_we0();
    void thread_mpc_fu_474_p2();
    void thread_mpr_fu_416_p2();
    void thread_or_ln28_1_fu_565_p2();
    void thread_or_ln28_fu_547_p2();
    void thread_or_ln35_fu_350_p2();
    void thread_r_fu_344_p2();
    void thread_select_ln13_fu_628_p3();
    void thread_select_ln28_1_fu_302_p3();
    void thread_select_ln28_2_fu_318_p3();
    void thread_select_ln28_3_fu_428_p3();
    void thread_select_ln28_4_fu_436_p3();
    void thread_select_ln28_fu_294_p3();
    void thread_select_ln35_1_fu_364_p3();
    void thread_select_ln35_2_fu_390_p3();
    void thread_select_ln35_fu_356_p3();
    void thread_shl_ln25_1_fu_384_p2();
    void thread_shl_ln25_fu_264_p2();
    void thread_shl_ln26_fu_398_p2();
    void thread_tmp_10_cast_fu_599_p3();
    void thread_tmp_6_fu_503_p4();
    void thread_tmp_7_fu_521_p4();
    void thread_tmp_fu_372_p3();
    void thread_tmp_s_fu_449_p3();
    void thread_trunc_ln28_1_fu_531_p1();
    void thread_trunc_ln28_fu_513_p1();
    void thread_xor_ln28_fu_326_p2();
    void thread_zext_ln28_1_fu_314_p1();
    void thread_zext_ln28_2_fu_457_p1();
    void thread_zext_ln28_3_fu_466_p1();
    void thread_zext_ln28_fu_310_p1();
    void thread_zext_ln35_1_fu_591_p1();
    void thread_zext_ln35_2_fu_612_p1();
    void thread_zext_ln35_fu_380_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
