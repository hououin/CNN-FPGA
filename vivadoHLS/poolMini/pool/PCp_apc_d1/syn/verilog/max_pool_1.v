// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.693500,HLS_SYN_LAT=57,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=81,HLS_SYN_LUT=543,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_2_address0,
        conv_1_out_2_ce0,
        conv_1_out_2_q0,
        conv_1_out_3_address0,
        conv_1_out_3_ce0,
        conv_1_out_3_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [2:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [2:0] conv_1_out_2_address0;
output   conv_1_out_2_ce0;
input  [31:0] conv_1_out_2_q0;
output  [2:0] conv_1_out_3_address0;
output   conv_1_out_3_ce0;
input  [31:0] conv_1_out_3_q0;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_0_ce0;
reg conv_1_out_1_ce0;
reg conv_1_out_2_ce0;
reg conv_1_out_3_ce0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] indvar_flatten_reg_213;
reg   [1:0] mpr_0_reg_224;
reg   [31:0] max_1_reg_235;
reg   [1:0] mpc_0_reg_248;
wire   [0:0] icmp_ln10_fu_270_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln10_fu_276_p2;
reg   [3:0] add_ln10_reg_639;
wire   [0:0] icmp_ln13_fu_288_p2;
reg   [0:0] icmp_ln13_reg_644;
wire   [1:0] select_ln28_1_fu_302_p3;
reg   [1:0] select_ln28_1_reg_649;
wire   [3:0] zext_ln28_fu_310_p1;
reg   [3:0] zext_ln28_reg_654;
wire   [4:0] zext_ln28_1_fu_314_p1;
reg   [4:0] zext_ln28_1_reg_659;
wire   [1:0] select_ln35_fu_356_p3;
reg   [1:0] select_ln35_reg_664;
wire   [1:0] select_ln35_1_fu_364_p3;
reg   [1:0] select_ln35_1_reg_670;
wire   [3:0] zext_ln35_fu_380_p1;
reg   [3:0] zext_ln35_reg_675;
wire   [1:0] select_ln35_2_fu_390_p3;
reg   [1:0] select_ln35_2_reg_680;
wire   [1:0] shl_ln26_fu_398_p2;
reg   [1:0] shl_ln26_reg_685;
wire   [0:0] icmp_ln20_fu_404_p2;
reg   [0:0] icmp_ln20_reg_690;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] add_ln20_fu_410_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln28_4_fu_436_p3;
reg   [1:0] select_ln28_4_reg_699;
wire   [1:0] mpc_fu_474_p2;
wire   [31:0] max_2_fu_583_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [1:0] c_fu_617_p2;
wire    ap_CS_fsm_state5;
wire   [3:0] select_ln13_fu_628_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [3:0] indvar_flatten23_reg_157;
reg   [1:0] f_0_reg_168;
reg   [3:0] indvar_flatten7_reg_179;
reg   [1:0] r_0_reg_191;
reg   [1:0] c_0_reg_202;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_228_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_3_fu_466_p1;
wire   [63:0] zext_ln35_2_fu_612_p1;
wire   [31:0] max_fu_484_p6;
wire   [1:0] f_fu_282_p2;
wire   [1:0] shl_ln25_fu_264_p2;
wire   [0:0] icmp_ln16_fu_332_p2;
wire   [0:0] xor_ln28_fu_326_p2;
wire   [1:0] select_ln28_fu_294_p3;
wire   [0:0] and_ln28_2_fu_338_p2;
wire   [0:0] or_ln35_fu_350_p2;
wire   [1:0] r_fu_344_p2;
wire   [2:0] tmp_fu_372_p3;
wire   [1:0] shl_ln25_1_fu_384_p2;
wire   [1:0] select_ln28_2_fu_318_p3;
wire   [0:0] icmp_ln23_fu_422_p2;
wire   [1:0] mpr_fu_416_p2;
wire   [1:0] select_ln28_3_fu_428_p3;
wire   [1:0] j_fu_444_p2;
wire   [2:0] tmp_s_fu_449_p3;
wire   [3:0] zext_ln28_2_fu_457_p1;
wire   [3:0] add_ln28_1_fu_461_p2;
wire   [1:0] max_fu_484_p5;
wire   [31:0] bitcast_ln28_fu_499_p1;
wire   [31:0] bitcast_ln28_1_fu_517_p1;
wire   [7:0] tmp_6_fu_503_p4;
wire   [22:0] trunc_ln28_fu_513_p1;
wire   [0:0] icmp_ln28_1_fu_541_p2;
wire   [0:0] icmp_ln28_fu_535_p2;
wire   [7:0] tmp_7_fu_521_p4;
wire   [22:0] trunc_ln28_1_fu_531_p1;
wire   [0:0] icmp_ln28_3_fu_559_p2;
wire   [0:0] icmp_ln28_2_fu_553_p2;
wire   [0:0] or_ln28_fu_547_p2;
wire   [0:0] or_ln28_1_fu_565_p2;
wire   [0:0] and_ln28_fu_571_p2;
wire   [0:0] tmp_8_fu_259_p2;
wire   [0:0] and_ln28_1_fu_577_p2;
wire   [3:0] zext_ln35_1_fu_591_p1;
wire   [3:0] add_ln35_fu_594_p2;
wire   [4:0] tmp_10_cast_fu_599_p3;
wire   [4:0] add_ln35_1_fu_607_p2;
wire   [3:0] add_ln13_1_fu_622_p2;
wire    ap_block_pp0_stage0_00001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(max_fu_484_p6),
    .din1(max_1_reg_235),
    .opcode(5'd2),
    .dout(tmp_8_fu_259_p2)
);

max_pool_1_mux_42cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
max_pool_1_mux_42cud_U2(
    .din0(conv_1_out_0_q0),
    .din1(conv_1_out_1_q0),
    .din2(conv_1_out_2_q0),
    .din3(conv_1_out_3_q0),
    .din4(max_fu_484_p5),
    .dout(max_fu_484_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln10_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln10_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_0_reg_202 <= c_fu_617_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_202 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        f_0_reg_168 <= select_ln28_1_reg_649;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_168 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten23_reg_157 <= add_ln10_reg_639;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten23_reg_157 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten7_reg_179 <= select_ln13_fu_628_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten7_reg_179 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_213 <= add_ln20_fu_410_p2;
    end else if (((icmp_ln10_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_213 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_690 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_1_reg_235 <= max_2_fu_583_p3;
    end else if (((icmp_ln10_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        max_1_reg_235 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mpc_0_reg_248 <= mpc_fu_474_p2;
    end else if (((icmp_ln10_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mpc_0_reg_248 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_690 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mpr_0_reg_224 <= select_ln28_4_reg_699;
    end else if (((icmp_ln10_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mpr_0_reg_224 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_0_reg_191 <= select_ln35_1_reg_670;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_191 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln10_reg_639 <= add_ln10_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln13_reg_644 <= icmp_ln13_fu_288_p2;
        select_ln28_1_reg_649 <= select_ln28_1_fu_302_p3;
        select_ln35_1_reg_670 <= select_ln35_1_fu_364_p3;
        select_ln35_2_reg_680[1] <= select_ln35_2_fu_390_p3[1];
        select_ln35_reg_664 <= select_ln35_fu_356_p3;
        shl_ln26_reg_685[1] <= shl_ln26_fu_398_p2[1];
        zext_ln28_1_reg_659[1 : 0] <= zext_ln28_1_fu_314_p1[1 : 0];
        zext_ln28_reg_654[1 : 0] <= zext_ln28_fu_310_p1[1 : 0];
        zext_ln35_reg_675[2 : 1] <= zext_ln35_fu_380_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln20_reg_690 <= icmp_ln20_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln28_4_reg_699 <= select_ln28_4_fu_436_p3;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_404_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_690 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_228_p4 = select_ln28_4_reg_699;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_228_p4 = mpr_0_reg_224;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_2_ce0 = 1'b1;
    end else begin
        conv_1_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_3_ce0 = 1'b1;
    end else begin
        conv_1_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln20_fu_404_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln20_fu_404_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_276_p2 = (4'd1 + indvar_flatten23_reg_157);

assign add_ln13_1_fu_622_p2 = (indvar_flatten7_reg_179 + 4'd1);

assign add_ln20_fu_410_p2 = (indvar_flatten_reg_213 + 3'd1);

assign add_ln28_1_fu_461_p2 = (zext_ln28_2_fu_457_p1 + zext_ln28_reg_654);

assign add_ln35_1_fu_607_p2 = (tmp_10_cast_fu_599_p3 + zext_ln28_1_reg_659);

assign add_ln35_fu_594_p2 = (zext_ln35_reg_675 + zext_ln35_1_fu_591_p1);

assign and_ln28_1_fu_577_p2 = (tmp_8_fu_259_p2 & and_ln28_fu_571_p2);

assign and_ln28_2_fu_338_p2 = (xor_ln28_fu_326_p2 & icmp_ln16_fu_332_p2);

assign and_ln28_fu_571_p2 = (or_ln28_fu_547_p2 & or_ln28_1_fu_565_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_517_p1 = max_1_reg_235;

assign bitcast_ln28_fu_499_p1 = max_fu_484_p6;

assign c_fu_617_p2 = (select_ln35_reg_664 + 2'd1);

assign conv_1_out_0_address0 = zext_ln28_3_fu_466_p1;

assign conv_1_out_1_address0 = zext_ln28_3_fu_466_p1;

assign conv_1_out_2_address0 = zext_ln28_3_fu_466_p1;

assign conv_1_out_3_address0 = zext_ln28_3_fu_466_p1;

assign f_fu_282_p2 = (2'd1 + f_0_reg_168);

assign icmp_ln10_fu_270_p2 = ((indvar_flatten23_reg_157 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_288_p2 = ((indvar_flatten7_reg_179 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_332_p2 = ((c_0_reg_202 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_404_p2 = ((indvar_flatten_reg_213 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_422_p2 = ((mpc_0_reg_248 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_541_p2 = ((trunc_ln28_fu_513_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_553_p2 = ((tmp_7_fu_521_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_559_p2 = ((trunc_ln28_1_fu_531_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_535_p2 = ((tmp_6_fu_503_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_fu_444_p2 = (shl_ln26_reg_685 + select_ln28_3_fu_428_p3);

assign max_2_fu_583_p3 = ((and_ln28_1_fu_577_p2[0:0] === 1'b1) ? max_fu_484_p6 : max_1_reg_235);

assign max_fu_484_p5 = (select_ln35_2_reg_680 + select_ln28_4_reg_699);

assign max_pool_1_out_address0 = zext_ln35_2_fu_612_p1;

assign max_pool_1_out_d0 = max_1_reg_235;

assign mpc_fu_474_p2 = (2'd1 + select_ln28_3_fu_428_p3);

assign mpr_fu_416_p2 = (2'd1 + ap_phi_mux_mpr_0_phi_fu_228_p4);

assign or_ln28_1_fu_565_p2 = (icmp_ln28_3_fu_559_p2 | icmp_ln28_2_fu_553_p2);

assign or_ln28_fu_547_p2 = (icmp_ln28_fu_535_p2 | icmp_ln28_1_fu_541_p2);

assign or_ln35_fu_350_p2 = (icmp_ln13_fu_288_p2 | and_ln28_2_fu_338_p2);

assign r_fu_344_p2 = (2'd1 + select_ln28_fu_294_p3);

assign select_ln13_fu_628_p3 = ((icmp_ln13_reg_644[0:0] === 1'b1) ? 4'd1 : add_ln13_1_fu_622_p2);

assign select_ln28_1_fu_302_p3 = ((icmp_ln13_fu_288_p2[0:0] === 1'b1) ? f_fu_282_p2 : f_0_reg_168);

assign select_ln28_2_fu_318_p3 = ((icmp_ln13_fu_288_p2[0:0] === 1'b1) ? 2'd0 : shl_ln25_fu_264_p2);

assign select_ln28_3_fu_428_p3 = ((icmp_ln23_fu_422_p2[0:0] === 1'b1) ? 2'd0 : mpc_0_reg_248);

assign select_ln28_4_fu_436_p3 = ((icmp_ln23_fu_422_p2[0:0] === 1'b1) ? mpr_fu_416_p2 : ap_phi_mux_mpr_0_phi_fu_228_p4);

assign select_ln28_fu_294_p3 = ((icmp_ln13_fu_288_p2[0:0] === 1'b1) ? 2'd0 : r_0_reg_191);

assign select_ln35_1_fu_364_p3 = ((and_ln28_2_fu_338_p2[0:0] === 1'b1) ? r_fu_344_p2 : select_ln28_fu_294_p3);

assign select_ln35_2_fu_390_p3 = ((and_ln28_2_fu_338_p2[0:0] === 1'b1) ? shl_ln25_1_fu_384_p2 : select_ln28_2_fu_318_p3);

assign select_ln35_fu_356_p3 = ((or_ln35_fu_350_p2[0:0] === 1'b1) ? 2'd0 : c_0_reg_202);

assign shl_ln25_1_fu_384_p2 = r_fu_344_p2 << 2'd1;

assign shl_ln25_fu_264_p2 = r_0_reg_191 << 2'd1;

assign shl_ln26_fu_398_p2 = select_ln35_fu_356_p3 << 2'd1;

assign tmp_10_cast_fu_599_p3 = {{add_ln35_fu_594_p2}, {1'd0}};

assign tmp_6_fu_503_p4 = {{bitcast_ln28_fu_499_p1[30:23]}};

assign tmp_7_fu_521_p4 = {{bitcast_ln28_1_fu_517_p1[30:23]}};

assign tmp_fu_372_p3 = {{select_ln35_1_fu_364_p3}, {1'd0}};

assign tmp_s_fu_449_p3 = {{j_fu_444_p2}, {1'd0}};

assign trunc_ln28_1_fu_531_p1 = bitcast_ln28_1_fu_517_p1[22:0];

assign trunc_ln28_fu_513_p1 = bitcast_ln28_fu_499_p1[22:0];

assign xor_ln28_fu_326_p2 = (icmp_ln13_fu_288_p2 ^ 1'd1);

assign zext_ln28_1_fu_314_p1 = select_ln28_1_fu_302_p3;

assign zext_ln28_2_fu_457_p1 = tmp_s_fu_449_p3;

assign zext_ln28_3_fu_466_p1 = add_ln28_1_fu_461_p2;

assign zext_ln28_fu_310_p1 = select_ln28_1_fu_302_p3;

assign zext_ln35_1_fu_591_p1 = select_ln35_reg_664;

assign zext_ln35_2_fu_612_p1 = add_ln35_1_fu_607_p2;

assign zext_ln35_fu_380_p1 = tmp_fu_372_p3;

always @ (posedge ap_clk) begin
    zext_ln28_reg_654[3:2] <= 2'b00;
    zext_ln28_1_reg_659[4:2] <= 3'b000;
    zext_ln35_reg_675[0] <= 1'b0;
    zext_ln35_reg_675[3] <= 1'b0;
    select_ln35_2_reg_680[0] <= 1'b0;
    shl_ln26_reg_685[0] <= 1'b0;
end

endmodule //max_pool_1
