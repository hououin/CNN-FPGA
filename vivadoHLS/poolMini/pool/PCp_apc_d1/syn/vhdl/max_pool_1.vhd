-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_0_ce0 : OUT STD_LOGIC;
    conv_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_1_ce0 : OUT STD_LOGIC;
    conv_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_2_ce0 : OUT STD_LOGIC;
    conv_1_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_3_ce0 : OUT STD_LOGIC;
    conv_1_out_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.693500,HLS_SYN_LAT=57,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=81,HLS_SYN_LUT=543,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_213 : STD_LOGIC_VECTOR (2 downto 0);
    signal mpr_0_reg_224 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_reg_248 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_fu_276_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln10_reg_639 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln13_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_1_fu_302_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_1_reg_649 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_fu_310_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_reg_654 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_1_fu_314_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_1_reg_659 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_fu_356_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_reg_664 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_1_fu_364_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_1_reg_670 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_fu_380_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_reg_675 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_2_fu_390_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_2_reg_680 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln26_fu_398_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln26_reg_685 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln20_fu_410_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_4_fu_436_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_4_reg_699 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpc_fu_474_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_2_fu_583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal c_fu_617_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln13_fu_628_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal indvar_flatten23_reg_157 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_168 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten7_reg_179 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_reg_191 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_reg_202 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_228_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln28_3_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_fu_484_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_282_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_fu_264_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln16_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_294_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln28_2_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_344_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_372_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln25_1_fu_384_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_2_fu_318_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln23_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_416_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_3_fu_428_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_444_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_449_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_2_fu_457_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_1_fu_461_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_fu_484_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitcast_ln28_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_503_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_513_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_521_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_531_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_591_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_594_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_cast_fu_599_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_1_fu_607_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_1_fu_622_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component max_pool_1_mux_42cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => max_fu_484_p6,
        din1 => max_1_reg_235,
        opcode => ap_const_lv5_2,
        dout => tmp_8_fu_259_p2);

    max_pool_1_mux_42cud_U2 : component max_pool_1_mux_42cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv_1_out_0_q0,
        din1 => conv_1_out_1_q0,
        din2 => conv_1_out_2_q0,
        din3 => conv_1_out_3_q0,
        din4 => max_fu_484_p5,
        dout => max_fu_484_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln10_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln10_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_0_reg_202 <= c_fu_617_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_202 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                f_0_reg_168 <= select_ln28_1_reg_649;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_168 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten23_reg_157 <= add_ln10_reg_639;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_157 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten7_reg_179 <= select_ln13_fu_628_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten7_reg_179 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_213 <= add_ln20_fu_410_p2;
            elsif (((icmp_ln10_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_213 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_1_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_690 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                max_1_reg_235 <= max_2_fu_583_p3;
            elsif (((icmp_ln10_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_1_reg_235 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpc_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                mpc_0_reg_248 <= mpc_fu_474_p2;
            elsif (((icmp_ln10_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpc_0_reg_248 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_690 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                mpr_0_reg_224 <= select_ln28_4_reg_699;
            elsif (((icmp_ln10_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpr_0_reg_224 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                r_0_reg_191 <= select_ln35_1_reg_670;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_191 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln10_reg_639 <= add_ln10_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln13_reg_644 <= icmp_ln13_fu_288_p2;
                select_ln28_1_reg_649 <= select_ln28_1_fu_302_p3;
                select_ln35_1_reg_670 <= select_ln35_1_fu_364_p3;
                    select_ln35_2_reg_680(1) <= select_ln35_2_fu_390_p3(1);
                select_ln35_reg_664 <= select_ln35_fu_356_p3;
                    shl_ln26_reg_685(1) <= shl_ln26_fu_398_p2(1);
                    zext_ln28_1_reg_659(1 downto 0) <= zext_ln28_1_fu_314_p1(1 downto 0);
                    zext_ln28_reg_654(1 downto 0) <= zext_ln28_fu_310_p1(1 downto 0);
                    zext_ln35_reg_675(2 downto 1) <= zext_ln35_fu_380_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_reg_690 <= icmp_ln20_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln28_4_reg_699 <= select_ln28_4_fu_436_p3;
            end if;
        end if;
    end process;
    zext_ln28_reg_654(3 downto 2) <= "00";
    zext_ln28_1_reg_659(4 downto 2) <= "000";
    zext_ln35_reg_675(0) <= '0';
    zext_ln35_reg_675(3) <= '0';
    select_ln35_2_reg_680(0) <= '0';
    shl_ln26_reg_685(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_270_p2, ap_CS_fsm_state2, icmp_ln20_fu_404_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln20_fu_404_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln20_fu_404_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_276_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten23_reg_157));
    add_ln13_1_fu_622_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_179) + unsigned(ap_const_lv4_1));
    add_ln20_fu_410_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_213) + unsigned(ap_const_lv3_1));
    add_ln28_1_fu_461_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_457_p1) + unsigned(zext_ln28_reg_654));
    add_ln35_1_fu_607_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_599_p3) + unsigned(zext_ln28_1_reg_659));
    add_ln35_fu_594_p2 <= std_logic_vector(unsigned(zext_ln35_reg_675) + unsigned(zext_ln35_1_fu_591_p1));
    and_ln28_1_fu_577_p2 <= (tmp_8_fu_259_p2 and and_ln28_fu_571_p2);
    and_ln28_2_fu_338_p2 <= (xor_ln28_fu_326_p2 and icmp_ln16_fu_332_p2);
    and_ln28_fu_571_p2 <= (or_ln28_fu_547_p2 and or_ln28_1_fu_565_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln20_fu_404_p2)
    begin
        if ((icmp_ln20_fu_404_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln10_fu_270_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln10_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_228_p4_assign_proc : process(mpr_0_reg_224, icmp_ln20_reg_690, ap_CS_fsm_pp0_stage0, select_ln28_4_reg_699, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_690 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_228_p4 <= select_ln28_4_reg_699;
        else 
            ap_phi_mux_mpr_0_phi_fu_228_p4 <= mpr_0_reg_224;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln10_fu_270_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln10_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_517_p1 <= max_1_reg_235;
    bitcast_ln28_fu_499_p1 <= max_fu_484_p6;
    c_fu_617_p2 <= std_logic_vector(unsigned(select_ln35_reg_664) + unsigned(ap_const_lv2_1));
    conv_1_out_0_address0 <= zext_ln28_3_fu_466_p1(3 - 1 downto 0);

    conv_1_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_1_address0 <= zext_ln28_3_fu_466_p1(3 - 1 downto 0);

    conv_1_out_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_2_address0 <= zext_ln28_3_fu_466_p1(3 - 1 downto 0);

    conv_1_out_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_3_address0 <= zext_ln28_3_fu_466_p1(3 - 1 downto 0);

    conv_1_out_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_3_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_282_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(f_0_reg_168));
    icmp_ln10_fu_270_p2 <= "1" when (indvar_flatten23_reg_157 = ap_const_lv4_8) else "0";
    icmp_ln13_fu_288_p2 <= "1" when (indvar_flatten7_reg_179 = ap_const_lv4_4) else "0";
    icmp_ln16_fu_332_p2 <= "1" when (c_0_reg_202 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_404_p2 <= "1" when (indvar_flatten_reg_213 = ap_const_lv3_4) else "0";
    icmp_ln23_fu_422_p2 <= "1" when (mpc_0_reg_248 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_541_p2 <= "1" when (trunc_ln28_fu_513_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_553_p2 <= "0" when (tmp_7_fu_521_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_559_p2 <= "1" when (trunc_ln28_1_fu_531_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_535_p2 <= "0" when (tmp_6_fu_503_p4 = ap_const_lv8_FF) else "1";
    j_fu_444_p2 <= std_logic_vector(unsigned(shl_ln26_reg_685) + unsigned(select_ln28_3_fu_428_p3));
    max_2_fu_583_p3 <= 
        max_fu_484_p6 when (and_ln28_1_fu_577_p2(0) = '1') else 
        max_1_reg_235;
    max_fu_484_p5 <= std_logic_vector(unsigned(select_ln35_2_reg_680) + unsigned(select_ln28_4_reg_699));
    max_pool_1_out_address0 <= zext_ln35_2_fu_612_p1(3 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= max_1_reg_235;

    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln28_3_fu_428_p3));
    mpr_fu_416_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_mpr_0_phi_fu_228_p4));
    or_ln28_1_fu_565_p2 <= (icmp_ln28_3_fu_559_p2 or icmp_ln28_2_fu_553_p2);
    or_ln28_fu_547_p2 <= (icmp_ln28_fu_535_p2 or icmp_ln28_1_fu_541_p2);
    or_ln35_fu_350_p2 <= (icmp_ln13_fu_288_p2 or and_ln28_2_fu_338_p2);
    r_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln28_fu_294_p3));
    select_ln13_fu_628_p3 <= 
        ap_const_lv4_1 when (icmp_ln13_reg_644(0) = '1') else 
        add_ln13_1_fu_622_p2;
    select_ln28_1_fu_302_p3 <= 
        f_fu_282_p2 when (icmp_ln13_fu_288_p2(0) = '1') else 
        f_0_reg_168;
    select_ln28_2_fu_318_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_288_p2(0) = '1') else 
        shl_ln25_fu_264_p2;
    select_ln28_3_fu_428_p3 <= 
        ap_const_lv2_0 when (icmp_ln23_fu_422_p2(0) = '1') else 
        mpc_0_reg_248;
    select_ln28_4_fu_436_p3 <= 
        mpr_fu_416_p2 when (icmp_ln23_fu_422_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_228_p4;
    select_ln28_fu_294_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_288_p2(0) = '1') else 
        r_0_reg_191;
    select_ln35_1_fu_364_p3 <= 
        r_fu_344_p2 when (and_ln28_2_fu_338_p2(0) = '1') else 
        select_ln28_fu_294_p3;
    select_ln35_2_fu_390_p3 <= 
        shl_ln25_1_fu_384_p2 when (and_ln28_2_fu_338_p2(0) = '1') else 
        select_ln28_2_fu_318_p3;
    select_ln35_fu_356_p3 <= 
        ap_const_lv2_0 when (or_ln35_fu_350_p2(0) = '1') else 
        c_0_reg_202;
    shl_ln25_1_fu_384_p2 <= std_logic_vector(shift_left(unsigned(r_fu_344_p2),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln25_fu_264_p2 <= std_logic_vector(shift_left(unsigned(r_0_reg_191),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln26_fu_398_p2 <= std_logic_vector(shift_left(unsigned(select_ln35_fu_356_p3),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_10_cast_fu_599_p3 <= (add_ln35_fu_594_p2 & ap_const_lv1_0);
    tmp_6_fu_503_p4 <= bitcast_ln28_fu_499_p1(30 downto 23);
    tmp_7_fu_521_p4 <= bitcast_ln28_1_fu_517_p1(30 downto 23);
    tmp_fu_372_p3 <= (select_ln35_1_fu_364_p3 & ap_const_lv1_0);
    tmp_s_fu_449_p3 <= (j_fu_444_p2 & ap_const_lv1_0);
    trunc_ln28_1_fu_531_p1 <= bitcast_ln28_1_fu_517_p1(23 - 1 downto 0);
    trunc_ln28_fu_513_p1 <= bitcast_ln28_fu_499_p1(23 - 1 downto 0);
    xor_ln28_fu_326_p2 <= (icmp_ln13_fu_288_p2 xor ap_const_lv1_1);
    zext_ln28_1_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_fu_302_p3),5));
    zext_ln28_2_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_449_p3),4));
    zext_ln28_3_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_461_p2),64));
    zext_ln28_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_fu_302_p3),4));
    zext_ln35_1_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_reg_664),4));
    zext_ln35_2_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_607_p2),64));
    zext_ln35_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_372_p3),4));
end behav;
