// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.621000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=226,HLS_SYN_LUT=890,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_2_address0,
        conv_1_out_2_ce0,
        conv_1_out_2_q0,
        conv_1_out_3_address0,
        conv_1_out_3_ce0,
        conv_1_out_3_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [2:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [2:0] conv_1_out_2_address0;
output   conv_1_out_2_ce0;
input  [31:0] conv_1_out_2_q0;
output  [2:0] conv_1_out_3_address0;
output   conv_1_out_3_ce0;
input  [31:0] conv_1_out_3_q0;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_0_ce0;
reg conv_1_out_1_ce0;
reg conv_1_out_2_ce0;
reg conv_1_out_3_ce0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten53_reg_151;
reg   [1:0] f_0_reg_162;
reg   [4:0] indvar_flatten20_reg_173;
reg   [1:0] r_0_reg_184;
reg   [3:0] indvar_flatten_reg_195;
reg   [1:0] c_0_reg_206;
reg   [31:0] max_0_reg_217;
reg   [1:0] mpr_0_reg_229;
wire   [0:0] icmp_ln28_fu_260_p2;
reg   [0:0] icmp_ln28_reg_826;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln28_1_fu_272_p2;
reg   [0:0] icmp_ln28_1_reg_831;
wire   [0:0] icmp_ln10_fu_278_p2;
reg   [0:0] icmp_ln10_reg_836;
reg   [0:0] icmp_ln10_reg_836_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_836_pp0_iter2_reg;
wire   [4:0] add_ln10_fu_284_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_296_p2;
reg   [0:0] icmp_ln13_reg_845;
wire   [1:0] select_ln28_5_fu_310_p3;
reg   [1:0] select_ln28_5_reg_851;
reg   [1:0] select_ln28_5_reg_851_pp0_iter1_reg;
wire   [0:0] and_ln28_5_fu_354_p2;
reg   [0:0] and_ln28_5_reg_857;
wire   [1:0] select_ln25_2_fu_394_p3;
reg   [1:0] select_ln25_2_reg_863;
reg   [1:0] select_ln25_2_reg_863_pp0_iter1_reg;
wire   [0:0] and_ln25_fu_414_p2;
reg   [0:0] and_ln25_reg_869;
wire   [1:0] c_fu_420_p2;
reg   [1:0] c_reg_875;
wire   [0:0] or_ln28_8_fu_432_p2;
reg   [0:0] or_ln28_8_reg_880;
reg   [0:0] or_ln28_8_reg_880_pp0_iter1_reg;
wire   [1:0] select_ln16_fu_446_p3;
reg   [1:0] select_ln16_reg_885;
reg   [1:0] select_ln16_reg_885_pp0_iter1_reg;
wire   [63:0] zext_ln28_3_fu_478_p1;
reg   [63:0] zext_ln28_3_reg_891;
wire   [1:0] mpr_fu_484_p2;
reg   [1:0] mpr_reg_907;
reg   [1:0] mpr_reg_907_pp0_iter1_reg;
wire   [3:0] select_ln16_1_fu_496_p3;
wire   [4:0] select_ln13_fu_510_p3;
wire   [0:0] select_ln28_10_fu_566_p3;
reg   [0:0] select_ln28_10_reg_923;
wire   [31:0] select_ln28_2_fu_573_p3;
reg   [31:0] select_ln28_2_reg_938;
wire   [31:0] select_ln28_1_fu_786_p3;
reg   [31:0] select_ln28_1_reg_945;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] icmp_ln20_1_fu_794_p2;
reg   [0:0] icmp_ln20_1_reg_951;
wire   [4:0] add_ln35_1_fu_816_p2;
reg   [4:0] add_ln35_1_reg_955;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg   [1:0] ap_phi_mux_f_0_phi_fu_166_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_r_0_phi_fu_188_p4;
reg   [1:0] ap_phi_mux_c_0_phi_fu_210_p4;
reg   [31:0] ap_phi_mux_max_0_phi_fu_221_p4;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_233_p4;
wire   [63:0] zext_ln35_2_fu_822_p1;
wire   [31:0] select_ln28_7_fu_595_p3;
wire   [31:0] select_ln28_3_fu_694_p3;
wire   [31:0] select_ln28_fu_686_p3;
wire   [1:0] shl_ln28_fu_254_p2;
wire   [1:0] or_ln28_fu_266_p2;
wire   [1:0] f_fu_290_p2;
wire   [1:0] shl_ln25_fu_248_p2;
wire   [0:0] icmp_ln20_fu_336_p2;
wire   [0:0] xor_ln28_fu_330_p2;
wire   [0:0] icmp_ln16_fu_348_p2;
wire   [1:0] select_ln28_4_fu_302_p3;
wire   [0:0] or_ln25_fu_366_p2;
wire   [1:0] r_fu_360_p2;
wire   [1:0] shl_ln25_1_fu_380_p2;
wire   [1:0] select_ln28_6_fu_322_p3;
wire   [0:0] xor_ln25_fu_402_p2;
wire   [0:0] and_ln28_4_fu_342_p2;
wire   [0:0] or_ln25_3_fu_408_p2;
wire   [1:0] select_ln25_fu_372_p3;
wire   [0:0] or_ln28_7_fu_426_p2;
wire   [1:0] select_ln28_8_fu_438_p3;
wire   [1:0] select_ln25_1_fu_386_p3;
wire   [1:0] i_fu_454_p2;
wire   [2:0] tmp_s_fu_460_p3;
wire   [3:0] zext_ln28_2_fu_468_p1;
wire   [3:0] zext_ln28_1_fu_318_p1;
wire   [3:0] add_ln28_fu_472_p2;
wire   [3:0] add_ln16_fu_490_p2;
wire   [4:0] add_ln13_1_fu_504_p2;
wire   [0:0] or_ln28_5_fu_518_p2;
wire   [0:0] or_ln28_6_fu_522_p2;
wire   [1:0] shl_ln28_1_fu_536_p2;
wire   [0:0] icmp_ln28_10_fu_541_p2;
wire   [0:0] or_ln25_1_fu_526_p2;
wire   [1:0] or_ln28_9_fu_554_p2;
wire   [0:0] icmp_ln28_11_fu_560_p2;
wire   [0:0] or_ln25_2_fu_531_p2;
wire   [0:0] select_ln28_9_fu_547_p3;
wire   [2:0] tmp_fu_584_p3;
wire   [31:0] bitcast_ln28_fu_603_p1;
wire   [31:0] bitcast_ln28_1_fu_620_p1;
wire   [7:0] tmp_1_fu_606_p4;
wire   [22:0] trunc_ln28_fu_616_p1;
wire   [0:0] icmp_ln28_3_fu_644_p2;
wire   [0:0] icmp_ln28_2_fu_638_p2;
wire   [7:0] tmp_5_fu_624_p4;
wire   [22:0] trunc_ln28_1_fu_634_p1;
wire   [0:0] icmp_ln28_5_fu_662_p2;
wire   [0:0] icmp_ln28_4_fu_656_p2;
wire   [0:0] or_ln28_1_fu_650_p2;
wire   [0:0] or_ln28_2_fu_668_p2;
wire   [0:0] and_ln28_fu_674_p2;
wire   [0:0] tmp_6_fu_240_p2;
wire   [0:0] and_ln28_1_fu_680_p2;
wire   [31:0] bitcast_ln28_2_fu_702_p1;
wire   [31:0] bitcast_ln28_3_fu_720_p1;
wire   [7:0] tmp_7_fu_706_p4;
wire   [22:0] trunc_ln28_2_fu_716_p1;
wire   [0:0] icmp_ln28_7_fu_744_p2;
wire   [0:0] icmp_ln28_6_fu_738_p2;
wire   [7:0] tmp_8_fu_724_p4;
wire   [22:0] trunc_ln28_3_fu_734_p1;
wire   [0:0] icmp_ln28_9_fu_762_p2;
wire   [0:0] icmp_ln28_8_fu_756_p2;
wire   [0:0] or_ln28_3_fu_750_p2;
wire   [0:0] or_ln28_4_fu_768_p2;
wire   [0:0] and_ln28_2_fu_774_p2;
wire   [0:0] tmp_9_fu_244_p2;
wire   [0:0] and_ln28_3_fu_780_p2;
wire   [3:0] zext_ln35_fu_591_p1;
wire   [3:0] zext_ln35_1_fu_799_p1;
wire   [3:0] add_ln35_fu_802_p2;
wire   [4:0] tmp_14_cast_fu_808_p3;
wire   [4:0] zext_ln28_fu_581_p1;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(select_ln28_2_reg_938),
    .din1(select_ln28_7_fu_595_p3),
    .opcode(5'd2),
    .dout(tmp_6_fu_240_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(select_ln28_3_fu_694_p3),
    .din1(select_ln28_fu_686_p3),
    .opcode(5'd2),
    .dout(tmp_9_fu_244_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_206 <= select_ln16_reg_885;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_206 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_162 <= select_ln28_5_reg_851;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_162 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_278_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten20_reg_173 <= select_ln13_fu_510_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten20_reg_173 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_278_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten53_reg_151 <= add_ln10_fu_284_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten53_reg_151 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_278_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_195 <= select_ln16_1_fu_496_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_195 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_836_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_0_reg_217 <= select_ln28_1_reg_945;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        max_0_reg_217 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mpr_0_reg_229 <= mpr_reg_907;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mpr_0_reg_229 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_184 <= select_ln25_2_reg_863;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_184 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_1_fu_794_p2 == 1'd1))) begin
        add_ln35_1_reg_955 <= add_ln35_1_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_278_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln25_reg_869 <= and_ln25_fu_414_p2;
        and_ln28_5_reg_857 <= and_ln28_5_fu_354_p2;
        c_reg_875 <= c_fu_420_p2;
        icmp_ln13_reg_845 <= icmp_ln13_fu_296_p2;
        or_ln28_8_reg_880 <= or_ln28_8_fu_432_p2;
        zext_ln28_3_reg_891[3 : 0] <= zext_ln28_3_fu_478_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_836 <= icmp_ln10_fu_278_p2;
        icmp_ln10_reg_836_pp0_iter1_reg <= icmp_ln10_reg_836;
        icmp_ln28_1_reg_831 <= icmp_ln28_1_fu_272_p2;
        icmp_ln28_reg_826 <= icmp_ln28_fu_260_p2;
        mpr_reg_907_pp0_iter1_reg <= mpr_reg_907;
        or_ln28_8_reg_880_pp0_iter1_reg <= or_ln28_8_reg_880;
        select_ln16_reg_885_pp0_iter1_reg <= select_ln16_reg_885;
        select_ln25_2_reg_863_pp0_iter1_reg <= select_ln25_2_reg_863;
        select_ln28_5_reg_851_pp0_iter1_reg <= select_ln28_5_reg_851;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln10_reg_836_pp0_iter2_reg <= icmp_ln10_reg_836_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_836_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln20_1_reg_951 <= icmp_ln20_1_fu_794_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_278_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mpr_reg_907 <= mpr_fu_484_p2;
        select_ln16_reg_885 <= select_ln16_fu_446_p3;
        select_ln25_2_reg_863 <= select_ln25_2_fu_394_p3;
        select_ln28_5_reg_851 <= select_ln28_5_fu_310_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_836 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln28_10_reg_923 <= select_ln28_10_fu_566_p3;
        select_ln28_2_reg_938 <= select_ln28_2_fu_573_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_836_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        select_ln28_1_reg_945 <= select_ln28_1_fu_786_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_278_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_836 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_210_p4 = select_ln16_reg_885;
    end else begin
        ap_phi_mux_c_0_phi_fu_210_p4 = c_0_reg_206;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_836 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_166_p4 = select_ln28_5_reg_851;
    end else begin
        ap_phi_mux_f_0_phi_fu_166_p4 = f_0_reg_162;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_836_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_max_0_phi_fu_221_p4 = select_ln28_1_reg_945;
    end else begin
        ap_phi_mux_max_0_phi_fu_221_p4 = max_0_reg_217;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_836 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_233_p4 = mpr_reg_907;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_233_p4 = mpr_0_reg_229;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_836 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_188_p4 = select_ln25_2_reg_863;
    end else begin
        ap_phi_mux_r_0_phi_fu_188_p4 = r_0_reg_184;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_1_out_2_ce0 = 1'b1;
    end else begin
        conv_1_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_3_ce0 = 1'b1;
    end else begin
        conv_1_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln20_1_reg_951 == 1'd1))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_278_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln10_fu_278_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_284_p2 = (5'd1 + indvar_flatten53_reg_151);

assign add_ln13_1_fu_504_p2 = (indvar_flatten20_reg_173 + 5'd1);

assign add_ln16_fu_490_p2 = (indvar_flatten_reg_195 + 4'd1);

assign add_ln28_fu_472_p2 = (zext_ln28_2_fu_468_p1 + zext_ln28_1_fu_318_p1);

assign add_ln35_1_fu_816_p2 = (tmp_14_cast_fu_808_p3 + zext_ln28_fu_581_p1);

assign add_ln35_fu_802_p2 = (zext_ln35_fu_591_p1 + zext_ln35_1_fu_799_p1);

assign and_ln25_fu_414_p2 = (or_ln25_3_fu_408_p2 & and_ln28_4_fu_342_p2);

assign and_ln28_1_fu_680_p2 = (tmp_6_fu_240_p2 & and_ln28_fu_674_p2);

assign and_ln28_2_fu_774_p2 = (or_ln28_4_fu_768_p2 & or_ln28_3_fu_750_p2);

assign and_ln28_3_fu_780_p2 = (tmp_9_fu_244_p2 & and_ln28_2_fu_774_p2);

assign and_ln28_4_fu_342_p2 = (xor_ln28_fu_330_p2 & icmp_ln20_fu_336_p2);

assign and_ln28_5_fu_354_p2 = (xor_ln28_fu_330_p2 & icmp_ln16_fu_348_p2);

assign and_ln28_fu_674_p2 = (or_ln28_2_fu_668_p2 & or_ln28_1_fu_650_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_620_p1 = select_ln28_7_fu_595_p3;

assign bitcast_ln28_2_fu_702_p1 = select_ln28_3_fu_694_p3;

assign bitcast_ln28_3_fu_720_p1 = select_ln28_fu_686_p3;

assign bitcast_ln28_fu_603_p1 = select_ln28_2_reg_938;

assign c_fu_420_p2 = (2'd1 + select_ln25_fu_372_p3);

assign conv_1_out_0_address0 = zext_ln28_3_fu_478_p1;

assign conv_1_out_1_address0 = zext_ln28_3_reg_891;

assign conv_1_out_2_address0 = zext_ln28_3_fu_478_p1;

assign conv_1_out_3_address0 = zext_ln28_3_reg_891;

assign f_fu_290_p2 = (2'd1 + ap_phi_mux_f_0_phi_fu_166_p4);

assign i_fu_454_p2 = (select_ln28_8_fu_438_p3 + select_ln25_1_fu_386_p3);

assign icmp_ln10_fu_278_p2 = ((indvar_flatten53_reg_151 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_296_p2 = ((indvar_flatten20_reg_173 == 5'd8) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_348_p2 = ((indvar_flatten_reg_195 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_794_p2 = ((mpr_reg_907_pp0_iter1_reg == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_336_p2 = ((ap_phi_mux_mpr_0_phi_fu_233_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_541_p2 = ((shl_ln28_1_fu_536_p2 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_560_p2 = ((or_ln28_9_fu_554_p2 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_272_p2 = ((or_ln28_fu_266_p2 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_638_p2 = ((tmp_1_fu_606_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_644_p2 = ((trunc_ln28_fu_616_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_656_p2 = ((tmp_5_fu_624_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_662_p2 = ((trunc_ln28_1_fu_634_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_738_p2 = ((tmp_7_fu_706_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_744_p2 = ((trunc_ln28_2_fu_716_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_756_p2 = ((tmp_8_fu_724_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_762_p2 = ((trunc_ln28_3_fu_734_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_260_p2 = ((shl_ln28_fu_254_p2 == 2'd0) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_2_fu_822_p1;

assign max_pool_1_out_d0 = select_ln28_1_reg_945;

assign mpr_fu_484_p2 = (2'd1 + select_ln28_8_fu_438_p3);

assign or_ln25_1_fu_526_p2 = (or_ln28_5_fu_518_p2 | and_ln28_5_reg_857);

assign or_ln25_2_fu_531_p2 = (or_ln28_6_fu_522_p2 | and_ln28_5_reg_857);

assign or_ln25_3_fu_408_p2 = (xor_ln25_fu_402_p2 | icmp_ln13_fu_296_p2);

assign or_ln25_fu_366_p2 = (icmp_ln13_fu_296_p2 | and_ln28_5_fu_354_p2);

assign or_ln28_1_fu_650_p2 = (icmp_ln28_3_fu_644_p2 | icmp_ln28_2_fu_638_p2);

assign or_ln28_2_fu_668_p2 = (icmp_ln28_5_fu_662_p2 | icmp_ln28_4_fu_656_p2);

assign or_ln28_3_fu_750_p2 = (icmp_ln28_7_fu_744_p2 | icmp_ln28_6_fu_738_p2);

assign or_ln28_4_fu_768_p2 = (icmp_ln28_9_fu_762_p2 | icmp_ln28_8_fu_756_p2);

assign or_ln28_5_fu_518_p2 = (icmp_ln28_reg_826 | icmp_ln13_reg_845);

assign or_ln28_6_fu_522_p2 = (icmp_ln28_1_reg_831 | icmp_ln13_reg_845);

assign or_ln28_7_fu_426_p2 = (and_ln28_5_fu_354_p2 | and_ln25_fu_414_p2);

assign or_ln28_8_fu_432_p2 = (or_ln28_7_fu_426_p2 | icmp_ln13_fu_296_p2);

assign or_ln28_9_fu_554_p2 = (shl_ln28_1_fu_536_p2 | 2'd1);

assign or_ln28_fu_266_p2 = (shl_ln28_fu_254_p2 | 2'd1);

assign r_fu_360_p2 = (2'd1 + select_ln28_4_fu_302_p3);

assign select_ln13_fu_510_p3 = ((icmp_ln13_fu_296_p2[0:0] === 1'b1) ? 5'd1 : add_ln13_1_fu_504_p2);

assign select_ln16_1_fu_496_p3 = ((or_ln25_fu_366_p2[0:0] === 1'b1) ? 4'd1 : add_ln16_fu_490_p2);

assign select_ln16_fu_446_p3 = ((and_ln25_fu_414_p2[0:0] === 1'b1) ? c_fu_420_p2 : select_ln25_fu_372_p3);

assign select_ln25_1_fu_386_p3 = ((and_ln28_5_fu_354_p2[0:0] === 1'b1) ? shl_ln25_1_fu_380_p2 : select_ln28_6_fu_322_p3);

assign select_ln25_2_fu_394_p3 = ((and_ln28_5_fu_354_p2[0:0] === 1'b1) ? r_fu_360_p2 : select_ln28_4_fu_302_p3);

assign select_ln25_fu_372_p3 = ((or_ln25_fu_366_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_c_0_phi_fu_210_p4);

assign select_ln28_10_fu_566_p3 = ((and_ln25_reg_869[0:0] === 1'b1) ? icmp_ln28_11_fu_560_p2 : or_ln25_2_fu_531_p2);

assign select_ln28_1_fu_786_p3 = ((and_ln28_3_fu_780_p2[0:0] === 1'b1) ? select_ln28_3_fu_694_p3 : select_ln28_fu_686_p3);

assign select_ln28_2_fu_573_p3 = ((select_ln28_9_fu_547_p3[0:0] === 1'b1) ? conv_1_out_0_q0 : conv_1_out_2_q0);

assign select_ln28_3_fu_694_p3 = ((select_ln28_10_reg_923[0:0] === 1'b1) ? conv_1_out_1_q0 : conv_1_out_3_q0);

assign select_ln28_4_fu_302_p3 = ((icmp_ln13_fu_296_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_r_0_phi_fu_188_p4);

assign select_ln28_5_fu_310_p3 = ((icmp_ln13_fu_296_p2[0:0] === 1'b1) ? f_fu_290_p2 : ap_phi_mux_f_0_phi_fu_166_p4);

assign select_ln28_6_fu_322_p3 = ((icmp_ln13_fu_296_p2[0:0] === 1'b1) ? 2'd0 : shl_ln25_fu_248_p2);

assign select_ln28_7_fu_595_p3 = ((or_ln28_8_reg_880_pp0_iter1_reg[0:0] === 1'b1) ? 32'd8388608 : ap_phi_mux_max_0_phi_fu_221_p4);

assign select_ln28_8_fu_438_p3 = ((or_ln28_8_fu_432_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_mpr_0_phi_fu_233_p4);

assign select_ln28_9_fu_547_p3 = ((and_ln25_reg_869[0:0] === 1'b1) ? icmp_ln28_10_fu_541_p2 : or_ln25_1_fu_526_p2);

assign select_ln28_fu_686_p3 = ((and_ln28_1_fu_680_p2[0:0] === 1'b1) ? select_ln28_2_reg_938 : select_ln28_7_fu_595_p3);

assign shl_ln25_1_fu_380_p2 = r_fu_360_p2 << 2'd1;

assign shl_ln25_fu_248_p2 = ap_phi_mux_r_0_phi_fu_188_p4 << 2'd1;

assign shl_ln28_1_fu_536_p2 = c_reg_875 << 2'd1;

assign shl_ln28_fu_254_p2 = ap_phi_mux_c_0_phi_fu_210_p4 << 2'd1;

assign tmp_14_cast_fu_808_p3 = {{add_ln35_fu_802_p2}, {1'd0}};

assign tmp_1_fu_606_p4 = {{bitcast_ln28_fu_603_p1[30:23]}};

assign tmp_5_fu_624_p4 = {{bitcast_ln28_1_fu_620_p1[30:23]}};

assign tmp_7_fu_706_p4 = {{bitcast_ln28_2_fu_702_p1[30:23]}};

assign tmp_8_fu_724_p4 = {{bitcast_ln28_3_fu_720_p1[30:23]}};

assign tmp_fu_584_p3 = {{select_ln25_2_reg_863_pp0_iter1_reg}, {1'd0}};

assign tmp_s_fu_460_p3 = {{i_fu_454_p2}, {1'd0}};

assign trunc_ln28_1_fu_634_p1 = bitcast_ln28_1_fu_620_p1[22:0];

assign trunc_ln28_2_fu_716_p1 = bitcast_ln28_2_fu_702_p1[22:0];

assign trunc_ln28_3_fu_734_p1 = bitcast_ln28_3_fu_720_p1[22:0];

assign trunc_ln28_fu_616_p1 = bitcast_ln28_fu_603_p1[22:0];

assign xor_ln25_fu_402_p2 = (icmp_ln16_fu_348_p2 ^ 1'd1);

assign xor_ln28_fu_330_p2 = (icmp_ln13_fu_296_p2 ^ 1'd1);

assign zext_ln28_1_fu_318_p1 = select_ln28_5_fu_310_p3;

assign zext_ln28_2_fu_468_p1 = tmp_s_fu_460_p3;

assign zext_ln28_3_fu_478_p1 = add_ln28_fu_472_p2;

assign zext_ln28_fu_581_p1 = select_ln28_5_reg_851_pp0_iter1_reg;

assign zext_ln35_1_fu_799_p1 = select_ln16_reg_885_pp0_iter1_reg;

assign zext_ln35_2_fu_822_p1 = add_ln35_1_reg_955;

assign zext_ln35_fu_591_p1 = tmp_fu_584_p3;

always @ (posedge ap_clk) begin
    zext_ln28_3_reg_891[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_1
