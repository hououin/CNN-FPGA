// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_1_HH_
#define _max_pool_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "max_pool_1_fcmp_3bkb.h"

namespace ap_rtl {

struct max_pool_1 : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > conv_1_out_0_address0;
    sc_out< sc_logic > conv_1_out_0_ce0;
    sc_in< sc_lv<32> > conv_1_out_0_q0;
    sc_out< sc_lv<3> > conv_1_out_1_address0;
    sc_out< sc_logic > conv_1_out_1_ce0;
    sc_in< sc_lv<32> > conv_1_out_1_q0;
    sc_out< sc_lv<3> > conv_1_out_2_address0;
    sc_out< sc_logic > conv_1_out_2_ce0;
    sc_in< sc_lv<32> > conv_1_out_2_q0;
    sc_out< sc_lv<3> > conv_1_out_3_address0;
    sc_out< sc_logic > conv_1_out_3_ce0;
    sc_in< sc_lv<32> > conv_1_out_3_q0;
    sc_out< sc_lv<3> > max_pool_1_out_address0;
    sc_out< sc_logic > max_pool_1_out_ce0;
    sc_out< sc_logic > max_pool_1_out_we0;
    sc_out< sc_lv<32> > max_pool_1_out_d0;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    max_pool_1(sc_module_name name);
    SC_HAS_PROCESS(max_pool_1);

    ~max_pool_1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    max_pool_1_fcmp_3bkb<1,1,32,32,1>* max_pool_1_fcmp_3bkb_U1;
    max_pool_1_fcmp_3bkb<1,1,32,32,1>* max_pool_1_fcmp_3bkb_U2;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > indvar_flatten53_reg_151;
    sc_signal< sc_lv<2> > f_0_reg_162;
    sc_signal< sc_lv<5> > indvar_flatten20_reg_173;
    sc_signal< sc_lv<2> > r_0_reg_184;
    sc_signal< sc_lv<4> > indvar_flatten_reg_195;
    sc_signal< sc_lv<2> > c_0_reg_206;
    sc_signal< sc_lv<32> > max_0_reg_217;
    sc_signal< sc_lv<2> > mpr_0_reg_229;
    sc_signal< sc_lv<1> > icmp_ln28_fu_260_p2;
    sc_signal< sc_lv<1> > icmp_ln28_reg_826;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln28_1_fu_272_p2;
    sc_signal< sc_lv<1> > icmp_ln28_1_reg_831;
    sc_signal< sc_lv<1> > icmp_ln10_fu_278_p2;
    sc_signal< sc_lv<1> > icmp_ln10_reg_836;
    sc_signal< sc_lv<1> > icmp_ln10_reg_836_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln10_reg_836_pp0_iter2_reg;
    sc_signal< sc_lv<5> > add_ln10_fu_284_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln13_fu_296_p2;
    sc_signal< sc_lv<1> > icmp_ln13_reg_845;
    sc_signal< sc_lv<2> > select_ln28_5_fu_310_p3;
    sc_signal< sc_lv<2> > select_ln28_5_reg_851;
    sc_signal< sc_lv<2> > select_ln28_5_reg_851_pp0_iter1_reg;
    sc_signal< sc_lv<1> > and_ln28_5_fu_354_p2;
    sc_signal< sc_lv<1> > and_ln28_5_reg_857;
    sc_signal< sc_lv<2> > select_ln25_2_fu_394_p3;
    sc_signal< sc_lv<2> > select_ln25_2_reg_863;
    sc_signal< sc_lv<2> > select_ln25_2_reg_863_pp0_iter1_reg;
    sc_signal< sc_lv<1> > and_ln25_fu_414_p2;
    sc_signal< sc_lv<1> > and_ln25_reg_869;
    sc_signal< sc_lv<2> > c_fu_420_p2;
    sc_signal< sc_lv<2> > c_reg_875;
    sc_signal< sc_lv<1> > or_ln28_8_fu_432_p2;
    sc_signal< sc_lv<1> > or_ln28_8_reg_880;
    sc_signal< sc_lv<1> > or_ln28_8_reg_880_pp0_iter1_reg;
    sc_signal< sc_lv<2> > select_ln16_fu_446_p3;
    sc_signal< sc_lv<2> > select_ln16_reg_885;
    sc_signal< sc_lv<2> > select_ln16_reg_885_pp0_iter1_reg;
    sc_signal< sc_lv<64> > zext_ln28_3_fu_478_p1;
    sc_signal< sc_lv<64> > zext_ln28_3_reg_891;
    sc_signal< sc_lv<2> > mpr_fu_484_p2;
    sc_signal< sc_lv<2> > mpr_reg_907;
    sc_signal< sc_lv<2> > mpr_reg_907_pp0_iter1_reg;
    sc_signal< sc_lv<4> > select_ln16_1_fu_496_p3;
    sc_signal< sc_lv<5> > select_ln13_fu_510_p3;
    sc_signal< sc_lv<1> > select_ln28_10_fu_566_p3;
    sc_signal< sc_lv<1> > select_ln28_10_reg_923;
    sc_signal< sc_lv<32> > select_ln28_2_fu_573_p3;
    sc_signal< sc_lv<32> > select_ln28_2_reg_938;
    sc_signal< sc_lv<32> > select_ln28_1_fu_786_p3;
    sc_signal< sc_lv<32> > select_ln28_1_reg_945;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln20_1_fu_794_p2;
    sc_signal< sc_lv<1> > icmp_ln20_1_reg_951;
    sc_signal< sc_lv<5> > add_ln35_1_fu_816_p2;
    sc_signal< sc_lv<5> > add_ln35_1_reg_955;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<2> > ap_phi_mux_f_0_phi_fu_166_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<2> > ap_phi_mux_r_0_phi_fu_188_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_c_0_phi_fu_210_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_max_0_phi_fu_221_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_mpr_0_phi_fu_233_p4;
    sc_signal< sc_lv<64> > zext_ln35_2_fu_822_p1;
    sc_signal< sc_lv<32> > select_ln28_7_fu_595_p3;
    sc_signal< sc_lv<32> > select_ln28_3_fu_694_p3;
    sc_signal< sc_lv<32> > select_ln28_fu_686_p3;
    sc_signal< sc_lv<2> > shl_ln28_fu_254_p2;
    sc_signal< sc_lv<2> > or_ln28_fu_266_p2;
    sc_signal< sc_lv<2> > f_fu_290_p2;
    sc_signal< sc_lv<2> > shl_ln25_fu_248_p2;
    sc_signal< sc_lv<1> > icmp_ln20_fu_336_p2;
    sc_signal< sc_lv<1> > xor_ln28_fu_330_p2;
    sc_signal< sc_lv<1> > icmp_ln16_fu_348_p2;
    sc_signal< sc_lv<2> > select_ln28_4_fu_302_p3;
    sc_signal< sc_lv<1> > or_ln25_fu_366_p2;
    sc_signal< sc_lv<2> > r_fu_360_p2;
    sc_signal< sc_lv<2> > shl_ln25_1_fu_380_p2;
    sc_signal< sc_lv<2> > select_ln28_6_fu_322_p3;
    sc_signal< sc_lv<1> > xor_ln25_fu_402_p2;
    sc_signal< sc_lv<1> > and_ln28_4_fu_342_p2;
    sc_signal< sc_lv<1> > or_ln25_3_fu_408_p2;
    sc_signal< sc_lv<2> > select_ln25_fu_372_p3;
    sc_signal< sc_lv<1> > or_ln28_7_fu_426_p2;
    sc_signal< sc_lv<2> > select_ln28_8_fu_438_p3;
    sc_signal< sc_lv<2> > select_ln25_1_fu_386_p3;
    sc_signal< sc_lv<2> > i_fu_454_p2;
    sc_signal< sc_lv<3> > tmp_s_fu_460_p3;
    sc_signal< sc_lv<4> > zext_ln28_2_fu_468_p1;
    sc_signal< sc_lv<4> > zext_ln28_1_fu_318_p1;
    sc_signal< sc_lv<4> > add_ln28_fu_472_p2;
    sc_signal< sc_lv<4> > add_ln16_fu_490_p2;
    sc_signal< sc_lv<5> > add_ln13_1_fu_504_p2;
    sc_signal< sc_lv<1> > or_ln28_5_fu_518_p2;
    sc_signal< sc_lv<1> > or_ln28_6_fu_522_p2;
    sc_signal< sc_lv<2> > shl_ln28_1_fu_536_p2;
    sc_signal< sc_lv<1> > icmp_ln28_10_fu_541_p2;
    sc_signal< sc_lv<1> > or_ln25_1_fu_526_p2;
    sc_signal< sc_lv<2> > or_ln28_9_fu_554_p2;
    sc_signal< sc_lv<1> > icmp_ln28_11_fu_560_p2;
    sc_signal< sc_lv<1> > or_ln25_2_fu_531_p2;
    sc_signal< sc_lv<1> > select_ln28_9_fu_547_p3;
    sc_signal< sc_lv<3> > tmp_fu_584_p3;
    sc_signal< sc_lv<32> > bitcast_ln28_fu_603_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_1_fu_620_p1;
    sc_signal< sc_lv<8> > tmp_1_fu_606_p4;
    sc_signal< sc_lv<23> > trunc_ln28_fu_616_p1;
    sc_signal< sc_lv<1> > icmp_ln28_3_fu_644_p2;
    sc_signal< sc_lv<1> > icmp_ln28_2_fu_638_p2;
    sc_signal< sc_lv<8> > tmp_5_fu_624_p4;
    sc_signal< sc_lv<23> > trunc_ln28_1_fu_634_p1;
    sc_signal< sc_lv<1> > icmp_ln28_5_fu_662_p2;
    sc_signal< sc_lv<1> > icmp_ln28_4_fu_656_p2;
    sc_signal< sc_lv<1> > or_ln28_1_fu_650_p2;
    sc_signal< sc_lv<1> > or_ln28_2_fu_668_p2;
    sc_signal< sc_lv<1> > and_ln28_fu_674_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_240_p2;
    sc_signal< sc_lv<1> > and_ln28_1_fu_680_p2;
    sc_signal< sc_lv<32> > bitcast_ln28_2_fu_702_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_3_fu_720_p1;
    sc_signal< sc_lv<8> > tmp_7_fu_706_p4;
    sc_signal< sc_lv<23> > trunc_ln28_2_fu_716_p1;
    sc_signal< sc_lv<1> > icmp_ln28_7_fu_744_p2;
    sc_signal< sc_lv<1> > icmp_ln28_6_fu_738_p2;
    sc_signal< sc_lv<8> > tmp_8_fu_724_p4;
    sc_signal< sc_lv<23> > trunc_ln28_3_fu_734_p1;
    sc_signal< sc_lv<1> > icmp_ln28_9_fu_762_p2;
    sc_signal< sc_lv<1> > icmp_ln28_8_fu_756_p2;
    sc_signal< sc_lv<1> > or_ln28_3_fu_750_p2;
    sc_signal< sc_lv<1> > or_ln28_4_fu_768_p2;
    sc_signal< sc_lv<1> > and_ln28_2_fu_774_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_244_p2;
    sc_signal< sc_lv<1> > and_ln28_3_fu_780_p2;
    sc_signal< sc_lv<4> > zext_ln35_fu_591_p1;
    sc_signal< sc_lv<4> > zext_ln35_1_fu_799_p1;
    sc_signal< sc_lv<4> > add_ln35_fu_802_p2;
    sc_signal< sc_lv<5> > tmp_14_cast_fu_808_p3;
    sc_signal< sc_lv<5> > zext_ln28_fu_581_p1;
    sc_signal< bool > ap_block_pp0_stage0_00001;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_800000;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_8;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln10_fu_284_p2();
    void thread_add_ln13_1_fu_504_p2();
    void thread_add_ln16_fu_490_p2();
    void thread_add_ln28_fu_472_p2();
    void thread_add_ln35_1_fu_816_p2();
    void thread_add_ln35_fu_802_p2();
    void thread_and_ln25_fu_414_p2();
    void thread_and_ln28_1_fu_680_p2();
    void thread_and_ln28_2_fu_774_p2();
    void thread_and_ln28_3_fu_780_p2();
    void thread_and_ln28_4_fu_342_p2();
    void thread_and_ln28_5_fu_354_p2();
    void thread_and_ln28_fu_674_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_00001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_c_0_phi_fu_210_p4();
    void thread_ap_phi_mux_f_0_phi_fu_166_p4();
    void thread_ap_phi_mux_max_0_phi_fu_221_p4();
    void thread_ap_phi_mux_mpr_0_phi_fu_233_p4();
    void thread_ap_phi_mux_r_0_phi_fu_188_p4();
    void thread_ap_ready();
    void thread_bitcast_ln28_1_fu_620_p1();
    void thread_bitcast_ln28_2_fu_702_p1();
    void thread_bitcast_ln28_3_fu_720_p1();
    void thread_bitcast_ln28_fu_603_p1();
    void thread_c_fu_420_p2();
    void thread_conv_1_out_0_address0();
    void thread_conv_1_out_0_ce0();
    void thread_conv_1_out_1_address0();
    void thread_conv_1_out_1_ce0();
    void thread_conv_1_out_2_address0();
    void thread_conv_1_out_2_ce0();
    void thread_conv_1_out_3_address0();
    void thread_conv_1_out_3_ce0();
    void thread_f_fu_290_p2();
    void thread_i_fu_454_p2();
    void thread_icmp_ln10_fu_278_p2();
    void thread_icmp_ln13_fu_296_p2();
    void thread_icmp_ln16_fu_348_p2();
    void thread_icmp_ln20_1_fu_794_p2();
    void thread_icmp_ln20_fu_336_p2();
    void thread_icmp_ln28_10_fu_541_p2();
    void thread_icmp_ln28_11_fu_560_p2();
    void thread_icmp_ln28_1_fu_272_p2();
    void thread_icmp_ln28_2_fu_638_p2();
    void thread_icmp_ln28_3_fu_644_p2();
    void thread_icmp_ln28_4_fu_656_p2();
    void thread_icmp_ln28_5_fu_662_p2();
    void thread_icmp_ln28_6_fu_738_p2();
    void thread_icmp_ln28_7_fu_744_p2();
    void thread_icmp_ln28_8_fu_756_p2();
    void thread_icmp_ln28_9_fu_762_p2();
    void thread_icmp_ln28_fu_260_p2();
    void thread_max_pool_1_out_address0();
    void thread_max_pool_1_out_ce0();
    void thread_max_pool_1_out_d0();
    void thread_max_pool_1_out_we0();
    void thread_mpr_fu_484_p2();
    void thread_or_ln25_1_fu_526_p2();
    void thread_or_ln25_2_fu_531_p2();
    void thread_or_ln25_3_fu_408_p2();
    void thread_or_ln25_fu_366_p2();
    void thread_or_ln28_1_fu_650_p2();
    void thread_or_ln28_2_fu_668_p2();
    void thread_or_ln28_3_fu_750_p2();
    void thread_or_ln28_4_fu_768_p2();
    void thread_or_ln28_5_fu_518_p2();
    void thread_or_ln28_6_fu_522_p2();
    void thread_or_ln28_7_fu_426_p2();
    void thread_or_ln28_8_fu_432_p2();
    void thread_or_ln28_9_fu_554_p2();
    void thread_or_ln28_fu_266_p2();
    void thread_r_fu_360_p2();
    void thread_select_ln13_fu_510_p3();
    void thread_select_ln16_1_fu_496_p3();
    void thread_select_ln16_fu_446_p3();
    void thread_select_ln25_1_fu_386_p3();
    void thread_select_ln25_2_fu_394_p3();
    void thread_select_ln25_fu_372_p3();
    void thread_select_ln28_10_fu_566_p3();
    void thread_select_ln28_1_fu_786_p3();
    void thread_select_ln28_2_fu_573_p3();
    void thread_select_ln28_3_fu_694_p3();
    void thread_select_ln28_4_fu_302_p3();
    void thread_select_ln28_5_fu_310_p3();
    void thread_select_ln28_6_fu_322_p3();
    void thread_select_ln28_7_fu_595_p3();
    void thread_select_ln28_8_fu_438_p3();
    void thread_select_ln28_9_fu_547_p3();
    void thread_select_ln28_fu_686_p3();
    void thread_shl_ln25_1_fu_380_p2();
    void thread_shl_ln25_fu_248_p2();
    void thread_shl_ln28_1_fu_536_p2();
    void thread_shl_ln28_fu_254_p2();
    void thread_tmp_14_cast_fu_808_p3();
    void thread_tmp_1_fu_606_p4();
    void thread_tmp_5_fu_624_p4();
    void thread_tmp_7_fu_706_p4();
    void thread_tmp_8_fu_724_p4();
    void thread_tmp_fu_584_p3();
    void thread_tmp_s_fu_460_p3();
    void thread_trunc_ln28_1_fu_634_p1();
    void thread_trunc_ln28_2_fu_716_p1();
    void thread_trunc_ln28_3_fu_734_p1();
    void thread_trunc_ln28_fu_616_p1();
    void thread_xor_ln25_fu_402_p2();
    void thread_xor_ln28_fu_330_p2();
    void thread_zext_ln28_1_fu_318_p1();
    void thread_zext_ln28_2_fu_468_p1();
    void thread_zext_ln28_3_fu_478_p1();
    void thread_zext_ln28_fu_581_p1();
    void thread_zext_ln35_1_fu_799_p1();
    void thread_zext_ln35_2_fu_822_p1();
    void thread_zext_ln35_fu_591_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
