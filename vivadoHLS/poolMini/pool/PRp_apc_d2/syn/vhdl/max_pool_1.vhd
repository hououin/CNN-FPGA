-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_0_ce0 : OUT STD_LOGIC;
    conv_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_1_ce0 : OUT STD_LOGIC;
    conv_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_2_ce0 : OUT STD_LOGIC;
    conv_1_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_3_ce0 : OUT STD_LOGIC;
    conv_1_out_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.621000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=226,HLS_SYN_LUT=890,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten53_reg_151 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_162 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten20_reg_173 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_0_reg_184 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_195 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_206 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_0_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_229 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln28_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_1_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_836_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_836_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_284_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_845 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_5_fu_310_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_5_reg_851 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_5_reg_851_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln28_5_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_5_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_2_fu_394_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_2_reg_863 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_2_reg_863_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln25_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_reg_869 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_420_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_875 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln28_8_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_8_reg_880 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_8_reg_880_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_fu_446_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_reg_885 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_reg_885_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_3_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_reg_891 : STD_LOGIC_VECTOR (63 downto 0);
    signal mpr_fu_484_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_907 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_907_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_1_fu_496_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_fu_510_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_10_fu_566_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_10_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_2_fu_573_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_fu_786_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln20_1_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_1_fu_816_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_1_reg_955 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_166_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_188_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_c_0_phi_fu_210_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_max_0_phi_fu_221_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_233_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_2_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln28_7_fu_595_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_3_fu_694_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln28_fu_254_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln28_fu_266_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_fu_290_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_fu_248_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_4_fu_302_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln25_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_360_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_1_fu_380_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_6_fu_322_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln25_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_3_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_fu_372_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln28_7_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_8_fu_438_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_1_fu_386_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_454_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_460_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_2_fu_468_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_1_fu_318_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_472_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln16_fu_490_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln13_1_fu_504_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln28_5_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_6_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln28_1_fu_536_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln28_10_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_1_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_9_fu_554_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln28_11_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_2_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_9_fu_547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_584_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln28_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_606_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_616_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_624_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_634_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_2_fu_702_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_3_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_706_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_716_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_724_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_734_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_9_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_8_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_4_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_fu_591_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_1_fu_799_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_802_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_cast_fu_808_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_fu_581_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => select_ln28_2_reg_938,
        din1 => select_ln28_7_fu_595_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_6_fu_240_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => select_ln28_3_fu_694_p3,
        din1 => select_ln28_fu_686_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_9_fu_244_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_206 <= select_ln16_reg_885;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_206 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_162 <= select_ln28_5_reg_851;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_162 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten20_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_278_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten20_reg_173 <= select_ln13_fu_510_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten20_reg_173 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten53_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_278_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten53_reg_151 <= add_ln10_fu_284_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten53_reg_151 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_278_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_195 <= select_ln16_1_fu_496_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_195 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    max_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_836_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                max_0_reg_217 <= select_ln28_1_reg_945;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_0_reg_217 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpr_0_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                mpr_0_reg_229 <= mpr_reg_907;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpr_0_reg_229 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_184 <= select_ln25_2_reg_863;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_184 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_1_fu_794_p2 = ap_const_lv1_1))) then
                add_ln35_1_reg_955 <= add_ln35_1_fu_816_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_278_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln25_reg_869 <= and_ln25_fu_414_p2;
                and_ln28_5_reg_857 <= and_ln28_5_fu_354_p2;
                c_reg_875 <= c_fu_420_p2;
                icmp_ln13_reg_845 <= icmp_ln13_fu_296_p2;
                or_ln28_8_reg_880 <= or_ln28_8_fu_432_p2;
                    zext_ln28_3_reg_891(3 downto 0) <= zext_ln28_3_fu_478_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_836 <= icmp_ln10_fu_278_p2;
                icmp_ln10_reg_836_pp0_iter1_reg <= icmp_ln10_reg_836;
                icmp_ln28_1_reg_831 <= icmp_ln28_1_fu_272_p2;
                icmp_ln28_reg_826 <= icmp_ln28_fu_260_p2;
                mpr_reg_907_pp0_iter1_reg <= mpr_reg_907;
                or_ln28_8_reg_880_pp0_iter1_reg <= or_ln28_8_reg_880;
                select_ln16_reg_885_pp0_iter1_reg <= select_ln16_reg_885;
                select_ln25_2_reg_863_pp0_iter1_reg <= select_ln25_2_reg_863;
                select_ln28_5_reg_851_pp0_iter1_reg <= select_ln28_5_reg_851;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln10_reg_836_pp0_iter2_reg <= icmp_ln10_reg_836_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_836_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_1_reg_951 <= icmp_ln20_1_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_278_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mpr_reg_907 <= mpr_fu_484_p2;
                select_ln16_reg_885 <= select_ln16_fu_446_p3;
                select_ln25_2_reg_863 <= select_ln25_2_fu_394_p3;
                select_ln28_5_reg_851 <= select_ln28_5_fu_310_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln28_10_reg_923 <= select_ln28_10_fu_566_p3;
                select_ln28_2_reg_938 <= select_ln28_2_fu_573_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_836_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                select_ln28_1_reg_945 <= select_ln28_1_fu_786_p3;
            end if;
        end if;
    end process;
    zext_ln28_3_reg_891(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_278_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_278_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln10_fu_278_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_284_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(indvar_flatten53_reg_151));
    add_ln13_1_fu_504_p2 <= std_logic_vector(unsigned(indvar_flatten20_reg_173) + unsigned(ap_const_lv5_1));
    add_ln16_fu_490_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_195) + unsigned(ap_const_lv4_1));
    add_ln28_fu_472_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_468_p1) + unsigned(zext_ln28_1_fu_318_p1));
    add_ln35_1_fu_816_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_808_p3) + unsigned(zext_ln28_fu_581_p1));
    add_ln35_fu_802_p2 <= std_logic_vector(unsigned(zext_ln35_fu_591_p1) + unsigned(zext_ln35_1_fu_799_p1));
    and_ln25_fu_414_p2 <= (or_ln25_3_fu_408_p2 and and_ln28_4_fu_342_p2);
    and_ln28_1_fu_680_p2 <= (tmp_6_fu_240_p2 and and_ln28_fu_674_p2);
    and_ln28_2_fu_774_p2 <= (or_ln28_4_fu_768_p2 and or_ln28_3_fu_750_p2);
    and_ln28_3_fu_780_p2 <= (tmp_9_fu_244_p2 and and_ln28_2_fu_774_p2);
    and_ln28_4_fu_342_p2 <= (xor_ln28_fu_330_p2 and icmp_ln20_fu_336_p2);
    and_ln28_5_fu_354_p2 <= (xor_ln28_fu_330_p2 and icmp_ln16_fu_348_p2);
    and_ln28_fu_674_p2 <= (or_ln28_2_fu_668_p2 and or_ln28_1_fu_650_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_278_p2)
    begin
        if ((icmp_ln10_fu_278_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_210_p4_assign_proc : process(c_0_reg_206, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_836, select_ln16_reg_885, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_836 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_210_p4 <= select_ln16_reg_885;
        else 
            ap_phi_mux_c_0_phi_fu_210_p4 <= c_0_reg_206;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_166_p4_assign_proc : process(f_0_reg_162, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_836, select_ln28_5_reg_851, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_836 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_166_p4 <= select_ln28_5_reg_851;
        else 
            ap_phi_mux_f_0_phi_fu_166_p4 <= f_0_reg_162;
        end if; 
    end process;


    ap_phi_mux_max_0_phi_fu_221_p4_assign_proc : process(max_0_reg_217, icmp_ln10_reg_836_pp0_iter2_reg, select_ln28_1_reg_945, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_836_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_max_0_phi_fu_221_p4 <= select_ln28_1_reg_945;
        else 
            ap_phi_mux_max_0_phi_fu_221_p4 <= max_0_reg_217;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_233_p4_assign_proc : process(mpr_0_reg_229, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_836, mpr_reg_907, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_836 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_233_p4 <= mpr_reg_907;
        else 
            ap_phi_mux_mpr_0_phi_fu_233_p4 <= mpr_0_reg_229;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_188_p4_assign_proc : process(r_0_reg_184, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_836, select_ln25_2_reg_863, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_836 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_188_p4 <= select_ln25_2_reg_863;
        else 
            ap_phi_mux_r_0_phi_fu_188_p4 <= r_0_reg_184;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_620_p1 <= select_ln28_7_fu_595_p3;
    bitcast_ln28_2_fu_702_p1 <= select_ln28_3_fu_694_p3;
    bitcast_ln28_3_fu_720_p1 <= select_ln28_fu_686_p3;
    bitcast_ln28_fu_603_p1 <= select_ln28_2_reg_938;
    c_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln25_fu_372_p3));
    conv_1_out_0_address0 <= zext_ln28_3_fu_478_p1(3 - 1 downto 0);

    conv_1_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_1_address0 <= zext_ln28_3_reg_891(3 - 1 downto 0);

    conv_1_out_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_2_address0 <= zext_ln28_3_fu_478_p1(3 - 1 downto 0);

    conv_1_out_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_out_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_3_address0 <= zext_ln28_3_reg_891(3 - 1 downto 0);

    conv_1_out_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_3_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_290_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_f_0_phi_fu_166_p4));
    i_fu_454_p2 <= std_logic_vector(unsigned(select_ln28_8_fu_438_p3) + unsigned(select_ln25_1_fu_386_p3));
    icmp_ln10_fu_278_p2 <= "1" when (indvar_flatten53_reg_151 = ap_const_lv5_10) else "0";
    icmp_ln13_fu_296_p2 <= "1" when (indvar_flatten20_reg_173 = ap_const_lv5_8) else "0";
    icmp_ln16_fu_348_p2 <= "1" when (indvar_flatten_reg_195 = ap_const_lv4_4) else "0";
    icmp_ln20_1_fu_794_p2 <= "1" when (mpr_reg_907_pp0_iter1_reg = ap_const_lv2_2) else "0";
    icmp_ln20_fu_336_p2 <= "1" when (ap_phi_mux_mpr_0_phi_fu_233_p4 = ap_const_lv2_2) else "0";
    icmp_ln28_10_fu_541_p2 <= "1" when (shl_ln28_1_fu_536_p2 = ap_const_lv2_0) else "0";
    icmp_ln28_11_fu_560_p2 <= "1" when (or_ln28_9_fu_554_p2 = ap_const_lv2_1) else "0";
    icmp_ln28_1_fu_272_p2 <= "1" when (or_ln28_fu_266_p2 = ap_const_lv2_1) else "0";
    icmp_ln28_2_fu_638_p2 <= "0" when (tmp_1_fu_606_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_644_p2 <= "1" when (trunc_ln28_fu_616_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_656_p2 <= "0" when (tmp_5_fu_624_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_662_p2 <= "1" when (trunc_ln28_1_fu_634_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_738_p2 <= "0" when (tmp_7_fu_706_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_744_p2 <= "1" when (trunc_ln28_2_fu_716_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_8_fu_756_p2 <= "0" when (tmp_8_fu_724_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_9_fu_762_p2 <= "1" when (trunc_ln28_3_fu_734_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_260_p2 <= "1" when (shl_ln28_fu_254_p2 = ap_const_lv2_0) else "0";
    max_pool_1_out_address0 <= zext_ln35_2_fu_822_p1(3 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= select_ln28_1_reg_945;

    max_pool_1_out_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln20_1_reg_951, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln20_1_reg_951 = ap_const_lv1_1))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_484_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln28_8_fu_438_p3));
    or_ln25_1_fu_526_p2 <= (or_ln28_5_fu_518_p2 or and_ln28_5_reg_857);
    or_ln25_2_fu_531_p2 <= (or_ln28_6_fu_522_p2 or and_ln28_5_reg_857);
    or_ln25_3_fu_408_p2 <= (xor_ln25_fu_402_p2 or icmp_ln13_fu_296_p2);
    or_ln25_fu_366_p2 <= (icmp_ln13_fu_296_p2 or and_ln28_5_fu_354_p2);
    or_ln28_1_fu_650_p2 <= (icmp_ln28_3_fu_644_p2 or icmp_ln28_2_fu_638_p2);
    or_ln28_2_fu_668_p2 <= (icmp_ln28_5_fu_662_p2 or icmp_ln28_4_fu_656_p2);
    or_ln28_3_fu_750_p2 <= (icmp_ln28_7_fu_744_p2 or icmp_ln28_6_fu_738_p2);
    or_ln28_4_fu_768_p2 <= (icmp_ln28_9_fu_762_p2 or icmp_ln28_8_fu_756_p2);
    or_ln28_5_fu_518_p2 <= (icmp_ln28_reg_826 or icmp_ln13_reg_845);
    or_ln28_6_fu_522_p2 <= (icmp_ln28_1_reg_831 or icmp_ln13_reg_845);
    or_ln28_7_fu_426_p2 <= (and_ln28_5_fu_354_p2 or and_ln25_fu_414_p2);
    or_ln28_8_fu_432_p2 <= (or_ln28_7_fu_426_p2 or icmp_ln13_fu_296_p2);
    or_ln28_9_fu_554_p2 <= (shl_ln28_1_fu_536_p2 or ap_const_lv2_1);
    or_ln28_fu_266_p2 <= (shl_ln28_fu_254_p2 or ap_const_lv2_1);
    r_fu_360_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln28_4_fu_302_p3));
    select_ln13_fu_510_p3 <= 
        ap_const_lv5_1 when (icmp_ln13_fu_296_p2(0) = '1') else 
        add_ln13_1_fu_504_p2;
    select_ln16_1_fu_496_p3 <= 
        ap_const_lv4_1 when (or_ln25_fu_366_p2(0) = '1') else 
        add_ln16_fu_490_p2;
    select_ln16_fu_446_p3 <= 
        c_fu_420_p2 when (and_ln25_fu_414_p2(0) = '1') else 
        select_ln25_fu_372_p3;
    select_ln25_1_fu_386_p3 <= 
        shl_ln25_1_fu_380_p2 when (and_ln28_5_fu_354_p2(0) = '1') else 
        select_ln28_6_fu_322_p3;
    select_ln25_2_fu_394_p3 <= 
        r_fu_360_p2 when (and_ln28_5_fu_354_p2(0) = '1') else 
        select_ln28_4_fu_302_p3;
    select_ln25_fu_372_p3 <= 
        ap_const_lv2_0 when (or_ln25_fu_366_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_210_p4;
    select_ln28_10_fu_566_p3 <= 
        icmp_ln28_11_fu_560_p2 when (and_ln25_reg_869(0) = '1') else 
        or_ln25_2_fu_531_p2;
    select_ln28_1_fu_786_p3 <= 
        select_ln28_3_fu_694_p3 when (and_ln28_3_fu_780_p2(0) = '1') else 
        select_ln28_fu_686_p3;
    select_ln28_2_fu_573_p3 <= 
        conv_1_out_0_q0 when (select_ln28_9_fu_547_p3(0) = '1') else 
        conv_1_out_2_q0;
    select_ln28_3_fu_694_p3 <= 
        conv_1_out_1_q0 when (select_ln28_10_reg_923(0) = '1') else 
        conv_1_out_3_q0;
    select_ln28_4_fu_302_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_296_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_188_p4;
    select_ln28_5_fu_310_p3 <= 
        f_fu_290_p2 when (icmp_ln13_fu_296_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_166_p4;
    select_ln28_6_fu_322_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_296_p2(0) = '1') else 
        shl_ln25_fu_248_p2;
    select_ln28_7_fu_595_p3 <= 
        ap_const_lv32_800000 when (or_ln28_8_reg_880_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_max_0_phi_fu_221_p4;
    select_ln28_8_fu_438_p3 <= 
        ap_const_lv2_0 when (or_ln28_8_fu_432_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_233_p4;
    select_ln28_9_fu_547_p3 <= 
        icmp_ln28_10_fu_541_p2 when (and_ln25_reg_869(0) = '1') else 
        or_ln25_1_fu_526_p2;
    select_ln28_fu_686_p3 <= 
        select_ln28_2_reg_938 when (and_ln28_1_fu_680_p2(0) = '1') else 
        select_ln28_7_fu_595_p3;
    shl_ln25_1_fu_380_p2 <= std_logic_vector(shift_left(unsigned(r_fu_360_p2),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln25_fu_248_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_r_0_phi_fu_188_p4),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln28_1_fu_536_p2 <= std_logic_vector(shift_left(unsigned(c_reg_875),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln28_fu_254_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_c_0_phi_fu_210_p4),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_14_cast_fu_808_p3 <= (add_ln35_fu_802_p2 & ap_const_lv1_0);
    tmp_1_fu_606_p4 <= bitcast_ln28_fu_603_p1(30 downto 23);
    tmp_5_fu_624_p4 <= bitcast_ln28_1_fu_620_p1(30 downto 23);
    tmp_7_fu_706_p4 <= bitcast_ln28_2_fu_702_p1(30 downto 23);
    tmp_8_fu_724_p4 <= bitcast_ln28_3_fu_720_p1(30 downto 23);
    tmp_fu_584_p3 <= (select_ln25_2_reg_863_pp0_iter1_reg & ap_const_lv1_0);
    tmp_s_fu_460_p3 <= (i_fu_454_p2 & ap_const_lv1_0);
    trunc_ln28_1_fu_634_p1 <= bitcast_ln28_1_fu_620_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_716_p1 <= bitcast_ln28_2_fu_702_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_734_p1 <= bitcast_ln28_3_fu_720_p1(23 - 1 downto 0);
    trunc_ln28_fu_616_p1 <= bitcast_ln28_fu_603_p1(23 - 1 downto 0);
    xor_ln25_fu_402_p2 <= (icmp_ln16_fu_348_p2 xor ap_const_lv1_1);
    xor_ln28_fu_330_p2 <= (icmp_ln13_fu_296_p2 xor ap_const_lv1_1);
    zext_ln28_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_5_fu_310_p3),4));
    zext_ln28_2_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_460_p3),4));
    zext_ln28_3_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_472_p2),64));
    zext_ln28_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_5_reg_851_pp0_iter1_reg),5));
    zext_ln35_1_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_reg_885_pp0_iter1_reg),4));
    zext_ln35_2_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_reg_955),64));
    zext_ln35_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_584_p3),4));
end behav;
