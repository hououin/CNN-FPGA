

================================================================
== Vivado HLS Report for 'max_pool_1'
================================================================
* Date:           Thu Aug 10 20:26:50 2023

* Version:        2020.1 (Build 2897737 on Wed May 27 20:21:37 MDT 2020)
* Project:        pool
* Solution:       PCu_apc_d2
* Product family: virtex7
* Target device:  xc7vx485t-ffg1157-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+-----------+------------+
    |  Clock |  Target  | Estimated | Uncertainty|
    +--------+----------+-----------+------------+
    |ap_clk  | 40.00 ns | 19.042 ns |   5.00 ns  |
    +--------+----------+-----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       77|       77| 3.080 us | 3.080 us |   77|   77|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                      |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |       Loop Name      |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +----------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Filter_Loop         |       76|       76|        38|          -|          -|     2|    no    |
        | + Row_Loop           |       36|       36|        18|          -|          -|     2|    no    |
        |  ++ Col_Loop         |       16|       16|         8|          -|          -|     2|    no    |
        |   +++ Pool_Row_Loop  |        6|        6|         3|          -|          -|     2|    no    |
        +----------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 7
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 2 
4 --> 5 3 
5 --> 6 4 
6 --> 7 
7 --> 5 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.18>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([8 x float]* %conv_1_out_3), !map !7"   --->   Operation 8 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([8 x float]* %conv_1_out_2), !map !15"   --->   Operation 9 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([8 x float]* %conv_1_out_1), !map !21"   --->   Operation 10 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([8 x float]* %conv_1_out_0), !map !27"   --->   Operation 11 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([8 x float]* %max_pool_1_out), !map !33"   --->   Operation 12 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([11 x i8]* @max_pool_1_str) nounwind"   --->   Operation 13 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (1.18ns)   --->   "br label %1" [pooling.cpp:10]   --->   Operation 14 'br' <Predicate = true> <Delay = 1.18>

State 2 <SV = 1> <Delay = 1.18>
ST_2 : Operation 15 [1/1] (0.00ns)   --->   "%f_0 = phi i2 [ 0, %0 ], [ %f, %Filter_Loop_end ]"   --->   Operation 15 'phi' 'f_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 16 [1/1] (0.61ns)   --->   "%icmp_ln10 = icmp eq i2 %f_0, -2" [pooling.cpp:10]   --->   Operation 16 'icmp' 'icmp_ln10' <Predicate = true> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2) nounwind"   --->   Operation 17 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (1.00ns)   --->   "%f = add i2 %f_0, 1" [pooling.cpp:10]   --->   Operation 18 'add' 'f' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "br i1 %icmp_ln10, label %5, label %Filter_Loop_begin" [pooling.cpp:10]   --->   Operation 19 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([12 x i8]* @p_str2) nounwind" [pooling.cpp:11]   --->   Operation 20 'specloopname' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str2) nounwind" [pooling.cpp:11]   --->   Operation 21 'specregionbegin' 'tmp' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "%zext_ln13 = zext i2 %f_0 to i4" [pooling.cpp:13]   --->   Operation 22 'zext' 'zext_ln13' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%zext_ln13_1 = zext i2 %f_0 to i5" [pooling.cpp:13]   --->   Operation 23 'zext' 'zext_ln13_1' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (1.18ns)   --->   "br label %2" [pooling.cpp:13]   --->   Operation 24 'br' <Predicate = (!icmp_ln10)> <Delay = 1.18>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "ret void" [pooling.cpp:39]   --->   Operation 25 'ret' <Predicate = (icmp_ln10)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 1.18>
ST_3 : Operation 26 [1/1] (0.00ns)   --->   "%r_0 = phi i2 [ 0, %Filter_Loop_begin ], [ %r, %Row_Loop_end ]"   --->   Operation 26 'phi' 'r_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 27 [1/1] (0.61ns)   --->   "%icmp_ln13 = icmp eq i2 %r_0, -2" [pooling.cpp:13]   --->   Operation 27 'icmp' 'icmp_ln13' <Predicate = true> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 28 [1/1] (0.00ns)   --->   "%empty_4 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2) nounwind"   --->   Operation 28 'speclooptripcount' 'empty_4' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 29 [1/1] (1.00ns)   --->   "%r = add i2 %r_0, 1" [pooling.cpp:13]   --->   Operation 29 'add' 'r' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 30 [1/1] (0.00ns)   --->   "br i1 %icmp_ln13, label %Filter_Loop_end, label %Row_Loop_begin" [pooling.cpp:13]   --->   Operation 30 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([9 x i8]* @p_str3) nounwind" [pooling.cpp:14]   --->   Operation 31 'specloopname' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 32 [1/1] (0.00ns)   --->   "%tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([9 x i8]* @p_str3) nounwind" [pooling.cpp:14]   --->   Operation 32 'specregionbegin' 'tmp_2' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "%shl_ln25 = shl i2 %r_0, 1" [pooling.cpp:25]   --->   Operation 33 'shl' 'shl_ln25' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 34 [1/1] (0.00ns)   --->   "%tmp_s = call i3 @_ssdm_op_BitConcatenate.i3.i2.i1(i2 %r_0, i1 false)" [pooling.cpp:35]   --->   Operation 34 'bitconcatenate' 'tmp_s' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 35 [1/1] (0.00ns)   --->   "%zext_ln16 = zext i3 %tmp_s to i4" [pooling.cpp:16]   --->   Operation 35 'zext' 'zext_ln16' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 36 [1/1] (1.18ns)   --->   "br label %3" [pooling.cpp:16]   --->   Operation 36 'br' <Predicate = (!icmp_ln13)> <Delay = 1.18>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "%empty_9 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str2, i32 %tmp) nounwind" [pooling.cpp:38]   --->   Operation 37 'specregionend' 'empty_9' <Predicate = (icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 38 [1/1] (0.00ns)   --->   "br label %1" [pooling.cpp:10]   --->   Operation 38 'br' <Predicate = (icmp_ln13)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 1.18>
ST_4 : Operation 39 [1/1] (0.00ns)   --->   "%c_0 = phi i2 [ 0, %Row_Loop_begin ], [ %c, %Col_Loop_end ]"   --->   Operation 39 'phi' 'c_0' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 40 [1/1] (0.61ns)   --->   "%icmp_ln16 = icmp eq i2 %c_0, -2" [pooling.cpp:16]   --->   Operation 40 'icmp' 'icmp_ln16' <Predicate = true> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 41 [1/1] (0.00ns)   --->   "%empty_5 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2) nounwind"   --->   Operation 41 'speclooptripcount' 'empty_5' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 42 [1/1] (1.00ns)   --->   "%c = add i2 %c_0, 1" [pooling.cpp:16]   --->   Operation 42 'add' 'c' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 43 [1/1] (0.00ns)   --->   "br i1 %icmp_ln16, label %Row_Loop_end, label %Col_Loop_begin" [pooling.cpp:16]   --->   Operation 43 'br' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 44 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([9 x i8]* @p_str4) nounwind" [pooling.cpp:17]   --->   Operation 44 'specloopname' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_4 : Operation 45 [1/1] (0.00ns)   --->   "%tmp_3 = call i32 (...)* @_ssdm_op_SpecRegionBegin([9 x i8]* @p_str4) nounwind" [pooling.cpp:17]   --->   Operation 45 'specregionbegin' 'tmp_3' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_4 : Operation 46 [1/1] (0.00ns)   --->   "%shl_ln28 = shl i2 %c_0, 1" [pooling.cpp:28]   --->   Operation 46 'shl' 'shl_ln28' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_4 : Operation 47 [1/1] (0.61ns)   --->   "%icmp_ln28 = icmp eq i2 %shl_ln28, 0" [pooling.cpp:28]   --->   Operation 47 'icmp' 'icmp_ln28' <Predicate = (!icmp_ln16)> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 48 [1/1] (0.00ns) (grouped into LUT with out node icmp_ln28_1)   --->   "%or_ln28 = or i2 %shl_ln28, 1" [pooling.cpp:28]   --->   Operation 48 'or' 'or_ln28' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_4 : Operation 49 [1/1] (0.61ns) (out node of the LUT)   --->   "%icmp_ln28_1 = icmp eq i2 %or_ln28, 1" [pooling.cpp:28]   --->   Operation 49 'icmp' 'icmp_ln28_1' <Predicate = (!icmp_ln16)> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 50 [1/1] (1.18ns)   --->   "br label %4" [pooling.cpp:20]   --->   Operation 50 'br' <Predicate = (!icmp_ln16)> <Delay = 1.18>
ST_4 : Operation 51 [1/1] (0.00ns)   --->   "%empty_8 = call i32 (...)* @_ssdm_op_SpecRegionEnd([9 x i8]* @p_str3, i32 %tmp_2) nounwind" [pooling.cpp:37]   --->   Operation 51 'specregionend' 'empty_8' <Predicate = (icmp_ln16)> <Delay = 0.00>
ST_4 : Operation 52 [1/1] (0.00ns)   --->   "br label %2" [pooling.cpp:13]   --->   Operation 52 'br' <Predicate = (icmp_ln16)> <Delay = 0.00>

State 5 <SV = 4> <Delay = 3.97>
ST_5 : Operation 53 [1/1] (0.00ns)   --->   "%max_0 = phi float [ 0x3810000000000000, %Col_Loop_begin ], [ %select_ln28_1, %_ifconv ]" [pooling.cpp:28]   --->   Operation 53 'phi' 'max_0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 54 [1/1] (0.00ns)   --->   "%mpr_0 = phi i2 [ 0, %Col_Loop_begin ], [ %mpr, %_ifconv ]"   --->   Operation 54 'phi' 'mpr_0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 55 [1/1] (0.61ns)   --->   "%icmp_ln20 = icmp eq i2 %mpr_0, -2" [pooling.cpp:20]   --->   Operation 55 'icmp' 'icmp_ln20' <Predicate = true> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 56 [1/1] (0.00ns)   --->   "%empty_6 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2) nounwind"   --->   Operation 56 'speclooptripcount' 'empty_6' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 57 [1/1] (1.00ns)   --->   "%mpr = add i2 %mpr_0, 1" [pooling.cpp:20]   --->   Operation 57 'add' 'mpr' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 58 [1/1] (0.00ns)   --->   "br i1 %icmp_ln20, label %Col_Loop_end, label %_ifconv" [pooling.cpp:20]   --->   Operation 58 'br' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 59 [1/1] (1.00ns)   --->   "%i = add i2 %mpr_0, %shl_ln25" [pooling.cpp:25]   --->   Operation 59 'add' 'i' <Predicate = (!icmp_ln20)> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 60 [1/1] (0.00ns)   --->   "%tmp_9 = call i3 @_ssdm_op_BitConcatenate.i3.i2.i1(i2 %i, i1 false)" [pooling.cpp:28]   --->   Operation 60 'bitconcatenate' 'tmp_9' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 61 [1/1] (0.00ns)   --->   "%zext_ln28 = zext i3 %tmp_9 to i4" [pooling.cpp:28]   --->   Operation 61 'zext' 'zext_ln28' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 62 [1/1] (1.18ns)   --->   "%add_ln28 = add i4 %zext_ln28, %zext_ln13" [pooling.cpp:28]   --->   Operation 62 'add' 'add_ln28' <Predicate = (!icmp_ln20)> <Delay = 1.18> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 63 [1/1] (0.00ns)   --->   "%zext_ln28_1 = zext i4 %add_ln28 to i64" [pooling.cpp:28]   --->   Operation 63 'zext' 'zext_ln28_1' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 64 [1/1] (0.00ns)   --->   "%conv_1_out_0_addr = getelementptr [8 x float]* %conv_1_out_0, i64 0, i64 %zext_ln28_1" [pooling.cpp:28]   --->   Operation 64 'getelementptr' 'conv_1_out_0_addr' <Predicate = (!icmp_ln20 & icmp_ln28)> <Delay = 0.00>
ST_5 : Operation 65 [1/1] (0.00ns)   --->   "%conv_1_out_1_addr = getelementptr [8 x float]* %conv_1_out_1, i64 0, i64 %zext_ln28_1" [pooling.cpp:28]   --->   Operation 65 'getelementptr' 'conv_1_out_1_addr' <Predicate = (!icmp_ln20 & icmp_ln28_1)> <Delay = 0.00>
ST_5 : Operation 66 [1/1] (0.00ns)   --->   "%conv_1_out_2_addr = getelementptr [8 x float]* %conv_1_out_2, i64 0, i64 %zext_ln28_1" [pooling.cpp:28]   --->   Operation 66 'getelementptr' 'conv_1_out_2_addr' <Predicate = (!icmp_ln20 & !icmp_ln28)> <Delay = 0.00>
ST_5 : Operation 67 [1/1] (0.00ns)   --->   "%conv_1_out_3_addr = getelementptr [8 x float]* %conv_1_out_3, i64 0, i64 %zext_ln28_1" [pooling.cpp:28]   --->   Operation 67 'getelementptr' 'conv_1_out_3_addr' <Predicate = (!icmp_ln20 & !icmp_ln28_1)> <Delay = 0.00>
ST_5 : Operation 68 [2/2] (1.42ns)   --->   "%conv_1_out_0_load = load float* %conv_1_out_0_addr, align 4" [pooling.cpp:28]   --->   Operation 68 'load' 'conv_1_out_0_load' <Predicate = (!icmp_ln20 & icmp_ln28)> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_5 : Operation 69 [2/2] (1.42ns)   --->   "%conv_1_out_2_load = load float* %conv_1_out_2_addr, align 4" [pooling.cpp:28]   --->   Operation 69 'load' 'conv_1_out_2_load' <Predicate = (!icmp_ln20 & !icmp_ln28)> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_5 : Operation 70 [2/2] (1.42ns)   --->   "%conv_1_out_1_load = load float* %conv_1_out_1_addr, align 4" [pooling.cpp:28]   --->   Operation 70 'load' 'conv_1_out_1_load' <Predicate = (!icmp_ln20 & icmp_ln28_1)> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_5 : Operation 71 [2/2] (1.42ns)   --->   "%conv_1_out_3_load = load float* %conv_1_out_3_addr, align 4" [pooling.cpp:28]   --->   Operation 71 'load' 'conv_1_out_3_load' <Predicate = (!icmp_ln20 & !icmp_ln28_1)> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_5 : Operation 72 [1/1] (0.00ns)   --->   "%zext_ln35 = zext i2 %c_0 to i4" [pooling.cpp:35]   --->   Operation 72 'zext' 'zext_ln35' <Predicate = (icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 73 [1/1] (1.18ns)   --->   "%add_ln35 = add i4 %zext_ln35, %zext_ln16" [pooling.cpp:35]   --->   Operation 73 'add' 'add_ln35' <Predicate = (icmp_ln20)> <Delay = 1.18> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 74 [1/1] (0.00ns)   --->   "%tmp_13_cast = call i5 @_ssdm_op_BitConcatenate.i5.i4.i1(i4 %add_ln35, i1 false)" [pooling.cpp:35]   --->   Operation 74 'bitconcatenate' 'tmp_13_cast' <Predicate = (icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 75 [1/1] (1.36ns)   --->   "%add_ln35_1 = add i5 %zext_ln13_1, %tmp_13_cast" [pooling.cpp:35]   --->   Operation 75 'add' 'add_ln35_1' <Predicate = (icmp_ln20)> <Delay = 1.36> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 76 [1/1] (0.00ns)   --->   "%zext_ln35_1 = zext i5 %add_ln35_1 to i64" [pooling.cpp:35]   --->   Operation 76 'zext' 'zext_ln35_1' <Predicate = (icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 77 [1/1] (0.00ns)   --->   "%max_pool_1_out_addr = getelementptr [8 x float]* %max_pool_1_out, i64 0, i64 %zext_ln35_1" [pooling.cpp:35]   --->   Operation 77 'getelementptr' 'max_pool_1_out_addr' <Predicate = (icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 78 [1/1] (1.42ns)   --->   "store float %max_0, float* %max_pool_1_out_addr, align 4" [pooling.cpp:35]   --->   Operation 78 'store' <Predicate = (icmp_ln20)> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_5 : Operation 79 [1/1] (0.00ns)   --->   "%empty_7 = call i32 (...)* @_ssdm_op_SpecRegionEnd([9 x i8]* @p_str4, i32 %tmp_3) nounwind" [pooling.cpp:36]   --->   Operation 79 'specregionend' 'empty_7' <Predicate = (icmp_ln20)> <Delay = 0.00>
ST_5 : Operation 80 [1/1] (0.00ns)   --->   "br label %3" [pooling.cpp:16]   --->   Operation 80 'br' <Predicate = (icmp_ln20)> <Delay = 0.00>

State 6 <SV = 5> <Delay = 19.0>
ST_6 : Operation 81 [1/2] (1.42ns)   --->   "%conv_1_out_0_load = load float* %conv_1_out_0_addr, align 4" [pooling.cpp:28]   --->   Operation 81 'load' 'conv_1_out_0_load' <Predicate = (icmp_ln28)> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_6 : Operation 82 [1/2] (1.42ns)   --->   "%conv_1_out_2_load = load float* %conv_1_out_2_addr, align 4" [pooling.cpp:28]   --->   Operation 82 'load' 'conv_1_out_2_load' <Predicate = (!icmp_ln28)> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_6 : Operation 83 [1/1] (0.61ns)   --->   "%select_ln28_2 = select i1 %icmp_ln28, float %conv_1_out_0_load, float %conv_1_out_2_load" [pooling.cpp:28]   --->   Operation 83 'select' 'select_ln28_2' <Predicate = true> <Delay = 0.61> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 84 [1/1] (0.00ns)   --->   "%bitcast_ln28 = bitcast float %select_ln28_2 to i32" [pooling.cpp:28]   --->   Operation 84 'bitcast' 'bitcast_ln28' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 85 [1/1] (0.00ns)   --->   "%tmp_1 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln28, i32 23, i32 30)" [pooling.cpp:28]   --->   Operation 85 'partselect' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 86 [1/1] (0.00ns)   --->   "%trunc_ln28 = trunc i32 %bitcast_ln28 to i23" [pooling.cpp:28]   --->   Operation 86 'trunc' 'trunc_ln28' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 87 [1/1] (0.00ns)   --->   "%bitcast_ln28_1 = bitcast float %max_0 to i32" [pooling.cpp:28]   --->   Operation 87 'bitcast' 'bitcast_ln28_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 88 [1/1] (0.00ns)   --->   "%tmp_4 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln28_1, i32 23, i32 30)" [pooling.cpp:28]   --->   Operation 88 'partselect' 'tmp_4' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 89 [1/1] (0.00ns)   --->   "%trunc_ln28_1 = trunc i32 %bitcast_ln28_1 to i23" [pooling.cpp:28]   --->   Operation 89 'trunc' 'trunc_ln28_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 90 [1/1] (1.12ns)   --->   "%icmp_ln28_2 = icmp ne i8 %tmp_1, -1" [pooling.cpp:28]   --->   Operation 90 'icmp' 'icmp_ln28_2' <Predicate = true> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 91 [1/1] (1.48ns)   --->   "%icmp_ln28_3 = icmp eq i23 %trunc_ln28, 0" [pooling.cpp:28]   --->   Operation 91 'icmp' 'icmp_ln28_3' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 92 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_1)   --->   "%or_ln28_1 = or i1 %icmp_ln28_3, %icmp_ln28_2" [pooling.cpp:28]   --->   Operation 92 'or' 'or_ln28_1' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 93 [1/1] (1.12ns)   --->   "%icmp_ln28_4 = icmp ne i8 %tmp_4, -1" [pooling.cpp:28]   --->   Operation 93 'icmp' 'icmp_ln28_4' <Predicate = true> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 94 [1/1] (1.48ns)   --->   "%icmp_ln28_5 = icmp eq i23 %trunc_ln28_1, 0" [pooling.cpp:28]   --->   Operation 94 'icmp' 'icmp_ln28_5' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 95 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_1)   --->   "%or_ln28_2 = or i1 %icmp_ln28_5, %icmp_ln28_4" [pooling.cpp:28]   --->   Operation 95 'or' 'or_ln28_2' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 96 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_1)   --->   "%and_ln28 = and i1 %or_ln28_1, %or_ln28_2" [pooling.cpp:28]   --->   Operation 96 'and' 'and_ln28' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 97 [1/1] (15.7ns)   --->   "%tmp_5 = fcmp ogt float %select_ln28_2, %max_0" [pooling.cpp:28]   --->   Operation 97 'fcmp' 'tmp_5' <Predicate = true> <Delay = 15.7> <Core = "FCmp">   --->   Core 111 'FCmp' <Latency = 0> <II = 1> <Delay = 15.7> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 98 [1/1] (0.61ns) (out node of the LUT)   --->   "%and_ln28_1 = and i1 %and_ln28, %tmp_5" [pooling.cpp:28]   --->   Operation 98 'and' 'and_ln28_1' <Predicate = true> <Delay = 0.61> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 99 [1/1] (0.61ns) (out node of the LUT)   --->   "%select_ln28 = select i1 %and_ln28_1, float %select_ln28_2, float %max_0" [pooling.cpp:28]   --->   Operation 99 'select' 'select_ln28' <Predicate = true> <Delay = 0.61> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 100 [1/2] (1.42ns)   --->   "%conv_1_out_1_load = load float* %conv_1_out_1_addr, align 4" [pooling.cpp:28]   --->   Operation 100 'load' 'conv_1_out_1_load' <Predicate = (icmp_ln28_1)> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_6 : Operation 101 [1/2] (1.42ns)   --->   "%conv_1_out_3_load = load float* %conv_1_out_3_addr, align 4" [pooling.cpp:28]   --->   Operation 101 'load' 'conv_1_out_3_load' <Predicate = (!icmp_ln28_1)> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_6 : Operation 102 [1/1] (0.61ns)   --->   "%select_ln28_3 = select i1 %icmp_ln28_1, float %conv_1_out_1_load, float %conv_1_out_3_load" [pooling.cpp:28]   --->   Operation 102 'select' 'select_ln28_3' <Predicate = true> <Delay = 0.61> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 7 <SV = 6> <Delay = 17.0>
ST_7 : Operation 103 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str5) nounwind" [pooling.cpp:21]   --->   Operation 103 'specloopname' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 104 [1/1] (0.00ns)   --->   "%bitcast_ln28_2 = bitcast float %select_ln28_3 to i32" [pooling.cpp:28]   --->   Operation 104 'bitcast' 'bitcast_ln28_2' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 105 [1/1] (0.00ns)   --->   "%tmp_6 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln28_2, i32 23, i32 30)" [pooling.cpp:28]   --->   Operation 105 'partselect' 'tmp_6' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 106 [1/1] (0.00ns)   --->   "%trunc_ln28_2 = trunc i32 %bitcast_ln28_2 to i23" [pooling.cpp:28]   --->   Operation 106 'trunc' 'trunc_ln28_2' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 107 [1/1] (0.00ns)   --->   "%bitcast_ln28_3 = bitcast float %select_ln28 to i32" [pooling.cpp:28]   --->   Operation 107 'bitcast' 'bitcast_ln28_3' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 108 [1/1] (0.00ns)   --->   "%tmp_7 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln28_3, i32 23, i32 30)" [pooling.cpp:28]   --->   Operation 108 'partselect' 'tmp_7' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 109 [1/1] (0.00ns)   --->   "%trunc_ln28_3 = trunc i32 %bitcast_ln28_3 to i23" [pooling.cpp:28]   --->   Operation 109 'trunc' 'trunc_ln28_3' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 110 [1/1] (1.12ns)   --->   "%icmp_ln28_6 = icmp ne i8 %tmp_6, -1" [pooling.cpp:28]   --->   Operation 110 'icmp' 'icmp_ln28_6' <Predicate = true> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 111 [1/1] (1.48ns)   --->   "%icmp_ln28_7 = icmp eq i23 %trunc_ln28_2, 0" [pooling.cpp:28]   --->   Operation 111 'icmp' 'icmp_ln28_7' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 112 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_3)   --->   "%or_ln28_3 = or i1 %icmp_ln28_7, %icmp_ln28_6" [pooling.cpp:28]   --->   Operation 112 'or' 'or_ln28_3' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 113 [1/1] (1.12ns)   --->   "%icmp_ln28_8 = icmp ne i8 %tmp_7, -1" [pooling.cpp:28]   --->   Operation 113 'icmp' 'icmp_ln28_8' <Predicate = true> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 114 [1/1] (1.48ns)   --->   "%icmp_ln28_9 = icmp eq i23 %trunc_ln28_3, 0" [pooling.cpp:28]   --->   Operation 114 'icmp' 'icmp_ln28_9' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 115 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_3)   --->   "%or_ln28_4 = or i1 %icmp_ln28_9, %icmp_ln28_8" [pooling.cpp:28]   --->   Operation 115 'or' 'or_ln28_4' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 116 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_3)   --->   "%and_ln28_2 = and i1 %or_ln28_3, %or_ln28_4" [pooling.cpp:28]   --->   Operation 116 'and' 'and_ln28_2' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 117 [1/1] (15.7ns)   --->   "%tmp_8 = fcmp ogt float %select_ln28_3, %select_ln28" [pooling.cpp:28]   --->   Operation 117 'fcmp' 'tmp_8' <Predicate = true> <Delay = 15.7> <Core = "FCmp">   --->   Core 111 'FCmp' <Latency = 0> <II = 1> <Delay = 15.7> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 118 [1/1] (0.61ns) (out node of the LUT)   --->   "%and_ln28_3 = and i1 %and_ln28_2, %tmp_8" [pooling.cpp:28]   --->   Operation 118 'and' 'and_ln28_3' <Predicate = true> <Delay = 0.61> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 119 [1/1] (0.61ns) (out node of the LUT)   --->   "%select_ln28_1 = select i1 %and_ln28_3, float %select_ln28_3, float %select_ln28" [pooling.cpp:28]   --->   Operation 119 'select' 'select_ln28_1' <Predicate = true> <Delay = 0.61> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 120 [1/1] (0.00ns)   --->   "br label %4" [pooling.cpp:20]   --->   Operation 120 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 40ns, clock uncertainty: 5ns.

 <State 1>: 1.18ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('f') with incoming values : ('f', pooling.cpp:10) [14]  (1.18 ns)

 <State 2>: 1.18ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('r') with incoming values : ('r', pooling.cpp:13) [26]  (1.18 ns)

 <State 3>: 1.18ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('c') with incoming values : ('c', pooling.cpp:16) [39]  (1.18 ns)

 <State 4>: 1.18ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('max_0', pooling.cpp:28) with incoming values : ('select_ln28_1', pooling.cpp:28) [53]  (1.18 ns)

 <State 5>: 3.98ns
The critical path consists of the following:
	'add' operation ('add_ln35', pooling.cpp:35) [111]  (1.18 ns)
	'add' operation ('add_ln35_1', pooling.cpp:35) [113]  (1.37 ns)
	'getelementptr' operation ('max_pool_1_out_addr', pooling.cpp:35) [115]  (0 ns)
	'store' operation ('store_ln35', pooling.cpp:35) of variable 'max_0', pooling.cpp:28 on array 'max_pool_1_out' [116]  (1.43 ns)

 <State 6>: 19ns
The critical path consists of the following:
	'load' operation ('conv_1_out_0_load', pooling.cpp:28) on array 'conv_1_out_0' [70]  (1.43 ns)
	'select' operation ('select_ln28_2', pooling.cpp:28) [72]  (0.613 ns)
	'fcmp' operation ('tmp_5', pooling.cpp:28) [86]  (15.8 ns)
	'and' operation ('and_ln28_1', pooling.cpp:28) [87]  (0.616 ns)
	'select' operation ('select_ln28', pooling.cpp:28) [88]  (0.613 ns)

 <State 7>: 17ns
The critical path consists of the following:
	'fcmp' operation ('tmp_8', pooling.cpp:28) [105]  (15.8 ns)
	'and' operation ('and_ln28_3', pooling.cpp:28) [106]  (0.616 ns)
	'select' operation ('select_ln28_1', pooling.cpp:28) [107]  (0.613 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
