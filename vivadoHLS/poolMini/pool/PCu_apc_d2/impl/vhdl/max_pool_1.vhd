-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_0_ce0 : OUT STD_LOGIC;
    conv_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_1_ce0 : OUT STD_LOGIC;
    conv_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_2_ce0 : OUT STD_LOGIC;
    conv_1_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_3_ce0 : OUT STD_LOGIC;
    conv_1_out_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.042000,HLS_SYN_LAT=77,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=128,HLS_SYN_LUT=587,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal f_fu_194_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_reg_541 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_200_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln13_reg_546 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln10_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_204_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_1_reg_551 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_214_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_559 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln25_fu_220_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_reg_564 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln13_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln16_fu_234_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln16_reg_569 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_244_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_577 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln28_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_280_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_595 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln20_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_435_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln28_3_fu_443_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_3_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_fu_532_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal f_0_reg_125 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_0_reg_136 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_reg_147 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_0_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_172 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_1_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_fu_343_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_226_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln28_fu_250_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln28_fu_262_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_286_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_291_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_fu_299_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_303_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_fu_316_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_320_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_cast_fu_325_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_1_fu_333_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln28_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_355_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_365_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_373_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_383_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_2_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_3_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_453_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_463_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_470_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_480_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_9_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_8_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_4_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_183_p0,
        din1 => grp_fu_183_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_183_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_274_p2 = ap_const_lv1_1))) then 
                c_0_reg_147 <= c_reg_577;
            elsif (((icmp_ln13_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_147 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_125 <= f_reg_541;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_125 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    max_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                max_0_reg_159 <= select_ln28_1_fu_532_p3;
            elsif (((icmp_ln16_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_0_reg_159 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpr_0_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                mpr_0_reg_172 <= mpr_reg_595;
            elsif (((icmp_ln16_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpr_0_reg_172 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_0_reg_136 <= r_reg_559;
            elsif (((icmp_ln10_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_136 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_577 <= c_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_541 <= f_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln28_1_reg_587 <= icmp_ln28_1_fu_268_p2;
                icmp_ln28_reg_582 <= icmp_ln28_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mpr_reg_595 <= mpr_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_reg_559 <= r_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                select_ln28_3_reg_627 <= select_ln28_3_fu_443_p3;
                select_ln28_reg_620 <= select_ln28_fu_435_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln25_reg_564(1) <= shl_ln25_fu_220_p2(1);
                    zext_ln16_reg_569(2 downto 1) <= zext_ln16_fu_234_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_1_reg_551(1 downto 0) <= zext_ln13_1_fu_204_p1(1 downto 0);
                    zext_ln13_reg_546(1 downto 0) <= zext_ln13_fu_200_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_546(3 downto 2) <= "00";
    zext_ln13_1_reg_551(4 downto 2) <= "000";
    shl_ln25_reg_564(0) <= '0';
    zext_ln16_reg_569(0) <= '0';
    zext_ln16_reg_569(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_188_p2, ap_CS_fsm_state3, icmp_ln13_fu_208_p2, ap_CS_fsm_state4, icmp_ln16_fu_238_p2, ap_CS_fsm_state5, icmp_ln20_fu_274_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_274_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln28_fu_303_p2 <= std_logic_vector(unsigned(zext_ln28_fu_299_p1) + unsigned(zext_ln13_reg_546));
    add_ln35_1_fu_333_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_551) + unsigned(tmp_13_cast_fu_325_p3));
    add_ln35_fu_320_p2 <= std_logic_vector(unsigned(zext_ln35_fu_316_p1) + unsigned(zext_ln16_reg_569));
    and_ln28_1_fu_429_p2 <= (grp_fu_183_p2 and and_ln28_fu_423_p2);
    and_ln28_2_fu_520_p2 <= (or_ln28_4_fu_514_p2 and or_ln28_3_fu_496_p2);
    and_ln28_3_fu_526_p2 <= (grp_fu_183_p2 and and_ln28_2_fu_520_p2);
    and_ln28_fu_423_p2 <= (or_ln28_2_fu_417_p2 and or_ln28_1_fu_399_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_188_p2)
    begin
        if (((icmp_ln10_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_188_p2)
    begin
        if (((icmp_ln10_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_369_p1 <= max_0_reg_159;
    bitcast_ln28_2_fu_450_p1 <= select_ln28_3_reg_627;
    bitcast_ln28_3_fu_467_p1 <= select_ln28_reg_620;
    bitcast_ln28_fu_351_p1 <= select_ln28_2_fu_343_p3;
    c_fu_244_p2 <= std_logic_vector(unsigned(c_0_reg_147) + unsigned(ap_const_lv2_1));
    conv_1_out_0_address0 <= zext_ln28_1_fu_308_p1(3 - 1 downto 0);

    conv_1_out_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_1_address0 <= zext_ln28_1_fu_308_p1(3 - 1 downto 0);

    conv_1_out_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_2_address0 <= zext_ln28_1_fu_308_p1(3 - 1 downto 0);

    conv_1_out_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_3_address0 <= zext_ln28_1_fu_308_p1(3 - 1 downto 0);

    conv_1_out_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_3_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_194_p2 <= std_logic_vector(unsigned(f_0_reg_125) + unsigned(ap_const_lv2_1));

    grp_fu_183_p0_assign_proc : process(ap_CS_fsm_state6, select_ln28_3_reg_627, ap_CS_fsm_state7, select_ln28_2_fu_343_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_183_p0 <= select_ln28_3_reg_627;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_183_p0 <= select_ln28_2_fu_343_p3;
        else 
            grp_fu_183_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_183_p1_assign_proc : process(select_ln28_reg_620, ap_CS_fsm_state6, ap_CS_fsm_state7, max_0_reg_159)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_183_p1 <= select_ln28_reg_620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_183_p1 <= max_0_reg_159;
        else 
            grp_fu_183_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_286_p2 <= std_logic_vector(unsigned(mpr_0_reg_172) + unsigned(shl_ln25_reg_564));
    icmp_ln10_fu_188_p2 <= "1" when (f_0_reg_125 = ap_const_lv2_2) else "0";
    icmp_ln13_fu_208_p2 <= "1" when (r_0_reg_136 = ap_const_lv2_2) else "0";
    icmp_ln16_fu_238_p2 <= "1" when (c_0_reg_147 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_274_p2 <= "1" when (mpr_0_reg_172 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_268_p2 <= "1" when (or_ln28_fu_262_p2 = ap_const_lv2_1) else "0";
    icmp_ln28_2_fu_387_p2 <= "0" when (tmp_1_fu_355_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_393_p2 <= "1" when (trunc_ln28_fu_365_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_405_p2 <= "0" when (tmp_4_fu_373_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_411_p2 <= "1" when (trunc_ln28_1_fu_383_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_484_p2 <= "0" when (tmp_6_fu_453_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_490_p2 <= "1" when (trunc_ln28_2_fu_463_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_8_fu_502_p2 <= "0" when (tmp_7_fu_470_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_9_fu_508_p2 <= "1" when (trunc_ln28_3_fu_480_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_256_p2 <= "1" when (shl_ln28_fu_250_p2 = ap_const_lv2_0) else "0";
    max_pool_1_out_address0 <= zext_ln35_1_fu_338_p1(3 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= max_0_reg_159;

    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln20_fu_274_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_274_p2 = ap_const_lv1_1))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_280_p2 <= std_logic_vector(unsigned(mpr_0_reg_172) + unsigned(ap_const_lv2_1));
    or_ln28_1_fu_399_p2 <= (icmp_ln28_3_fu_393_p2 or icmp_ln28_2_fu_387_p2);
    or_ln28_2_fu_417_p2 <= (icmp_ln28_5_fu_411_p2 or icmp_ln28_4_fu_405_p2);
    or_ln28_3_fu_496_p2 <= (icmp_ln28_7_fu_490_p2 or icmp_ln28_6_fu_484_p2);
    or_ln28_4_fu_514_p2 <= (icmp_ln28_9_fu_508_p2 or icmp_ln28_8_fu_502_p2);
    or_ln28_fu_262_p2 <= (shl_ln28_fu_250_p2 or ap_const_lv2_1);
    r_fu_214_p2 <= std_logic_vector(unsigned(r_0_reg_136) + unsigned(ap_const_lv2_1));
    select_ln28_1_fu_532_p3 <= 
        select_ln28_3_reg_627 when (and_ln28_3_fu_526_p2(0) = '1') else 
        select_ln28_reg_620;
    select_ln28_2_fu_343_p3 <= 
        conv_1_out_0_q0 when (icmp_ln28_reg_582(0) = '1') else 
        conv_1_out_2_q0;
    select_ln28_3_fu_443_p3 <= 
        conv_1_out_1_q0 when (icmp_ln28_1_reg_587(0) = '1') else 
        conv_1_out_3_q0;
    select_ln28_fu_435_p3 <= 
        select_ln28_2_fu_343_p3 when (and_ln28_1_fu_429_p2(0) = '1') else 
        max_0_reg_159;
    shl_ln25_fu_220_p2 <= std_logic_vector(shift_left(unsigned(r_0_reg_136),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln28_fu_250_p2 <= std_logic_vector(shift_left(unsigned(c_0_reg_147),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_13_cast_fu_325_p3 <= (add_ln35_fu_320_p2 & ap_const_lv1_0);
    tmp_1_fu_355_p4 <= bitcast_ln28_fu_351_p1(30 downto 23);
    tmp_4_fu_373_p4 <= bitcast_ln28_1_fu_369_p1(30 downto 23);
    tmp_6_fu_453_p4 <= bitcast_ln28_2_fu_450_p1(30 downto 23);
    tmp_7_fu_470_p4 <= bitcast_ln28_3_fu_467_p1(30 downto 23);
    tmp_9_fu_291_p3 <= (i_fu_286_p2 & ap_const_lv1_0);
    tmp_s_fu_226_p3 <= (r_0_reg_136 & ap_const_lv1_0);
    trunc_ln28_1_fu_383_p1 <= bitcast_ln28_1_fu_369_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_463_p1 <= bitcast_ln28_2_fu_450_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_480_p1 <= bitcast_ln28_3_fu_467_p1(23 - 1 downto 0);
    trunc_ln28_fu_365_p1 <= bitcast_ln28_fu_351_p1(23 - 1 downto 0);
    zext_ln13_1_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_125),5));
    zext_ln13_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_125),4));
    zext_ln16_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_226_p3),4));
    zext_ln28_1_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_303_p2),64));
    zext_ln28_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_291_p3),4));
    zext_ln35_1_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_333_p2),64));
    zext_ln35_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_147),4));
end behav;
