// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.042000,HLS_SYN_LAT=77,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=128,HLS_SYN_LUT=587,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_2_address0,
        conv_1_out_2_ce0,
        conv_1_out_2_q0,
        conv_1_out_3_address0,
        conv_1_out_3_ce0,
        conv_1_out_3_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [2:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [2:0] conv_1_out_2_address0;
output   conv_1_out_2_ce0;
input  [31:0] conv_1_out_2_q0;
output  [2:0] conv_1_out_3_address0;
output   conv_1_out_3_ce0;
input  [31:0] conv_1_out_3_q0;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_0_ce0;
reg conv_1_out_1_ce0;
reg conv_1_out_2_ce0;
reg conv_1_out_3_ce0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] f_fu_194_p2;
reg   [1:0] f_reg_541;
wire    ap_CS_fsm_state2;
wire   [3:0] zext_ln13_fu_200_p1;
reg   [3:0] zext_ln13_reg_546;
wire   [0:0] icmp_ln10_fu_188_p2;
wire   [4:0] zext_ln13_1_fu_204_p1;
reg   [4:0] zext_ln13_1_reg_551;
wire   [1:0] r_fu_214_p2;
reg   [1:0] r_reg_559;
wire    ap_CS_fsm_state3;
wire   [1:0] shl_ln25_fu_220_p2;
reg   [1:0] shl_ln25_reg_564;
wire   [0:0] icmp_ln13_fu_208_p2;
wire   [3:0] zext_ln16_fu_234_p1;
reg   [3:0] zext_ln16_reg_569;
wire   [1:0] c_fu_244_p2;
reg   [1:0] c_reg_577;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln28_fu_256_p2;
reg   [0:0] icmp_ln28_reg_582;
wire   [0:0] icmp_ln16_fu_238_p2;
wire   [0:0] icmp_ln28_1_fu_268_p2;
reg   [0:0] icmp_ln28_1_reg_587;
wire   [1:0] mpr_fu_280_p2;
reg   [1:0] mpr_reg_595;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln20_fu_274_p2;
wire   [31:0] select_ln28_fu_435_p3;
reg   [31:0] select_ln28_reg_620;
wire    ap_CS_fsm_state6;
wire   [31:0] select_ln28_3_fu_443_p3;
reg   [31:0] select_ln28_3_reg_627;
wire   [31:0] select_ln28_1_fu_532_p3;
wire    ap_CS_fsm_state7;
reg   [1:0] f_0_reg_125;
reg   [1:0] r_0_reg_136;
reg   [1:0] c_0_reg_147;
reg   [31:0] max_0_reg_159;
reg   [1:0] mpr_0_reg_172;
wire   [63:0] zext_ln28_1_fu_308_p1;
wire   [63:0] zext_ln35_1_fu_338_p1;
reg   [31:0] grp_fu_183_p0;
wire   [31:0] select_ln28_2_fu_343_p3;
reg   [31:0] grp_fu_183_p1;
wire   [2:0] tmp_s_fu_226_p3;
wire   [1:0] shl_ln28_fu_250_p2;
wire   [1:0] or_ln28_fu_262_p2;
wire   [1:0] i_fu_286_p2;
wire   [2:0] tmp_9_fu_291_p3;
wire   [3:0] zext_ln28_fu_299_p1;
wire   [3:0] add_ln28_fu_303_p2;
wire   [3:0] zext_ln35_fu_316_p1;
wire   [3:0] add_ln35_fu_320_p2;
wire   [4:0] tmp_13_cast_fu_325_p3;
wire   [4:0] add_ln35_1_fu_333_p2;
wire   [31:0] bitcast_ln28_fu_351_p1;
wire   [31:0] bitcast_ln28_1_fu_369_p1;
wire   [7:0] tmp_1_fu_355_p4;
wire   [22:0] trunc_ln28_fu_365_p1;
wire   [0:0] icmp_ln28_3_fu_393_p2;
wire   [0:0] icmp_ln28_2_fu_387_p2;
wire   [7:0] tmp_4_fu_373_p4;
wire   [22:0] trunc_ln28_1_fu_383_p1;
wire   [0:0] icmp_ln28_5_fu_411_p2;
wire   [0:0] icmp_ln28_4_fu_405_p2;
wire   [0:0] or_ln28_1_fu_399_p2;
wire   [0:0] or_ln28_2_fu_417_p2;
wire   [0:0] and_ln28_fu_423_p2;
wire   [0:0] grp_fu_183_p2;
wire   [0:0] and_ln28_1_fu_429_p2;
wire   [31:0] bitcast_ln28_2_fu_450_p1;
wire   [31:0] bitcast_ln28_3_fu_467_p1;
wire   [7:0] tmp_6_fu_453_p4;
wire   [22:0] trunc_ln28_2_fu_463_p1;
wire   [0:0] icmp_ln28_7_fu_490_p2;
wire   [0:0] icmp_ln28_6_fu_484_p2;
wire   [7:0] tmp_7_fu_470_p4;
wire   [22:0] trunc_ln28_3_fu_480_p1;
wire   [0:0] icmp_ln28_9_fu_508_p2;
wire   [0:0] icmp_ln28_8_fu_502_p2;
wire   [0:0] or_ln28_3_fu_496_p2;
wire   [0:0] or_ln28_4_fu_514_p2;
wire   [0:0] and_ln28_2_fu_520_p2;
wire   [0:0] and_ln28_3_fu_526_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(grp_fu_183_p0),
    .din1(grp_fu_183_p1),
    .opcode(5'd2),
    .dout(grp_fu_183_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_274_p2 == 1'd1))) begin
        c_0_reg_147 <= c_reg_577;
    end else if (((icmp_ln13_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_147 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_125 <= f_reg_541;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_125 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_0_reg_159 <= select_ln28_1_fu_532_p3;
    end else if (((icmp_ln16_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_159 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mpr_0_reg_172 <= mpr_reg_595;
    end else if (((icmp_ln16_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_172 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_136 <= r_reg_559;
    end else if (((icmp_ln10_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_136 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_577 <= c_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_541 <= f_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln28_1_reg_587 <= icmp_ln28_1_fu_268_p2;
        icmp_ln28_reg_582 <= icmp_ln28_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_595 <= mpr_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_559 <= r_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        select_ln28_3_reg_627 <= select_ln28_3_fu_443_p3;
        select_ln28_reg_620 <= select_ln28_fu_435_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln25_reg_564[1] <= shl_ln25_fu_220_p2[1];
        zext_ln16_reg_569[2 : 1] <= zext_ln16_fu_234_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_551[1 : 0] <= zext_ln13_1_fu_204_p1[1 : 0];
        zext_ln13_reg_546[1 : 0] <= zext_ln13_fu_200_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_2_ce0 = 1'b1;
    end else begin
        conv_1_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_3_ce0 = 1'b1;
    end else begin
        conv_1_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_183_p0 = select_ln28_3_reg_627;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_183_p0 = select_ln28_2_fu_343_p3;
    end else begin
        grp_fu_183_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_183_p1 = select_ln28_reg_620;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_183_p1 = max_0_reg_159;
    end else begin
        grp_fu_183_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_274_p2 == 1'd1))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_274_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_303_p2 = (zext_ln28_fu_299_p1 + zext_ln13_reg_546);

assign add_ln35_1_fu_333_p2 = (zext_ln13_1_reg_551 + tmp_13_cast_fu_325_p3);

assign add_ln35_fu_320_p2 = (zext_ln35_fu_316_p1 + zext_ln16_reg_569);

assign and_ln28_1_fu_429_p2 = (grp_fu_183_p2 & and_ln28_fu_423_p2);

assign and_ln28_2_fu_520_p2 = (or_ln28_4_fu_514_p2 & or_ln28_3_fu_496_p2);

assign and_ln28_3_fu_526_p2 = (grp_fu_183_p2 & and_ln28_2_fu_520_p2);

assign and_ln28_fu_423_p2 = (or_ln28_2_fu_417_p2 & or_ln28_1_fu_399_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln28_1_fu_369_p1 = max_0_reg_159;

assign bitcast_ln28_2_fu_450_p1 = select_ln28_3_reg_627;

assign bitcast_ln28_3_fu_467_p1 = select_ln28_reg_620;

assign bitcast_ln28_fu_351_p1 = select_ln28_2_fu_343_p3;

assign c_fu_244_p2 = (c_0_reg_147 + 2'd1);

assign conv_1_out_0_address0 = zext_ln28_1_fu_308_p1;

assign conv_1_out_1_address0 = zext_ln28_1_fu_308_p1;

assign conv_1_out_2_address0 = zext_ln28_1_fu_308_p1;

assign conv_1_out_3_address0 = zext_ln28_1_fu_308_p1;

assign f_fu_194_p2 = (f_0_reg_125 + 2'd1);

assign i_fu_286_p2 = (mpr_0_reg_172 + shl_ln25_reg_564);

assign icmp_ln10_fu_188_p2 = ((f_0_reg_125 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_208_p2 = ((r_0_reg_136 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_238_p2 = ((c_0_reg_147 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_274_p2 = ((mpr_0_reg_172 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_268_p2 = ((or_ln28_fu_262_p2 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_387_p2 = ((tmp_1_fu_355_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_393_p2 = ((trunc_ln28_fu_365_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_405_p2 = ((tmp_4_fu_373_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_411_p2 = ((trunc_ln28_1_fu_383_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_484_p2 = ((tmp_6_fu_453_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_490_p2 = ((trunc_ln28_2_fu_463_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_502_p2 = ((tmp_7_fu_470_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_508_p2 = ((trunc_ln28_3_fu_480_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_256_p2 = ((shl_ln28_fu_250_p2 == 2'd0) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_1_fu_338_p1;

assign max_pool_1_out_d0 = max_0_reg_159;

assign mpr_fu_280_p2 = (mpr_0_reg_172 + 2'd1);

assign or_ln28_1_fu_399_p2 = (icmp_ln28_3_fu_393_p2 | icmp_ln28_2_fu_387_p2);

assign or_ln28_2_fu_417_p2 = (icmp_ln28_5_fu_411_p2 | icmp_ln28_4_fu_405_p2);

assign or_ln28_3_fu_496_p2 = (icmp_ln28_7_fu_490_p2 | icmp_ln28_6_fu_484_p2);

assign or_ln28_4_fu_514_p2 = (icmp_ln28_9_fu_508_p2 | icmp_ln28_8_fu_502_p2);

assign or_ln28_fu_262_p2 = (shl_ln28_fu_250_p2 | 2'd1);

assign r_fu_214_p2 = (r_0_reg_136 + 2'd1);

assign select_ln28_1_fu_532_p3 = ((and_ln28_3_fu_526_p2[0:0] === 1'b1) ? select_ln28_3_reg_627 : select_ln28_reg_620);

assign select_ln28_2_fu_343_p3 = ((icmp_ln28_reg_582[0:0] === 1'b1) ? conv_1_out_0_q0 : conv_1_out_2_q0);

assign select_ln28_3_fu_443_p3 = ((icmp_ln28_1_reg_587[0:0] === 1'b1) ? conv_1_out_1_q0 : conv_1_out_3_q0);

assign select_ln28_fu_435_p3 = ((and_ln28_1_fu_429_p2[0:0] === 1'b1) ? select_ln28_2_fu_343_p3 : max_0_reg_159);

assign shl_ln25_fu_220_p2 = r_0_reg_136 << 2'd1;

assign shl_ln28_fu_250_p2 = c_0_reg_147 << 2'd1;

assign tmp_13_cast_fu_325_p3 = {{add_ln35_fu_320_p2}, {1'd0}};

assign tmp_1_fu_355_p4 = {{bitcast_ln28_fu_351_p1[30:23]}};

assign tmp_4_fu_373_p4 = {{bitcast_ln28_1_fu_369_p1[30:23]}};

assign tmp_6_fu_453_p4 = {{bitcast_ln28_2_fu_450_p1[30:23]}};

assign tmp_7_fu_470_p4 = {{bitcast_ln28_3_fu_467_p1[30:23]}};

assign tmp_9_fu_291_p3 = {{i_fu_286_p2}, {1'd0}};

assign tmp_s_fu_226_p3 = {{r_0_reg_136}, {1'd0}};

assign trunc_ln28_1_fu_383_p1 = bitcast_ln28_1_fu_369_p1[22:0];

assign trunc_ln28_2_fu_463_p1 = bitcast_ln28_2_fu_450_p1[22:0];

assign trunc_ln28_3_fu_480_p1 = bitcast_ln28_3_fu_467_p1[22:0];

assign trunc_ln28_fu_365_p1 = bitcast_ln28_fu_351_p1[22:0];

assign zext_ln13_1_fu_204_p1 = f_0_reg_125;

assign zext_ln13_fu_200_p1 = f_0_reg_125;

assign zext_ln16_fu_234_p1 = tmp_s_fu_226_p3;

assign zext_ln28_1_fu_308_p1 = add_ln28_fu_303_p2;

assign zext_ln28_fu_299_p1 = tmp_9_fu_291_p3;

assign zext_ln35_1_fu_338_p1 = add_ln35_1_fu_333_p2;

assign zext_ln35_fu_316_p1 = c_0_reg_147;

always @ (posedge ap_clk) begin
    zext_ln13_reg_546[3:2] <= 2'b00;
    zext_ln13_1_reg_551[4:2] <= 3'b000;
    shl_ln25_reg_564[0] <= 1'b0;
    zext_ln16_reg_569[0] <= 1'b0;
    zext_ln16_reg_569[3] <= 1'b0;
end

endmodule //max_pool_1
