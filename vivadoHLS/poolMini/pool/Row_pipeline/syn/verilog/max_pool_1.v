// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.830000,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=226,HLS_SYN_LUT=1220,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        conv_1_out_address1,
        conv_1_out_ce1,
        conv_1_out_q1,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0,
        max_pool_1_out_address1,
        max_pool_1_out_ce1,
        max_pool_1_out_we1,
        max_pool_1_out_d1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [4:0] conv_1_out_address1;
output   conv_1_out_ce1;
input  [31:0] conv_1_out_q1;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;
output  [2:0] max_pool_1_out_address1;
output   max_pool_1_out_ce1;
output   max_pool_1_out_we1;
output  [31:0] max_pool_1_out_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] conv_1_out_address0;
reg conv_1_out_ce0;
reg[4:0] conv_1_out_address1;
reg conv_1_out_ce1;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;
reg max_pool_1_out_ce1;
reg max_pool_1_out_we1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] indvar_flatten_reg_186;
reg   [1:0] f_0_reg_197;
reg   [1:0] r_0_reg_208;
reg   [31:0] reg_230;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln10_reg_1158;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [0:0] icmp_ln10_fu_234_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] add_ln10_fu_240_p2;
reg   [2:0] add_ln10_reg_1162;
wire   [1:0] select_ln28_8_fu_258_p3;
reg   [1:0] select_ln28_8_reg_1167;
wire   [1:0] select_ln28_9_fu_266_p3;
reg   [1:0] select_ln28_9_reg_1175;
wire   [6:0] zext_ln14_fu_274_p1;
reg   [6:0] zext_ln14_reg_1183;
wire   [4:0] tmp_25_fu_282_p3;
reg   [4:0] tmp_25_reg_1190;
wire   [4:0] tmp_26_fu_290_p4;
reg   [4:0] tmp_26_reg_1195;
wire   [31:0] select_ln28_fu_409_p3;
reg   [31:0] select_ln28_reg_1220;
wire   [0:0] grp_fu_225_p2;
reg   [0:0] tmp_6_reg_1226;
wire   [31:0] select_ln28_1_fu_505_p3;
reg   [31:0] select_ln28_1_reg_1231;
wire   [1:0] or_ln25_fu_512_p2;
reg   [1:0] or_ln25_reg_1238;
wire   [31:0] select_ln28_4_fu_589_p3;
reg   [31:0] select_ln28_4_reg_1253;
reg   [0:0] tmp_16_reg_1259;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] select_ln28_2_fu_736_p3;
reg   [31:0] select_ln28_2_reg_1274;
wire   [31:0] select_ln28_6_fu_917_p3;
reg   [31:0] select_ln28_6_reg_1281;
wire   [1:0] r_fu_925_p2;
reg   [1:0] r_reg_1288;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [2:0] ap_phi_mux_indvar_flatten_phi_fu_190_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_f_0_phi_fu_201_p4;
reg   [1:0] ap_phi_mux_r_0_phi_fu_212_p4;
wire   [63:0] zext_ln28_fu_300_p1;
wire   [63:0] zext_ln28_1_fu_325_p1;
wire   [63:0] tmp_27_fu_335_p3;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln28_3_fu_362_p1;
wire   [63:0] zext_ln28_2_fu_527_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_30_fu_538_p3;
wire   [63:0] zext_ln28_4_fu_624_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln28_5_fu_648_p1;
wire   [63:0] zext_ln35_fu_946_p1;
wire   [63:0] zext_ln35_1_fu_971_p1;
reg   [31:0] grp_fu_219_p1;
reg   [31:0] grp_fu_225_p1;
wire   [31:0] select_ln28_5_fu_825_p3;
wire   [0:0] icmp_ln13_fu_252_p2;
wire   [1:0] f_fu_246_p2;
wire   [0:0] trunc_ln25_fu_278_p1;
wire   [4:0] or_ln28_14_fu_305_p2;
wire   [6:0] tmp_29_cast_fu_311_p3;
wire   [6:0] add_ln28_fu_319_p2;
wire   [4:0] or_ln28_15_fu_330_p2;
wire   [4:0] or_ln28_16_fu_344_p2;
wire   [6:0] tmp_31_cast_fu_349_p3;
wire   [6:0] add_ln28_1_fu_357_p2;
wire   [31:0] bitcast_ln28_fu_367_p1;
wire   [7:0] tmp_2_fu_371_p4;
wire   [22:0] trunc_ln28_fu_381_p1;
wire   [0:0] icmp_ln28_1_fu_391_p2;
wire   [0:0] icmp_ln28_fu_385_p2;
wire   [0:0] or_ln28_fu_397_p2;
wire   [0:0] grp_fu_219_p2;
wire   [0:0] and_ln28_fu_403_p2;
wire   [31:0] bitcast_ln28_1_fu_423_p1;
wire   [31:0] bitcast_ln28_2_fu_441_p1;
wire   [7:0] tmp_4_fu_427_p4;
wire   [22:0] trunc_ln28_1_fu_437_p1;
wire   [0:0] icmp_ln28_3_fu_464_p2;
wire   [0:0] icmp_ln28_2_fu_458_p2;
wire   [7:0] tmp_5_fu_444_p4;
wire   [22:0] trunc_ln28_2_fu_454_p1;
wire   [0:0] icmp_ln28_5_fu_482_p2;
wire   [0:0] icmp_ln28_4_fu_476_p2;
wire   [0:0] or_ln28_1_fu_470_p2;
wire   [0:0] or_ln28_2_fu_488_p2;
wire   [0:0] and_ln28_1_fu_494_p2;
wire   [0:0] and_ln28_2_fu_500_p2;
wire   [1:0] shl_ln25_fu_418_p2;
wire   [4:0] tmp_29_fu_518_p4;
wire   [4:0] or_ln28_18_fu_532_p2;
wire   [31:0] bitcast_ln28_7_fu_547_p1;
wire   [7:0] tmp_12_fu_551_p4;
wire   [22:0] trunc_ln28_7_fu_561_p1;
wire   [0:0] icmp_ln28_15_fu_571_p2;
wire   [0:0] icmp_ln28_14_fu_565_p2;
wire   [0:0] or_ln28_7_fu_577_p2;
wire   [0:0] and_ln28_7_fu_583_p2;
wire   [4:0] tmp_28_fu_598_p3;
wire   [4:0] or_ln28_17_fu_605_p2;
wire   [6:0] tmp_34_cast_fu_611_p3;
wire   [6:0] add_ln28_2_fu_619_p2;
wire   [4:0] or_ln28_19_fu_629_p2;
wire   [6:0] tmp_36_cast_fu_635_p3;
wire   [6:0] add_ln28_3_fu_643_p2;
wire   [31:0] bitcast_ln28_3_fu_653_p1;
wire   [31:0] bitcast_ln28_4_fu_671_p1;
wire   [7:0] tmp_7_fu_657_p4;
wire   [22:0] trunc_ln28_3_fu_667_p1;
wire   [0:0] icmp_ln28_7_fu_694_p2;
wire   [0:0] icmp_ln28_6_fu_688_p2;
wire   [7:0] tmp_8_fu_674_p4;
wire   [22:0] trunc_ln28_4_fu_684_p1;
wire   [0:0] icmp_ln28_9_fu_712_p2;
wire   [0:0] icmp_ln28_8_fu_706_p2;
wire   [0:0] or_ln28_3_fu_700_p2;
wire   [0:0] or_ln28_4_fu_718_p2;
wire   [0:0] and_ln28_3_fu_724_p2;
wire   [0:0] and_ln28_4_fu_730_p2;
wire   [31:0] bitcast_ln28_8_fu_743_p1;
wire   [31:0] bitcast_ln28_9_fu_761_p1;
wire   [7:0] tmp_14_fu_747_p4;
wire   [22:0] trunc_ln28_8_fu_757_p1;
wire   [0:0] icmp_ln28_17_fu_784_p2;
wire   [0:0] icmp_ln28_16_fu_778_p2;
wire   [7:0] tmp_15_fu_764_p4;
wire   [22:0] trunc_ln28_9_fu_774_p1;
wire   [0:0] icmp_ln28_19_fu_802_p2;
wire   [0:0] icmp_ln28_18_fu_796_p2;
wire   [0:0] or_ln28_8_fu_790_p2;
wire   [0:0] or_ln28_9_fu_808_p2;
wire   [0:0] and_ln28_8_fu_814_p2;
wire   [0:0] and_ln28_9_fu_820_p2;
wire   [31:0] bitcast_ln28_10_fu_833_p1;
wire   [31:0] bitcast_ln28_11_fu_851_p1;
wire   [7:0] tmp_17_fu_837_p4;
wire   [22:0] trunc_ln28_10_fu_847_p1;
wire   [0:0] icmp_ln28_21_fu_875_p2;
wire   [0:0] icmp_ln28_20_fu_869_p2;
wire   [7:0] tmp_18_fu_855_p4;
wire   [22:0] trunc_ln28_11_fu_865_p1;
wire   [0:0] icmp_ln28_23_fu_893_p2;
wire   [0:0] icmp_ln28_22_fu_887_p2;
wire   [0:0] or_ln28_10_fu_881_p2;
wire   [0:0] or_ln28_11_fu_899_p2;
wire   [0:0] and_ln28_10_fu_905_p2;
wire   [0:0] and_ln28_11_fu_911_p2;
wire   [3:0] tmp_24_fu_940_p3;
wire   [3:0] tmp_23_fu_933_p3;
wire   [3:0] or_ln35_fu_951_p2;
wire   [4:0] zext_ln14_1_fu_930_p1;
wire   [4:0] tmp_26_cast_fu_957_p3;
wire   [4:0] add_ln35_fu_965_p2;
wire   [31:0] bitcast_ln28_5_fu_976_p1;
wire   [31:0] bitcast_ln28_6_fu_994_p1;
wire   [7:0] tmp_s_fu_980_p4;
wire   [22:0] trunc_ln28_5_fu_990_p1;
wire   [0:0] icmp_ln28_11_fu_1017_p2;
wire   [0:0] icmp_ln28_10_fu_1011_p2;
wire   [7:0] tmp_10_fu_997_p4;
wire   [22:0] trunc_ln28_6_fu_1007_p1;
wire   [0:0] icmp_ln28_13_fu_1035_p2;
wire   [0:0] icmp_ln28_12_fu_1029_p2;
wire   [0:0] or_ln28_5_fu_1023_p2;
wire   [0:0] or_ln28_6_fu_1041_p2;
wire   [0:0] and_ln28_5_fu_1047_p2;
wire   [0:0] and_ln28_6_fu_1053_p2;
wire   [31:0] bitcast_ln28_12_fu_1067_p1;
wire   [31:0] bitcast_ln28_13_fu_1085_p1;
wire   [7:0] tmp_20_fu_1071_p4;
wire   [22:0] trunc_ln28_12_fu_1081_p1;
wire   [0:0] icmp_ln28_25_fu_1108_p2;
wire   [0:0] icmp_ln28_24_fu_1102_p2;
wire   [7:0] tmp_21_fu_1088_p4;
wire   [22:0] trunc_ln28_13_fu_1098_p1;
wire   [0:0] icmp_ln28_27_fu_1126_p2;
wire   [0:0] icmp_ln28_26_fu_1120_p2;
wire   [0:0] or_ln28_12_fu_1114_p2;
wire   [0:0] or_ln28_13_fu_1132_p2;
wire   [0:0] and_ln28_12_fu_1138_p2;
wire   [0:0] and_ln28_13_fu_1144_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state7;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(grp_fu_219_p1),
    .opcode(5'd2),
    .dout(grp_fu_219_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(conv_1_out_q1),
    .din1(grp_fu_225_p1),
    .opcode(5'd2),
    .dout(grp_fu_225_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_197 <= select_ln28_9_reg_1175;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_197 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_186 <= add_ln10_reg_1162;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_186 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_208 <= r_reg_1288;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_208 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln10_reg_1162 <= add_ln10_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_1158 <= icmp_ln10_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        or_ln25_reg_1238[1] <= or_ln25_fu_512_p2[1];
        select_ln28_1_reg_1231 <= select_ln28_1_fu_505_p3;
        select_ln28_4_reg_1253 <= select_ln28_4_fu_589_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1158 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        r_reg_1288 <= r_fu_925_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln10_reg_1158 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_230 <= conv_1_out_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        select_ln28_2_reg_1274 <= select_ln28_2_fu_736_p3;
        select_ln28_6_reg_1281 <= select_ln28_6_fu_917_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln28_8_reg_1167 <= select_ln28_8_fu_258_p3;
        tmp_25_reg_1190[4] <= tmp_25_fu_282_p3[4];
        tmp_26_reg_1195[1 : 0] <= tmp_26_fu_290_p4[1 : 0];
tmp_26_reg_1195[4] <= tmp_26_fu_290_p4[4];
        zext_ln14_reg_1183[1 : 0] <= zext_ln14_fu_274_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln28_9_reg_1175 <= select_ln28_9_fu_266_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1158 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln28_reg_1220 <= select_ln28_fu_409_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_16_reg_1259 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1158 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_6_reg_1226 <= grp_fu_225_p2;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_234_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_201_p4 = select_ln28_9_reg_1175;
    end else begin
        ap_phi_mux_f_0_phi_fu_201_p4 = f_0_reg_197;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_190_p4 = add_ln10_reg_1162;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_190_p4 = indvar_flatten_reg_186;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_212_p4 = r_reg_1288;
    end else begin
        ap_phi_mux_r_0_phi_fu_212_p4 = r_0_reg_208;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            conv_1_out_address0 = zext_ln28_4_fu_624_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            conv_1_out_address0 = zext_ln28_2_fu_527_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_address0 = tmp_27_fu_335_p3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_1_out_address0 = zext_ln28_fu_300_p1;
        end else begin
            conv_1_out_address0 = 'bx;
        end
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            conv_1_out_address1 = zext_ln28_5_fu_648_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            conv_1_out_address1 = tmp_30_fu_538_p3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_address1 = zext_ln28_3_fu_362_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_1_out_address1 = zext_ln28_1_fu_325_p1;
        end else begin
            conv_1_out_address1 = 'bx;
        end
    end else begin
        conv_1_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_1_out_ce1 = 1'b1;
    end else begin
        conv_1_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_219_p1 = select_ln28_2_reg_1274;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_219_p1 = select_ln28_1_reg_1231;
    end else if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_219_p1 = 32'd8388608;
    end else begin
        grp_fu_219_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_225_p1 = select_ln28_6_reg_1281;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_225_p1 = select_ln28_5_fu_825_p3;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_225_p1 = select_ln28_4_fu_589_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_225_p1 = select_ln28_fu_409_p3;
    end else begin
        grp_fu_225_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_1_out_ce1 = 1'b1;
    end else begin
        max_pool_1_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1158 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_1_out_we1 = 1'b1;
    end else begin
        max_pool_1_out_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_234_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln10_fu_234_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_240_p2 = (ap_phi_mux_indvar_flatten_phi_fu_190_p4 + 3'd1);

assign add_ln28_1_fu_357_p2 = (zext_ln14_reg_1183 + tmp_31_cast_fu_349_p3);

assign add_ln28_2_fu_619_p2 = (zext_ln14_reg_1183 + tmp_34_cast_fu_611_p3);

assign add_ln28_3_fu_643_p2 = (zext_ln14_reg_1183 + tmp_36_cast_fu_635_p3);

assign add_ln28_fu_319_p2 = (zext_ln14_fu_274_p1 + tmp_29_cast_fu_311_p3);

assign add_ln35_fu_965_p2 = (zext_ln14_1_fu_930_p1 + tmp_26_cast_fu_957_p3);

assign and_ln28_10_fu_905_p2 = (or_ln28_11_fu_899_p2 & or_ln28_10_fu_881_p2);

assign and_ln28_11_fu_911_p2 = (grp_fu_225_p2 & and_ln28_10_fu_905_p2);

assign and_ln28_12_fu_1138_p2 = (or_ln28_13_fu_1132_p2 & or_ln28_12_fu_1114_p2);

assign and_ln28_13_fu_1144_p2 = (grp_fu_225_p2 & and_ln28_12_fu_1138_p2);

assign and_ln28_1_fu_494_p2 = (or_ln28_2_fu_488_p2 & or_ln28_1_fu_470_p2);

assign and_ln28_2_fu_500_p2 = (tmp_6_reg_1226 & and_ln28_1_fu_494_p2);

assign and_ln28_3_fu_724_p2 = (or_ln28_4_fu_718_p2 & or_ln28_3_fu_700_p2);

assign and_ln28_4_fu_730_p2 = (grp_fu_219_p2 & and_ln28_3_fu_724_p2);

assign and_ln28_5_fu_1047_p2 = (or_ln28_6_fu_1041_p2 & or_ln28_5_fu_1023_p2);

assign and_ln28_6_fu_1053_p2 = (grp_fu_219_p2 & and_ln28_5_fu_1047_p2);

assign and_ln28_7_fu_583_p2 = (or_ln28_7_fu_577_p2 & grp_fu_219_p2);

assign and_ln28_8_fu_814_p2 = (or_ln28_9_fu_808_p2 & or_ln28_8_fu_790_p2);

assign and_ln28_9_fu_820_p2 = (tmp_16_reg_1259 & and_ln28_8_fu_814_p2);

assign and_ln28_fu_403_p2 = (or_ln28_fu_397_p2 & grp_fu_219_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_10_fu_833_p1 = conv_1_out_q1;

assign bitcast_ln28_11_fu_851_p1 = select_ln28_5_fu_825_p3;

assign bitcast_ln28_12_fu_1067_p1 = conv_1_out_q1;

assign bitcast_ln28_13_fu_1085_p1 = select_ln28_6_reg_1281;

assign bitcast_ln28_1_fu_423_p1 = reg_230;

assign bitcast_ln28_2_fu_441_p1 = select_ln28_reg_1220;

assign bitcast_ln28_3_fu_653_p1 = conv_1_out_q0;

assign bitcast_ln28_4_fu_671_p1 = select_ln28_1_reg_1231;

assign bitcast_ln28_5_fu_976_p1 = conv_1_out_q0;

assign bitcast_ln28_6_fu_994_p1 = select_ln28_2_reg_1274;

assign bitcast_ln28_7_fu_547_p1 = conv_1_out_q0;

assign bitcast_ln28_8_fu_743_p1 = reg_230;

assign bitcast_ln28_9_fu_761_p1 = select_ln28_4_reg_1253;

assign bitcast_ln28_fu_367_p1 = conv_1_out_q0;

assign f_fu_246_p2 = (2'd1 + ap_phi_mux_f_0_phi_fu_201_p4);

assign icmp_ln10_fu_234_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_190_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_252_p2 = ((ap_phi_mux_r_0_phi_fu_212_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_1011_p2 = ((tmp_s_fu_980_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_1017_p2 = ((trunc_ln28_5_fu_990_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_12_fu_1029_p2 = ((tmp_10_fu_997_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_13_fu_1035_p2 = ((trunc_ln28_6_fu_1007_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_14_fu_565_p2 = ((tmp_12_fu_551_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_15_fu_571_p2 = ((trunc_ln28_7_fu_561_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_16_fu_778_p2 = ((tmp_14_fu_747_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_17_fu_784_p2 = ((trunc_ln28_8_fu_757_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_18_fu_796_p2 = ((tmp_15_fu_764_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_19_fu_802_p2 = ((trunc_ln28_9_fu_774_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_391_p2 = ((trunc_ln28_fu_381_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_20_fu_869_p2 = ((tmp_17_fu_837_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_21_fu_875_p2 = ((trunc_ln28_10_fu_847_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_22_fu_887_p2 = ((tmp_18_fu_855_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_23_fu_893_p2 = ((trunc_ln28_11_fu_865_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_24_fu_1102_p2 = ((tmp_20_fu_1071_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_25_fu_1108_p2 = ((trunc_ln28_12_fu_1081_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_26_fu_1120_p2 = ((tmp_21_fu_1088_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_27_fu_1126_p2 = ((trunc_ln28_13_fu_1098_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_458_p2 = ((tmp_4_fu_427_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_464_p2 = ((trunc_ln28_1_fu_437_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_476_p2 = ((tmp_5_fu_444_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_482_p2 = ((trunc_ln28_2_fu_454_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_688_p2 = ((tmp_7_fu_657_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_694_p2 = ((trunc_ln28_3_fu_667_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_706_p2 = ((tmp_8_fu_674_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_712_p2 = ((trunc_ln28_4_fu_684_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_385_p2 = ((tmp_2_fu_371_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_fu_946_p1;

assign max_pool_1_out_address1 = zext_ln35_1_fu_971_p1;

assign max_pool_1_out_d0 = ((and_ln28_6_fu_1053_p2[0:0] === 1'b1) ? conv_1_out_q0 : select_ln28_2_reg_1274);

assign max_pool_1_out_d1 = ((and_ln28_13_fu_1144_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_6_reg_1281);

assign or_ln25_fu_512_p2 = (shl_ln25_fu_418_p2 | 2'd1);

assign or_ln28_10_fu_881_p2 = (icmp_ln28_21_fu_875_p2 | icmp_ln28_20_fu_869_p2);

assign or_ln28_11_fu_899_p2 = (icmp_ln28_23_fu_893_p2 | icmp_ln28_22_fu_887_p2);

assign or_ln28_12_fu_1114_p2 = (icmp_ln28_25_fu_1108_p2 | icmp_ln28_24_fu_1102_p2);

assign or_ln28_13_fu_1132_p2 = (icmp_ln28_27_fu_1126_p2 | icmp_ln28_26_fu_1120_p2);

assign or_ln28_14_fu_305_p2 = (tmp_25_fu_282_p3 | 5'd2);

assign or_ln28_15_fu_330_p2 = (tmp_26_reg_1195 | 5'd4);

assign or_ln28_16_fu_344_p2 = (tmp_25_reg_1190 | 5'd6);

assign or_ln28_17_fu_605_p2 = (tmp_28_fu_598_p3 | 5'd2);

assign or_ln28_18_fu_532_p2 = (tmp_29_fu_518_p4 | 5'd4);

assign or_ln28_19_fu_629_p2 = (tmp_28_fu_598_p3 | 5'd6);

assign or_ln28_1_fu_470_p2 = (icmp_ln28_3_fu_464_p2 | icmp_ln28_2_fu_458_p2);

assign or_ln28_2_fu_488_p2 = (icmp_ln28_5_fu_482_p2 | icmp_ln28_4_fu_476_p2);

assign or_ln28_3_fu_700_p2 = (icmp_ln28_7_fu_694_p2 | icmp_ln28_6_fu_688_p2);

assign or_ln28_4_fu_718_p2 = (icmp_ln28_9_fu_712_p2 | icmp_ln28_8_fu_706_p2);

assign or_ln28_5_fu_1023_p2 = (icmp_ln28_11_fu_1017_p2 | icmp_ln28_10_fu_1011_p2);

assign or_ln28_6_fu_1041_p2 = (icmp_ln28_13_fu_1035_p2 | icmp_ln28_12_fu_1029_p2);

assign or_ln28_7_fu_577_p2 = (icmp_ln28_15_fu_571_p2 | icmp_ln28_14_fu_565_p2);

assign or_ln28_8_fu_790_p2 = (icmp_ln28_17_fu_784_p2 | icmp_ln28_16_fu_778_p2);

assign or_ln28_9_fu_808_p2 = (icmp_ln28_19_fu_802_p2 | icmp_ln28_18_fu_796_p2);

assign or_ln28_fu_397_p2 = (icmp_ln28_fu_385_p2 | icmp_ln28_1_fu_391_p2);

assign or_ln35_fu_951_p2 = (tmp_23_fu_933_p3 | 4'd2);

assign r_fu_925_p2 = (2'd1 + select_ln28_8_reg_1167);

assign select_ln28_1_fu_505_p3 = ((and_ln28_2_fu_500_p2[0:0] === 1'b1) ? reg_230 : select_ln28_reg_1220);

assign select_ln28_2_fu_736_p3 = ((and_ln28_4_fu_730_p2[0:0] === 1'b1) ? conv_1_out_q0 : select_ln28_1_reg_1231);

assign select_ln28_4_fu_589_p3 = ((and_ln28_7_fu_583_p2[0:0] === 1'b1) ? conv_1_out_q0 : 32'd8388608);

assign select_ln28_5_fu_825_p3 = ((and_ln28_9_fu_820_p2[0:0] === 1'b1) ? reg_230 : select_ln28_4_reg_1253);

assign select_ln28_6_fu_917_p3 = ((and_ln28_11_fu_911_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_5_fu_825_p3);

assign select_ln28_8_fu_258_p3 = ((icmp_ln13_fu_252_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_r_0_phi_fu_212_p4);

assign select_ln28_9_fu_266_p3 = ((icmp_ln13_fu_252_p2[0:0] === 1'b1) ? f_fu_246_p2 : ap_phi_mux_f_0_phi_fu_201_p4);

assign select_ln28_fu_409_p3 = ((and_ln28_fu_403_p2[0:0] === 1'b1) ? conv_1_out_q0 : 32'd8388608);

assign shl_ln25_fu_418_p2 = select_ln28_8_reg_1167 << 2'd1;

assign tmp_10_fu_997_p4 = {{bitcast_ln28_6_fu_994_p1[30:23]}};

assign tmp_12_fu_551_p4 = {{bitcast_ln28_7_fu_547_p1[30:23]}};

assign tmp_14_fu_747_p4 = {{bitcast_ln28_8_fu_743_p1[30:23]}};

assign tmp_15_fu_764_p4 = {{bitcast_ln28_9_fu_761_p1[30:23]}};

assign tmp_17_fu_837_p4 = {{bitcast_ln28_10_fu_833_p1[30:23]}};

assign tmp_18_fu_855_p4 = {{bitcast_ln28_11_fu_851_p1[30:23]}};

assign tmp_20_fu_1071_p4 = {{bitcast_ln28_12_fu_1067_p1[30:23]}};

assign tmp_21_fu_1088_p4 = {{bitcast_ln28_13_fu_1085_p1[30:23]}};

assign tmp_23_fu_933_p3 = {{select_ln28_8_reg_1167}, {2'd0}};

assign tmp_24_fu_940_p3 = {{select_ln28_8_reg_1167}, {select_ln28_9_reg_1175}};

assign tmp_25_fu_282_p3 = {{trunc_ln25_fu_278_p1}, {4'd0}};

assign tmp_26_cast_fu_957_p3 = {{1'd0}, {or_ln35_fu_951_p2}};

assign tmp_26_fu_290_p4 = {{{trunc_ln25_fu_278_p1}, {2'd0}}, {select_ln28_9_fu_266_p3}};

assign tmp_27_fu_335_p3 = {{59'd0}, {or_ln28_15_fu_330_p2}};

assign tmp_28_fu_598_p3 = {{or_ln25_reg_1238}, {3'd0}};

assign tmp_29_cast_fu_311_p3 = {{2'd0}, {or_ln28_14_fu_305_p2}};

assign tmp_29_fu_518_p4 = {{{or_ln25_fu_512_p2}, {1'd0}}, {select_ln28_9_reg_1175}};

assign tmp_2_fu_371_p4 = {{bitcast_ln28_fu_367_p1[30:23]}};

assign tmp_30_fu_538_p3 = {{59'd0}, {or_ln28_18_fu_532_p2}};

assign tmp_31_cast_fu_349_p3 = {{2'd0}, {or_ln28_16_fu_344_p2}};

assign tmp_34_cast_fu_611_p3 = {{2'd0}, {or_ln28_17_fu_605_p2}};

assign tmp_36_cast_fu_635_p3 = {{2'd0}, {or_ln28_19_fu_629_p2}};

assign tmp_4_fu_427_p4 = {{bitcast_ln28_1_fu_423_p1[30:23]}};

assign tmp_5_fu_444_p4 = {{bitcast_ln28_2_fu_441_p1[30:23]}};

assign tmp_7_fu_657_p4 = {{bitcast_ln28_3_fu_653_p1[30:23]}};

assign tmp_8_fu_674_p4 = {{bitcast_ln28_4_fu_671_p1[30:23]}};

assign tmp_s_fu_980_p4 = {{bitcast_ln28_5_fu_976_p1[30:23]}};

assign trunc_ln25_fu_278_p1 = select_ln28_8_fu_258_p3[0:0];

assign trunc_ln28_10_fu_847_p1 = bitcast_ln28_10_fu_833_p1[22:0];

assign trunc_ln28_11_fu_865_p1 = bitcast_ln28_11_fu_851_p1[22:0];

assign trunc_ln28_12_fu_1081_p1 = bitcast_ln28_12_fu_1067_p1[22:0];

assign trunc_ln28_13_fu_1098_p1 = bitcast_ln28_13_fu_1085_p1[22:0];

assign trunc_ln28_1_fu_437_p1 = bitcast_ln28_1_fu_423_p1[22:0];

assign trunc_ln28_2_fu_454_p1 = bitcast_ln28_2_fu_441_p1[22:0];

assign trunc_ln28_3_fu_667_p1 = bitcast_ln28_3_fu_653_p1[22:0];

assign trunc_ln28_4_fu_684_p1 = bitcast_ln28_4_fu_671_p1[22:0];

assign trunc_ln28_5_fu_990_p1 = bitcast_ln28_5_fu_976_p1[22:0];

assign trunc_ln28_6_fu_1007_p1 = bitcast_ln28_6_fu_994_p1[22:0];

assign trunc_ln28_7_fu_561_p1 = bitcast_ln28_7_fu_547_p1[22:0];

assign trunc_ln28_8_fu_757_p1 = bitcast_ln28_8_fu_743_p1[22:0];

assign trunc_ln28_9_fu_774_p1 = bitcast_ln28_9_fu_761_p1[22:0];

assign trunc_ln28_fu_381_p1 = bitcast_ln28_fu_367_p1[22:0];

assign zext_ln14_1_fu_930_p1 = select_ln28_9_reg_1175;

assign zext_ln14_fu_274_p1 = select_ln28_9_fu_266_p3;

assign zext_ln28_1_fu_325_p1 = add_ln28_fu_319_p2;

assign zext_ln28_2_fu_527_p1 = tmp_29_fu_518_p4;

assign zext_ln28_3_fu_362_p1 = add_ln28_1_fu_357_p2;

assign zext_ln28_4_fu_624_p1 = add_ln28_2_fu_619_p2;

assign zext_ln28_5_fu_648_p1 = add_ln28_3_fu_643_p2;

assign zext_ln28_fu_300_p1 = tmp_26_fu_290_p4;

assign zext_ln35_1_fu_971_p1 = add_ln35_fu_965_p2;

assign zext_ln35_fu_946_p1 = tmp_24_fu_940_p3;

always @ (posedge ap_clk) begin
    zext_ln14_reg_1183[6:2] <= 5'b00000;
    tmp_25_reg_1190[3:0] <= 4'b0000;
    tmp_26_reg_1195[3:2] <= 2'b00;
    or_ln25_reg_1238[0] <= 1'b1;
end

endmodule //max_pool_1
