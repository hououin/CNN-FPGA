// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.204000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=292,HLS_SYN_LUT=1439,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_0_address1,
        conv_1_out_0_ce1,
        conv_1_out_0_q1,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_1_address1,
        conv_1_out_1_ce1,
        conv_1_out_1_q1,
        conv_1_out_2_address0,
        conv_1_out_2_ce0,
        conv_1_out_2_q0,
        conv_1_out_2_address1,
        conv_1_out_2_ce1,
        conv_1_out_2_q1,
        conv_1_out_3_address0,
        conv_1_out_3_ce0,
        conv_1_out_3_q0,
        conv_1_out_3_address1,
        conv_1_out_3_ce1,
        conv_1_out_3_q1,
        max_pool_1_out_0_address0,
        max_pool_1_out_0_ce0,
        max_pool_1_out_0_we0,
        max_pool_1_out_0_d0,
        max_pool_1_out_1_address0,
        max_pool_1_out_1_ce0,
        max_pool_1_out_1_we0,
        max_pool_1_out_1_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [2:0] conv_1_out_0_address1;
output   conv_1_out_0_ce1;
input  [31:0] conv_1_out_0_q1;
output  [2:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [2:0] conv_1_out_1_address1;
output   conv_1_out_1_ce1;
input  [31:0] conv_1_out_1_q1;
output  [2:0] conv_1_out_2_address0;
output   conv_1_out_2_ce0;
input  [31:0] conv_1_out_2_q0;
output  [2:0] conv_1_out_2_address1;
output   conv_1_out_2_ce1;
input  [31:0] conv_1_out_2_q1;
output  [2:0] conv_1_out_3_address0;
output   conv_1_out_3_ce0;
input  [31:0] conv_1_out_3_q0;
output  [2:0] conv_1_out_3_address1;
output   conv_1_out_3_ce1;
input  [31:0] conv_1_out_3_q1;
output  [1:0] max_pool_1_out_0_address0;
output   max_pool_1_out_0_ce0;
output   max_pool_1_out_0_we0;
output  [31:0] max_pool_1_out_0_d0;
output  [1:0] max_pool_1_out_1_address0;
output   max_pool_1_out_1_ce0;
output   max_pool_1_out_1_we0;
output  [31:0] max_pool_1_out_1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_0_ce0;
reg conv_1_out_0_ce1;
reg conv_1_out_1_ce0;
reg conv_1_out_1_ce1;
reg conv_1_out_2_ce0;
reg conv_1_out_2_ce1;
reg conv_1_out_3_ce0;
reg conv_1_out_3_ce1;
reg max_pool_1_out_0_ce0;
reg max_pool_1_out_0_we0;
reg max_pool_1_out_1_ce0;
reg max_pool_1_out_1_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] indvar_flatten_reg_200;
reg   [1:0] f_0_reg_211;
reg   [1:0] r_0_reg_222;
wire   [0:0] icmp_ln10_fu_275_p2;
reg   [0:0] icmp_ln10_reg_1043;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_1043_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_1043_pp0_iter2_reg;
wire   [2:0] add_ln10_fu_281_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln28_8_fu_299_p3;
reg   [1:0] select_ln28_8_reg_1052;
wire   [1:0] select_ln28_9_fu_307_p3;
reg   [1:0] select_ln28_9_reg_1058;
wire   [63:0] zext_ln28_fu_327_p1;
reg   [63:0] zext_ln28_reg_1064;
wire   [1:0] r_fu_333_p2;
wire   [3:0] add_ln35_fu_358_p2;
reg   [3:0] add_ln35_reg_1085;
reg   [3:0] add_ln35_reg_1085_pp0_iter2_reg;
wire   [31:0] select_ln28_fu_406_p3;
reg   [31:0] select_ln28_reg_1100;
wire   [63:0] zext_ln28_2_fu_438_p1;
reg   [63:0] zext_ln28_2_reg_1107;
wire   [31:0] select_ln28_4_fu_486_p3;
reg   [31:0] select_ln28_4_reg_1123;
wire   [31:0] select_ln28_1_fu_577_p3;
reg   [31:0] select_ln28_1_reg_1130;
reg   [31:0] conv_1_out_0_load_1_reg_1146;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] tmp_9_fu_250_p2;
reg   [0:0] tmp_9_reg_1152;
wire   [31:0] select_ln28_5_fu_668_p3;
reg   [31:0] select_ln28_5_reg_1157;
reg   [31:0] conv_1_out_2_load_1_reg_1163;
wire   [0:0] tmp_19_fu_260_p2;
reg   [0:0] tmp_19_reg_1169;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg   [1:0] ap_phi_mux_f_0_phi_fu_215_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln35_1_fu_676_p1;
wire   [31:0] tmp_9_fu_250_p1;
wire   [31:0] tmp_19_fu_260_p1;
wire   [31:0] select_ln28_2_fu_762_p3;
wire   [31:0] select_ln28_6_fu_943_p3;
wire   [0:0] icmp_ln13_fu_293_p2;
wire   [1:0] f_fu_287_p2;
wire   [0:0] trunc_ln25_fu_315_p1;
wire   [2:0] tmp_24_fu_319_p3;
wire   [2:0] tmp_23_fu_347_p3;
wire   [3:0] zext_ln35_fu_354_p1;
wire   [3:0] zext_ln14_fu_339_p1;
wire   [31:0] bitcast_ln28_fu_364_p1;
wire   [7:0] tmp_2_fu_368_p4;
wire   [22:0] trunc_ln28_fu_378_p1;
wire   [0:0] icmp_ln28_1_fu_388_p2;
wire   [0:0] icmp_ln28_fu_382_p2;
wire   [0:0] or_ln28_fu_394_p2;
wire   [0:0] tmp_3_fu_233_p2;
wire   [0:0] and_ln28_fu_400_p2;
wire   [1:0] shl_ln25_fu_342_p2;
wire   [1:0] or_ln25_fu_414_p2;
wire   [2:0] tmp_25_fu_420_p3;
wire   [3:0] zext_ln28_1_fu_428_p1;
wire   [3:0] add_ln28_fu_432_p2;
wire   [31:0] bitcast_ln28_7_fu_444_p1;
wire   [7:0] tmp_12_fu_448_p4;
wire   [22:0] trunc_ln28_7_fu_458_p1;
wire   [0:0] icmp_ln28_15_fu_468_p2;
wire   [0:0] icmp_ln28_14_fu_462_p2;
wire   [0:0] or_ln28_7_fu_474_p2;
wire   [0:0] tmp_13_fu_239_p2;
wire   [0:0] and_ln28_7_fu_480_p2;
wire   [31:0] bitcast_ln28_1_fu_494_p1;
wire   [31:0] bitcast_ln28_2_fu_512_p1;
wire   [7:0] tmp_4_fu_498_p4;
wire   [22:0] trunc_ln28_1_fu_508_p1;
wire   [0:0] icmp_ln28_3_fu_535_p2;
wire   [0:0] icmp_ln28_2_fu_529_p2;
wire   [7:0] tmp_5_fu_515_p4;
wire   [22:0] trunc_ln28_2_fu_525_p1;
wire   [0:0] icmp_ln28_5_fu_553_p2;
wire   [0:0] icmp_ln28_4_fu_547_p2;
wire   [0:0] or_ln28_1_fu_541_p2;
wire   [0:0] or_ln28_2_fu_559_p2;
wire   [0:0] and_ln28_1_fu_565_p2;
wire   [0:0] tmp_6_fu_245_p2;
wire   [0:0] and_ln28_2_fu_571_p2;
wire   [31:0] bitcast_ln28_8_fu_585_p1;
wire   [31:0] bitcast_ln28_9_fu_603_p1;
wire   [7:0] tmp_14_fu_589_p4;
wire   [22:0] trunc_ln28_8_fu_599_p1;
wire   [0:0] icmp_ln28_17_fu_626_p2;
wire   [0:0] icmp_ln28_16_fu_620_p2;
wire   [7:0] tmp_15_fu_606_p4;
wire   [22:0] trunc_ln28_9_fu_616_p1;
wire   [0:0] icmp_ln28_19_fu_644_p2;
wire   [0:0] icmp_ln28_18_fu_638_p2;
wire   [0:0] or_ln28_8_fu_632_p2;
wire   [0:0] or_ln28_9_fu_650_p2;
wire   [0:0] and_ln28_8_fu_656_p2;
wire   [0:0] tmp_16_fu_255_p2;
wire   [0:0] and_ln28_9_fu_662_p2;
wire   [31:0] bitcast_ln28_3_fu_681_p1;
wire   [31:0] bitcast_ln28_4_fu_698_p1;
wire   [7:0] tmp_7_fu_684_p4;
wire   [22:0] trunc_ln28_3_fu_694_p1;
wire   [0:0] icmp_ln28_7_fu_721_p2;
wire   [0:0] icmp_ln28_6_fu_715_p2;
wire   [7:0] tmp_8_fu_701_p4;
wire   [22:0] trunc_ln28_4_fu_711_p1;
wire   [0:0] icmp_ln28_9_fu_739_p2;
wire   [0:0] icmp_ln28_8_fu_733_p2;
wire   [0:0] or_ln28_3_fu_727_p2;
wire   [0:0] or_ln28_4_fu_745_p2;
wire   [0:0] and_ln28_3_fu_751_p2;
wire   [0:0] and_ln28_4_fu_757_p2;
wire   [31:0] bitcast_ln28_5_fu_769_p1;
wire   [31:0] bitcast_ln28_6_fu_787_p1;
wire   [7:0] tmp_s_fu_773_p4;
wire   [22:0] trunc_ln28_5_fu_783_p1;
wire   [0:0] icmp_ln28_11_fu_811_p2;
wire   [0:0] icmp_ln28_10_fu_805_p2;
wire   [7:0] tmp_10_fu_791_p4;
wire   [22:0] trunc_ln28_6_fu_801_p1;
wire   [0:0] icmp_ln28_13_fu_829_p2;
wire   [0:0] icmp_ln28_12_fu_823_p2;
wire   [0:0] or_ln28_5_fu_817_p2;
wire   [0:0] or_ln28_6_fu_835_p2;
wire   [0:0] and_ln28_5_fu_841_p2;
wire   [0:0] tmp_11_fu_265_p2;
wire   [0:0] and_ln28_6_fu_847_p2;
wire   [31:0] bitcast_ln28_10_fu_862_p1;
wire   [31:0] bitcast_ln28_11_fu_879_p1;
wire   [7:0] tmp_17_fu_865_p4;
wire   [22:0] trunc_ln28_10_fu_875_p1;
wire   [0:0] icmp_ln28_21_fu_902_p2;
wire   [0:0] icmp_ln28_20_fu_896_p2;
wire   [7:0] tmp_18_fu_882_p4;
wire   [22:0] trunc_ln28_11_fu_892_p1;
wire   [0:0] icmp_ln28_23_fu_920_p2;
wire   [0:0] icmp_ln28_22_fu_914_p2;
wire   [0:0] or_ln28_10_fu_908_p2;
wire   [0:0] or_ln28_11_fu_926_p2;
wire   [0:0] and_ln28_10_fu_932_p2;
wire   [0:0] and_ln28_11_fu_938_p2;
wire   [31:0] bitcast_ln28_12_fu_950_p1;
wire   [31:0] bitcast_ln28_13_fu_968_p1;
wire   [7:0] tmp_20_fu_954_p4;
wire   [22:0] trunc_ln28_12_fu_964_p1;
wire   [0:0] icmp_ln28_25_fu_992_p2;
wire   [0:0] icmp_ln28_24_fu_986_p2;
wire   [7:0] tmp_21_fu_972_p4;
wire   [22:0] trunc_ln28_13_fu_982_p1;
wire   [0:0] icmp_ln28_27_fu_1010_p2;
wire   [0:0] icmp_ln28_26_fu_1004_p2;
wire   [0:0] or_ln28_12_fu_998_p2;
wire   [0:0] or_ln28_13_fu_1016_p2;
wire   [0:0] and_ln28_12_fu_1022_p2;
wire   [0:0] tmp_22_fu_270_p2;
wire   [0:0] and_ln28_13_fu_1028_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_0_q0),
    .din1(32'd8388608),
    .opcode(5'd2),
    .dout(tmp_3_fu_233_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(conv_1_out_2_q0),
    .din1(32'd8388608),
    .opcode(5'd2),
    .dout(tmp_13_fu_239_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U3(
    .din0(conv_1_out_1_q0),
    .din1(select_ln28_reg_1100),
    .opcode(5'd2),
    .dout(tmp_6_fu_245_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U4(
    .din0(conv_1_out_0_q1),
    .din1(tmp_9_fu_250_p1),
    .opcode(5'd2),
    .dout(tmp_9_fu_250_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U5(
    .din0(conv_1_out_3_q0),
    .din1(select_ln28_4_reg_1123),
    .opcode(5'd2),
    .dout(tmp_16_fu_255_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U6(
    .din0(conv_1_out_2_q1),
    .din1(tmp_19_fu_260_p1),
    .opcode(5'd2),
    .dout(tmp_19_fu_260_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U7(
    .din0(conv_1_out_1_q1),
    .din1(select_ln28_2_fu_762_p3),
    .opcode(5'd2),
    .dout(tmp_11_fu_265_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U8(
    .din0(conv_1_out_3_q1),
    .din1(select_ln28_6_fu_943_p3),
    .opcode(5'd2),
    .dout(tmp_22_fu_270_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1043 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_211 <= select_ln28_9_reg_1058;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_211 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_200 <= add_ln10_fu_281_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_200 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        r_0_reg_222 <= r_fu_333_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_222 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1043 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln35_reg_1085 <= add_ln35_fu_358_p2;
        select_ln28_4_reg_1123 <= select_ln28_4_fu_486_p3;
        select_ln28_reg_1100 <= select_ln28_fu_406_p3;
        zext_ln28_2_reg_1107[3 : 0] <= zext_ln28_2_fu_438_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln35_reg_1085_pp0_iter2_reg <= add_ln35_reg_1085;
        icmp_ln10_reg_1043_pp0_iter2_reg <= icmp_ln10_reg_1043_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1043_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_1_out_0_load_1_reg_1146 <= conv_1_out_0_q1;
        conv_1_out_2_load_1_reg_1163 <= conv_1_out_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_1043 <= icmp_ln10_fu_275_p2;
        icmp_ln10_reg_1043_pp0_iter1_reg <= icmp_ln10_reg_1043;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1043_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln28_1_reg_1130 <= select_ln28_1_fu_577_p3;
        select_ln28_5_reg_1157 <= select_ln28_5_fu_668_p3;
        tmp_19_reg_1169 <= tmp_19_fu_260_p2;
        tmp_9_reg_1152 <= tmp_9_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln28_8_reg_1052 <= select_ln28_8_fu_299_p3;
        zext_ln28_reg_1064[2 : 0] <= zext_ln28_fu_327_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln28_9_reg_1058 <= select_ln28_9_fu_307_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_275_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1043 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_215_p4 = select_ln28_9_reg_1058;
    end else begin
        ap_phi_mux_f_0_phi_fu_215_p4 = f_0_reg_211;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_0_ce1 = 1'b1;
    end else begin
        conv_1_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_1_out_1_ce1 = 1'b1;
    end else begin
        conv_1_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_out_2_ce0 = 1'b1;
    end else begin
        conv_1_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_2_ce1 = 1'b1;
    end else begin
        conv_1_out_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_3_ce0 = 1'b1;
    end else begin
        conv_1_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_1_out_3_ce1 = 1'b1;
    end else begin
        conv_1_out_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_pool_1_out_0_ce0 = 1'b1;
    end else begin
        max_pool_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1043_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_pool_1_out_0_we0 = 1'b1;
    end else begin
        max_pool_1_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_pool_1_out_1_ce0 = 1'b1;
    end else begin
        max_pool_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1043_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        max_pool_1_out_1_we0 = 1'b1;
    end else begin
        max_pool_1_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_275_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((icmp_ln10_fu_275_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_281_p2 = (indvar_flatten_reg_200 + 3'd1);

assign add_ln28_fu_432_p2 = (zext_ln28_1_fu_428_p1 + zext_ln14_fu_339_p1);

assign add_ln35_fu_358_p2 = (zext_ln35_fu_354_p1 + zext_ln14_fu_339_p1);

assign and_ln28_10_fu_932_p2 = (or_ln28_11_fu_926_p2 & or_ln28_10_fu_908_p2);

assign and_ln28_11_fu_938_p2 = (tmp_19_reg_1169 & and_ln28_10_fu_932_p2);

assign and_ln28_12_fu_1022_p2 = (or_ln28_13_fu_1016_p2 & or_ln28_12_fu_998_p2);

assign and_ln28_13_fu_1028_p2 = (tmp_22_fu_270_p2 & and_ln28_12_fu_1022_p2);

assign and_ln28_1_fu_565_p2 = (or_ln28_2_fu_559_p2 & or_ln28_1_fu_541_p2);

assign and_ln28_2_fu_571_p2 = (tmp_6_fu_245_p2 & and_ln28_1_fu_565_p2);

assign and_ln28_3_fu_751_p2 = (or_ln28_4_fu_745_p2 & or_ln28_3_fu_727_p2);

assign and_ln28_4_fu_757_p2 = (tmp_9_reg_1152 & and_ln28_3_fu_751_p2);

assign and_ln28_5_fu_841_p2 = (or_ln28_6_fu_835_p2 & or_ln28_5_fu_817_p2);

assign and_ln28_6_fu_847_p2 = (tmp_11_fu_265_p2 & and_ln28_5_fu_841_p2);

assign and_ln28_7_fu_480_p2 = (tmp_13_fu_239_p2 & or_ln28_7_fu_474_p2);

assign and_ln28_8_fu_656_p2 = (or_ln28_9_fu_650_p2 & or_ln28_8_fu_632_p2);

assign and_ln28_9_fu_662_p2 = (tmp_16_fu_255_p2 & and_ln28_8_fu_656_p2);

assign and_ln28_fu_400_p2 = (tmp_3_fu_233_p2 & or_ln28_fu_394_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_10_fu_862_p1 = conv_1_out_2_load_1_reg_1163;

assign bitcast_ln28_11_fu_879_p1 = select_ln28_5_reg_1157;

assign bitcast_ln28_12_fu_950_p1 = conv_1_out_3_q1;

assign bitcast_ln28_13_fu_968_p1 = select_ln28_6_fu_943_p3;

assign bitcast_ln28_1_fu_494_p1 = conv_1_out_1_q0;

assign bitcast_ln28_2_fu_512_p1 = select_ln28_reg_1100;

assign bitcast_ln28_3_fu_681_p1 = conv_1_out_0_load_1_reg_1146;

assign bitcast_ln28_4_fu_698_p1 = select_ln28_1_reg_1130;

assign bitcast_ln28_5_fu_769_p1 = conv_1_out_1_q1;

assign bitcast_ln28_6_fu_787_p1 = select_ln28_2_fu_762_p3;

assign bitcast_ln28_7_fu_444_p1 = conv_1_out_2_q0;

assign bitcast_ln28_8_fu_585_p1 = conv_1_out_3_q0;

assign bitcast_ln28_9_fu_603_p1 = select_ln28_4_reg_1123;

assign bitcast_ln28_fu_364_p1 = conv_1_out_0_q0;

assign conv_1_out_0_address0 = zext_ln28_fu_327_p1;

assign conv_1_out_0_address1 = zext_ln28_2_fu_438_p1;

assign conv_1_out_1_address0 = zext_ln28_reg_1064;

assign conv_1_out_1_address1 = zext_ln28_2_reg_1107;

assign conv_1_out_2_address0 = zext_ln28_fu_327_p1;

assign conv_1_out_2_address1 = zext_ln28_2_fu_438_p1;

assign conv_1_out_3_address0 = zext_ln28_reg_1064;

assign conv_1_out_3_address1 = zext_ln28_2_reg_1107;

assign f_fu_287_p2 = (2'd1 + ap_phi_mux_f_0_phi_fu_215_p4);

assign icmp_ln10_fu_275_p2 = ((indvar_flatten_reg_200 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_293_p2 = ((r_0_reg_222 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_805_p2 = ((tmp_s_fu_773_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_811_p2 = ((trunc_ln28_5_fu_783_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_12_fu_823_p2 = ((tmp_10_fu_791_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_13_fu_829_p2 = ((trunc_ln28_6_fu_801_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_14_fu_462_p2 = ((tmp_12_fu_448_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_15_fu_468_p2 = ((trunc_ln28_7_fu_458_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_16_fu_620_p2 = ((tmp_14_fu_589_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_17_fu_626_p2 = ((trunc_ln28_8_fu_599_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_18_fu_638_p2 = ((tmp_15_fu_606_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_19_fu_644_p2 = ((trunc_ln28_9_fu_616_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_388_p2 = ((trunc_ln28_fu_378_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_20_fu_896_p2 = ((tmp_17_fu_865_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_21_fu_902_p2 = ((trunc_ln28_10_fu_875_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_22_fu_914_p2 = ((tmp_18_fu_882_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_23_fu_920_p2 = ((trunc_ln28_11_fu_892_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_24_fu_986_p2 = ((tmp_20_fu_954_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_25_fu_992_p2 = ((trunc_ln28_12_fu_964_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_26_fu_1004_p2 = ((tmp_21_fu_972_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_27_fu_1010_p2 = ((trunc_ln28_13_fu_982_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_529_p2 = ((tmp_4_fu_498_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_535_p2 = ((trunc_ln28_1_fu_508_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_547_p2 = ((tmp_5_fu_515_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_553_p2 = ((trunc_ln28_2_fu_525_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_715_p2 = ((tmp_7_fu_684_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_721_p2 = ((trunc_ln28_3_fu_694_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_733_p2 = ((tmp_8_fu_701_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_739_p2 = ((trunc_ln28_4_fu_711_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_382_p2 = ((tmp_2_fu_368_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_0_address0 = zext_ln35_1_fu_676_p1;

assign max_pool_1_out_0_d0 = ((and_ln28_6_fu_847_p2[0:0] === 1'b1) ? conv_1_out_1_q1 : select_ln28_2_fu_762_p3);

assign max_pool_1_out_1_address0 = zext_ln35_1_fu_676_p1;

assign max_pool_1_out_1_d0 = ((and_ln28_13_fu_1028_p2[0:0] === 1'b1) ? conv_1_out_3_q1 : select_ln28_6_fu_943_p3);

assign or_ln25_fu_414_p2 = (shl_ln25_fu_342_p2 | 2'd1);

assign or_ln28_10_fu_908_p2 = (icmp_ln28_21_fu_902_p2 | icmp_ln28_20_fu_896_p2);

assign or_ln28_11_fu_926_p2 = (icmp_ln28_23_fu_920_p2 | icmp_ln28_22_fu_914_p2);

assign or_ln28_12_fu_998_p2 = (icmp_ln28_25_fu_992_p2 | icmp_ln28_24_fu_986_p2);

assign or_ln28_13_fu_1016_p2 = (icmp_ln28_27_fu_1010_p2 | icmp_ln28_26_fu_1004_p2);

assign or_ln28_1_fu_541_p2 = (icmp_ln28_3_fu_535_p2 | icmp_ln28_2_fu_529_p2);

assign or_ln28_2_fu_559_p2 = (icmp_ln28_5_fu_553_p2 | icmp_ln28_4_fu_547_p2);

assign or_ln28_3_fu_727_p2 = (icmp_ln28_7_fu_721_p2 | icmp_ln28_6_fu_715_p2);

assign or_ln28_4_fu_745_p2 = (icmp_ln28_9_fu_739_p2 | icmp_ln28_8_fu_733_p2);

assign or_ln28_5_fu_817_p2 = (icmp_ln28_11_fu_811_p2 | icmp_ln28_10_fu_805_p2);

assign or_ln28_6_fu_835_p2 = (icmp_ln28_13_fu_829_p2 | icmp_ln28_12_fu_823_p2);

assign or_ln28_7_fu_474_p2 = (icmp_ln28_15_fu_468_p2 | icmp_ln28_14_fu_462_p2);

assign or_ln28_8_fu_632_p2 = (icmp_ln28_17_fu_626_p2 | icmp_ln28_16_fu_620_p2);

assign or_ln28_9_fu_650_p2 = (icmp_ln28_19_fu_644_p2 | icmp_ln28_18_fu_638_p2);

assign or_ln28_fu_394_p2 = (icmp_ln28_fu_382_p2 | icmp_ln28_1_fu_388_p2);

assign r_fu_333_p2 = (2'd1 + select_ln28_8_fu_299_p3);

assign select_ln28_1_fu_577_p3 = ((and_ln28_2_fu_571_p2[0:0] === 1'b1) ? conv_1_out_1_q0 : select_ln28_reg_1100);

assign select_ln28_2_fu_762_p3 = ((and_ln28_4_fu_757_p2[0:0] === 1'b1) ? conv_1_out_0_load_1_reg_1146 : select_ln28_1_reg_1130);

assign select_ln28_4_fu_486_p3 = ((and_ln28_7_fu_480_p2[0:0] === 1'b1) ? conv_1_out_2_q0 : 32'd8388608);

assign select_ln28_5_fu_668_p3 = ((and_ln28_9_fu_662_p2[0:0] === 1'b1) ? conv_1_out_3_q0 : select_ln28_4_reg_1123);

assign select_ln28_6_fu_943_p3 = ((and_ln28_11_fu_938_p2[0:0] === 1'b1) ? conv_1_out_2_load_1_reg_1163 : select_ln28_5_reg_1157);

assign select_ln28_8_fu_299_p3 = ((icmp_ln13_fu_293_p2[0:0] === 1'b1) ? 2'd0 : r_0_reg_222);

assign select_ln28_9_fu_307_p3 = ((icmp_ln13_fu_293_p2[0:0] === 1'b1) ? f_fu_287_p2 : ap_phi_mux_f_0_phi_fu_215_p4);

assign select_ln28_fu_406_p3 = ((and_ln28_fu_400_p2[0:0] === 1'b1) ? conv_1_out_0_q0 : 32'd8388608);

assign shl_ln25_fu_342_p2 = select_ln28_8_reg_1052 << 2'd1;

assign tmp_10_fu_791_p4 = {{bitcast_ln28_6_fu_787_p1[30:23]}};

assign tmp_12_fu_448_p4 = {{bitcast_ln28_7_fu_444_p1[30:23]}};

assign tmp_14_fu_589_p4 = {{bitcast_ln28_8_fu_585_p1[30:23]}};

assign tmp_15_fu_606_p4 = {{bitcast_ln28_9_fu_603_p1[30:23]}};

assign tmp_17_fu_865_p4 = {{bitcast_ln28_10_fu_862_p1[30:23]}};

assign tmp_18_fu_882_p4 = {{bitcast_ln28_11_fu_879_p1[30:23]}};

assign tmp_19_fu_260_p1 = ((and_ln28_9_fu_662_p2[0:0] === 1'b1) ? conv_1_out_3_q0 : select_ln28_4_reg_1123);

assign tmp_20_fu_954_p4 = {{bitcast_ln28_12_fu_950_p1[30:23]}};

assign tmp_21_fu_972_p4 = {{bitcast_ln28_13_fu_968_p1[30:23]}};

assign tmp_23_fu_347_p3 = {{select_ln28_8_reg_1052}, {1'd0}};

assign tmp_24_fu_319_p3 = {{trunc_ln25_fu_315_p1}, {select_ln28_9_fu_307_p3}};

assign tmp_25_fu_420_p3 = {{or_ln25_fu_414_p2}, {1'd0}};

assign tmp_2_fu_368_p4 = {{bitcast_ln28_fu_364_p1[30:23]}};

assign tmp_4_fu_498_p4 = {{bitcast_ln28_1_fu_494_p1[30:23]}};

assign tmp_5_fu_515_p4 = {{bitcast_ln28_2_fu_512_p1[30:23]}};

assign tmp_7_fu_684_p4 = {{bitcast_ln28_3_fu_681_p1[30:23]}};

assign tmp_8_fu_701_p4 = {{bitcast_ln28_4_fu_698_p1[30:23]}};

assign tmp_9_fu_250_p1 = ((and_ln28_2_fu_571_p2[0:0] === 1'b1) ? conv_1_out_1_q0 : select_ln28_reg_1100);

assign tmp_s_fu_773_p4 = {{bitcast_ln28_5_fu_769_p1[30:23]}};

assign trunc_ln25_fu_315_p1 = select_ln28_8_fu_299_p3[0:0];

assign trunc_ln28_10_fu_875_p1 = bitcast_ln28_10_fu_862_p1[22:0];

assign trunc_ln28_11_fu_892_p1 = bitcast_ln28_11_fu_879_p1[22:0];

assign trunc_ln28_12_fu_964_p1 = bitcast_ln28_12_fu_950_p1[22:0];

assign trunc_ln28_13_fu_982_p1 = bitcast_ln28_13_fu_968_p1[22:0];

assign trunc_ln28_1_fu_508_p1 = bitcast_ln28_1_fu_494_p1[22:0];

assign trunc_ln28_2_fu_525_p1 = bitcast_ln28_2_fu_512_p1[22:0];

assign trunc_ln28_3_fu_694_p1 = bitcast_ln28_3_fu_681_p1[22:0];

assign trunc_ln28_4_fu_711_p1 = bitcast_ln28_4_fu_698_p1[22:0];

assign trunc_ln28_5_fu_783_p1 = bitcast_ln28_5_fu_769_p1[22:0];

assign trunc_ln28_6_fu_801_p1 = bitcast_ln28_6_fu_787_p1[22:0];

assign trunc_ln28_7_fu_458_p1 = bitcast_ln28_7_fu_444_p1[22:0];

assign trunc_ln28_8_fu_599_p1 = bitcast_ln28_8_fu_585_p1[22:0];

assign trunc_ln28_9_fu_616_p1 = bitcast_ln28_9_fu_603_p1[22:0];

assign trunc_ln28_fu_378_p1 = bitcast_ln28_fu_364_p1[22:0];

assign zext_ln14_fu_339_p1 = select_ln28_9_reg_1058;

assign zext_ln28_1_fu_428_p1 = tmp_25_fu_420_p3;

assign zext_ln28_2_fu_438_p1 = add_ln28_fu_432_p2;

assign zext_ln28_fu_327_p1 = tmp_24_fu_319_p3;

assign zext_ln35_1_fu_676_p1 = add_ln35_reg_1085_pp0_iter2_reg;

assign zext_ln35_fu_354_p1 = tmp_23_fu_347_p3;

always @ (posedge ap_clk) begin
    zext_ln28_reg_1064[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_2_reg_1107[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_1
