-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_0_ce0 : OUT STD_LOGIC;
    conv_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_0_ce1 : OUT STD_LOGIC;
    conv_1_out_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_1_ce0 : OUT STD_LOGIC;
    conv_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_1_ce1 : OUT STD_LOGIC;
    conv_1_out_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_2_ce0 : OUT STD_LOGIC;
    conv_1_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_2_ce1 : OUT STD_LOGIC;
    conv_1_out_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_3_ce0 : OUT STD_LOGIC;
    conv_1_out_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_3_ce1 : OUT STD_LOGIC;
    conv_1_out_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    max_pool_1_out_0_ce0 : OUT STD_LOGIC;
    max_pool_1_out_0_we0 : OUT STD_LOGIC;
    max_pool_1_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    max_pool_1_out_1_ce0 : OUT STD_LOGIC;
    max_pool_1_out_1_we0 : OUT STD_LOGIC;
    max_pool_1_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.204000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=292,HLS_SYN_LUT=1439,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_200 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_0_reg_211 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_0_reg_222 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1043 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_1043_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1043_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_281_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_8_fu_299_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_8_reg_1052 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_9_fu_307_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_9_reg_1058 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_reg_1064 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_333_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln35_fu_358_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_reg_1085 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_reg_1085_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_fu_406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_2_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_2_reg_1107 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln28_4_fu_486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_4_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_fu_577_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_reg_1130 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_out_0_load_1_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_9_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_5_fu_668_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_5_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_out_2_load_1_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_215_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln35_1_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_fu_762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_6_fu_943_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln13_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_287_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln25_fu_315_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_319_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_23_fu_347_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_fu_354_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln14_fu_339_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln28_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_368_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_378_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln25_fu_342_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln25_fu_414_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_fu_420_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_1_fu_428_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_432_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln28_7_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_7_fu_458_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_15_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_14_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_7_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_7_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_1_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_2_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_498_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_508_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_515_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_525_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_8_fu_585_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_9_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_589_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_8_fu_599_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_17_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_16_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_606_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_9_fu_616_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_19_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_18_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_8_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_9_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_8_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_9_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_3_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_4_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_684_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_694_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_701_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_4_fu_711_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_9_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_8_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_4_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_5_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_6_fu_787_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_773_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_5_fu_783_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_11_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_10_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_791_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_6_fu_801_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_13_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_12_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_5_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_6_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_5_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_6_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_10_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_11_fu_879_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_865_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_10_fu_875_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_21_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_20_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_882_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_11_fu_892_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_23_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_22_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_10_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_11_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_10_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_11_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_12_fu_950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_13_fu_968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_954_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_12_fu_964_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_25_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_24_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_972_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_13_fu_982_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_27_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_26_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_12_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_13_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_12_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_13_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_0_q0,
        din1 => ap_const_lv32_800000,
        opcode => ap_const_lv5_2,
        dout => tmp_3_fu_233_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_2_q0,
        din1 => ap_const_lv32_800000,
        opcode => ap_const_lv5_2,
        dout => tmp_13_fu_239_p2);

    max_pool_1_fcmp_3bkb_U3 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_1_q0,
        din1 => select_ln28_reg_1100,
        opcode => ap_const_lv5_2,
        dout => tmp_6_fu_245_p2);

    max_pool_1_fcmp_3bkb_U4 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_0_q1,
        din1 => tmp_9_fu_250_p1,
        opcode => ap_const_lv5_2,
        dout => tmp_9_fu_250_p2);

    max_pool_1_fcmp_3bkb_U5 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_3_q0,
        din1 => select_ln28_4_reg_1123,
        opcode => ap_const_lv5_2,
        dout => tmp_16_fu_255_p2);

    max_pool_1_fcmp_3bkb_U6 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_2_q1,
        din1 => tmp_19_fu_260_p1,
        opcode => ap_const_lv5_2,
        dout => tmp_19_fu_260_p2);

    max_pool_1_fcmp_3bkb_U7 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_1_q1,
        din1 => select_ln28_2_fu_762_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_11_fu_265_p2);

    max_pool_1_fcmp_3bkb_U8 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_3_q1,
        din1 => select_ln28_6_fu_943_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_22_fu_270_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    f_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_1043 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_211 <= select_ln28_9_reg_1058;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_211 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_200 <= add_ln10_fu_281_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_200 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                r_0_reg_222 <= r_fu_333_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_222 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_1043 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln35_reg_1085 <= add_ln35_fu_358_p2;
                select_ln28_4_reg_1123 <= select_ln28_4_fu_486_p3;
                select_ln28_reg_1100 <= select_ln28_fu_406_p3;
                    zext_ln28_2_reg_1107(3 downto 0) <= zext_ln28_2_fu_438_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln35_reg_1085_pp0_iter2_reg <= add_ln35_reg_1085;
                icmp_ln10_reg_1043_pp0_iter2_reg <= icmp_ln10_reg_1043_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1043_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                conv_1_out_0_load_1_reg_1146 <= conv_1_out_0_q1;
                conv_1_out_2_load_1_reg_1163 <= conv_1_out_2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_1043 <= icmp_ln10_fu_275_p2;
                icmp_ln10_reg_1043_pp0_iter1_reg <= icmp_ln10_reg_1043;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1043_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln28_1_reg_1130 <= select_ln28_1_fu_577_p3;
                select_ln28_5_reg_1157 <= select_ln28_5_fu_668_p3;
                tmp_19_reg_1169 <= tmp_19_fu_260_p2;
                tmp_9_reg_1152 <= tmp_9_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln28_8_reg_1052 <= select_ln28_8_fu_299_p3;
                    zext_ln28_reg_1064(2 downto 0) <= zext_ln28_fu_327_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln28_9_reg_1058 <= select_ln28_9_fu_307_p3;
            end if;
        end if;
    end process;
    zext_ln28_reg_1064(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln28_2_reg_1107(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_275_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_275_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)) or ((icmp_ln10_fu_275_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_281_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_200) + unsigned(ap_const_lv3_1));
    add_ln28_fu_432_p2 <= std_logic_vector(unsigned(zext_ln28_1_fu_428_p1) + unsigned(zext_ln14_fu_339_p1));
    add_ln35_fu_358_p2 <= std_logic_vector(unsigned(zext_ln35_fu_354_p1) + unsigned(zext_ln14_fu_339_p1));
    and_ln28_10_fu_932_p2 <= (or_ln28_11_fu_926_p2 and or_ln28_10_fu_908_p2);
    and_ln28_11_fu_938_p2 <= (tmp_19_reg_1169 and and_ln28_10_fu_932_p2);
    and_ln28_12_fu_1022_p2 <= (or_ln28_13_fu_1016_p2 and or_ln28_12_fu_998_p2);
    and_ln28_13_fu_1028_p2 <= (tmp_22_fu_270_p2 and and_ln28_12_fu_1022_p2);
    and_ln28_1_fu_565_p2 <= (or_ln28_2_fu_559_p2 and or_ln28_1_fu_541_p2);
    and_ln28_2_fu_571_p2 <= (tmp_6_fu_245_p2 and and_ln28_1_fu_565_p2);
    and_ln28_3_fu_751_p2 <= (or_ln28_4_fu_745_p2 and or_ln28_3_fu_727_p2);
    and_ln28_4_fu_757_p2 <= (tmp_9_reg_1152 and and_ln28_3_fu_751_p2);
    and_ln28_5_fu_841_p2 <= (or_ln28_6_fu_835_p2 and or_ln28_5_fu_817_p2);
    and_ln28_6_fu_847_p2 <= (tmp_11_fu_265_p2 and and_ln28_5_fu_841_p2);
    and_ln28_7_fu_480_p2 <= (tmp_13_fu_239_p2 and or_ln28_7_fu_474_p2);
    and_ln28_8_fu_656_p2 <= (or_ln28_9_fu_650_p2 and or_ln28_8_fu_632_p2);
    and_ln28_9_fu_662_p2 <= (tmp_16_fu_255_p2 and and_ln28_8_fu_656_p2);
    and_ln28_fu_400_p2 <= (tmp_3_fu_233_p2 and or_ln28_fu_394_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_275_p2)
    begin
        if ((icmp_ln10_fu_275_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_215_p4_assign_proc : process(f_0_reg_211, icmp_ln10_reg_1043, ap_CS_fsm_pp0_stage0, select_ln28_9_reg_1058, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_1043 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_215_p4 <= select_ln28_9_reg_1058;
        else 
            ap_phi_mux_f_0_phi_fu_215_p4 <= f_0_reg_211;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_10_fu_862_p1 <= conv_1_out_2_load_1_reg_1163;
    bitcast_ln28_11_fu_879_p1 <= select_ln28_5_reg_1157;
    bitcast_ln28_12_fu_950_p1 <= conv_1_out_3_q1;
    bitcast_ln28_13_fu_968_p1 <= select_ln28_6_fu_943_p3;
    bitcast_ln28_1_fu_494_p1 <= conv_1_out_1_q0;
    bitcast_ln28_2_fu_512_p1 <= select_ln28_reg_1100;
    bitcast_ln28_3_fu_681_p1 <= conv_1_out_0_load_1_reg_1146;
    bitcast_ln28_4_fu_698_p1 <= select_ln28_1_reg_1130;
    bitcast_ln28_5_fu_769_p1 <= conv_1_out_1_q1;
    bitcast_ln28_6_fu_787_p1 <= select_ln28_2_fu_762_p3;
    bitcast_ln28_7_fu_444_p1 <= conv_1_out_2_q0;
    bitcast_ln28_8_fu_585_p1 <= conv_1_out_3_q0;
    bitcast_ln28_9_fu_603_p1 <= select_ln28_4_reg_1123;
    bitcast_ln28_fu_364_p1 <= conv_1_out_0_q0;
    conv_1_out_0_address0 <= zext_ln28_fu_327_p1(3 - 1 downto 0);
    conv_1_out_0_address1 <= zext_ln28_2_fu_438_p1(3 - 1 downto 0);

    conv_1_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_0_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_1_address0 <= zext_ln28_reg_1064(3 - 1 downto 0);
    conv_1_out_1_address1 <= zext_ln28_2_reg_1107(3 - 1 downto 0);

    conv_1_out_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_1_out_1_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_2_address0 <= zext_ln28_fu_327_p1(3 - 1 downto 0);
    conv_1_out_2_address1 <= zext_ln28_2_fu_438_p1(3 - 1 downto 0);

    conv_1_out_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_out_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_2_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_3_address0 <= zext_ln28_reg_1064(3 - 1 downto 0);
    conv_1_out_3_address1 <= zext_ln28_2_reg_1107(3 - 1 downto 0);

    conv_1_out_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_3_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_3_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_1_out_3_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_f_0_phi_fu_215_p4));
    icmp_ln10_fu_275_p2 <= "1" when (indvar_flatten_reg_200 = ap_const_lv3_4) else "0";
    icmp_ln13_fu_293_p2 <= "1" when (r_0_reg_222 = ap_const_lv2_2) else "0";
    icmp_ln28_10_fu_805_p2 <= "0" when (tmp_s_fu_773_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_11_fu_811_p2 <= "1" when (trunc_ln28_5_fu_783_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_12_fu_823_p2 <= "0" when (tmp_10_fu_791_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_13_fu_829_p2 <= "1" when (trunc_ln28_6_fu_801_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_14_fu_462_p2 <= "0" when (tmp_12_fu_448_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_15_fu_468_p2 <= "1" when (trunc_ln28_7_fu_458_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_16_fu_620_p2 <= "0" when (tmp_14_fu_589_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_17_fu_626_p2 <= "1" when (trunc_ln28_8_fu_599_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_18_fu_638_p2 <= "0" when (tmp_15_fu_606_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_19_fu_644_p2 <= "1" when (trunc_ln28_9_fu_616_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_1_fu_388_p2 <= "1" when (trunc_ln28_fu_378_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_20_fu_896_p2 <= "0" when (tmp_17_fu_865_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_21_fu_902_p2 <= "1" when (trunc_ln28_10_fu_875_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_22_fu_914_p2 <= "0" when (tmp_18_fu_882_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_23_fu_920_p2 <= "1" when (trunc_ln28_11_fu_892_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_24_fu_986_p2 <= "0" when (tmp_20_fu_954_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_25_fu_992_p2 <= "1" when (trunc_ln28_12_fu_964_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_26_fu_1004_p2 <= "0" when (tmp_21_fu_972_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_27_fu_1010_p2 <= "1" when (trunc_ln28_13_fu_982_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_529_p2 <= "0" when (tmp_4_fu_498_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_535_p2 <= "1" when (trunc_ln28_1_fu_508_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_547_p2 <= "0" when (tmp_5_fu_515_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_553_p2 <= "1" when (trunc_ln28_2_fu_525_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_715_p2 <= "0" when (tmp_7_fu_684_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_721_p2 <= "1" when (trunc_ln28_3_fu_694_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_8_fu_733_p2 <= "0" when (tmp_8_fu_701_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_9_fu_739_p2 <= "1" when (trunc_ln28_4_fu_711_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_382_p2 <= "0" when (tmp_2_fu_368_p4 = ap_const_lv8_FF) else "1";
    max_pool_1_out_0_address0 <= zext_ln35_1_fu_676_p1(2 - 1 downto 0);

    max_pool_1_out_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_1_out_0_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_0_d0 <= 
        conv_1_out_1_q1 when (and_ln28_6_fu_847_p2(0) = '1') else 
        select_ln28_2_fu_762_p3;

    max_pool_1_out_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln10_reg_1043_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((icmp_ln10_reg_1043_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_1_out_0_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_1_address0 <= zext_ln35_1_fu_676_p1(2 - 1 downto 0);

    max_pool_1_out_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_1_out_1_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_1_d0 <= 
        conv_1_out_3_q1 when (and_ln28_13_fu_1028_p2(0) = '1') else 
        select_ln28_6_fu_943_p3;

    max_pool_1_out_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln10_reg_1043_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((icmp_ln10_reg_1043_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_1_out_1_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln25_fu_414_p2 <= (shl_ln25_fu_342_p2 or ap_const_lv2_1);
    or_ln28_10_fu_908_p2 <= (icmp_ln28_21_fu_902_p2 or icmp_ln28_20_fu_896_p2);
    or_ln28_11_fu_926_p2 <= (icmp_ln28_23_fu_920_p2 or icmp_ln28_22_fu_914_p2);
    or_ln28_12_fu_998_p2 <= (icmp_ln28_25_fu_992_p2 or icmp_ln28_24_fu_986_p2);
    or_ln28_13_fu_1016_p2 <= (icmp_ln28_27_fu_1010_p2 or icmp_ln28_26_fu_1004_p2);
    or_ln28_1_fu_541_p2 <= (icmp_ln28_3_fu_535_p2 or icmp_ln28_2_fu_529_p2);
    or_ln28_2_fu_559_p2 <= (icmp_ln28_5_fu_553_p2 or icmp_ln28_4_fu_547_p2);
    or_ln28_3_fu_727_p2 <= (icmp_ln28_7_fu_721_p2 or icmp_ln28_6_fu_715_p2);
    or_ln28_4_fu_745_p2 <= (icmp_ln28_9_fu_739_p2 or icmp_ln28_8_fu_733_p2);
    or_ln28_5_fu_817_p2 <= (icmp_ln28_11_fu_811_p2 or icmp_ln28_10_fu_805_p2);
    or_ln28_6_fu_835_p2 <= (icmp_ln28_13_fu_829_p2 or icmp_ln28_12_fu_823_p2);
    or_ln28_7_fu_474_p2 <= (icmp_ln28_15_fu_468_p2 or icmp_ln28_14_fu_462_p2);
    or_ln28_8_fu_632_p2 <= (icmp_ln28_17_fu_626_p2 or icmp_ln28_16_fu_620_p2);
    or_ln28_9_fu_650_p2 <= (icmp_ln28_19_fu_644_p2 or icmp_ln28_18_fu_638_p2);
    or_ln28_fu_394_p2 <= (icmp_ln28_fu_382_p2 or icmp_ln28_1_fu_388_p2);
    r_fu_333_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln28_8_fu_299_p3));
    select_ln28_1_fu_577_p3 <= 
        conv_1_out_1_q0 when (and_ln28_2_fu_571_p2(0) = '1') else 
        select_ln28_reg_1100;
    select_ln28_2_fu_762_p3 <= 
        conv_1_out_0_load_1_reg_1146 when (and_ln28_4_fu_757_p2(0) = '1') else 
        select_ln28_1_reg_1130;
    select_ln28_4_fu_486_p3 <= 
        conv_1_out_2_q0 when (and_ln28_7_fu_480_p2(0) = '1') else 
        ap_const_lv32_800000;
    select_ln28_5_fu_668_p3 <= 
        conv_1_out_3_q0 when (and_ln28_9_fu_662_p2(0) = '1') else 
        select_ln28_4_reg_1123;
    select_ln28_6_fu_943_p3 <= 
        conv_1_out_2_load_1_reg_1163 when (and_ln28_11_fu_938_p2(0) = '1') else 
        select_ln28_5_reg_1157;
    select_ln28_8_fu_299_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_293_p2(0) = '1') else 
        r_0_reg_222;
    select_ln28_9_fu_307_p3 <= 
        f_fu_287_p2 when (icmp_ln13_fu_293_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_215_p4;
    select_ln28_fu_406_p3 <= 
        conv_1_out_0_q0 when (and_ln28_fu_400_p2(0) = '1') else 
        ap_const_lv32_800000;
    shl_ln25_fu_342_p2 <= std_logic_vector(shift_left(unsigned(select_ln28_8_reg_1052),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_10_fu_791_p4 <= bitcast_ln28_6_fu_787_p1(30 downto 23);
    tmp_12_fu_448_p4 <= bitcast_ln28_7_fu_444_p1(30 downto 23);
    tmp_14_fu_589_p4 <= bitcast_ln28_8_fu_585_p1(30 downto 23);
    tmp_15_fu_606_p4 <= bitcast_ln28_9_fu_603_p1(30 downto 23);
    tmp_17_fu_865_p4 <= bitcast_ln28_10_fu_862_p1(30 downto 23);
    tmp_18_fu_882_p4 <= bitcast_ln28_11_fu_879_p1(30 downto 23);
    tmp_19_fu_260_p1 <= 
        conv_1_out_3_q0 when (and_ln28_9_fu_662_p2(0) = '1') else 
        select_ln28_4_reg_1123;
    tmp_20_fu_954_p4 <= bitcast_ln28_12_fu_950_p1(30 downto 23);
    tmp_21_fu_972_p4 <= bitcast_ln28_13_fu_968_p1(30 downto 23);
    tmp_23_fu_347_p3 <= (select_ln28_8_reg_1052 & ap_const_lv1_0);
    tmp_24_fu_319_p3 <= (trunc_ln25_fu_315_p1 & select_ln28_9_fu_307_p3);
    tmp_25_fu_420_p3 <= (or_ln25_fu_414_p2 & ap_const_lv1_0);
    tmp_2_fu_368_p4 <= bitcast_ln28_fu_364_p1(30 downto 23);
    tmp_4_fu_498_p4 <= bitcast_ln28_1_fu_494_p1(30 downto 23);
    tmp_5_fu_515_p4 <= bitcast_ln28_2_fu_512_p1(30 downto 23);
    tmp_7_fu_684_p4 <= bitcast_ln28_3_fu_681_p1(30 downto 23);
    tmp_8_fu_701_p4 <= bitcast_ln28_4_fu_698_p1(30 downto 23);
    tmp_9_fu_250_p1 <= 
        conv_1_out_1_q0 when (and_ln28_2_fu_571_p2(0) = '1') else 
        select_ln28_reg_1100;
    tmp_s_fu_773_p4 <= bitcast_ln28_5_fu_769_p1(30 downto 23);
    trunc_ln25_fu_315_p1 <= select_ln28_8_fu_299_p3(1 - 1 downto 0);
    trunc_ln28_10_fu_875_p1 <= bitcast_ln28_10_fu_862_p1(23 - 1 downto 0);
    trunc_ln28_11_fu_892_p1 <= bitcast_ln28_11_fu_879_p1(23 - 1 downto 0);
    trunc_ln28_12_fu_964_p1 <= bitcast_ln28_12_fu_950_p1(23 - 1 downto 0);
    trunc_ln28_13_fu_982_p1 <= bitcast_ln28_13_fu_968_p1(23 - 1 downto 0);
    trunc_ln28_1_fu_508_p1 <= bitcast_ln28_1_fu_494_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_525_p1 <= bitcast_ln28_2_fu_512_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_694_p1 <= bitcast_ln28_3_fu_681_p1(23 - 1 downto 0);
    trunc_ln28_4_fu_711_p1 <= bitcast_ln28_4_fu_698_p1(23 - 1 downto 0);
    trunc_ln28_5_fu_783_p1 <= bitcast_ln28_5_fu_769_p1(23 - 1 downto 0);
    trunc_ln28_6_fu_801_p1 <= bitcast_ln28_6_fu_787_p1(23 - 1 downto 0);
    trunc_ln28_7_fu_458_p1 <= bitcast_ln28_7_fu_444_p1(23 - 1 downto 0);
    trunc_ln28_8_fu_599_p1 <= bitcast_ln28_8_fu_585_p1(23 - 1 downto 0);
    trunc_ln28_9_fu_616_p1 <= bitcast_ln28_9_fu_603_p1(23 - 1 downto 0);
    trunc_ln28_fu_378_p1 <= bitcast_ln28_fu_364_p1(23 - 1 downto 0);
    zext_ln14_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_9_reg_1058),4));
    zext_ln28_1_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_420_p3),4));
    zext_ln28_2_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_432_p2),64));
    zext_ln28_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_319_p3),64));
    zext_ln35_1_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_reg_1085_pp0_iter2_reg),64));
    zext_ln35_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_347_p3),4));
end behav;
