// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.617000,HLS_SYN_LAT=97,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=296,HLS_SYN_LUT=702,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_2_address0,
        conv_1_out_2_ce0,
        conv_1_out_2_q0,
        conv_1_out_3_address0,
        conv_1_out_3_ce0,
        conv_1_out_3_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [2:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [2:0] conv_1_out_2_address0;
output   conv_1_out_2_ce0;
input  [31:0] conv_1_out_2_q0;
output  [2:0] conv_1_out_3_address0;
output   conv_1_out_3_ce0;
input  [31:0] conv_1_out_3_q0;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_0_ce0;
reg conv_1_out_1_ce0;
reg conv_1_out_2_ce0;
reg conv_1_out_3_ce0;
reg[2:0] max_pool_1_out_address0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;
reg[31:0] max_pool_1_out_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] f_fu_266_p2;
reg   [1:0] f_reg_656;
wire    ap_CS_fsm_state2;
wire   [3:0] zext_ln13_fu_272_p1;
reg   [3:0] zext_ln13_reg_661;
wire   [0:0] icmp_ln10_fu_260_p2;
wire   [4:0] zext_ln13_1_fu_276_p1;
reg   [4:0] zext_ln13_1_reg_667;
wire   [1:0] r_fu_286_p2;
reg   [1:0] r_reg_675;
wire    ap_CS_fsm_state3;
wire   [1:0] shl_ln25_fu_292_p2;
reg   [1:0] shl_ln25_reg_680;
wire   [0:0] icmp_ln13_fu_280_p2;
reg   [2:0] max_pool_1_out_addr_reg_686;
reg   [2:0] max_pool_1_out_addr_1_reg_691;
wire   [1:0] add_ln20_fu_349_p2;
reg   [1:0] add_ln20_reg_699;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln20_fu_343_p2;
reg   [31:0] conv_1_out_0_load_reg_714;
wire    ap_CS_fsm_state5;
reg   [31:0] conv_1_out_1_load_reg_719;
wire   [1:0] add_ln23_fu_389_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] select_ln28_fu_490_p3;
wire   [0:0] icmp_ln23_fu_383_p2;
wire   [1:0] add_ln20_1_fu_504_p2;
reg   [1:0] add_ln20_1_reg_740;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln20_1_fu_498_p2;
reg   [31:0] conv_1_out_2_load_reg_755;
wire    ap_CS_fsm_state8;
reg   [31:0] conv_1_out_3_load_reg_760;
wire   [1:0] add_ln23_1_fu_544_p2;
wire    ap_CS_fsm_state9;
wire   [31:0] select_ln28_1_fu_645_p3;
wire   [0:0] icmp_ln23_1_fu_538_p2;
reg   [1:0] f_0_reg_137;
reg   [1:0] r_0_reg_149;
reg   [31:0] max_0_0_reg_160;
reg   [1:0] mpr_0_0_reg_173;
reg   [31:0] max_1_0_reg_184;
reg   [1:0] mpc_0_0_reg_196;
reg   [31:0] max_0_1_reg_207;
reg   [1:0] mpr_0_1_reg_220;
reg   [31:0] max_1_1_reg_231;
reg   [1:0] mpc_0_1_reg_243;
wire   [63:0] zext_ln35_fu_314_p1;
wire   [63:0] zext_ln35_1_fu_338_p1;
wire   [63:0] zext_ln28_1_fu_377_p1;
wire   [63:0] zext_ln28_3_fu_532_p1;
reg   [31:0] grp_fu_254_p0;
wire   [31:0] select_ln28_2_fu_399_p3;
wire   [31:0] select_ln28_3_fu_554_p3;
reg   [31:0] grp_fu_254_p1;
wire   [3:0] tmp_11_fu_306_p3;
wire   [3:0] tmp_10_fu_298_p3;
wire   [3:0] or_ln35_fu_319_p2;
wire   [4:0] tmp_14_cast_fu_325_p3;
wire   [4:0] add_ln35_fu_333_p2;
wire   [1:0] add_ln25_fu_355_p2;
wire   [2:0] tmp_12_fu_360_p3;
wire   [3:0] zext_ln28_fu_368_p1;
wire   [3:0] add_ln28_fu_372_p2;
wire   [0:0] trunc_ln28_fu_395_p1;
wire   [31:0] bitcast_ln28_fu_406_p1;
wire   [31:0] bitcast_ln28_1_fu_424_p1;
wire   [7:0] tmp_1_fu_410_p4;
wire   [22:0] trunc_ln28_1_fu_420_p1;
wire   [0:0] icmp_ln28_1_fu_448_p2;
wire   [0:0] icmp_ln28_fu_442_p2;
wire   [7:0] tmp_6_fu_428_p4;
wire   [22:0] trunc_ln28_2_fu_438_p1;
wire   [0:0] icmp_ln28_3_fu_466_p2;
wire   [0:0] icmp_ln28_2_fu_460_p2;
wire   [0:0] or_ln28_fu_454_p2;
wire   [0:0] or_ln28_1_fu_472_p2;
wire   [0:0] and_ln28_fu_478_p2;
wire   [0:0] grp_fu_254_p2;
wire   [0:0] and_ln28_1_fu_484_p2;
wire   [1:0] add_ln25_1_fu_510_p2;
wire   [2:0] tmp_13_fu_515_p3;
wire   [3:0] zext_ln28_2_fu_523_p1;
wire   [3:0] add_ln28_1_fu_527_p2;
wire   [0:0] trunc_ln28_3_fu_550_p1;
wire   [31:0] bitcast_ln28_2_fu_561_p1;
wire   [31:0] bitcast_ln28_3_fu_579_p1;
wire   [7:0] tmp_8_fu_565_p4;
wire   [22:0] trunc_ln28_4_fu_575_p1;
wire   [0:0] icmp_ln28_5_fu_603_p2;
wire   [0:0] icmp_ln28_4_fu_597_p2;
wire   [7:0] tmp_9_fu_583_p4;
wire   [22:0] trunc_ln28_5_fu_593_p1;
wire   [0:0] icmp_ln28_7_fu_621_p2;
wire   [0:0] icmp_ln28_6_fu_615_p2;
wire   [0:0] or_ln28_2_fu_609_p2;
wire   [0:0] or_ln28_3_fu_627_p2;
wire   [0:0] and_ln28_2_fu_633_p2;
wire   [0:0] and_ln28_3_fu_639_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(grp_fu_254_p0),
    .din1(grp_fu_254_p1),
    .opcode(5'd2),
    .dout(grp_fu_254_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_137 <= f_reg_656;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_137 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_383_p2 == 1'd1))) begin
        max_0_0_reg_160 <= max_1_0_reg_184;
    end else if (((icmp_ln13_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        max_0_0_reg_160 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_1_fu_538_p2 == 1'd1))) begin
        max_0_1_reg_207 <= max_1_1_reg_231;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_343_p2 == 1'd1))) begin
        max_0_1_reg_207 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_383_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        max_1_0_reg_184 <= select_ln28_fu_490_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        max_1_0_reg_184 <= max_0_0_reg_160;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_1_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        max_1_1_reg_231 <= select_ln28_1_fu_645_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        max_1_1_reg_231 <= max_0_1_reg_207;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_383_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        mpc_0_0_reg_196 <= add_ln23_fu_389_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        mpc_0_0_reg_196 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_1_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        mpc_0_1_reg_243 <= add_ln23_1_fu_544_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mpc_0_1_reg_243 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_383_p2 == 1'd1))) begin
        mpr_0_0_reg_173 <= add_ln20_reg_699;
    end else if (((icmp_ln13_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mpr_0_0_reg_173 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_1_fu_538_p2 == 1'd1))) begin
        mpr_0_1_reg_220 <= add_ln20_1_reg_740;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_343_p2 == 1'd1))) begin
        mpr_0_1_reg_220 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln20_1_fu_498_p2 == 1'd1))) begin
        r_0_reg_149 <= r_reg_675;
    end else if (((icmp_ln10_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_149 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln20_1_reg_740 <= add_ln20_1_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln20_reg_699 <= add_ln20_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_0_load_reg_714 <= conv_1_out_0_q0;
        conv_1_out_1_load_reg_719 <= conv_1_out_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_1_out_2_load_reg_755 <= conv_1_out_2_q0;
        conv_1_out_3_load_reg_760 <= conv_1_out_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_656 <= f_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        max_pool_1_out_addr_1_reg_691 <= zext_ln35_1_fu_338_p1;
        max_pool_1_out_addr_reg_686 <= zext_ln35_fu_314_p1;
        shl_ln25_reg_680[1] <= shl_ln25_fu_292_p2[1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_675 <= r_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_667[1 : 0] <= zext_ln13_1_fu_276_p1[1 : 0];
        zext_ln13_reg_661[1 : 0] <= zext_ln13_fu_272_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_1_out_2_ce0 = 1'b1;
    end else begin
        conv_1_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_1_out_3_ce0 = 1'b1;
    end else begin
        conv_1_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_254_p0 = select_ln28_3_fu_554_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_254_p0 = select_ln28_2_fu_399_p3;
    end else begin
        grp_fu_254_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_254_p1 = max_1_1_reg_231;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_254_p1 = max_1_0_reg_184;
    end else begin
        grp_fu_254_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_1_out_address0 = max_pool_1_out_addr_1_reg_691;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_address0 = max_pool_1_out_addr_reg_686;
    end else begin
        max_pool_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_1_out_d0 = max_0_1_reg_207;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_d0 = max_0_0_reg_160;
    end else begin
        max_pool_1_out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_343_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln20_1_fu_498_p2 == 1'd1)))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_343_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_383_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln20_1_fu_498_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_1_fu_538_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_1_fu_504_p2 = (mpr_0_1_reg_220 + 2'd1);

assign add_ln20_fu_349_p2 = (mpr_0_0_reg_173 + 2'd1);

assign add_ln23_1_fu_544_p2 = (mpc_0_1_reg_243 + 2'd1);

assign add_ln23_fu_389_p2 = (mpc_0_0_reg_196 + 2'd1);

assign add_ln25_1_fu_510_p2 = (shl_ln25_reg_680 + mpr_0_1_reg_220);

assign add_ln25_fu_355_p2 = (shl_ln25_reg_680 + mpr_0_0_reg_173);

assign add_ln28_1_fu_527_p2 = (zext_ln13_reg_661 + zext_ln28_2_fu_523_p1);

assign add_ln28_fu_372_p2 = (zext_ln13_reg_661 + zext_ln28_fu_368_p1);

assign add_ln35_fu_333_p2 = (tmp_14_cast_fu_325_p3 + zext_ln13_1_reg_667);

assign and_ln28_1_fu_484_p2 = (grp_fu_254_p2 & and_ln28_fu_478_p2);

assign and_ln28_2_fu_633_p2 = (or_ln28_3_fu_627_p2 & or_ln28_2_fu_609_p2);

assign and_ln28_3_fu_639_p2 = (grp_fu_254_p2 & and_ln28_2_fu_633_p2);

assign and_ln28_fu_478_p2 = (or_ln28_fu_454_p2 & or_ln28_1_fu_472_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln28_1_fu_424_p1 = max_1_0_reg_184;

assign bitcast_ln28_2_fu_561_p1 = select_ln28_3_fu_554_p3;

assign bitcast_ln28_3_fu_579_p1 = max_1_1_reg_231;

assign bitcast_ln28_fu_406_p1 = select_ln28_2_fu_399_p3;

assign conv_1_out_0_address0 = zext_ln28_1_fu_377_p1;

assign conv_1_out_1_address0 = zext_ln28_1_fu_377_p1;

assign conv_1_out_2_address0 = zext_ln28_3_fu_532_p1;

assign conv_1_out_3_address0 = zext_ln28_3_fu_532_p1;

assign f_fu_266_p2 = (f_0_reg_137 + 2'd1);

assign icmp_ln10_fu_260_p2 = ((f_0_reg_137 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_280_p2 = ((r_0_reg_149 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_498_p2 = ((mpr_0_1_reg_220 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_343_p2 = ((mpr_0_0_reg_173 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_538_p2 = ((mpc_0_1_reg_243 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_383_p2 = ((mpc_0_0_reg_196 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_448_p2 = ((trunc_ln28_1_fu_420_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_460_p2 = ((tmp_6_fu_428_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_466_p2 = ((trunc_ln28_2_fu_438_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_597_p2 = ((tmp_8_fu_565_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_603_p2 = ((trunc_ln28_4_fu_575_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_615_p2 = ((tmp_9_fu_583_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_621_p2 = ((trunc_ln28_5_fu_593_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_442_p2 = ((tmp_1_fu_410_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln28_1_fu_472_p2 = (icmp_ln28_3_fu_466_p2 | icmp_ln28_2_fu_460_p2);

assign or_ln28_2_fu_609_p2 = (icmp_ln28_5_fu_603_p2 | icmp_ln28_4_fu_597_p2);

assign or_ln28_3_fu_627_p2 = (icmp_ln28_7_fu_621_p2 | icmp_ln28_6_fu_615_p2);

assign or_ln28_fu_454_p2 = (icmp_ln28_fu_442_p2 | icmp_ln28_1_fu_448_p2);

assign or_ln35_fu_319_p2 = (tmp_10_fu_298_p3 | 4'd2);

assign r_fu_286_p2 = (r_0_reg_149 + 2'd1);

assign select_ln28_1_fu_645_p3 = ((and_ln28_3_fu_639_p2[0:0] === 1'b1) ? select_ln28_3_fu_554_p3 : max_1_1_reg_231);

assign select_ln28_2_fu_399_p3 = ((trunc_ln28_fu_395_p1[0:0] === 1'b1) ? conv_1_out_1_load_reg_719 : conv_1_out_0_load_reg_714);

assign select_ln28_3_fu_554_p3 = ((trunc_ln28_3_fu_550_p1[0:0] === 1'b1) ? conv_1_out_3_load_reg_760 : conv_1_out_2_load_reg_755);

assign select_ln28_fu_490_p3 = ((and_ln28_1_fu_484_p2[0:0] === 1'b1) ? select_ln28_2_fu_399_p3 : max_1_0_reg_184);

assign shl_ln25_fu_292_p2 = r_0_reg_149 << 2'd1;

assign tmp_10_fu_298_p3 = {{r_0_reg_149}, {2'd0}};

assign tmp_11_fu_306_p3 = {{r_0_reg_149}, {f_0_reg_137}};

assign tmp_12_fu_360_p3 = {{add_ln25_fu_355_p2}, {1'd0}};

assign tmp_13_fu_515_p3 = {{add_ln25_1_fu_510_p2}, {1'd0}};

assign tmp_14_cast_fu_325_p3 = {{1'd0}, {or_ln35_fu_319_p2}};

assign tmp_1_fu_410_p4 = {{bitcast_ln28_fu_406_p1[30:23]}};

assign tmp_6_fu_428_p4 = {{bitcast_ln28_1_fu_424_p1[30:23]}};

assign tmp_8_fu_565_p4 = {{bitcast_ln28_2_fu_561_p1[30:23]}};

assign tmp_9_fu_583_p4 = {{bitcast_ln28_3_fu_579_p1[30:23]}};

assign trunc_ln28_1_fu_420_p1 = bitcast_ln28_fu_406_p1[22:0];

assign trunc_ln28_2_fu_438_p1 = bitcast_ln28_1_fu_424_p1[22:0];

assign trunc_ln28_3_fu_550_p1 = mpc_0_1_reg_243[0:0];

assign trunc_ln28_4_fu_575_p1 = bitcast_ln28_2_fu_561_p1[22:0];

assign trunc_ln28_5_fu_593_p1 = bitcast_ln28_3_fu_579_p1[22:0];

assign trunc_ln28_fu_395_p1 = mpc_0_0_reg_196[0:0];

assign zext_ln13_1_fu_276_p1 = f_0_reg_137;

assign zext_ln13_fu_272_p1 = f_0_reg_137;

assign zext_ln28_1_fu_377_p1 = add_ln28_fu_372_p2;

assign zext_ln28_2_fu_523_p1 = tmp_13_fu_515_p3;

assign zext_ln28_3_fu_532_p1 = add_ln28_1_fu_527_p2;

assign zext_ln28_fu_368_p1 = tmp_12_fu_360_p3;

assign zext_ln35_1_fu_338_p1 = add_ln35_fu_333_p2;

assign zext_ln35_fu_314_p1 = tmp_11_fu_306_p3;

always @ (posedge ap_clk) begin
    zext_ln13_reg_661[3:2] <= 2'b00;
    zext_ln13_1_reg_667[4:2] <= 3'b000;
    shl_ln25_reg_680[0] <= 1'b0;
end

endmodule //max_pool_1
