-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.668000,HLS_SYN_LAT=119,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=174,HLS_SYN_LUT=684,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal f_fu_243_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_reg_641 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln14_fu_249_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_reg_646 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln10_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln14_1_fu_253_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln14_1_reg_652 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln16_fu_263_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln16_reg_661 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln26_fu_269_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln26_reg_666 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln16_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_fu_281_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln20_reg_674 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln23_fu_315_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln23_reg_682 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln23_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_434_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln16_1_fu_448_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln16_1_reg_700 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal shl_ln26_1_fu_454_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln26_1_reg_705 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln16_1_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_1_fu_466_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln20_1_reg_713 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal xor_ln25_fu_472_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln25_reg_718 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_1_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_1_fu_512_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln23_1_reg_726 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln23_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_1_fu_630_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal f_0_reg_100 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_0_reg_111 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_0_0_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_0_reg_136 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_0_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_0_reg_160 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_1_reg_171 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_0_1_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_1_reg_196 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_1_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_1_reg_219 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_1_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_287_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_fu_295_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_299_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_321_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_326_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_fu_336_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_fu_340_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln28_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_354_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_364_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_372_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_382_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_478_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_2_fu_486_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_1_fu_490_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_2_fu_496_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_518_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_523_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_2_fu_532_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_1_fu_536_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln28_2_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_3_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_550_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_560_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_568_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_578_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => grp_fu_230_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_230_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_0_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln20_fu_275_p2 = ap_const_lv1_1))) then 
                c_0_0_reg_111 <= add_ln16_reg_661;
            elsif (((icmp_ln10_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_0_reg_111 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_0_1_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln20_1_fu_460_p2 = ap_const_lv1_1))) then 
                c_0_1_reg_171 <= add_ln16_1_reg_700;
            elsif (((icmp_ln16_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_1_reg_171 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln16_1_fu_442_p2 = ap_const_lv1_1))) then 
                f_0_reg_100 <= f_reg_641;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_100 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    max_0_0_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_0_0_reg_123 <= max_1_0_reg_148;
            elsif (((icmp_ln16_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                max_0_0_reg_123 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_0_1_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_1_fu_506_p2 = ap_const_lv1_1))) then 
                max_0_1_reg_183 <= max_1_1_reg_207;
            elsif (((icmp_ln16_1_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                max_0_1_reg_183 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_1_0_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                max_1_0_reg_148 <= select_ln28_fu_434_p3;
            elsif (((icmp_ln20_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_1_0_reg_148 <= max_0_0_reg_123;
            end if; 
        end if;
    end process;

    max_1_1_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                max_1_1_reg_207 <= select_ln28_1_fu_630_p3;
            elsif (((icmp_ln20_1_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                max_1_1_reg_207 <= max_0_1_reg_183;
            end if; 
        end if;
    end process;

    mpc_0_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                mpc_0_0_reg_160 <= add_ln23_reg_682;
            elsif (((icmp_ln20_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpc_0_0_reg_160 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpc_0_1_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                mpc_0_1_reg_219 <= add_ln23_1_reg_726;
            elsif (((icmp_ln20_1_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                mpc_0_1_reg_219 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                mpr_0_0_reg_136 <= add_ln20_reg_674;
            elsif (((icmp_ln16_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                mpr_0_0_reg_136 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_1_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_1_fu_506_p2 = ap_const_lv1_1))) then 
                mpr_0_1_reg_196 <= add_ln20_1_reg_713;
            elsif (((icmp_ln16_1_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                mpr_0_1_reg_196 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln16_1_reg_700 <= add_ln16_1_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln16_reg_661 <= add_ln16_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln20_1_reg_713 <= add_ln20_1_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln20_reg_674 <= add_ln20_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln23_1_reg_726 <= add_ln23_1_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln23_reg_682 <= add_ln23_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_641 <= f_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_1_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    shl_ln26_1_reg_705(1) <= shl_ln26_1_fu_454_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln26_reg_666(1) <= shl_ln26_fu_269_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_1_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                xor_ln25_reg_718 <= xor_ln25_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln14_1_reg_652(1 downto 0) <= zext_ln14_1_fu_253_p1(1 downto 0);
                    zext_ln14_reg_646(1 downto 0) <= zext_ln14_fu_249_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln14_reg_646(5 downto 2) <= "0000";
    zext_ln14_1_reg_652(3 downto 2) <= "00";
    shl_ln26_reg_666(0) <= '0';
    shl_ln26_1_reg_705(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_237_p2, ap_CS_fsm_state3, icmp_ln16_fu_257_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln23_fu_309_p2, ap_CS_fsm_state7, icmp_ln16_1_fu_442_p2, ap_CS_fsm_state8, icmp_ln20_1_fu_460_p2, ap_CS_fsm_state9, icmp_ln23_1_fu_506_p2, icmp_ln20_fu_275_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln16_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln20_fu_275_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln23_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln16_1_fu_442_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln20_1_fu_460_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_1_fu_506_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln16_1_fu_448_p2 <= std_logic_vector(unsigned(c_0_1_reg_171) + unsigned(ap_const_lv2_1));
    add_ln16_fu_263_p2 <= std_logic_vector(unsigned(c_0_0_reg_111) + unsigned(ap_const_lv2_1));
    add_ln20_1_fu_466_p2 <= std_logic_vector(unsigned(mpr_0_1_reg_196) + unsigned(ap_const_lv2_1));
    add_ln20_fu_281_p2 <= std_logic_vector(unsigned(mpr_0_0_reg_136) + unsigned(ap_const_lv2_1));
    add_ln23_1_fu_512_p2 <= std_logic_vector(unsigned(mpc_0_1_reg_219) + unsigned(ap_const_lv2_1));
    add_ln23_fu_315_p2 <= std_logic_vector(unsigned(mpc_0_0_reg_160) + unsigned(ap_const_lv2_1));
    add_ln26_1_fu_518_p2 <= std_logic_vector(unsigned(shl_ln26_1_reg_705) + unsigned(mpc_0_1_reg_219));
    add_ln26_fu_321_p2 <= std_logic_vector(unsigned(shl_ln26_reg_666) + unsigned(mpc_0_0_reg_160));
    add_ln28_1_fu_536_p2 <= std_logic_vector(unsigned(zext_ln14_reg_646) + unsigned(zext_ln28_2_fu_532_p1));
    add_ln28_fu_340_p2 <= std_logic_vector(unsigned(zext_ln14_reg_646) + unsigned(zext_ln28_fu_336_p1));
    add_ln35_1_fu_490_p2 <= std_logic_vector(unsigned(zext_ln35_2_fu_486_p1) + unsigned(ap_const_lv4_4));
    add_ln35_2_fu_496_p2 <= std_logic_vector(unsigned(zext_ln14_1_reg_652) + unsigned(add_ln35_1_fu_490_p2));
    add_ln35_fu_299_p2 <= std_logic_vector(unsigned(zext_ln14_1_reg_652) + unsigned(zext_ln35_fu_295_p1));
    and_ln28_1_fu_428_p2 <= (grp_fu_230_p2 and and_ln28_fu_422_p2);
    and_ln28_2_fu_618_p2 <= (or_ln28_3_fu_612_p2 and or_ln28_2_fu_594_p2);
    and_ln28_3_fu_624_p2 <= (grp_fu_230_p2 and and_ln28_2_fu_618_p2);
    and_ln28_fu_422_p2 <= (or_ln28_fu_398_p2 and or_ln28_1_fu_416_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_237_p2)
    begin
        if (((icmp_ln10_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_237_p2)
    begin
        if (((icmp_ln10_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_368_p1 <= max_1_0_reg_148;
    bitcast_ln28_2_fu_546_p1 <= conv_1_out_q0;
    bitcast_ln28_3_fu_564_p1 <= max_1_1_reg_207;
    bitcast_ln28_fu_350_p1 <= conv_1_out_q0;

    conv_1_out_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, zext_ln28_1_fu_345_p1, zext_ln28_3_fu_541_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_1_out_address0 <= zext_ln28_3_fu_541_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_address0 <= zext_ln28_1_fu_345_p1(5 - 1 downto 0);
        else 
            conv_1_out_address0 <= "XXXXX";
        end if; 
    end process;


    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_243_p2 <= std_logic_vector(unsigned(f_0_reg_100) + unsigned(ap_const_lv2_1));

    grp_fu_230_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, max_1_0_reg_148, max_1_1_reg_207)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_230_p1 <= max_1_1_reg_207;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_230_p1 <= max_1_0_reg_148;
        else 
            grp_fu_230_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_237_p2 <= "1" when (f_0_reg_100 = ap_const_lv2_2) else "0";
    icmp_ln16_1_fu_442_p2 <= "1" when (c_0_1_reg_171 = ap_const_lv2_2) else "0";
    icmp_ln16_fu_257_p2 <= "1" when (c_0_0_reg_111 = ap_const_lv2_2) else "0";
    icmp_ln20_1_fu_460_p2 <= "1" when (mpr_0_1_reg_196 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_275_p2 <= "1" when (mpr_0_0_reg_136 = ap_const_lv2_2) else "0";
    icmp_ln23_1_fu_506_p2 <= "1" when (mpc_0_1_reg_219 = ap_const_lv2_2) else "0";
    icmp_ln23_fu_309_p2 <= "1" when (mpc_0_0_reg_160 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_392_p2 <= "1" when (trunc_ln28_fu_364_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_404_p2 <= "0" when (tmp_7_fu_372_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_410_p2 <= "1" when (trunc_ln28_1_fu_382_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_582_p2 <= "0" when (tmp_9_fu_550_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_588_p2 <= "1" when (trunc_ln28_2_fu_560_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_600_p2 <= "0" when (tmp_s_fu_568_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_606_p2 <= "1" when (trunc_ln28_3_fu_578_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_386_p2 <= "0" when (tmp_1_fu_354_p4 = ap_const_lv8_FF) else "1";

    max_pool_1_out_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, zext_ln35_1_fu_304_p1, zext_ln35_3_fu_501_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_pool_1_out_address0 <= zext_ln35_3_fu_501_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_1_out_address0 <= zext_ln35_1_fu_304_p1(3 - 1 downto 0);
        else 
            max_pool_1_out_address0 <= "XXX";
        end if; 
    end process;


    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, max_0_0_reg_123, max_0_1_reg_183)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_pool_1_out_d0 <= max_0_1_reg_183;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_1_out_d0 <= max_0_0_reg_123;
        else 
            max_pool_1_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, icmp_ln20_1_fu_460_p2, icmp_ln20_fu_275_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln20_fu_275_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln20_1_fu_460_p2 = ap_const_lv1_1)))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln28_1_fu_416_p2 <= (icmp_ln28_3_fu_410_p2 or icmp_ln28_2_fu_404_p2);
    or_ln28_2_fu_594_p2 <= (icmp_ln28_5_fu_588_p2 or icmp_ln28_4_fu_582_p2);
    or_ln28_3_fu_612_p2 <= (icmp_ln28_7_fu_606_p2 or icmp_ln28_6_fu_600_p2);
    or_ln28_fu_398_p2 <= (icmp_ln28_fu_386_p2 or icmp_ln28_1_fu_392_p2);
    select_ln28_1_fu_630_p3 <= 
        conv_1_out_q0 when (and_ln28_3_fu_624_p2(0) = '1') else 
        max_1_1_reg_207;
    select_ln28_fu_434_p3 <= 
        conv_1_out_q0 when (and_ln28_1_fu_428_p2(0) = '1') else 
        max_1_0_reg_148;
    shl_ln26_1_fu_454_p2 <= std_logic_vector(shift_left(unsigned(c_0_1_reg_171),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln26_fu_269_p2 <= std_logic_vector(shift_left(unsigned(c_0_0_reg_111),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_11_fu_287_p3 <= (c_0_0_reg_111 & ap_const_lv1_0);
    tmp_12_fu_478_p3 <= (c_0_1_reg_171 & ap_const_lv1_0);
    tmp_13_fu_326_p4 <= ((mpr_0_0_reg_136 & add_ln26_fu_321_p2) & ap_const_lv1_0);
    tmp_14_fu_523_p4 <= ((xor_ln25_reg_718 & add_ln26_1_fu_518_p2) & ap_const_lv1_0);
    tmp_1_fu_354_p4 <= bitcast_ln28_fu_350_p1(30 downto 23);
    tmp_7_fu_372_p4 <= bitcast_ln28_1_fu_368_p1(30 downto 23);
    tmp_9_fu_550_p4 <= bitcast_ln28_2_fu_546_p1(30 downto 23);
    tmp_s_fu_568_p4 <= bitcast_ln28_3_fu_564_p1(30 downto 23);
    trunc_ln28_1_fu_382_p1 <= bitcast_ln28_1_fu_368_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_560_p1 <= bitcast_ln28_2_fu_546_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_578_p1 <= bitcast_ln28_3_fu_564_p1(23 - 1 downto 0);
    trunc_ln28_fu_364_p1 <= bitcast_ln28_fu_350_p1(23 - 1 downto 0);
    xor_ln25_fu_472_p2 <= (mpr_0_1_reg_196 xor ap_const_lv2_2);
    zext_ln14_1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_100),4));
    zext_ln14_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_100),6));
    zext_ln28_1_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_340_p2),64));
    zext_ln28_2_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_523_p4),6));
    zext_ln28_3_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_536_p2),64));
    zext_ln28_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_326_p4),6));
    zext_ln35_1_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_299_p2),64));
    zext_ln35_2_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_478_p3),4));
    zext_ln35_3_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_2_fu_496_p2),64));
    zext_ln35_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_287_p3),4));
end behav;
