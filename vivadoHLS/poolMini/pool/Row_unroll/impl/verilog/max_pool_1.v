// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.668000,HLS_SYN_LAT=119,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=174,HLS_SYN_LUT=684,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] conv_1_out_address0;
reg conv_1_out_ce0;
reg[2:0] max_pool_1_out_address0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;
reg[31:0] max_pool_1_out_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] f_fu_243_p2;
reg   [1:0] f_reg_641;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln14_fu_249_p1;
reg   [5:0] zext_ln14_reg_646;
wire   [0:0] icmp_ln10_fu_237_p2;
wire   [3:0] zext_ln14_1_fu_253_p1;
reg   [3:0] zext_ln14_1_reg_652;
wire   [1:0] add_ln16_fu_263_p2;
reg   [1:0] add_ln16_reg_661;
wire    ap_CS_fsm_state3;
wire   [1:0] shl_ln26_fu_269_p2;
reg   [1:0] shl_ln26_reg_666;
wire   [0:0] icmp_ln16_fu_257_p2;
wire   [1:0] add_ln20_fu_281_p2;
reg   [1:0] add_ln20_reg_674;
wire    ap_CS_fsm_state4;
wire   [1:0] add_ln23_fu_315_p2;
reg   [1:0] add_ln23_reg_682;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln23_fu_309_p2;
wire   [31:0] select_ln28_fu_434_p3;
wire    ap_CS_fsm_state6;
wire   [1:0] add_ln16_1_fu_448_p2;
reg   [1:0] add_ln16_1_reg_700;
wire    ap_CS_fsm_state7;
wire   [1:0] shl_ln26_1_fu_454_p2;
reg   [1:0] shl_ln26_1_reg_705;
wire   [0:0] icmp_ln16_1_fu_442_p2;
wire   [1:0] add_ln20_1_fu_466_p2;
reg   [1:0] add_ln20_1_reg_713;
wire    ap_CS_fsm_state8;
wire   [1:0] xor_ln25_fu_472_p2;
reg   [1:0] xor_ln25_reg_718;
wire   [0:0] icmp_ln20_1_fu_460_p2;
wire   [1:0] add_ln23_1_fu_512_p2;
reg   [1:0] add_ln23_1_reg_726;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln23_1_fu_506_p2;
wire   [31:0] select_ln28_1_fu_630_p3;
wire    ap_CS_fsm_state10;
reg   [1:0] f_0_reg_100;
reg   [1:0] c_0_0_reg_111;
wire   [0:0] icmp_ln20_fu_275_p2;
reg   [31:0] max_0_0_reg_123;
reg   [1:0] mpr_0_0_reg_136;
reg   [31:0] max_1_0_reg_148;
reg   [1:0] mpc_0_0_reg_160;
reg   [1:0] c_0_1_reg_171;
reg   [31:0] max_0_1_reg_183;
reg   [1:0] mpr_0_1_reg_196;
reg   [31:0] max_1_1_reg_207;
reg   [1:0] mpc_0_1_reg_219;
wire   [63:0] zext_ln35_1_fu_304_p1;
wire   [63:0] zext_ln28_1_fu_345_p1;
wire   [63:0] zext_ln35_3_fu_501_p1;
wire   [63:0] zext_ln28_3_fu_541_p1;
reg   [31:0] grp_fu_230_p1;
wire   [2:0] tmp_11_fu_287_p3;
wire   [3:0] zext_ln35_fu_295_p1;
wire   [3:0] add_ln35_fu_299_p2;
wire   [1:0] add_ln26_fu_321_p2;
wire   [4:0] tmp_13_fu_326_p4;
wire   [5:0] zext_ln28_fu_336_p1;
wire   [5:0] add_ln28_fu_340_p2;
wire   [31:0] bitcast_ln28_fu_350_p1;
wire   [31:0] bitcast_ln28_1_fu_368_p1;
wire   [7:0] tmp_1_fu_354_p4;
wire   [22:0] trunc_ln28_fu_364_p1;
wire   [0:0] icmp_ln28_1_fu_392_p2;
wire   [0:0] icmp_ln28_fu_386_p2;
wire   [7:0] tmp_7_fu_372_p4;
wire   [22:0] trunc_ln28_1_fu_382_p1;
wire   [0:0] icmp_ln28_3_fu_410_p2;
wire   [0:0] icmp_ln28_2_fu_404_p2;
wire   [0:0] or_ln28_fu_398_p2;
wire   [0:0] or_ln28_1_fu_416_p2;
wire   [0:0] and_ln28_fu_422_p2;
wire   [0:0] grp_fu_230_p2;
wire   [0:0] and_ln28_1_fu_428_p2;
wire   [2:0] tmp_12_fu_478_p3;
wire   [3:0] zext_ln35_2_fu_486_p1;
wire   [3:0] add_ln35_1_fu_490_p2;
wire   [3:0] add_ln35_2_fu_496_p2;
wire   [1:0] add_ln26_1_fu_518_p2;
wire   [4:0] tmp_14_fu_523_p4;
wire   [5:0] zext_ln28_2_fu_532_p1;
wire   [5:0] add_ln28_1_fu_536_p2;
wire   [31:0] bitcast_ln28_2_fu_546_p1;
wire   [31:0] bitcast_ln28_3_fu_564_p1;
wire   [7:0] tmp_9_fu_550_p4;
wire   [22:0] trunc_ln28_2_fu_560_p1;
wire   [0:0] icmp_ln28_5_fu_588_p2;
wire   [0:0] icmp_ln28_4_fu_582_p2;
wire   [7:0] tmp_s_fu_568_p4;
wire   [22:0] trunc_ln28_3_fu_578_p1;
wire   [0:0] icmp_ln28_7_fu_606_p2;
wire   [0:0] icmp_ln28_6_fu_600_p2;
wire   [0:0] or_ln28_2_fu_594_p2;
wire   [0:0] or_ln28_3_fu_612_p2;
wire   [0:0] and_ln28_2_fu_618_p2;
wire   [0:0] and_ln28_3_fu_624_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(grp_fu_230_p1),
    .opcode(5'd2),
    .dout(grp_fu_230_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_275_p2 == 1'd1))) begin
        c_0_0_reg_111 <= add_ln16_reg_661;
    end else if (((icmp_ln10_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_0_reg_111 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln20_1_fu_460_p2 == 1'd1))) begin
        c_0_1_reg_171 <= add_ln16_1_reg_700;
    end else if (((icmp_ln16_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_1_reg_171 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln16_1_fu_442_p2 == 1'd1))) begin
        f_0_reg_100 <= f_reg_641;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_100 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_309_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_0_0_reg_123 <= max_1_0_reg_148;
    end else if (((icmp_ln16_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        max_0_0_reg_123 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_1_fu_506_p2 == 1'd1))) begin
        max_0_1_reg_183 <= max_1_1_reg_207;
    end else if (((icmp_ln16_1_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        max_0_1_reg_183 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_1_0_reg_148 <= select_ln28_fu_434_p3;
    end else if (((icmp_ln20_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_1_0_reg_148 <= max_0_0_reg_123;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        max_1_1_reg_207 <= select_ln28_1_fu_630_p3;
    end else if (((icmp_ln20_1_fu_460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        max_1_1_reg_207 <= max_0_1_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_0_0_reg_160 <= add_ln23_reg_682;
    end else if (((icmp_ln20_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpc_0_0_reg_160 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mpc_0_1_reg_219 <= add_ln23_1_reg_726;
    end else if (((icmp_ln20_1_fu_460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        mpc_0_1_reg_219 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_309_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mpr_0_0_reg_136 <= add_ln20_reg_674;
    end else if (((icmp_ln16_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mpr_0_0_reg_136 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_1_fu_506_p2 == 1'd1))) begin
        mpr_0_1_reg_196 <= add_ln20_1_reg_713;
    end else if (((icmp_ln16_1_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        mpr_0_1_reg_196 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln16_1_reg_700 <= add_ln16_1_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln16_reg_661 <= add_ln16_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln20_1_reg_713 <= add_ln20_1_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln20_reg_674 <= add_ln20_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln23_1_reg_726 <= add_ln23_1_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln23_reg_682 <= add_ln23_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_641 <= f_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_1_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        shl_ln26_1_reg_705[1] <= shl_ln26_1_fu_454_p2[1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln26_reg_666[1] <= shl_ln26_fu_269_p2[1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_1_fu_460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        xor_ln25_reg_718 <= xor_ln25_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln14_1_reg_652[1 : 0] <= zext_ln14_1_fu_253_p1[1 : 0];
        zext_ln14_reg_646[1 : 0] <= zext_ln14_fu_249_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_1_out_address0 = zext_ln28_3_fu_541_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_address0 = zext_ln28_1_fu_345_p1;
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_230_p1 = max_1_1_reg_207;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_230_p1 = max_1_0_reg_148;
    end else begin
        grp_fu_230_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_pool_1_out_address0 = zext_ln35_3_fu_501_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_address0 = zext_ln35_1_fu_304_p1;
    end else begin
        max_pool_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_pool_1_out_d0 = max_0_1_reg_183;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_d0 = max_0_0_reg_123;
    end else begin
        max_pool_1_out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_275_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln20_1_fu_460_p2 == 1'd1)))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln16_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln23_fu_309_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln16_1_fu_442_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln20_1_fu_460_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_1_fu_506_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_1_fu_448_p2 = (c_0_1_reg_171 + 2'd1);

assign add_ln16_fu_263_p2 = (c_0_0_reg_111 + 2'd1);

assign add_ln20_1_fu_466_p2 = (mpr_0_1_reg_196 + 2'd1);

assign add_ln20_fu_281_p2 = (mpr_0_0_reg_136 + 2'd1);

assign add_ln23_1_fu_512_p2 = (mpc_0_1_reg_219 + 2'd1);

assign add_ln23_fu_315_p2 = (mpc_0_0_reg_160 + 2'd1);

assign add_ln26_1_fu_518_p2 = (shl_ln26_1_reg_705 + mpc_0_1_reg_219);

assign add_ln26_fu_321_p2 = (shl_ln26_reg_666 + mpc_0_0_reg_160);

assign add_ln28_1_fu_536_p2 = (zext_ln14_reg_646 + zext_ln28_2_fu_532_p1);

assign add_ln28_fu_340_p2 = (zext_ln14_reg_646 + zext_ln28_fu_336_p1);

assign add_ln35_1_fu_490_p2 = (zext_ln35_2_fu_486_p1 + 4'd4);

assign add_ln35_2_fu_496_p2 = (zext_ln14_1_reg_652 + add_ln35_1_fu_490_p2);

assign add_ln35_fu_299_p2 = (zext_ln14_1_reg_652 + zext_ln35_fu_295_p1);

assign and_ln28_1_fu_428_p2 = (grp_fu_230_p2 & and_ln28_fu_422_p2);

assign and_ln28_2_fu_618_p2 = (or_ln28_3_fu_612_p2 & or_ln28_2_fu_594_p2);

assign and_ln28_3_fu_624_p2 = (grp_fu_230_p2 & and_ln28_2_fu_618_p2);

assign and_ln28_fu_422_p2 = (or_ln28_fu_398_p2 & or_ln28_1_fu_416_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln28_1_fu_368_p1 = max_1_0_reg_148;

assign bitcast_ln28_2_fu_546_p1 = conv_1_out_q0;

assign bitcast_ln28_3_fu_564_p1 = max_1_1_reg_207;

assign bitcast_ln28_fu_350_p1 = conv_1_out_q0;

assign f_fu_243_p2 = (f_0_reg_100 + 2'd1);

assign icmp_ln10_fu_237_p2 = ((f_0_reg_100 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_442_p2 = ((c_0_1_reg_171 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_257_p2 = ((c_0_0_reg_111 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_460_p2 = ((mpr_0_1_reg_196 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_275_p2 = ((mpr_0_0_reg_136 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_506_p2 = ((mpc_0_1_reg_219 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_309_p2 = ((mpc_0_0_reg_160 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_392_p2 = ((trunc_ln28_fu_364_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_404_p2 = ((tmp_7_fu_372_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_410_p2 = ((trunc_ln28_1_fu_382_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_582_p2 = ((tmp_9_fu_550_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_588_p2 = ((trunc_ln28_2_fu_560_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_600_p2 = ((tmp_s_fu_568_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_606_p2 = ((trunc_ln28_3_fu_578_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_386_p2 = ((tmp_1_fu_354_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln28_1_fu_416_p2 = (icmp_ln28_3_fu_410_p2 | icmp_ln28_2_fu_404_p2);

assign or_ln28_2_fu_594_p2 = (icmp_ln28_5_fu_588_p2 | icmp_ln28_4_fu_582_p2);

assign or_ln28_3_fu_612_p2 = (icmp_ln28_7_fu_606_p2 | icmp_ln28_6_fu_600_p2);

assign or_ln28_fu_398_p2 = (icmp_ln28_fu_386_p2 | icmp_ln28_1_fu_392_p2);

assign select_ln28_1_fu_630_p3 = ((and_ln28_3_fu_624_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_1_reg_207);

assign select_ln28_fu_434_p3 = ((and_ln28_1_fu_428_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_0_reg_148);

assign shl_ln26_1_fu_454_p2 = c_0_1_reg_171 << 2'd1;

assign shl_ln26_fu_269_p2 = c_0_0_reg_111 << 2'd1;

assign tmp_11_fu_287_p3 = {{c_0_0_reg_111}, {1'd0}};

assign tmp_12_fu_478_p3 = {{c_0_1_reg_171}, {1'd0}};

assign tmp_13_fu_326_p4 = {{{mpr_0_0_reg_136}, {add_ln26_fu_321_p2}}, {1'd0}};

assign tmp_14_fu_523_p4 = {{{xor_ln25_reg_718}, {add_ln26_1_fu_518_p2}}, {1'd0}};

assign tmp_1_fu_354_p4 = {{bitcast_ln28_fu_350_p1[30:23]}};

assign tmp_7_fu_372_p4 = {{bitcast_ln28_1_fu_368_p1[30:23]}};

assign tmp_9_fu_550_p4 = {{bitcast_ln28_2_fu_546_p1[30:23]}};

assign tmp_s_fu_568_p4 = {{bitcast_ln28_3_fu_564_p1[30:23]}};

assign trunc_ln28_1_fu_382_p1 = bitcast_ln28_1_fu_368_p1[22:0];

assign trunc_ln28_2_fu_560_p1 = bitcast_ln28_2_fu_546_p1[22:0];

assign trunc_ln28_3_fu_578_p1 = bitcast_ln28_3_fu_564_p1[22:0];

assign trunc_ln28_fu_364_p1 = bitcast_ln28_fu_350_p1[22:0];

assign xor_ln25_fu_472_p2 = (mpr_0_1_reg_196 ^ 2'd2);

assign zext_ln14_1_fu_253_p1 = f_0_reg_100;

assign zext_ln14_fu_249_p1 = f_0_reg_100;

assign zext_ln28_1_fu_345_p1 = add_ln28_fu_340_p2;

assign zext_ln28_2_fu_532_p1 = tmp_14_fu_523_p4;

assign zext_ln28_3_fu_541_p1 = add_ln28_1_fu_536_p2;

assign zext_ln28_fu_336_p1 = tmp_13_fu_326_p4;

assign zext_ln35_1_fu_304_p1 = add_ln35_fu_299_p2;

assign zext_ln35_2_fu_486_p1 = tmp_12_fu_478_p3;

assign zext_ln35_3_fu_501_p1 = add_ln35_2_fu_496_p2;

assign zext_ln35_fu_295_p1 = tmp_11_fu_287_p3;

always @ (posedge ap_clk) begin
    zext_ln14_reg_646[5:2] <= 4'b0000;
    zext_ln14_1_reg_652[3:2] <= 2'b00;
    shl_ln26_reg_666[0] <= 1'b0;
    shl_ln26_1_reg_705[0] <= 1'b0;
end

endmodule //max_pool_1
