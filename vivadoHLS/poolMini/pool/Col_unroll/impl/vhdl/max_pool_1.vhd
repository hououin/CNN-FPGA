-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.668000,HLS_SYN_LAT=113,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=176,HLS_SYN_LUT=645,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal f_fu_230_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_reg_604 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_236_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln13_reg_609 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln10_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_240_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_1_reg_615 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_250_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_623 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln25_fu_256_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_reg_628 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln13_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_pool_1_out_addr_reg_634 : STD_LOGIC_VECTOR (2 downto 0);
    signal max_pool_1_out_addr_1_reg_639 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln20_fu_313_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln20_reg_647 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln25_fu_319_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln25_reg_652 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_fu_330_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln23_reg_660 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln23_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_443_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln20_1_fu_457_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln20_1_reg_678 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln25_1_fu_463_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln25_1_reg_683 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_1_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_1_fu_474_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln23_1_reg_691 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln23_1_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_1_fu_593_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal f_0_reg_100 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_0_reg_112 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_0_0_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_0_reg_136 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_0_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_0_reg_159 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_0_1_reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_1_reg_183 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_1_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_1_reg_206 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_270_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_262_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln35_fu_283_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_cast_fu_289_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_fu_297_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_336_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_fu_345_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_fu_349_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln28_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_363_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_373_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_381_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_391_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_480_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_486_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_2_fu_495_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_1_fu_499_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln28_2_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_3_fu_527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_513_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_523_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_531_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_541_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => grp_fu_217_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_217_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    f_0_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_244_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_100 <= f_reg_604;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_100 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    max_0_0_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_0_0_reg_123 <= max_1_0_reg_147;
            elsif (((icmp_ln13_fu_244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                max_0_0_reg_123 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_0_1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_1_fu_468_p2 = ap_const_lv1_1))) then 
                max_0_1_reg_170 <= max_1_1_reg_194;
            elsif (((icmp_ln20_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_0_1_reg_170 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_1_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                max_1_0_reg_147 <= select_ln28_fu_443_p3;
            elsif (((icmp_ln20_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_1_0_reg_147 <= max_0_0_reg_123;
            end if; 
        end if;
    end process;

    max_1_1_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                max_1_1_reg_194 <= select_ln28_1_fu_593_p3;
            elsif (((icmp_ln20_1_fu_451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                max_1_1_reg_194 <= max_0_1_reg_170;
            end if; 
        end if;
    end process;

    mpc_0_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                mpc_0_0_reg_159 <= add_ln23_reg_660;
            elsif (((icmp_ln20_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpc_0_0_reg_159 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpc_0_1_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                mpc_0_1_reg_206 <= add_ln23_1_reg_691;
            elsif (((icmp_ln20_1_fu_451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                mpc_0_1_reg_206 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                mpr_0_0_reg_136 <= add_ln20_reg_647;
            elsif (((icmp_ln13_fu_244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                mpr_0_0_reg_136 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_1_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_1_fu_468_p2 = ap_const_lv1_1))) then 
                mpr_0_1_reg_183 <= add_ln20_1_reg_678;
            elsif (((icmp_ln20_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpr_0_1_reg_183 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_1_fu_451_p2 = ap_const_lv1_1))) then 
                r_0_reg_112 <= r_reg_623;
            elsif (((icmp_ln10_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_112 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln20_1_reg_678 <= add_ln20_1_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln20_reg_647 <= add_ln20_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln23_1_reg_691 <= add_ln23_1_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln23_reg_660 <= add_ln23_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_1_fu_451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln25_1_reg_683 <= add_ln25_1_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln25_reg_652 <= add_ln25_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_604 <= f_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                max_pool_1_out_addr_1_reg_639 <= zext_ln35_1_fu_302_p1(3 - 1 downto 0);
                max_pool_1_out_addr_reg_634 <= zext_ln35_fu_278_p1(3 - 1 downto 0);
                    shl_ln25_reg_628(1) <= shl_ln25_fu_256_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_reg_623 <= r_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_1_reg_615(1 downto 0) <= zext_ln13_1_fu_240_p1(1 downto 0);
                    zext_ln13_reg_609(1 downto 0) <= zext_ln13_fu_236_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_609(5 downto 2) <= "0000";
    zext_ln13_1_reg_615(4 downto 2) <= "000";
    shl_ln25_reg_628(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_224_p2, ap_CS_fsm_state3, icmp_ln13_fu_244_p2, ap_CS_fsm_state4, icmp_ln20_fu_307_p2, ap_CS_fsm_state5, icmp_ln23_fu_324_p2, ap_CS_fsm_state7, icmp_ln20_1_fu_451_p2, ap_CS_fsm_state8, icmp_ln23_1_fu_468_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_244_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln20_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln23_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_1_fu_451_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_1_fu_468_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln20_1_fu_457_p2 <= std_logic_vector(unsigned(mpr_0_1_reg_183) + unsigned(ap_const_lv2_1));
    add_ln20_fu_313_p2 <= std_logic_vector(unsigned(mpr_0_0_reg_136) + unsigned(ap_const_lv2_1));
    add_ln23_1_fu_474_p2 <= std_logic_vector(unsigned(mpc_0_1_reg_206) + unsigned(ap_const_lv2_1));
    add_ln23_fu_330_p2 <= std_logic_vector(unsigned(mpc_0_0_reg_159) + unsigned(ap_const_lv2_1));
    add_ln25_1_fu_463_p2 <= std_logic_vector(unsigned(mpr_0_1_reg_183) + unsigned(shl_ln25_reg_628));
    add_ln25_fu_319_p2 <= std_logic_vector(unsigned(mpr_0_0_reg_136) + unsigned(shl_ln25_reg_628));
    add_ln28_1_fu_499_p2 <= std_logic_vector(unsigned(zext_ln13_reg_609) + unsigned(zext_ln28_2_fu_495_p1));
    add_ln28_fu_349_p2 <= std_logic_vector(unsigned(zext_ln13_reg_609) + unsigned(zext_ln28_fu_345_p1));
    add_ln35_fu_297_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_289_p3) + unsigned(zext_ln13_1_reg_615));
    and_ln28_1_fu_437_p2 <= (grp_fu_217_p2 and and_ln28_fu_431_p2);
    and_ln28_2_fu_581_p2 <= (or_ln28_3_fu_575_p2 and or_ln28_2_fu_557_p2);
    and_ln28_3_fu_587_p2 <= (grp_fu_217_p2 and and_ln28_2_fu_581_p2);
    and_ln28_fu_431_p2 <= (or_ln28_fu_407_p2 and or_ln28_1_fu_425_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_224_p2)
    begin
        if (((icmp_ln10_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_224_p2)
    begin
        if (((icmp_ln10_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_377_p1 <= max_1_0_reg_147;
    bitcast_ln28_2_fu_509_p1 <= conv_1_out_q0;
    bitcast_ln28_3_fu_527_p1 <= max_1_1_reg_194;
    bitcast_ln28_fu_359_p1 <= conv_1_out_q0;

    conv_1_out_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, zext_ln28_1_fu_354_p1, zext_ln28_3_fu_504_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_address0 <= zext_ln28_3_fu_504_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_address0 <= zext_ln28_1_fu_354_p1(5 - 1 downto 0);
        else 
            conv_1_out_address0 <= "XXXXX";
        end if; 
    end process;


    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_230_p2 <= std_logic_vector(unsigned(f_0_reg_100) + unsigned(ap_const_lv2_1));

    grp_fu_217_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, max_1_0_reg_147, max_1_1_reg_194)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_217_p1 <= max_1_1_reg_194;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_217_p1 <= max_1_0_reg_147;
        else 
            grp_fu_217_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_224_p2 <= "1" when (f_0_reg_100 = ap_const_lv2_2) else "0";
    icmp_ln13_fu_244_p2 <= "1" when (r_0_reg_112 = ap_const_lv2_2) else "0";
    icmp_ln20_1_fu_451_p2 <= "1" when (mpr_0_1_reg_183 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_307_p2 <= "1" when (mpr_0_0_reg_136 = ap_const_lv2_2) else "0";
    icmp_ln23_1_fu_468_p2 <= "1" when (mpc_0_1_reg_206 = ap_const_lv2_2) else "0";
    icmp_ln23_fu_324_p2 <= "1" when (mpc_0_0_reg_159 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_401_p2 <= "1" when (trunc_ln28_fu_373_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_413_p2 <= "0" when (tmp_6_fu_381_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_419_p2 <= "1" when (trunc_ln28_1_fu_391_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_545_p2 <= "0" when (tmp_8_fu_513_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_551_p2 <= "1" when (trunc_ln28_2_fu_523_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_563_p2 <= "0" when (tmp_9_fu_531_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_569_p2 <= "1" when (trunc_ln28_3_fu_541_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_395_p2 <= "0" when (tmp_1_fu_363_p4 = ap_const_lv8_FF) else "1";

    max_pool_1_out_address0_assign_proc : process(max_pool_1_out_addr_reg_634, max_pool_1_out_addr_1_reg_639, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_address0 <= max_pool_1_out_addr_1_reg_639;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_1_out_address0 <= max_pool_1_out_addr_reg_634;
        else 
            max_pool_1_out_address0 <= "XXX";
        end if; 
    end process;


    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, max_0_0_reg_123, max_0_1_reg_170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_d0 <= max_0_1_reg_170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_1_out_d0 <= max_0_0_reg_123;
        else 
            max_pool_1_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln20_fu_307_p2, ap_CS_fsm_state7, icmp_ln20_1_fu_451_p2)
    begin
        if ((((icmp_ln20_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_1_fu_451_p2 = ap_const_lv1_1)))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln28_1_fu_425_p2 <= (icmp_ln28_3_fu_419_p2 or icmp_ln28_2_fu_413_p2);
    or_ln28_2_fu_557_p2 <= (icmp_ln28_5_fu_551_p2 or icmp_ln28_4_fu_545_p2);
    or_ln28_3_fu_575_p2 <= (icmp_ln28_7_fu_569_p2 or icmp_ln28_6_fu_563_p2);
    or_ln28_fu_407_p2 <= (icmp_ln28_fu_395_p2 or icmp_ln28_1_fu_401_p2);
    or_ln35_fu_283_p2 <= (tmp_10_fu_262_p3 or ap_const_lv4_2);
    r_fu_250_p2 <= std_logic_vector(unsigned(r_0_reg_112) + unsigned(ap_const_lv2_1));
    select_ln28_1_fu_593_p3 <= 
        conv_1_out_q0 when (and_ln28_3_fu_587_p2(0) = '1') else 
        max_1_1_reg_194;
    select_ln28_fu_443_p3 <= 
        conv_1_out_q0 when (and_ln28_1_fu_437_p2(0) = '1') else 
        max_1_0_reg_147;
    shl_ln25_fu_256_p2 <= std_logic_vector(shift_left(unsigned(r_0_reg_112),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_10_fu_262_p3 <= (r_0_reg_112 & ap_const_lv2_0);
    tmp_11_fu_270_p3 <= (r_0_reg_112 & f_0_reg_100);
    tmp_12_fu_336_p4 <= ((add_ln25_reg_652 & mpc_0_0_reg_159) & ap_const_lv1_0);
    tmp_13_fu_486_p4 <= ((add_ln25_1_reg_683 & xor_ln26_fu_480_p2) & ap_const_lv1_0);
    tmp_14_cast_fu_289_p3 <= (ap_const_lv1_0 & or_ln35_fu_283_p2);
    tmp_1_fu_363_p4 <= bitcast_ln28_fu_359_p1(30 downto 23);
    tmp_6_fu_381_p4 <= bitcast_ln28_1_fu_377_p1(30 downto 23);
    tmp_8_fu_513_p4 <= bitcast_ln28_2_fu_509_p1(30 downto 23);
    tmp_9_fu_531_p4 <= bitcast_ln28_3_fu_527_p1(30 downto 23);
    trunc_ln28_1_fu_391_p1 <= bitcast_ln28_1_fu_377_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_523_p1 <= bitcast_ln28_2_fu_509_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_541_p1 <= bitcast_ln28_3_fu_527_p1(23 - 1 downto 0);
    trunc_ln28_fu_373_p1 <= bitcast_ln28_fu_359_p1(23 - 1 downto 0);
    xor_ln26_fu_480_p2 <= (mpc_0_1_reg_206 xor ap_const_lv2_2);
    zext_ln13_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_100),5));
    zext_ln13_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_100),6));
    zext_ln28_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_349_p2),64));
    zext_ln28_2_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_486_p4),6));
    zext_ln28_3_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_499_p2),64));
    zext_ln28_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_336_p4),6));
    zext_ln35_1_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_297_p2),64));
    zext_ln35_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_270_p3),64));
end behav;
