// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.668000,HLS_SYN_LAT=113,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=176,HLS_SYN_LUT=645,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] conv_1_out_address0;
reg conv_1_out_ce0;
reg[2:0] max_pool_1_out_address0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;
reg[31:0] max_pool_1_out_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] f_fu_230_p2;
reg   [1:0] f_reg_604;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln13_fu_236_p1;
reg   [5:0] zext_ln13_reg_609;
wire   [0:0] icmp_ln10_fu_224_p2;
wire   [4:0] zext_ln13_1_fu_240_p1;
reg   [4:0] zext_ln13_1_reg_615;
wire   [1:0] r_fu_250_p2;
reg   [1:0] r_reg_623;
wire    ap_CS_fsm_state3;
wire   [1:0] shl_ln25_fu_256_p2;
reg   [1:0] shl_ln25_reg_628;
wire   [0:0] icmp_ln13_fu_244_p2;
reg   [2:0] max_pool_1_out_addr_reg_634;
reg   [2:0] max_pool_1_out_addr_1_reg_639;
wire   [1:0] add_ln20_fu_313_p2;
reg   [1:0] add_ln20_reg_647;
wire    ap_CS_fsm_state4;
wire   [1:0] add_ln25_fu_319_p2;
reg   [1:0] add_ln25_reg_652;
wire   [0:0] icmp_ln20_fu_307_p2;
wire   [1:0] add_ln23_fu_330_p2;
reg   [1:0] add_ln23_reg_660;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln23_fu_324_p2;
wire   [31:0] select_ln28_fu_443_p3;
wire    ap_CS_fsm_state6;
wire   [1:0] add_ln20_1_fu_457_p2;
reg   [1:0] add_ln20_1_reg_678;
wire    ap_CS_fsm_state7;
wire   [1:0] add_ln25_1_fu_463_p2;
reg   [1:0] add_ln25_1_reg_683;
wire   [0:0] icmp_ln20_1_fu_451_p2;
wire   [1:0] add_ln23_1_fu_474_p2;
reg   [1:0] add_ln23_1_reg_691;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln23_1_fu_468_p2;
wire   [31:0] select_ln28_1_fu_593_p3;
wire    ap_CS_fsm_state9;
reg   [1:0] f_0_reg_100;
reg   [1:0] r_0_reg_112;
reg   [31:0] max_0_0_reg_123;
reg   [1:0] mpr_0_0_reg_136;
reg   [31:0] max_1_0_reg_147;
reg   [1:0] mpc_0_0_reg_159;
reg   [31:0] max_0_1_reg_170;
reg   [1:0] mpr_0_1_reg_183;
reg   [31:0] max_1_1_reg_194;
reg   [1:0] mpc_0_1_reg_206;
wire   [63:0] zext_ln35_fu_278_p1;
wire   [63:0] zext_ln35_1_fu_302_p1;
wire   [63:0] zext_ln28_1_fu_354_p1;
wire   [63:0] zext_ln28_3_fu_504_p1;
reg   [31:0] grp_fu_217_p1;
wire   [3:0] tmp_11_fu_270_p3;
wire   [3:0] tmp_10_fu_262_p3;
wire   [3:0] or_ln35_fu_283_p2;
wire   [4:0] tmp_14_cast_fu_289_p3;
wire   [4:0] add_ln35_fu_297_p2;
wire   [4:0] tmp_12_fu_336_p4;
wire   [5:0] zext_ln28_fu_345_p1;
wire   [5:0] add_ln28_fu_349_p2;
wire   [31:0] bitcast_ln28_fu_359_p1;
wire   [31:0] bitcast_ln28_1_fu_377_p1;
wire   [7:0] tmp_1_fu_363_p4;
wire   [22:0] trunc_ln28_fu_373_p1;
wire   [0:0] icmp_ln28_1_fu_401_p2;
wire   [0:0] icmp_ln28_fu_395_p2;
wire   [7:0] tmp_6_fu_381_p4;
wire   [22:0] trunc_ln28_1_fu_391_p1;
wire   [0:0] icmp_ln28_3_fu_419_p2;
wire   [0:0] icmp_ln28_2_fu_413_p2;
wire   [0:0] or_ln28_fu_407_p2;
wire   [0:0] or_ln28_1_fu_425_p2;
wire   [0:0] and_ln28_fu_431_p2;
wire   [0:0] grp_fu_217_p2;
wire   [0:0] and_ln28_1_fu_437_p2;
wire   [1:0] xor_ln26_fu_480_p2;
wire   [4:0] tmp_13_fu_486_p4;
wire   [5:0] zext_ln28_2_fu_495_p1;
wire   [5:0] add_ln28_1_fu_499_p2;
wire   [31:0] bitcast_ln28_2_fu_509_p1;
wire   [31:0] bitcast_ln28_3_fu_527_p1;
wire   [7:0] tmp_8_fu_513_p4;
wire   [22:0] trunc_ln28_2_fu_523_p1;
wire   [0:0] icmp_ln28_5_fu_551_p2;
wire   [0:0] icmp_ln28_4_fu_545_p2;
wire   [7:0] tmp_9_fu_531_p4;
wire   [22:0] trunc_ln28_3_fu_541_p1;
wire   [0:0] icmp_ln28_7_fu_569_p2;
wire   [0:0] icmp_ln28_6_fu_563_p2;
wire   [0:0] or_ln28_2_fu_557_p2;
wire   [0:0] or_ln28_3_fu_575_p2;
wire   [0:0] and_ln28_2_fu_581_p2;
wire   [0:0] and_ln28_3_fu_587_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(grp_fu_217_p1),
    .opcode(5'd2),
    .dout(grp_fu_217_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_244_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_100 <= f_reg_604;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_100 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_0_0_reg_123 <= max_1_0_reg_147;
    end else if (((icmp_ln13_fu_244_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        max_0_0_reg_123 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln23_1_fu_468_p2 == 1'd1))) begin
        max_0_1_reg_170 <= max_1_1_reg_194;
    end else if (((icmp_ln20_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_1_reg_170 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_1_0_reg_147 <= select_ln28_fu_443_p3;
    end else if (((icmp_ln20_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_1_0_reg_147 <= max_0_0_reg_123;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        max_1_1_reg_194 <= select_ln28_1_fu_593_p3;
    end else if (((icmp_ln20_1_fu_451_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        max_1_1_reg_194 <= max_0_1_reg_170;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_0_0_reg_159 <= add_ln23_reg_660;
    end else if (((icmp_ln20_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpc_0_0_reg_159 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mpc_0_1_reg_206 <= add_ln23_1_reg_691;
    end else if (((icmp_ln20_1_fu_451_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        mpc_0_1_reg_206 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mpr_0_0_reg_136 <= add_ln20_reg_647;
    end else if (((icmp_ln13_fu_244_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mpr_0_0_reg_136 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln23_1_fu_468_p2 == 1'd1))) begin
        mpr_0_1_reg_183 <= add_ln20_1_reg_678;
    end else if (((icmp_ln20_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_1_reg_183 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln20_1_fu_451_p2 == 1'd1))) begin
        r_0_reg_112 <= r_reg_623;
    end else if (((icmp_ln10_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_112 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln20_1_reg_678 <= add_ln20_1_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln20_reg_647 <= add_ln20_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln23_1_reg_691 <= add_ln23_1_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln23_reg_660 <= add_ln23_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_1_fu_451_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln25_1_reg_683 <= add_ln25_1_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln25_reg_652 <= add_ln25_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_604 <= f_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_244_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        max_pool_1_out_addr_1_reg_639 <= zext_ln35_1_fu_302_p1;
        max_pool_1_out_addr_reg_634 <= zext_ln35_fu_278_p1;
        shl_ln25_reg_628[1] <= shl_ln25_fu_256_p2[1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_623 <= r_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_615[1 : 0] <= zext_ln13_1_fu_240_p1[1 : 0];
        zext_ln13_reg_609[1 : 0] <= zext_ln13_fu_236_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_1_out_address0 = zext_ln28_3_fu_504_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_address0 = zext_ln28_1_fu_354_p1;
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_217_p1 = max_1_1_reg_194;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_217_p1 = max_1_0_reg_147;
    end else begin
        grp_fu_217_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_1_out_address0 = max_pool_1_out_addr_1_reg_639;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_address0 = max_pool_1_out_addr_reg_634;
    end else begin
        max_pool_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_1_out_d0 = max_0_1_reg_170;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_d0 = max_0_0_reg_123;
    end else begin
        max_pool_1_out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln20_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln20_1_fu_451_p2 == 1'd1)))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_244_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln20_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln23_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln20_1_fu_451_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln23_1_fu_468_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_1_fu_457_p2 = (mpr_0_1_reg_183 + 2'd1);

assign add_ln20_fu_313_p2 = (mpr_0_0_reg_136 + 2'd1);

assign add_ln23_1_fu_474_p2 = (mpc_0_1_reg_206 + 2'd1);

assign add_ln23_fu_330_p2 = (mpc_0_0_reg_159 + 2'd1);

assign add_ln25_1_fu_463_p2 = (mpr_0_1_reg_183 + shl_ln25_reg_628);

assign add_ln25_fu_319_p2 = (mpr_0_0_reg_136 + shl_ln25_reg_628);

assign add_ln28_1_fu_499_p2 = (zext_ln13_reg_609 + zext_ln28_2_fu_495_p1);

assign add_ln28_fu_349_p2 = (zext_ln13_reg_609 + zext_ln28_fu_345_p1);

assign add_ln35_fu_297_p2 = (tmp_14_cast_fu_289_p3 + zext_ln13_1_reg_615);

assign and_ln28_1_fu_437_p2 = (grp_fu_217_p2 & and_ln28_fu_431_p2);

assign and_ln28_2_fu_581_p2 = (or_ln28_3_fu_575_p2 & or_ln28_2_fu_557_p2);

assign and_ln28_3_fu_587_p2 = (grp_fu_217_p2 & and_ln28_2_fu_581_p2);

assign and_ln28_fu_431_p2 = (or_ln28_fu_407_p2 & or_ln28_1_fu_425_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln28_1_fu_377_p1 = max_1_0_reg_147;

assign bitcast_ln28_2_fu_509_p1 = conv_1_out_q0;

assign bitcast_ln28_3_fu_527_p1 = max_1_1_reg_194;

assign bitcast_ln28_fu_359_p1 = conv_1_out_q0;

assign f_fu_230_p2 = (f_0_reg_100 + 2'd1);

assign icmp_ln10_fu_224_p2 = ((f_0_reg_100 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_244_p2 = ((r_0_reg_112 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_451_p2 = ((mpr_0_1_reg_183 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_307_p2 = ((mpr_0_0_reg_136 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_468_p2 = ((mpc_0_1_reg_206 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_324_p2 = ((mpc_0_0_reg_159 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_401_p2 = ((trunc_ln28_fu_373_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_413_p2 = ((tmp_6_fu_381_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_419_p2 = ((trunc_ln28_1_fu_391_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_545_p2 = ((tmp_8_fu_513_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_551_p2 = ((trunc_ln28_2_fu_523_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_563_p2 = ((tmp_9_fu_531_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_569_p2 = ((trunc_ln28_3_fu_541_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_395_p2 = ((tmp_1_fu_363_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln28_1_fu_425_p2 = (icmp_ln28_3_fu_419_p2 | icmp_ln28_2_fu_413_p2);

assign or_ln28_2_fu_557_p2 = (icmp_ln28_5_fu_551_p2 | icmp_ln28_4_fu_545_p2);

assign or_ln28_3_fu_575_p2 = (icmp_ln28_7_fu_569_p2 | icmp_ln28_6_fu_563_p2);

assign or_ln28_fu_407_p2 = (icmp_ln28_fu_395_p2 | icmp_ln28_1_fu_401_p2);

assign or_ln35_fu_283_p2 = (tmp_10_fu_262_p3 | 4'd2);

assign r_fu_250_p2 = (r_0_reg_112 + 2'd1);

assign select_ln28_1_fu_593_p3 = ((and_ln28_3_fu_587_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_1_reg_194);

assign select_ln28_fu_443_p3 = ((and_ln28_1_fu_437_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_0_reg_147);

assign shl_ln25_fu_256_p2 = r_0_reg_112 << 2'd1;

assign tmp_10_fu_262_p3 = {{r_0_reg_112}, {2'd0}};

assign tmp_11_fu_270_p3 = {{r_0_reg_112}, {f_0_reg_100}};

assign tmp_12_fu_336_p4 = {{{add_ln25_reg_652}, {mpc_0_0_reg_159}}, {1'd0}};

assign tmp_13_fu_486_p4 = {{{add_ln25_1_reg_683}, {xor_ln26_fu_480_p2}}, {1'd0}};

assign tmp_14_cast_fu_289_p3 = {{1'd0}, {or_ln35_fu_283_p2}};

assign tmp_1_fu_363_p4 = {{bitcast_ln28_fu_359_p1[30:23]}};

assign tmp_6_fu_381_p4 = {{bitcast_ln28_1_fu_377_p1[30:23]}};

assign tmp_8_fu_513_p4 = {{bitcast_ln28_2_fu_509_p1[30:23]}};

assign tmp_9_fu_531_p4 = {{bitcast_ln28_3_fu_527_p1[30:23]}};

assign trunc_ln28_1_fu_391_p1 = bitcast_ln28_1_fu_377_p1[22:0];

assign trunc_ln28_2_fu_523_p1 = bitcast_ln28_2_fu_509_p1[22:0];

assign trunc_ln28_3_fu_541_p1 = bitcast_ln28_3_fu_527_p1[22:0];

assign trunc_ln28_fu_373_p1 = bitcast_ln28_fu_359_p1[22:0];

assign xor_ln26_fu_480_p2 = (mpc_0_1_reg_206 ^ 2'd2);

assign zext_ln13_1_fu_240_p1 = f_0_reg_100;

assign zext_ln13_fu_236_p1 = f_0_reg_100;

assign zext_ln28_1_fu_354_p1 = add_ln28_fu_349_p2;

assign zext_ln28_2_fu_495_p1 = tmp_13_fu_486_p4;

assign zext_ln28_3_fu_504_p1 = add_ln28_1_fu_499_p2;

assign zext_ln28_fu_345_p1 = tmp_12_fu_336_p4;

assign zext_ln35_1_fu_302_p1 = add_ln35_fu_297_p2;

assign zext_ln35_fu_278_p1 = tmp_11_fu_270_p3;

always @ (posedge ap_clk) begin
    zext_ln13_reg_609[5:2] <= 4'b0000;
    zext_ln13_1_reg_615[4:2] <= 3'b000;
    shl_ln25_reg_628[0] <= 1'b0;
end

endmodule //max_pool_1
