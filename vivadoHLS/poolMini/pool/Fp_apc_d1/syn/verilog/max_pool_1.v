// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.204000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=536,HLS_SYN_LUT=2387,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_0_address1,
        conv_1_out_0_ce1,
        conv_1_out_0_q1,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_1_address1,
        conv_1_out_1_ce1,
        conv_1_out_1_q1,
        conv_1_out_2_address0,
        conv_1_out_2_ce0,
        conv_1_out_2_q0,
        conv_1_out_2_address1,
        conv_1_out_2_ce1,
        conv_1_out_2_q1,
        conv_1_out_3_address0,
        conv_1_out_3_ce0,
        conv_1_out_3_q0,
        conv_1_out_3_address1,
        conv_1_out_3_ce1,
        conv_1_out_3_q1,
        max_pool_1_out_0_address0,
        max_pool_1_out_0_ce0,
        max_pool_1_out_0_we0,
        max_pool_1_out_0_d0,
        max_pool_1_out_0_address1,
        max_pool_1_out_0_ce1,
        max_pool_1_out_0_we1,
        max_pool_1_out_0_d1,
        max_pool_1_out_1_address0,
        max_pool_1_out_1_ce0,
        max_pool_1_out_1_we0,
        max_pool_1_out_1_d0,
        max_pool_1_out_1_address1,
        max_pool_1_out_1_ce1,
        max_pool_1_out_1_we1,
        max_pool_1_out_1_d1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [2:0] conv_1_out_0_address1;
output   conv_1_out_0_ce1;
input  [31:0] conv_1_out_0_q1;
output  [2:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [2:0] conv_1_out_1_address1;
output   conv_1_out_1_ce1;
input  [31:0] conv_1_out_1_q1;
output  [2:0] conv_1_out_2_address0;
output   conv_1_out_2_ce0;
input  [31:0] conv_1_out_2_q0;
output  [2:0] conv_1_out_2_address1;
output   conv_1_out_2_ce1;
input  [31:0] conv_1_out_2_q1;
output  [2:0] conv_1_out_3_address0;
output   conv_1_out_3_ce0;
input  [31:0] conv_1_out_3_q0;
output  [2:0] conv_1_out_3_address1;
output   conv_1_out_3_ce1;
input  [31:0] conv_1_out_3_q1;
output  [1:0] max_pool_1_out_0_address0;
output   max_pool_1_out_0_ce0;
output   max_pool_1_out_0_we0;
output  [31:0] max_pool_1_out_0_d0;
output  [1:0] max_pool_1_out_0_address1;
output   max_pool_1_out_0_ce1;
output   max_pool_1_out_0_we1;
output  [31:0] max_pool_1_out_0_d1;
output  [1:0] max_pool_1_out_1_address0;
output   max_pool_1_out_1_ce0;
output   max_pool_1_out_1_we0;
output  [31:0] max_pool_1_out_1_d0;
output  [1:0] max_pool_1_out_1_address1;
output   max_pool_1_out_1_ce1;
output   max_pool_1_out_1_we1;
output  [31:0] max_pool_1_out_1_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] conv_1_out_0_address0;
reg conv_1_out_0_ce0;
reg[2:0] conv_1_out_0_address1;
reg conv_1_out_0_ce1;
reg[2:0] conv_1_out_1_address0;
reg conv_1_out_1_ce0;
reg[2:0] conv_1_out_1_address1;
reg conv_1_out_1_ce1;
reg[2:0] conv_1_out_2_address0;
reg conv_1_out_2_ce0;
reg[2:0] conv_1_out_2_address1;
reg conv_1_out_2_ce1;
reg[2:0] conv_1_out_3_address0;
reg conv_1_out_3_ce0;
reg[2:0] conv_1_out_3_address1;
reg conv_1_out_3_ce1;
reg max_pool_1_out_0_ce0;
reg max_pool_1_out_0_we0;
reg max_pool_1_out_0_ce1;
reg max_pool_1_out_0_we1;
reg max_pool_1_out_1_ce0;
reg max_pool_1_out_1_we0;
reg max_pool_1_out_1_ce1;
reg max_pool_1_out_1_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] f_0_reg_278;
wire   [0:0] icmp_ln10_fu_332_p2;
reg   [0:0] icmp_ln10_reg_1668;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_1668_pp0_iter1_reg;
wire   [1:0] f_fu_338_p2;
reg   [1:0] f_reg_1672;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln28_fu_344_p1;
reg   [63:0] zext_ln28_reg_1677;
reg   [63:0] zext_ln28_reg_1677_pp0_iter1_reg;
wire  signed [1:0] xor_ln28_fu_352_p2;
reg  signed [1:0] xor_ln28_reg_1688;
wire   [63:0] zext_ln28_1_fu_370_p1;
reg   [63:0] zext_ln28_1_reg_1729;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] select_ln28_fu_430_p3;
reg   [31:0] select_ln28_reg_1775;
reg   [31:0] conv_1_out_1_load_reg_1782;
wire   [31:0] select_ln28_4_fu_480_p3;
reg   [31:0] select_ln28_4_reg_1789;
reg   [31:0] conv_1_out_1_load_2_reg_1796;
wire   [31:0] select_ln28_8_fu_530_p3;
reg   [31:0] select_ln28_8_reg_1803;
reg   [31:0] conv_1_out_3_load_reg_1810;
wire   [31:0] select_ln28_12_fu_580_p3;
reg   [31:0] select_ln28_12_reg_1817;
reg   [31:0] conv_1_out_3_load_2_reg_1824;
wire   [31:0] select_ln28_1_fu_671_p3;
reg   [31:0] select_ln28_1_reg_1831;
wire   [0:0] grp_fu_295_p2;
reg   [0:0] tmp_8_reg_1837;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] conv_1_out_1_load_1_reg_1842;
wire   [31:0] select_ln28_5_fu_762_p3;
reg   [31:0] select_ln28_5_reg_1849;
wire   [0:0] grp_fu_307_p2;
reg   [0:0] tmp_18_reg_1855;
reg   [31:0] conv_1_out_1_load_3_reg_1860;
wire   [31:0] select_ln28_9_fu_853_p3;
reg   [31:0] select_ln28_9_reg_1867;
wire   [0:0] grp_fu_319_p2;
reg   [0:0] tmp_29_reg_1873;
reg   [31:0] conv_1_out_3_load_1_reg_1878;
wire   [31:0] select_ln28_13_fu_944_p3;
reg   [31:0] select_ln28_13_reg_1885;
wire   [0:0] grp_fu_328_p2;
reg   [0:0] tmp_40_reg_1891;
reg   [31:0] conv_1_out_3_load_3_reg_1896;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
reg   [1:0] ap_phi_mux_f_0_phi_fu_282_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_44_fu_358_p3;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln28_2_fu_380_p1;
reg   [31:0] grp_fu_289_p1;
reg   [31:0] grp_fu_295_p0;
reg   [31:0] grp_fu_295_p1;
reg   [31:0] grp_fu_301_p0;
reg   [31:0] grp_fu_301_p1;
reg   [31:0] grp_fu_307_p0;
reg   [31:0] grp_fu_307_p1;
reg   [31:0] grp_fu_314_p0;
reg   [31:0] grp_fu_314_p1;
wire   [31:0] select_ln28_2_fu_1033_p3;
reg   [31:0] grp_fu_319_p0;
reg   [31:0] grp_fu_319_p1;
wire   [31:0] select_ln28_6_fu_1212_p3;
reg   [31:0] grp_fu_323_p0;
reg   [31:0] grp_fu_323_p1;
wire   [31:0] select_ln28_10_fu_1391_p3;
reg   [31:0] grp_fu_328_p0;
reg   [31:0] grp_fu_328_p1;
wire   [31:0] select_ln28_14_fu_1570_p3;
wire  signed [2:0] sext_ln28_fu_377_p1;
wire   [31:0] bitcast_ln28_fu_388_p1;
wire   [7:0] tmp_1_fu_392_p4;
wire   [22:0] trunc_ln28_fu_402_p1;
wire   [0:0] icmp_ln28_1_fu_412_p2;
wire   [0:0] icmp_ln28_fu_406_p2;
wire   [0:0] or_ln28_fu_418_p2;
wire   [0:0] grp_fu_289_p2;
wire   [0:0] and_ln28_fu_424_p2;
wire   [31:0] bitcast_ln28_7_fu_438_p1;
wire   [7:0] tmp_11_fu_442_p4;
wire   [22:0] trunc_ln28_7_fu_452_p1;
wire   [0:0] icmp_ln28_15_fu_462_p2;
wire   [0:0] icmp_ln28_14_fu_456_p2;
wire   [0:0] or_ln28_7_fu_468_p2;
wire   [0:0] and_ln28_7_fu_474_p2;
wire   [31:0] bitcast_ln28_14_fu_488_p1;
wire   [7:0] tmp_22_fu_492_p4;
wire   [22:0] trunc_ln28_14_fu_502_p1;
wire   [0:0] icmp_ln28_29_fu_512_p2;
wire   [0:0] icmp_ln28_28_fu_506_p2;
wire   [0:0] or_ln28_14_fu_518_p2;
wire   [0:0] grp_fu_301_p2;
wire   [0:0] and_ln28_14_fu_524_p2;
wire   [31:0] bitcast_ln28_21_fu_538_p1;
wire   [7:0] tmp_33_fu_542_p4;
wire   [22:0] trunc_ln28_21_fu_552_p1;
wire   [0:0] icmp_ln28_43_fu_562_p2;
wire   [0:0] icmp_ln28_42_fu_556_p2;
wire   [0:0] or_ln28_21_fu_568_p2;
wire   [0:0] and_ln28_21_fu_574_p2;
wire   [31:0] bitcast_ln28_1_fu_588_p1;
wire   [31:0] bitcast_ln28_2_fu_606_p1;
wire   [7:0] tmp_3_fu_592_p4;
wire   [22:0] trunc_ln28_1_fu_602_p1;
wire   [0:0] icmp_ln28_3_fu_629_p2;
wire   [0:0] icmp_ln28_2_fu_623_p2;
wire   [7:0] tmp_4_fu_609_p4;
wire   [22:0] trunc_ln28_2_fu_619_p1;
wire   [0:0] icmp_ln28_5_fu_647_p2;
wire   [0:0] icmp_ln28_4_fu_641_p2;
wire   [0:0] or_ln28_1_fu_635_p2;
wire   [0:0] or_ln28_2_fu_653_p2;
wire   [0:0] and_ln28_1_fu_659_p2;
wire   [0:0] and_ln28_2_fu_665_p2;
wire   [31:0] bitcast_ln28_8_fu_679_p1;
wire   [31:0] bitcast_ln28_9_fu_697_p1;
wire   [7:0] tmp_13_fu_683_p4;
wire   [22:0] trunc_ln28_8_fu_693_p1;
wire   [0:0] icmp_ln28_17_fu_720_p2;
wire   [0:0] icmp_ln28_16_fu_714_p2;
wire   [7:0] tmp_14_fu_700_p4;
wire   [22:0] trunc_ln28_9_fu_710_p1;
wire   [0:0] icmp_ln28_19_fu_738_p2;
wire   [0:0] icmp_ln28_18_fu_732_p2;
wire   [0:0] or_ln28_8_fu_726_p2;
wire   [0:0] or_ln28_9_fu_744_p2;
wire   [0:0] and_ln28_8_fu_750_p2;
wire   [0:0] and_ln28_9_fu_756_p2;
wire   [31:0] bitcast_ln28_15_fu_770_p1;
wire   [31:0] bitcast_ln28_16_fu_788_p1;
wire   [7:0] tmp_24_fu_774_p4;
wire   [22:0] trunc_ln28_15_fu_784_p1;
wire   [0:0] icmp_ln28_31_fu_811_p2;
wire   [0:0] icmp_ln28_30_fu_805_p2;
wire   [7:0] tmp_25_fu_791_p4;
wire   [22:0] trunc_ln28_16_fu_801_p1;
wire   [0:0] icmp_ln28_33_fu_829_p2;
wire   [0:0] icmp_ln28_32_fu_823_p2;
wire   [0:0] or_ln28_15_fu_817_p2;
wire   [0:0] or_ln28_16_fu_835_p2;
wire   [0:0] and_ln28_15_fu_841_p2;
wire   [0:0] grp_fu_314_p2;
wire   [0:0] and_ln28_16_fu_847_p2;
wire   [31:0] bitcast_ln28_22_fu_861_p1;
wire   [31:0] bitcast_ln28_23_fu_879_p1;
wire   [7:0] tmp_35_fu_865_p4;
wire   [22:0] trunc_ln28_22_fu_875_p1;
wire   [0:0] icmp_ln28_45_fu_902_p2;
wire   [0:0] icmp_ln28_44_fu_896_p2;
wire   [7:0] tmp_36_fu_882_p4;
wire   [22:0] trunc_ln28_23_fu_892_p1;
wire   [0:0] icmp_ln28_47_fu_920_p2;
wire   [0:0] icmp_ln28_46_fu_914_p2;
wire   [0:0] or_ln28_22_fu_908_p2;
wire   [0:0] or_ln28_23_fu_926_p2;
wire   [0:0] and_ln28_22_fu_932_p2;
wire   [0:0] grp_fu_323_p2;
wire   [0:0] and_ln28_23_fu_938_p2;
wire   [31:0] bitcast_ln28_3_fu_952_p1;
wire   [31:0] bitcast_ln28_4_fu_969_p1;
wire   [7:0] tmp_6_fu_955_p4;
wire   [22:0] trunc_ln28_3_fu_965_p1;
wire   [0:0] icmp_ln28_7_fu_992_p2;
wire   [0:0] icmp_ln28_6_fu_986_p2;
wire   [7:0] tmp_7_fu_972_p4;
wire   [22:0] trunc_ln28_4_fu_982_p1;
wire   [0:0] icmp_ln28_9_fu_1010_p2;
wire   [0:0] icmp_ln28_8_fu_1004_p2;
wire   [0:0] or_ln28_3_fu_998_p2;
wire   [0:0] or_ln28_4_fu_1016_p2;
wire   [0:0] and_ln28_3_fu_1022_p2;
wire   [0:0] and_ln28_4_fu_1028_p2;
wire   [31:0] bitcast_ln28_5_fu_1040_p1;
wire   [31:0] bitcast_ln28_6_fu_1057_p1;
wire   [7:0] tmp_9_fu_1043_p4;
wire   [22:0] trunc_ln28_5_fu_1053_p1;
wire   [0:0] icmp_ln28_11_fu_1081_p2;
wire   [0:0] icmp_ln28_10_fu_1075_p2;
wire   [7:0] tmp_s_fu_1061_p4;
wire   [22:0] trunc_ln28_6_fu_1071_p1;
wire   [0:0] icmp_ln28_13_fu_1099_p2;
wire   [0:0] icmp_ln28_12_fu_1093_p2;
wire   [0:0] or_ln28_5_fu_1087_p2;
wire   [0:0] or_ln28_6_fu_1105_p2;
wire   [0:0] and_ln28_5_fu_1111_p2;
wire   [0:0] and_ln28_6_fu_1117_p2;
wire   [31:0] bitcast_ln28_10_fu_1131_p1;
wire   [31:0] bitcast_ln28_11_fu_1148_p1;
wire   [7:0] tmp_16_fu_1134_p4;
wire   [22:0] trunc_ln28_10_fu_1144_p1;
wire   [0:0] icmp_ln28_21_fu_1171_p2;
wire   [0:0] icmp_ln28_20_fu_1165_p2;
wire   [7:0] tmp_17_fu_1151_p4;
wire   [22:0] trunc_ln28_11_fu_1161_p1;
wire   [0:0] icmp_ln28_23_fu_1189_p2;
wire   [0:0] icmp_ln28_22_fu_1183_p2;
wire   [0:0] or_ln28_10_fu_1177_p2;
wire   [0:0] or_ln28_11_fu_1195_p2;
wire   [0:0] and_ln28_10_fu_1201_p2;
wire   [0:0] and_ln28_11_fu_1207_p2;
wire   [31:0] bitcast_ln28_12_fu_1219_p1;
wire   [31:0] bitcast_ln28_13_fu_1236_p1;
wire   [7:0] tmp_19_fu_1222_p4;
wire   [22:0] trunc_ln28_12_fu_1232_p1;
wire   [0:0] icmp_ln28_25_fu_1260_p2;
wire   [0:0] icmp_ln28_24_fu_1254_p2;
wire   [7:0] tmp_20_fu_1240_p4;
wire   [22:0] trunc_ln28_13_fu_1250_p1;
wire   [0:0] icmp_ln28_27_fu_1278_p2;
wire   [0:0] icmp_ln28_26_fu_1272_p2;
wire   [0:0] or_ln28_12_fu_1266_p2;
wire   [0:0] or_ln28_13_fu_1284_p2;
wire   [0:0] and_ln28_12_fu_1290_p2;
wire   [0:0] and_ln28_13_fu_1296_p2;
wire   [31:0] bitcast_ln28_17_fu_1310_p1;
wire   [31:0] bitcast_ln28_18_fu_1327_p1;
wire   [7:0] tmp_27_fu_1313_p4;
wire   [22:0] trunc_ln28_17_fu_1323_p1;
wire   [0:0] icmp_ln28_35_fu_1350_p2;
wire   [0:0] icmp_ln28_34_fu_1344_p2;
wire   [7:0] tmp_28_fu_1330_p4;
wire   [22:0] trunc_ln28_18_fu_1340_p1;
wire   [0:0] icmp_ln28_37_fu_1368_p2;
wire   [0:0] icmp_ln28_36_fu_1362_p2;
wire   [0:0] or_ln28_17_fu_1356_p2;
wire   [0:0] or_ln28_18_fu_1374_p2;
wire   [0:0] and_ln28_17_fu_1380_p2;
wire   [0:0] and_ln28_18_fu_1386_p2;
wire   [31:0] bitcast_ln28_19_fu_1398_p1;
wire   [31:0] bitcast_ln28_20_fu_1415_p1;
wire   [7:0] tmp_30_fu_1401_p4;
wire   [22:0] trunc_ln28_19_fu_1411_p1;
wire   [0:0] icmp_ln28_39_fu_1439_p2;
wire   [0:0] icmp_ln28_38_fu_1433_p2;
wire   [7:0] tmp_31_fu_1419_p4;
wire   [22:0] trunc_ln28_20_fu_1429_p1;
wire   [0:0] icmp_ln28_41_fu_1457_p2;
wire   [0:0] icmp_ln28_40_fu_1451_p2;
wire   [0:0] or_ln28_19_fu_1445_p2;
wire   [0:0] or_ln28_20_fu_1463_p2;
wire   [0:0] and_ln28_19_fu_1469_p2;
wire   [0:0] and_ln28_20_fu_1475_p2;
wire   [31:0] bitcast_ln28_24_fu_1489_p1;
wire   [31:0] bitcast_ln28_25_fu_1506_p1;
wire   [7:0] tmp_38_fu_1492_p4;
wire   [22:0] trunc_ln28_24_fu_1502_p1;
wire   [0:0] icmp_ln28_49_fu_1529_p2;
wire   [0:0] icmp_ln28_48_fu_1523_p2;
wire   [7:0] tmp_39_fu_1509_p4;
wire   [22:0] trunc_ln28_25_fu_1519_p1;
wire   [0:0] icmp_ln28_51_fu_1547_p2;
wire   [0:0] icmp_ln28_50_fu_1541_p2;
wire   [0:0] or_ln28_24_fu_1535_p2;
wire   [0:0] or_ln28_25_fu_1553_p2;
wire   [0:0] and_ln28_24_fu_1559_p2;
wire   [0:0] and_ln28_25_fu_1565_p2;
wire   [31:0] bitcast_ln28_26_fu_1577_p1;
wire   [31:0] bitcast_ln28_27_fu_1594_p1;
wire   [7:0] tmp_41_fu_1580_p4;
wire   [22:0] trunc_ln28_26_fu_1590_p1;
wire   [0:0] icmp_ln28_53_fu_1618_p2;
wire   [0:0] icmp_ln28_52_fu_1612_p2;
wire   [7:0] tmp_42_fu_1598_p4;
wire   [22:0] trunc_ln28_27_fu_1608_p1;
wire   [0:0] icmp_ln28_55_fu_1636_p2;
wire   [0:0] icmp_ln28_54_fu_1630_p2;
wire   [0:0] or_ln28_26_fu_1624_p2;
wire   [0:0] or_ln28_27_fu_1642_p2;
wire   [0:0] and_ln28_26_fu_1648_p2;
wire   [0:0] and_ln28_27_fu_1654_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_0_q0),
    .din1(grp_fu_289_p1),
    .opcode(5'd2),
    .dout(grp_fu_289_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(grp_fu_295_p0),
    .din1(grp_fu_295_p1),
    .opcode(5'd2),
    .dout(grp_fu_295_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U3(
    .din0(grp_fu_301_p0),
    .din1(grp_fu_301_p1),
    .opcode(5'd2),
    .dout(grp_fu_301_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U4(
    .din0(grp_fu_307_p0),
    .din1(grp_fu_307_p1),
    .opcode(5'd2),
    .dout(grp_fu_307_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U5(
    .din0(grp_fu_314_p0),
    .din1(grp_fu_314_p1),
    .opcode(5'd2),
    .dout(grp_fu_314_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U6(
    .din0(grp_fu_319_p0),
    .din1(grp_fu_319_p1),
    .opcode(5'd2),
    .dout(grp_fu_319_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U7(
    .din0(grp_fu_323_p0),
    .din1(grp_fu_323_p1),
    .opcode(5'd2),
    .dout(grp_fu_323_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U8(
    .din0(grp_fu_328_p0),
    .din1(grp_fu_328_p1),
    .opcode(5'd2),
    .dout(grp_fu_328_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1668 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_278 <= f_reg_1672;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_278 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1668 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_1_load_1_reg_1842 <= conv_1_out_1_q0;
        conv_1_out_1_load_3_reg_1860 <= conv_1_out_1_q1;
        conv_1_out_3_load_1_reg_1878 <= conv_1_out_3_q0;
        conv_1_out_3_load_3_reg_1896 <= conv_1_out_3_q1;
        tmp_18_reg_1855 <= grp_fu_307_p2;
        tmp_29_reg_1873 <= grp_fu_319_p2;
        tmp_40_reg_1891 <= grp_fu_328_p2;
        tmp_8_reg_1837 <= grp_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1668 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_1_out_1_load_2_reg_1796 <= conv_1_out_1_q1;
        conv_1_out_1_load_reg_1782 <= conv_1_out_1_q0;
        conv_1_out_3_load_2_reg_1824 <= conv_1_out_3_q1;
        conv_1_out_3_load_reg_1810 <= conv_1_out_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_reg_1672 <= f_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_1668 <= icmp_ln10_fu_332_p2;
        icmp_ln10_reg_1668_pp0_iter1_reg <= icmp_ln10_reg_1668;
        zext_ln28_reg_1677_pp0_iter1_reg[1 : 0] <= zext_ln28_reg_1677[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1668 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln28_12_reg_1817 <= select_ln28_12_fu_580_p3;
        select_ln28_4_reg_1789 <= select_ln28_4_fu_480_p3;
        select_ln28_8_reg_1803 <= select_ln28_8_fu_530_p3;
        select_ln28_reg_1775 <= select_ln28_fu_430_p3;
        zext_ln28_1_reg_1729[1 : 0] <= zext_ln28_1_fu_370_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1668 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln28_13_reg_1885 <= select_ln28_13_fu_944_p3;
        select_ln28_1_reg_1831 <= select_ln28_1_fu_671_p3;
        select_ln28_5_reg_1849 <= select_ln28_5_fu_762_p3;
        select_ln28_9_reg_1867 <= select_ln28_9_fu_853_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xor_ln28_reg_1688 <= xor_ln28_fu_352_p2;
        zext_ln28_reg_1677[1 : 0] <= zext_ln28_fu_344_p1[1 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_332_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1668 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_f_0_phi_fu_282_p4 = f_reg_1672;
    end else begin
        ap_phi_mux_f_0_phi_fu_282_p4 = f_0_reg_278;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_0_address0 = zext_ln28_1_fu_370_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_out_0_address0 = zext_ln28_fu_344_p1;
        end else begin
            conv_1_out_0_address0 = 'bx;
        end
    end else begin
        conv_1_out_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_0_address1 = zext_ln28_2_fu_380_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_out_0_address1 = tmp_44_fu_358_p3;
        end else begin
            conv_1_out_0_address1 = 'bx;
        end
    end else begin
        conv_1_out_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_1_out_0_ce1 = 1'b1;
    end else begin
        conv_1_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_1_address0 = zext_ln28_1_fu_370_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_out_1_address0 = zext_ln28_fu_344_p1;
        end else begin
            conv_1_out_1_address0 = 'bx;
        end
    end else begin
        conv_1_out_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_1_address1 = zext_ln28_2_fu_380_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_out_1_address1 = tmp_44_fu_358_p3;
        end else begin
            conv_1_out_1_address1 = 'bx;
        end
    end else begin
        conv_1_out_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_1_out_1_ce1 = 1'b1;
    end else begin
        conv_1_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_2_address0 = zext_ln28_1_fu_370_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_out_2_address0 = zext_ln28_fu_344_p1;
        end else begin
            conv_1_out_2_address0 = 'bx;
        end
    end else begin
        conv_1_out_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_2_address1 = zext_ln28_2_fu_380_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_out_2_address1 = tmp_44_fu_358_p3;
        end else begin
            conv_1_out_2_address1 = 'bx;
        end
    end else begin
        conv_1_out_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_1_out_2_ce0 = 1'b1;
    end else begin
        conv_1_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_1_out_2_ce1 = 1'b1;
    end else begin
        conv_1_out_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_3_address0 = zext_ln28_1_fu_370_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_out_3_address0 = zext_ln28_fu_344_p1;
        end else begin
            conv_1_out_3_address0 = 'bx;
        end
    end else begin
        conv_1_out_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_3_address1 = zext_ln28_2_fu_380_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_out_3_address1 = tmp_44_fu_358_p3;
        end else begin
            conv_1_out_3_address1 = 'bx;
        end
    end else begin
        conv_1_out_3_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_1_out_3_ce0 = 1'b1;
    end else begin
        conv_1_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_1_out_3_ce1 = 1'b1;
    end else begin
        conv_1_out_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_289_p1 = select_ln28_reg_1775;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_289_p1 = 32'd8388608;
    end else begin
        grp_fu_289_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_295_p0 = conv_1_out_1_load_reg_1782;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_295_p0 = conv_1_out_0_q1;
    end else begin
        grp_fu_295_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_295_p1 = select_ln28_1_fu_671_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_295_p1 = 32'd8388608;
    end else begin
        grp_fu_295_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_301_p0 = conv_1_out_0_q1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_301_p0 = conv_1_out_2_q0;
    end else begin
        grp_fu_301_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_301_p1 = select_ln28_4_reg_1789;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_301_p1 = 32'd8388608;
    end else begin
        grp_fu_301_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_307_p0 = conv_1_out_1_load_2_reg_1796;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_307_p0 = conv_1_out_2_q1;
    end else begin
        grp_fu_307_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_307_p1 = select_ln28_5_fu_762_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_307_p1 = 32'd8388608;
    end else begin
        grp_fu_307_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_314_p0 = conv_1_out_1_load_1_reg_1842;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_314_p0 = conv_1_out_2_q0;
        end else begin
            grp_fu_314_p0 = 'bx;
        end
    end else begin
        grp_fu_314_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_314_p1 = select_ln28_2_fu_1033_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_314_p1 = select_ln28_8_reg_1803;
        end else begin
            grp_fu_314_p1 = 'bx;
        end
    end else begin
        grp_fu_314_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_319_p0 = conv_1_out_1_load_3_reg_1860;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_319_p0 = conv_1_out_3_load_reg_1810;
        end else begin
            grp_fu_319_p0 = 'bx;
        end
    end else begin
        grp_fu_319_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_319_p1 = select_ln28_6_fu_1212_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_319_p1 = select_ln28_9_fu_853_p3;
        end else begin
            grp_fu_319_p1 = 'bx;
        end
    end else begin
        grp_fu_319_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_323_p0 = conv_1_out_3_load_1_reg_1878;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_323_p0 = conv_1_out_2_q1;
        end else begin
            grp_fu_323_p0 = 'bx;
        end
    end else begin
        grp_fu_323_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_323_p1 = select_ln28_10_fu_1391_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_323_p1 = select_ln28_12_reg_1817;
        end else begin
            grp_fu_323_p1 = 'bx;
        end
    end else begin
        grp_fu_323_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_328_p0 = conv_1_out_3_load_3_reg_1896;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_328_p0 = conv_1_out_3_load_2_reg_1824;
        end else begin
            grp_fu_328_p0 = 'bx;
        end
    end else begin
        grp_fu_328_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_328_p1 = select_ln28_14_fu_1570_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_328_p1 = select_ln28_13_fu_944_p3;
        end else begin
            grp_fu_328_p1 = 'bx;
        end
    end else begin
        grp_fu_328_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_pool_1_out_0_ce0 = 1'b1;
    end else begin
        max_pool_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_pool_1_out_0_ce1 = 1'b1;
    end else begin
        max_pool_1_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1668_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_pool_1_out_0_we0 = 1'b1;
    end else begin
        max_pool_1_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1668_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_pool_1_out_0_we1 = 1'b1;
    end else begin
        max_pool_1_out_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_pool_1_out_1_ce0 = 1'b1;
    end else begin
        max_pool_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_pool_1_out_1_ce1 = 1'b1;
    end else begin
        max_pool_1_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1668_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_pool_1_out_1_we0 = 1'b1;
    end else begin
        max_pool_1_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1668_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_pool_1_out_1_we1 = 1'b1;
    end else begin
        max_pool_1_out_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_332_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln10_fu_332_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln28_10_fu_1201_p2 = (or_ln28_11_fu_1195_p2 & or_ln28_10_fu_1177_p2);

assign and_ln28_11_fu_1207_p2 = (tmp_18_reg_1855 & and_ln28_10_fu_1201_p2);

assign and_ln28_12_fu_1290_p2 = (or_ln28_13_fu_1284_p2 & or_ln28_12_fu_1266_p2);

assign and_ln28_13_fu_1296_p2 = (grp_fu_319_p2 & and_ln28_12_fu_1290_p2);

assign and_ln28_14_fu_524_p2 = (or_ln28_14_fu_518_p2 & grp_fu_301_p2);

assign and_ln28_15_fu_841_p2 = (or_ln28_16_fu_835_p2 & or_ln28_15_fu_817_p2);

assign and_ln28_16_fu_847_p2 = (grp_fu_314_p2 & and_ln28_15_fu_841_p2);

assign and_ln28_17_fu_1380_p2 = (or_ln28_18_fu_1374_p2 & or_ln28_17_fu_1356_p2);

assign and_ln28_18_fu_1386_p2 = (tmp_29_reg_1873 & and_ln28_17_fu_1380_p2);

assign and_ln28_19_fu_1469_p2 = (or_ln28_20_fu_1463_p2 & or_ln28_19_fu_1445_p2);

assign and_ln28_1_fu_659_p2 = (or_ln28_2_fu_653_p2 & or_ln28_1_fu_635_p2);

assign and_ln28_20_fu_1475_p2 = (grp_fu_323_p2 & and_ln28_19_fu_1469_p2);

assign and_ln28_21_fu_574_p2 = (or_ln28_21_fu_568_p2 & grp_fu_307_p2);

assign and_ln28_22_fu_932_p2 = (or_ln28_23_fu_926_p2 & or_ln28_22_fu_908_p2);

assign and_ln28_23_fu_938_p2 = (grp_fu_323_p2 & and_ln28_22_fu_932_p2);

assign and_ln28_24_fu_1559_p2 = (or_ln28_25_fu_1553_p2 & or_ln28_24_fu_1535_p2);

assign and_ln28_25_fu_1565_p2 = (tmp_40_reg_1891 & and_ln28_24_fu_1559_p2);

assign and_ln28_26_fu_1648_p2 = (or_ln28_27_fu_1642_p2 & or_ln28_26_fu_1624_p2);

assign and_ln28_27_fu_1654_p2 = (grp_fu_328_p2 & and_ln28_26_fu_1648_p2);

assign and_ln28_2_fu_665_p2 = (grp_fu_289_p2 & and_ln28_1_fu_659_p2);

assign and_ln28_3_fu_1022_p2 = (or_ln28_4_fu_1016_p2 & or_ln28_3_fu_998_p2);

assign and_ln28_4_fu_1028_p2 = (tmp_8_reg_1837 & and_ln28_3_fu_1022_p2);

assign and_ln28_5_fu_1111_p2 = (or_ln28_6_fu_1105_p2 & or_ln28_5_fu_1087_p2);

assign and_ln28_6_fu_1117_p2 = (grp_fu_314_p2 & and_ln28_5_fu_1111_p2);

assign and_ln28_7_fu_474_p2 = (or_ln28_7_fu_468_p2 & grp_fu_295_p2);

assign and_ln28_8_fu_750_p2 = (or_ln28_9_fu_744_p2 & or_ln28_8_fu_726_p2);

assign and_ln28_9_fu_756_p2 = (grp_fu_301_p2 & and_ln28_8_fu_750_p2);

assign and_ln28_fu_424_p2 = (or_ln28_fu_418_p2 & grp_fu_289_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_10_fu_1131_p1 = conv_1_out_1_load_2_reg_1796;

assign bitcast_ln28_11_fu_1148_p1 = select_ln28_5_reg_1849;

assign bitcast_ln28_12_fu_1219_p1 = conv_1_out_1_load_3_reg_1860;

assign bitcast_ln28_13_fu_1236_p1 = select_ln28_6_fu_1212_p3;

assign bitcast_ln28_14_fu_488_p1 = conv_1_out_2_q0;

assign bitcast_ln28_15_fu_770_p1 = conv_1_out_2_q0;

assign bitcast_ln28_16_fu_788_p1 = select_ln28_8_reg_1803;

assign bitcast_ln28_17_fu_1310_p1 = conv_1_out_3_load_reg_1810;

assign bitcast_ln28_18_fu_1327_p1 = select_ln28_9_reg_1867;

assign bitcast_ln28_19_fu_1398_p1 = conv_1_out_3_load_1_reg_1878;

assign bitcast_ln28_1_fu_588_p1 = conv_1_out_0_q0;

assign bitcast_ln28_20_fu_1415_p1 = select_ln28_10_fu_1391_p3;

assign bitcast_ln28_21_fu_538_p1 = conv_1_out_2_q1;

assign bitcast_ln28_22_fu_861_p1 = conv_1_out_2_q1;

assign bitcast_ln28_23_fu_879_p1 = select_ln28_12_reg_1817;

assign bitcast_ln28_24_fu_1489_p1 = conv_1_out_3_load_2_reg_1824;

assign bitcast_ln28_25_fu_1506_p1 = select_ln28_13_reg_1885;

assign bitcast_ln28_26_fu_1577_p1 = conv_1_out_3_load_3_reg_1896;

assign bitcast_ln28_27_fu_1594_p1 = select_ln28_14_fu_1570_p3;

assign bitcast_ln28_2_fu_606_p1 = select_ln28_reg_1775;

assign bitcast_ln28_3_fu_952_p1 = conv_1_out_1_load_reg_1782;

assign bitcast_ln28_4_fu_969_p1 = select_ln28_1_reg_1831;

assign bitcast_ln28_5_fu_1040_p1 = conv_1_out_1_load_1_reg_1842;

assign bitcast_ln28_6_fu_1057_p1 = select_ln28_2_fu_1033_p3;

assign bitcast_ln28_7_fu_438_p1 = conv_1_out_0_q1;

assign bitcast_ln28_8_fu_679_p1 = conv_1_out_0_q1;

assign bitcast_ln28_9_fu_697_p1 = select_ln28_4_reg_1789;

assign bitcast_ln28_fu_388_p1 = conv_1_out_0_q0;

assign f_fu_338_p2 = (ap_phi_mux_f_0_phi_fu_282_p4 + 2'd1);

assign icmp_ln10_fu_332_p2 = ((ap_phi_mux_f_0_phi_fu_282_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_1075_p2 = ((tmp_9_fu_1043_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_1081_p2 = ((trunc_ln28_5_fu_1053_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_12_fu_1093_p2 = ((tmp_s_fu_1061_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_13_fu_1099_p2 = ((trunc_ln28_6_fu_1071_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_14_fu_456_p2 = ((tmp_11_fu_442_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_15_fu_462_p2 = ((trunc_ln28_7_fu_452_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_16_fu_714_p2 = ((tmp_13_fu_683_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_17_fu_720_p2 = ((trunc_ln28_8_fu_693_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_18_fu_732_p2 = ((tmp_14_fu_700_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_19_fu_738_p2 = ((trunc_ln28_9_fu_710_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_412_p2 = ((trunc_ln28_fu_402_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_20_fu_1165_p2 = ((tmp_16_fu_1134_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_21_fu_1171_p2 = ((trunc_ln28_10_fu_1144_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_22_fu_1183_p2 = ((tmp_17_fu_1151_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_23_fu_1189_p2 = ((trunc_ln28_11_fu_1161_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_24_fu_1254_p2 = ((tmp_19_fu_1222_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_25_fu_1260_p2 = ((trunc_ln28_12_fu_1232_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_26_fu_1272_p2 = ((tmp_20_fu_1240_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_27_fu_1278_p2 = ((trunc_ln28_13_fu_1250_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_28_fu_506_p2 = ((tmp_22_fu_492_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_29_fu_512_p2 = ((trunc_ln28_14_fu_502_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_623_p2 = ((tmp_3_fu_592_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_30_fu_805_p2 = ((tmp_24_fu_774_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_31_fu_811_p2 = ((trunc_ln28_15_fu_784_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_32_fu_823_p2 = ((tmp_25_fu_791_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_33_fu_829_p2 = ((trunc_ln28_16_fu_801_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_34_fu_1344_p2 = ((tmp_27_fu_1313_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_35_fu_1350_p2 = ((trunc_ln28_17_fu_1323_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_36_fu_1362_p2 = ((tmp_28_fu_1330_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_37_fu_1368_p2 = ((trunc_ln28_18_fu_1340_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_38_fu_1433_p2 = ((tmp_30_fu_1401_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_39_fu_1439_p2 = ((trunc_ln28_19_fu_1411_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_629_p2 = ((trunc_ln28_1_fu_602_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_40_fu_1451_p2 = ((tmp_31_fu_1419_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_41_fu_1457_p2 = ((trunc_ln28_20_fu_1429_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_42_fu_556_p2 = ((tmp_33_fu_542_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_43_fu_562_p2 = ((trunc_ln28_21_fu_552_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_44_fu_896_p2 = ((tmp_35_fu_865_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_45_fu_902_p2 = ((trunc_ln28_22_fu_875_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_46_fu_914_p2 = ((tmp_36_fu_882_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_47_fu_920_p2 = ((trunc_ln28_23_fu_892_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_48_fu_1523_p2 = ((tmp_38_fu_1492_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_49_fu_1529_p2 = ((trunc_ln28_24_fu_1502_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_641_p2 = ((tmp_4_fu_609_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_50_fu_1541_p2 = ((tmp_39_fu_1509_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_51_fu_1547_p2 = ((trunc_ln28_25_fu_1519_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_52_fu_1612_p2 = ((tmp_41_fu_1580_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_53_fu_1618_p2 = ((trunc_ln28_26_fu_1590_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_54_fu_1630_p2 = ((tmp_42_fu_1598_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_55_fu_1636_p2 = ((trunc_ln28_27_fu_1608_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_647_p2 = ((trunc_ln28_2_fu_619_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_986_p2 = ((tmp_6_fu_955_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_992_p2 = ((trunc_ln28_3_fu_965_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_1004_p2 = ((tmp_7_fu_972_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_1010_p2 = ((trunc_ln28_4_fu_982_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_406_p2 = ((tmp_1_fu_392_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_0_address0 = zext_ln28_reg_1677_pp0_iter1_reg;

assign max_pool_1_out_0_address1 = zext_ln28_1_reg_1729;

assign max_pool_1_out_0_d0 = ((and_ln28_6_fu_1117_p2[0:0] === 1'b1) ? conv_1_out_1_load_1_reg_1842 : select_ln28_2_fu_1033_p3);

assign max_pool_1_out_0_d1 = ((and_ln28_13_fu_1296_p2[0:0] === 1'b1) ? conv_1_out_1_load_3_reg_1860 : select_ln28_6_fu_1212_p3);

assign max_pool_1_out_1_address0 = zext_ln28_reg_1677_pp0_iter1_reg;

assign max_pool_1_out_1_address1 = zext_ln28_1_reg_1729;

assign max_pool_1_out_1_d0 = ((and_ln28_20_fu_1475_p2[0:0] === 1'b1) ? conv_1_out_3_load_1_reg_1878 : select_ln28_10_fu_1391_p3);

assign max_pool_1_out_1_d1 = ((and_ln28_27_fu_1654_p2[0:0] === 1'b1) ? conv_1_out_3_load_3_reg_1896 : select_ln28_14_fu_1570_p3);

assign or_ln28_10_fu_1177_p2 = (icmp_ln28_21_fu_1171_p2 | icmp_ln28_20_fu_1165_p2);

assign or_ln28_11_fu_1195_p2 = (icmp_ln28_23_fu_1189_p2 | icmp_ln28_22_fu_1183_p2);

assign or_ln28_12_fu_1266_p2 = (icmp_ln28_25_fu_1260_p2 | icmp_ln28_24_fu_1254_p2);

assign or_ln28_13_fu_1284_p2 = (icmp_ln28_27_fu_1278_p2 | icmp_ln28_26_fu_1272_p2);

assign or_ln28_14_fu_518_p2 = (icmp_ln28_29_fu_512_p2 | icmp_ln28_28_fu_506_p2);

assign or_ln28_15_fu_817_p2 = (icmp_ln28_31_fu_811_p2 | icmp_ln28_30_fu_805_p2);

assign or_ln28_16_fu_835_p2 = (icmp_ln28_33_fu_829_p2 | icmp_ln28_32_fu_823_p2);

assign or_ln28_17_fu_1356_p2 = (icmp_ln28_35_fu_1350_p2 | icmp_ln28_34_fu_1344_p2);

assign or_ln28_18_fu_1374_p2 = (icmp_ln28_37_fu_1368_p2 | icmp_ln28_36_fu_1362_p2);

assign or_ln28_19_fu_1445_p2 = (icmp_ln28_39_fu_1439_p2 | icmp_ln28_38_fu_1433_p2);

assign or_ln28_1_fu_635_p2 = (icmp_ln28_3_fu_629_p2 | icmp_ln28_2_fu_623_p2);

assign or_ln28_20_fu_1463_p2 = (icmp_ln28_41_fu_1457_p2 | icmp_ln28_40_fu_1451_p2);

assign or_ln28_21_fu_568_p2 = (icmp_ln28_43_fu_562_p2 | icmp_ln28_42_fu_556_p2);

assign or_ln28_22_fu_908_p2 = (icmp_ln28_45_fu_902_p2 | icmp_ln28_44_fu_896_p2);

assign or_ln28_23_fu_926_p2 = (icmp_ln28_47_fu_920_p2 | icmp_ln28_46_fu_914_p2);

assign or_ln28_24_fu_1535_p2 = (icmp_ln28_49_fu_1529_p2 | icmp_ln28_48_fu_1523_p2);

assign or_ln28_25_fu_1553_p2 = (icmp_ln28_51_fu_1547_p2 | icmp_ln28_50_fu_1541_p2);

assign or_ln28_26_fu_1624_p2 = (icmp_ln28_53_fu_1618_p2 | icmp_ln28_52_fu_1612_p2);

assign or_ln28_27_fu_1642_p2 = (icmp_ln28_55_fu_1636_p2 | icmp_ln28_54_fu_1630_p2);

assign or_ln28_2_fu_653_p2 = (icmp_ln28_5_fu_647_p2 | icmp_ln28_4_fu_641_p2);

assign or_ln28_3_fu_998_p2 = (icmp_ln28_7_fu_992_p2 | icmp_ln28_6_fu_986_p2);

assign or_ln28_4_fu_1016_p2 = (icmp_ln28_9_fu_1010_p2 | icmp_ln28_8_fu_1004_p2);

assign or_ln28_5_fu_1087_p2 = (icmp_ln28_11_fu_1081_p2 | icmp_ln28_10_fu_1075_p2);

assign or_ln28_6_fu_1105_p2 = (icmp_ln28_13_fu_1099_p2 | icmp_ln28_12_fu_1093_p2);

assign or_ln28_7_fu_468_p2 = (icmp_ln28_15_fu_462_p2 | icmp_ln28_14_fu_456_p2);

assign or_ln28_8_fu_726_p2 = (icmp_ln28_17_fu_720_p2 | icmp_ln28_16_fu_714_p2);

assign or_ln28_9_fu_744_p2 = (icmp_ln28_19_fu_738_p2 | icmp_ln28_18_fu_732_p2);

assign or_ln28_fu_418_p2 = (icmp_ln28_fu_406_p2 | icmp_ln28_1_fu_412_p2);

assign select_ln28_10_fu_1391_p3 = ((and_ln28_18_fu_1386_p2[0:0] === 1'b1) ? conv_1_out_3_load_reg_1810 : select_ln28_9_reg_1867);

assign select_ln28_12_fu_580_p3 = ((and_ln28_21_fu_574_p2[0:0] === 1'b1) ? conv_1_out_2_q1 : 32'd8388608);

assign select_ln28_13_fu_944_p3 = ((and_ln28_23_fu_938_p2[0:0] === 1'b1) ? conv_1_out_2_q1 : select_ln28_12_reg_1817);

assign select_ln28_14_fu_1570_p3 = ((and_ln28_25_fu_1565_p2[0:0] === 1'b1) ? conv_1_out_3_load_2_reg_1824 : select_ln28_13_reg_1885);

assign select_ln28_1_fu_671_p3 = ((and_ln28_2_fu_665_p2[0:0] === 1'b1) ? conv_1_out_0_q0 : select_ln28_reg_1775);

assign select_ln28_2_fu_1033_p3 = ((and_ln28_4_fu_1028_p2[0:0] === 1'b1) ? conv_1_out_1_load_reg_1782 : select_ln28_1_reg_1831);

assign select_ln28_4_fu_480_p3 = ((and_ln28_7_fu_474_p2[0:0] === 1'b1) ? conv_1_out_0_q1 : 32'd8388608);

assign select_ln28_5_fu_762_p3 = ((and_ln28_9_fu_756_p2[0:0] === 1'b1) ? conv_1_out_0_q1 : select_ln28_4_reg_1789);

assign select_ln28_6_fu_1212_p3 = ((and_ln28_11_fu_1207_p2[0:0] === 1'b1) ? conv_1_out_1_load_2_reg_1796 : select_ln28_5_reg_1849);

assign select_ln28_8_fu_530_p3 = ((and_ln28_14_fu_524_p2[0:0] === 1'b1) ? conv_1_out_2_q0 : 32'd8388608);

assign select_ln28_9_fu_853_p3 = ((and_ln28_16_fu_847_p2[0:0] === 1'b1) ? conv_1_out_2_q0 : select_ln28_8_reg_1803);

assign select_ln28_fu_430_p3 = ((and_ln28_fu_424_p2[0:0] === 1'b1) ? conv_1_out_0_q0 : 32'd8388608);

assign sext_ln28_fu_377_p1 = xor_ln28_reg_1688;

assign tmp_11_fu_442_p4 = {{bitcast_ln28_7_fu_438_p1[30:23]}};

assign tmp_13_fu_683_p4 = {{bitcast_ln28_8_fu_679_p1[30:23]}};

assign tmp_14_fu_700_p4 = {{bitcast_ln28_9_fu_697_p1[30:23]}};

assign tmp_16_fu_1134_p4 = {{bitcast_ln28_10_fu_1131_p1[30:23]}};

assign tmp_17_fu_1151_p4 = {{bitcast_ln28_11_fu_1148_p1[30:23]}};

assign tmp_19_fu_1222_p4 = {{bitcast_ln28_12_fu_1219_p1[30:23]}};

assign tmp_1_fu_392_p4 = {{bitcast_ln28_fu_388_p1[30:23]}};

assign tmp_20_fu_1240_p4 = {{bitcast_ln28_13_fu_1236_p1[30:23]}};

assign tmp_22_fu_492_p4 = {{bitcast_ln28_14_fu_488_p1[30:23]}};

assign tmp_24_fu_774_p4 = {{bitcast_ln28_15_fu_770_p1[30:23]}};

assign tmp_25_fu_791_p4 = {{bitcast_ln28_16_fu_788_p1[30:23]}};

assign tmp_27_fu_1313_p4 = {{bitcast_ln28_17_fu_1310_p1[30:23]}};

assign tmp_28_fu_1330_p4 = {{bitcast_ln28_18_fu_1327_p1[30:23]}};

assign tmp_30_fu_1401_p4 = {{bitcast_ln28_19_fu_1398_p1[30:23]}};

assign tmp_31_fu_1419_p4 = {{bitcast_ln28_20_fu_1415_p1[30:23]}};

assign tmp_33_fu_542_p4 = {{bitcast_ln28_21_fu_538_p1[30:23]}};

assign tmp_35_fu_865_p4 = {{bitcast_ln28_22_fu_861_p1[30:23]}};

assign tmp_36_fu_882_p4 = {{bitcast_ln28_23_fu_879_p1[30:23]}};

assign tmp_38_fu_1492_p4 = {{bitcast_ln28_24_fu_1489_p1[30:23]}};

assign tmp_39_fu_1509_p4 = {{bitcast_ln28_25_fu_1506_p1[30:23]}};

assign tmp_3_fu_592_p4 = {{bitcast_ln28_1_fu_588_p1[30:23]}};

assign tmp_41_fu_1580_p4 = {{bitcast_ln28_26_fu_1577_p1[30:23]}};

assign tmp_42_fu_1598_p4 = {{bitcast_ln28_27_fu_1594_p1[30:23]}};

assign tmp_44_fu_358_p3 = {{62'd1}, {ap_phi_mux_f_0_phi_fu_282_p4}};

assign tmp_4_fu_609_p4 = {{bitcast_ln28_2_fu_606_p1[30:23]}};

assign tmp_6_fu_955_p4 = {{bitcast_ln28_3_fu_952_p1[30:23]}};

assign tmp_7_fu_972_p4 = {{bitcast_ln28_4_fu_969_p1[30:23]}};

assign tmp_9_fu_1043_p4 = {{bitcast_ln28_5_fu_1040_p1[30:23]}};

assign tmp_s_fu_1061_p4 = {{bitcast_ln28_6_fu_1057_p1[30:23]}};

assign trunc_ln28_10_fu_1144_p1 = bitcast_ln28_10_fu_1131_p1[22:0];

assign trunc_ln28_11_fu_1161_p1 = bitcast_ln28_11_fu_1148_p1[22:0];

assign trunc_ln28_12_fu_1232_p1 = bitcast_ln28_12_fu_1219_p1[22:0];

assign trunc_ln28_13_fu_1250_p1 = bitcast_ln28_13_fu_1236_p1[22:0];

assign trunc_ln28_14_fu_502_p1 = bitcast_ln28_14_fu_488_p1[22:0];

assign trunc_ln28_15_fu_784_p1 = bitcast_ln28_15_fu_770_p1[22:0];

assign trunc_ln28_16_fu_801_p1 = bitcast_ln28_16_fu_788_p1[22:0];

assign trunc_ln28_17_fu_1323_p1 = bitcast_ln28_17_fu_1310_p1[22:0];

assign trunc_ln28_18_fu_1340_p1 = bitcast_ln28_18_fu_1327_p1[22:0];

assign trunc_ln28_19_fu_1411_p1 = bitcast_ln28_19_fu_1398_p1[22:0];

assign trunc_ln28_1_fu_602_p1 = bitcast_ln28_1_fu_588_p1[22:0];

assign trunc_ln28_20_fu_1429_p1 = bitcast_ln28_20_fu_1415_p1[22:0];

assign trunc_ln28_21_fu_552_p1 = bitcast_ln28_21_fu_538_p1[22:0];

assign trunc_ln28_22_fu_875_p1 = bitcast_ln28_22_fu_861_p1[22:0];

assign trunc_ln28_23_fu_892_p1 = bitcast_ln28_23_fu_879_p1[22:0];

assign trunc_ln28_24_fu_1502_p1 = bitcast_ln28_24_fu_1489_p1[22:0];

assign trunc_ln28_25_fu_1519_p1 = bitcast_ln28_25_fu_1506_p1[22:0];

assign trunc_ln28_26_fu_1590_p1 = bitcast_ln28_26_fu_1577_p1[22:0];

assign trunc_ln28_27_fu_1608_p1 = bitcast_ln28_27_fu_1594_p1[22:0];

assign trunc_ln28_2_fu_619_p1 = bitcast_ln28_2_fu_606_p1[22:0];

assign trunc_ln28_3_fu_965_p1 = bitcast_ln28_3_fu_952_p1[22:0];

assign trunc_ln28_4_fu_982_p1 = bitcast_ln28_4_fu_969_p1[22:0];

assign trunc_ln28_5_fu_1053_p1 = bitcast_ln28_5_fu_1040_p1[22:0];

assign trunc_ln28_6_fu_1071_p1 = bitcast_ln28_6_fu_1057_p1[22:0];

assign trunc_ln28_7_fu_452_p1 = bitcast_ln28_7_fu_438_p1[22:0];

assign trunc_ln28_8_fu_693_p1 = bitcast_ln28_8_fu_679_p1[22:0];

assign trunc_ln28_9_fu_710_p1 = bitcast_ln28_9_fu_697_p1[22:0];

assign trunc_ln28_fu_402_p1 = bitcast_ln28_fu_388_p1[22:0];

assign xor_ln28_fu_352_p2 = (ap_phi_mux_f_0_phi_fu_282_p4 ^ 2'd2);

assign zext_ln28_1_fu_370_p1 = $unsigned(xor_ln28_reg_1688);

assign zext_ln28_2_fu_380_p1 = $unsigned(sext_ln28_fu_377_p1);

assign zext_ln28_fu_344_p1 = ap_phi_mux_f_0_phi_fu_282_p4;

always @ (posedge ap_clk) begin
    zext_ln28_reg_1677[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_reg_1677_pp0_iter1_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_1_reg_1729[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_1
