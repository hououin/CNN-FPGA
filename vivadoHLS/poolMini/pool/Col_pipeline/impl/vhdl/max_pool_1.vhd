-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv_1_out_ce1 : OUT STD_LOGIC;
    conv_1_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.830000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=157,HLS_SYN_LUT=854,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten21_reg_130 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_141 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_152 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_reg_163 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_reg_174 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_816 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_816_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_214_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln10_reg_820 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_5_fu_240_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_5_reg_825 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_fu_282_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_reg_832 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_1_fu_296_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_1_reg_838 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln26_fu_310_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_3_fu_359_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_3_reg_854 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_1_fu_412_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_1_reg_864 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_1_reg_864_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln13_fu_424_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_reg_869 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln28_fu_486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_out_load_1_reg_885 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_891 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_495_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_896 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_2_fu_686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_1_fu_711_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_1_reg_908 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten21_phi_fu_134_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_phi_fu_145_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_156_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_r_0_phi_fu_167_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_c_0_phi_fu_178_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_2_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_5_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln28_7_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_fu_595_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln25_fu_196_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln13_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_220_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln16_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_4_fu_232_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln28_7_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_270_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_1_fu_290_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_6_fu_320_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_2_fu_328_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_336_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln25_fu_202_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln25_2_fu_304_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_7_fu_351_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln26_fu_314_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln26_fu_367_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_373_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_4_fu_383_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_1_fu_248_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_fu_387_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_398_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_6_fu_408_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln13_fu_418_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_432_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln28_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_458_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_503_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln28_1_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_2_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_517_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_527_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_534_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_544_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_3_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_4_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_606_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_616_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_624_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_4_fu_634_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_9_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_8_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_4_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_fu_510_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_1_fu_694_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_697_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_cast_fu_703_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_fu_500_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln28_5_fu_721_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_6_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_725_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_5_fu_735_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_11_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_10_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_742_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_6_fu_752_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_13_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_12_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_5_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_6_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_5_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_6_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => grp_fu_185_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_185_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q1,
        din1 => grp_fu_191_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_191_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_174 <= c_reg_896;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_174 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_141 <= select_ln28_5_reg_825;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_141 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten21_reg_130 <= add_ln10_reg_820;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten21_reg_130 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_152 <= select_ln13_reg_869;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_152 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_163 <= select_ln25_1_reg_838;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_163 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln10_reg_820 <= add_ln10_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln28_1_reg_864 <= add_ln28_1_fu_412_p2;
                    select_ln25_3_reg_854(1) <= select_ln25_3_fu_359_p3(1);
                select_ln25_reg_832 <= select_ln25_fu_282_p3;
                trunc_ln26_reg_844 <= trunc_ln26_fu_310_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln28_1_reg_864_pp0_iter1_reg <= add_ln28_1_reg_864;
                icmp_ln10_reg_816 <= icmp_ln10_fu_208_p2;
                icmp_ln10_reg_816_pp0_iter1_reg <= icmp_ln10_reg_816;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln35_1_reg_908 <= add_ln35_1_fu_711_p2;
                select_ln28_2_reg_901 <= select_ln28_2_fu_686_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                c_reg_896 <= c_fu_495_p2;
                conv_1_out_load_1_reg_885 <= conv_1_out_q1;
                tmp_7_reg_891 <= grp_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_208_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln13_reg_869 <= select_ln13_fu_424_p3;
                select_ln25_1_reg_838 <= select_ln25_1_fu_296_p3;
                select_ln28_5_reg_825 <= select_ln28_5_fu_240_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln28_reg_879 <= select_ln28_fu_486_p3;
            end if;
        end if;
    end process;
    select_ln25_3_reg_854(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_208_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_208_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((icmp_ln10_fu_208_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_214_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_indvar_flatten21_phi_fu_134_p4));
    add_ln13_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_156_p4));
    add_ln28_1_fu_412_p2 <= std_logic_vector(unsigned(zext_ln28_6_fu_408_p1) + unsigned(zext_ln28_1_fu_248_p1));
    add_ln28_fu_387_p2 <= std_logic_vector(unsigned(zext_ln28_4_fu_383_p1) + unsigned(zext_ln28_1_fu_248_p1));
    add_ln35_1_fu_711_p2 <= std_logic_vector(unsigned(tmp_25_cast_fu_703_p3) + unsigned(zext_ln28_fu_500_p1));
    add_ln35_fu_697_p2 <= std_logic_vector(unsigned(zext_ln35_fu_510_p1) + unsigned(zext_ln35_1_fu_694_p1));
    and_ln28_1_fu_584_p2 <= (or_ln28_2_fu_578_p2 and or_ln28_1_fu_560_p2);
    and_ln28_2_fu_590_p2 <= (tmp_7_reg_891 and and_ln28_1_fu_584_p2);
    and_ln28_3_fu_674_p2 <= (or_ln28_4_fu_668_p2 and or_ln28_3_fu_650_p2);
    and_ln28_4_fu_680_p2 <= (grp_fu_185_p2 and and_ln28_3_fu_674_p2);
    and_ln28_5_fu_792_p2 <= (or_ln28_6_fu_786_p2 and or_ln28_5_fu_768_p2);
    and_ln28_6_fu_798_p2 <= (grp_fu_191_p2 and and_ln28_5_fu_792_p2);
    and_ln28_7_fu_264_p2 <= (xor_ln28_fu_252_p2 and icmp_ln16_fu_258_p2);
    and_ln28_fu_480_p2 <= (or_ln28_fu_474_p2 and grp_fu_185_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_208_p2)
    begin
        if ((icmp_ln10_fu_208_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_178_p4_assign_proc : process(c_0_reg_174, icmp_ln10_reg_816, ap_CS_fsm_pp0_stage0, c_reg_896, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_178_p4 <= c_reg_896;
        else 
            ap_phi_mux_c_0_phi_fu_178_p4 <= c_0_reg_174;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_145_p4_assign_proc : process(f_0_reg_141, icmp_ln10_reg_816, ap_CS_fsm_pp0_stage0, select_ln28_5_reg_825, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_145_p4 <= select_ln28_5_reg_825;
        else 
            ap_phi_mux_f_0_phi_fu_145_p4 <= f_0_reg_141;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten21_phi_fu_134_p4_assign_proc : process(indvar_flatten21_reg_130, icmp_ln10_reg_816, ap_CS_fsm_pp0_stage0, add_ln10_reg_820, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten21_phi_fu_134_p4 <= add_ln10_reg_820;
        else 
            ap_phi_mux_indvar_flatten21_phi_fu_134_p4 <= indvar_flatten21_reg_130;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_156_p4_assign_proc : process(indvar_flatten_reg_152, icmp_ln10_reg_816, ap_CS_fsm_pp0_stage0, select_ln13_reg_869, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_156_p4 <= select_ln13_reg_869;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_156_p4 <= indvar_flatten_reg_152;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_167_p4_assign_proc : process(r_0_reg_163, icmp_ln10_reg_816, ap_CS_fsm_pp0_stage0, select_ln25_1_reg_838, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_816 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_167_p4 <= select_ln25_1_reg_838;
        else 
            ap_phi_mux_r_0_phi_fu_167_p4 <= r_0_reg_163;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_514_p1 <= conv_1_out_load_1_reg_885;
    bitcast_ln28_2_fu_531_p1 <= select_ln28_reg_879;
    bitcast_ln28_3_fu_602_p1 <= conv_1_out_q0;
    bitcast_ln28_4_fu_620_p1 <= select_ln28_1_fu_595_p3;
    bitcast_ln28_5_fu_721_p1 <= conv_1_out_q1;
    bitcast_ln28_6_fu_739_p1 <= select_ln28_2_reg_901;
    bitcast_ln28_fu_444_p1 <= conv_1_out_q0;
    c_fu_495_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln25_reg_832));

    conv_1_out_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln28_2_fu_346_p1, zext_ln28_3_fu_439_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_1_out_address0 <= zext_ln28_3_fu_439_p1(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_1_out_address0 <= zext_ln28_2_fu_346_p1(5 - 1 downto 0);
            else 
                conv_1_out_address0 <= "XXXXX";
            end if;
        else 
            conv_1_out_address0 <= "XXXXX";
        end if; 
    end process;


    conv_1_out_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln28_5_fu_393_p1, ap_block_pp0_stage1, zext_ln28_7_fu_717_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            conv_1_out_address1 <= zext_ln28_7_fu_717_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_1_out_address1 <= zext_ln28_5_fu_393_p1(5 - 1 downto 0);
        else 
            conv_1_out_address1 <= "XXXXX";
        end if; 
    end process;


    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_1_out_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_220_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_f_0_phi_fu_145_p4));

    grp_fu_185_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, select_ln28_1_fu_595_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_185_p1 <= select_ln28_1_fu_595_p3;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_185_p1 <= ap_const_lv32_800000;
        else 
            grp_fu_185_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_191_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, select_ln28_fu_486_p3, select_ln28_2_reg_901, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_191_p1 <= select_ln28_2_reg_901;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_191_p1 <= select_ln28_fu_486_p3;
        else 
            grp_fu_191_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_208_p2 <= "1" when (ap_phi_mux_indvar_flatten21_phi_fu_134_p4 = ap_const_lv4_8) else "0";
    icmp_ln13_fu_226_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_156_p4 = ap_const_lv4_4) else "0";
    icmp_ln16_fu_258_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_178_p4 = ap_const_lv2_2) else "0";
    icmp_ln28_10_fu_756_p2 <= "0" when (tmp_10_fu_725_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_11_fu_762_p2 <= "1" when (trunc_ln28_5_fu_735_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_12_fu_774_p2 <= "0" when (tmp_11_fu_742_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_13_fu_780_p2 <= "1" when (trunc_ln28_6_fu_752_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_1_fu_468_p2 <= "1" when (trunc_ln28_fu_458_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_548_p2 <= "0" when (tmp_5_fu_517_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_554_p2 <= "1" when (trunc_ln28_1_fu_527_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_566_p2 <= "0" when (tmp_6_fu_534_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_572_p2 <= "1" when (trunc_ln28_2_fu_544_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_638_p2 <= "0" when (tmp_8_fu_606_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_644_p2 <= "1" when (trunc_ln28_3_fu_616_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_8_fu_656_p2 <= "0" when (tmp_9_fu_624_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_9_fu_662_p2 <= "1" when (trunc_ln28_4_fu_634_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_462_p2 <= "0" when (tmp_3_fu_448_p4 = ap_const_lv8_FF) else "1";
    max_pool_1_out_address0 <= zext_ln35_2_fu_812_p1(3 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= 
        conv_1_out_q1 when (and_ln28_6_fu_798_p2(0) = '1') else 
        select_ln28_2_reg_901;

    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln10_reg_816_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln10_reg_816_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln25_1_fu_276_p2 <= (icmp_ln13_fu_226_p2 or and_ln28_7_fu_264_p2);
    or_ln25_2_fu_304_p2 <= (shl_ln25_1_fu_290_p2 or ap_const_lv2_1);
    or_ln25_fu_202_p2 <= (shl_ln25_fu_196_p2 or ap_const_lv2_1);
    or_ln26_fu_367_p2 <= (shl_ln26_fu_314_p2 or ap_const_lv2_1);
    or_ln28_1_fu_560_p2 <= (icmp_ln28_3_fu_554_p2 or icmp_ln28_2_fu_548_p2);
    or_ln28_2_fu_578_p2 <= (icmp_ln28_5_fu_572_p2 or icmp_ln28_4_fu_566_p2);
    or_ln28_3_fu_650_p2 <= (icmp_ln28_7_fu_644_p2 or icmp_ln28_6_fu_638_p2);
    or_ln28_4_fu_668_p2 <= (icmp_ln28_9_fu_662_p2 or icmp_ln28_8_fu_656_p2);
    or_ln28_5_fu_768_p2 <= (icmp_ln28_11_fu_762_p2 or icmp_ln28_10_fu_756_p2);
    or_ln28_6_fu_786_p2 <= (icmp_ln28_13_fu_780_p2 or icmp_ln28_12_fu_774_p2);
    or_ln28_fu_474_p2 <= (icmp_ln28_fu_462_p2 or icmp_ln28_1_fu_468_p2);
    r_fu_270_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln28_4_fu_232_p3));
    select_ln13_fu_424_p3 <= 
        ap_const_lv4_1 when (icmp_ln13_fu_226_p2(0) = '1') else 
        add_ln13_fu_418_p2;
    select_ln25_1_fu_296_p3 <= 
        r_fu_270_p2 when (and_ln28_7_fu_264_p2(0) = '1') else 
        select_ln28_4_fu_232_p3;
    select_ln25_2_fu_328_p3 <= 
        shl_ln25_1_fu_290_p2 when (and_ln28_7_fu_264_p2(0) = '1') else 
        select_ln28_6_fu_320_p3;
    select_ln25_3_fu_359_p3 <= 
        or_ln25_2_fu_304_p2 when (and_ln28_7_fu_264_p2(0) = '1') else 
        select_ln28_7_fu_351_p3;
    select_ln25_fu_282_p3 <= 
        ap_const_lv2_0 when (or_ln25_1_fu_276_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_178_p4;
    select_ln28_1_fu_595_p3 <= 
        conv_1_out_load_1_reg_885 when (and_ln28_2_fu_590_p2(0) = '1') else 
        select_ln28_reg_879;
    select_ln28_2_fu_686_p3 <= 
        conv_1_out_q0 when (and_ln28_4_fu_680_p2(0) = '1') else 
        select_ln28_1_fu_595_p3;
    select_ln28_4_fu_232_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_226_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_167_p4;
    select_ln28_5_fu_240_p3 <= 
        f_fu_220_p2 when (icmp_ln13_fu_226_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_145_p4;
    select_ln28_6_fu_320_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_226_p2(0) = '1') else 
        shl_ln25_fu_196_p2;
    select_ln28_7_fu_351_p3 <= 
        ap_const_lv2_1 when (icmp_ln13_fu_226_p2(0) = '1') else 
        or_ln25_fu_202_p2;
    select_ln28_fu_486_p3 <= 
        conv_1_out_q0 when (and_ln28_fu_480_p2(0) = '1') else 
        ap_const_lv32_800000;
    shl_ln25_1_fu_290_p2 <= std_logic_vector(shift_left(unsigned(r_fu_270_p2),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln25_fu_196_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_r_0_phi_fu_167_p4),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln26_fu_314_p2 <= std_logic_vector(shift_left(unsigned(select_ln25_fu_282_p3),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_10_fu_725_p4 <= bitcast_ln28_5_fu_721_p1(30 downto 23);
    tmp_11_fu_742_p4 <= bitcast_ln28_6_fu_739_p1(30 downto 23);
    tmp_13_fu_432_p4 <= ((select_ln25_3_reg_854 & trunc_ln26_reg_844) & select_ln28_5_reg_825);
    tmp_14_fu_373_p4 <= ((select_ln25_2_fu_328_p3 & or_ln26_fu_367_p2) & ap_const_lv1_0);
    tmp_15_fu_398_p4 <= ((select_ln25_3_fu_359_p3 & or_ln26_fu_367_p2) & ap_const_lv1_0);
    tmp_1_fu_336_p4 <= ((select_ln25_2_fu_328_p3 & trunc_ln26_fu_310_p1) & select_ln28_5_fu_240_p3);
    tmp_25_cast_fu_703_p3 <= (add_ln35_fu_697_p2 & ap_const_lv1_0);
    tmp_3_fu_448_p4 <= bitcast_ln28_fu_444_p1(30 downto 23);
    tmp_5_fu_517_p4 <= bitcast_ln28_1_fu_514_p1(30 downto 23);
    tmp_6_fu_534_p4 <= bitcast_ln28_2_fu_531_p1(30 downto 23);
    tmp_8_fu_606_p4 <= bitcast_ln28_3_fu_602_p1(30 downto 23);
    tmp_9_fu_624_p4 <= bitcast_ln28_4_fu_620_p1(30 downto 23);
    tmp_fu_503_p3 <= (select_ln25_1_reg_838 & ap_const_lv1_0);
    trunc_ln26_fu_310_p1 <= select_ln25_fu_282_p3(1 - 1 downto 0);
    trunc_ln28_1_fu_527_p1 <= bitcast_ln28_1_fu_514_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_544_p1 <= bitcast_ln28_2_fu_531_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_616_p1 <= bitcast_ln28_3_fu_602_p1(23 - 1 downto 0);
    trunc_ln28_4_fu_634_p1 <= bitcast_ln28_4_fu_620_p1(23 - 1 downto 0);
    trunc_ln28_5_fu_735_p1 <= bitcast_ln28_5_fu_721_p1(23 - 1 downto 0);
    trunc_ln28_6_fu_752_p1 <= bitcast_ln28_6_fu_739_p1(23 - 1 downto 0);
    trunc_ln28_fu_458_p1 <= bitcast_ln28_fu_444_p1(23 - 1 downto 0);
    xor_ln28_fu_252_p2 <= (icmp_ln13_fu_226_p2 xor ap_const_lv1_1);
    zext_ln28_1_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_5_fu_240_p3),7));
    zext_ln28_2_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_336_p4),64));
    zext_ln28_3_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_432_p4),64));
    zext_ln28_4_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_373_p4),7));
    zext_ln28_5_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_387_p2),64));
    zext_ln28_6_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_398_p4),7));
    zext_ln28_7_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_reg_864_pp0_iter1_reg),64));
    zext_ln28_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_5_reg_825),5));
    zext_ln35_1_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_reg_832),4));
    zext_ln35_2_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_reg_908),64));
    zext_ln35_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_503_p3),4));
end behav;
