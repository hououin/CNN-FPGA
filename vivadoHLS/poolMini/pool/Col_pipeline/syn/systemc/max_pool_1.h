// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_1_HH_
#define _max_pool_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "max_pool_1_fcmp_3bkb.h"

namespace ap_rtl {

struct max_pool_1 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > conv_1_out_address0;
    sc_out< sc_logic > conv_1_out_ce0;
    sc_in< sc_lv<32> > conv_1_out_q0;
    sc_out< sc_lv<5> > conv_1_out_address1;
    sc_out< sc_logic > conv_1_out_ce1;
    sc_in< sc_lv<32> > conv_1_out_q1;
    sc_out< sc_lv<3> > max_pool_1_out_address0;
    sc_out< sc_logic > max_pool_1_out_ce0;
    sc_out< sc_logic > max_pool_1_out_we0;
    sc_out< sc_lv<32> > max_pool_1_out_d0;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    max_pool_1(sc_module_name name);
    SC_HAS_PROCESS(max_pool_1);

    ~max_pool_1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    max_pool_1_fcmp_3bkb<1,1,32,32,1>* max_pool_1_fcmp_3bkb_U1;
    max_pool_1_fcmp_3bkb<1,1,32,32,1>* max_pool_1_fcmp_3bkb_U2;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > indvar_flatten21_reg_130;
    sc_signal< sc_lv<2> > f_0_reg_141;
    sc_signal< sc_lv<4> > indvar_flatten_reg_152;
    sc_signal< sc_lv<2> > r_0_reg_163;
    sc_signal< sc_lv<2> > c_0_reg_174;
    sc_signal< sc_lv<1> > icmp_ln10_fu_208_p2;
    sc_signal< sc_lv<1> > icmp_ln10_reg_816;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln10_reg_816_pp0_iter1_reg;
    sc_signal< sc_lv<4> > add_ln10_fu_214_p2;
    sc_signal< sc_lv<4> > add_ln10_reg_820;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > select_ln28_5_fu_240_p3;
    sc_signal< sc_lv<2> > select_ln28_5_reg_825;
    sc_signal< sc_lv<2> > select_ln25_fu_282_p3;
    sc_signal< sc_lv<2> > select_ln25_reg_832;
    sc_signal< sc_lv<2> > select_ln25_1_fu_296_p3;
    sc_signal< sc_lv<2> > select_ln25_1_reg_838;
    sc_signal< sc_lv<1> > trunc_ln26_fu_310_p1;
    sc_signal< sc_lv<1> > trunc_ln26_reg_844;
    sc_signal< sc_lv<2> > select_ln25_3_fu_359_p3;
    sc_signal< sc_lv<2> > select_ln25_3_reg_854;
    sc_signal< sc_lv<7> > add_ln28_1_fu_412_p2;
    sc_signal< sc_lv<7> > add_ln28_1_reg_864;
    sc_signal< sc_lv<7> > add_ln28_1_reg_864_pp0_iter1_reg;
    sc_signal< sc_lv<4> > select_ln13_fu_424_p3;
    sc_signal< sc_lv<4> > select_ln13_reg_869;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<32> > select_ln28_fu_486_p3;
    sc_signal< sc_lv<32> > select_ln28_reg_879;
    sc_signal< sc_lv<32> > conv_1_out_load_1_reg_885;
    sc_signal< sc_lv<1> > grp_fu_191_p2;
    sc_signal< sc_lv<1> > tmp_7_reg_891;
    sc_signal< sc_lv<2> > c_fu_495_p2;
    sc_signal< sc_lv<2> > c_reg_896;
    sc_signal< sc_lv<32> > select_ln28_2_fu_686_p3;
    sc_signal< sc_lv<32> > select_ln28_2_reg_901;
    sc_signal< sc_lv<5> > add_ln35_1_fu_711_p2;
    sc_signal< sc_lv<5> > add_ln35_1_reg_908;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<4> > ap_phi_mux_indvar_flatten21_phi_fu_134_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<2> > ap_phi_mux_f_0_phi_fu_145_p4;
    sc_signal< sc_lv<4> > ap_phi_mux_indvar_flatten_phi_fu_156_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_r_0_phi_fu_167_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_c_0_phi_fu_178_p4;
    sc_signal< sc_lv<64> > zext_ln28_2_fu_346_p1;
    sc_signal< sc_lv<64> > zext_ln28_5_fu_393_p1;
    sc_signal< sc_lv<64> > zext_ln28_3_fu_439_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > zext_ln28_7_fu_717_p1;
    sc_signal< sc_lv<64> > zext_ln35_2_fu_812_p1;
    sc_signal< sc_lv<32> > grp_fu_185_p1;
    sc_signal< sc_lv<32> > select_ln28_1_fu_595_p3;
    sc_signal< sc_lv<32> > grp_fu_191_p1;
    sc_signal< sc_lv<2> > shl_ln25_fu_196_p2;
    sc_signal< sc_lv<1> > icmp_ln13_fu_226_p2;
    sc_signal< sc_lv<2> > f_fu_220_p2;
    sc_signal< sc_lv<1> > icmp_ln16_fu_258_p2;
    sc_signal< sc_lv<1> > xor_ln28_fu_252_p2;
    sc_signal< sc_lv<2> > select_ln28_4_fu_232_p3;
    sc_signal< sc_lv<1> > and_ln28_7_fu_264_p2;
    sc_signal< sc_lv<1> > or_ln25_1_fu_276_p2;
    sc_signal< sc_lv<2> > r_fu_270_p2;
    sc_signal< sc_lv<2> > shl_ln25_1_fu_290_p2;
    sc_signal< sc_lv<2> > select_ln28_6_fu_320_p3;
    sc_signal< sc_lv<2> > select_ln25_2_fu_328_p3;
    sc_signal< sc_lv<5> > tmp_1_fu_336_p4;
    sc_signal< sc_lv<2> > or_ln25_fu_202_p2;
    sc_signal< sc_lv<2> > or_ln25_2_fu_304_p2;
    sc_signal< sc_lv<2> > select_ln28_7_fu_351_p3;
    sc_signal< sc_lv<2> > shl_ln26_fu_314_p2;
    sc_signal< sc_lv<2> > or_ln26_fu_367_p2;
    sc_signal< sc_lv<5> > tmp_14_fu_373_p4;
    sc_signal< sc_lv<7> > zext_ln28_4_fu_383_p1;
    sc_signal< sc_lv<7> > zext_ln28_1_fu_248_p1;
    sc_signal< sc_lv<7> > add_ln28_fu_387_p2;
    sc_signal< sc_lv<5> > tmp_15_fu_398_p4;
    sc_signal< sc_lv<7> > zext_ln28_6_fu_408_p1;
    sc_signal< sc_lv<4> > add_ln13_fu_418_p2;
    sc_signal< sc_lv<5> > tmp_13_fu_432_p4;
    sc_signal< sc_lv<32> > bitcast_ln28_fu_444_p1;
    sc_signal< sc_lv<8> > tmp_3_fu_448_p4;
    sc_signal< sc_lv<23> > trunc_ln28_fu_458_p1;
    sc_signal< sc_lv<1> > icmp_ln28_1_fu_468_p2;
    sc_signal< sc_lv<1> > icmp_ln28_fu_462_p2;
    sc_signal< sc_lv<1> > or_ln28_fu_474_p2;
    sc_signal< sc_lv<1> > grp_fu_185_p2;
    sc_signal< sc_lv<1> > and_ln28_fu_480_p2;
    sc_signal< sc_lv<3> > tmp_fu_503_p3;
    sc_signal< sc_lv<32> > bitcast_ln28_1_fu_514_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_2_fu_531_p1;
    sc_signal< sc_lv<8> > tmp_5_fu_517_p4;
    sc_signal< sc_lv<23> > trunc_ln28_1_fu_527_p1;
    sc_signal< sc_lv<1> > icmp_ln28_3_fu_554_p2;
    sc_signal< sc_lv<1> > icmp_ln28_2_fu_548_p2;
    sc_signal< sc_lv<8> > tmp_6_fu_534_p4;
    sc_signal< sc_lv<23> > trunc_ln28_2_fu_544_p1;
    sc_signal< sc_lv<1> > icmp_ln28_5_fu_572_p2;
    sc_signal< sc_lv<1> > icmp_ln28_4_fu_566_p2;
    sc_signal< sc_lv<1> > or_ln28_1_fu_560_p2;
    sc_signal< sc_lv<1> > or_ln28_2_fu_578_p2;
    sc_signal< sc_lv<1> > and_ln28_1_fu_584_p2;
    sc_signal< sc_lv<1> > and_ln28_2_fu_590_p2;
    sc_signal< sc_lv<32> > bitcast_ln28_3_fu_602_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_4_fu_620_p1;
    sc_signal< sc_lv<8> > tmp_8_fu_606_p4;
    sc_signal< sc_lv<23> > trunc_ln28_3_fu_616_p1;
    sc_signal< sc_lv<1> > icmp_ln28_7_fu_644_p2;
    sc_signal< sc_lv<1> > icmp_ln28_6_fu_638_p2;
    sc_signal< sc_lv<8> > tmp_9_fu_624_p4;
    sc_signal< sc_lv<23> > trunc_ln28_4_fu_634_p1;
    sc_signal< sc_lv<1> > icmp_ln28_9_fu_662_p2;
    sc_signal< sc_lv<1> > icmp_ln28_8_fu_656_p2;
    sc_signal< sc_lv<1> > or_ln28_3_fu_650_p2;
    sc_signal< sc_lv<1> > or_ln28_4_fu_668_p2;
    sc_signal< sc_lv<1> > and_ln28_3_fu_674_p2;
    sc_signal< sc_lv<1> > and_ln28_4_fu_680_p2;
    sc_signal< sc_lv<4> > zext_ln35_fu_510_p1;
    sc_signal< sc_lv<4> > zext_ln35_1_fu_694_p1;
    sc_signal< sc_lv<4> > add_ln35_fu_697_p2;
    sc_signal< sc_lv<5> > tmp_25_cast_fu_703_p3;
    sc_signal< sc_lv<5> > zext_ln28_fu_500_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_5_fu_721_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_6_fu_739_p1;
    sc_signal< sc_lv<8> > tmp_10_fu_725_p4;
    sc_signal< sc_lv<23> > trunc_ln28_5_fu_735_p1;
    sc_signal< sc_lv<1> > icmp_ln28_11_fu_762_p2;
    sc_signal< sc_lv<1> > icmp_ln28_10_fu_756_p2;
    sc_signal< sc_lv<8> > tmp_11_fu_742_p4;
    sc_signal< sc_lv<23> > trunc_ln28_6_fu_752_p1;
    sc_signal< sc_lv<1> > icmp_ln28_13_fu_780_p2;
    sc_signal< sc_lv<1> > icmp_ln28_12_fu_774_p2;
    sc_signal< sc_lv<1> > or_ln28_5_fu_768_p2;
    sc_signal< sc_lv<1> > or_ln28_6_fu_786_p2;
    sc_signal< sc_lv<1> > and_ln28_5_fu_792_p2;
    sc_signal< sc_lv<1> > and_ln28_6_fu_798_p2;
    sc_signal< bool > ap_block_pp0_stage1_00001;
    sc_signal< bool > ap_block_pp0_stage0_00001;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_800000;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln10_fu_214_p2();
    void thread_add_ln13_fu_418_p2();
    void thread_add_ln28_1_fu_412_p2();
    void thread_add_ln28_fu_387_p2();
    void thread_add_ln35_1_fu_711_p2();
    void thread_add_ln35_fu_697_p2();
    void thread_and_ln28_1_fu_584_p2();
    void thread_and_ln28_2_fu_590_p2();
    void thread_and_ln28_3_fu_674_p2();
    void thread_and_ln28_4_fu_680_p2();
    void thread_and_ln28_5_fu_792_p2();
    void thread_and_ln28_6_fu_798_p2();
    void thread_and_ln28_7_fu_264_p2();
    void thread_and_ln28_fu_480_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_00001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_00001();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_c_0_phi_fu_178_p4();
    void thread_ap_phi_mux_f_0_phi_fu_145_p4();
    void thread_ap_phi_mux_indvar_flatten21_phi_fu_134_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_156_p4();
    void thread_ap_phi_mux_r_0_phi_fu_167_p4();
    void thread_ap_ready();
    void thread_bitcast_ln28_1_fu_514_p1();
    void thread_bitcast_ln28_2_fu_531_p1();
    void thread_bitcast_ln28_3_fu_602_p1();
    void thread_bitcast_ln28_4_fu_620_p1();
    void thread_bitcast_ln28_5_fu_721_p1();
    void thread_bitcast_ln28_6_fu_739_p1();
    void thread_bitcast_ln28_fu_444_p1();
    void thread_c_fu_495_p2();
    void thread_conv_1_out_address0();
    void thread_conv_1_out_address1();
    void thread_conv_1_out_ce0();
    void thread_conv_1_out_ce1();
    void thread_f_fu_220_p2();
    void thread_grp_fu_185_p1();
    void thread_grp_fu_191_p1();
    void thread_icmp_ln10_fu_208_p2();
    void thread_icmp_ln13_fu_226_p2();
    void thread_icmp_ln16_fu_258_p2();
    void thread_icmp_ln28_10_fu_756_p2();
    void thread_icmp_ln28_11_fu_762_p2();
    void thread_icmp_ln28_12_fu_774_p2();
    void thread_icmp_ln28_13_fu_780_p2();
    void thread_icmp_ln28_1_fu_468_p2();
    void thread_icmp_ln28_2_fu_548_p2();
    void thread_icmp_ln28_3_fu_554_p2();
    void thread_icmp_ln28_4_fu_566_p2();
    void thread_icmp_ln28_5_fu_572_p2();
    void thread_icmp_ln28_6_fu_638_p2();
    void thread_icmp_ln28_7_fu_644_p2();
    void thread_icmp_ln28_8_fu_656_p2();
    void thread_icmp_ln28_9_fu_662_p2();
    void thread_icmp_ln28_fu_462_p2();
    void thread_max_pool_1_out_address0();
    void thread_max_pool_1_out_ce0();
    void thread_max_pool_1_out_d0();
    void thread_max_pool_1_out_we0();
    void thread_or_ln25_1_fu_276_p2();
    void thread_or_ln25_2_fu_304_p2();
    void thread_or_ln25_fu_202_p2();
    void thread_or_ln26_fu_367_p2();
    void thread_or_ln28_1_fu_560_p2();
    void thread_or_ln28_2_fu_578_p2();
    void thread_or_ln28_3_fu_650_p2();
    void thread_or_ln28_4_fu_668_p2();
    void thread_or_ln28_5_fu_768_p2();
    void thread_or_ln28_6_fu_786_p2();
    void thread_or_ln28_fu_474_p2();
    void thread_r_fu_270_p2();
    void thread_select_ln13_fu_424_p3();
    void thread_select_ln25_1_fu_296_p3();
    void thread_select_ln25_2_fu_328_p3();
    void thread_select_ln25_3_fu_359_p3();
    void thread_select_ln25_fu_282_p3();
    void thread_select_ln28_1_fu_595_p3();
    void thread_select_ln28_2_fu_686_p3();
    void thread_select_ln28_4_fu_232_p3();
    void thread_select_ln28_5_fu_240_p3();
    void thread_select_ln28_6_fu_320_p3();
    void thread_select_ln28_7_fu_351_p3();
    void thread_select_ln28_fu_486_p3();
    void thread_shl_ln25_1_fu_290_p2();
    void thread_shl_ln25_fu_196_p2();
    void thread_shl_ln26_fu_314_p2();
    void thread_tmp_10_fu_725_p4();
    void thread_tmp_11_fu_742_p4();
    void thread_tmp_13_fu_432_p4();
    void thread_tmp_14_fu_373_p4();
    void thread_tmp_15_fu_398_p4();
    void thread_tmp_1_fu_336_p4();
    void thread_tmp_25_cast_fu_703_p3();
    void thread_tmp_3_fu_448_p4();
    void thread_tmp_5_fu_517_p4();
    void thread_tmp_6_fu_534_p4();
    void thread_tmp_8_fu_606_p4();
    void thread_tmp_9_fu_624_p4();
    void thread_tmp_fu_503_p3();
    void thread_trunc_ln26_fu_310_p1();
    void thread_trunc_ln28_1_fu_527_p1();
    void thread_trunc_ln28_2_fu_544_p1();
    void thread_trunc_ln28_3_fu_616_p1();
    void thread_trunc_ln28_4_fu_634_p1();
    void thread_trunc_ln28_5_fu_735_p1();
    void thread_trunc_ln28_6_fu_752_p1();
    void thread_trunc_ln28_fu_458_p1();
    void thread_xor_ln28_fu_252_p2();
    void thread_zext_ln28_1_fu_248_p1();
    void thread_zext_ln28_2_fu_346_p1();
    void thread_zext_ln28_3_fu_439_p1();
    void thread_zext_ln28_4_fu_383_p1();
    void thread_zext_ln28_5_fu_393_p1();
    void thread_zext_ln28_6_fu_408_p1();
    void thread_zext_ln28_7_fu_717_p1();
    void thread_zext_ln28_fu_500_p1();
    void thread_zext_ln35_1_fu_694_p1();
    void thread_zext_ln35_2_fu_812_p1();
    void thread_zext_ln35_fu_510_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
