// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.830000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=157,HLS_SYN_LUT=854,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        conv_1_out_address1,
        conv_1_out_ce1,
        conv_1_out_q1,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [4:0] conv_1_out_address1;
output   conv_1_out_ce1;
input  [31:0] conv_1_out_q1;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] conv_1_out_address0;
reg conv_1_out_ce0;
reg[4:0] conv_1_out_address1;
reg conv_1_out_ce1;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] indvar_flatten21_reg_130;
reg   [1:0] f_0_reg_141;
reg   [3:0] indvar_flatten_reg_152;
reg   [1:0] r_0_reg_163;
reg   [1:0] c_0_reg_174;
wire   [0:0] icmp_ln10_fu_208_p2;
reg   [0:0] icmp_ln10_reg_816;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_816_pp0_iter1_reg;
wire   [3:0] add_ln10_fu_214_p2;
reg   [3:0] add_ln10_reg_820;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln28_5_fu_240_p3;
reg   [1:0] select_ln28_5_reg_825;
wire   [1:0] select_ln25_fu_282_p3;
reg   [1:0] select_ln25_reg_832;
wire   [1:0] select_ln25_1_fu_296_p3;
reg   [1:0] select_ln25_1_reg_838;
wire   [0:0] trunc_ln26_fu_310_p1;
reg   [0:0] trunc_ln26_reg_844;
wire   [1:0] select_ln25_3_fu_359_p3;
reg   [1:0] select_ln25_3_reg_854;
wire   [6:0] add_ln28_1_fu_412_p2;
reg   [6:0] add_ln28_1_reg_864;
reg   [6:0] add_ln28_1_reg_864_pp0_iter1_reg;
wire   [3:0] select_ln13_fu_424_p3;
reg   [3:0] select_ln13_reg_869;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] select_ln28_fu_486_p3;
reg   [31:0] select_ln28_reg_879;
reg   [31:0] conv_1_out_load_1_reg_885;
wire   [0:0] grp_fu_191_p2;
reg   [0:0] tmp_7_reg_891;
wire   [1:0] c_fu_495_p2;
reg   [1:0] c_reg_896;
wire   [31:0] select_ln28_2_fu_686_p3;
reg   [31:0] select_ln28_2_reg_901;
wire   [4:0] add_ln35_1_fu_711_p2;
reg   [4:0] add_ln35_1_reg_908;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [3:0] ap_phi_mux_indvar_flatten21_phi_fu_134_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_f_0_phi_fu_145_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_156_p4;
reg   [1:0] ap_phi_mux_r_0_phi_fu_167_p4;
reg   [1:0] ap_phi_mux_c_0_phi_fu_178_p4;
wire   [63:0] zext_ln28_2_fu_346_p1;
wire   [63:0] zext_ln28_5_fu_393_p1;
wire   [63:0] zext_ln28_3_fu_439_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln28_7_fu_717_p1;
wire   [63:0] zext_ln35_2_fu_812_p1;
reg   [31:0] grp_fu_185_p1;
wire   [31:0] select_ln28_1_fu_595_p3;
reg   [31:0] grp_fu_191_p1;
wire   [1:0] shl_ln25_fu_196_p2;
wire   [0:0] icmp_ln13_fu_226_p2;
wire   [1:0] f_fu_220_p2;
wire   [0:0] icmp_ln16_fu_258_p2;
wire   [0:0] xor_ln28_fu_252_p2;
wire   [1:0] select_ln28_4_fu_232_p3;
wire   [0:0] and_ln28_7_fu_264_p2;
wire   [0:0] or_ln25_1_fu_276_p2;
wire   [1:0] r_fu_270_p2;
wire   [1:0] shl_ln25_1_fu_290_p2;
wire   [1:0] select_ln28_6_fu_320_p3;
wire   [1:0] select_ln25_2_fu_328_p3;
wire   [4:0] tmp_1_fu_336_p4;
wire   [1:0] or_ln25_fu_202_p2;
wire   [1:0] or_ln25_2_fu_304_p2;
wire   [1:0] select_ln28_7_fu_351_p3;
wire   [1:0] shl_ln26_fu_314_p2;
wire   [1:0] or_ln26_fu_367_p2;
wire   [4:0] tmp_14_fu_373_p4;
wire   [6:0] zext_ln28_4_fu_383_p1;
wire   [6:0] zext_ln28_1_fu_248_p1;
wire   [6:0] add_ln28_fu_387_p2;
wire   [4:0] tmp_15_fu_398_p4;
wire   [6:0] zext_ln28_6_fu_408_p1;
wire   [3:0] add_ln13_fu_418_p2;
wire   [4:0] tmp_13_fu_432_p4;
wire   [31:0] bitcast_ln28_fu_444_p1;
wire   [7:0] tmp_3_fu_448_p4;
wire   [22:0] trunc_ln28_fu_458_p1;
wire   [0:0] icmp_ln28_1_fu_468_p2;
wire   [0:0] icmp_ln28_fu_462_p2;
wire   [0:0] or_ln28_fu_474_p2;
wire   [0:0] grp_fu_185_p2;
wire   [0:0] and_ln28_fu_480_p2;
wire   [2:0] tmp_fu_503_p3;
wire   [31:0] bitcast_ln28_1_fu_514_p1;
wire   [31:0] bitcast_ln28_2_fu_531_p1;
wire   [7:0] tmp_5_fu_517_p4;
wire   [22:0] trunc_ln28_1_fu_527_p1;
wire   [0:0] icmp_ln28_3_fu_554_p2;
wire   [0:0] icmp_ln28_2_fu_548_p2;
wire   [7:0] tmp_6_fu_534_p4;
wire   [22:0] trunc_ln28_2_fu_544_p1;
wire   [0:0] icmp_ln28_5_fu_572_p2;
wire   [0:0] icmp_ln28_4_fu_566_p2;
wire   [0:0] or_ln28_1_fu_560_p2;
wire   [0:0] or_ln28_2_fu_578_p2;
wire   [0:0] and_ln28_1_fu_584_p2;
wire   [0:0] and_ln28_2_fu_590_p2;
wire   [31:0] bitcast_ln28_3_fu_602_p1;
wire   [31:0] bitcast_ln28_4_fu_620_p1;
wire   [7:0] tmp_8_fu_606_p4;
wire   [22:0] trunc_ln28_3_fu_616_p1;
wire   [0:0] icmp_ln28_7_fu_644_p2;
wire   [0:0] icmp_ln28_6_fu_638_p2;
wire   [7:0] tmp_9_fu_624_p4;
wire   [22:0] trunc_ln28_4_fu_634_p1;
wire   [0:0] icmp_ln28_9_fu_662_p2;
wire   [0:0] icmp_ln28_8_fu_656_p2;
wire   [0:0] or_ln28_3_fu_650_p2;
wire   [0:0] or_ln28_4_fu_668_p2;
wire   [0:0] and_ln28_3_fu_674_p2;
wire   [0:0] and_ln28_4_fu_680_p2;
wire   [3:0] zext_ln35_fu_510_p1;
wire   [3:0] zext_ln35_1_fu_694_p1;
wire   [3:0] add_ln35_fu_697_p2;
wire   [4:0] tmp_25_cast_fu_703_p3;
wire   [4:0] zext_ln28_fu_500_p1;
wire   [31:0] bitcast_ln28_5_fu_721_p1;
wire   [31:0] bitcast_ln28_6_fu_739_p1;
wire   [7:0] tmp_10_fu_725_p4;
wire   [22:0] trunc_ln28_5_fu_735_p1;
wire   [0:0] icmp_ln28_11_fu_762_p2;
wire   [0:0] icmp_ln28_10_fu_756_p2;
wire   [7:0] tmp_11_fu_742_p4;
wire   [22:0] trunc_ln28_6_fu_752_p1;
wire   [0:0] icmp_ln28_13_fu_780_p2;
wire   [0:0] icmp_ln28_12_fu_774_p2;
wire   [0:0] or_ln28_5_fu_768_p2;
wire   [0:0] or_ln28_6_fu_786_p2;
wire   [0:0] and_ln28_5_fu_792_p2;
wire   [0:0] and_ln28_6_fu_798_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(grp_fu_185_p1),
    .opcode(5'd2),
    .dout(grp_fu_185_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(conv_1_out_q1),
    .din1(grp_fu_191_p1),
    .opcode(5'd2),
    .dout(grp_fu_191_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_174 <= c_reg_896;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_174 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_141 <= select_ln28_5_reg_825;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_141 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten21_reg_130 <= add_ln10_reg_820;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten21_reg_130 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_152 <= select_ln13_reg_869;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_152 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_163 <= select_ln25_1_reg_838;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_163 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln10_reg_820 <= add_ln10_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln28_1_reg_864 <= add_ln28_1_fu_412_p2;
        select_ln25_3_reg_854[1] <= select_ln25_3_fu_359_p3[1];
        select_ln25_reg_832 <= select_ln25_fu_282_p3;
        trunc_ln26_reg_844 <= trunc_ln26_fu_310_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln28_1_reg_864_pp0_iter1_reg <= add_ln28_1_reg_864;
        icmp_ln10_reg_816 <= icmp_ln10_fu_208_p2;
        icmp_ln10_reg_816_pp0_iter1_reg <= icmp_ln10_reg_816;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln35_1_reg_908 <= add_ln35_1_fu_711_p2;
        select_ln28_2_reg_901 <= select_ln28_2_fu_686_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_816 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        c_reg_896 <= c_fu_495_p2;
        conv_1_out_load_1_reg_885 <= conv_1_out_q1;
        tmp_7_reg_891 <= grp_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln13_reg_869 <= select_ln13_fu_424_p3;
        select_ln25_1_reg_838 <= select_ln25_1_fu_296_p3;
        select_ln28_5_reg_825 <= select_ln28_5_fu_240_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln28_reg_879 <= select_ln28_fu_486_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_208_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_178_p4 = c_reg_896;
    end else begin
        ap_phi_mux_c_0_phi_fu_178_p4 = c_0_reg_174;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_145_p4 = select_ln28_5_reg_825;
    end else begin
        ap_phi_mux_f_0_phi_fu_145_p4 = f_0_reg_141;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten21_phi_fu_134_p4 = add_ln10_reg_820;
    end else begin
        ap_phi_mux_indvar_flatten21_phi_fu_134_p4 = indvar_flatten21_reg_130;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_156_p4 = select_ln13_reg_869;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_156_p4 = indvar_flatten_reg_152;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_816 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_167_p4 = select_ln25_1_reg_838;
    end else begin
        ap_phi_mux_r_0_phi_fu_167_p4 = r_0_reg_163;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            conv_1_out_address0 = zext_ln28_3_fu_439_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_1_out_address0 = zext_ln28_2_fu_346_p1;
        end else begin
            conv_1_out_address0 = 'bx;
        end
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        conv_1_out_address1 = zext_ln28_7_fu_717_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        conv_1_out_address1 = zext_ln28_5_fu_393_p1;
    end else begin
        conv_1_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_1_out_ce1 = 1'b1;
    end else begin
        conv_1_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_185_p1 = select_ln28_1_fu_595_p3;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_185_p1 = 32'd8388608;
    end else begin
        grp_fu_185_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_191_p1 = select_ln28_2_reg_901;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_191_p1 = select_ln28_fu_486_p3;
    end else begin
        grp_fu_191_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_816_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_208_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((icmp_ln10_fu_208_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_214_p2 = (4'd1 + ap_phi_mux_indvar_flatten21_phi_fu_134_p4);

assign add_ln13_fu_418_p2 = (4'd1 + ap_phi_mux_indvar_flatten_phi_fu_156_p4);

assign add_ln28_1_fu_412_p2 = (zext_ln28_6_fu_408_p1 + zext_ln28_1_fu_248_p1);

assign add_ln28_fu_387_p2 = (zext_ln28_4_fu_383_p1 + zext_ln28_1_fu_248_p1);

assign add_ln35_1_fu_711_p2 = (tmp_25_cast_fu_703_p3 + zext_ln28_fu_500_p1);

assign add_ln35_fu_697_p2 = (zext_ln35_fu_510_p1 + zext_ln35_1_fu_694_p1);

assign and_ln28_1_fu_584_p2 = (or_ln28_2_fu_578_p2 & or_ln28_1_fu_560_p2);

assign and_ln28_2_fu_590_p2 = (tmp_7_reg_891 & and_ln28_1_fu_584_p2);

assign and_ln28_3_fu_674_p2 = (or_ln28_4_fu_668_p2 & or_ln28_3_fu_650_p2);

assign and_ln28_4_fu_680_p2 = (grp_fu_185_p2 & and_ln28_3_fu_674_p2);

assign and_ln28_5_fu_792_p2 = (or_ln28_6_fu_786_p2 & or_ln28_5_fu_768_p2);

assign and_ln28_6_fu_798_p2 = (grp_fu_191_p2 & and_ln28_5_fu_792_p2);

assign and_ln28_7_fu_264_p2 = (xor_ln28_fu_252_p2 & icmp_ln16_fu_258_p2);

assign and_ln28_fu_480_p2 = (or_ln28_fu_474_p2 & grp_fu_185_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_514_p1 = conv_1_out_load_1_reg_885;

assign bitcast_ln28_2_fu_531_p1 = select_ln28_reg_879;

assign bitcast_ln28_3_fu_602_p1 = conv_1_out_q0;

assign bitcast_ln28_4_fu_620_p1 = select_ln28_1_fu_595_p3;

assign bitcast_ln28_5_fu_721_p1 = conv_1_out_q1;

assign bitcast_ln28_6_fu_739_p1 = select_ln28_2_reg_901;

assign bitcast_ln28_fu_444_p1 = conv_1_out_q0;

assign c_fu_495_p2 = (2'd1 + select_ln25_reg_832);

assign f_fu_220_p2 = (2'd1 + ap_phi_mux_f_0_phi_fu_145_p4);

assign icmp_ln10_fu_208_p2 = ((ap_phi_mux_indvar_flatten21_phi_fu_134_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_226_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_156_p4 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_258_p2 = ((ap_phi_mux_c_0_phi_fu_178_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_756_p2 = ((tmp_10_fu_725_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_762_p2 = ((trunc_ln28_5_fu_735_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_12_fu_774_p2 = ((tmp_11_fu_742_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_13_fu_780_p2 = ((trunc_ln28_6_fu_752_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_468_p2 = ((trunc_ln28_fu_458_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_548_p2 = ((tmp_5_fu_517_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_554_p2 = ((trunc_ln28_1_fu_527_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_566_p2 = ((tmp_6_fu_534_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_572_p2 = ((trunc_ln28_2_fu_544_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_638_p2 = ((tmp_8_fu_606_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_644_p2 = ((trunc_ln28_3_fu_616_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_656_p2 = ((tmp_9_fu_624_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_662_p2 = ((trunc_ln28_4_fu_634_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_462_p2 = ((tmp_3_fu_448_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_2_fu_812_p1;

assign max_pool_1_out_d0 = ((and_ln28_6_fu_798_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_2_reg_901);

assign or_ln25_1_fu_276_p2 = (icmp_ln13_fu_226_p2 | and_ln28_7_fu_264_p2);

assign or_ln25_2_fu_304_p2 = (shl_ln25_1_fu_290_p2 | 2'd1);

assign or_ln25_fu_202_p2 = (shl_ln25_fu_196_p2 | 2'd1);

assign or_ln26_fu_367_p2 = (shl_ln26_fu_314_p2 | 2'd1);

assign or_ln28_1_fu_560_p2 = (icmp_ln28_3_fu_554_p2 | icmp_ln28_2_fu_548_p2);

assign or_ln28_2_fu_578_p2 = (icmp_ln28_5_fu_572_p2 | icmp_ln28_4_fu_566_p2);

assign or_ln28_3_fu_650_p2 = (icmp_ln28_7_fu_644_p2 | icmp_ln28_6_fu_638_p2);

assign or_ln28_4_fu_668_p2 = (icmp_ln28_9_fu_662_p2 | icmp_ln28_8_fu_656_p2);

assign or_ln28_5_fu_768_p2 = (icmp_ln28_11_fu_762_p2 | icmp_ln28_10_fu_756_p2);

assign or_ln28_6_fu_786_p2 = (icmp_ln28_13_fu_780_p2 | icmp_ln28_12_fu_774_p2);

assign or_ln28_fu_474_p2 = (icmp_ln28_fu_462_p2 | icmp_ln28_1_fu_468_p2);

assign r_fu_270_p2 = (2'd1 + select_ln28_4_fu_232_p3);

assign select_ln13_fu_424_p3 = ((icmp_ln13_fu_226_p2[0:0] === 1'b1) ? 4'd1 : add_ln13_fu_418_p2);

assign select_ln25_1_fu_296_p3 = ((and_ln28_7_fu_264_p2[0:0] === 1'b1) ? r_fu_270_p2 : select_ln28_4_fu_232_p3);

assign select_ln25_2_fu_328_p3 = ((and_ln28_7_fu_264_p2[0:0] === 1'b1) ? shl_ln25_1_fu_290_p2 : select_ln28_6_fu_320_p3);

assign select_ln25_3_fu_359_p3 = ((and_ln28_7_fu_264_p2[0:0] === 1'b1) ? or_ln25_2_fu_304_p2 : select_ln28_7_fu_351_p3);

assign select_ln25_fu_282_p3 = ((or_ln25_1_fu_276_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_c_0_phi_fu_178_p4);

assign select_ln28_1_fu_595_p3 = ((and_ln28_2_fu_590_p2[0:0] === 1'b1) ? conv_1_out_load_1_reg_885 : select_ln28_reg_879);

assign select_ln28_2_fu_686_p3 = ((and_ln28_4_fu_680_p2[0:0] === 1'b1) ? conv_1_out_q0 : select_ln28_1_fu_595_p3);

assign select_ln28_4_fu_232_p3 = ((icmp_ln13_fu_226_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_r_0_phi_fu_167_p4);

assign select_ln28_5_fu_240_p3 = ((icmp_ln13_fu_226_p2[0:0] === 1'b1) ? f_fu_220_p2 : ap_phi_mux_f_0_phi_fu_145_p4);

assign select_ln28_6_fu_320_p3 = ((icmp_ln13_fu_226_p2[0:0] === 1'b1) ? 2'd0 : shl_ln25_fu_196_p2);

assign select_ln28_7_fu_351_p3 = ((icmp_ln13_fu_226_p2[0:0] === 1'b1) ? 2'd1 : or_ln25_fu_202_p2);

assign select_ln28_fu_486_p3 = ((and_ln28_fu_480_p2[0:0] === 1'b1) ? conv_1_out_q0 : 32'd8388608);

assign shl_ln25_1_fu_290_p2 = r_fu_270_p2 << 2'd1;

assign shl_ln25_fu_196_p2 = ap_phi_mux_r_0_phi_fu_167_p4 << 2'd1;

assign shl_ln26_fu_314_p2 = select_ln25_fu_282_p3 << 2'd1;

assign tmp_10_fu_725_p4 = {{bitcast_ln28_5_fu_721_p1[30:23]}};

assign tmp_11_fu_742_p4 = {{bitcast_ln28_6_fu_739_p1[30:23]}};

assign tmp_13_fu_432_p4 = {{{select_ln25_3_reg_854}, {trunc_ln26_reg_844}}, {select_ln28_5_reg_825}};

assign tmp_14_fu_373_p4 = {{{select_ln25_2_fu_328_p3}, {or_ln26_fu_367_p2}}, {1'd0}};

assign tmp_15_fu_398_p4 = {{{select_ln25_3_fu_359_p3}, {or_ln26_fu_367_p2}}, {1'd0}};

assign tmp_1_fu_336_p4 = {{{select_ln25_2_fu_328_p3}, {trunc_ln26_fu_310_p1}}, {select_ln28_5_fu_240_p3}};

assign tmp_25_cast_fu_703_p3 = {{add_ln35_fu_697_p2}, {1'd0}};

assign tmp_3_fu_448_p4 = {{bitcast_ln28_fu_444_p1[30:23]}};

assign tmp_5_fu_517_p4 = {{bitcast_ln28_1_fu_514_p1[30:23]}};

assign tmp_6_fu_534_p4 = {{bitcast_ln28_2_fu_531_p1[30:23]}};

assign tmp_8_fu_606_p4 = {{bitcast_ln28_3_fu_602_p1[30:23]}};

assign tmp_9_fu_624_p4 = {{bitcast_ln28_4_fu_620_p1[30:23]}};

assign tmp_fu_503_p3 = {{select_ln25_1_reg_838}, {1'd0}};

assign trunc_ln26_fu_310_p1 = select_ln25_fu_282_p3[0:0];

assign trunc_ln28_1_fu_527_p1 = bitcast_ln28_1_fu_514_p1[22:0];

assign trunc_ln28_2_fu_544_p1 = bitcast_ln28_2_fu_531_p1[22:0];

assign trunc_ln28_3_fu_616_p1 = bitcast_ln28_3_fu_602_p1[22:0];

assign trunc_ln28_4_fu_634_p1 = bitcast_ln28_4_fu_620_p1[22:0];

assign trunc_ln28_5_fu_735_p1 = bitcast_ln28_5_fu_721_p1[22:0];

assign trunc_ln28_6_fu_752_p1 = bitcast_ln28_6_fu_739_p1[22:0];

assign trunc_ln28_fu_458_p1 = bitcast_ln28_fu_444_p1[22:0];

assign xor_ln28_fu_252_p2 = (icmp_ln13_fu_226_p2 ^ 1'd1);

assign zext_ln28_1_fu_248_p1 = select_ln28_5_fu_240_p3;

assign zext_ln28_2_fu_346_p1 = tmp_1_fu_336_p4;

assign zext_ln28_3_fu_439_p1 = tmp_13_fu_432_p4;

assign zext_ln28_4_fu_383_p1 = tmp_14_fu_373_p4;

assign zext_ln28_5_fu_393_p1 = add_ln28_fu_387_p2;

assign zext_ln28_6_fu_408_p1 = tmp_15_fu_398_p4;

assign zext_ln28_7_fu_717_p1 = add_ln28_1_reg_864_pp0_iter1_reg;

assign zext_ln28_fu_500_p1 = select_ln28_5_reg_825;

assign zext_ln35_1_fu_694_p1 = select_ln25_reg_832;

assign zext_ln35_2_fu_812_p1 = add_ln35_1_reg_908;

assign zext_ln35_fu_510_p1 = tmp_fu_503_p3;

always @ (posedge ap_clk) begin
    select_ln25_3_reg_854[0] <= 1'b1;
end

endmodule //max_pool_1
