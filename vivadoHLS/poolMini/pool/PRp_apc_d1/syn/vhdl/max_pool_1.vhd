-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_0_ce0 : OUT STD_LOGIC;
    conv_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_0_ce1 : OUT STD_LOGIC;
    conv_1_out_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_1_ce0 : OUT STD_LOGIC;
    conv_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_1_ce1 : OUT STD_LOGIC;
    conv_1_out_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_2_ce0 : OUT STD_LOGIC;
    conv_1_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_2_ce1 : OUT STD_LOGIC;
    conv_1_out_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_3_ce0 : OUT STD_LOGIC;
    conv_1_out_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_3_ce1 : OUT STD_LOGIC;
    conv_1_out_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    max_pool_1_out_0_ce0 : OUT STD_LOGIC;
    max_pool_1_out_0_we0 : OUT STD_LOGIC;
    max_pool_1_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    max_pool_1_out_1_ce0 : OUT STD_LOGIC;
    max_pool_1_out_1_we0 : OUT STD_LOGIC;
    max_pool_1_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.008000,HLS_SYN_LAT=49,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=132,HLS_SYN_LUT=650,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal max_0_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_274 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_fu_310_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln10_reg_763 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln13_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_768 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_3_fu_336_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_3_reg_773 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_fu_344_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_reg_778 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln25_fu_392_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_reg_783 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_1_fu_410_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_1_reg_789 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_2_fu_418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_2_reg_794 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_426_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln13_reg_798 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_1_out_0_addr_reg_803 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_out_1_addr_reg_808 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_out_2_addr_reg_813 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_out_3_addr_reg_818 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_out_0_addr_1_reg_823 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_out_1_addr_1_reg_828 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_out_2_addr_1_reg_833 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_out_3_addr_1_reg_838 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln20_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln20_reg_843_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_498_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln28_fu_504_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_reg_852 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_reg_852_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_509_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_fu_711_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal c_fu_741_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln13_1_fu_752_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal indvar_flatten15_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_215 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_226 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_reg_238 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_reg_249 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_1_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_8_fu_613_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_605_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_316_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_fu_298_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln25_fu_294_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_2_fu_328_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln28_5_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_380_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_1_fu_404_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_4_fu_348_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln25_1_fu_400_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_fu_434_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_444_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln26_fu_438_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln26_fu_460_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_466_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_2_fu_474_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_1_fu_478_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln28_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_525_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_535_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_543_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_553_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_2_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_3_fu_645_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_631_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_641_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_649_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_659_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_719_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_fu_726_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_730_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln13_1_fu_746_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component max_pool_1_mux_42cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_1_reg_858,
        din1 => max_0_reg_260,
        opcode => ap_const_lv5_2,
        dout => tmp_7_fu_285_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_8_fu_613_p6,
        din1 => select_ln28_fu_605_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_10_fu_290_p2);

    max_pool_1_mux_42cud_U3 : component max_pool_1_mux_42cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv_1_out_0_q0,
        din1 => conv_1_out_1_q0,
        din2 => conv_1_out_2_q0,
        din3 => conv_1_out_3_q0,
        din4 => add_ln28_reg_852,
        dout => tmp_1_fu_509_p6);

    max_pool_1_mux_42cud_U4 : component max_pool_1_mux_42cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => conv_1_out_0_q1,
        din1 => conv_1_out_1_q1,
        din2 => conv_1_out_2_q1,
        din3 => conv_1_out_3_q1,
        din4 => add_ln28_reg_852_pp0_iter1_reg,
        dout => tmp_8_fu_613_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln10_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln10_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                c_0_reg_249 <= c_fu_741_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_249 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                f_0_reg_215 <= select_ln28_3_reg_773;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_215 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten15_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten15_reg_204 <= add_ln10_reg_763;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten15_reg_204 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_226 <= select_ln13_1_fu_752_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_226 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    max_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_843_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                max_0_reg_260 <= select_ln28_1_fu_711_p3;
            elsif (((icmp_ln10_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_0_reg_260 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpr_0_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_492_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                mpr_0_reg_274 <= mpr_fu_498_p2;
            elsif (((icmp_ln10_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpr_0_reg_274 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_0_reg_238 <= select_ln13_reg_798;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_238 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln10_reg_763 <= add_ln10_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_492_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln28_reg_852 <= add_ln28_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln28_reg_852_pp0_iter1_reg <= add_ln28_reg_852;
                icmp_ln20_reg_843 <= icmp_ln20_fu_492_p2;
                icmp_ln20_reg_843_pp0_iter1_reg <= icmp_ln20_reg_843;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_1_out_0_addr_1_reg_823 <= zext_ln28_3_fu_484_p1(3 - 1 downto 0);
                conv_1_out_0_addr_reg_803 <= zext_ln28_1_fu_452_p1(3 - 1 downto 0);
                conv_1_out_1_addr_1_reg_828 <= zext_ln28_3_fu_484_p1(3 - 1 downto 0);
                conv_1_out_1_addr_reg_808 <= zext_ln28_1_fu_452_p1(3 - 1 downto 0);
                conv_1_out_2_addr_1_reg_833 <= zext_ln28_3_fu_484_p1(3 - 1 downto 0);
                conv_1_out_2_addr_reg_813 <= zext_ln28_1_fu_452_p1(3 - 1 downto 0);
                conv_1_out_3_addr_1_reg_838 <= zext_ln28_3_fu_484_p1(3 - 1 downto 0);
                conv_1_out_3_addr_reg_818 <= zext_ln28_1_fu_452_p1(3 - 1 downto 0);
                icmp_ln13_reg_768 <= icmp_ln13_fu_322_p2;
                select_ln13_reg_798 <= select_ln13_fu_426_p3;
                    select_ln25_1_reg_789(1) <= select_ln25_1_fu_410_p3(1);
                select_ln25_2_reg_794 <= select_ln25_2_fu_418_p3;
                select_ln25_reg_783 <= select_ln25_fu_392_p3;
                select_ln28_3_reg_773 <= select_ln28_3_fu_336_p3;
                    zext_ln28_reg_778(1 downto 0) <= zext_ln28_fu_344_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_843 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_858 <= tmp_1_fu_509_p6;
            end if;
        end if;
    end process;
    zext_ln28_reg_778(3 downto 2) <= "00";
    select_ln25_1_reg_789(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_304_p2, ap_CS_fsm_state2, icmp_ln20_fu_492_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln20_fu_492_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln20_fu_492_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten15_reg_204));
    add_ln13_1_fu_746_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_226) + unsigned(ap_const_lv4_1));
    add_ln28_1_fu_478_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_474_p1) + unsigned(zext_ln28_fu_344_p1));
    add_ln28_fu_504_p2 <= std_logic_vector(unsigned(select_ln25_1_reg_789) + unsigned(mpr_0_reg_274));
    add_ln35_fu_730_p2 <= std_logic_vector(unsigned(zext_ln28_reg_778) + unsigned(zext_ln35_fu_726_p1));
    and_ln28_1_fu_599_p2 <= (tmp_7_fu_285_p2 and and_ln28_fu_593_p2);
    and_ln28_2_fu_699_p2 <= (or_ln28_3_fu_693_p2 and or_ln28_2_fu_675_p2);
    and_ln28_3_fu_705_p2 <= (tmp_10_fu_290_p2 and and_ln28_2_fu_699_p2);
    and_ln28_4_fu_362_p2 <= (xor_ln28_fu_356_p2 and trunc_ln25_fu_294_p1);
    and_ln28_5_fu_374_p2 <= (xor_ln28_fu_356_p2 and icmp_ln16_fu_368_p2);
    and_ln28_fu_593_p2 <= (or_ln28_fu_569_p2 and or_ln28_1_fu_587_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln20_fu_492_p2)
    begin
        if ((icmp_ln20_fu_492_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln10_fu_304_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln10_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln10_fu_304_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln10_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_539_p1 <= max_0_reg_260;
    bitcast_ln28_2_fu_627_p1 <= tmp_8_fu_613_p6;
    bitcast_ln28_3_fu_645_p1 <= select_ln28_fu_605_p3;
    bitcast_ln28_fu_522_p1 <= tmp_1_reg_858;
    c_fu_741_p2 <= std_logic_vector(unsigned(select_ln25_reg_783) + unsigned(ap_const_lv2_1));
    conv_1_out_0_address0 <= conv_1_out_0_addr_reg_803;
    conv_1_out_0_address1 <= conv_1_out_0_addr_1_reg_823;

    conv_1_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_0_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_1_address0 <= conv_1_out_1_addr_reg_808;
    conv_1_out_1_address1 <= conv_1_out_1_addr_1_reg_828;

    conv_1_out_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_1_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_2_address0 <= conv_1_out_2_addr_reg_813;
    conv_1_out_2_address1 <= conv_1_out_2_addr_1_reg_833;

    conv_1_out_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_2_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_3_address0 <= conv_1_out_3_addr_reg_818;
    conv_1_out_3_address1 <= conv_1_out_3_addr_1_reg_838;

    conv_1_out_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_3_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_3_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_316_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(f_0_reg_215));
    icmp_ln10_fu_304_p2 <= "1" when (indvar_flatten15_reg_204 = ap_const_lv4_8) else "0";
    icmp_ln13_fu_322_p2 <= "1" when (indvar_flatten_reg_226 = ap_const_lv4_4) else "0";
    icmp_ln16_fu_368_p2 <= "1" when (c_0_reg_249 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_492_p2 <= "1" when (mpr_0_reg_274 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_563_p2 <= "1" when (trunc_ln28_fu_535_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_575_p2 <= "0" when (tmp_6_fu_543_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_581_p2 <= "1" when (trunc_ln28_1_fu_553_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_663_p2 <= "0" when (tmp_9_fu_631_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_669_p2 <= "1" when (trunc_ln28_2_fu_641_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_681_p2 <= "0" when (tmp_s_fu_649_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_687_p2 <= "1" when (trunc_ln28_3_fu_659_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_557_p2 <= "0" when (tmp_5_fu_525_p4 = ap_const_lv8_FF) else "1";
    max_pool_1_out_0_address0 <= zext_ln35_1_fu_735_p1(2 - 1 downto 0);

    max_pool_1_out_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_pool_1_out_0_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_0_d0 <= max_0_reg_260;

    max_pool_1_out_0_we0_assign_proc : process(select_ln25_2_reg_794, ap_CS_fsm_state6)
    begin
        if (((select_ln25_2_reg_794 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            max_pool_1_out_0_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_1_address0 <= zext_ln35_1_fu_735_p1(2 - 1 downto 0);

    max_pool_1_out_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_pool_1_out_1_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_1_d0 <= max_0_reg_260;

    max_pool_1_out_1_we0_assign_proc : process(select_ln25_2_reg_794, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (select_ln25_2_reg_794 = ap_const_lv1_1))) then 
            max_pool_1_out_1_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_498_p2 <= std_logic_vector(unsigned(mpr_0_reg_274) + unsigned(ap_const_lv2_1));
    or_ln25_fu_386_p2 <= (icmp_ln13_fu_322_p2 or and_ln28_5_fu_374_p2);
    or_ln26_fu_460_p2 <= (shl_ln26_fu_438_p2 or ap_const_lv2_1);
    or_ln28_1_fu_587_p2 <= (icmp_ln28_3_fu_581_p2 or icmp_ln28_2_fu_575_p2);
    or_ln28_2_fu_675_p2 <= (icmp_ln28_5_fu_669_p2 or icmp_ln28_4_fu_663_p2);
    or_ln28_3_fu_693_p2 <= (icmp_ln28_7_fu_687_p2 or icmp_ln28_6_fu_681_p2);
    or_ln28_fu_569_p2 <= (icmp_ln28_fu_557_p2 or icmp_ln28_1_fu_563_p2);
    r_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln28_2_fu_328_p3));
    select_ln13_1_fu_752_p3 <= 
        ap_const_lv4_1 when (icmp_ln13_reg_768(0) = '1') else 
        add_ln13_1_fu_746_p2;
    select_ln13_fu_426_p3 <= 
        r_fu_380_p2 when (and_ln28_5_fu_374_p2(0) = '1') else 
        select_ln28_2_fu_328_p3;
    select_ln25_1_fu_410_p3 <= 
        shl_ln25_1_fu_404_p2 when (and_ln28_5_fu_374_p2(0) = '1') else 
        select_ln28_4_fu_348_p3;
    select_ln25_2_fu_418_p3 <= 
        trunc_ln25_1_fu_400_p1 when (and_ln28_5_fu_374_p2(0) = '1') else 
        and_ln28_4_fu_362_p2;
    select_ln25_fu_392_p3 <= 
        ap_const_lv2_0 when (or_ln25_fu_386_p2(0) = '1') else 
        c_0_reg_249;
    select_ln28_1_fu_711_p3 <= 
        tmp_8_fu_613_p6 when (and_ln28_3_fu_705_p2(0) = '1') else 
        select_ln28_fu_605_p3;
    select_ln28_2_fu_328_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_322_p2(0) = '1') else 
        r_0_reg_238;
    select_ln28_3_fu_336_p3 <= 
        f_fu_316_p2 when (icmp_ln13_fu_322_p2(0) = '1') else 
        f_0_reg_215;
    select_ln28_4_fu_348_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_322_p2(0) = '1') else 
        shl_ln25_fu_298_p2;
    select_ln28_fu_605_p3 <= 
        tmp_1_reg_858 when (and_ln28_1_fu_599_p2(0) = '1') else 
        max_0_reg_260;
    shl_ln25_1_fu_404_p2 <= std_logic_vector(shift_left(unsigned(r_fu_380_p2),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln25_fu_298_p2 <= std_logic_vector(shift_left(unsigned(r_0_reg_238),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln26_fu_438_p2 <= std_logic_vector(shift_left(unsigned(select_ln25_fu_392_p3),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_11_fu_466_p3 <= (or_ln26_fu_460_p2 & ap_const_lv1_0);
    tmp_12_fu_719_p3 <= (select_ln25_reg_783 & ap_const_lv1_0);
    tmp_2_fu_444_p3 <= (trunc_ln26_fu_434_p1 & select_ln28_3_fu_336_p3);
    tmp_5_fu_525_p4 <= bitcast_ln28_fu_522_p1(30 downto 23);
    tmp_6_fu_543_p4 <= bitcast_ln28_1_fu_539_p1(30 downto 23);
    tmp_9_fu_631_p4 <= bitcast_ln28_2_fu_627_p1(30 downto 23);
    tmp_s_fu_649_p4 <= bitcast_ln28_3_fu_645_p1(30 downto 23);
    trunc_ln25_1_fu_400_p1 <= r_fu_380_p2(1 - 1 downto 0);
    trunc_ln25_fu_294_p1 <= r_0_reg_238(1 - 1 downto 0);
    trunc_ln26_fu_434_p1 <= select_ln25_fu_392_p3(1 - 1 downto 0);
    trunc_ln28_1_fu_553_p1 <= bitcast_ln28_1_fu_539_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_641_p1 <= bitcast_ln28_2_fu_627_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_659_p1 <= bitcast_ln28_3_fu_645_p1(23 - 1 downto 0);
    trunc_ln28_fu_535_p1 <= bitcast_ln28_fu_522_p1(23 - 1 downto 0);
    xor_ln28_fu_356_p2 <= (icmp_ln13_fu_322_p2 xor ap_const_lv1_1);
    zext_ln28_1_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_444_p3),64));
    zext_ln28_2_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_466_p3),4));
    zext_ln28_3_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_478_p2),64));
    zext_ln28_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_3_fu_336_p3),4));
    zext_ln35_1_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_730_p2),64));
    zext_ln35_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_719_p3),4));
end behav;
