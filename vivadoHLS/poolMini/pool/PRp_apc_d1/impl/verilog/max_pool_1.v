// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.008000,HLS_SYN_LAT=49,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=132,HLS_SYN_LUT=650,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_0_address1,
        conv_1_out_0_ce1,
        conv_1_out_0_q1,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_1_address1,
        conv_1_out_1_ce1,
        conv_1_out_1_q1,
        conv_1_out_2_address0,
        conv_1_out_2_ce0,
        conv_1_out_2_q0,
        conv_1_out_2_address1,
        conv_1_out_2_ce1,
        conv_1_out_2_q1,
        conv_1_out_3_address0,
        conv_1_out_3_ce0,
        conv_1_out_3_q0,
        conv_1_out_3_address1,
        conv_1_out_3_ce1,
        conv_1_out_3_q1,
        max_pool_1_out_0_address0,
        max_pool_1_out_0_ce0,
        max_pool_1_out_0_we0,
        max_pool_1_out_0_d0,
        max_pool_1_out_1_address0,
        max_pool_1_out_1_ce0,
        max_pool_1_out_1_we0,
        max_pool_1_out_1_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [2:0] conv_1_out_0_address1;
output   conv_1_out_0_ce1;
input  [31:0] conv_1_out_0_q1;
output  [2:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [2:0] conv_1_out_1_address1;
output   conv_1_out_1_ce1;
input  [31:0] conv_1_out_1_q1;
output  [2:0] conv_1_out_2_address0;
output   conv_1_out_2_ce0;
input  [31:0] conv_1_out_2_q0;
output  [2:0] conv_1_out_2_address1;
output   conv_1_out_2_ce1;
input  [31:0] conv_1_out_2_q1;
output  [2:0] conv_1_out_3_address0;
output   conv_1_out_3_ce0;
input  [31:0] conv_1_out_3_q0;
output  [2:0] conv_1_out_3_address1;
output   conv_1_out_3_ce1;
input  [31:0] conv_1_out_3_q1;
output  [1:0] max_pool_1_out_0_address0;
output   max_pool_1_out_0_ce0;
output   max_pool_1_out_0_we0;
output  [31:0] max_pool_1_out_0_d0;
output  [1:0] max_pool_1_out_1_address0;
output   max_pool_1_out_1_ce0;
output   max_pool_1_out_1_we0;
output  [31:0] max_pool_1_out_1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_0_ce0;
reg conv_1_out_0_ce1;
reg conv_1_out_1_ce0;
reg conv_1_out_1_ce1;
reg conv_1_out_2_ce0;
reg conv_1_out_2_ce1;
reg conv_1_out_3_ce0;
reg conv_1_out_3_ce1;
reg max_pool_1_out_0_ce0;
reg max_pool_1_out_0_we0;
reg max_pool_1_out_1_ce0;
reg max_pool_1_out_1_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] max_0_reg_260;
reg   [1:0] mpr_0_reg_274;
wire   [0:0] icmp_ln10_fu_304_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln10_fu_310_p2;
reg   [3:0] add_ln10_reg_763;
wire   [0:0] icmp_ln13_fu_322_p2;
reg   [0:0] icmp_ln13_reg_768;
wire   [1:0] select_ln28_3_fu_336_p3;
reg   [1:0] select_ln28_3_reg_773;
wire   [3:0] zext_ln28_fu_344_p1;
reg   [3:0] zext_ln28_reg_778;
wire   [1:0] select_ln25_fu_392_p3;
reg   [1:0] select_ln25_reg_783;
wire   [1:0] select_ln25_1_fu_410_p3;
reg   [1:0] select_ln25_1_reg_789;
wire   [0:0] select_ln25_2_fu_418_p3;
reg   [0:0] select_ln25_2_reg_794;
wire   [1:0] select_ln13_fu_426_p3;
reg   [1:0] select_ln13_reg_798;
reg   [2:0] conv_1_out_0_addr_reg_803;
reg   [2:0] conv_1_out_1_addr_reg_808;
reg   [2:0] conv_1_out_2_addr_reg_813;
reg   [2:0] conv_1_out_3_addr_reg_818;
reg   [2:0] conv_1_out_0_addr_1_reg_823;
reg   [2:0] conv_1_out_1_addr_1_reg_828;
reg   [2:0] conv_1_out_2_addr_1_reg_833;
reg   [2:0] conv_1_out_3_addr_1_reg_838;
wire   [0:0] icmp_ln20_fu_492_p2;
reg   [0:0] icmp_ln20_reg_843;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln20_reg_843_pp0_iter1_reg;
wire   [1:0] mpr_fu_498_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] add_ln28_fu_504_p2;
reg   [1:0] add_ln28_reg_852;
reg   [1:0] add_ln28_reg_852_pp0_iter1_reg;
wire   [31:0] tmp_1_fu_509_p6;
reg   [31:0] tmp_1_reg_858;
wire   [31:0] select_ln28_1_fu_711_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [1:0] c_fu_741_p2;
wire    ap_CS_fsm_state6;
wire   [3:0] select_ln13_1_fu_752_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] indvar_flatten15_reg_204;
reg   [1:0] f_0_reg_215;
reg   [3:0] indvar_flatten_reg_226;
reg   [1:0] r_0_reg_238;
reg   [1:0] c_0_reg_249;
wire   [63:0] zext_ln28_1_fu_452_p1;
wire   [63:0] zext_ln28_3_fu_484_p1;
wire   [63:0] zext_ln35_1_fu_735_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] tmp_8_fu_613_p6;
wire   [31:0] select_ln28_fu_605_p3;
wire   [1:0] f_fu_316_p2;
wire   [1:0] shl_ln25_fu_298_p2;
wire   [0:0] trunc_ln25_fu_294_p1;
wire   [0:0] xor_ln28_fu_356_p2;
wire   [0:0] icmp_ln16_fu_368_p2;
wire   [1:0] select_ln28_2_fu_328_p3;
wire   [0:0] and_ln28_5_fu_374_p2;
wire   [0:0] or_ln25_fu_386_p2;
wire   [1:0] r_fu_380_p2;
wire   [1:0] shl_ln25_1_fu_404_p2;
wire   [1:0] select_ln28_4_fu_348_p3;
wire   [0:0] trunc_ln25_1_fu_400_p1;
wire   [0:0] and_ln28_4_fu_362_p2;
wire   [0:0] trunc_ln26_fu_434_p1;
wire   [2:0] tmp_2_fu_444_p3;
wire   [1:0] shl_ln26_fu_438_p2;
wire   [1:0] or_ln26_fu_460_p2;
wire   [2:0] tmp_11_fu_466_p3;
wire   [3:0] zext_ln28_2_fu_474_p1;
wire   [3:0] add_ln28_1_fu_478_p2;
wire   [31:0] bitcast_ln28_fu_522_p1;
wire   [31:0] bitcast_ln28_1_fu_539_p1;
wire   [7:0] tmp_5_fu_525_p4;
wire   [22:0] trunc_ln28_fu_535_p1;
wire   [0:0] icmp_ln28_1_fu_563_p2;
wire   [0:0] icmp_ln28_fu_557_p2;
wire   [7:0] tmp_6_fu_543_p4;
wire   [22:0] trunc_ln28_1_fu_553_p1;
wire   [0:0] icmp_ln28_3_fu_581_p2;
wire   [0:0] icmp_ln28_2_fu_575_p2;
wire   [0:0] or_ln28_fu_569_p2;
wire   [0:0] or_ln28_1_fu_587_p2;
wire   [0:0] and_ln28_fu_593_p2;
wire   [0:0] tmp_7_fu_285_p2;
wire   [0:0] and_ln28_1_fu_599_p2;
wire   [31:0] bitcast_ln28_2_fu_627_p1;
wire   [31:0] bitcast_ln28_3_fu_645_p1;
wire   [7:0] tmp_9_fu_631_p4;
wire   [22:0] trunc_ln28_2_fu_641_p1;
wire   [0:0] icmp_ln28_5_fu_669_p2;
wire   [0:0] icmp_ln28_4_fu_663_p2;
wire   [7:0] tmp_s_fu_649_p4;
wire   [22:0] trunc_ln28_3_fu_659_p1;
wire   [0:0] icmp_ln28_7_fu_687_p2;
wire   [0:0] icmp_ln28_6_fu_681_p2;
wire   [0:0] or_ln28_2_fu_675_p2;
wire   [0:0] or_ln28_3_fu_693_p2;
wire   [0:0] and_ln28_2_fu_699_p2;
wire   [0:0] tmp_10_fu_290_p2;
wire   [0:0] and_ln28_3_fu_705_p2;
wire   [2:0] tmp_12_fu_719_p3;
wire   [3:0] zext_ln35_fu_726_p1;
wire   [3:0] add_ln35_fu_730_p2;
wire   [3:0] add_ln13_1_fu_746_p2;
wire    ap_block_pp0_stage0_00001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(tmp_1_reg_858),
    .din1(max_0_reg_260),
    .opcode(5'd2),
    .dout(tmp_7_fu_285_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(tmp_8_fu_613_p6),
    .din1(select_ln28_fu_605_p3),
    .opcode(5'd2),
    .dout(tmp_10_fu_290_p2)
);

max_pool_1_mux_42cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
max_pool_1_mux_42cud_U3(
    .din0(conv_1_out_0_q0),
    .din1(conv_1_out_1_q0),
    .din2(conv_1_out_2_q0),
    .din3(conv_1_out_3_q0),
    .din4(add_ln28_reg_852),
    .dout(tmp_1_fu_509_p6)
);

max_pool_1_mux_42cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
max_pool_1_mux_42cud_U4(
    .din0(conv_1_out_0_q1),
    .din1(conv_1_out_1_q1),
    .din2(conv_1_out_2_q1),
    .din3(conv_1_out_3_q1),
    .din4(add_ln28_reg_852_pp0_iter1_reg),
    .dout(tmp_8_fu_613_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln10_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln10_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_0_reg_249 <= c_fu_741_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_249 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        f_0_reg_215 <= select_ln28_3_reg_773;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_215 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten15_reg_204 <= add_ln10_reg_763;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten15_reg_204 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_226 <= select_ln13_1_fu_752_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_226 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_843_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_0_reg_260 <= select_ln28_1_fu_711_p3;
    end else if (((icmp_ln10_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        max_0_reg_260 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_492_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mpr_0_reg_274 <= mpr_fu_498_p2;
    end else if (((icmp_ln10_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mpr_0_reg_274 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_0_reg_238 <= select_ln13_reg_798;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_238 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln10_reg_763 <= add_ln10_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_492_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln28_reg_852 <= add_ln28_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln28_reg_852_pp0_iter1_reg <= add_ln28_reg_852;
        icmp_ln20_reg_843 <= icmp_ln20_fu_492_p2;
        icmp_ln20_reg_843_pp0_iter1_reg <= icmp_ln20_reg_843;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_1_out_0_addr_1_reg_823 <= zext_ln28_3_fu_484_p1;
        conv_1_out_0_addr_reg_803 <= zext_ln28_1_fu_452_p1;
        conv_1_out_1_addr_1_reg_828 <= zext_ln28_3_fu_484_p1;
        conv_1_out_1_addr_reg_808 <= zext_ln28_1_fu_452_p1;
        conv_1_out_2_addr_1_reg_833 <= zext_ln28_3_fu_484_p1;
        conv_1_out_2_addr_reg_813 <= zext_ln28_1_fu_452_p1;
        conv_1_out_3_addr_1_reg_838 <= zext_ln28_3_fu_484_p1;
        conv_1_out_3_addr_reg_818 <= zext_ln28_1_fu_452_p1;
        icmp_ln13_reg_768 <= icmp_ln13_fu_322_p2;
        select_ln13_reg_798 <= select_ln13_fu_426_p3;
        select_ln25_1_reg_789[1] <= select_ln25_1_fu_410_p3[1];
        select_ln25_2_reg_794 <= select_ln25_2_fu_418_p3;
        select_ln25_reg_783 <= select_ln25_fu_392_p3;
        select_ln28_3_reg_773 <= select_ln28_3_fu_336_p3;
        zext_ln28_reg_778[1 : 0] <= zext_ln28_fu_344_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_843 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_858 <= tmp_1_fu_509_p6;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_492_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_ce1 = 1'b1;
    end else begin
        conv_1_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_ce1 = 1'b1;
    end else begin
        conv_1_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_2_ce0 = 1'b1;
    end else begin
        conv_1_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_2_ce1 = 1'b1;
    end else begin
        conv_1_out_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_3_ce0 = 1'b1;
    end else begin
        conv_1_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_3_ce1 = 1'b1;
    end else begin
        conv_1_out_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_pool_1_out_0_ce0 = 1'b1;
    end else begin
        max_pool_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln25_2_reg_794 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        max_pool_1_out_0_we0 = 1'b1;
    end else begin
        max_pool_1_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_pool_1_out_1_ce0 = 1'b1;
    end else begin
        max_pool_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (select_ln25_2_reg_794 == 1'd1))) begin
        max_pool_1_out_1_we0 = 1'b1;
    end else begin
        max_pool_1_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln20_fu_492_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln20_fu_492_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_310_p2 = (4'd1 + indvar_flatten15_reg_204);

assign add_ln13_1_fu_746_p2 = (indvar_flatten_reg_226 + 4'd1);

assign add_ln28_1_fu_478_p2 = (zext_ln28_2_fu_474_p1 + zext_ln28_fu_344_p1);

assign add_ln28_fu_504_p2 = (select_ln25_1_reg_789 + mpr_0_reg_274);

assign add_ln35_fu_730_p2 = (zext_ln28_reg_778 + zext_ln35_fu_726_p1);

assign and_ln28_1_fu_599_p2 = (tmp_7_fu_285_p2 & and_ln28_fu_593_p2);

assign and_ln28_2_fu_699_p2 = (or_ln28_3_fu_693_p2 & or_ln28_2_fu_675_p2);

assign and_ln28_3_fu_705_p2 = (tmp_10_fu_290_p2 & and_ln28_2_fu_699_p2);

assign and_ln28_4_fu_362_p2 = (xor_ln28_fu_356_p2 & trunc_ln25_fu_294_p1);

assign and_ln28_5_fu_374_p2 = (xor_ln28_fu_356_p2 & icmp_ln16_fu_368_p2);

assign and_ln28_fu_593_p2 = (or_ln28_fu_569_p2 & or_ln28_1_fu_587_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_539_p1 = max_0_reg_260;

assign bitcast_ln28_2_fu_627_p1 = tmp_8_fu_613_p6;

assign bitcast_ln28_3_fu_645_p1 = select_ln28_fu_605_p3;

assign bitcast_ln28_fu_522_p1 = tmp_1_reg_858;

assign c_fu_741_p2 = (select_ln25_reg_783 + 2'd1);

assign conv_1_out_0_address0 = conv_1_out_0_addr_reg_803;

assign conv_1_out_0_address1 = conv_1_out_0_addr_1_reg_823;

assign conv_1_out_1_address0 = conv_1_out_1_addr_reg_808;

assign conv_1_out_1_address1 = conv_1_out_1_addr_1_reg_828;

assign conv_1_out_2_address0 = conv_1_out_2_addr_reg_813;

assign conv_1_out_2_address1 = conv_1_out_2_addr_1_reg_833;

assign conv_1_out_3_address0 = conv_1_out_3_addr_reg_818;

assign conv_1_out_3_address1 = conv_1_out_3_addr_1_reg_838;

assign f_fu_316_p2 = (2'd1 + f_0_reg_215);

assign icmp_ln10_fu_304_p2 = ((indvar_flatten15_reg_204 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_322_p2 = ((indvar_flatten_reg_226 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_368_p2 = ((c_0_reg_249 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_492_p2 = ((mpr_0_reg_274 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_563_p2 = ((trunc_ln28_fu_535_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_575_p2 = ((tmp_6_fu_543_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_581_p2 = ((trunc_ln28_1_fu_553_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_663_p2 = ((tmp_9_fu_631_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_669_p2 = ((trunc_ln28_2_fu_641_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_681_p2 = ((tmp_s_fu_649_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_687_p2 = ((trunc_ln28_3_fu_659_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_557_p2 = ((tmp_5_fu_525_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_0_address0 = zext_ln35_1_fu_735_p1;

assign max_pool_1_out_0_d0 = max_0_reg_260;

assign max_pool_1_out_1_address0 = zext_ln35_1_fu_735_p1;

assign max_pool_1_out_1_d0 = max_0_reg_260;

assign mpr_fu_498_p2 = (mpr_0_reg_274 + 2'd1);

assign or_ln25_fu_386_p2 = (icmp_ln13_fu_322_p2 | and_ln28_5_fu_374_p2);

assign or_ln26_fu_460_p2 = (shl_ln26_fu_438_p2 | 2'd1);

assign or_ln28_1_fu_587_p2 = (icmp_ln28_3_fu_581_p2 | icmp_ln28_2_fu_575_p2);

assign or_ln28_2_fu_675_p2 = (icmp_ln28_5_fu_669_p2 | icmp_ln28_4_fu_663_p2);

assign or_ln28_3_fu_693_p2 = (icmp_ln28_7_fu_687_p2 | icmp_ln28_6_fu_681_p2);

assign or_ln28_fu_569_p2 = (icmp_ln28_fu_557_p2 | icmp_ln28_1_fu_563_p2);

assign r_fu_380_p2 = (2'd1 + select_ln28_2_fu_328_p3);

assign select_ln13_1_fu_752_p3 = ((icmp_ln13_reg_768[0:0] === 1'b1) ? 4'd1 : add_ln13_1_fu_746_p2);

assign select_ln13_fu_426_p3 = ((and_ln28_5_fu_374_p2[0:0] === 1'b1) ? r_fu_380_p2 : select_ln28_2_fu_328_p3);

assign select_ln25_1_fu_410_p3 = ((and_ln28_5_fu_374_p2[0:0] === 1'b1) ? shl_ln25_1_fu_404_p2 : select_ln28_4_fu_348_p3);

assign select_ln25_2_fu_418_p3 = ((and_ln28_5_fu_374_p2[0:0] === 1'b1) ? trunc_ln25_1_fu_400_p1 : and_ln28_4_fu_362_p2);

assign select_ln25_fu_392_p3 = ((or_ln25_fu_386_p2[0:0] === 1'b1) ? 2'd0 : c_0_reg_249);

assign select_ln28_1_fu_711_p3 = ((and_ln28_3_fu_705_p2[0:0] === 1'b1) ? tmp_8_fu_613_p6 : select_ln28_fu_605_p3);

assign select_ln28_2_fu_328_p3 = ((icmp_ln13_fu_322_p2[0:0] === 1'b1) ? 2'd0 : r_0_reg_238);

assign select_ln28_3_fu_336_p3 = ((icmp_ln13_fu_322_p2[0:0] === 1'b1) ? f_fu_316_p2 : f_0_reg_215);

assign select_ln28_4_fu_348_p3 = ((icmp_ln13_fu_322_p2[0:0] === 1'b1) ? 2'd0 : shl_ln25_fu_298_p2);

assign select_ln28_fu_605_p3 = ((and_ln28_1_fu_599_p2[0:0] === 1'b1) ? tmp_1_reg_858 : max_0_reg_260);

assign shl_ln25_1_fu_404_p2 = r_fu_380_p2 << 2'd1;

assign shl_ln25_fu_298_p2 = r_0_reg_238 << 2'd1;

assign shl_ln26_fu_438_p2 = select_ln25_fu_392_p3 << 2'd1;

assign tmp_11_fu_466_p3 = {{or_ln26_fu_460_p2}, {1'd0}};

assign tmp_12_fu_719_p3 = {{select_ln25_reg_783}, {1'd0}};

assign tmp_2_fu_444_p3 = {{trunc_ln26_fu_434_p1}, {select_ln28_3_fu_336_p3}};

assign tmp_5_fu_525_p4 = {{bitcast_ln28_fu_522_p1[30:23]}};

assign tmp_6_fu_543_p4 = {{bitcast_ln28_1_fu_539_p1[30:23]}};

assign tmp_9_fu_631_p4 = {{bitcast_ln28_2_fu_627_p1[30:23]}};

assign tmp_s_fu_649_p4 = {{bitcast_ln28_3_fu_645_p1[30:23]}};

assign trunc_ln25_1_fu_400_p1 = r_fu_380_p2[0:0];

assign trunc_ln25_fu_294_p1 = r_0_reg_238[0:0];

assign trunc_ln26_fu_434_p1 = select_ln25_fu_392_p3[0:0];

assign trunc_ln28_1_fu_553_p1 = bitcast_ln28_1_fu_539_p1[22:0];

assign trunc_ln28_2_fu_641_p1 = bitcast_ln28_2_fu_627_p1[22:0];

assign trunc_ln28_3_fu_659_p1 = bitcast_ln28_3_fu_645_p1[22:0];

assign trunc_ln28_fu_535_p1 = bitcast_ln28_fu_522_p1[22:0];

assign xor_ln28_fu_356_p2 = (icmp_ln13_fu_322_p2 ^ 1'd1);

assign zext_ln28_1_fu_452_p1 = tmp_2_fu_444_p3;

assign zext_ln28_2_fu_474_p1 = tmp_11_fu_466_p3;

assign zext_ln28_3_fu_484_p1 = add_ln28_1_fu_478_p2;

assign zext_ln28_fu_344_p1 = select_ln28_3_fu_336_p3;

assign zext_ln35_1_fu_735_p1 = add_ln35_fu_730_p2;

assign zext_ln35_fu_726_p1 = tmp_12_fu_719_p3;

always @ (posedge ap_clk) begin
    zext_ln28_reg_778[3:2] <= 2'b00;
    select_ln25_1_reg_789[0] <= 1'b0;
end

endmodule //max_pool_1
