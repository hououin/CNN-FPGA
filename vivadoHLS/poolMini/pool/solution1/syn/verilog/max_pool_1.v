// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.668000,HLS_SYN_LAT=125,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=101,HLS_SYN_LUT=426,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_1_out_ce0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] f_fu_177_p2;
reg   [1:0] f_reg_418;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln13_fu_183_p1;
reg   [5:0] zext_ln13_reg_423;
wire   [0:0] icmp_ln10_fu_171_p2;
wire   [4:0] zext_ln13_1_fu_187_p1;
reg   [4:0] zext_ln13_1_reg_428;
wire   [1:0] r_fu_197_p2;
reg   [1:0] r_reg_436;
wire    ap_CS_fsm_state3;
wire   [1:0] shl_ln25_fu_203_p2;
reg   [1:0] shl_ln25_reg_441;
wire   [0:0] icmp_ln13_fu_191_p2;
wire   [3:0] zext_ln16_fu_217_p1;
reg   [3:0] zext_ln16_reg_446;
wire   [1:0] c_fu_227_p2;
reg   [1:0] c_reg_454;
wire    ap_CS_fsm_state4;
wire   [1:0] shl_ln26_fu_233_p2;
reg   [1:0] shl_ln26_reg_459;
wire   [0:0] icmp_ln16_fu_221_p2;
wire   [1:0] mpr_fu_245_p2;
reg   [1:0] mpr_reg_467;
wire    ap_CS_fsm_state5;
wire   [1:0] i_fu_251_p2;
reg   [1:0] i_reg_472;
wire   [0:0] icmp_ln20_fu_239_p2;
wire   [1:0] mpc_fu_289_p2;
reg   [1:0] mpc_reg_480;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln23_fu_283_p2;
wire   [31:0] max_2_fu_407_p3;
wire    ap_CS_fsm_state7;
reg   [1:0] f_0_reg_84;
reg   [1:0] r_0_reg_95;
reg   [1:0] c_0_reg_106;
reg   [31:0] max_0_reg_118;
reg   [1:0] mpr_0_reg_131;
reg   [31:0] max_1_reg_142;
reg   [1:0] mpc_0_reg_154;
wire   [63:0] zext_ln35_1_fu_278_p1;
wire   [63:0] zext_ln28_1_fu_318_p1;
wire   [2:0] tmp_8_fu_209_p3;
wire   [3:0] zext_ln35_fu_256_p1;
wire   [3:0] add_ln35_fu_260_p2;
wire   [4:0] tmp_11_cast_fu_265_p3;
wire   [4:0] add_ln35_1_fu_273_p2;
wire   [1:0] j_fu_295_p2;
wire   [4:0] tmp_s_fu_300_p4;
wire   [5:0] zext_ln28_fu_309_p1;
wire   [5:0] add_ln28_fu_313_p2;
wire   [31:0] bitcast_ln28_fu_323_p1;
wire   [31:0] bitcast_ln28_1_fu_341_p1;
wire   [7:0] tmp_fu_327_p4;
wire   [22:0] trunc_ln28_fu_337_p1;
wire   [0:0] icmp_ln28_1_fu_365_p2;
wire   [0:0] icmp_ln28_fu_359_p2;
wire   [7:0] tmp_5_fu_345_p4;
wire   [22:0] trunc_ln28_1_fu_355_p1;
wire   [0:0] icmp_ln28_3_fu_383_p2;
wire   [0:0] icmp_ln28_2_fu_377_p2;
wire   [0:0] or_ln28_fu_371_p2;
wire   [0:0] or_ln28_1_fu_389_p2;
wire   [0:0] and_ln28_fu_395_p2;
wire   [0:0] tmp_6_fu_165_p2;
wire   [0:0] and_ln28_1_fu_401_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(max_1_reg_142),
    .opcode(5'd2),
    .dout(tmp_6_fu_165_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_reg_106 <= c_reg_454;
    end else if (((icmp_ln13_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_106 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_84 <= f_reg_418;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_84 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_283_p2 == 1'd1))) begin
        max_0_reg_118 <= max_1_reg_142;
    end else if (((icmp_ln16_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_118 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_1_reg_142 <= max_2_fu_407_p3;
    end else if (((icmp_ln20_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_1_reg_142 <= max_0_reg_118;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mpc_0_reg_154 <= mpc_reg_480;
    end else if (((icmp_ln20_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mpc_0_reg_154 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_283_p2 == 1'd1))) begin
        mpr_0_reg_131 <= mpr_reg_467;
    end else if (((icmp_ln16_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_131 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_95 <= r_reg_436;
    end else if (((icmp_ln10_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_95 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_454 <= c_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_418 <= f_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_472 <= i_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_reg_480 <= mpc_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_467 <= mpr_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_436 <= r_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln25_reg_441[1] <= shl_ln25_fu_203_p2[1];
        zext_ln16_reg_446[2 : 1] <= zext_ln16_fu_217_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln26_reg_459[1] <= shl_ln26_fu_233_p2[1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_428[1 : 0] <= zext_ln13_1_fu_187_p1[1 : 0];
        zext_ln13_reg_423[1 : 0] <= zext_ln13_fu_183_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln20_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_283_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_313_p2 = (zext_ln13_reg_423 + zext_ln28_fu_309_p1);

assign add_ln35_1_fu_273_p2 = (zext_ln13_1_reg_428 + tmp_11_cast_fu_265_p3);

assign add_ln35_fu_260_p2 = (zext_ln35_fu_256_p1 + zext_ln16_reg_446);

assign and_ln28_1_fu_401_p2 = (tmp_6_fu_165_p2 & and_ln28_fu_395_p2);

assign and_ln28_fu_395_p2 = (or_ln28_fu_371_p2 & or_ln28_1_fu_389_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln28_1_fu_341_p1 = max_1_reg_142;

assign bitcast_ln28_fu_323_p1 = conv_1_out_q0;

assign c_fu_227_p2 = (c_0_reg_106 + 2'd1);

assign conv_1_out_address0 = zext_ln28_1_fu_318_p1;

assign f_fu_177_p2 = (f_0_reg_84 + 2'd1);

assign i_fu_251_p2 = (mpr_0_reg_131 + shl_ln25_reg_441);

assign icmp_ln10_fu_171_p2 = ((f_0_reg_84 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_191_p2 = ((r_0_reg_95 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_221_p2 = ((c_0_reg_106 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_239_p2 = ((mpr_0_reg_131 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_283_p2 = ((mpc_0_reg_154 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_365_p2 = ((trunc_ln28_fu_337_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_377_p2 = ((tmp_5_fu_345_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_383_p2 = ((trunc_ln28_1_fu_355_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_359_p2 = ((tmp_fu_327_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_fu_295_p2 = (shl_ln26_reg_459 + mpc_0_reg_154);

assign max_2_fu_407_p3 = ((and_ln28_1_fu_401_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_reg_142);

assign max_pool_1_out_address0 = zext_ln35_1_fu_278_p1;

assign max_pool_1_out_d0 = max_0_reg_118;

assign mpc_fu_289_p2 = (mpc_0_reg_154 + 2'd1);

assign mpr_fu_245_p2 = (mpr_0_reg_131 + 2'd1);

assign or_ln28_1_fu_389_p2 = (icmp_ln28_3_fu_383_p2 | icmp_ln28_2_fu_377_p2);

assign or_ln28_fu_371_p2 = (icmp_ln28_fu_359_p2 | icmp_ln28_1_fu_365_p2);

assign r_fu_197_p2 = (r_0_reg_95 + 2'd1);

assign shl_ln25_fu_203_p2 = r_0_reg_95 << 2'd1;

assign shl_ln26_fu_233_p2 = c_0_reg_106 << 2'd1;

assign tmp_11_cast_fu_265_p3 = {{add_ln35_fu_260_p2}, {1'd0}};

assign tmp_5_fu_345_p4 = {{bitcast_ln28_1_fu_341_p1[30:23]}};

assign tmp_8_fu_209_p3 = {{r_0_reg_95}, {1'd0}};

assign tmp_fu_327_p4 = {{bitcast_ln28_fu_323_p1[30:23]}};

assign tmp_s_fu_300_p4 = {{{i_reg_472}, {j_fu_295_p2}}, {1'd0}};

assign trunc_ln28_1_fu_355_p1 = bitcast_ln28_1_fu_341_p1[22:0];

assign trunc_ln28_fu_337_p1 = bitcast_ln28_fu_323_p1[22:0];

assign zext_ln13_1_fu_187_p1 = f_0_reg_84;

assign zext_ln13_fu_183_p1 = f_0_reg_84;

assign zext_ln16_fu_217_p1 = tmp_8_fu_209_p3;

assign zext_ln28_1_fu_318_p1 = add_ln28_fu_313_p2;

assign zext_ln28_fu_309_p1 = tmp_s_fu_300_p4;

assign zext_ln35_1_fu_278_p1 = add_ln35_1_fu_273_p2;

assign zext_ln35_fu_256_p1 = c_0_reg_106;

always @ (posedge ap_clk) begin
    zext_ln13_reg_423[5:2] <= 4'b0000;
    zext_ln13_1_reg_428[4:2] <= 3'b000;
    shl_ln25_reg_441[0] <= 1'b0;
    zext_ln16_reg_446[0] <= 1'b0;
    zext_ln16_reg_446[3] <= 1'b0;
    shl_ln26_reg_459[0] <= 1'b0;
end

endmodule //max_pool_1
