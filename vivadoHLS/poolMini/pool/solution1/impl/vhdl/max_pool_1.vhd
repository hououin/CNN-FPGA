-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.668000,HLS_SYN_LAT=125,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=101,HLS_SYN_LUT=426,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal f_fu_177_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_reg_418 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_183_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln13_reg_423 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln10_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_187_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_1_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_197_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_436 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln25_fu_203_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_reg_441 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln13_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln16_fu_217_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln16_reg_446 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_227_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_454 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln26_fu_233_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln26_reg_459 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln16_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_245_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_467 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_251_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_472 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpc_fu_289_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpc_reg_480 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln23_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_2_fu_407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal f_0_reg_84 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_0_reg_95 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_reg_106 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_0_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_131 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_reg_154 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_1_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_209_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_fu_256_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_260_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_cast_fu_265_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_1_fu_273_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_295_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_300_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_fu_309_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_fu_313_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln28_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_327_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_337_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_345_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_355_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => max_1_reg_142,
        opcode => ap_const_lv5_2,
        dout => tmp_6_fu_165_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                c_0_reg_106 <= c_reg_454;
            elsif (((icmp_ln13_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_106 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_84 <= f_reg_418;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_84 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    max_0_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_283_p2 = ap_const_lv1_1))) then 
                max_0_reg_118 <= max_1_reg_142;
            elsif (((icmp_ln16_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_0_reg_118 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_1_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                max_1_reg_142 <= max_2_fu_407_p3;
            elsif (((icmp_ln20_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_1_reg_142 <= max_0_reg_118;
            end if; 
        end if;
    end process;

    mpc_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                mpc_0_reg_154 <= mpc_reg_480;
            elsif (((icmp_ln20_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                mpc_0_reg_154 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_283_p2 = ap_const_lv1_1))) then 
                mpr_0_reg_131 <= mpr_reg_467;
            elsif (((icmp_ln16_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpr_0_reg_131 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_0_reg_95 <= r_reg_436;
            elsif (((icmp_ln10_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_95 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_454 <= c_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_418 <= f_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_reg_472 <= i_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mpc_reg_480 <= mpc_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mpr_reg_467 <= mpr_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_reg_436 <= r_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln25_reg_441(1) <= shl_ln25_fu_203_p2(1);
                    zext_ln16_reg_446(2 downto 1) <= zext_ln16_fu_217_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln26_reg_459(1) <= shl_ln26_fu_233_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_1_reg_428(1 downto 0) <= zext_ln13_1_fu_187_p1(1 downto 0);
                    zext_ln13_reg_423(1 downto 0) <= zext_ln13_fu_183_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_423(5 downto 2) <= "0000";
    zext_ln13_1_reg_428(4 downto 2) <= "000";
    shl_ln25_reg_441(0) <= '0';
    zext_ln16_reg_446(0) <= '0';
    zext_ln16_reg_446(3) <= '0';
    shl_ln26_reg_459(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_171_p2, ap_CS_fsm_state3, icmp_ln13_fu_191_p2, ap_CS_fsm_state4, icmp_ln16_fu_221_p2, ap_CS_fsm_state5, icmp_ln20_fu_239_p2, ap_CS_fsm_state6, icmp_ln23_fu_283_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln20_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_283_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln28_fu_313_p2 <= std_logic_vector(unsigned(zext_ln13_reg_423) + unsigned(zext_ln28_fu_309_p1));
    add_ln35_1_fu_273_p2 <= std_logic_vector(unsigned(zext_ln13_1_reg_428) + unsigned(tmp_11_cast_fu_265_p3));
    add_ln35_fu_260_p2 <= std_logic_vector(unsigned(zext_ln35_fu_256_p1) + unsigned(zext_ln16_reg_446));
    and_ln28_1_fu_401_p2 <= (tmp_6_fu_165_p2 and and_ln28_fu_395_p2);
    and_ln28_fu_395_p2 <= (or_ln28_fu_371_p2 and or_ln28_1_fu_389_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_171_p2)
    begin
        if (((icmp_ln10_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_171_p2)
    begin
        if (((icmp_ln10_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_341_p1 <= max_1_reg_142;
    bitcast_ln28_fu_323_p1 <= conv_1_out_q0;
    c_fu_227_p2 <= std_logic_vector(unsigned(c_0_reg_106) + unsigned(ap_const_lv2_1));
    conv_1_out_address0 <= zext_ln28_1_fu_318_p1(5 - 1 downto 0);

    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_177_p2 <= std_logic_vector(unsigned(f_0_reg_84) + unsigned(ap_const_lv2_1));
    i_fu_251_p2 <= std_logic_vector(unsigned(mpr_0_reg_131) + unsigned(shl_ln25_reg_441));
    icmp_ln10_fu_171_p2 <= "1" when (f_0_reg_84 = ap_const_lv2_2) else "0";
    icmp_ln13_fu_191_p2 <= "1" when (r_0_reg_95 = ap_const_lv2_2) else "0";
    icmp_ln16_fu_221_p2 <= "1" when (c_0_reg_106 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_239_p2 <= "1" when (mpr_0_reg_131 = ap_const_lv2_2) else "0";
    icmp_ln23_fu_283_p2 <= "1" when (mpc_0_reg_154 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_365_p2 <= "1" when (trunc_ln28_fu_337_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_377_p2 <= "0" when (tmp_5_fu_345_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_383_p2 <= "1" when (trunc_ln28_1_fu_355_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_359_p2 <= "0" when (tmp_fu_327_p4 = ap_const_lv8_FF) else "1";
    j_fu_295_p2 <= std_logic_vector(unsigned(shl_ln26_reg_459) + unsigned(mpc_0_reg_154));
    max_2_fu_407_p3 <= 
        conv_1_out_q0 when (and_ln28_1_fu_401_p2(0) = '1') else 
        max_1_reg_142;
    max_pool_1_out_address0 <= zext_ln35_1_fu_278_p1(3 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= max_0_reg_118;

    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln20_fu_239_p2)
    begin
        if (((icmp_ln20_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_289_p2 <= std_logic_vector(unsigned(mpc_0_reg_154) + unsigned(ap_const_lv2_1));
    mpr_fu_245_p2 <= std_logic_vector(unsigned(mpr_0_reg_131) + unsigned(ap_const_lv2_1));
    or_ln28_1_fu_389_p2 <= (icmp_ln28_3_fu_383_p2 or icmp_ln28_2_fu_377_p2);
    or_ln28_fu_371_p2 <= (icmp_ln28_fu_359_p2 or icmp_ln28_1_fu_365_p2);
    r_fu_197_p2 <= std_logic_vector(unsigned(r_0_reg_95) + unsigned(ap_const_lv2_1));
    shl_ln25_fu_203_p2 <= std_logic_vector(shift_left(unsigned(r_0_reg_95),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln26_fu_233_p2 <= std_logic_vector(shift_left(unsigned(c_0_reg_106),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_11_cast_fu_265_p3 <= (add_ln35_fu_260_p2 & ap_const_lv1_0);
    tmp_5_fu_345_p4 <= bitcast_ln28_1_fu_341_p1(30 downto 23);
    tmp_8_fu_209_p3 <= (r_0_reg_95 & ap_const_lv1_0);
    tmp_fu_327_p4 <= bitcast_ln28_fu_323_p1(30 downto 23);
    tmp_s_fu_300_p4 <= ((i_reg_472 & j_fu_295_p2) & ap_const_lv1_0);
    trunc_ln28_1_fu_355_p1 <= bitcast_ln28_1_fu_341_p1(23 - 1 downto 0);
    trunc_ln28_fu_337_p1 <= bitcast_ln28_fu_323_p1(23 - 1 downto 0);
    zext_ln13_1_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_84),5));
    zext_ln13_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_84),6));
    zext_ln16_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_209_p3),4));
    zext_ln28_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_313_p2),64));
    zext_ln28_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_300_p4),6));
    zext_ln35_1_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_273_p2),64));
    zext_ln35_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_106),4));
end behav;
