

================================================================
== Vivado HLS Report for 'max_pool_1'
================================================================
* Date:           Thu Aug 10 12:22:25 2023

* Version:        2020.1 (Build 2897737 on Wed May 27 20:21:37 MDT 2020)
* Project:        pool
* Solution:       Pool_Col_pipeline
* Product family: virtex7
* Target device:  xc7vx485t-ffg1157-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+-----------+------------+
    |  Clock |  Target  | Estimated | Uncertainty|
    +--------+----------+-----------+------------+
    |ap_clk  | 40.00 ns | 19.668 ns |   5.00 ns  |
    +--------+----------+-----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       57|       57| 2.280 us | 2.280 us |   57|   57|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                                 |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |            Loop Name            |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Filter_Loop_Row_Loop_Col_Loop  |       56|       56|         7|          -|          -|     8|    no    |
        | + Pool_Row_Loop_Pool_Col_Loop   |        4|        4|         2|          1|          1|     4|    yes   |
        +---------------------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 3 4 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 5 4 
4 --> 3 
5 --> 2 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.18>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([32 x float]* %conv_1_out) nounwind, !map !7"   --->   Operation 6 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([8 x float]* %max_pool_1_out) nounwind, !map !14"   --->   Operation 7 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([11 x i8]* @max_pool_1_str) nounwind"   --->   Operation 8 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (1.18ns)   --->   "br label %1" [pooling.cpp:10]   --->   Operation 9 'br' <Predicate = true> <Delay = 1.18>

State 2 <SV = 1> <Delay = 3.37>
ST_2 : Operation 10 [1/1] (0.00ns)   --->   "%indvar_flatten23 = phi i4 [ 0, %0 ], [ %add_ln10, %Col_Loop_end ]" [pooling.cpp:10]   --->   Operation 10 'phi' 'indvar_flatten23' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 11 [1/1] (0.00ns)   --->   "%f_0 = phi i2 [ 0, %0 ], [ %select_ln28_1, %Col_Loop_end ]" [pooling.cpp:28]   --->   Operation 11 'phi' 'f_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 12 [1/1] (0.00ns)   --->   "%indvar_flatten7 = phi i4 [ 0, %0 ], [ %select_ln13, %Col_Loop_end ]" [pooling.cpp:13]   --->   Operation 12 'phi' 'indvar_flatten7' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 13 [1/1] (0.00ns)   --->   "%r_0 = phi i2 [ 0, %0 ], [ %select_ln25_2, %Col_Loop_end ]" [pooling.cpp:25]   --->   Operation 13 'phi' 'r_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 14 [1/1] (0.00ns)   --->   "%c_0 = phi i2 [ 0, %0 ], [ %c, %Col_Loop_end ]"   --->   Operation 14 'phi' 'c_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 15 [1/1] (0.00ns)   --->   "%shl_ln25 = shl i2 %r_0, 1" [pooling.cpp:25]   --->   Operation 15 'shl' 'shl_ln25' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 16 [1/1] (1.12ns)   --->   "%icmp_ln10 = icmp eq i4 %indvar_flatten23, -8" [pooling.cpp:10]   --->   Operation 16 'icmp' 'icmp_ln10' <Predicate = true> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 17 [1/1] (1.36ns)   --->   "%add_ln10 = add i4 1, %indvar_flatten23" [pooling.cpp:10]   --->   Operation 17 'add' 'add_ln10' <Predicate = true> <Delay = 1.36> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 18 [1/1] (0.00ns)   --->   "br i1 %icmp_ln10, label %3, label %Col_Loop_begin" [pooling.cpp:10]   --->   Operation 18 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 19 [1/1] (1.00ns)   --->   "%f = add i2 1, %f_0" [pooling.cpp:10]   --->   Operation 19 'add' 'f' <Predicate = (!icmp_ln10)> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([30 x i8]* @Filter_Loop_Row_Loop)"   --->   Operation 20 'specloopname' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%empty_6 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8) nounwind"   --->   Operation 21 'speclooptripcount' 'empty_6' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (1.12ns)   --->   "%icmp_ln13 = icmp eq i4 %indvar_flatten7, 4" [pooling.cpp:13]   --->   Operation 22 'icmp' 'icmp_ln13' <Predicate = (!icmp_ln10)> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 23 [1/1] (0.62ns)   --->   "%select_ln28 = select i1 %icmp_ln13, i2 0, i2 %r_0" [pooling.cpp:28]   --->   Operation 23 'select' 'select_ln28' <Predicate = (!icmp_ln10)> <Delay = 0.62> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.65> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 24 [1/1] (0.62ns)   --->   "%select_ln28_1 = select i1 %icmp_ln13, i2 %f, i2 %f_0" [pooling.cpp:28]   --->   Operation 24 'select' 'select_ln28_1' <Predicate = (!icmp_ln10)> <Delay = 0.62> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.65> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%zext_ln28 = zext i2 %select_ln28_1 to i6" [pooling.cpp:28]   --->   Operation 25 'zext' 'zext_ln28' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%zext_ln28_1 = zext i2 %select_ln28_1 to i5" [pooling.cpp:28]   --->   Operation 26 'zext' 'zext_ln28_1' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (0.00ns) (grouped into LUT with out node select_ln25_1)   --->   "%select_ln28_2 = select i1 %icmp_ln13, i2 0, i2 %shl_ln25" [pooling.cpp:28]   --->   Operation 27 'select' 'select_ln28_2' <Predicate = (!icmp_ln10)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.65> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 28 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_2)   --->   "%xor_ln28 = xor i1 %icmp_ln13, true" [pooling.cpp:28]   --->   Operation 28 'xor' 'xor_ln28' <Predicate = (!icmp_ln10)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 29 [1/1] (0.61ns)   --->   "%icmp_ln16 = icmp eq i2 %c_0, -2" [pooling.cpp:16]   --->   Operation 29 'icmp' 'icmp_ln16' <Predicate = (!icmp_ln10)> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 30 [1/1] (0.61ns) (out node of the LUT)   --->   "%and_ln28_2 = and i1 %icmp_ln16, %xor_ln28" [pooling.cpp:28]   --->   Operation 30 'and' 'and_ln28_2' <Predicate = (!icmp_ln10)> <Delay = 0.61> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 31 [1/1] (1.00ns)   --->   "%r = add i2 1, %select_ln28" [pooling.cpp:13]   --->   Operation 31 'add' 'r' <Predicate = (!icmp_ln10)> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([18 x i8]* @Row_Loop_Col_Loop_st)"   --->   Operation 32 'specloopname' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 33 [1/1] (0.00ns) (grouped into LUT with out node select_ln25)   --->   "%or_ln25 = or i1 %and_ln28_2, %icmp_ln13" [pooling.cpp:25]   --->   Operation 33 'or' 'or_ln25' <Predicate = (!icmp_ln10)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 34 [1/1] (0.62ns) (out node of the LUT)   --->   "%select_ln25 = select i1 %or_ln25, i2 0, i2 %c_0" [pooling.cpp:25]   --->   Operation 34 'select' 'select_ln25' <Predicate = (!icmp_ln10)> <Delay = 0.62> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.65> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 35 [1/1] (0.00ns) (grouped into LUT with out node select_ln25_1)   --->   "%shl_ln25_1 = shl i2 %r, 1" [pooling.cpp:25]   --->   Operation 35 'shl' 'shl_ln25_1' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 36 [1/1] (0.62ns) (out node of the LUT)   --->   "%select_ln25_1 = select i1 %and_ln28_2, i2 %shl_ln25_1, i2 %select_ln28_2" [pooling.cpp:25]   --->   Operation 36 'select' 'select_ln25_1' <Predicate = (!icmp_ln10)> <Delay = 0.62> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.65> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 37 [1/1] (0.62ns)   --->   "%select_ln25_2 = select i1 %and_ln28_2, i2 %r, i2 %select_ln28" [pooling.cpp:25]   --->   Operation 37 'select' 'select_ln25_2' <Predicate = (!icmp_ln10)> <Delay = 0.62> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.65> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "%tmp_1 = call i3 @_ssdm_op_BitConcatenate.i3.i2.i1(i2 %select_ln25_2, i1 false)" [pooling.cpp:35]   --->   Operation 38 'bitconcatenate' 'tmp_1' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (0.00ns)   --->   "%zext_ln35 = zext i3 %tmp_1 to i4" [pooling.cpp:35]   --->   Operation 39 'zext' 'zext_ln35' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([9 x i8]* @p_str2) nounwind" [pooling.cpp:17]   --->   Operation 40 'specloopname' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "%tmp_3 = call i32 (...)* @_ssdm_op_SpecRegionBegin([9 x i8]* @p_str2) nounwind" [pooling.cpp:17]   --->   Operation 41 'specregionbegin' 'tmp_3' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%shl_ln26 = shl i2 %select_ln25, 1" [pooling.cpp:26]   --->   Operation 42 'shl' 'shl_ln26' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (1.18ns)   --->   "br label %2" [pooling.cpp:20]   --->   Operation 43 'br' <Predicate = (!icmp_ln10)> <Delay = 1.18>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "ret void" [pooling.cpp:39]   --->   Operation 44 'ret' <Predicate = (icmp_ln10)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 6.67>
ST_3 : Operation 45 [1/1] (0.00ns)   --->   "%indvar_flatten = phi i3 [ 0, %Col_Loop_begin ], [ %add_ln20, %Pool_Col_Loop ]" [pooling.cpp:20]   --->   Operation 45 'phi' 'indvar_flatten' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 46 [1/1] (0.00ns)   --->   "%mpr_0 = phi i2 [ 0, %Col_Loop_begin ], [ %select_ln25_4, %Pool_Col_Loop ]" [pooling.cpp:25]   --->   Operation 46 'phi' 'mpr_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (0.00ns)   --->   "%max_1 = phi float [ 0x3810000000000000, %Col_Loop_begin ], [ %max_2, %Pool_Col_Loop ]"   --->   Operation 47 'phi' 'max_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 48 [1/1] (0.00ns)   --->   "%mpc_0 = phi i2 [ 0, %Col_Loop_begin ], [ %mpc, %Pool_Col_Loop ]"   --->   Operation 48 'phi' 'mpc_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 49 [1/1] (0.86ns)   --->   "%icmp_ln20 = icmp eq i3 %indvar_flatten, -4" [pooling.cpp:20]   --->   Operation 49 'icmp' 'icmp_ln20' <Predicate = true> <Delay = 0.86> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 50 [1/1] (1.18ns)   --->   "%add_ln20 = add i3 %indvar_flatten, 1" [pooling.cpp:20]   --->   Operation 50 'add' 'add_ln20' <Predicate = true> <Delay = 1.18> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 51 [1/1] (0.00ns)   --->   "br i1 %icmp_ln20, label %Col_Loop_end, label %Pool_Col_Loop" [pooling.cpp:20]   --->   Operation 51 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 52 [1/1] (1.00ns)   --->   "%mpr = add i2 1, %mpr_0" [pooling.cpp:20]   --->   Operation 52 'add' 'mpr' <Predicate = (!icmp_ln20)> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 53 [1/1] (0.61ns)   --->   "%icmp_ln23 = icmp eq i2 %mpc_0, -2" [pooling.cpp:23]   --->   Operation 53 'icmp' 'icmp_ln23' <Predicate = (!icmp_ln20)> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 54 [1/1] (0.62ns)   --->   "%select_ln25_3 = select i1 %icmp_ln23, i2 0, i2 %mpc_0" [pooling.cpp:25]   --->   Operation 54 'select' 'select_ln25_3' <Predicate = (!icmp_ln20)> <Delay = 0.62> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.65> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 55 [1/1] (0.62ns)   --->   "%select_ln25_4 = select i1 %icmp_ln23, i2 %mpr, i2 %mpr_0" [pooling.cpp:25]   --->   Operation 55 'select' 'select_ln25_4' <Predicate = (!icmp_ln20)> <Delay = 0.62> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.65> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 56 [1/1] (1.00ns)   --->   "%add_ln25 = add i2 %select_ln25_1, %select_ln25_4" [pooling.cpp:25]   --->   Operation 56 'add' 'add_ln25' <Predicate = (!icmp_ln20)> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 57 [1/1] (1.00ns)   --->   "%j = add i2 %shl_ln26, %select_ln25_3" [pooling.cpp:26]   --->   Operation 57 'add' 'j' <Predicate = (!icmp_ln20)> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 58 [1/1] (0.00ns)   --->   "%tmp_s = call i5 @_ssdm_op_BitConcatenate.i5.i2.i2.i1(i2 %add_ln25, i2 %j, i1 false)" [pooling.cpp:28]   --->   Operation 58 'bitconcatenate' 'tmp_s' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_3 : Operation 59 [1/1] (0.00ns)   --->   "%zext_ln28_2 = zext i5 %tmp_s to i6" [pooling.cpp:28]   --->   Operation 59 'zext' 'zext_ln28_2' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_3 : Operation 60 [1/1] (1.36ns)   --->   "%add_ln28 = add i6 %zext_ln28, %zext_ln28_2" [pooling.cpp:28]   --->   Operation 60 'add' 'add_ln28' <Predicate = (!icmp_ln20)> <Delay = 1.36> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 61 [1/1] (0.00ns)   --->   "%zext_ln28_3 = zext i6 %add_ln28 to i64" [pooling.cpp:28]   --->   Operation 61 'zext' 'zext_ln28_3' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_3 : Operation 62 [1/1] (0.00ns)   --->   "%conv_1_out_addr = getelementptr [32 x float]* %conv_1_out, i64 0, i64 %zext_ln28_3" [pooling.cpp:28]   --->   Operation 62 'getelementptr' 'conv_1_out_addr' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_3 : Operation 63 [2/2] (2.66ns)   --->   "%max = load float* %conv_1_out_addr, align 4" [pooling.cpp:28]   --->   Operation 63 'load' 'max' <Predicate = (!icmp_ln20)> <Delay = 2.66> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_3 : Operation 64 [1/1] (1.00ns)   --->   "%mpc = add i2 1, %select_ln25_3" [pooling.cpp:23]   --->   Operation 64 'add' 'mpc' <Predicate = (!icmp_ln20)> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 4 <SV = 3> <Delay = 19.6>
ST_4 : Operation 65 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([28 x i8]* @Pool_Row_Loop_Pool_C)"   --->   Operation 65 'specloopname' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 66 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4) nounwind"   --->   Operation 66 'speclooptripcount' 'empty' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 67 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str4) nounwind" [pooling.cpp:24]   --->   Operation 67 'specloopname' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 68 [1/1] (0.00ns)   --->   "%tmp_5 = call i32 (...)* @_ssdm_op_SpecRegionBegin([14 x i8]* @p_str4) nounwind" [pooling.cpp:24]   --->   Operation 68 'specregionbegin' 'tmp_5' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 69 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str5) nounwind" [pooling.cpp:25]   --->   Operation 69 'specpipeline' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 70 [1/2] (2.66ns)   --->   "%max = load float* %conv_1_out_addr, align 4" [pooling.cpp:28]   --->   Operation 70 'load' 'max' <Predicate = (!icmp_ln20)> <Delay = 2.66> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_4 : Operation 71 [1/1] (0.00ns)   --->   "%bitcast_ln28 = bitcast float %max to i32" [pooling.cpp:28]   --->   Operation 71 'bitcast' 'bitcast_ln28' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 72 [1/1] (0.00ns)   --->   "%tmp = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln28, i32 23, i32 30)" [pooling.cpp:28]   --->   Operation 72 'partselect' 'tmp' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 73 [1/1] (0.00ns)   --->   "%trunc_ln28 = trunc i32 %bitcast_ln28 to i23" [pooling.cpp:28]   --->   Operation 73 'trunc' 'trunc_ln28' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 74 [1/1] (0.00ns)   --->   "%bitcast_ln28_1 = bitcast float %max_1 to i32" [pooling.cpp:28]   --->   Operation 74 'bitcast' 'bitcast_ln28_1' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 75 [1/1] (0.00ns)   --->   "%tmp_6 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln28_1, i32 23, i32 30)" [pooling.cpp:28]   --->   Operation 75 'partselect' 'tmp_6' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 76 [1/1] (0.00ns)   --->   "%trunc_ln28_1 = trunc i32 %bitcast_ln28_1 to i23" [pooling.cpp:28]   --->   Operation 76 'trunc' 'trunc_ln28_1' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 77 [1/1] (1.12ns)   --->   "%icmp_ln28 = icmp ne i8 %tmp, -1" [pooling.cpp:28]   --->   Operation 77 'icmp' 'icmp_ln28' <Predicate = (!icmp_ln20)> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 78 [1/1] (1.48ns)   --->   "%icmp_ln28_1 = icmp eq i23 %trunc_ln28, 0" [pooling.cpp:28]   --->   Operation 78 'icmp' 'icmp_ln28_1' <Predicate = (!icmp_ln20)> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 79 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_1)   --->   "%or_ln28 = or i1 %icmp_ln28_1, %icmp_ln28" [pooling.cpp:28]   --->   Operation 79 'or' 'or_ln28' <Predicate = (!icmp_ln20)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 80 [1/1] (1.12ns)   --->   "%icmp_ln28_2 = icmp ne i8 %tmp_6, -1" [pooling.cpp:28]   --->   Operation 80 'icmp' 'icmp_ln28_2' <Predicate = (!icmp_ln20)> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 81 [1/1] (1.48ns)   --->   "%icmp_ln28_3 = icmp eq i23 %trunc_ln28_1, 0" [pooling.cpp:28]   --->   Operation 81 'icmp' 'icmp_ln28_3' <Predicate = (!icmp_ln20)> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 82 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_1)   --->   "%or_ln28_1 = or i1 %icmp_ln28_3, %icmp_ln28_2" [pooling.cpp:28]   --->   Operation 82 'or' 'or_ln28_1' <Predicate = (!icmp_ln20)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 83 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_1)   --->   "%and_ln28 = and i1 %or_ln28, %or_ln28_1" [pooling.cpp:28]   --->   Operation 83 'and' 'and_ln28' <Predicate = (!icmp_ln20)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 84 [1/1] (15.7ns)   --->   "%tmp_7 = fcmp ogt float %max, %max_1" [pooling.cpp:28]   --->   Operation 84 'fcmp' 'tmp_7' <Predicate = (!icmp_ln20)> <Delay = 15.7> <Core = "FCmp">   --->   Core 111 'FCmp' <Latency = 0> <II = 1> <Delay = 15.7> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 85 [1/1] (0.61ns) (out node of the LUT)   --->   "%and_ln28_1 = and i1 %and_ln28, %tmp_7" [pooling.cpp:28]   --->   Operation 85 'and' 'and_ln28_1' <Predicate = (!icmp_ln20)> <Delay = 0.61> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 86 [1/1] (0.61ns) (out node of the LUT)   --->   "%max_2 = select i1 %and_ln28_1, float %max, float %max_1" [pooling.cpp:28]   --->   Operation 86 'select' 'max_2' <Predicate = (!icmp_ln20)> <Delay = 0.61> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.65> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 87 [1/1] (0.00ns)   --->   "%empty_4 = call i32 (...)* @_ssdm_op_SpecRegionEnd([14 x i8]* @p_str4, i32 %tmp_5) nounwind" [pooling.cpp:32]   --->   Operation 87 'specregionend' 'empty_4' <Predicate = (!icmp_ln20)> <Delay = 0.00>
ST_4 : Operation 88 [1/1] (0.00ns)   --->   "br label %2"   --->   Operation 88 'br' <Predicate = (!icmp_ln20)> <Delay = 0.00>

State 5 <SV = 3> <Delay = 3.97>
ST_5 : Operation 89 [1/1] (0.00ns)   --->   "%zext_ln35_1 = zext i2 %select_ln25 to i4" [pooling.cpp:35]   --->   Operation 89 'zext' 'zext_ln35_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 90 [1/1] (1.18ns)   --->   "%add_ln35 = add i4 %zext_ln35, %zext_ln35_1" [pooling.cpp:35]   --->   Operation 90 'add' 'add_ln35' <Predicate = true> <Delay = 1.18> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 91 [1/1] (0.00ns)   --->   "%tmp_10_cast = call i5 @_ssdm_op_BitConcatenate.i5.i4.i1(i4 %add_ln35, i1 false)" [pooling.cpp:35]   --->   Operation 91 'bitconcatenate' 'tmp_10_cast' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 92 [1/1] (1.36ns)   --->   "%add_ln35_1 = add i5 %tmp_10_cast, %zext_ln28_1" [pooling.cpp:35]   --->   Operation 92 'add' 'add_ln35_1' <Predicate = true> <Delay = 1.36> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 93 [1/1] (0.00ns)   --->   "%zext_ln35_2 = zext i5 %add_ln35_1 to i64" [pooling.cpp:35]   --->   Operation 93 'zext' 'zext_ln35_2' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 94 [1/1] (0.00ns)   --->   "%max_pool_1_out_addr = getelementptr [8 x float]* %max_pool_1_out, i64 0, i64 %zext_ln35_2" [pooling.cpp:35]   --->   Operation 94 'getelementptr' 'max_pool_1_out_addr' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 95 [1/1] (1.42ns)   --->   "store float %max_1, float* %max_pool_1_out_addr, align 4" [pooling.cpp:35]   --->   Operation 95 'store' <Predicate = true> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_5 : Operation 96 [1/1] (0.00ns)   --->   "%empty_5 = call i32 (...)* @_ssdm_op_SpecRegionEnd([9 x i8]* @p_str2, i32 %tmp_3) nounwind" [pooling.cpp:36]   --->   Operation 96 'specregionend' 'empty_5' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 97 [1/1] (1.00ns)   --->   "%c = add i2 %select_ln25, 1" [pooling.cpp:16]   --->   Operation 97 'add' 'c' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 98 [1/1] (1.36ns)   --->   "%add_ln13_1 = add i4 %indvar_flatten7, 1" [pooling.cpp:13]   --->   Operation 98 'add' 'add_ln13_1' <Predicate = (!icmp_ln13)> <Delay = 1.36> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 99 [1/1] (0.65ns)   --->   "%select_ln13 = select i1 %icmp_ln13, i4 1, i4 %add_ln13_1" [pooling.cpp:13]   --->   Operation 99 'select' 'select_ln13' <Predicate = true> <Delay = 0.65> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.65> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 100 [1/1] (0.00ns)   --->   "br label %1" [pooling.cpp:16]   --->   Operation 100 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 40ns, clock uncertainty: 5ns.

 <State 1>: 1.18ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('indvar_flatten23', pooling.cpp:10) with incoming values : ('add_ln10', pooling.cpp:10) [8]  (1.18 ns)

 <State 2>: 3.38ns
The critical path consists of the following:
	'phi' operation ('indvar_flatten7', pooling.cpp:13) with incoming values : ('select_ln13', pooling.cpp:13) [10]  (0 ns)
	'icmp' operation ('icmp_ln13', pooling.cpp:13) [21]  (1.12 ns)
	'select' operation ('select_ln28', pooling.cpp:28) [22]  (0.625 ns)
	'add' operation ('r', pooling.cpp:13) [30]  (1.01 ns)
	'shl' operation ('shl_ln25_1', pooling.cpp:25) [34]  (0 ns)
	'select' operation ('select_ln25_1', pooling.cpp:25) [35]  (0.625 ns)

 <State 3>: 6.67ns
The critical path consists of the following:
	'phi' operation ('mpr_0', pooling.cpp:25) with incoming values : ('select_ln25_4', pooling.cpp:25) [45]  (0 ns)
	'add' operation ('mpr', pooling.cpp:20) [52]  (1.01 ns)
	'select' operation ('select_ln25_4', pooling.cpp:25) [57]  (0.625 ns)
	'add' operation ('add_ln25', pooling.cpp:25) [58]  (1.01 ns)
	'add' operation ('add_ln28', pooling.cpp:28) [65]  (1.37 ns)
	'getelementptr' operation ('conv_1_out_addr', pooling.cpp:28) [67]  (0 ns)
	'load' operation ('max', pooling.cpp:28) on array 'conv_1_out' [68]  (2.66 ns)

 <State 4>: 19.7ns
The critical path consists of the following:
	'load' operation ('max', pooling.cpp:28) on array 'conv_1_out' [68]  (2.66 ns)
	'fcmp' operation ('tmp_7', pooling.cpp:28) [82]  (15.8 ns)
	'and' operation ('and_ln28_1', pooling.cpp:28) [83]  (0.616 ns)
	'select' operation ('max', pooling.cpp:28) [84]  (0.613 ns)

 <State 5>: 3.98ns
The critical path consists of the following:
	'add' operation ('add_ln35', pooling.cpp:35) [90]  (1.18 ns)
	'add' operation ('add_ln35_1', pooling.cpp:35) [92]  (1.37 ns)
	'getelementptr' operation ('max_pool_1_out_addr', pooling.cpp:35) [94]  (0 ns)
	'store' operation ('store_ln35', pooling.cpp:35) of variable 'max' on array 'max_pool_1_out' [95]  (1.43 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
