-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.668000,HLS_SYN_LAT=57,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=81,HLS_SYN_LUT=524,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_168 : STD_LOGIC_VECTOR (2 downto 0);
    signal mpr_0_reg_179 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_reg_203 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_fu_232_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln10_reg_580 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln13_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_1_fu_258_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_1_reg_590 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_fu_266_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_reg_595 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_1_fu_270_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_1_reg_600 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_fu_312_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_reg_605 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_1_fu_326_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_1_reg_611 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_2_fu_334_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_2_reg_616 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_fu_350_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_reg_621 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln26_fu_354_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln26_reg_626 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_631 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln20_fu_366_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln25_4_fu_392_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_4_reg_640 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpc_fu_434_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_2_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal c_fu_558_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln13_fu_569_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal indvar_flatten23_reg_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_123 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten7_reg_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_reg_146 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_reg_157 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_183_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln28_3_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_fu_238_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_fu_220_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln16_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_250_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln28_2_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_300_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_1_fu_320_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_2_fu_274_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_342_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln23_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_372_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_3_fu_384_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln25_fu_400_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_405_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_410_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_2_fu_420_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_fu_424_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln28_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_444_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_454_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_462_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_472_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_532_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_535_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_cast_fu_540_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_1_fu_548_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_1_fu_563_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => max_1_reg_190,
        opcode => ap_const_lv5_2,
        dout => tmp_7_fu_214_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln10_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln10_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_0_reg_157 <= c_fu_558_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_157 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                f_0_reg_123 <= select_ln28_1_reg_590;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_123 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten23_reg_112 <= add_ln10_reg_580;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_112 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten7_reg_134 <= select_ln13_fu_569_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten7_reg_134 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_360_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_168 <= add_ln20_fu_366_p2;
            elsif (((icmp_ln10_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_168 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_1_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_reg_631 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                max_1_reg_190 <= max_2_fu_524_p3;
            elsif (((icmp_ln10_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_1_reg_190 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpc_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_360_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mpc_0_reg_203 <= mpc_fu_434_p2;
            elsif (((icmp_ln10_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpc_0_reg_203 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_reg_631 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                mpr_0_reg_179 <= select_ln25_4_reg_640;
            elsif (((icmp_ln10_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpr_0_reg_179 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                r_0_reg_146 <= select_ln25_2_reg_616;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_146 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln10_reg_580 <= add_ln10_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln13_reg_585 <= icmp_ln13_fu_244_p2;
                    select_ln25_1_reg_611(1) <= select_ln25_1_fu_326_p3(1);
                select_ln25_2_reg_616 <= select_ln25_2_fu_334_p3;
                select_ln25_reg_605 <= select_ln25_fu_312_p3;
                select_ln28_1_reg_590 <= select_ln28_1_fu_258_p3;
                    shl_ln26_reg_626(1) <= shl_ln26_fu_354_p2(1);
                    zext_ln28_1_reg_600(1 downto 0) <= zext_ln28_1_fu_270_p1(1 downto 0);
                    zext_ln28_reg_595(1 downto 0) <= zext_ln28_fu_266_p1(1 downto 0);
                    zext_ln35_reg_621(2 downto 1) <= zext_ln35_fu_350_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_reg_631 <= icmp_ln20_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_360_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln25_4_reg_640 <= select_ln25_4_fu_392_p3;
            end if;
        end if;
    end process;
    zext_ln28_reg_595(5 downto 2) <= "0000";
    zext_ln28_1_reg_600(4 downto 2) <= "000";
    select_ln25_1_reg_611(0) <= '0';
    zext_ln35_reg_621(0) <= '0';
    zext_ln35_reg_621(3) <= '0';
    shl_ln26_reg_626(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_226_p2, ap_CS_fsm_state2, icmp_ln20_fu_360_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln20_fu_360_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln20_fu_360_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten23_reg_112));
    add_ln13_1_fu_563_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_134) + unsigned(ap_const_lv4_1));
    add_ln20_fu_366_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_168) + unsigned(ap_const_lv3_1));
    add_ln25_fu_400_p2 <= std_logic_vector(unsigned(select_ln25_1_reg_611) + unsigned(select_ln25_4_fu_392_p3));
    add_ln28_fu_424_p2 <= std_logic_vector(unsigned(zext_ln28_reg_595) + unsigned(zext_ln28_2_fu_420_p1));
    add_ln35_1_fu_548_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_540_p3) + unsigned(zext_ln28_1_reg_600));
    add_ln35_fu_535_p2 <= std_logic_vector(unsigned(zext_ln35_reg_621) + unsigned(zext_ln35_1_fu_532_p1));
    and_ln28_1_fu_518_p2 <= (tmp_7_fu_214_p2 and and_ln28_fu_512_p2);
    and_ln28_2_fu_294_p2 <= (xor_ln28_fu_282_p2 and icmp_ln16_fu_288_p2);
    and_ln28_fu_512_p2 <= (or_ln28_fu_488_p2 and or_ln28_1_fu_506_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln20_fu_360_p2)
    begin
        if ((icmp_ln20_fu_360_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln10_fu_226_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln10_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_183_p4_assign_proc : process(mpr_0_reg_179, icmp_ln20_reg_631, ap_CS_fsm_pp0_stage0, select_ln25_4_reg_640, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_631 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_183_p4 <= select_ln25_4_reg_640;
        else 
            ap_phi_mux_mpr_0_phi_fu_183_p4 <= mpr_0_reg_179;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln10_fu_226_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln10_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_458_p1 <= max_1_reg_190;
    bitcast_ln28_fu_440_p1 <= conv_1_out_q0;
    c_fu_558_p2 <= std_logic_vector(unsigned(select_ln25_reg_605) + unsigned(ap_const_lv2_1));
    conv_1_out_address0 <= zext_ln28_3_fu_429_p1(5 - 1 downto 0);

    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_238_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(f_0_reg_123));
    icmp_ln10_fu_226_p2 <= "1" when (indvar_flatten23_reg_112 = ap_const_lv4_8) else "0";
    icmp_ln13_fu_244_p2 <= "1" when (indvar_flatten7_reg_134 = ap_const_lv4_4) else "0";
    icmp_ln16_fu_288_p2 <= "1" when (c_0_reg_157 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_360_p2 <= "1" when (indvar_flatten_reg_168 = ap_const_lv3_4) else "0";
    icmp_ln23_fu_378_p2 <= "1" when (mpc_0_reg_203 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_482_p2 <= "1" when (trunc_ln28_fu_454_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_494_p2 <= "0" when (tmp_6_fu_462_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_500_p2 <= "1" when (trunc_ln28_1_fu_472_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_476_p2 <= "0" when (tmp_fu_444_p4 = ap_const_lv8_FF) else "1";
    j_fu_405_p2 <= std_logic_vector(unsigned(shl_ln26_reg_626) + unsigned(select_ln25_3_fu_384_p3));
    max_2_fu_524_p3 <= 
        conv_1_out_q0 when (and_ln28_1_fu_518_p2(0) = '1') else 
        max_1_reg_190;
    max_pool_1_out_address0 <= zext_ln35_2_fu_553_p1(3 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= max_1_reg_190;

    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_434_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln25_3_fu_384_p3));
    mpr_fu_372_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_mpr_0_phi_fu_183_p4));
    or_ln25_fu_306_p2 <= (icmp_ln13_fu_244_p2 or and_ln28_2_fu_294_p2);
    or_ln28_1_fu_506_p2 <= (icmp_ln28_3_fu_500_p2 or icmp_ln28_2_fu_494_p2);
    or_ln28_fu_488_p2 <= (icmp_ln28_fu_476_p2 or icmp_ln28_1_fu_482_p2);
    r_fu_300_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln28_fu_250_p3));
    select_ln13_fu_569_p3 <= 
        ap_const_lv4_1 when (icmp_ln13_reg_585(0) = '1') else 
        add_ln13_1_fu_563_p2;
    select_ln25_1_fu_326_p3 <= 
        shl_ln25_1_fu_320_p2 when (and_ln28_2_fu_294_p2(0) = '1') else 
        select_ln28_2_fu_274_p3;
    select_ln25_2_fu_334_p3 <= 
        r_fu_300_p2 when (and_ln28_2_fu_294_p2(0) = '1') else 
        select_ln28_fu_250_p3;
    select_ln25_3_fu_384_p3 <= 
        ap_const_lv2_0 when (icmp_ln23_fu_378_p2(0) = '1') else 
        mpc_0_reg_203;
    select_ln25_4_fu_392_p3 <= 
        mpr_fu_372_p2 when (icmp_ln23_fu_378_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_183_p4;
    select_ln25_fu_312_p3 <= 
        ap_const_lv2_0 when (or_ln25_fu_306_p2(0) = '1') else 
        c_0_reg_157;
    select_ln28_1_fu_258_p3 <= 
        f_fu_238_p2 when (icmp_ln13_fu_244_p2(0) = '1') else 
        f_0_reg_123;
    select_ln28_2_fu_274_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_244_p2(0) = '1') else 
        shl_ln25_fu_220_p2;
    select_ln28_fu_250_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_244_p2(0) = '1') else 
        r_0_reg_146;
    shl_ln25_1_fu_320_p2 <= std_logic_vector(shift_left(unsigned(r_fu_300_p2),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln25_fu_220_p2 <= std_logic_vector(shift_left(unsigned(r_0_reg_146),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln26_fu_354_p2 <= std_logic_vector(shift_left(unsigned(select_ln25_fu_312_p3),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_10_cast_fu_540_p3 <= (add_ln35_fu_535_p2 & ap_const_lv1_0);
    tmp_1_fu_342_p3 <= (select_ln25_2_fu_334_p3 & ap_const_lv1_0);
    tmp_6_fu_462_p4 <= bitcast_ln28_1_fu_458_p1(30 downto 23);
    tmp_fu_444_p4 <= bitcast_ln28_fu_440_p1(30 downto 23);
    tmp_s_fu_410_p4 <= ((add_ln25_fu_400_p2 & j_fu_405_p2) & ap_const_lv1_0);
    trunc_ln28_1_fu_472_p1 <= bitcast_ln28_1_fu_458_p1(23 - 1 downto 0);
    trunc_ln28_fu_454_p1 <= bitcast_ln28_fu_440_p1(23 - 1 downto 0);
    xor_ln28_fu_282_p2 <= (icmp_ln13_fu_244_p2 xor ap_const_lv1_1);
    zext_ln28_1_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_fu_258_p3),5));
    zext_ln28_2_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_410_p4),6));
    zext_ln28_3_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_424_p2),64));
    zext_ln28_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_fu_258_p3),6));
    zext_ln35_1_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_reg_605),4));
    zext_ln35_2_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_548_p2),64));
    zext_ln35_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_342_p3),4));
end behav;
