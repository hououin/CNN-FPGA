-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_0_ce0 : OUT STD_LOGIC;
    conv_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_0_ce1 : OUT STD_LOGIC;
    conv_1_out_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_1_ce0 : OUT STD_LOGIC;
    conv_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_1_ce1 : OUT STD_LOGIC;
    conv_1_out_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_2_ce0 : OUT STD_LOGIC;
    conv_1_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_2_ce1 : OUT STD_LOGIC;
    conv_1_out_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_3_ce0 : OUT STD_LOGIC;
    conv_1_out_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_1_out_3_ce1 : OUT STD_LOGIC;
    conv_1_out_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    max_pool_1_out_0_ce0 : OUT STD_LOGIC;
    max_pool_1_out_0_we0 : OUT STD_LOGIC;
    max_pool_1_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    max_pool_1_out_1_ce0 : OUT STD_LOGIC;
    max_pool_1_out_1_we0 : OUT STD_LOGIC;
    max_pool_1_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.817000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=336,HLS_SYN_LUT=1123,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten21_reg_206 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_217 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_228 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_reg_239 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln28_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_1_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_919_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_919_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_9_fu_338_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_9_reg_934 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln28_8_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_8_reg_940 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_370_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_946 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_10_fu_382_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_10_reg_951 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_10_reg_951_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_10_reg_951_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_13_fu_394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_13_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_13_reg_957_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_13_reg_957_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_402_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_1_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_reg_966 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_428_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln13_1_fu_440_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_fu_448_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_reg_992 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_reg_992_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_11_fu_470_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_11_reg_997 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_12_fu_489_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_12_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_12_reg_1002_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_552_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_3_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_reg_1025 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln28_1_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_6_fu_689_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_6_reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1063 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_221_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln35_1_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln28_3_fu_877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_4_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_5_fu_590_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_270_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_7_fu_785_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_fu_778_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln28_fu_282_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln28_fu_294_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_fu_318_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln28_fu_278_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_8_fu_330_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln28_10_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln28_1_fu_390_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_7_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_fu_410_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_414_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln13_fu_434_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln28_1_fu_459_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln28_16_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_8_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_11_fu_477_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln28_17_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_9_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_514_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_524_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln26_fu_496_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln26_fu_560_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_566_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_2_fu_574_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_578_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln28_1_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_2_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_602_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_612_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_619_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_4_fu_629_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_3_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_4_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_700_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_5_fu_710_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_9_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_8_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_717_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_6_fu_727_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_11_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_10_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_4_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_5_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_5_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_6_fu_811_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_797_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_7_fu_807_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_13_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_12_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_815_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_8_fu_825_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_15_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_14_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_6_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_7_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_5_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_6_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_887_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_fu_894_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_898_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => select_ln28_4_fu_501_p3,
        din1 => ap_const_lv32_800000,
        opcode => ap_const_lv5_2,
        dout => tmp_4_fu_261_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => select_ln28_5_fu_590_p3,
        din1 => select_ln28_reg_1018,
        opcode => ap_const_lv5_2,
        dout => tmp_7_fu_266_p2);

    max_pool_1_fcmp_3bkb_U3 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_s_fu_270_p0,
        din1 => tmp_s_fu_270_p1,
        opcode => ap_const_lv5_2,
        dout => tmp_s_fu_270_p2);

    max_pool_1_fcmp_3bkb_U4 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => select_ln28_7_fu_785_p3,
        din1 => select_ln28_2_fu_778_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_12_fu_274_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln10_fu_306_p2 = ap_const_lv1_0))) then 
                c_0_reg_250 <= c_fu_428_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_250 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln10_reg_919 = ap_const_lv1_0))) then 
                f_0_reg_217 <= select_ln28_9_reg_934;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_217 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln10_fu_306_p2 = ap_const_lv1_0))) then 
                indvar_flatten21_reg_206 <= add_ln10_fu_312_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten21_reg_206 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln10_fu_306_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_228 <= select_ln13_1_fu_440_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_228 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln10_fu_306_p2 = ap_const_lv1_0))) then 
                r_0_reg_239 <= select_ln13_fu_402_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_239 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_fu_306_p2 = ap_const_lv1_0))) then
                and_ln28_8_reg_940 <= and_ln28_8_fu_364_p2;
                icmp_ln13_reg_928 <= icmp_ln13_fu_324_p2;
                r_reg_946 <= r_fu_370_p2;
                select_ln28_10_reg_951 <= select_ln28_10_fu_382_p3;
                select_ln28_13_reg_957 <= select_ln28_13_fu_394_p3;
                    zext_ln28_1_reg_966(2 downto 0) <= zext_ln28_1_fu_422_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_919 <= icmp_ln10_fu_306_p2;
                icmp_ln10_reg_919_pp0_iter1_reg <= icmp_ln10_reg_919;
                icmp_ln28_1_reg_914 <= icmp_ln28_1_fu_300_p2;
                icmp_ln28_reg_909 <= icmp_ln28_fu_288_p2;
                select_ln28_10_reg_951_pp0_iter1_reg <= select_ln28_10_reg_951;
                select_ln28_13_reg_957_pp0_iter1_reg <= select_ln28_13_reg_957;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln10_reg_919_pp0_iter2_reg <= icmp_ln10_reg_919_pp0_iter1_reg;
                select_ln28_10_reg_951_pp0_iter2_reg <= select_ln28_10_reg_951_pp0_iter1_reg;
                select_ln28_12_reg_1002_pp0_iter2_reg <= select_ln28_12_reg_1002;
                select_ln28_13_reg_957_pp0_iter2_reg <= select_ln28_13_reg_957_pp0_iter1_reg;
                    zext_ln28_reg_992_pp0_iter2_reg(1 downto 0) <= zext_ln28_reg_992(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_reg_919 = ap_const_lv1_0))) then
                select_ln28_11_reg_997 <= select_ln28_11_fu_470_p3;
                select_ln28_12_reg_1002 <= select_ln28_12_fu_489_p3;
                select_ln28_reg_1018 <= select_ln28_fu_552_p3;
                    zext_ln28_3_reg_1025(3 downto 0) <= zext_ln28_3_fu_584_p1(3 downto 0);
                    zext_ln28_reg_992(1 downto 0) <= zext_ln28_fu_448_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_919_pp0_iter1_reg = ap_const_lv1_0))) then
                select_ln28_1_reg_1051 <= select_ln28_1_fu_681_p3;
                select_ln28_6_reg_1057 <= select_ln28_6_fu_689_p3;
                tmp_s_reg_1063 <= tmp_s_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln10_fu_306_p2 = ap_const_lv1_0))) then
                select_ln28_9_reg_934 <= select_ln28_9_fu_338_p3;
            end if;
        end if;
    end process;
    zext_ln28_1_reg_966(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln28_reg_992(3 downto 2) <= "00";
    zext_ln28_reg_992_pp0_iter2_reg(3 downto 2) <= "00";
    zext_ln28_3_reg_1025(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_306_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln10_fu_306_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln10_fu_306_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten21_reg_206));
    add_ln13_fu_434_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_228) + unsigned(ap_const_lv4_1));
    add_ln28_fu_578_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_574_p1) + unsigned(zext_ln28_fu_448_p1));
    add_ln35_fu_898_p2 <= std_logic_vector(unsigned(zext_ln35_fu_894_p1) + unsigned(zext_ln28_reg_992_pp0_iter2_reg));
    and_ln28_1_fu_669_p2 <= (or_ln28_3_fu_663_p2 and or_ln28_2_fu_645_p2);
    and_ln28_2_fu_675_p2 <= (tmp_7_fu_266_p2 and and_ln28_1_fu_669_p2);
    and_ln28_3_fu_767_p2 <= (or_ln28_5_fu_761_p2 and or_ln28_4_fu_743_p2);
    and_ln28_4_fu_773_p2 <= (tmp_s_reg_1063 and and_ln28_3_fu_767_p2);
    and_ln28_5_fu_865_p2 <= (or_ln28_7_fu_859_p2 and or_ln28_6_fu_841_p2);
    and_ln28_6_fu_871_p2 <= (tmp_12_fu_274_p2 and and_ln28_5_fu_865_p2);
    and_ln28_7_fu_352_p2 <= (xor_ln28_fu_346_p2 and trunc_ln28_fu_278_p1);
    and_ln28_8_fu_364_p2 <= (xor_ln28_fu_346_p2 and icmp_ln16_fu_358_p2);
    and_ln28_fu_546_p2 <= (tmp_4_fu_261_p2 and or_ln28_1_fu_540_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_306_p2)
    begin
        if ((icmp_ln10_fu_306_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_221_p4_assign_proc : process(f_0_reg_217, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_919, select_ln28_9_reg_934, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln10_reg_919 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_221_p4 <= select_ln28_9_reg_934;
        else 
            ap_phi_mux_f_0_phi_fu_221_p4 <= f_0_reg_217;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_598_p1 <= select_ln28_5_fu_590_p3;
    bitcast_ln28_2_fu_616_p1 <= select_ln28_reg_1018;
    bitcast_ln28_3_fu_697_p1 <= select_ln28_6_reg_1057;
    bitcast_ln28_4_fu_714_p1 <= select_ln28_1_reg_1051;
    bitcast_ln28_5_fu_793_p1 <= select_ln28_7_fu_785_p3;
    bitcast_ln28_6_fu_811_p1 <= select_ln28_2_fu_778_p3;
    bitcast_ln28_fu_510_p1 <= select_ln28_4_fu_501_p3;
    c_fu_428_p2 <= std_logic_vector(unsigned(select_ln28_10_fu_382_p3) + unsigned(ap_const_lv2_1));
    conv_1_out_0_address0 <= zext_ln28_1_fu_422_p1(3 - 1 downto 0);
    conv_1_out_0_address1 <= zext_ln28_3_fu_584_p1(3 - 1 downto 0);

    conv_1_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_0_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_1_address0 <= zext_ln28_1_reg_966(3 - 1 downto 0);
    conv_1_out_1_address1 <= zext_ln28_3_reg_1025(3 - 1 downto 0);

    conv_1_out_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_1_out_1_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_2_address0 <= zext_ln28_1_fu_422_p1(3 - 1 downto 0);
    conv_1_out_2_address1 <= zext_ln28_3_fu_584_p1(3 - 1 downto 0);

    conv_1_out_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_out_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_2_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_3_address0 <= zext_ln28_1_reg_966(3 - 1 downto 0);
    conv_1_out_3_address1 <= zext_ln28_3_reg_1025(3 - 1 downto 0);

    conv_1_out_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_3_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_3_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_1_out_3_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_318_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_f_0_phi_fu_221_p4));
    icmp_ln10_fu_306_p2 <= "1" when (indvar_flatten21_reg_206 = ap_const_lv4_8) else "0";
    icmp_ln13_fu_324_p2 <= "1" when (indvar_flatten_reg_228 = ap_const_lv4_4) else "0";
    icmp_ln16_fu_358_p2 <= "1" when (c_0_reg_250 = ap_const_lv2_2) else "0";
    icmp_ln28_10_fu_749_p2 <= "0" when (tmp_9_fu_717_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_11_fu_755_p2 <= "1" when (trunc_ln28_6_fu_727_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_12_fu_829_p2 <= "0" when (tmp_10_fu_797_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_13_fu_835_p2 <= "1" when (trunc_ln28_7_fu_807_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_14_fu_847_p2 <= "0" when (tmp_11_fu_815_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_15_fu_853_p2 <= "1" when (trunc_ln28_8_fu_825_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_16_fu_464_p2 <= "1" when (shl_ln28_1_fu_459_p2 = ap_const_lv2_0) else "0";
    icmp_ln28_17_fu_483_p2 <= "1" when (or_ln28_11_fu_477_p2 = ap_const_lv2_1) else "0";
    icmp_ln28_1_fu_300_p2 <= "1" when (or_ln28_fu_294_p2 = ap_const_lv2_1) else "0";
    icmp_ln28_2_fu_528_p2 <= "0" when (tmp_3_fu_514_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_534_p2 <= "1" when (trunc_ln28_2_fu_524_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_633_p2 <= "0" when (tmp_5_fu_602_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_639_p2 <= "1" when (trunc_ln28_3_fu_612_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_651_p2 <= "0" when (tmp_6_fu_619_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_657_p2 <= "1" when (trunc_ln28_4_fu_629_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_8_fu_731_p2 <= "0" when (tmp_8_fu_700_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_9_fu_737_p2 <= "1" when (trunc_ln28_5_fu_710_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_288_p2 <= "1" when (shl_ln28_fu_282_p2 = ap_const_lv2_0) else "0";
    max_pool_1_out_0_address0 <= zext_ln35_1_fu_903_p1(2 - 1 downto 0);

    max_pool_1_out_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_1_out_0_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_0_d0 <= select_ln28_3_fu_877_p3;

    max_pool_1_out_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln28_13_reg_957_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln28_13_reg_957_pp0_iter2_reg = ap_const_lv1_0))) then 
            max_pool_1_out_0_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_1_address0 <= zext_ln35_1_fu_903_p1(2 - 1 downto 0);

    max_pool_1_out_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_1_out_1_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_1_d0 <= select_ln28_3_fu_877_p3;

    max_pool_1_out_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln28_13_reg_957_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln28_13_reg_957_pp0_iter2_reg = ap_const_lv1_1))) then 
            max_pool_1_out_1_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln26_fu_560_p2 <= (shl_ln26_fu_496_p2 or ap_const_lv2_1);
    or_ln28_10_fu_376_p2 <= (icmp_ln13_fu_324_p2 or and_ln28_8_fu_364_p2);
    or_ln28_11_fu_477_p2 <= (shl_ln28_1_fu_459_p2 or ap_const_lv2_1);
    or_ln28_1_fu_540_p2 <= (icmp_ln28_3_fu_534_p2 or icmp_ln28_2_fu_528_p2);
    or_ln28_2_fu_645_p2 <= (icmp_ln28_5_fu_639_p2 or icmp_ln28_4_fu_633_p2);
    or_ln28_3_fu_663_p2 <= (icmp_ln28_7_fu_657_p2 or icmp_ln28_6_fu_651_p2);
    or_ln28_4_fu_743_p2 <= (icmp_ln28_9_fu_737_p2 or icmp_ln28_8_fu_731_p2);
    or_ln28_5_fu_761_p2 <= (icmp_ln28_11_fu_755_p2 or icmp_ln28_10_fu_749_p2);
    or_ln28_6_fu_841_p2 <= (icmp_ln28_13_fu_835_p2 or icmp_ln28_12_fu_829_p2);
    or_ln28_7_fu_859_p2 <= (icmp_ln28_15_fu_853_p2 or icmp_ln28_14_fu_847_p2);
    or_ln28_8_fu_451_p2 <= (icmp_ln28_reg_909 or icmp_ln13_reg_928);
    or_ln28_9_fu_455_p2 <= (icmp_ln28_1_reg_914 or icmp_ln13_reg_928);
    or_ln28_fu_294_p2 <= (shl_ln28_fu_282_p2 or ap_const_lv2_1);
    r_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln28_8_fu_330_p3));
    select_ln13_1_fu_440_p3 <= 
        ap_const_lv4_1 when (icmp_ln13_fu_324_p2(0) = '1') else 
        add_ln13_fu_434_p2;
    select_ln13_fu_402_p3 <= 
        r_fu_370_p2 when (and_ln28_8_fu_364_p2(0) = '1') else 
        select_ln28_8_fu_330_p3;
    select_ln28_10_fu_382_p3 <= 
        ap_const_lv2_0 when (or_ln28_10_fu_376_p2(0) = '1') else 
        c_0_reg_250;
    select_ln28_11_fu_470_p3 <= 
        icmp_ln28_16_fu_464_p2 when (and_ln28_8_reg_940(0) = '1') else 
        or_ln28_8_fu_451_p2;
    select_ln28_12_fu_489_p3 <= 
        icmp_ln28_17_fu_483_p2 when (and_ln28_8_reg_940(0) = '1') else 
        or_ln28_9_fu_455_p2;
    select_ln28_13_fu_394_p3 <= 
        trunc_ln28_1_fu_390_p1 when (and_ln28_8_fu_364_p2(0) = '1') else 
        and_ln28_7_fu_352_p2;
    select_ln28_1_fu_681_p3 <= 
        select_ln28_5_fu_590_p3 when (and_ln28_2_fu_675_p2(0) = '1') else 
        select_ln28_reg_1018;
    select_ln28_2_fu_778_p3 <= 
        select_ln28_6_reg_1057 when (and_ln28_4_fu_773_p2(0) = '1') else 
        select_ln28_1_reg_1051;
    select_ln28_3_fu_877_p3 <= 
        select_ln28_7_fu_785_p3 when (and_ln28_6_fu_871_p2(0) = '1') else 
        select_ln28_2_fu_778_p3;
    select_ln28_4_fu_501_p3 <= 
        conv_1_out_0_q0 when (select_ln28_11_fu_470_p3(0) = '1') else 
        conv_1_out_2_q0;
    select_ln28_5_fu_590_p3 <= 
        conv_1_out_0_q1 when (select_ln28_11_reg_997(0) = '1') else 
        conv_1_out_2_q1;
    select_ln28_6_fu_689_p3 <= 
        conv_1_out_1_q0 when (select_ln28_12_reg_1002(0) = '1') else 
        conv_1_out_3_q0;
    select_ln28_7_fu_785_p3 <= 
        conv_1_out_1_q1 when (select_ln28_12_reg_1002_pp0_iter2_reg(0) = '1') else 
        conv_1_out_3_q1;
    select_ln28_8_fu_330_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_324_p2(0) = '1') else 
        r_0_reg_239;
    select_ln28_9_fu_338_p3 <= 
        f_fu_318_p2 when (icmp_ln13_fu_324_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_221_p4;
    select_ln28_fu_552_p3 <= 
        select_ln28_4_fu_501_p3 when (and_ln28_fu_546_p2(0) = '1') else 
        ap_const_lv32_800000;
    shl_ln26_fu_496_p2 <= std_logic_vector(shift_left(unsigned(select_ln28_10_reg_951),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln28_1_fu_459_p2 <= std_logic_vector(shift_left(unsigned(r_reg_946),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln28_fu_282_p2 <= std_logic_vector(shift_left(unsigned(r_0_reg_239),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_10_fu_797_p4 <= bitcast_ln28_5_fu_793_p1(30 downto 23);
    tmp_11_fu_815_p4 <= bitcast_ln28_6_fu_811_p1(30 downto 23);
    tmp_13_fu_566_p3 <= (or_ln26_fu_560_p2 & ap_const_lv1_0);
    tmp_14_fu_887_p3 <= (select_ln28_10_reg_951_pp0_iter2_reg & ap_const_lv1_0);
    tmp_1_fu_414_p3 <= (trunc_ln26_fu_410_p1 & select_ln28_9_fu_338_p3);
    tmp_3_fu_514_p4 <= bitcast_ln28_fu_510_p1(30 downto 23);
    tmp_5_fu_602_p4 <= bitcast_ln28_1_fu_598_p1(30 downto 23);
    tmp_6_fu_619_p4 <= bitcast_ln28_2_fu_616_p1(30 downto 23);
    tmp_8_fu_700_p4 <= bitcast_ln28_3_fu_697_p1(30 downto 23);
    tmp_9_fu_717_p4 <= bitcast_ln28_4_fu_714_p1(30 downto 23);
    tmp_s_fu_270_p0 <= 
        conv_1_out_1_q0 when (select_ln28_12_reg_1002(0) = '1') else 
        conv_1_out_3_q0;
    tmp_s_fu_270_p1 <= 
        select_ln28_5_fu_590_p3 when (and_ln28_2_fu_675_p2(0) = '1') else 
        select_ln28_reg_1018;
    trunc_ln26_fu_410_p1 <= select_ln28_10_fu_382_p3(1 - 1 downto 0);
    trunc_ln28_1_fu_390_p1 <= r_fu_370_p2(1 - 1 downto 0);
    trunc_ln28_2_fu_524_p1 <= bitcast_ln28_fu_510_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_612_p1 <= bitcast_ln28_1_fu_598_p1(23 - 1 downto 0);
    trunc_ln28_4_fu_629_p1 <= bitcast_ln28_2_fu_616_p1(23 - 1 downto 0);
    trunc_ln28_5_fu_710_p1 <= bitcast_ln28_3_fu_697_p1(23 - 1 downto 0);
    trunc_ln28_6_fu_727_p1 <= bitcast_ln28_4_fu_714_p1(23 - 1 downto 0);
    trunc_ln28_7_fu_807_p1 <= bitcast_ln28_5_fu_793_p1(23 - 1 downto 0);
    trunc_ln28_8_fu_825_p1 <= bitcast_ln28_6_fu_811_p1(23 - 1 downto 0);
    trunc_ln28_fu_278_p1 <= r_0_reg_239(1 - 1 downto 0);
    xor_ln28_fu_346_p2 <= (icmp_ln13_fu_324_p2 xor ap_const_lv1_1);
    zext_ln28_1_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_414_p3),64));
    zext_ln28_2_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_566_p3),4));
    zext_ln28_3_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_578_p2),64));
    zext_ln28_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_9_reg_934),4));
    zext_ln35_1_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_898_p2),64));
    zext_ln35_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_887_p3),4));
end behav;
