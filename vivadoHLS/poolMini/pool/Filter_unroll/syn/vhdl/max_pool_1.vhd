-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.668000,HLS_SYN_LAT=122,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=183,HLS_SYN_LUT=711,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln13_fu_259_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln13_reg_692 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln25_fu_265_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_reg_697 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln13_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln16_fu_279_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln16_reg_702 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln16_fu_289_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln16_reg_710 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln26_fu_295_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln26_reg_715 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln16_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_fu_307_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln20_reg_723 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln25_fu_313_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln25_reg_728 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_fu_346_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln23_reg_736 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln23_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln13_1_fu_469_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln13_1_reg_754 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal shl_ln25_1_fu_475_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_1_reg_759 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln13_1_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln16_1_fu_489_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln16_1_reg_764 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln16_1_fu_499_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln16_1_reg_772 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal shl_ln26_1_fu_505_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln26_1_reg_777 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln16_1_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_1_fu_517_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln20_1_reg_785 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln25_1_fu_523_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln25_1_reg_790 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_1_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_1_fu_562_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln23_1_reg_798 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln23_1_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_1_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal r_0_0_reg_106 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_0_reg_117 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_0_0_reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_0_reg_142 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_0_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_0_reg_165 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_0_1_reg_176 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_1_reg_187 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_0_1_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_1_reg_212 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_1_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_1_reg_235 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_1_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_588_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_271_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_fu_318_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_322_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_327_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_352_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_16_fu_357_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln28_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_375_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_385_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_393_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_403_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_481_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_2_fu_528_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_1_fu_532_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_cast_fu_537_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln35_fu_545_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_568_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_fu_573_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln28_4_fu_582_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln28_2_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_3_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_601_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_611_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_619_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_629_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q0,
        din1 => grp_fu_246_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_246_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_0_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_0_reg_117 <= add_ln16_reg_710;
            elsif (((icmp_ln13_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_0_reg_117 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_0_1_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln20_1_fu_511_p2 = ap_const_lv1_1))) then 
                c_0_1_reg_187 <= add_ln16_1_reg_772;
            elsif (((icmp_ln13_1_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                c_0_1_reg_187 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    max_0_0_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_0_0_reg_129 <= max_1_0_reg_153;
            elsif (((icmp_ln16_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                max_0_0_reg_129 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_0_1_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln23_1_fu_556_p2 = ap_const_lv1_1))) then 
                max_0_1_reg_199 <= max_1_1_reg_223;
            elsif (((icmp_ln16_1_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                max_0_1_reg_199 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_1_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                max_1_0_reg_153 <= select_ln28_fu_455_p3;
            elsif (((icmp_ln20_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_1_0_reg_153 <= max_0_0_reg_129;
            end if; 
        end if;
    end process;

    max_1_1_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                max_1_1_reg_223 <= select_ln28_1_fu_681_p3;
            elsif (((icmp_ln20_1_fu_511_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                max_1_1_reg_223 <= max_0_1_reg_199;
            end if; 
        end if;
    end process;

    mpc_0_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                mpc_0_0_reg_165 <= add_ln23_reg_736;
            elsif (((icmp_ln20_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpc_0_0_reg_165 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpc_0_1_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                mpc_0_1_reg_235 <= add_ln23_1_reg_798;
            elsif (((icmp_ln20_1_fu_511_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                mpc_0_1_reg_235 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                mpr_0_0_reg_142 <= add_ln20_reg_723;
            elsif (((icmp_ln16_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                mpr_0_0_reg_142 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_1_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln23_1_fu_556_p2 = ap_const_lv1_1))) then 
                mpr_0_1_reg_212 <= add_ln20_1_reg_785;
            elsif (((icmp_ln16_1_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                mpr_0_1_reg_212 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_0_reg_106 <= add_ln13_reg_692;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_0_reg_106 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_1_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln16_1_fu_493_p2 = ap_const_lv1_1))) then 
                r_0_1_reg_176 <= add_ln13_1_reg_754;
            elsif (((icmp_ln13_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_1_reg_176 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln13_1_reg_754 <= add_ln13_1_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln13_reg_692 <= add_ln13_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln16_1_reg_772 <= add_ln16_1_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln16_reg_710 <= add_ln16_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln20_1_reg_785 <= add_ln20_1_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln20_reg_723 <= add_ln20_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln23_1_reg_798 <= add_ln23_1_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln23_reg_736 <= add_ln23_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_1_fu_511_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln25_1_reg_790 <= add_ln25_1_fu_523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln25_reg_728 <= add_ln25_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_1_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    shl_ln25_1_reg_759(1) <= shl_ln25_1_fu_475_p2(1);
                    zext_ln16_1_reg_764(2 downto 1) <= zext_ln16_1_fu_489_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln25_reg_697(1) <= shl_ln25_fu_265_p2(1);
                    zext_ln16_reg_702(2 downto 1) <= zext_ln16_fu_279_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_1_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    shl_ln26_1_reg_777(1) <= shl_ln26_1_fu_505_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln26_reg_715(1) <= shl_ln26_fu_295_p2(1);
            end if;
        end if;
    end process;
    shl_ln25_reg_697(0) <= '0';
    zext_ln16_reg_702(0) <= '0';
    zext_ln16_reg_702(3) <= '0';
    shl_ln26_reg_715(0) <= '0';
    shl_ln25_1_reg_759(0) <= '0';
    zext_ln16_1_reg_764(0) <= '0';
    zext_ln16_1_reg_764(3) <= '0';
    shl_ln26_1_reg_777(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln13_fu_253_p2, ap_CS_fsm_state3, icmp_ln16_fu_283_p2, ap_CS_fsm_state4, icmp_ln20_fu_301_p2, ap_CS_fsm_state5, icmp_ln23_fu_340_p2, ap_CS_fsm_state7, icmp_ln13_1_fu_463_p2, ap_CS_fsm_state8, icmp_ln16_1_fu_493_p2, ap_CS_fsm_state9, icmp_ln20_1_fu_511_p2, ap_CS_fsm_state10, icmp_ln23_1_fu_556_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln13_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln16_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln20_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln23_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln13_1_fu_463_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln16_1_fu_493_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln20_1_fu_511_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln23_1_fu_556_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln13_1_fu_469_p2 <= std_logic_vector(unsigned(r_0_1_reg_176) + unsigned(ap_const_lv2_1));
    add_ln13_fu_259_p2 <= std_logic_vector(unsigned(r_0_0_reg_106) + unsigned(ap_const_lv2_1));
    add_ln16_1_fu_499_p2 <= std_logic_vector(unsigned(c_0_1_reg_187) + unsigned(ap_const_lv2_1));
    add_ln16_fu_289_p2 <= std_logic_vector(unsigned(c_0_0_reg_117) + unsigned(ap_const_lv2_1));
    add_ln20_1_fu_517_p2 <= std_logic_vector(unsigned(mpr_0_1_reg_212) + unsigned(ap_const_lv2_1));
    add_ln20_fu_307_p2 <= std_logic_vector(unsigned(mpr_0_0_reg_142) + unsigned(ap_const_lv2_1));
    add_ln23_1_fu_562_p2 <= std_logic_vector(unsigned(mpc_0_1_reg_235) + unsigned(ap_const_lv2_1));
    add_ln23_fu_346_p2 <= std_logic_vector(unsigned(mpc_0_0_reg_165) + unsigned(ap_const_lv2_1));
    add_ln25_1_fu_523_p2 <= std_logic_vector(unsigned(mpr_0_1_reg_212) + unsigned(shl_ln25_1_reg_759));
    add_ln25_fu_313_p2 <= std_logic_vector(unsigned(mpr_0_0_reg_142) + unsigned(shl_ln25_reg_697));
    add_ln26_1_fu_568_p2 <= std_logic_vector(unsigned(shl_ln26_1_reg_777) + unsigned(mpc_0_1_reg_235));
    add_ln26_fu_352_p2 <= std_logic_vector(unsigned(mpc_0_0_reg_165) + unsigned(shl_ln26_reg_715));
    add_ln35_1_fu_532_p2 <= std_logic_vector(unsigned(zext_ln35_2_fu_528_p1) + unsigned(zext_ln16_1_reg_764));
    add_ln35_fu_322_p2 <= std_logic_vector(unsigned(zext_ln35_fu_318_p1) + unsigned(zext_ln16_reg_702));
    and_ln28_1_fu_449_p2 <= (grp_fu_246_p2 and and_ln28_fu_443_p2);
    and_ln28_2_fu_669_p2 <= (or_ln28_3_fu_663_p2 and or_ln28_2_fu_645_p2);
    and_ln28_3_fu_675_p2 <= (grp_fu_246_p2 and and_ln28_2_fu_669_p2);
    and_ln28_fu_443_p2 <= (or_ln28_fu_419_p2 and or_ln28_1_fu_437_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state7, icmp_ln13_1_fu_463_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln13_1_fu_463_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln13_1_fu_463_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln13_1_fu_463_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_389_p1 <= max_1_0_reg_153;
    bitcast_ln28_2_fu_597_p1 <= conv_1_out_q0;
    bitcast_ln28_3_fu_615_p1 <= max_1_1_reg_223;
    bitcast_ln28_fu_371_p1 <= conv_1_out_q0;

    conv_1_out_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, zext_ln28_fu_366_p1, tmp_18_fu_588_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_out_address0 <= tmp_18_fu_588_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_address0 <= zext_ln28_fu_366_p1(5 - 1 downto 0);
        else 
            conv_1_out_address0 <= "XXXXX";
        end if; 
    end process;


    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_246_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, max_1_0_reg_153, max_1_1_reg_223)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_246_p1 <= max_1_1_reg_223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_246_p1 <= max_1_0_reg_153;
        else 
            grp_fu_246_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln13_1_fu_463_p2 <= "1" when (r_0_1_reg_176 = ap_const_lv2_2) else "0";
    icmp_ln13_fu_253_p2 <= "1" when (r_0_0_reg_106 = ap_const_lv2_2) else "0";
    icmp_ln16_1_fu_493_p2 <= "1" when (c_0_1_reg_187 = ap_const_lv2_2) else "0";
    icmp_ln16_fu_283_p2 <= "1" when (c_0_0_reg_117 = ap_const_lv2_2) else "0";
    icmp_ln20_1_fu_511_p2 <= "1" when (mpr_0_1_reg_212 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_301_p2 <= "1" when (mpr_0_0_reg_142 = ap_const_lv2_2) else "0";
    icmp_ln23_1_fu_556_p2 <= "1" when (mpc_0_1_reg_235 = ap_const_lv2_2) else "0";
    icmp_ln23_fu_340_p2 <= "1" when (mpc_0_0_reg_165 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_413_p2 <= "1" when (trunc_ln28_fu_385_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_425_p2 <= "0" when (tmp_9_fu_393_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_431_p2 <= "1" when (trunc_ln28_1_fu_403_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_633_p2 <= "0" when (tmp_10_fu_601_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_639_p2 <= "1" when (trunc_ln28_2_fu_611_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_651_p2 <= "0" when (tmp_11_fu_619_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_657_p2 <= "1" when (trunc_ln28_3_fu_629_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_407_p2 <= "0" when (tmp_1_fu_375_p4 = ap_const_lv8_FF) else "1";

    max_pool_1_out_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, zext_ln35_1_fu_335_p1, zext_ln35_3_fu_551_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_address0 <= zext_ln35_3_fu_551_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_1_out_address0 <= zext_ln35_1_fu_335_p1(3 - 1 downto 0);
        else 
            max_pool_1_out_address0 <= "XXX";
        end if; 
    end process;


    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, max_0_0_reg_129, max_0_1_reg_199)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_d0 <= max_0_1_reg_199;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_1_out_d0 <= max_0_0_reg_129;
        else 
            max_pool_1_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln20_fu_301_p2, ap_CS_fsm_state9, icmp_ln20_1_fu_511_p2)
    begin
        if ((((icmp_ln20_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln20_1_fu_511_p2 = ap_const_lv1_1)))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln28_1_fu_437_p2 <= (icmp_ln28_3_fu_431_p2 or icmp_ln28_2_fu_425_p2);
    or_ln28_2_fu_645_p2 <= (icmp_ln28_5_fu_639_p2 or icmp_ln28_4_fu_633_p2);
    or_ln28_3_fu_663_p2 <= (icmp_ln28_7_fu_657_p2 or icmp_ln28_6_fu_651_p2);
    or_ln28_4_fu_582_p2 <= (tmp_17_fu_573_p4 or ap_const_lv5_1);
    or_ln28_fu_419_p2 <= (icmp_ln28_fu_407_p2 or icmp_ln28_1_fu_413_p2);
    or_ln35_fu_545_p2 <= (tmp_23_cast_fu_537_p3 or ap_const_lv5_1);
    select_ln28_1_fu_681_p3 <= 
        conv_1_out_q0 when (and_ln28_3_fu_675_p2(0) = '1') else 
        max_1_1_reg_223;
    select_ln28_fu_455_p3 <= 
        conv_1_out_q0 when (and_ln28_1_fu_449_p2(0) = '1') else 
        max_1_0_reg_153;
    shl_ln25_1_fu_475_p2 <= std_logic_vector(shift_left(unsigned(r_0_1_reg_176),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln25_fu_265_p2 <= std_logic_vector(shift_left(unsigned(r_0_0_reg_106),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln26_1_fu_505_p2 <= std_logic_vector(shift_left(unsigned(c_0_1_reg_187),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln26_fu_295_p2 <= std_logic_vector(shift_left(unsigned(c_0_0_reg_117),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_10_fu_601_p4 <= bitcast_ln28_2_fu_597_p1(30 downto 23);
    tmp_11_fu_619_p4 <= bitcast_ln28_3_fu_615_p1(30 downto 23);
    tmp_13_fu_271_p3 <= (r_0_0_reg_106 & ap_const_lv1_0);
    tmp_14_fu_481_p3 <= (r_0_1_reg_176 & ap_const_lv1_0);
    tmp_15_fu_327_p3 <= (add_ln35_fu_322_p2 & ap_const_lv1_0);
    tmp_16_fu_357_p4 <= ((add_ln25_reg_728 & add_ln26_fu_352_p2) & ap_const_lv1_0);
    tmp_17_fu_573_p4 <= ((add_ln25_1_reg_790 & add_ln26_1_fu_568_p2) & ap_const_lv1_0);
    tmp_18_fu_588_p3 <= (ap_const_lv59_0 & or_ln28_4_fu_582_p2);
    tmp_1_fu_375_p4 <= bitcast_ln28_fu_371_p1(30 downto 23);
    tmp_23_cast_fu_537_p3 <= (add_ln35_1_fu_532_p2 & ap_const_lv1_0);
    tmp_9_fu_393_p4 <= bitcast_ln28_1_fu_389_p1(30 downto 23);
    trunc_ln28_1_fu_403_p1 <= bitcast_ln28_1_fu_389_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_611_p1 <= bitcast_ln28_2_fu_597_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_629_p1 <= bitcast_ln28_3_fu_615_p1(23 - 1 downto 0);
    trunc_ln28_fu_385_p1 <= bitcast_ln28_fu_371_p1(23 - 1 downto 0);
    zext_ln16_1_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_481_p3),4));
    zext_ln16_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_271_p3),4));
    zext_ln28_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_357_p4),64));
    zext_ln35_1_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_327_p3),64));
    zext_ln35_2_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_1_reg_187),4));
    zext_ln35_3_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln35_fu_545_p2),64));
    zext_ln35_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_0_reg_117),4));
end behav;
