// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.668000,HLS_SYN_LAT=122,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=183,HLS_SYN_LUT=711,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] conv_1_out_address0;
reg conv_1_out_ce0;
reg[2:0] max_pool_1_out_address0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;
reg[31:0] max_pool_1_out_d0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] add_ln13_fu_259_p2;
reg   [1:0] add_ln13_reg_692;
wire    ap_CS_fsm_state2;
wire   [1:0] shl_ln25_fu_265_p2;
reg   [1:0] shl_ln25_reg_697;
wire   [0:0] icmp_ln13_fu_253_p2;
wire   [3:0] zext_ln16_fu_279_p1;
reg   [3:0] zext_ln16_reg_702;
wire   [1:0] add_ln16_fu_289_p2;
reg   [1:0] add_ln16_reg_710;
wire    ap_CS_fsm_state3;
wire   [1:0] shl_ln26_fu_295_p2;
reg   [1:0] shl_ln26_reg_715;
wire   [0:0] icmp_ln16_fu_283_p2;
wire   [1:0] add_ln20_fu_307_p2;
reg   [1:0] add_ln20_reg_723;
wire    ap_CS_fsm_state4;
wire   [1:0] add_ln25_fu_313_p2;
reg   [1:0] add_ln25_reg_728;
wire   [0:0] icmp_ln20_fu_301_p2;
wire   [1:0] add_ln23_fu_346_p2;
reg   [1:0] add_ln23_reg_736;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln23_fu_340_p2;
wire   [31:0] select_ln28_fu_455_p3;
wire    ap_CS_fsm_state6;
wire   [1:0] add_ln13_1_fu_469_p2;
reg   [1:0] add_ln13_1_reg_754;
wire    ap_CS_fsm_state7;
wire   [1:0] shl_ln25_1_fu_475_p2;
reg   [1:0] shl_ln25_1_reg_759;
wire   [0:0] icmp_ln13_1_fu_463_p2;
wire   [3:0] zext_ln16_1_fu_489_p1;
reg   [3:0] zext_ln16_1_reg_764;
wire   [1:0] add_ln16_1_fu_499_p2;
reg   [1:0] add_ln16_1_reg_772;
wire    ap_CS_fsm_state8;
wire   [1:0] shl_ln26_1_fu_505_p2;
reg   [1:0] shl_ln26_1_reg_777;
wire   [0:0] icmp_ln16_1_fu_493_p2;
wire   [1:0] add_ln20_1_fu_517_p2;
reg   [1:0] add_ln20_1_reg_785;
wire    ap_CS_fsm_state9;
wire   [1:0] add_ln25_1_fu_523_p2;
reg   [1:0] add_ln25_1_reg_790;
wire   [0:0] icmp_ln20_1_fu_511_p2;
wire   [1:0] add_ln23_1_fu_562_p2;
reg   [1:0] add_ln23_1_reg_798;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln23_1_fu_556_p2;
wire   [31:0] select_ln28_1_fu_681_p3;
wire    ap_CS_fsm_state11;
reg   [1:0] r_0_0_reg_106;
reg   [1:0] c_0_0_reg_117;
reg   [31:0] max_0_0_reg_129;
reg   [1:0] mpr_0_0_reg_142;
reg   [31:0] max_1_0_reg_153;
reg   [1:0] mpc_0_0_reg_165;
reg   [1:0] r_0_1_reg_176;
reg   [1:0] c_0_1_reg_187;
reg   [31:0] max_0_1_reg_199;
reg   [1:0] mpr_0_1_reg_212;
reg   [31:0] max_1_1_reg_223;
reg   [1:0] mpc_0_1_reg_235;
wire   [63:0] zext_ln35_1_fu_335_p1;
wire   [63:0] zext_ln28_fu_366_p1;
wire   [63:0] zext_ln35_3_fu_551_p1;
wire   [63:0] tmp_18_fu_588_p3;
reg   [31:0] grp_fu_246_p1;
wire   [2:0] tmp_13_fu_271_p3;
wire   [3:0] zext_ln35_fu_318_p1;
wire   [3:0] add_ln35_fu_322_p2;
wire   [4:0] tmp_15_fu_327_p3;
wire   [1:0] add_ln26_fu_352_p2;
wire   [4:0] tmp_16_fu_357_p4;
wire   [31:0] bitcast_ln28_fu_371_p1;
wire   [31:0] bitcast_ln28_1_fu_389_p1;
wire   [7:0] tmp_1_fu_375_p4;
wire   [22:0] trunc_ln28_fu_385_p1;
wire   [0:0] icmp_ln28_1_fu_413_p2;
wire   [0:0] icmp_ln28_fu_407_p2;
wire   [7:0] tmp_9_fu_393_p4;
wire   [22:0] trunc_ln28_1_fu_403_p1;
wire   [0:0] icmp_ln28_3_fu_431_p2;
wire   [0:0] icmp_ln28_2_fu_425_p2;
wire   [0:0] or_ln28_fu_419_p2;
wire   [0:0] or_ln28_1_fu_437_p2;
wire   [0:0] and_ln28_fu_443_p2;
wire   [0:0] grp_fu_246_p2;
wire   [0:0] and_ln28_1_fu_449_p2;
wire   [2:0] tmp_14_fu_481_p3;
wire   [3:0] zext_ln35_2_fu_528_p1;
wire   [3:0] add_ln35_1_fu_532_p2;
wire   [4:0] tmp_23_cast_fu_537_p3;
wire   [4:0] or_ln35_fu_545_p2;
wire   [1:0] add_ln26_1_fu_568_p2;
wire   [4:0] tmp_17_fu_573_p4;
wire   [4:0] or_ln28_4_fu_582_p2;
wire   [31:0] bitcast_ln28_2_fu_597_p1;
wire   [31:0] bitcast_ln28_3_fu_615_p1;
wire   [7:0] tmp_10_fu_601_p4;
wire   [22:0] trunc_ln28_2_fu_611_p1;
wire   [0:0] icmp_ln28_5_fu_639_p2;
wire   [0:0] icmp_ln28_4_fu_633_p2;
wire   [7:0] tmp_11_fu_619_p4;
wire   [22:0] trunc_ln28_3_fu_629_p1;
wire   [0:0] icmp_ln28_7_fu_657_p2;
wire   [0:0] icmp_ln28_6_fu_651_p2;
wire   [0:0] or_ln28_2_fu_645_p2;
wire   [0:0] or_ln28_3_fu_663_p2;
wire   [0:0] and_ln28_2_fu_669_p2;
wire   [0:0] and_ln28_3_fu_675_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(grp_fu_246_p1),
    .opcode(5'd2),
    .dout(grp_fu_246_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_0_reg_117 <= add_ln16_reg_710;
    end else if (((icmp_ln13_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_0_reg_117 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln20_1_fu_511_p2 == 1'd1))) begin
        c_0_1_reg_187 <= add_ln16_1_reg_772;
    end else if (((icmp_ln13_1_fu_463_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        c_0_1_reg_187 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_0_0_reg_129 <= max_1_0_reg_153;
    end else if (((icmp_ln16_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        max_0_0_reg_129 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln23_1_fu_556_p2 == 1'd1))) begin
        max_0_1_reg_199 <= max_1_1_reg_223;
    end else if (((icmp_ln16_1_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        max_0_1_reg_199 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_1_0_reg_153 <= select_ln28_fu_455_p3;
    end else if (((icmp_ln20_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_1_0_reg_153 <= max_0_0_reg_129;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        max_1_1_reg_223 <= select_ln28_1_fu_681_p3;
    end else if (((icmp_ln20_1_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        max_1_1_reg_223 <= max_0_1_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_0_0_reg_165 <= add_ln23_reg_736;
    end else if (((icmp_ln20_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpc_0_0_reg_165 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mpc_0_1_reg_235 <= add_ln23_1_reg_798;
    end else if (((icmp_ln20_1_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        mpc_0_1_reg_235 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mpr_0_0_reg_142 <= add_ln20_reg_723;
    end else if (((icmp_ln16_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mpr_0_0_reg_142 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln23_1_fu_556_p2 == 1'd1))) begin
        mpr_0_1_reg_212 <= add_ln20_1_reg_785;
    end else if (((icmp_ln16_1_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        mpr_0_1_reg_212 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_0_reg_106 <= add_ln13_reg_692;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_0_reg_106 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln16_1_fu_493_p2 == 1'd1))) begin
        r_0_1_reg_176 <= add_ln13_1_reg_754;
    end else if (((icmp_ln13_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_1_reg_176 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln13_1_reg_754 <= add_ln13_1_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln13_reg_692 <= add_ln13_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln16_1_reg_772 <= add_ln16_1_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln16_reg_710 <= add_ln16_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln20_1_reg_785 <= add_ln20_1_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln20_reg_723 <= add_ln20_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln23_1_reg_798 <= add_ln23_1_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln23_reg_736 <= add_ln23_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_1_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln25_1_reg_790 <= add_ln25_1_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln25_reg_728 <= add_ln25_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_1_fu_463_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        shl_ln25_1_reg_759[1] <= shl_ln25_1_fu_475_p2[1];
        zext_ln16_1_reg_764[2 : 1] <= zext_ln16_1_fu_489_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln25_reg_697[1] <= shl_ln25_fu_265_p2[1];
        zext_ln16_reg_702[2 : 1] <= zext_ln16_fu_279_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_1_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        shl_ln26_1_reg_777[1] <= shl_ln26_1_fu_505_p2[1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln26_reg_715[1] <= shl_ln26_fu_295_p2[1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln13_1_fu_463_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln13_1_fu_463_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_1_out_address0 = tmp_18_fu_588_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_address0 = zext_ln28_fu_366_p1;
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_246_p1 = max_1_1_reg_223;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_246_p1 = max_1_0_reg_153;
    end else begin
        grp_fu_246_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        max_pool_1_out_address0 = zext_ln35_3_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_address0 = zext_ln35_1_fu_335_p1;
    end else begin
        max_pool_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        max_pool_1_out_d0 = max_0_1_reg_199;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_d0 = max_0_0_reg_129;
    end else begin
        max_pool_1_out_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln20_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln20_1_fu_511_p2 == 1'd1)))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln16_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln20_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln23_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln13_1_fu_463_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln16_1_fu_493_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln20_1_fu_511_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln23_1_fu_556_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_1_fu_469_p2 = (r_0_1_reg_176 + 2'd1);

assign add_ln13_fu_259_p2 = (r_0_0_reg_106 + 2'd1);

assign add_ln16_1_fu_499_p2 = (c_0_1_reg_187 + 2'd1);

assign add_ln16_fu_289_p2 = (c_0_0_reg_117 + 2'd1);

assign add_ln20_1_fu_517_p2 = (mpr_0_1_reg_212 + 2'd1);

assign add_ln20_fu_307_p2 = (mpr_0_0_reg_142 + 2'd1);

assign add_ln23_1_fu_562_p2 = (mpc_0_1_reg_235 + 2'd1);

assign add_ln23_fu_346_p2 = (mpc_0_0_reg_165 + 2'd1);

assign add_ln25_1_fu_523_p2 = (mpr_0_1_reg_212 + shl_ln25_1_reg_759);

assign add_ln25_fu_313_p2 = (mpr_0_0_reg_142 + shl_ln25_reg_697);

assign add_ln26_1_fu_568_p2 = (shl_ln26_1_reg_777 + mpc_0_1_reg_235);

assign add_ln26_fu_352_p2 = (mpc_0_0_reg_165 + shl_ln26_reg_715);

assign add_ln35_1_fu_532_p2 = (zext_ln35_2_fu_528_p1 + zext_ln16_1_reg_764);

assign add_ln35_fu_322_p2 = (zext_ln35_fu_318_p1 + zext_ln16_reg_702);

assign and_ln28_1_fu_449_p2 = (grp_fu_246_p2 & and_ln28_fu_443_p2);

assign and_ln28_2_fu_669_p2 = (or_ln28_3_fu_663_p2 & or_ln28_2_fu_645_p2);

assign and_ln28_3_fu_675_p2 = (grp_fu_246_p2 & and_ln28_2_fu_669_p2);

assign and_ln28_fu_443_p2 = (or_ln28_fu_419_p2 & or_ln28_1_fu_437_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln28_1_fu_389_p1 = max_1_0_reg_153;

assign bitcast_ln28_2_fu_597_p1 = conv_1_out_q0;

assign bitcast_ln28_3_fu_615_p1 = max_1_1_reg_223;

assign bitcast_ln28_fu_371_p1 = conv_1_out_q0;

assign icmp_ln13_1_fu_463_p2 = ((r_0_1_reg_176 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_253_p2 = ((r_0_0_reg_106 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_493_p2 = ((c_0_1_reg_187 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_283_p2 = ((c_0_0_reg_117 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_511_p2 = ((mpr_0_1_reg_212 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_301_p2 = ((mpr_0_0_reg_142 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_556_p2 = ((mpc_0_1_reg_235 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_340_p2 = ((mpc_0_0_reg_165 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_413_p2 = ((trunc_ln28_fu_385_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_425_p2 = ((tmp_9_fu_393_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_431_p2 = ((trunc_ln28_1_fu_403_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_633_p2 = ((tmp_10_fu_601_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_639_p2 = ((trunc_ln28_2_fu_611_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_651_p2 = ((tmp_11_fu_619_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_657_p2 = ((trunc_ln28_3_fu_629_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_407_p2 = ((tmp_1_fu_375_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln28_1_fu_437_p2 = (icmp_ln28_3_fu_431_p2 | icmp_ln28_2_fu_425_p2);

assign or_ln28_2_fu_645_p2 = (icmp_ln28_5_fu_639_p2 | icmp_ln28_4_fu_633_p2);

assign or_ln28_3_fu_663_p2 = (icmp_ln28_7_fu_657_p2 | icmp_ln28_6_fu_651_p2);

assign or_ln28_4_fu_582_p2 = (tmp_17_fu_573_p4 | 5'd1);

assign or_ln28_fu_419_p2 = (icmp_ln28_fu_407_p2 | icmp_ln28_1_fu_413_p2);

assign or_ln35_fu_545_p2 = (tmp_23_cast_fu_537_p3 | 5'd1);

assign select_ln28_1_fu_681_p3 = ((and_ln28_3_fu_675_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_1_reg_223);

assign select_ln28_fu_455_p3 = ((and_ln28_1_fu_449_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_0_reg_153);

assign shl_ln25_1_fu_475_p2 = r_0_1_reg_176 << 2'd1;

assign shl_ln25_fu_265_p2 = r_0_0_reg_106 << 2'd1;

assign shl_ln26_1_fu_505_p2 = c_0_1_reg_187 << 2'd1;

assign shl_ln26_fu_295_p2 = c_0_0_reg_117 << 2'd1;

assign tmp_10_fu_601_p4 = {{bitcast_ln28_2_fu_597_p1[30:23]}};

assign tmp_11_fu_619_p4 = {{bitcast_ln28_3_fu_615_p1[30:23]}};

assign tmp_13_fu_271_p3 = {{r_0_0_reg_106}, {1'd0}};

assign tmp_14_fu_481_p3 = {{r_0_1_reg_176}, {1'd0}};

assign tmp_15_fu_327_p3 = {{add_ln35_fu_322_p2}, {1'd0}};

assign tmp_16_fu_357_p4 = {{{add_ln25_reg_728}, {add_ln26_fu_352_p2}}, {1'd0}};

assign tmp_17_fu_573_p4 = {{{add_ln25_1_reg_790}, {add_ln26_1_fu_568_p2}}, {1'd0}};

assign tmp_18_fu_588_p3 = {{59'd0}, {or_ln28_4_fu_582_p2}};

assign tmp_1_fu_375_p4 = {{bitcast_ln28_fu_371_p1[30:23]}};

assign tmp_23_cast_fu_537_p3 = {{add_ln35_1_fu_532_p2}, {1'd0}};

assign tmp_9_fu_393_p4 = {{bitcast_ln28_1_fu_389_p1[30:23]}};

assign trunc_ln28_1_fu_403_p1 = bitcast_ln28_1_fu_389_p1[22:0];

assign trunc_ln28_2_fu_611_p1 = bitcast_ln28_2_fu_597_p1[22:0];

assign trunc_ln28_3_fu_629_p1 = bitcast_ln28_3_fu_615_p1[22:0];

assign trunc_ln28_fu_385_p1 = bitcast_ln28_fu_371_p1[22:0];

assign zext_ln16_1_fu_489_p1 = tmp_14_fu_481_p3;

assign zext_ln16_fu_279_p1 = tmp_13_fu_271_p3;

assign zext_ln28_fu_366_p1 = tmp_16_fu_357_p4;

assign zext_ln35_1_fu_335_p1 = tmp_15_fu_327_p3;

assign zext_ln35_2_fu_528_p1 = c_0_1_reg_187;

assign zext_ln35_3_fu_551_p1 = or_ln35_fu_545_p2;

assign zext_ln35_fu_318_p1 = c_0_0_reg_117;

always @ (posedge ap_clk) begin
    shl_ln25_reg_697[0] <= 1'b0;
    zext_ln16_reg_702[0] <= 1'b0;
    zext_ln16_reg_702[3] <= 1'b0;
    shl_ln26_reg_715[0] <= 1'b0;
    shl_ln25_1_reg_759[0] <= 1'b0;
    zext_ln16_1_reg_764[0] <= 1'b0;
    zext_ln16_1_reg_764[3] <= 1'b0;
    shl_ln26_1_reg_777[0] <= 1'b0;
end

endmodule //max_pool_1
