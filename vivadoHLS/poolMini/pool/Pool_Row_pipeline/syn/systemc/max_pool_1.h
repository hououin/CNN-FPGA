// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_1_HH_
#define _max_pool_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "max_pool_1_fcmp_3bkb.h"

namespace ap_rtl {

struct max_pool_1 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > conv_1_out_address0;
    sc_out< sc_logic > conv_1_out_ce0;
    sc_in< sc_lv<32> > conv_1_out_q0;
    sc_out< sc_lv<5> > conv_1_out_address1;
    sc_out< sc_logic > conv_1_out_ce1;
    sc_in< sc_lv<32> > conv_1_out_q1;
    sc_out< sc_lv<3> > max_pool_1_out_address0;
    sc_out< sc_logic > max_pool_1_out_ce0;
    sc_out< sc_logic > max_pool_1_out_we0;
    sc_out< sc_lv<32> > max_pool_1_out_d0;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    max_pool_1(sc_module_name name);
    SC_HAS_PROCESS(max_pool_1);

    ~max_pool_1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    max_pool_1_fcmp_3bkb<1,1,32,32,1>* max_pool_1_fcmp_3bkb_U1;
    max_pool_1_fcmp_3bkb<1,1,32,32,1>* max_pool_1_fcmp_3bkb_U2;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > indvar_flatten53_reg_120;
    sc_signal< sc_lv<2> > f_0_reg_131;
    sc_signal< sc_lv<5> > indvar_flatten20_reg_142;
    sc_signal< sc_lv<2> > r_0_reg_153;
    sc_signal< sc_lv<4> > indvar_flatten_reg_164;
    sc_signal< sc_lv<2> > c_0_reg_175;
    sc_signal< sc_lv<32> > max_0_reg_186;
    sc_signal< sc_lv<2> > mpr_0_reg_198;
    sc_signal< sc_lv<1> > icmp_ln10_fu_236_p2;
    sc_signal< sc_lv<1> > icmp_ln10_reg_778;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln10_reg_778_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln10_reg_778_pp0_iter2_reg;
    sc_signal< sc_lv<5> > add_ln10_fu_242_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > select_ln28_3_fu_268_p3;
    sc_signal< sc_lv<2> > select_ln28_3_reg_787;
    sc_signal< sc_lv<2> > select_ln25_2_fu_352_p3;
    sc_signal< sc_lv<2> > select_ln25_2_reg_793;
    sc_signal< sc_lv<1> > or_ln26_2_fu_390_p2;
    sc_signal< sc_lv<1> > or_ln26_2_reg_799;
    sc_signal< sc_lv<1> > or_ln26_2_reg_799_pp0_iter1_reg;
    sc_signal< sc_lv<2> > select_ln16_fu_416_p3;
    sc_signal< sc_lv<2> > select_ln16_reg_804;
    sc_signal< sc_lv<7> > add_ln28_1_fu_497_p2;
    sc_signal< sc_lv<7> > add_ln28_1_reg_815;
    sc_signal< sc_lv<2> > mpr_fu_503_p2;
    sc_signal< sc_lv<2> > mpr_reg_820;
    sc_signal< sc_lv<4> > select_ln16_1_fu_515_p3;
    sc_signal< sc_lv<5> > select_ln13_fu_529_p3;
    sc_signal< sc_lv<32> > conv_1_out_load_reg_841;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > icmp_ln20_1_fu_555_p2;
    sc_signal< sc_lv<1> > icmp_ln20_1_reg_848;
    sc_signal< sc_lv<1> > icmp_ln20_1_reg_848_pp0_iter2_reg;
    sc_signal< sc_lv<5> > add_ln35_1_fu_577_p2;
    sc_signal< sc_lv<5> > add_ln35_1_reg_852;
    sc_signal< sc_lv<5> > add_ln35_1_reg_852_pp0_iter2_reg;
    sc_signal< sc_lv<32> > select_ln28_1_fu_766_p3;
    sc_signal< sc_lv<32> > select_ln28_1_reg_857;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<2> > ap_phi_mux_f_0_phi_fu_135_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<2> > ap_phi_mux_r_0_phi_fu_157_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_c_0_phi_fu_179_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_max_0_phi_fu_190_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_mpr_0_phi_fu_202_p4;
    sc_signal< sc_lv<64> > zext_ln28_2_fu_464_p1;
    sc_signal< sc_lv<64> > zext_ln28_3_fu_551_p1;
    sc_signal< sc_lv<64> > zext_ln35_2_fu_774_p1;
    sc_signal< sc_lv<32> > select_ln26_fu_583_p3;
    sc_signal< sc_lv<32> > select_ln28_fu_674_p3;
    sc_signal< sc_lv<2> > shl_ln26_fu_224_p2;
    sc_signal< sc_lv<1> > icmp_ln13_fu_254_p2;
    sc_signal< sc_lv<2> > f_fu_248_p2;
    sc_signal< sc_lv<2> > shl_ln25_fu_218_p2;
    sc_signal< sc_lv<1> > icmp_ln20_fu_294_p2;
    sc_signal< sc_lv<1> > xor_ln28_fu_288_p2;
    sc_signal< sc_lv<1> > icmp_ln16_fu_306_p2;
    sc_signal< sc_lv<2> > select_ln28_2_fu_260_p3;
    sc_signal< sc_lv<1> > and_ln28_5_fu_312_p2;
    sc_signal< sc_lv<1> > or_ln25_fu_324_p2;
    sc_signal< sc_lv<2> > r_fu_318_p2;
    sc_signal< sc_lv<2> > shl_ln25_1_fu_338_p2;
    sc_signal< sc_lv<2> > select_ln28_4_fu_280_p3;
    sc_signal< sc_lv<1> > xor_ln25_fu_360_p2;
    sc_signal< sc_lv<1> > and_ln28_4_fu_300_p2;
    sc_signal< sc_lv<1> > or_ln25_1_fu_366_p2;
    sc_signal< sc_lv<2> > select_ln25_fu_330_p3;
    sc_signal< sc_lv<1> > and_ln25_fu_372_p2;
    sc_signal< sc_lv<1> > or_ln26_1_fu_384_p2;
    sc_signal< sc_lv<2> > c_fu_378_p2;
    sc_signal< sc_lv<2> > shl_ln26_1_fu_404_p2;
    sc_signal< sc_lv<2> > select_ln25_1_fu_344_p3;
    sc_signal< sc_lv<2> > select_ln26_1_fu_396_p3;
    sc_signal< sc_lv<2> > select_ln25_3_fu_430_p3;
    sc_signal< sc_lv<2> > i_fu_424_p2;
    sc_signal< sc_lv<2> > select_ln26_2_fu_438_p3;
    sc_signal< sc_lv<7> > zext_ln28_1_fu_276_p1;
    sc_signal< sc_lv<7> > tmp_15_cast_fu_446_p5;
    sc_signal< sc_lv<7> > add_ln28_fu_458_p2;
    sc_signal< sc_lv<2> > or_ln26_fu_230_p2;
    sc_signal< sc_lv<2> > or_ln26_3_fu_410_p2;
    sc_signal< sc_lv<2> > select_ln25_4_fu_469_p3;
    sc_signal< sc_lv<2> > select_ln26_3_fu_477_p3;
    sc_signal< sc_lv<7> > tmp_18_cast_fu_485_p5;
    sc_signal< sc_lv<4> > add_ln16_fu_509_p2;
    sc_signal< sc_lv<5> > add_ln13_1_fu_523_p2;
    sc_signal< sc_lv<3> > tmp_fu_540_p3;
    sc_signal< sc_lv<4> > zext_ln35_fu_547_p1;
    sc_signal< sc_lv<4> > zext_ln35_1_fu_560_p1;
    sc_signal< sc_lv<4> > add_ln35_fu_563_p2;
    sc_signal< sc_lv<5> > tmp_20_cast_fu_569_p3;
    sc_signal< sc_lv<5> > zext_ln28_fu_537_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_fu_591_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_1_fu_608_p1;
    sc_signal< sc_lv<8> > tmp_1_fu_594_p4;
    sc_signal< sc_lv<23> > trunc_ln28_fu_604_p1;
    sc_signal< sc_lv<1> > icmp_ln28_1_fu_632_p2;
    sc_signal< sc_lv<1> > icmp_ln28_fu_626_p2;
    sc_signal< sc_lv<8> > tmp_5_fu_612_p4;
    sc_signal< sc_lv<23> > trunc_ln28_1_fu_622_p1;
    sc_signal< sc_lv<1> > icmp_ln28_3_fu_650_p2;
    sc_signal< sc_lv<1> > icmp_ln28_2_fu_644_p2;
    sc_signal< sc_lv<1> > or_ln28_fu_638_p2;
    sc_signal< sc_lv<1> > or_ln28_1_fu_656_p2;
    sc_signal< sc_lv<1> > and_ln28_fu_662_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_209_p2;
    sc_signal< sc_lv<1> > and_ln28_1_fu_668_p2;
    sc_signal< sc_lv<32> > bitcast_ln28_2_fu_682_p1;
    sc_signal< sc_lv<32> > bitcast_ln28_3_fu_700_p1;
    sc_signal< sc_lv<8> > tmp_7_fu_686_p4;
    sc_signal< sc_lv<23> > trunc_ln28_2_fu_696_p1;
    sc_signal< sc_lv<1> > icmp_ln28_5_fu_724_p2;
    sc_signal< sc_lv<1> > icmp_ln28_4_fu_718_p2;
    sc_signal< sc_lv<8> > tmp_8_fu_704_p4;
    sc_signal< sc_lv<23> > trunc_ln28_3_fu_714_p1;
    sc_signal< sc_lv<1> > icmp_ln28_7_fu_742_p2;
    sc_signal< sc_lv<1> > icmp_ln28_6_fu_736_p2;
    sc_signal< sc_lv<1> > or_ln28_2_fu_730_p2;
    sc_signal< sc_lv<1> > or_ln28_3_fu_748_p2;
    sc_signal< sc_lv<1> > and_ln28_2_fu_754_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_213_p2;
    sc_signal< sc_lv<1> > and_ln28_3_fu_760_p2;
    sc_signal< bool > ap_block_pp0_stage0_00001;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_800000;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_8;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln10_fu_242_p2();
    void thread_add_ln13_1_fu_523_p2();
    void thread_add_ln16_fu_509_p2();
    void thread_add_ln28_1_fu_497_p2();
    void thread_add_ln28_fu_458_p2();
    void thread_add_ln35_1_fu_577_p2();
    void thread_add_ln35_fu_563_p2();
    void thread_and_ln25_fu_372_p2();
    void thread_and_ln28_1_fu_668_p2();
    void thread_and_ln28_2_fu_754_p2();
    void thread_and_ln28_3_fu_760_p2();
    void thread_and_ln28_4_fu_300_p2();
    void thread_and_ln28_5_fu_312_p2();
    void thread_and_ln28_fu_662_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_00001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_c_0_phi_fu_179_p4();
    void thread_ap_phi_mux_f_0_phi_fu_135_p4();
    void thread_ap_phi_mux_max_0_phi_fu_190_p4();
    void thread_ap_phi_mux_mpr_0_phi_fu_202_p4();
    void thread_ap_phi_mux_r_0_phi_fu_157_p4();
    void thread_ap_ready();
    void thread_bitcast_ln28_1_fu_608_p1();
    void thread_bitcast_ln28_2_fu_682_p1();
    void thread_bitcast_ln28_3_fu_700_p1();
    void thread_bitcast_ln28_fu_591_p1();
    void thread_c_fu_378_p2();
    void thread_conv_1_out_address0();
    void thread_conv_1_out_address1();
    void thread_conv_1_out_ce0();
    void thread_conv_1_out_ce1();
    void thread_f_fu_248_p2();
    void thread_i_fu_424_p2();
    void thread_icmp_ln10_fu_236_p2();
    void thread_icmp_ln13_fu_254_p2();
    void thread_icmp_ln16_fu_306_p2();
    void thread_icmp_ln20_1_fu_555_p2();
    void thread_icmp_ln20_fu_294_p2();
    void thread_icmp_ln28_1_fu_632_p2();
    void thread_icmp_ln28_2_fu_644_p2();
    void thread_icmp_ln28_3_fu_650_p2();
    void thread_icmp_ln28_4_fu_718_p2();
    void thread_icmp_ln28_5_fu_724_p2();
    void thread_icmp_ln28_6_fu_736_p2();
    void thread_icmp_ln28_7_fu_742_p2();
    void thread_icmp_ln28_fu_626_p2();
    void thread_max_pool_1_out_address0();
    void thread_max_pool_1_out_ce0();
    void thread_max_pool_1_out_d0();
    void thread_max_pool_1_out_we0();
    void thread_mpr_fu_503_p2();
    void thread_or_ln25_1_fu_366_p2();
    void thread_or_ln25_fu_324_p2();
    void thread_or_ln26_1_fu_384_p2();
    void thread_or_ln26_2_fu_390_p2();
    void thread_or_ln26_3_fu_410_p2();
    void thread_or_ln26_fu_230_p2();
    void thread_or_ln28_1_fu_656_p2();
    void thread_or_ln28_2_fu_730_p2();
    void thread_or_ln28_3_fu_748_p2();
    void thread_or_ln28_fu_638_p2();
    void thread_r_fu_318_p2();
    void thread_select_ln13_fu_529_p3();
    void thread_select_ln16_1_fu_515_p3();
    void thread_select_ln16_fu_416_p3();
    void thread_select_ln25_1_fu_344_p3();
    void thread_select_ln25_2_fu_352_p3();
    void thread_select_ln25_3_fu_430_p3();
    void thread_select_ln25_4_fu_469_p3();
    void thread_select_ln25_fu_330_p3();
    void thread_select_ln26_1_fu_396_p3();
    void thread_select_ln26_2_fu_438_p3();
    void thread_select_ln26_3_fu_477_p3();
    void thread_select_ln26_fu_583_p3();
    void thread_select_ln28_1_fu_766_p3();
    void thread_select_ln28_2_fu_260_p3();
    void thread_select_ln28_3_fu_268_p3();
    void thread_select_ln28_4_fu_280_p3();
    void thread_select_ln28_fu_674_p3();
    void thread_shl_ln25_1_fu_338_p2();
    void thread_shl_ln25_fu_218_p2();
    void thread_shl_ln26_1_fu_404_p2();
    void thread_shl_ln26_fu_224_p2();
    void thread_tmp_15_cast_fu_446_p5();
    void thread_tmp_18_cast_fu_485_p5();
    void thread_tmp_1_fu_594_p4();
    void thread_tmp_20_cast_fu_569_p3();
    void thread_tmp_5_fu_612_p4();
    void thread_tmp_7_fu_686_p4();
    void thread_tmp_8_fu_704_p4();
    void thread_tmp_fu_540_p3();
    void thread_trunc_ln28_1_fu_622_p1();
    void thread_trunc_ln28_2_fu_696_p1();
    void thread_trunc_ln28_3_fu_714_p1();
    void thread_trunc_ln28_fu_604_p1();
    void thread_xor_ln25_fu_360_p2();
    void thread_xor_ln28_fu_288_p2();
    void thread_zext_ln28_1_fu_276_p1();
    void thread_zext_ln28_2_fu_464_p1();
    void thread_zext_ln28_3_fu_551_p1();
    void thread_zext_ln28_fu_537_p1();
    void thread_zext_ln35_1_fu_560_p1();
    void thread_zext_ln35_2_fu_774_p1();
    void thread_zext_ln35_fu_547_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
