-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv_1_out_ce1 : OUT STD_LOGIC;
    conv_1_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_we0 : OUT STD_LOGIC;
    max_pool_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.621000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=219,HLS_SYN_LUT=807,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten53_reg_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_131 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten20_reg_142 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_0_reg_153 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_175 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_0_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_778_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_778_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_242_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_3_fu_268_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_3_reg_787 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_2_fu_352_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_2_reg_793 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln26_2_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_2_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_2_reg_799_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_fu_416_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_reg_804 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_1_fu_497_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_1_reg_815 : STD_LOGIC_VECTOR (6 downto 0);
    signal mpr_fu_503_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_820 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_1_fu_515_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_fu_529_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_out_load_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln20_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_reg_848 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_reg_848_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_1_fu_577_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_1_reg_852 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_1_reg_852_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_1_fu_766_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_135_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_157_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_c_0_phi_fu_179_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_max_0_phi_fu_190_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_202_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_2_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln26_fu_583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_674_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln26_fu_224_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln13_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_248_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_fu_218_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_2_fu_260_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln28_5_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_318_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln25_1_fu_338_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_4_fu_280_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln25_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_1_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_fu_330_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln25_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_1_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_378_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln26_1_fu_404_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_1_fu_344_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_1_fu_396_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_3_fu_430_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_424_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_2_fu_438_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln28_1_fu_276_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_cast_fu_446_p5 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_fu_458_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln26_fu_230_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln26_3_fu_410_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_4_fu_469_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_3_fu_477_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_cast_fu_485_p5 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_fu_509_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln13_1_fu_523_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_540_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_fu_547_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_1_fu_560_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_563_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_cast_fu_569_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_fu_537_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln28_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_594_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_604_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_612_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_622_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_2_fu_682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_3_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_686_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_696_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_704_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_714_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component max_pool_1_fcmp_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    max_pool_1_fcmp_3bkb_U1 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_load_reg_841,
        din1 => select_ln26_fu_583_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_6_fu_209_p2);

    max_pool_1_fcmp_3bkb_U2 : component max_pool_1_fcmp_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_1_out_q1,
        din1 => select_ln28_fu_674_p3,
        opcode => ap_const_lv5_2,
        dout => tmp_9_fu_213_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_175 <= select_ln16_reg_804;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_175 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_131 <= select_ln28_3_reg_787;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_131 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten20_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_236_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten20_reg_142 <= select_ln13_fu_529_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten20_reg_142 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten53_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_236_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten53_reg_120 <= add_ln10_fu_242_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten53_reg_120 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_236_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_164 <= select_ln16_1_fu_515_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_164 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    max_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_778_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                max_0_reg_186 <= select_ln28_1_reg_857;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_0_reg_186 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpr_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                mpr_0_reg_198 <= mpr_reg_820;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpr_0_reg_198 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_153 <= select_ln25_2_reg_793;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_153 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln28_1_reg_815 <= add_ln28_1_fu_497_p2;
                or_ln26_2_reg_799 <= or_ln26_2_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_1_fu_555_p2 = ap_const_lv1_1))) then
                add_ln35_1_reg_852 <= add_ln35_1_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln35_1_reg_852_pp0_iter2_reg <= add_ln35_1_reg_852;
                icmp_ln10_reg_778_pp0_iter2_reg <= icmp_ln10_reg_778_pp0_iter1_reg;
                icmp_ln20_1_reg_848_pp0_iter2_reg <= icmp_ln20_1_reg_848;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                conv_1_out_load_reg_841 <= conv_1_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_778 <= icmp_ln10_fu_236_p2;
                icmp_ln10_reg_778_pp0_iter1_reg <= icmp_ln10_reg_778;
                or_ln26_2_reg_799_pp0_iter1_reg <= or_ln26_2_reg_799;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_1_reg_848 <= icmp_ln20_1_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_236_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mpr_reg_820 <= mpr_fu_503_p2;
                select_ln16_reg_804 <= select_ln16_fu_416_p3;
                select_ln25_2_reg_793 <= select_ln25_2_fu_352_p3;
                select_ln28_3_reg_787 <= select_ln28_3_fu_268_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_778_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                select_ln28_1_reg_857 <= select_ln28_1_fu_766_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_236_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_236_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln10_fu_236_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_242_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(indvar_flatten53_reg_120));
    add_ln13_1_fu_523_p2 <= std_logic_vector(unsigned(indvar_flatten20_reg_142) + unsigned(ap_const_lv5_1));
    add_ln16_fu_509_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_164) + unsigned(ap_const_lv4_1));
    add_ln28_1_fu_497_p2 <= std_logic_vector(unsigned(zext_ln28_1_fu_276_p1) + unsigned(tmp_18_cast_fu_485_p5));
    add_ln28_fu_458_p2 <= std_logic_vector(unsigned(zext_ln28_1_fu_276_p1) + unsigned(tmp_15_cast_fu_446_p5));
    add_ln35_1_fu_577_p2 <= std_logic_vector(unsigned(tmp_20_cast_fu_569_p3) + unsigned(zext_ln28_fu_537_p1));
    add_ln35_fu_563_p2 <= std_logic_vector(unsigned(zext_ln35_fu_547_p1) + unsigned(zext_ln35_1_fu_560_p1));
    and_ln25_fu_372_p2 <= (or_ln25_1_fu_366_p2 and and_ln28_4_fu_300_p2);
    and_ln28_1_fu_668_p2 <= (tmp_6_fu_209_p2 and and_ln28_fu_662_p2);
    and_ln28_2_fu_754_p2 <= (or_ln28_3_fu_748_p2 and or_ln28_2_fu_730_p2);
    and_ln28_3_fu_760_p2 <= (tmp_9_fu_213_p2 and and_ln28_2_fu_754_p2);
    and_ln28_4_fu_300_p2 <= (xor_ln28_fu_288_p2 and icmp_ln20_fu_294_p2);
    and_ln28_5_fu_312_p2 <= (xor_ln28_fu_288_p2 and icmp_ln16_fu_306_p2);
    and_ln28_fu_662_p2 <= (or_ln28_fu_638_p2 and or_ln28_1_fu_656_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_236_p2)
    begin
        if ((icmp_ln10_fu_236_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_179_p4_assign_proc : process(c_0_reg_175, icmp_ln10_reg_778, ap_CS_fsm_pp0_stage0, select_ln16_reg_804, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_179_p4 <= select_ln16_reg_804;
        else 
            ap_phi_mux_c_0_phi_fu_179_p4 <= c_0_reg_175;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_135_p4_assign_proc : process(f_0_reg_131, icmp_ln10_reg_778, ap_CS_fsm_pp0_stage0, select_ln28_3_reg_787, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_135_p4 <= select_ln28_3_reg_787;
        else 
            ap_phi_mux_f_0_phi_fu_135_p4 <= f_0_reg_131;
        end if; 
    end process;


    ap_phi_mux_max_0_phi_fu_190_p4_assign_proc : process(max_0_reg_186, icmp_ln10_reg_778_pp0_iter2_reg, select_ln28_1_reg_857, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_778_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_max_0_phi_fu_190_p4 <= select_ln28_1_reg_857;
        else 
            ap_phi_mux_max_0_phi_fu_190_p4 <= max_0_reg_186;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_202_p4_assign_proc : process(mpr_0_reg_198, icmp_ln10_reg_778, ap_CS_fsm_pp0_stage0, mpr_reg_820, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_202_p4 <= mpr_reg_820;
        else 
            ap_phi_mux_mpr_0_phi_fu_202_p4 <= mpr_0_reg_198;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_157_p4_assign_proc : process(r_0_reg_153, icmp_ln10_reg_778, ap_CS_fsm_pp0_stage0, select_ln25_2_reg_793, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_157_p4 <= select_ln25_2_reg_793;
        else 
            ap_phi_mux_r_0_phi_fu_157_p4 <= r_0_reg_153;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_608_p1 <= select_ln26_fu_583_p3;
    bitcast_ln28_2_fu_682_p1 <= conv_1_out_q1;
    bitcast_ln28_3_fu_700_p1 <= select_ln28_fu_674_p3;
    bitcast_ln28_fu_591_p1 <= conv_1_out_load_reg_841;
    c_fu_378_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln25_fu_330_p3));
    conv_1_out_address0 <= zext_ln28_2_fu_464_p1(5 - 1 downto 0);
    conv_1_out_address1 <= zext_ln28_3_fu_551_p1(5 - 1 downto 0);

    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_248_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_f_0_phi_fu_135_p4));
    i_fu_424_p2 <= std_logic_vector(unsigned(select_ln25_1_fu_344_p3) + unsigned(select_ln26_1_fu_396_p3));
    icmp_ln10_fu_236_p2 <= "1" when (indvar_flatten53_reg_120 = ap_const_lv5_10) else "0";
    icmp_ln13_fu_254_p2 <= "1" when (indvar_flatten20_reg_142 = ap_const_lv5_8) else "0";
    icmp_ln16_fu_306_p2 <= "1" when (indvar_flatten_reg_164 = ap_const_lv4_4) else "0";
    icmp_ln20_1_fu_555_p2 <= "1" when (mpr_reg_820 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_294_p2 <= "1" when (ap_phi_mux_mpr_0_phi_fu_202_p4 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_632_p2 <= "1" when (trunc_ln28_fu_604_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_644_p2 <= "0" when (tmp_5_fu_612_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_650_p2 <= "1" when (trunc_ln28_1_fu_622_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_718_p2 <= "0" when (tmp_7_fu_686_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_724_p2 <= "1" when (trunc_ln28_2_fu_696_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_736_p2 <= "0" when (tmp_8_fu_704_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_742_p2 <= "1" when (trunc_ln28_3_fu_714_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_626_p2 <= "0" when (tmp_1_fu_594_p4 = ap_const_lv8_FF) else "1";
    max_pool_1_out_address0 <= zext_ln35_2_fu_774_p1(3 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_1_out_d0 <= select_ln28_1_reg_857;

    max_pool_1_out_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln20_1_reg_848_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln20_1_reg_848_pp0_iter2_reg = ap_const_lv1_1))) then 
            max_pool_1_out_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_503_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln26_1_fu_396_p3));
    or_ln25_1_fu_366_p2 <= (xor_ln25_fu_360_p2 or icmp_ln13_fu_254_p2);
    or_ln25_fu_324_p2 <= (icmp_ln13_fu_254_p2 or and_ln28_5_fu_312_p2);
    or_ln26_1_fu_384_p2 <= (and_ln28_5_fu_312_p2 or and_ln25_fu_372_p2);
    or_ln26_2_fu_390_p2 <= (or_ln26_1_fu_384_p2 or icmp_ln13_fu_254_p2);
    or_ln26_3_fu_410_p2 <= (shl_ln26_1_fu_404_p2 or ap_const_lv2_1);
    or_ln26_fu_230_p2 <= (shl_ln26_fu_224_p2 or ap_const_lv2_1);
    or_ln28_1_fu_656_p2 <= (icmp_ln28_3_fu_650_p2 or icmp_ln28_2_fu_644_p2);
    or_ln28_2_fu_730_p2 <= (icmp_ln28_5_fu_724_p2 or icmp_ln28_4_fu_718_p2);
    or_ln28_3_fu_748_p2 <= (icmp_ln28_7_fu_742_p2 or icmp_ln28_6_fu_736_p2);
    or_ln28_fu_638_p2 <= (icmp_ln28_fu_626_p2 or icmp_ln28_1_fu_632_p2);
    r_fu_318_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln28_2_fu_260_p3));
    select_ln13_fu_529_p3 <= 
        ap_const_lv5_1 when (icmp_ln13_fu_254_p2(0) = '1') else 
        add_ln13_1_fu_523_p2;
    select_ln16_1_fu_515_p3 <= 
        ap_const_lv4_1 when (or_ln25_fu_324_p2(0) = '1') else 
        add_ln16_fu_509_p2;
    select_ln16_fu_416_p3 <= 
        c_fu_378_p2 when (and_ln25_fu_372_p2(0) = '1') else 
        select_ln25_fu_330_p3;
    select_ln25_1_fu_344_p3 <= 
        shl_ln25_1_fu_338_p2 when (and_ln28_5_fu_312_p2(0) = '1') else 
        select_ln28_4_fu_280_p3;
    select_ln25_2_fu_352_p3 <= 
        r_fu_318_p2 when (and_ln28_5_fu_312_p2(0) = '1') else 
        select_ln28_2_fu_260_p3;
    select_ln25_3_fu_430_p3 <= 
        ap_const_lv2_0 when (or_ln25_fu_324_p2(0) = '1') else 
        shl_ln26_fu_224_p2;
    select_ln25_4_fu_469_p3 <= 
        ap_const_lv2_1 when (or_ln25_fu_324_p2(0) = '1') else 
        or_ln26_fu_230_p2;
    select_ln25_fu_330_p3 <= 
        ap_const_lv2_0 when (or_ln25_fu_324_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_179_p4;
    select_ln26_1_fu_396_p3 <= 
        ap_const_lv2_0 when (or_ln26_2_fu_390_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_202_p4;
    select_ln26_2_fu_438_p3 <= 
        shl_ln26_1_fu_404_p2 when (and_ln25_fu_372_p2(0) = '1') else 
        select_ln25_3_fu_430_p3;
    select_ln26_3_fu_477_p3 <= 
        or_ln26_3_fu_410_p2 when (and_ln25_fu_372_p2(0) = '1') else 
        select_ln25_4_fu_469_p3;
    select_ln26_fu_583_p3 <= 
        ap_const_lv32_800000 when (or_ln26_2_reg_799_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_max_0_phi_fu_190_p4;
    select_ln28_1_fu_766_p3 <= 
        conv_1_out_q1 when (and_ln28_3_fu_760_p2(0) = '1') else 
        select_ln28_fu_674_p3;
    select_ln28_2_fu_260_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_254_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_157_p4;
    select_ln28_3_fu_268_p3 <= 
        f_fu_248_p2 when (icmp_ln13_fu_254_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_135_p4;
    select_ln28_4_fu_280_p3 <= 
        ap_const_lv2_0 when (icmp_ln13_fu_254_p2(0) = '1') else 
        shl_ln25_fu_218_p2;
    select_ln28_fu_674_p3 <= 
        conv_1_out_load_reg_841 when (and_ln28_1_fu_668_p2(0) = '1') else 
        select_ln26_fu_583_p3;
    shl_ln25_1_fu_338_p2 <= std_logic_vector(shift_left(unsigned(r_fu_318_p2),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln25_fu_218_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_r_0_phi_fu_157_p4),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln26_1_fu_404_p2 <= std_logic_vector(shift_left(unsigned(c_fu_378_p2),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln26_fu_224_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_c_0_phi_fu_179_p4),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_15_cast_fu_446_p5 <= (((ap_const_lv2_0 & i_fu_424_p2) & select_ln26_2_fu_438_p3) & ap_const_lv1_0);
    tmp_18_cast_fu_485_p5 <= (((ap_const_lv2_0 & i_fu_424_p2) & select_ln26_3_fu_477_p3) & ap_const_lv1_0);
    tmp_1_fu_594_p4 <= bitcast_ln28_fu_591_p1(30 downto 23);
    tmp_20_cast_fu_569_p3 <= (add_ln35_fu_563_p2 & ap_const_lv1_0);
    tmp_5_fu_612_p4 <= bitcast_ln28_1_fu_608_p1(30 downto 23);
    tmp_7_fu_686_p4 <= bitcast_ln28_2_fu_682_p1(30 downto 23);
    tmp_8_fu_704_p4 <= bitcast_ln28_3_fu_700_p1(30 downto 23);
    tmp_fu_540_p3 <= (select_ln25_2_reg_793 & ap_const_lv1_0);
    trunc_ln28_1_fu_622_p1 <= bitcast_ln28_1_fu_608_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_696_p1 <= bitcast_ln28_2_fu_682_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_714_p1 <= bitcast_ln28_3_fu_700_p1(23 - 1 downto 0);
    trunc_ln28_fu_604_p1 <= bitcast_ln28_fu_591_p1(23 - 1 downto 0);
    xor_ln25_fu_360_p2 <= (icmp_ln16_fu_306_p2 xor ap_const_lv1_1);
    xor_ln28_fu_288_p2 <= (icmp_ln13_fu_254_p2 xor ap_const_lv1_1);
    zext_ln28_1_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_3_fu_268_p3),7));
    zext_ln28_2_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_458_p2),64));
    zext_ln28_3_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_reg_815),64));
    zext_ln28_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_3_reg_787),5));
    zext_ln35_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_reg_804),4));
    zext_ln35_2_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_reg_852_pp0_iter2_reg),64));
    zext_ln35_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_540_p3),4));
end behav;
