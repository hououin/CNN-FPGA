

================================================================
== Vivado HLS Report for 'max_pool_1'
================================================================
* Date:           Thu Aug 10 11:29:08 2023

* Version:        2020.1 (Build 2897737 on Wed May 27 20:21:37 MDT 2020)
* Project:        pool
* Solution:       Pool_Row_unroll
* Product family: virtex7
* Target device:  xc7vx485t-ffg1157-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+-----------+------------+
    |  Clock |  Target  | Estimated | Uncertainty|
    +--------+----------+-----------+------------+
    |ap_clk  | 40.00 ns | 19.668 ns |   5.00 ns  |
    +--------+----------+-----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |      101|      101| 4.040 us | 4.040 us |  101|  101|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                      |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |       Loop Name      |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +----------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Filter_Loop         |      100|      100|        50|          -|          -|     2|    no    |
        | + Row_Loop           |       48|       48|        24|          -|          -|     2|    no    |
        |  ++ Col_Loop         |       22|       22|        11|          -|          -|     2|    no    |
        |   +++ Pool_Col_Loop  |        4|        4|         2|          -|          -|     2|    no    |
        |   +++ Pool_Col_Loop  |        4|        4|         2|          -|          -|     2|    no    |
        +----------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 8
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 2 
4 --> 5 3 
5 --> 6 7 
6 --> 5 
7 --> 8 4 
8 --> 7 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.18>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([32 x float]* %conv_1_out) nounwind, !map !7"   --->   Operation 9 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([8 x float]* %max_pool_1_out) nounwind, !map !14"   --->   Operation 10 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([11 x i8]* @max_pool_1_str) nounwind"   --->   Operation 11 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (1.18ns)   --->   "br label %1" [pooling.cpp:10]   --->   Operation 12 'br' <Predicate = true> <Delay = 1.18>

State 2 <SV = 1> <Delay = 1.18>
ST_2 : Operation 13 [1/1] (0.00ns)   --->   "%f_0 = phi i2 [ 0, %0 ], [ %f, %Filter_Loop_end ]"   --->   Operation 13 'phi' 'f_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 14 [1/1] (0.61ns)   --->   "%icmp_ln10 = icmp eq i2 %f_0, -2" [pooling.cpp:10]   --->   Operation 14 'icmp' 'icmp_ln10' <Predicate = true> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 15 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2) nounwind"   --->   Operation 15 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 16 [1/1] (1.00ns)   --->   "%f = add i2 %f_0, 1" [pooling.cpp:10]   --->   Operation 16 'add' 'f' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "br i1 %icmp_ln10, label %6, label %Filter_Loop_begin" [pooling.cpp:10]   --->   Operation 17 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([12 x i8]* @p_str) nounwind" [pooling.cpp:11]   --->   Operation 18 'specloopname' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "%tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str) nounwind" [pooling.cpp:11]   --->   Operation 19 'specregionbegin' 'tmp' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "%zext_ln13 = zext i2 %f_0 to i6" [pooling.cpp:13]   --->   Operation 20 'zext' 'zext_ln13' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%zext_ln13_1 = zext i2 %f_0 to i5" [pooling.cpp:13]   --->   Operation 21 'zext' 'zext_ln13_1' <Predicate = (!icmp_ln10)> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (1.18ns)   --->   "br label %2" [pooling.cpp:13]   --->   Operation 22 'br' <Predicate = (!icmp_ln10)> <Delay = 1.18>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "ret void" [pooling.cpp:39]   --->   Operation 23 'ret' <Predicate = (icmp_ln10)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 1.18>
ST_3 : Operation 24 [1/1] (0.00ns)   --->   "%r_0 = phi i2 [ 0, %Filter_Loop_begin ], [ %r, %Row_Loop_end ]"   --->   Operation 24 'phi' 'r_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 25 [1/1] (0.61ns)   --->   "%icmp_ln13 = icmp eq i2 %r_0, -2" [pooling.cpp:13]   --->   Operation 25 'icmp' 'icmp_ln13' <Predicate = true> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 26 [1/1] (0.00ns)   --->   "%empty_4 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2) nounwind"   --->   Operation 26 'speclooptripcount' 'empty_4' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 27 [1/1] (1.00ns)   --->   "%r = add i2 %r_0, 1" [pooling.cpp:13]   --->   Operation 27 'add' 'r' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 28 [1/1] (0.00ns)   --->   "br i1 %icmp_ln13, label %Filter_Loop_end, label %Row_Loop_begin" [pooling.cpp:13]   --->   Operation 28 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 29 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([9 x i8]* @p_str1) nounwind" [pooling.cpp:14]   --->   Operation 29 'specloopname' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 30 [1/1] (0.00ns)   --->   "%tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([9 x i8]* @p_str1) nounwind" [pooling.cpp:14]   --->   Operation 30 'specregionbegin' 'tmp_2' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "%trunc_ln25 = trunc i2 %r_0 to i1" [pooling.cpp:25]   --->   Operation 31 'trunc' 'trunc_ln25' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 32 [1/1] (0.00ns)   --->   "%shl_ln25 = shl i2 %r_0, 1" [pooling.cpp:25]   --->   Operation 32 'shl' 'shl_ln25' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "%tmp_s = call i3 @_ssdm_op_BitConcatenate.i3.i2.i1(i2 %r_0, i1 false)" [pooling.cpp:35]   --->   Operation 33 'bitconcatenate' 'tmp_s' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 34 [1/1] (0.00ns)   --->   "%zext_ln25 = zext i3 %tmp_s to i4" [pooling.cpp:25]   --->   Operation 34 'zext' 'zext_ln25' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 35 [1/1] (0.00ns)   --->   "%or_ln25 = or i2 %shl_ln25, 1" [pooling.cpp:25]   --->   Operation 35 'or' 'or_ln25' <Predicate = (!icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 36 [1/1] (1.18ns)   --->   "br label %3" [pooling.cpp:16]   --->   Operation 36 'br' <Predicate = (!icmp_ln13)> <Delay = 1.18>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "%empty_11 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str, i32 %tmp) nounwind" [pooling.cpp:38]   --->   Operation 37 'specregionend' 'empty_11' <Predicate = (icmp_ln13)> <Delay = 0.00>
ST_3 : Operation 38 [1/1] (0.00ns)   --->   "br label %1" [pooling.cpp:10]   --->   Operation 38 'br' <Predicate = (icmp_ln13)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 1.18>
ST_4 : Operation 39 [1/1] (0.00ns)   --->   "%c_0 = phi i2 [ 0, %Row_Loop_begin ], [ %c, %Pool_Row_Loop_end ]"   --->   Operation 39 'phi' 'c_0' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 40 [1/1] (0.61ns)   --->   "%icmp_ln16 = icmp eq i2 %c_0, -2" [pooling.cpp:16]   --->   Operation 40 'icmp' 'icmp_ln16' <Predicate = true> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 41 [1/1] (0.00ns)   --->   "%empty_5 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2) nounwind"   --->   Operation 41 'speclooptripcount' 'empty_5' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 42 [1/1] (1.00ns)   --->   "%c = add i2 %c_0, 1" [pooling.cpp:16]   --->   Operation 42 'add' 'c' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 43 [1/1] (0.00ns)   --->   "br i1 %icmp_ln16, label %Row_Loop_end, label %Pool_Row_Loop_begin" [pooling.cpp:16]   --->   Operation 43 'br' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 44 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([9 x i8]* @p_str2) nounwind" [pooling.cpp:17]   --->   Operation 44 'specloopname' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_4 : Operation 45 [1/1] (0.00ns)   --->   "%shl_ln26 = shl i2 %c_0, 1" [pooling.cpp:26]   --->   Operation 45 'shl' 'shl_ln26' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_4 : Operation 46 [1/1] (0.00ns)   --->   "%tmp_3 = call i32 (...)* @_ssdm_op_SpecRegionBegin([14 x i8]* @p_str3) nounwind" [pooling.cpp:21]   --->   Operation 46 'specregionbegin' 'tmp_3' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_4 : Operation 47 [1/1] (1.18ns)   --->   "br label %4" [pooling.cpp:23]   --->   Operation 47 'br' <Predicate = (!icmp_ln16)> <Delay = 1.18>
ST_4 : Operation 48 [1/1] (0.00ns)   --->   "%empty_10 = call i32 (...)* @_ssdm_op_SpecRegionEnd([9 x i8]* @p_str1, i32 %tmp_2) nounwind" [pooling.cpp:37]   --->   Operation 48 'specregionend' 'empty_10' <Predicate = (icmp_ln16)> <Delay = 0.00>
ST_4 : Operation 49 [1/1] (0.00ns)   --->   "br label %2" [pooling.cpp:13]   --->   Operation 49 'br' <Predicate = (icmp_ln16)> <Delay = 0.00>

State 5 <SV = 4> <Delay = 5.03>
ST_5 : Operation 50 [1/1] (0.00ns)   --->   "%max_1_0 = phi float [ 0x3810000000000000, %Pool_Row_Loop_begin ], [ %select_ln28, %._crit_edge.0 ]" [pooling.cpp:28]   --->   Operation 50 'phi' 'max_1_0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 51 [1/1] (0.00ns)   --->   "%mpc_0_0 = phi i2 [ 0, %Pool_Row_Loop_begin ], [ %add_ln23, %._crit_edge.0 ]" [pooling.cpp:23]   --->   Operation 51 'phi' 'mpc_0_0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 52 [1/1] (0.61ns)   --->   "%icmp_ln23 = icmp eq i2 %mpc_0_0, -2" [pooling.cpp:23]   --->   Operation 52 'icmp' 'icmp_ln23' <Predicate = true> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 53 [1/1] (0.00ns)   --->   "%empty_7 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2) nounwind"   --->   Operation 53 'speclooptripcount' 'empty_7' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 54 [1/1] (1.00ns)   --->   "%add_ln23 = add i2 %mpc_0_0, 1" [pooling.cpp:23]   --->   Operation 54 'add' 'add_ln23' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 55 [1/1] (0.00ns)   --->   "br i1 %icmp_ln23, label %Pool_Row_Loop, label %._crit_edge.0" [pooling.cpp:23]   --->   Operation 55 'br' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 56 [1/1] (1.00ns)   --->   "%add_ln26 = add i2 %shl_ln26, %mpc_0_0" [pooling.cpp:26]   --->   Operation 56 'add' 'add_ln26' <Predicate = (!icmp_ln23)> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 57 [1/1] (0.00ns)   --->   "%tmp_10 = call i5 @_ssdm_op_BitConcatenate.i5.i1.i1.i2.i1(i1 %trunc_ln25, i1 false, i2 %add_ln26, i1 false)" [pooling.cpp:28]   --->   Operation 57 'bitconcatenate' 'tmp_10' <Predicate = (!icmp_ln23)> <Delay = 0.00>
ST_5 : Operation 58 [1/1] (0.00ns)   --->   "%zext_ln28 = zext i5 %tmp_10 to i6" [pooling.cpp:28]   --->   Operation 58 'zext' 'zext_ln28' <Predicate = (!icmp_ln23)> <Delay = 0.00>
ST_5 : Operation 59 [1/1] (1.36ns)   --->   "%add_ln28 = add i6 %zext_ln13, %zext_ln28" [pooling.cpp:28]   --->   Operation 59 'add' 'add_ln28' <Predicate = (!icmp_ln23)> <Delay = 1.36> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 60 [1/1] (0.00ns)   --->   "%zext_ln28_1 = zext i6 %add_ln28 to i64" [pooling.cpp:28]   --->   Operation 60 'zext' 'zext_ln28_1' <Predicate = (!icmp_ln23)> <Delay = 0.00>
ST_5 : Operation 61 [1/1] (0.00ns)   --->   "%conv_1_out_addr = getelementptr [32 x float]* %conv_1_out, i64 0, i64 %zext_ln28_1" [pooling.cpp:28]   --->   Operation 61 'getelementptr' 'conv_1_out_addr' <Predicate = (!icmp_ln23)> <Delay = 0.00>
ST_5 : Operation 62 [2/2] (2.66ns)   --->   "%conv_1_out_load = load float* %conv_1_out_addr, align 4" [pooling.cpp:28]   --->   Operation 62 'load' 'conv_1_out_load' <Predicate = (!icmp_ln23)> <Delay = 2.66> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_5 : Operation 63 [1/1] (0.00ns)   --->   "%empty_6 = call i32 (...)* @_ssdm_op_SpecRegionEnd([14 x i8]* @p_str3, i32 %tmp_3) nounwind" [pooling.cpp:33]   --->   Operation 63 'specregionend' 'empty_6' <Predicate = (icmp_ln23)> <Delay = 0.00>
ST_5 : Operation 64 [1/1] (0.00ns)   --->   "%tmp_4 = call i32 (...)* @_ssdm_op_SpecRegionBegin([14 x i8]* @p_str3) nounwind" [pooling.cpp:21]   --->   Operation 64 'specregionbegin' 'tmp_4' <Predicate = (icmp_ln23)> <Delay = 0.00>
ST_5 : Operation 65 [1/1] (1.18ns)   --->   "br label %5" [pooling.cpp:23]   --->   Operation 65 'br' <Predicate = (icmp_ln23)> <Delay = 1.18>

State 6 <SV = 5> <Delay = 19.6>
ST_6 : Operation 66 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str5) nounwind" [pooling.cpp:24]   --->   Operation 66 'specloopname' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 67 [1/2] (2.66ns)   --->   "%conv_1_out_load = load float* %conv_1_out_addr, align 4" [pooling.cpp:28]   --->   Operation 67 'load' 'conv_1_out_load' <Predicate = true> <Delay = 2.66> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_6 : Operation 68 [1/1] (0.00ns)   --->   "%bitcast_ln28 = bitcast float %conv_1_out_load to i32" [pooling.cpp:28]   --->   Operation 68 'bitcast' 'bitcast_ln28' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 69 [1/1] (0.00ns)   --->   "%tmp_1 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln28, i32 23, i32 30)" [pooling.cpp:28]   --->   Operation 69 'partselect' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 70 [1/1] (0.00ns)   --->   "%trunc_ln28 = trunc i32 %bitcast_ln28 to i23" [pooling.cpp:28]   --->   Operation 70 'trunc' 'trunc_ln28' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 71 [1/1] (0.00ns)   --->   "%bitcast_ln28_1 = bitcast float %max_1_0 to i32" [pooling.cpp:28]   --->   Operation 71 'bitcast' 'bitcast_ln28_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 72 [1/1] (0.00ns)   --->   "%tmp_5 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln28_1, i32 23, i32 30)" [pooling.cpp:28]   --->   Operation 72 'partselect' 'tmp_5' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 73 [1/1] (0.00ns)   --->   "%trunc_ln28_1 = trunc i32 %bitcast_ln28_1 to i23" [pooling.cpp:28]   --->   Operation 73 'trunc' 'trunc_ln28_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 74 [1/1] (1.12ns)   --->   "%icmp_ln28 = icmp ne i8 %tmp_1, -1" [pooling.cpp:28]   --->   Operation 74 'icmp' 'icmp_ln28' <Predicate = true> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 75 [1/1] (1.48ns)   --->   "%icmp_ln28_1 = icmp eq i23 %trunc_ln28, 0" [pooling.cpp:28]   --->   Operation 75 'icmp' 'icmp_ln28_1' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 76 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_1)   --->   "%or_ln28 = or i1 %icmp_ln28_1, %icmp_ln28" [pooling.cpp:28]   --->   Operation 76 'or' 'or_ln28' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 77 [1/1] (1.12ns)   --->   "%icmp_ln28_2 = icmp ne i8 %tmp_5, -1" [pooling.cpp:28]   --->   Operation 77 'icmp' 'icmp_ln28_2' <Predicate = true> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 78 [1/1] (1.48ns)   --->   "%icmp_ln28_3 = icmp eq i23 %trunc_ln28_1, 0" [pooling.cpp:28]   --->   Operation 78 'icmp' 'icmp_ln28_3' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 79 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_1)   --->   "%or_ln28_1 = or i1 %icmp_ln28_3, %icmp_ln28_2" [pooling.cpp:28]   --->   Operation 79 'or' 'or_ln28_1' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 80 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_1)   --->   "%and_ln28 = and i1 %or_ln28, %or_ln28_1" [pooling.cpp:28]   --->   Operation 80 'and' 'and_ln28' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 81 [1/1] (15.7ns)   --->   "%tmp_6 = fcmp ogt float %conv_1_out_load, %max_1_0" [pooling.cpp:28]   --->   Operation 81 'fcmp' 'tmp_6' <Predicate = true> <Delay = 15.7> <Core = "FCmp">   --->   Core 111 'FCmp' <Latency = 0> <II = 1> <Delay = 15.7> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 82 [1/1] (0.61ns) (out node of the LUT)   --->   "%and_ln28_1 = and i1 %and_ln28, %tmp_6" [pooling.cpp:28]   --->   Operation 82 'and' 'and_ln28_1' <Predicate = true> <Delay = 0.61> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 83 [1/1] (0.61ns) (out node of the LUT)   --->   "%select_ln28 = select i1 %and_ln28_1, float %conv_1_out_load, float %max_1_0" [pooling.cpp:28]   --->   Operation 83 'select' 'select_ln28' <Predicate = true> <Delay = 0.61> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 84 [1/1] (0.00ns)   --->   "br label %4" [pooling.cpp:23]   --->   Operation 84 'br' <Predicate = true> <Delay = 0.00>

State 7 <SV = 5> <Delay = 5.03>
ST_7 : Operation 85 [1/1] (0.00ns)   --->   "%max_1_1 = phi float [ %max_1_0, %Pool_Row_Loop ], [ %select_ln28_1, %._crit_edge.1 ]" [pooling.cpp:28]   --->   Operation 85 'phi' 'max_1_1' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 86 [1/1] (0.00ns)   --->   "%mpc_0_1 = phi i2 [ 0, %Pool_Row_Loop ], [ %add_ln23_1, %._crit_edge.1 ]" [pooling.cpp:23]   --->   Operation 86 'phi' 'mpc_0_1' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 87 [1/1] (0.61ns)   --->   "%icmp_ln23_1 = icmp eq i2 %mpc_0_1, -2" [pooling.cpp:23]   --->   Operation 87 'icmp' 'icmp_ln23_1' <Predicate = true> <Delay = 0.61> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 88 [1/1] (0.00ns)   --->   "%empty_9 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2) nounwind"   --->   Operation 88 'speclooptripcount' 'empty_9' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 89 [1/1] (1.00ns)   --->   "%add_ln23_1 = add i2 %mpc_0_1, 1" [pooling.cpp:23]   --->   Operation 89 'add' 'add_ln23_1' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 90 [1/1] (0.00ns)   --->   "br i1 %icmp_ln23_1, label %Pool_Row_Loop_end, label %._crit_edge.1" [pooling.cpp:23]   --->   Operation 90 'br' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 91 [1/1] (1.00ns)   --->   "%add_ln26_1 = add i2 %shl_ln26, %mpc_0_1" [pooling.cpp:26]   --->   Operation 91 'add' 'add_ln26_1' <Predicate = (!icmp_ln23_1)> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 92 [1/1] (0.00ns)   --->   "%tmp_11 = call i5 @_ssdm_op_BitConcatenate.i5.i2.i2.i1(i2 %or_ln25, i2 %add_ln26_1, i1 false)" [pooling.cpp:28]   --->   Operation 92 'bitconcatenate' 'tmp_11' <Predicate = (!icmp_ln23_1)> <Delay = 0.00>
ST_7 : Operation 93 [1/1] (0.00ns)   --->   "%zext_ln28_2 = zext i5 %tmp_11 to i6" [pooling.cpp:28]   --->   Operation 93 'zext' 'zext_ln28_2' <Predicate = (!icmp_ln23_1)> <Delay = 0.00>
ST_7 : Operation 94 [1/1] (1.36ns)   --->   "%add_ln28_1 = add i6 %zext_ln13, %zext_ln28_2" [pooling.cpp:28]   --->   Operation 94 'add' 'add_ln28_1' <Predicate = (!icmp_ln23_1)> <Delay = 1.36> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 95 [1/1] (0.00ns)   --->   "%zext_ln28_3 = zext i6 %add_ln28_1 to i64" [pooling.cpp:28]   --->   Operation 95 'zext' 'zext_ln28_3' <Predicate = (!icmp_ln23_1)> <Delay = 0.00>
ST_7 : Operation 96 [1/1] (0.00ns)   --->   "%conv_1_out_addr_1 = getelementptr [32 x float]* %conv_1_out, i64 0, i64 %zext_ln28_3" [pooling.cpp:28]   --->   Operation 96 'getelementptr' 'conv_1_out_addr_1' <Predicate = (!icmp_ln23_1)> <Delay = 0.00>
ST_7 : Operation 97 [2/2] (2.66ns)   --->   "%conv_1_out_load_1 = load float* %conv_1_out_addr_1, align 4" [pooling.cpp:28]   --->   Operation 97 'load' 'conv_1_out_load_1' <Predicate = (!icmp_ln23_1)> <Delay = 2.66> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_7 : Operation 98 [1/1] (0.00ns)   --->   "%empty_8 = call i32 (...)* @_ssdm_op_SpecRegionEnd([14 x i8]* @p_str3, i32 %tmp_4) nounwind" [pooling.cpp:33]   --->   Operation 98 'specregionend' 'empty_8' <Predicate = (icmp_ln23_1)> <Delay = 0.00>
ST_7 : Operation 99 [1/1] (0.00ns)   --->   "%zext_ln35 = zext i2 %c_0 to i4" [pooling.cpp:35]   --->   Operation 99 'zext' 'zext_ln35' <Predicate = (icmp_ln23_1)> <Delay = 0.00>
ST_7 : Operation 100 [1/1] (1.18ns)   --->   "%add_ln35 = add i4 %zext_ln35, %zext_ln25" [pooling.cpp:35]   --->   Operation 100 'add' 'add_ln35' <Predicate = (icmp_ln23_1)> <Delay = 1.18> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 101 [1/1] (0.00ns)   --->   "%tmp_15_cast = call i5 @_ssdm_op_BitConcatenate.i5.i4.i1(i4 %add_ln35, i1 false)" [pooling.cpp:35]   --->   Operation 101 'bitconcatenate' 'tmp_15_cast' <Predicate = (icmp_ln23_1)> <Delay = 0.00>
ST_7 : Operation 102 [1/1] (1.36ns)   --->   "%add_ln35_1 = add i5 %zext_ln13_1, %tmp_15_cast" [pooling.cpp:35]   --->   Operation 102 'add' 'add_ln35_1' <Predicate = (icmp_ln23_1)> <Delay = 1.36> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 103 [1/1] (0.00ns)   --->   "%zext_ln35_1 = zext i5 %add_ln35_1 to i64" [pooling.cpp:35]   --->   Operation 103 'zext' 'zext_ln35_1' <Predicate = (icmp_ln23_1)> <Delay = 0.00>
ST_7 : Operation 104 [1/1] (0.00ns)   --->   "%max_pool_1_out_addr = getelementptr [8 x float]* %max_pool_1_out, i64 0, i64 %zext_ln35_1" [pooling.cpp:35]   --->   Operation 104 'getelementptr' 'max_pool_1_out_addr' <Predicate = (icmp_ln23_1)> <Delay = 0.00>
ST_7 : Operation 105 [1/1] (1.42ns)   --->   "store float %max_1_1, float* %max_pool_1_out_addr, align 4" [pooling.cpp:35]   --->   Operation 105 'store' <Predicate = (icmp_ln23_1)> <Delay = 1.42> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_7 : Operation 106 [1/1] (0.00ns)   --->   "br label %3" [pooling.cpp:16]   --->   Operation 106 'br' <Predicate = (icmp_ln23_1)> <Delay = 0.00>

State 8 <SV = 6> <Delay = 19.6>
ST_8 : Operation 107 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str5) nounwind" [pooling.cpp:24]   --->   Operation 107 'specloopname' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 108 [1/2] (2.66ns)   --->   "%conv_1_out_load_1 = load float* %conv_1_out_addr_1, align 4" [pooling.cpp:28]   --->   Operation 108 'load' 'conv_1_out_load_1' <Predicate = true> <Delay = 2.66> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.42> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 8> <RAM>
ST_8 : Operation 109 [1/1] (0.00ns)   --->   "%bitcast_ln28_2 = bitcast float %conv_1_out_load_1 to i32" [pooling.cpp:28]   --->   Operation 109 'bitcast' 'bitcast_ln28_2' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 110 [1/1] (0.00ns)   --->   "%tmp_7 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln28_2, i32 23, i32 30)" [pooling.cpp:28]   --->   Operation 110 'partselect' 'tmp_7' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 111 [1/1] (0.00ns)   --->   "%trunc_ln28_2 = trunc i32 %bitcast_ln28_2 to i23" [pooling.cpp:28]   --->   Operation 111 'trunc' 'trunc_ln28_2' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 112 [1/1] (0.00ns)   --->   "%bitcast_ln28_3 = bitcast float %max_1_1 to i32" [pooling.cpp:28]   --->   Operation 112 'bitcast' 'bitcast_ln28_3' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 113 [1/1] (0.00ns)   --->   "%tmp_8 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %bitcast_ln28_3, i32 23, i32 30)" [pooling.cpp:28]   --->   Operation 113 'partselect' 'tmp_8' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 114 [1/1] (0.00ns)   --->   "%trunc_ln28_3 = trunc i32 %bitcast_ln28_3 to i23" [pooling.cpp:28]   --->   Operation 114 'trunc' 'trunc_ln28_3' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 115 [1/1] (1.12ns)   --->   "%icmp_ln28_4 = icmp ne i8 %tmp_7, -1" [pooling.cpp:28]   --->   Operation 115 'icmp' 'icmp_ln28_4' <Predicate = true> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 116 [1/1] (1.48ns)   --->   "%icmp_ln28_5 = icmp eq i23 %trunc_ln28_2, 0" [pooling.cpp:28]   --->   Operation 116 'icmp' 'icmp_ln28_5' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 117 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_3)   --->   "%or_ln28_2 = or i1 %icmp_ln28_5, %icmp_ln28_4" [pooling.cpp:28]   --->   Operation 117 'or' 'or_ln28_2' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 118 [1/1] (1.12ns)   --->   "%icmp_ln28_6 = icmp ne i8 %tmp_8, -1" [pooling.cpp:28]   --->   Operation 118 'icmp' 'icmp_ln28_6' <Predicate = true> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 119 [1/1] (1.48ns)   --->   "%icmp_ln28_7 = icmp eq i23 %trunc_ln28_3, 0" [pooling.cpp:28]   --->   Operation 119 'icmp' 'icmp_ln28_7' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.48> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 120 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_3)   --->   "%or_ln28_3 = or i1 %icmp_ln28_7, %icmp_ln28_6" [pooling.cpp:28]   --->   Operation 120 'or' 'or_ln28_3' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 121 [1/1] (0.00ns) (grouped into LUT with out node and_ln28_3)   --->   "%and_ln28_2 = and i1 %or_ln28_2, %or_ln28_3" [pooling.cpp:28]   --->   Operation 121 'and' 'and_ln28_2' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 122 [1/1] (15.7ns)   --->   "%tmp_9 = fcmp ogt float %conv_1_out_load_1, %max_1_1" [pooling.cpp:28]   --->   Operation 122 'fcmp' 'tmp_9' <Predicate = true> <Delay = 15.7> <Core = "FCmp">   --->   Core 111 'FCmp' <Latency = 0> <II = 1> <Delay = 15.7> <FuncUnit> <Opcode : 'fcmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 123 [1/1] (0.61ns) (out node of the LUT)   --->   "%and_ln28_3 = and i1 %and_ln28_2, %tmp_9" [pooling.cpp:28]   --->   Operation 123 'and' 'and_ln28_3' <Predicate = true> <Delay = 0.61> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 124 [1/1] (0.61ns) (out node of the LUT)   --->   "%select_ln28_1 = select i1 %and_ln28_3, float %conv_1_out_load_1, float %max_1_1" [pooling.cpp:28]   --->   Operation 124 'select' 'select_ln28_1' <Predicate = true> <Delay = 0.61> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_8 : Operation 125 [1/1] (0.00ns)   --->   "br label %5" [pooling.cpp:23]   --->   Operation 125 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 40ns, clock uncertainty: 5ns.

 <State 1>: 1.18ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('f') with incoming values : ('f', pooling.cpp:10) [8]  (1.18 ns)

 <State 2>: 1.18ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('r') with incoming values : ('r', pooling.cpp:13) [20]  (1.18 ns)

 <State 3>: 1.18ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('c') with incoming values : ('c', pooling.cpp:16) [35]  (1.18 ns)

 <State 4>: 1.18ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('max_1_0', pooling.cpp:28) with incoming values : ('select_ln28', pooling.cpp:28) [46]  (1.18 ns)

 <State 5>: 5.04ns
The critical path consists of the following:
	'phi' operation ('mpc_0_0', pooling.cpp:23) with incoming values : ('add_ln23', pooling.cpp:23) [47]  (0 ns)
	'add' operation ('add_ln26', pooling.cpp:26) [54]  (1.01 ns)
	'add' operation ('add_ln28', pooling.cpp:28) [57]  (1.37 ns)
	'getelementptr' operation ('conv_1_out_addr', pooling.cpp:28) [59]  (0 ns)
	'load' operation ('conv_1_out_load', pooling.cpp:28) on array 'conv_1_out' [60]  (2.66 ns)

 <State 6>: 19.7ns
The critical path consists of the following:
	'load' operation ('conv_1_out_load', pooling.cpp:28) on array 'conv_1_out' [60]  (2.66 ns)
	'fcmp' operation ('tmp_6', pooling.cpp:28) [74]  (15.8 ns)
	'and' operation ('and_ln28_1', pooling.cpp:28) [75]  (0.616 ns)
	'select' operation ('select_ln28', pooling.cpp:28) [76]  (0.613 ns)

 <State 7>: 5.04ns
The critical path consists of the following:
	'phi' operation ('mpc_0_1', pooling.cpp:23) with incoming values : ('add_ln23_1', pooling.cpp:23) [84]  (0 ns)
	'add' operation ('add_ln26_1', pooling.cpp:26) [91]  (1.01 ns)
	'add' operation ('add_ln28_1', pooling.cpp:28) [94]  (1.37 ns)
	'getelementptr' operation ('conv_1_out_addr_1', pooling.cpp:28) [96]  (0 ns)
	'load' operation ('conv_1_out_load_1', pooling.cpp:28) on array 'conv_1_out' [97]  (2.66 ns)

 <State 8>: 19.7ns
The critical path consists of the following:
	'load' operation ('conv_1_out_load_1', pooling.cpp:28) on array 'conv_1_out' [97]  (2.66 ns)
	'fcmp' operation ('tmp_9', pooling.cpp:28) [111]  (15.8 ns)
	'and' operation ('and_ln28_3', pooling.cpp:28) [112]  (0.616 ns)
	'select' operation ('select_ln28_1', pooling.cpp:28) [113]  (0.613 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
