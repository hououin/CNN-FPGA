// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=19.668000,HLS_SYN_LAT=101,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=101,HLS_SYN_LUT=574,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] conv_1_out_address0;
reg conv_1_out_ce0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] f_fu_187_p2;
reg   [1:0] f_reg_555;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln13_fu_193_p1;
reg   [5:0] zext_ln13_reg_560;
wire   [0:0] icmp_ln10_fu_181_p2;
wire   [4:0] zext_ln13_1_fu_197_p1;
reg   [4:0] zext_ln13_1_reg_566;
wire   [1:0] r_fu_207_p2;
reg   [1:0] r_reg_574;
wire    ap_CS_fsm_state3;
wire   [0:0] trunc_ln25_fu_213_p1;
reg   [0:0] trunc_ln25_reg_579;
wire   [0:0] icmp_ln13_fu_201_p2;
wire   [3:0] zext_ln25_fu_231_p1;
reg   [3:0] zext_ln25_reg_584;
wire   [1:0] or_ln25_fu_235_p2;
reg   [1:0] or_ln25_reg_589;
wire   [1:0] c_fu_247_p2;
reg   [1:0] c_reg_597;
wire    ap_CS_fsm_state4;
wire   [1:0] shl_ln26_fu_253_p2;
reg   [1:0] shl_ln26_reg_602;
wire   [0:0] icmp_ln16_fu_241_p2;
wire   [1:0] add_ln23_fu_265_p2;
reg   [1:0] add_ln23_reg_611;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln23_fu_259_p2;
wire   [31:0] select_ln28_fu_385_p3;
wire    ap_CS_fsm_state6;
wire   [1:0] add_ln23_1_fu_399_p2;
reg   [1:0] add_ln23_1_reg_629;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln23_1_fu_393_p2;
wire   [31:0] select_ln28_1_fu_544_p3;
wire    ap_CS_fsm_state8;
reg   [1:0] f_0_reg_94;
reg   [1:0] r_0_reg_105;
reg   [1:0] c_0_reg_116;
reg   [31:0] max_1_0_reg_128;
reg   [1:0] mpc_0_0_reg_140;
reg   [31:0] max_1_1_reg_151;
reg   [1:0] mpc_0_1_reg_163;
wire   [63:0] zext_ln28_1_fu_296_p1;
wire   [63:0] zext_ln28_3_fu_428_p1;
wire   [63:0] zext_ln35_1_fu_455_p1;
reg   [31:0] grp_fu_174_p1;
wire   [2:0] tmp_s_fu_223_p3;
wire   [1:0] shl_ln25_fu_217_p2;
wire   [1:0] add_ln26_fu_271_p2;
wire   [4:0] tmp_10_fu_276_p5;
wire   [5:0] zext_ln28_fu_287_p1;
wire   [5:0] add_ln28_fu_291_p2;
wire   [31:0] bitcast_ln28_fu_301_p1;
wire   [31:0] bitcast_ln28_1_fu_319_p1;
wire   [7:0] tmp_1_fu_305_p4;
wire   [22:0] trunc_ln28_fu_315_p1;
wire   [0:0] icmp_ln28_1_fu_343_p2;
wire   [0:0] icmp_ln28_fu_337_p2;
wire   [7:0] tmp_5_fu_323_p4;
wire   [22:0] trunc_ln28_1_fu_333_p1;
wire   [0:0] icmp_ln28_3_fu_361_p2;
wire   [0:0] icmp_ln28_2_fu_355_p2;
wire   [0:0] or_ln28_fu_349_p2;
wire   [0:0] or_ln28_1_fu_367_p2;
wire   [0:0] and_ln28_fu_373_p2;
wire   [0:0] grp_fu_174_p2;
wire   [0:0] and_ln28_1_fu_379_p2;
wire   [1:0] add_ln26_1_fu_405_p2;
wire   [4:0] tmp_11_fu_410_p4;
wire   [5:0] zext_ln28_2_fu_419_p1;
wire   [5:0] add_ln28_1_fu_423_p2;
wire   [3:0] zext_ln35_fu_433_p1;
wire   [3:0] add_ln35_fu_437_p2;
wire   [4:0] tmp_15_cast_fu_442_p3;
wire   [4:0] add_ln35_1_fu_450_p2;
wire   [31:0] bitcast_ln28_2_fu_460_p1;
wire   [31:0] bitcast_ln28_3_fu_478_p1;
wire   [7:0] tmp_7_fu_464_p4;
wire   [22:0] trunc_ln28_2_fu_474_p1;
wire   [0:0] icmp_ln28_5_fu_502_p2;
wire   [0:0] icmp_ln28_4_fu_496_p2;
wire   [7:0] tmp_8_fu_482_p4;
wire   [22:0] trunc_ln28_3_fu_492_p1;
wire   [0:0] icmp_ln28_7_fu_520_p2;
wire   [0:0] icmp_ln28_6_fu_514_p2;
wire   [0:0] or_ln28_2_fu_508_p2;
wire   [0:0] or_ln28_3_fu_526_p2;
wire   [0:0] and_ln28_2_fu_532_p2;
wire   [0:0] and_ln28_3_fu_538_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(grp_fu_174_p1),
    .opcode(5'd2),
    .dout(grp_fu_174_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln23_1_fu_393_p2 == 1'd1))) begin
        c_0_reg_116 <= c_reg_597;
    end else if (((icmp_ln13_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_116 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_94 <= f_reg_555;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_94 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_1_0_reg_128 <= select_ln28_fu_385_p3;
    end else if (((icmp_ln16_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_1_0_reg_128 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_1_1_reg_151 <= select_ln28_1_fu_544_p3;
    end else if (((icmp_ln23_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_1_1_reg_151 <= max_1_0_reg_128;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_0_0_reg_140 <= add_ln23_reg_611;
    end else if (((icmp_ln16_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpc_0_0_reg_140 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mpc_0_1_reg_163 <= add_ln23_1_reg_629;
    end else if (((icmp_ln23_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mpc_0_1_reg_163 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_105 <= r_reg_574;
    end else if (((icmp_ln10_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln23_1_reg_629 <= add_ln23_1_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln23_reg_611 <= add_ln23_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_597 <= c_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_555 <= f_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        or_ln25_reg_589[1] <= or_ln25_fu_235_p2[1];
        trunc_ln25_reg_579 <= trunc_ln25_fu_213_p1;
        zext_ln25_reg_584[2 : 1] <= zext_ln25_fu_231_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_574 <= r_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln26_reg_602[1] <= shl_ln26_fu_253_p2[1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_1_reg_566[1 : 0] <= zext_ln13_1_fu_197_p1[1 : 0];
        zext_ln13_reg_560[1 : 0] <= zext_ln13_fu_193_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_1_out_address0 = zext_ln28_3_fu_428_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_out_address0 = zext_ln28_1_fu_296_p1;
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_174_p1 = max_1_1_reg_151;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_174_p1 = max_1_0_reg_128;
    end else begin
        grp_fu_174_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln23_1_fu_393_p2 == 1'd1))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln23_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln23_1_fu_393_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_1_fu_399_p2 = (mpc_0_1_reg_163 + 2'd1);

assign add_ln23_fu_265_p2 = (mpc_0_0_reg_140 + 2'd1);

assign add_ln26_1_fu_405_p2 = (shl_ln26_reg_602 + mpc_0_1_reg_163);

assign add_ln26_fu_271_p2 = (shl_ln26_reg_602 + mpc_0_0_reg_140);

assign add_ln28_1_fu_423_p2 = (zext_ln13_reg_560 + zext_ln28_2_fu_419_p1);

assign add_ln28_fu_291_p2 = (zext_ln13_reg_560 + zext_ln28_fu_287_p1);

assign add_ln35_1_fu_450_p2 = (zext_ln13_1_reg_566 + tmp_15_cast_fu_442_p3);

assign add_ln35_fu_437_p2 = (zext_ln35_fu_433_p1 + zext_ln25_reg_584);

assign and_ln28_1_fu_379_p2 = (grp_fu_174_p2 & and_ln28_fu_373_p2);

assign and_ln28_2_fu_532_p2 = (or_ln28_3_fu_526_p2 & or_ln28_2_fu_508_p2);

assign and_ln28_3_fu_538_p2 = (grp_fu_174_p2 & and_ln28_2_fu_532_p2);

assign and_ln28_fu_373_p2 = (or_ln28_fu_349_p2 & or_ln28_1_fu_367_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln28_1_fu_319_p1 = max_1_0_reg_128;

assign bitcast_ln28_2_fu_460_p1 = conv_1_out_q0;

assign bitcast_ln28_3_fu_478_p1 = max_1_1_reg_151;

assign bitcast_ln28_fu_301_p1 = conv_1_out_q0;

assign c_fu_247_p2 = (c_0_reg_116 + 2'd1);

assign f_fu_187_p2 = (f_0_reg_94 + 2'd1);

assign icmp_ln10_fu_181_p2 = ((f_0_reg_94 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_201_p2 = ((r_0_reg_105 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_241_p2 = ((c_0_reg_116 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_393_p2 = ((mpc_0_1_reg_163 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_259_p2 = ((mpc_0_0_reg_140 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_343_p2 = ((trunc_ln28_fu_315_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_355_p2 = ((tmp_5_fu_323_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_361_p2 = ((trunc_ln28_1_fu_333_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_496_p2 = ((tmp_7_fu_464_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_502_p2 = ((trunc_ln28_2_fu_474_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_514_p2 = ((tmp_8_fu_482_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_520_p2 = ((trunc_ln28_3_fu_492_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_337_p2 = ((tmp_1_fu_305_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln35_1_fu_455_p1;

assign max_pool_1_out_d0 = max_1_1_reg_151;

assign or_ln25_fu_235_p2 = (shl_ln25_fu_217_p2 | 2'd1);

assign or_ln28_1_fu_367_p2 = (icmp_ln28_3_fu_361_p2 | icmp_ln28_2_fu_355_p2);

assign or_ln28_2_fu_508_p2 = (icmp_ln28_5_fu_502_p2 | icmp_ln28_4_fu_496_p2);

assign or_ln28_3_fu_526_p2 = (icmp_ln28_7_fu_520_p2 | icmp_ln28_6_fu_514_p2);

assign or_ln28_fu_349_p2 = (icmp_ln28_fu_337_p2 | icmp_ln28_1_fu_343_p2);

assign r_fu_207_p2 = (r_0_reg_105 + 2'd1);

assign select_ln28_1_fu_544_p3 = ((and_ln28_3_fu_538_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_1_reg_151);

assign select_ln28_fu_385_p3 = ((and_ln28_1_fu_379_p2[0:0] === 1'b1) ? conv_1_out_q0 : max_1_0_reg_128);

assign shl_ln25_fu_217_p2 = r_0_reg_105 << 2'd1;

assign shl_ln26_fu_253_p2 = c_0_reg_116 << 2'd1;

assign tmp_10_fu_276_p5 = {{{{trunc_ln25_reg_579}, {1'd0}}, {add_ln26_fu_271_p2}}, {1'd0}};

assign tmp_11_fu_410_p4 = {{{or_ln25_reg_589}, {add_ln26_1_fu_405_p2}}, {1'd0}};

assign tmp_15_cast_fu_442_p3 = {{add_ln35_fu_437_p2}, {1'd0}};

assign tmp_1_fu_305_p4 = {{bitcast_ln28_fu_301_p1[30:23]}};

assign tmp_5_fu_323_p4 = {{bitcast_ln28_1_fu_319_p1[30:23]}};

assign tmp_7_fu_464_p4 = {{bitcast_ln28_2_fu_460_p1[30:23]}};

assign tmp_8_fu_482_p4 = {{bitcast_ln28_3_fu_478_p1[30:23]}};

assign tmp_s_fu_223_p3 = {{r_0_reg_105}, {1'd0}};

assign trunc_ln25_fu_213_p1 = r_0_reg_105[0:0];

assign trunc_ln28_1_fu_333_p1 = bitcast_ln28_1_fu_319_p1[22:0];

assign trunc_ln28_2_fu_474_p1 = bitcast_ln28_2_fu_460_p1[22:0];

assign trunc_ln28_3_fu_492_p1 = bitcast_ln28_3_fu_478_p1[22:0];

assign trunc_ln28_fu_315_p1 = bitcast_ln28_fu_301_p1[22:0];

assign zext_ln13_1_fu_197_p1 = f_0_reg_94;

assign zext_ln13_fu_193_p1 = f_0_reg_94;

assign zext_ln25_fu_231_p1 = tmp_s_fu_223_p3;

assign zext_ln28_1_fu_296_p1 = add_ln28_fu_291_p2;

assign zext_ln28_2_fu_419_p1 = tmp_11_fu_410_p4;

assign zext_ln28_3_fu_428_p1 = add_ln28_1_fu_423_p2;

assign zext_ln28_fu_287_p1 = tmp_10_fu_276_p5;

assign zext_ln35_1_fu_455_p1 = add_ln35_1_fu_450_p2;

assign zext_ln35_fu_433_p1 = c_0_reg_116;

always @ (posedge ap_clk) begin
    zext_ln13_reg_560[5:2] <= 4'b0000;
    zext_ln13_1_reg_566[4:2] <= 3'b000;
    zext_ln25_reg_584[0] <= 1'b0;
    zext_ln25_reg_584[3] <= 1'b0;
    or_ln25_reg_589[0] <= 1'b1;
    shl_ln26_reg_602[0] <= 1'b0;
end

endmodule //max_pool_1
