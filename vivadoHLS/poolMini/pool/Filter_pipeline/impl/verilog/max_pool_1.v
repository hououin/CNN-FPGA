// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="max_pool_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.830000,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=454,HLS_SYN_LUT=1937,HLS_VERSION=2020_1}" *)

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_q0,
        conv_1_out_address1,
        conv_1_out_ce1,
        conv_1_out_q1,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_we0,
        max_pool_1_out_d0,
        max_pool_1_out_address1,
        max_pool_1_out_ce1,
        max_pool_1_out_we1,
        max_pool_1_out_d1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] conv_1_out_address0;
output   conv_1_out_ce0;
input  [31:0] conv_1_out_q0;
output  [4:0] conv_1_out_address1;
output   conv_1_out_ce1;
input  [31:0] conv_1_out_q1;
output  [2:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
output   max_pool_1_out_we0;
output  [31:0] max_pool_1_out_d0;
output  [2:0] max_pool_1_out_address1;
output   max_pool_1_out_ce1;
output   max_pool_1_out_we1;
output  [31:0] max_pool_1_out_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] conv_1_out_address0;
reg conv_1_out_ce0;
reg[4:0] conv_1_out_address1;
reg conv_1_out_ce1;
reg[2:0] max_pool_1_out_address0;
reg max_pool_1_out_ce0;
reg max_pool_1_out_we0;
reg[31:0] max_pool_1_out_d0;
reg[2:0] max_pool_1_out_address1;
reg max_pool_1_out_ce1;
reg max_pool_1_out_we1;
reg[31:0] max_pool_1_out_d1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] f_0_reg_252;
reg   [31:0] reg_275;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln10_reg_1725;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [0:0] icmp_ln10_fu_279_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] f_fu_285_p2;
reg   [1:0] f_reg_1729;
wire   [63:0] zext_ln28_fu_291_p1;
reg   [63:0] zext_ln28_reg_1734;
wire  signed [1:0] xor_ln28_fu_296_p2;
reg  signed [1:0] xor_ln28_reg_1744;
wire   [63:0] zext_ln28_3_fu_302_p1;
reg   [63:0] zext_ln28_3_reg_1751;
wire   [63:0] tmp_45_fu_307_p3;
reg   [63:0] tmp_45_reg_1761;
wire   [63:0] zext_ln28_5_fu_319_p1;
reg   [63:0] zext_ln28_5_reg_1771;
wire   [31:0] select_ln28_fu_366_p3;
reg   [31:0] select_ln28_reg_1781;
wire   [0:0] grp_fu_270_p2;
reg   [0:0] tmp_5_reg_1787;
wire   [4:0] zext_ln28_1_fu_375_p1;
reg   [4:0] zext_ln28_1_reg_1792;
wire   [31:0] select_ln28_1_fu_481_p3;
reg   [31:0] select_ln28_1_reg_1807;
wire   [31:0] select_ln28_4_fu_530_p3;
reg   [31:0] select_ln28_4_reg_1814;
reg   [0:0] tmp_15_reg_1820;
wire   [31:0] select_ln28_5_fu_640_p3;
reg   [31:0] select_ln28_5_reg_1835;
wire   [31:0] select_ln28_8_fu_689_p3;
reg   [31:0] select_ln28_8_reg_1842;
reg   [0:0] tmp_26_reg_1848;
wire   [31:0] select_ln28_9_fu_798_p3;
reg   [31:0] select_ln28_9_reg_1863;
wire   [31:0] select_ln28_12_fu_847_p3;
reg   [31:0] select_ln28_12_reg_1870;
reg   [0:0] tmp_37_reg_1876;
wire  signed [3:0] add_ln28_fu_860_p2;
reg  signed [3:0] add_ln28_reg_1881;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [31:0] select_ln28_2_fu_967_p3;
reg   [31:0] select_ln28_2_reg_1897;
wire   [31:0] select_ln28_6_fu_1057_p3;
reg   [31:0] select_ln28_6_reg_1904;
wire   [31:0] select_ln28_13_fu_1146_p3;
reg   [31:0] select_ln28_13_reg_1911;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [31:0] select_ln28_10_fu_1248_p3;
reg   [31:0] select_ln28_10_reg_1928;
wire   [31:0] select_ln28_14_fu_1338_p3;
reg   [31:0] select_ln28_14_reg_1935;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage7_subdone;
reg   [1:0] ap_phi_mux_f_0_phi_fu_256_p4;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_47_fu_379_p3;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln28_7_fu_394_p1;
wire   [63:0] tmp_49_fu_539_p3;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln28_9_fu_553_p1;
wire   [63:0] tmp_44_fu_698_p3;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_46_fu_707_p3;
wire   [63:0] tmp_48_fu_866_p3;
wire    ap_block_pp0_stage5;
wire   [63:0] tmp_50_fu_875_p3;
wire   [63:0] zext_ln28_4_fu_1153_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln28_6_fu_1160_p1;
wire   [63:0] zext_ln28_8_fu_1348_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln28_10_fu_1356_p1;
wire   [31:0] select_ln28_3_fu_1444_p3;
wire   [31:0] select_ln28_7_fu_1535_p3;
wire   [31:0] select_ln28_11_fu_1626_p3;
wire   [31:0] select_ln28_15_fu_1717_p3;
reg   [31:0] grp_fu_264_p1;
reg   [31:0] grp_fu_270_p1;
wire  signed [2:0] sext_ln28_fu_316_p1;
wire   [31:0] bitcast_ln28_fu_324_p1;
wire   [7:0] tmp_1_fu_328_p4;
wire   [22:0] trunc_ln28_fu_338_p1;
wire   [0:0] icmp_ln28_1_fu_348_p2;
wire   [0:0] icmp_ln28_fu_342_p2;
wire   [0:0] or_ln28_fu_354_p2;
wire   [0:0] grp_fu_264_p2;
wire   [0:0] and_ln28_fu_360_p2;
wire   [4:0] add_ln28_1_fu_388_p2;
wire   [31:0] bitcast_ln28_1_fu_399_p1;
wire   [31:0] bitcast_ln28_2_fu_417_p1;
wire   [7:0] tmp_3_fu_403_p4;
wire   [22:0] trunc_ln28_1_fu_413_p1;
wire   [0:0] icmp_ln28_3_fu_440_p2;
wire   [0:0] icmp_ln28_2_fu_434_p2;
wire   [7:0] tmp_4_fu_420_p4;
wire   [22:0] trunc_ln28_2_fu_430_p1;
wire   [0:0] icmp_ln28_5_fu_458_p2;
wire   [0:0] icmp_ln28_4_fu_452_p2;
wire   [0:0] or_ln28_1_fu_446_p2;
wire   [0:0] or_ln28_2_fu_464_p2;
wire   [0:0] and_ln28_1_fu_470_p2;
wire   [0:0] and_ln28_2_fu_476_p2;
wire   [31:0] bitcast_ln28_7_fu_488_p1;
wire   [7:0] tmp_11_fu_492_p4;
wire   [22:0] trunc_ln28_7_fu_502_p1;
wire   [0:0] icmp_ln28_15_fu_512_p2;
wire   [0:0] icmp_ln28_14_fu_506_p2;
wire   [0:0] or_ln28_7_fu_518_p2;
wire   [0:0] and_ln28_7_fu_524_p2;
wire   [4:0] add_ln28_2_fu_548_p2;
wire   [31:0] bitcast_ln28_8_fu_558_p1;
wire   [31:0] bitcast_ln28_9_fu_576_p1;
wire   [7:0] tmp_13_fu_562_p4;
wire   [22:0] trunc_ln28_8_fu_572_p1;
wire   [0:0] icmp_ln28_17_fu_599_p2;
wire   [0:0] icmp_ln28_16_fu_593_p2;
wire   [7:0] tmp_14_fu_579_p4;
wire   [22:0] trunc_ln28_9_fu_589_p1;
wire   [0:0] icmp_ln28_19_fu_617_p2;
wire   [0:0] icmp_ln28_18_fu_611_p2;
wire   [0:0] or_ln28_8_fu_605_p2;
wire   [0:0] or_ln28_9_fu_623_p2;
wire   [0:0] and_ln28_8_fu_629_p2;
wire   [0:0] and_ln28_9_fu_635_p2;
wire   [31:0] bitcast_ln28_14_fu_647_p1;
wire   [7:0] tmp_22_fu_651_p4;
wire   [22:0] trunc_ln28_14_fu_661_p1;
wire   [0:0] icmp_ln28_29_fu_671_p2;
wire   [0:0] icmp_ln28_28_fu_665_p2;
wire   [0:0] or_ln28_14_fu_677_p2;
wire   [0:0] and_ln28_14_fu_683_p2;
wire   [31:0] bitcast_ln28_15_fu_716_p1;
wire   [31:0] bitcast_ln28_16_fu_734_p1;
wire   [7:0] tmp_24_fu_720_p4;
wire   [22:0] trunc_ln28_15_fu_730_p1;
wire   [0:0] icmp_ln28_31_fu_757_p2;
wire   [0:0] icmp_ln28_30_fu_751_p2;
wire   [7:0] tmp_25_fu_737_p4;
wire   [22:0] trunc_ln28_16_fu_747_p1;
wire   [0:0] icmp_ln28_33_fu_775_p2;
wire   [0:0] icmp_ln28_32_fu_769_p2;
wire   [0:0] or_ln28_15_fu_763_p2;
wire   [0:0] or_ln28_16_fu_781_p2;
wire   [0:0] and_ln28_15_fu_787_p2;
wire   [0:0] and_ln28_16_fu_793_p2;
wire   [31:0] bitcast_ln28_21_fu_805_p1;
wire   [7:0] tmp_33_fu_809_p4;
wire   [22:0] trunc_ln28_21_fu_819_p1;
wire   [0:0] icmp_ln28_43_fu_829_p2;
wire   [0:0] icmp_ln28_42_fu_823_p2;
wire   [0:0] or_ln28_21_fu_835_p2;
wire   [0:0] and_ln28_21_fu_841_p2;
wire   [3:0] zext_ln28_2_fu_856_p1;
wire   [31:0] bitcast_ln28_3_fu_884_p1;
wire   [31:0] bitcast_ln28_4_fu_902_p1;
wire   [7:0] tmp_6_fu_888_p4;
wire   [22:0] trunc_ln28_3_fu_898_p1;
wire   [0:0] icmp_ln28_7_fu_925_p2;
wire   [0:0] icmp_ln28_6_fu_919_p2;
wire   [7:0] tmp_7_fu_905_p4;
wire   [22:0] trunc_ln28_4_fu_915_p1;
wire   [0:0] icmp_ln28_9_fu_943_p2;
wire   [0:0] icmp_ln28_8_fu_937_p2;
wire   [0:0] or_ln28_3_fu_931_p2;
wire   [0:0] or_ln28_4_fu_949_p2;
wire   [0:0] and_ln28_3_fu_955_p2;
wire   [0:0] and_ln28_4_fu_961_p2;
wire   [31:0] bitcast_ln28_10_fu_974_p1;
wire   [31:0] bitcast_ln28_11_fu_992_p1;
wire   [7:0] tmp_16_fu_978_p4;
wire   [22:0] trunc_ln28_10_fu_988_p1;
wire   [0:0] icmp_ln28_21_fu_1015_p2;
wire   [0:0] icmp_ln28_20_fu_1009_p2;
wire   [7:0] tmp_17_fu_995_p4;
wire   [22:0] trunc_ln28_11_fu_1005_p1;
wire   [0:0] icmp_ln28_23_fu_1033_p2;
wire   [0:0] icmp_ln28_22_fu_1027_p2;
wire   [0:0] or_ln28_10_fu_1021_p2;
wire   [0:0] or_ln28_11_fu_1039_p2;
wire   [0:0] and_ln28_10_fu_1045_p2;
wire   [0:0] and_ln28_11_fu_1051_p2;
wire   [31:0] bitcast_ln28_22_fu_1064_p1;
wire   [31:0] bitcast_ln28_23_fu_1082_p1;
wire   [7:0] tmp_35_fu_1068_p4;
wire   [22:0] trunc_ln28_22_fu_1078_p1;
wire   [0:0] icmp_ln28_45_fu_1105_p2;
wire   [0:0] icmp_ln28_44_fu_1099_p2;
wire   [7:0] tmp_36_fu_1085_p4;
wire   [22:0] trunc_ln28_23_fu_1095_p1;
wire   [0:0] icmp_ln28_47_fu_1123_p2;
wire   [0:0] icmp_ln28_46_fu_1117_p2;
wire   [0:0] or_ln28_22_fu_1111_p2;
wire   [0:0] or_ln28_23_fu_1129_p2;
wire   [0:0] and_ln28_22_fu_1135_p2;
wire   [0:0] and_ln28_23_fu_1141_p2;
wire  signed [3:0] sext_ln28_1_fu_1157_p1;
wire   [31:0] bitcast_ln28_17_fu_1165_p1;
wire   [31:0] bitcast_ln28_18_fu_1183_p1;
wire   [7:0] tmp_27_fu_1169_p4;
wire   [22:0] trunc_ln28_17_fu_1179_p1;
wire   [0:0] icmp_ln28_35_fu_1206_p2;
wire   [0:0] icmp_ln28_34_fu_1200_p2;
wire   [7:0] tmp_28_fu_1186_p4;
wire   [22:0] trunc_ln28_18_fu_1196_p1;
wire   [0:0] icmp_ln28_37_fu_1224_p2;
wire   [0:0] icmp_ln28_36_fu_1218_p2;
wire   [0:0] or_ln28_17_fu_1212_p2;
wire   [0:0] or_ln28_18_fu_1230_p2;
wire   [0:0] and_ln28_17_fu_1236_p2;
wire   [0:0] and_ln28_18_fu_1242_p2;
wire   [31:0] bitcast_ln28_24_fu_1255_p1;
wire   [31:0] bitcast_ln28_25_fu_1273_p1;
wire   [7:0] tmp_38_fu_1259_p4;
wire   [22:0] trunc_ln28_24_fu_1269_p1;
wire   [0:0] icmp_ln28_49_fu_1296_p2;
wire   [0:0] icmp_ln28_48_fu_1290_p2;
wire   [7:0] tmp_39_fu_1276_p4;
wire   [22:0] trunc_ln28_25_fu_1286_p1;
wire   [0:0] icmp_ln28_51_fu_1314_p2;
wire   [0:0] icmp_ln28_50_fu_1308_p2;
wire   [0:0] or_ln28_24_fu_1302_p2;
wire   [0:0] or_ln28_25_fu_1320_p2;
wire   [0:0] and_ln28_24_fu_1326_p2;
wire   [0:0] and_ln28_25_fu_1332_p2;
wire  signed [4:0] sext_ln28_2_fu_1345_p1;
wire  signed [4:0] sext_ln28_3_fu_1353_p1;
wire   [31:0] bitcast_ln28_5_fu_1361_p1;
wire   [31:0] bitcast_ln28_6_fu_1379_p1;
wire   [7:0] tmp_9_fu_1365_p4;
wire   [22:0] trunc_ln28_5_fu_1375_p1;
wire   [0:0] icmp_ln28_11_fu_1402_p2;
wire   [0:0] icmp_ln28_10_fu_1396_p2;
wire   [7:0] tmp_s_fu_1382_p4;
wire   [22:0] trunc_ln28_6_fu_1392_p1;
wire   [0:0] icmp_ln28_13_fu_1420_p2;
wire   [0:0] icmp_ln28_12_fu_1414_p2;
wire   [0:0] or_ln28_5_fu_1408_p2;
wire   [0:0] or_ln28_6_fu_1426_p2;
wire   [0:0] and_ln28_5_fu_1432_p2;
wire   [0:0] and_ln28_6_fu_1438_p2;
wire   [31:0] bitcast_ln28_12_fu_1452_p1;
wire   [31:0] bitcast_ln28_13_fu_1470_p1;
wire   [7:0] tmp_19_fu_1456_p4;
wire   [22:0] trunc_ln28_12_fu_1466_p1;
wire   [0:0] icmp_ln28_25_fu_1493_p2;
wire   [0:0] icmp_ln28_24_fu_1487_p2;
wire   [7:0] tmp_20_fu_1473_p4;
wire   [22:0] trunc_ln28_13_fu_1483_p1;
wire   [0:0] icmp_ln28_27_fu_1511_p2;
wire   [0:0] icmp_ln28_26_fu_1505_p2;
wire   [0:0] or_ln28_12_fu_1499_p2;
wire   [0:0] or_ln28_13_fu_1517_p2;
wire   [0:0] and_ln28_12_fu_1523_p2;
wire   [0:0] and_ln28_13_fu_1529_p2;
wire   [31:0] bitcast_ln28_19_fu_1543_p1;
wire   [31:0] bitcast_ln28_20_fu_1561_p1;
wire   [7:0] tmp_30_fu_1547_p4;
wire   [22:0] trunc_ln28_19_fu_1557_p1;
wire   [0:0] icmp_ln28_39_fu_1584_p2;
wire   [0:0] icmp_ln28_38_fu_1578_p2;
wire   [7:0] tmp_31_fu_1564_p4;
wire   [22:0] trunc_ln28_20_fu_1574_p1;
wire   [0:0] icmp_ln28_41_fu_1602_p2;
wire   [0:0] icmp_ln28_40_fu_1596_p2;
wire   [0:0] or_ln28_19_fu_1590_p2;
wire   [0:0] or_ln28_20_fu_1608_p2;
wire   [0:0] and_ln28_19_fu_1614_p2;
wire   [0:0] and_ln28_20_fu_1620_p2;
wire   [31:0] bitcast_ln28_26_fu_1634_p1;
wire   [31:0] bitcast_ln28_27_fu_1652_p1;
wire   [7:0] tmp_41_fu_1638_p4;
wire   [22:0] trunc_ln28_26_fu_1648_p1;
wire   [0:0] icmp_ln28_53_fu_1675_p2;
wire   [0:0] icmp_ln28_52_fu_1669_p2;
wire   [7:0] tmp_42_fu_1655_p4;
wire   [22:0] trunc_ln28_27_fu_1665_p1;
wire   [0:0] icmp_ln28_55_fu_1693_p2;
wire   [0:0] icmp_ln28_54_fu_1687_p2;
wire   [0:0] or_ln28_26_fu_1681_p2;
wire   [0:0] or_ln28_27_fu_1699_p2;
wire   [0:0] and_ln28_26_fu_1705_p2;
wire   [0:0] and_ln28_27_fu_1711_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage4_00001;
wire    ap_block_pp0_stage5_00001;
wire    ap_block_pp0_stage6_00001;
wire    ap_block_pp0_stage7_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state11;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U1(
    .din0(conv_1_out_q0),
    .din1(grp_fu_264_p1),
    .opcode(5'd2),
    .dout(grp_fu_264_p2)
);

max_pool_1_fcmp_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
max_pool_1_fcmp_3bkb_U2(
    .din0(conv_1_out_q1),
    .din1(grp_fu_270_p1),
    .opcode(5'd2),
    .dout(grp_fu_270_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1725 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f_0_reg_252 <= f_reg_1729;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_252 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1725 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        add_ln28_reg_1881 <= add_ln28_fu_860_p2;
        select_ln28_13_reg_1911 <= select_ln28_13_fu_1146_p3;
        select_ln28_2_reg_1897 <= select_ln28_2_fu_967_p3;
        select_ln28_6_reg_1904 <= select_ln28_6_fu_1057_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f_reg_1729 <= f_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln10_reg_1725 <= icmp_ln10_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln10_reg_1725 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln10_reg_1725 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln10_reg_1725 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln10_reg_1725 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_275 <= conv_1_out_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1725 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        select_ln28_10_reg_1928 <= select_ln28_10_fu_1248_p3;
        select_ln28_14_reg_1935 <= select_ln28_14_fu_1338_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1725 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        select_ln28_12_reg_1870 <= select_ln28_12_fu_847_p3;
        select_ln28_9_reg_1863 <= select_ln28_9_fu_798_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln10_reg_1725 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        select_ln28_1_reg_1807 <= select_ln28_1_fu_481_p3;
        select_ln28_4_reg_1814 <= select_ln28_4_fu_530_p3;
        zext_ln28_1_reg_1792[1 : 0] <= zext_ln28_1_fu_375_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln10_reg_1725 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        select_ln28_5_reg_1835 <= select_ln28_5_fu_640_p3;
        select_ln28_8_reg_1842 <= select_ln28_8_fu_689_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1725 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln28_reg_1781 <= select_ln28_fu_366_p3;
        tmp_45_reg_1761[1 : 0] <= tmp_45_fu_307_p3[1 : 0];
        zext_ln28_5_reg_1771[2 : 0] <= zext_ln28_5_fu_319_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln10_reg_1725 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_15_reg_1820 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln10_reg_1725 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_26_reg_1848 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1725 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_37_reg_1876 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1725 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_5_reg_1787 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xor_ln28_reg_1744 <= xor_ln28_fu_296_p2;
        zext_ln28_3_reg_1751[1 : 0] <= zext_ln28_3_fu_302_p1[1 : 0];
        zext_ln28_reg_1734[1 : 0] <= zext_ln28_fu_291_p1[1 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_279_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1725 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_256_p4 = f_reg_1729;
    end else begin
        ap_phi_mux_f_0_phi_fu_256_p4 = f_0_reg_252;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            conv_1_out_address0 = zext_ln28_8_fu_1348_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            conv_1_out_address0 = zext_ln28_4_fu_1153_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            conv_1_out_address0 = tmp_48_fu_866_p3;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            conv_1_out_address0 = tmp_44_fu_698_p3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            conv_1_out_address0 = tmp_49_fu_539_p3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            conv_1_out_address0 = tmp_47_fu_379_p3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_address0 = tmp_45_fu_307_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_out_address0 = zext_ln28_fu_291_p1;
        end else begin
            conv_1_out_address0 = 'bx;
        end
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            conv_1_out_address1 = zext_ln28_10_fu_1356_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            conv_1_out_address1 = zext_ln28_6_fu_1160_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            conv_1_out_address1 = tmp_50_fu_875_p3;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            conv_1_out_address1 = tmp_46_fu_707_p3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            conv_1_out_address1 = zext_ln28_9_fu_553_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            conv_1_out_address1 = zext_ln28_7_fu_394_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_out_address1 = zext_ln28_5_fu_319_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_out_address1 = zext_ln28_3_fu_302_p1;
        end else begin
            conv_1_out_address1 = 'bx;
        end
    end else begin
        conv_1_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_1_out_ce1 = 1'b1;
    end else begin
        conv_1_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_264_p1 = select_ln28_10_reg_1928;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_264_p1 = select_ln28_2_reg_1897;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_264_p1 = select_ln28_9_reg_1863;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_264_p1 = select_ln28_1_reg_1807;
    end else if ((((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_264_p1 = 32'd8388608;
    end else begin
        grp_fu_264_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_270_p1 = select_ln28_14_reg_1935;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_270_p1 = select_ln28_6_reg_1904;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_270_p1 = select_ln28_13_reg_1911;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_270_p1 = select_ln28_5_reg_1835;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_270_p1 = select_ln28_12_fu_847_p3;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_270_p1 = select_ln28_8_fu_689_p3;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_270_p1 = select_ln28_4_fu_530_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_270_p1 = select_ln28_fu_366_p3;
    end else begin
        grp_fu_270_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pool_1_out_address0 = tmp_45_reg_1761;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        max_pool_1_out_address0 = zext_ln28_reg_1734;
    end else begin
        max_pool_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pool_1_out_address1 = zext_ln28_5_reg_1771;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        max_pool_1_out_address1 = zext_ln28_3_reg_1751;
    end else begin
        max_pool_1_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        max_pool_1_out_ce1 = 1'b1;
    end else begin
        max_pool_1_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pool_1_out_d0 = select_ln28_11_fu_1626_p3;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        max_pool_1_out_d0 = select_ln28_3_fu_1444_p3;
    end else begin
        max_pool_1_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pool_1_out_d1 = select_ln28_15_fu_1717_p3;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        max_pool_1_out_d1 = select_ln28_7_fu_1535_p3;
    end else begin
        max_pool_1_out_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln10_reg_1725 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln10_reg_1725 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        max_pool_1_out_we0 = 1'b1;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln10_reg_1725 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln10_reg_1725 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        max_pool_1_out_we1 = 1'b1;
    end else begin
        max_pool_1_out_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_279_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_279_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_1_fu_388_p2 = ($signed(5'd18) + $signed(zext_ln28_1_fu_375_p1));

assign add_ln28_2_fu_548_p2 = ($signed(5'd22) + $signed(zext_ln28_1_reg_1792));

assign add_ln28_fu_860_p2 = ($signed(4'd10) + $signed(zext_ln28_2_fu_856_p1));

assign and_ln28_10_fu_1045_p2 = (or_ln28_11_fu_1039_p2 & or_ln28_10_fu_1021_p2);

assign and_ln28_11_fu_1051_p2 = (grp_fu_270_p2 & and_ln28_10_fu_1045_p2);

assign and_ln28_12_fu_1523_p2 = (or_ln28_13_fu_1517_p2 & or_ln28_12_fu_1499_p2);

assign and_ln28_13_fu_1529_p2 = (grp_fu_270_p2 & and_ln28_12_fu_1523_p2);

assign and_ln28_14_fu_683_p2 = (or_ln28_14_fu_677_p2 & grp_fu_264_p2);

assign and_ln28_15_fu_787_p2 = (or_ln28_16_fu_781_p2 & or_ln28_15_fu_763_p2);

assign and_ln28_16_fu_793_p2 = (tmp_26_reg_1848 & and_ln28_15_fu_787_p2);

assign and_ln28_17_fu_1236_p2 = (or_ln28_18_fu_1230_p2 & or_ln28_17_fu_1212_p2);

assign and_ln28_18_fu_1242_p2 = (grp_fu_264_p2 & and_ln28_17_fu_1236_p2);

assign and_ln28_19_fu_1614_p2 = (or_ln28_20_fu_1608_p2 & or_ln28_19_fu_1590_p2);

assign and_ln28_1_fu_470_p2 = (or_ln28_2_fu_464_p2 & or_ln28_1_fu_446_p2);

assign and_ln28_20_fu_1620_p2 = (grp_fu_264_p2 & and_ln28_19_fu_1614_p2);

assign and_ln28_21_fu_841_p2 = (or_ln28_21_fu_835_p2 & grp_fu_264_p2);

assign and_ln28_22_fu_1135_p2 = (or_ln28_23_fu_1129_p2 & or_ln28_22_fu_1111_p2);

assign and_ln28_23_fu_1141_p2 = (tmp_37_reg_1876 & and_ln28_22_fu_1135_p2);

assign and_ln28_24_fu_1326_p2 = (or_ln28_25_fu_1320_p2 & or_ln28_24_fu_1302_p2);

assign and_ln28_25_fu_1332_p2 = (grp_fu_270_p2 & and_ln28_24_fu_1326_p2);

assign and_ln28_26_fu_1705_p2 = (or_ln28_27_fu_1699_p2 & or_ln28_26_fu_1681_p2);

assign and_ln28_27_fu_1711_p2 = (grp_fu_270_p2 & and_ln28_26_fu_1705_p2);

assign and_ln28_2_fu_476_p2 = (tmp_5_reg_1787 & and_ln28_1_fu_470_p2);

assign and_ln28_3_fu_955_p2 = (or_ln28_4_fu_949_p2 & or_ln28_3_fu_931_p2);

assign and_ln28_4_fu_961_p2 = (grp_fu_264_p2 & and_ln28_3_fu_955_p2);

assign and_ln28_5_fu_1432_p2 = (or_ln28_6_fu_1426_p2 & or_ln28_5_fu_1408_p2);

assign and_ln28_6_fu_1438_p2 = (grp_fu_264_p2 & and_ln28_5_fu_1432_p2);

assign and_ln28_7_fu_524_p2 = (or_ln28_7_fu_518_p2 & grp_fu_264_p2);

assign and_ln28_8_fu_629_p2 = (or_ln28_9_fu_623_p2 & or_ln28_8_fu_605_p2);

assign and_ln28_9_fu_635_p2 = (tmp_15_reg_1820 & and_ln28_8_fu_629_p2);

assign and_ln28_fu_360_p2 = (or_ln28_fu_354_p2 & grp_fu_264_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_10_fu_974_p1 = conv_1_out_q1;

assign bitcast_ln28_11_fu_992_p1 = select_ln28_5_reg_1835;

assign bitcast_ln28_12_fu_1452_p1 = conv_1_out_q1;

assign bitcast_ln28_13_fu_1470_p1 = select_ln28_6_reg_1904;

assign bitcast_ln28_14_fu_647_p1 = conv_1_out_q0;

assign bitcast_ln28_15_fu_716_p1 = reg_275;

assign bitcast_ln28_16_fu_734_p1 = select_ln28_8_reg_1842;

assign bitcast_ln28_17_fu_1165_p1 = conv_1_out_q0;

assign bitcast_ln28_18_fu_1183_p1 = select_ln28_9_reg_1863;

assign bitcast_ln28_19_fu_1543_p1 = conv_1_out_q0;

assign bitcast_ln28_1_fu_399_p1 = reg_275;

assign bitcast_ln28_20_fu_1561_p1 = select_ln28_10_reg_1928;

assign bitcast_ln28_21_fu_805_p1 = conv_1_out_q0;

assign bitcast_ln28_22_fu_1064_p1 = reg_275;

assign bitcast_ln28_23_fu_1082_p1 = select_ln28_12_reg_1870;

assign bitcast_ln28_24_fu_1255_p1 = conv_1_out_q1;

assign bitcast_ln28_25_fu_1273_p1 = select_ln28_13_reg_1911;

assign bitcast_ln28_26_fu_1634_p1 = conv_1_out_q1;

assign bitcast_ln28_27_fu_1652_p1 = select_ln28_14_reg_1935;

assign bitcast_ln28_2_fu_417_p1 = select_ln28_reg_1781;

assign bitcast_ln28_3_fu_884_p1 = conv_1_out_q0;

assign bitcast_ln28_4_fu_902_p1 = select_ln28_1_reg_1807;

assign bitcast_ln28_5_fu_1361_p1 = conv_1_out_q0;

assign bitcast_ln28_6_fu_1379_p1 = select_ln28_2_reg_1897;

assign bitcast_ln28_7_fu_488_p1 = conv_1_out_q0;

assign bitcast_ln28_8_fu_558_p1 = reg_275;

assign bitcast_ln28_9_fu_576_p1 = select_ln28_4_reg_1814;

assign bitcast_ln28_fu_324_p1 = conv_1_out_q0;

assign f_fu_285_p2 = (ap_phi_mux_f_0_phi_fu_256_p4 + 2'd1);

assign icmp_ln10_fu_279_p2 = ((ap_phi_mux_f_0_phi_fu_256_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_1396_p2 = ((tmp_9_fu_1365_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_1402_p2 = ((trunc_ln28_5_fu_1375_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_12_fu_1414_p2 = ((tmp_s_fu_1382_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_13_fu_1420_p2 = ((trunc_ln28_6_fu_1392_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_14_fu_506_p2 = ((tmp_11_fu_492_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_15_fu_512_p2 = ((trunc_ln28_7_fu_502_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_16_fu_593_p2 = ((tmp_13_fu_562_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_17_fu_599_p2 = ((trunc_ln28_8_fu_572_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_18_fu_611_p2 = ((tmp_14_fu_579_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_19_fu_617_p2 = ((trunc_ln28_9_fu_589_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_348_p2 = ((trunc_ln28_fu_338_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_20_fu_1009_p2 = ((tmp_16_fu_978_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_21_fu_1015_p2 = ((trunc_ln28_10_fu_988_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_22_fu_1027_p2 = ((tmp_17_fu_995_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_23_fu_1033_p2 = ((trunc_ln28_11_fu_1005_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_24_fu_1487_p2 = ((tmp_19_fu_1456_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_25_fu_1493_p2 = ((trunc_ln28_12_fu_1466_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_26_fu_1505_p2 = ((tmp_20_fu_1473_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_27_fu_1511_p2 = ((trunc_ln28_13_fu_1483_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_28_fu_665_p2 = ((tmp_22_fu_651_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_29_fu_671_p2 = ((trunc_ln28_14_fu_661_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_434_p2 = ((tmp_3_fu_403_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_30_fu_751_p2 = ((tmp_24_fu_720_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_31_fu_757_p2 = ((trunc_ln28_15_fu_730_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_32_fu_769_p2 = ((tmp_25_fu_737_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_33_fu_775_p2 = ((trunc_ln28_16_fu_747_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_34_fu_1200_p2 = ((tmp_27_fu_1169_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_35_fu_1206_p2 = ((trunc_ln28_17_fu_1179_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_36_fu_1218_p2 = ((tmp_28_fu_1186_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_37_fu_1224_p2 = ((trunc_ln28_18_fu_1196_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_38_fu_1578_p2 = ((tmp_30_fu_1547_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_39_fu_1584_p2 = ((trunc_ln28_19_fu_1557_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_440_p2 = ((trunc_ln28_1_fu_413_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_40_fu_1596_p2 = ((tmp_31_fu_1564_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_41_fu_1602_p2 = ((trunc_ln28_20_fu_1574_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_42_fu_823_p2 = ((tmp_33_fu_809_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_43_fu_829_p2 = ((trunc_ln28_21_fu_819_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_44_fu_1099_p2 = ((tmp_35_fu_1068_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_45_fu_1105_p2 = ((trunc_ln28_22_fu_1078_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_46_fu_1117_p2 = ((tmp_36_fu_1085_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_47_fu_1123_p2 = ((trunc_ln28_23_fu_1095_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_48_fu_1290_p2 = ((tmp_38_fu_1259_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_49_fu_1296_p2 = ((trunc_ln28_24_fu_1269_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_452_p2 = ((tmp_4_fu_420_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_50_fu_1308_p2 = ((tmp_39_fu_1276_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_51_fu_1314_p2 = ((trunc_ln28_25_fu_1286_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_52_fu_1669_p2 = ((tmp_41_fu_1638_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_53_fu_1675_p2 = ((trunc_ln28_26_fu_1648_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_54_fu_1687_p2 = ((tmp_42_fu_1655_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_55_fu_1693_p2 = ((trunc_ln28_27_fu_1665_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_458_p2 = ((trunc_ln28_2_fu_430_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_919_p2 = ((tmp_6_fu_888_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_925_p2 = ((trunc_ln28_3_fu_898_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_937_p2 = ((tmp_7_fu_905_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_943_p2 = ((trunc_ln28_4_fu_915_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_342_p2 = ((tmp_1_fu_328_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln28_10_fu_1021_p2 = (icmp_ln28_21_fu_1015_p2 | icmp_ln28_20_fu_1009_p2);

assign or_ln28_11_fu_1039_p2 = (icmp_ln28_23_fu_1033_p2 | icmp_ln28_22_fu_1027_p2);

assign or_ln28_12_fu_1499_p2 = (icmp_ln28_25_fu_1493_p2 | icmp_ln28_24_fu_1487_p2);

assign or_ln28_13_fu_1517_p2 = (icmp_ln28_27_fu_1511_p2 | icmp_ln28_26_fu_1505_p2);

assign or_ln28_14_fu_677_p2 = (icmp_ln28_29_fu_671_p2 | icmp_ln28_28_fu_665_p2);

assign or_ln28_15_fu_763_p2 = (icmp_ln28_31_fu_757_p2 | icmp_ln28_30_fu_751_p2);

assign or_ln28_16_fu_781_p2 = (icmp_ln28_33_fu_775_p2 | icmp_ln28_32_fu_769_p2);

assign or_ln28_17_fu_1212_p2 = (icmp_ln28_35_fu_1206_p2 | icmp_ln28_34_fu_1200_p2);

assign or_ln28_18_fu_1230_p2 = (icmp_ln28_37_fu_1224_p2 | icmp_ln28_36_fu_1218_p2);

assign or_ln28_19_fu_1590_p2 = (icmp_ln28_39_fu_1584_p2 | icmp_ln28_38_fu_1578_p2);

assign or_ln28_1_fu_446_p2 = (icmp_ln28_3_fu_440_p2 | icmp_ln28_2_fu_434_p2);

assign or_ln28_20_fu_1608_p2 = (icmp_ln28_41_fu_1602_p2 | icmp_ln28_40_fu_1596_p2);

assign or_ln28_21_fu_835_p2 = (icmp_ln28_43_fu_829_p2 | icmp_ln28_42_fu_823_p2);

assign or_ln28_22_fu_1111_p2 = (icmp_ln28_45_fu_1105_p2 | icmp_ln28_44_fu_1099_p2);

assign or_ln28_23_fu_1129_p2 = (icmp_ln28_47_fu_1123_p2 | icmp_ln28_46_fu_1117_p2);

assign or_ln28_24_fu_1302_p2 = (icmp_ln28_49_fu_1296_p2 | icmp_ln28_48_fu_1290_p2);

assign or_ln28_25_fu_1320_p2 = (icmp_ln28_51_fu_1314_p2 | icmp_ln28_50_fu_1308_p2);

assign or_ln28_26_fu_1681_p2 = (icmp_ln28_53_fu_1675_p2 | icmp_ln28_52_fu_1669_p2);

assign or_ln28_27_fu_1699_p2 = (icmp_ln28_55_fu_1693_p2 | icmp_ln28_54_fu_1687_p2);

assign or_ln28_2_fu_464_p2 = (icmp_ln28_5_fu_458_p2 | icmp_ln28_4_fu_452_p2);

assign or_ln28_3_fu_931_p2 = (icmp_ln28_7_fu_925_p2 | icmp_ln28_6_fu_919_p2);

assign or_ln28_4_fu_949_p2 = (icmp_ln28_9_fu_943_p2 | icmp_ln28_8_fu_937_p2);

assign or_ln28_5_fu_1408_p2 = (icmp_ln28_11_fu_1402_p2 | icmp_ln28_10_fu_1396_p2);

assign or_ln28_6_fu_1426_p2 = (icmp_ln28_13_fu_1420_p2 | icmp_ln28_12_fu_1414_p2);

assign or_ln28_7_fu_518_p2 = (icmp_ln28_15_fu_512_p2 | icmp_ln28_14_fu_506_p2);

assign or_ln28_8_fu_605_p2 = (icmp_ln28_17_fu_599_p2 | icmp_ln28_16_fu_593_p2);

assign or_ln28_9_fu_623_p2 = (icmp_ln28_19_fu_617_p2 | icmp_ln28_18_fu_611_p2);

assign or_ln28_fu_354_p2 = (icmp_ln28_fu_342_p2 | icmp_ln28_1_fu_348_p2);

assign select_ln28_10_fu_1248_p3 = ((and_ln28_18_fu_1242_p2[0:0] === 1'b1) ? conv_1_out_q0 : select_ln28_9_reg_1863);

assign select_ln28_11_fu_1626_p3 = ((and_ln28_20_fu_1620_p2[0:0] === 1'b1) ? conv_1_out_q0 : select_ln28_10_reg_1928);

assign select_ln28_12_fu_847_p3 = ((and_ln28_21_fu_841_p2[0:0] === 1'b1) ? conv_1_out_q0 : 32'd8388608);

assign select_ln28_13_fu_1146_p3 = ((and_ln28_23_fu_1141_p2[0:0] === 1'b1) ? reg_275 : select_ln28_12_reg_1870);

assign select_ln28_14_fu_1338_p3 = ((and_ln28_25_fu_1332_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_13_reg_1911);

assign select_ln28_15_fu_1717_p3 = ((and_ln28_27_fu_1711_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_14_reg_1935);

assign select_ln28_1_fu_481_p3 = ((and_ln28_2_fu_476_p2[0:0] === 1'b1) ? reg_275 : select_ln28_reg_1781);

assign select_ln28_2_fu_967_p3 = ((and_ln28_4_fu_961_p2[0:0] === 1'b1) ? conv_1_out_q0 : select_ln28_1_reg_1807);

assign select_ln28_3_fu_1444_p3 = ((and_ln28_6_fu_1438_p2[0:0] === 1'b1) ? conv_1_out_q0 : select_ln28_2_reg_1897);

assign select_ln28_4_fu_530_p3 = ((and_ln28_7_fu_524_p2[0:0] === 1'b1) ? conv_1_out_q0 : 32'd8388608);

assign select_ln28_5_fu_640_p3 = ((and_ln28_9_fu_635_p2[0:0] === 1'b1) ? reg_275 : select_ln28_4_reg_1814);

assign select_ln28_6_fu_1057_p3 = ((and_ln28_11_fu_1051_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_5_reg_1835);

assign select_ln28_7_fu_1535_p3 = ((and_ln28_13_fu_1529_p2[0:0] === 1'b1) ? conv_1_out_q1 : select_ln28_6_reg_1904);

assign select_ln28_8_fu_689_p3 = ((and_ln28_14_fu_683_p2[0:0] === 1'b1) ? conv_1_out_q0 : 32'd8388608);

assign select_ln28_9_fu_798_p3 = ((and_ln28_16_fu_793_p2[0:0] === 1'b1) ? reg_275 : select_ln28_8_reg_1842);

assign select_ln28_fu_366_p3 = ((and_ln28_fu_360_p2[0:0] === 1'b1) ? conv_1_out_q0 : 32'd8388608);

assign sext_ln28_1_fu_1157_p1 = xor_ln28_reg_1744;

assign sext_ln28_2_fu_1345_p1 = add_ln28_reg_1881;

assign sext_ln28_3_fu_1353_p1 = xor_ln28_reg_1744;

assign sext_ln28_fu_316_p1 = xor_ln28_reg_1744;

assign tmp_11_fu_492_p4 = {{bitcast_ln28_7_fu_488_p1[30:23]}};

assign tmp_13_fu_562_p4 = {{bitcast_ln28_8_fu_558_p1[30:23]}};

assign tmp_14_fu_579_p4 = {{bitcast_ln28_9_fu_576_p1[30:23]}};

assign tmp_16_fu_978_p4 = {{bitcast_ln28_10_fu_974_p1[30:23]}};

assign tmp_17_fu_995_p4 = {{bitcast_ln28_11_fu_992_p1[30:23]}};

assign tmp_19_fu_1456_p4 = {{bitcast_ln28_12_fu_1452_p1[30:23]}};

assign tmp_1_fu_328_p4 = {{bitcast_ln28_fu_324_p1[30:23]}};

assign tmp_20_fu_1473_p4 = {{bitcast_ln28_13_fu_1470_p1[30:23]}};

assign tmp_22_fu_651_p4 = {{bitcast_ln28_14_fu_647_p1[30:23]}};

assign tmp_24_fu_720_p4 = {{bitcast_ln28_15_fu_716_p1[30:23]}};

assign tmp_25_fu_737_p4 = {{bitcast_ln28_16_fu_734_p1[30:23]}};

assign tmp_27_fu_1169_p4 = {{bitcast_ln28_17_fu_1165_p1[30:23]}};

assign tmp_28_fu_1186_p4 = {{bitcast_ln28_18_fu_1183_p1[30:23]}};

assign tmp_30_fu_1547_p4 = {{bitcast_ln28_19_fu_1543_p1[30:23]}};

assign tmp_31_fu_1564_p4 = {{bitcast_ln28_20_fu_1561_p1[30:23]}};

assign tmp_33_fu_809_p4 = {{bitcast_ln28_21_fu_805_p1[30:23]}};

assign tmp_35_fu_1068_p4 = {{bitcast_ln28_22_fu_1064_p1[30:23]}};

assign tmp_36_fu_1085_p4 = {{bitcast_ln28_23_fu_1082_p1[30:23]}};

assign tmp_38_fu_1259_p4 = {{bitcast_ln28_24_fu_1255_p1[30:23]}};

assign tmp_39_fu_1276_p4 = {{bitcast_ln28_25_fu_1273_p1[30:23]}};

assign tmp_3_fu_403_p4 = {{bitcast_ln28_1_fu_399_p1[30:23]}};

assign tmp_41_fu_1638_p4 = {{bitcast_ln28_26_fu_1634_p1[30:23]}};

assign tmp_42_fu_1655_p4 = {{bitcast_ln28_27_fu_1652_p1[30:23]}};

assign tmp_44_fu_698_p3 = {{62'd2}, {f_0_reg_252}};

assign tmp_45_fu_307_p3 = {{62'd1}, {f_0_reg_252}};

assign tmp_46_fu_707_p3 = {{62'd3}, {f_0_reg_252}};

assign tmp_47_fu_379_p3 = {{62'd4}, {f_0_reg_252}};

assign tmp_48_fu_866_p3 = {{62'd6}, {f_0_reg_252}};

assign tmp_49_fu_539_p3 = {{62'd5}, {f_0_reg_252}};

assign tmp_4_fu_420_p4 = {{bitcast_ln28_2_fu_417_p1[30:23]}};

assign tmp_50_fu_875_p3 = {{62'd7}, {f_0_reg_252}};

assign tmp_6_fu_888_p4 = {{bitcast_ln28_3_fu_884_p1[30:23]}};

assign tmp_7_fu_905_p4 = {{bitcast_ln28_4_fu_902_p1[30:23]}};

assign tmp_9_fu_1365_p4 = {{bitcast_ln28_5_fu_1361_p1[30:23]}};

assign tmp_s_fu_1382_p4 = {{bitcast_ln28_6_fu_1379_p1[30:23]}};

assign trunc_ln28_10_fu_988_p1 = bitcast_ln28_10_fu_974_p1[22:0];

assign trunc_ln28_11_fu_1005_p1 = bitcast_ln28_11_fu_992_p1[22:0];

assign trunc_ln28_12_fu_1466_p1 = bitcast_ln28_12_fu_1452_p1[22:0];

assign trunc_ln28_13_fu_1483_p1 = bitcast_ln28_13_fu_1470_p1[22:0];

assign trunc_ln28_14_fu_661_p1 = bitcast_ln28_14_fu_647_p1[22:0];

assign trunc_ln28_15_fu_730_p1 = bitcast_ln28_15_fu_716_p1[22:0];

assign trunc_ln28_16_fu_747_p1 = bitcast_ln28_16_fu_734_p1[22:0];

assign trunc_ln28_17_fu_1179_p1 = bitcast_ln28_17_fu_1165_p1[22:0];

assign trunc_ln28_18_fu_1196_p1 = bitcast_ln28_18_fu_1183_p1[22:0];

assign trunc_ln28_19_fu_1557_p1 = bitcast_ln28_19_fu_1543_p1[22:0];

assign trunc_ln28_1_fu_413_p1 = bitcast_ln28_1_fu_399_p1[22:0];

assign trunc_ln28_20_fu_1574_p1 = bitcast_ln28_20_fu_1561_p1[22:0];

assign trunc_ln28_21_fu_819_p1 = bitcast_ln28_21_fu_805_p1[22:0];

assign trunc_ln28_22_fu_1078_p1 = bitcast_ln28_22_fu_1064_p1[22:0];

assign trunc_ln28_23_fu_1095_p1 = bitcast_ln28_23_fu_1082_p1[22:0];

assign trunc_ln28_24_fu_1269_p1 = bitcast_ln28_24_fu_1255_p1[22:0];

assign trunc_ln28_25_fu_1286_p1 = bitcast_ln28_25_fu_1273_p1[22:0];

assign trunc_ln28_26_fu_1648_p1 = bitcast_ln28_26_fu_1634_p1[22:0];

assign trunc_ln28_27_fu_1665_p1 = bitcast_ln28_27_fu_1652_p1[22:0];

assign trunc_ln28_2_fu_430_p1 = bitcast_ln28_2_fu_417_p1[22:0];

assign trunc_ln28_3_fu_898_p1 = bitcast_ln28_3_fu_884_p1[22:0];

assign trunc_ln28_4_fu_915_p1 = bitcast_ln28_4_fu_902_p1[22:0];

assign trunc_ln28_5_fu_1375_p1 = bitcast_ln28_5_fu_1361_p1[22:0];

assign trunc_ln28_6_fu_1392_p1 = bitcast_ln28_6_fu_1379_p1[22:0];

assign trunc_ln28_7_fu_502_p1 = bitcast_ln28_7_fu_488_p1[22:0];

assign trunc_ln28_8_fu_572_p1 = bitcast_ln28_8_fu_558_p1[22:0];

assign trunc_ln28_9_fu_589_p1 = bitcast_ln28_9_fu_576_p1[22:0];

assign trunc_ln28_fu_338_p1 = bitcast_ln28_fu_324_p1[22:0];

assign xor_ln28_fu_296_p2 = (ap_phi_mux_f_0_phi_fu_256_p4 ^ 2'd2);

assign zext_ln28_10_fu_1356_p1 = $unsigned(sext_ln28_3_fu_1353_p1);

assign zext_ln28_1_fu_375_p1 = f_0_reg_252;

assign zext_ln28_2_fu_856_p1 = f_0_reg_252;

assign zext_ln28_3_fu_302_p1 = $unsigned(xor_ln28_fu_296_p2);

assign zext_ln28_4_fu_1153_p1 = $unsigned(add_ln28_reg_1881);

assign zext_ln28_5_fu_319_p1 = $unsigned(sext_ln28_fu_316_p1);

assign zext_ln28_6_fu_1160_p1 = $unsigned(sext_ln28_1_fu_1157_p1);

assign zext_ln28_7_fu_394_p1 = add_ln28_1_fu_388_p2;

assign zext_ln28_8_fu_1348_p1 = $unsigned(sext_ln28_2_fu_1345_p1);

assign zext_ln28_9_fu_553_p1 = add_ln28_2_fu_548_p2;

assign zext_ln28_fu_291_p1 = ap_phi_mux_f_0_phi_fu_256_p4;

always @ (posedge ap_clk) begin
    zext_ln28_reg_1734[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_3_reg_1751[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    tmp_45_reg_1761[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000001;
    zext_ln28_5_reg_1771[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_1_reg_1792[4:2] <= 3'b000;
end

endmodule //max_pool_1
