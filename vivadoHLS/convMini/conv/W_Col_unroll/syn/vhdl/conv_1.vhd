-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=1057,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=604,HLS_SYN_LUT=1170,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3FC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_2_ce0 : STD_LOGIC;
    signal conv_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal r_fu_323_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_768 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln11_fu_337_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln11_reg_773 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_347_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_781 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln34_fu_378_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln34_reg_787 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln11_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_384_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln26_reg_792 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_fu_396_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_reg_800 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln34_2_fu_402_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln34_2_reg_805 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln14_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_out_addr_reg_812 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_fu_426_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_820 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln26_fu_440_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_reg_825 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln18_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_1_fu_460_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_1_reg_832 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_2_fu_473_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_2_reg_837 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_fu_486_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln22_reg_842 : STD_LOGIC_VECTOR (5 downto 0);
    signal merge_i_fu_516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_fu_531_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_reg_855 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln24_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln24_1_fu_594_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_1_reg_883 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln24_1_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln24_2_fu_657_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_2_reg_911 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln24_2_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal r_0_reg_158 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_reg_170 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_0_reg_182 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal wr_0_reg_194 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_2_0_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_0_reg_228 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_1_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_1_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_2_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_2_reg_273 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_4_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_6_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_7_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_11_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_16_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_17_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_329_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln34_fu_353_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_357_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln34_fu_366_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_370_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_1_fu_362_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_3_fu_406_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_1_fu_410_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_432_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_fu_444_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_450_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_464_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_477_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln7_1_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_i_fu_502_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_4_fu_541_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_2_fu_545_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_554_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_5_fu_550_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_fu_562_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_3_fu_568_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_3_fu_537_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_4_fu_578_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_9_fu_604_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_5_fu_608_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_617_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_10_fu_613_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_1_fu_625_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_6_fu_631_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_8_fu_600_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_7_fu_641_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_14_fu_667_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_8_fu_671_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_cast_fu_680_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_15_fu_676_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_2_fu_688_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_9_fu_694_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_13_fu_663_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_10_fu_704_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln33_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_718_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_728_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_1_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component conv_1_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_weighbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_1_conv_weighbkb
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_1_conv_weighcud
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_weights_2_U : component conv_1_conv_weighdEe
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_address0,
        ce0 => conv_weights_2_ce0,
        q0 => conv_weights_2_q0);

    conv_1_fadd_32ns_eOg_U1 : component conv_1_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_284_p0,
        din1 => grp_fu_284_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);

    conv_1_fmul_32ns_fYi_U2 : component conv_1_fmul_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_292_p2);

    conv_1_fcmp_32ns_g8j_U3 : component conv_1_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_284_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_4_fu_301_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_390_p2 = ap_const_lv1_1))) then 
                c_0_reg_170 <= c_reg_781;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_317_p2 = ap_const_lv1_0))) then 
                c_0_reg_170 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_0_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                ch_0_0_reg_228 <= add_ln24_reg_855;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_420_p2 = ap_const_lv1_0))) then 
                ch_0_0_reg_228 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_1_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ch_0_1_reg_250 <= add_ln24_1_reg_883;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_525_p2 = ap_const_lv1_1))) then 
                ch_0_1_reg_250 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_2_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                ch_0_2_reg_273 <= add_ln24_2_reg_911;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln24_1_fu_588_p2 = ap_const_lv1_1))) then 
                ch_0_2_reg_273 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                f_0_reg_182 <= f_reg_800;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_341_p2 = ap_const_lv1_0))) then 
                f_0_reg_182 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_341_p2 = ap_const_lv1_1))) then 
                r_0_reg_158 <= r_reg_768;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_158 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln24_2_fu_651_p2 = ap_const_lv1_1))) then 
                w_sum_0_reg_205 <= w_sum_2_2_reg_261;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_390_p2 = ap_const_lv1_0))) then 
                w_sum_0_reg_205 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_2_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_sum_2_0_reg_217 <= grp_fu_284_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_420_p2 = ap_const_lv1_0))) then 
                w_sum_2_0_reg_217 <= w_sum_0_reg_205;
            end if; 
        end if;
    end process;

    w_sum_2_1_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_sum_2_1_reg_239 <= grp_fu_284_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_525_p2 = ap_const_lv1_1))) then 
                w_sum_2_1_reg_239 <= w_sum_2_0_reg_217;
            end if; 
        end if;
    end process;

    w_sum_2_2_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                w_sum_2_2_reg_261 <= grp_fu_284_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln24_1_fu_588_p2 = ap_const_lv1_1))) then 
                w_sum_2_2_reg_261 <= w_sum_2_1_reg_239;
            end if; 
        end if;
    end process;

    wr_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln24_2_fu_651_p2 = ap_const_lv1_1))) then 
                wr_0_reg_194 <= wr_reg_820;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_390_p2 = ap_const_lv1_0))) then 
                wr_0_reg_194 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln24_1_reg_883 <= add_ln24_1_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln24_2_reg_911 <= add_ln24_2_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln24_reg_855 <= add_ln24_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_781 <= c_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_390_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_812 <= zext_ln34_4_fu_415_p1(4 - 1 downto 0);
                    zext_ln34_2_reg_805(1 downto 0) <= zext_ln34_2_fu_402_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_800 <= f_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_768 <= r_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_341_p2 = ap_const_lv1_0))) then
                sub_ln34_reg_787 <= sub_ln34_fu_378_p2;
                xor_ln26_reg_792 <= xor_ln26_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_820 <= wr_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_317_p2 = ap_const_lv1_0))) then
                    zext_ln11_reg_773(2 downto 1) <= zext_ln11_fu_337_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_420_p2 = ap_const_lv1_0))) then
                    zext_ln22_reg_842(4 downto 1) <= zext_ln22_fu_486_p1(4 downto 1);
                    zext_ln26_1_reg_832(4 downto 1) <= zext_ln26_1_fu_460_p1(4 downto 1);
                    zext_ln26_2_reg_837(4 downto 1) <= zext_ln26_2_fu_473_p1(4 downto 1);
                    zext_ln26_reg_825(2 downto 1) <= zext_ln26_fu_440_p1(2 downto 1);
            end if;
        end if;
    end process;
    zext_ln11_reg_773(0) <= '0';
    zext_ln11_reg_773(3) <= '0';
    zext_ln34_2_reg_805(5 downto 2) <= "0000";
    zext_ln26_reg_825(0) <= '0';
    zext_ln26_reg_825(3) <= '0';
    zext_ln26_1_reg_832(0) <= '0';
    zext_ln26_1_reg_832(5) <= '0';
    zext_ln26_2_reg_837(0) <= '0';
    zext_ln26_2_reg_837(5) <= '0';
    zext_ln22_reg_842(0) <= '0';
    zext_ln22_reg_842(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_317_p2, ap_CS_fsm_state3, icmp_ln11_fu_341_p2, ap_CS_fsm_state4, icmp_ln14_fu_390_p2, ap_CS_fsm_state5, icmp_ln18_fu_420_p2, ap_CS_fsm_state6, icmp_ln24_fu_525_p2, ap_CS_fsm_state10, icmp_ln24_1_fu_588_p2, ap_CS_fsm_state14, icmp_ln24_2_fu_651_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_317_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_341_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_390_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_420_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_525_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln24_1_fu_588_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln24_2_fu_651_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln24_1_fu_594_p2 <= std_logic_vector(unsigned(ch_0_1_reg_250) + unsigned(ap_const_lv2_1));
    add_ln24_2_fu_657_p2 <= std_logic_vector(unsigned(ch_0_2_reg_273) + unsigned(ap_const_lv2_1));
    add_ln24_fu_531_p2 <= std_logic_vector(unsigned(ch_0_0_reg_228) + unsigned(ap_const_lv2_1));
    add_ln26_10_fu_704_p2 <= std_logic_vector(unsigned(zext_ln22_reg_842) + unsigned(zext_ln26_13_fu_663_p1));
    add_ln26_2_fu_545_p2 <= std_logic_vector(unsigned(zext_ln26_reg_825) + unsigned(zext_ln26_4_fu_541_p1));
    add_ln26_3_fu_568_p2 <= std_logic_vector(unsigned(sub_ln26_fu_562_p2) + unsigned(zext_ln34_2_reg_805));
    add_ln26_4_fu_578_p2 <= std_logic_vector(unsigned(zext_ln26_1_reg_832) + unsigned(zext_ln26_3_fu_537_p1));
    add_ln26_5_fu_608_p2 <= std_logic_vector(unsigned(zext_ln26_reg_825) + unsigned(zext_ln26_9_fu_604_p1));
    add_ln26_6_fu_631_p2 <= std_logic_vector(unsigned(sub_ln26_1_fu_625_p2) + unsigned(zext_ln34_2_reg_805));
    add_ln26_7_fu_641_p2 <= std_logic_vector(unsigned(zext_ln26_2_reg_837) + unsigned(zext_ln26_8_fu_600_p1));
    add_ln26_8_fu_671_p2 <= std_logic_vector(unsigned(zext_ln26_reg_825) + unsigned(zext_ln26_14_fu_667_p1));
    add_ln26_9_fu_694_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_688_p2) + unsigned(zext_ln34_2_reg_805));
    add_ln26_fu_444_p2 <= std_logic_vector(unsigned(wr_0_reg_194) + unsigned(r_0_reg_158));
    add_ln34_1_fu_410_p2 <= std_logic_vector(unsigned(sub_ln34_reg_787) + unsigned(zext_ln34_3_fu_406_p1));
    add_ln34_fu_357_p2 <= std_logic_vector(unsigned(zext_ln34_fu_353_p1) + unsigned(zext_ln11_reg_773));
    and_ln33_fu_750_p2 <= (tmp_4_fu_301_p2 and or_ln33_fu_744_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_317_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_317_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_317_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_317_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln33_fu_714_p1 <= grp_fu_284_p2;
    c_fu_347_p2 <= std_logic_vector(unsigned(c_0_reg_170) + unsigned(ap_const_lv2_1));
    conv_out_address0 <= conv_out_addr_reg_812;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_284_p2 when (and_ln33_fu_750_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln26_6_fu_573_p1(5 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln26_11_fu_636_p1(5 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_address0 <= zext_ln26_16_fu_699_p1(5 - 1 downto 0);

    conv_weights_2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_13_fu_510_p2 <= (icmp_ln7_fu_490_p2 or icmp_ln7_1_fu_496_p2);
    f_fu_396_p2 <= std_logic_vector(unsigned(f_0_reg_182) + unsigned(ap_const_lv2_1));

    grp_fu_284_p0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state5, w_sum_0_reg_205, w_sum_2_0_reg_217, w_sum_2_1_reg_239, w_sum_2_2_reg_261)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_284_p0 <= w_sum_2_2_reg_261;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_284_p0 <= w_sum_2_1_reg_239;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_284_p0 <= w_sum_2_0_reg_217;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_284_p0 <= w_sum_0_reg_205;
        else 
            grp_fu_284_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_284_p1_assign_proc : process(grp_fu_292_p2, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state5, merge_i_fu_516_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_284_p1 <= grp_fu_292_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_284_p1 <= merge_i_fu_516_p3;
        else 
            grp_fu_284_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p0_assign_proc : process(conv_weights_0_q0, conv_weights_1_q0, conv_weights_2_q0, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_292_p0 <= conv_weights_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_292_p0 <= conv_weights_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_292_p0 <= conv_weights_0_q0;
        else 
            grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_341_p2 <= "1" when (c_0_reg_170 = ap_const_lv2_2) else "0";
    icmp_ln14_fu_390_p2 <= "1" when (f_0_reg_182 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_420_p2 <= "1" when (wr_0_reg_194 = ap_const_lv2_3) else "0";
    icmp_ln24_1_fu_588_p2 <= "1" when (ch_0_1_reg_250 = ap_const_lv2_2) else "0";
    icmp_ln24_2_fu_651_p2 <= "1" when (ch_0_2_reg_273 = ap_const_lv2_2) else "0";
    icmp_ln24_fu_525_p2 <= "1" when (ch_0_0_reg_228 = ap_const_lv2_2) else "0";
    icmp_ln33_1_fu_738_p2 <= "1" when (trunc_ln33_fu_728_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_732_p2 <= "0" when (tmp_fu_718_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_1_fu_496_p2 <= "1" when (f_0_reg_182 = ap_const_lv2_1) else "0";
    icmp_ln7_fu_490_p2 <= "1" when (f_0_reg_182 = ap_const_lv2_0) else "0";
    icmp_ln8_fu_317_p2 <= "1" when (r_0_reg_158 = ap_const_lv2_2) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, zext_ln26_7_fu_583_p1, zext_ln26_12_fu_646_p1, zext_ln26_17_fu_709_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_r_address0 <= zext_ln26_17_fu_709_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= zext_ln26_12_fu_646_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln26_7_fu_583_p1(5 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    merge_i_fu_516_p3 <= 
        select_ln7_i_fu_502_p3 when (empty_13_fu_510_p2(0) = '1') else 
        ap_const_lv32_3FC00000;
    or_ln33_fu_744_p2 <= (icmp_ln33_fu_732_p2 or icmp_ln33_1_fu_738_p2);
    p_shl1_cast_fu_554_p3 <= (add_ln26_2_fu_545_p2 & ap_const_lv2_0);
    p_shl2_cast_fu_617_p3 <= (add_ln26_5_fu_608_p2 & ap_const_lv2_0);
    p_shl3_cast_fu_680_p3 <= (add_ln26_8_fu_671_p2 & ap_const_lv2_0);
    p_shl_cast_fu_370_p3 <= (trunc_ln34_fu_366_p1 & ap_const_lv2_0);
    r_fu_323_p2 <= std_logic_vector(unsigned(r_0_reg_158) + unsigned(ap_const_lv2_1));
    select_ln7_i_fu_502_p3 <= 
        ap_const_lv32_40000000 when (icmp_ln7_1_fu_496_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    sub_ln26_1_fu_625_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_617_p3) - unsigned(zext_ln26_10_fu_613_p1));
    sub_ln26_2_fu_688_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_680_p3) - unsigned(zext_ln26_15_fu_676_p1));
    sub_ln26_fu_562_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_554_p3) - unsigned(zext_ln26_5_fu_550_p1));
    sub_ln34_fu_378_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_370_p3) - unsigned(zext_ln34_1_fu_362_p1));
    tmp_10_fu_450_p4 <= ((add_ln26_fu_444_p2 & c_0_reg_170) & ap_const_lv1_0);
    tmp_11_fu_464_p4 <= ((add_ln26_fu_444_p2 & c_reg_781) & ap_const_lv1_0);
    tmp_12_fu_477_p4 <= ((add_ln26_fu_444_p2 & xor_ln26_reg_792) & ap_const_lv1_0);
    tmp_8_fu_329_p3 <= (r_0_reg_158 & ap_const_lv1_0);
    tmp_9_fu_432_p3 <= (wr_0_reg_194 & ap_const_lv1_0);
    tmp_fu_718_p4 <= bitcast_ln33_fu_714_p1(30 downto 23);
    trunc_ln33_fu_728_p1 <= bitcast_ln33_fu_714_p1(23 - 1 downto 0);
    trunc_ln34_fu_366_p1 <= add_ln34_fu_357_p2(3 - 1 downto 0);
    wr_fu_426_p2 <= std_logic_vector(unsigned(wr_0_reg_194) + unsigned(ap_const_lv2_1));
    xor_ln26_fu_384_p2 <= (c_0_reg_170 xor ap_const_lv2_2);
    zext_ln11_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_329_p3),4));
    zext_ln22_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_477_p4),6));
    zext_ln26_10_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_608_p2),6));
    zext_ln26_11_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_631_p2),64));
    zext_ln26_12_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_641_p2),64));
    zext_ln26_13_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_2_reg_273),6));
    zext_ln26_14_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_2_reg_273),4));
    zext_ln26_15_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_671_p2),6));
    zext_ln26_16_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_fu_694_p2),64));
    zext_ln26_17_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_10_fu_704_p2),64));
    zext_ln26_1_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_450_p4),6));
    zext_ln26_2_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_464_p4),6));
    zext_ln26_3_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_228),6));
    zext_ln26_4_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_228),4));
    zext_ln26_5_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_2_fu_545_p2),6));
    zext_ln26_6_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_568_p2),64));
    zext_ln26_7_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_4_fu_578_p2),64));
    zext_ln26_8_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_250),6));
    zext_ln26_9_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_250),4));
    zext_ln26_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_432_p3),4));
    zext_ln34_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_357_p2),5));
    zext_ln34_2_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_182),6));
    zext_ln34_3_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_182),5));
    zext_ln34_4_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_fu_410_p2),64));
    zext_ln34_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_170),4));
end behav;
