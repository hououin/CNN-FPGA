// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=1057,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=604,HLS_SYN_LUT=1170,HLS_VERSION=2020_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [3:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] input_r_address0;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [4:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
wire   [4:0] conv_weights_2_address0;
reg    conv_weights_2_ce0;
wire   [31:0] conv_weights_2_q0;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_292_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire   [1:0] r_fu_323_p2;
reg   [1:0] r_reg_768;
wire    ap_CS_fsm_state2;
wire   [3:0] zext_ln11_fu_337_p1;
reg   [3:0] zext_ln11_reg_773;
wire   [0:0] icmp_ln8_fu_317_p2;
wire   [1:0] c_fu_347_p2;
reg   [1:0] c_reg_781;
wire    ap_CS_fsm_state3;
wire   [4:0] sub_ln34_fu_378_p2;
reg   [4:0] sub_ln34_reg_787;
wire   [0:0] icmp_ln11_fu_341_p2;
wire   [1:0] xor_ln26_fu_384_p2;
reg   [1:0] xor_ln26_reg_792;
wire   [1:0] f_fu_396_p2;
reg   [1:0] f_reg_800;
wire    ap_CS_fsm_state4;
wire   [5:0] zext_ln34_2_fu_402_p1;
reg   [5:0] zext_ln34_2_reg_805;
wire   [0:0] icmp_ln14_fu_390_p2;
reg   [3:0] conv_out_addr_reg_812;
wire   [1:0] wr_fu_426_p2;
reg   [1:0] wr_reg_820;
wire    ap_CS_fsm_state5;
wire   [3:0] zext_ln26_fu_440_p1;
reg   [3:0] zext_ln26_reg_825;
wire   [0:0] icmp_ln18_fu_420_p2;
wire   [5:0] zext_ln26_1_fu_460_p1;
reg   [5:0] zext_ln26_1_reg_832;
wire   [5:0] zext_ln26_2_fu_473_p1;
reg   [5:0] zext_ln26_2_reg_837;
wire   [5:0] zext_ln22_fu_486_p1;
reg   [5:0] zext_ln22_reg_842;
wire   [31:0] merge_i_fu_516_p3;
wire   [1:0] add_ln24_fu_531_p2;
reg   [1:0] add_ln24_reg_855;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln24_fu_525_p2;
wire   [31:0] grp_fu_284_p2;
wire    ap_CS_fsm_state9;
wire   [1:0] add_ln24_1_fu_594_p2;
reg   [1:0] add_ln24_1_reg_883;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln24_1_fu_588_p2;
wire    ap_CS_fsm_state13;
wire   [1:0] add_ln24_2_fu_657_p2;
reg   [1:0] add_ln24_2_reg_911;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln24_2_fu_651_p2;
wire    ap_CS_fsm_state17;
reg   [1:0] r_0_reg_158;
reg   [1:0] c_0_reg_170;
reg   [1:0] f_0_reg_182;
wire    ap_CS_fsm_state18;
reg   [1:0] wr_0_reg_194;
reg   [31:0] w_sum_0_reg_205;
reg   [31:0] w_sum_2_0_reg_217;
reg   [1:0] ch_0_0_reg_228;
reg   [31:0] w_sum_2_1_reg_239;
reg   [1:0] ch_0_1_reg_250;
reg   [31:0] w_sum_2_2_reg_261;
reg   [1:0] ch_0_2_reg_273;
wire   [63:0] zext_ln34_4_fu_415_p1;
wire   [63:0] zext_ln26_6_fu_573_p1;
wire   [63:0] zext_ln26_7_fu_583_p1;
wire   [63:0] zext_ln26_11_fu_636_p1;
wire   [63:0] zext_ln26_12_fu_646_p1;
wire   [63:0] zext_ln26_16_fu_699_p1;
wire   [63:0] zext_ln26_17_fu_709_p1;
reg   [31:0] grp_fu_284_p0;
reg   [31:0] grp_fu_284_p1;
reg   [31:0] grp_fu_292_p0;
wire   [2:0] tmp_8_fu_329_p3;
wire   [3:0] zext_ln34_fu_353_p1;
wire   [3:0] add_ln34_fu_357_p2;
wire   [2:0] trunc_ln34_fu_366_p1;
wire   [4:0] p_shl_cast_fu_370_p3;
wire   [4:0] zext_ln34_1_fu_362_p1;
wire   [4:0] zext_ln34_3_fu_406_p1;
wire   [4:0] add_ln34_1_fu_410_p2;
wire   [2:0] tmp_9_fu_432_p3;
wire   [1:0] add_ln26_fu_444_p2;
wire   [4:0] tmp_10_fu_450_p4;
wire   [4:0] tmp_11_fu_464_p4;
wire   [4:0] tmp_12_fu_477_p4;
wire   [0:0] icmp_ln7_1_fu_496_p2;
wire   [0:0] icmp_ln7_fu_490_p2;
wire   [0:0] empty_13_fu_510_p2;
wire   [31:0] select_ln7_i_fu_502_p3;
wire   [3:0] zext_ln26_4_fu_541_p1;
wire   [3:0] add_ln26_2_fu_545_p2;
wire   [5:0] p_shl1_cast_fu_554_p3;
wire   [5:0] zext_ln26_5_fu_550_p1;
wire   [5:0] sub_ln26_fu_562_p2;
wire   [5:0] add_ln26_3_fu_568_p2;
wire   [5:0] zext_ln26_3_fu_537_p1;
wire   [5:0] add_ln26_4_fu_578_p2;
wire   [3:0] zext_ln26_9_fu_604_p1;
wire   [3:0] add_ln26_5_fu_608_p2;
wire   [5:0] p_shl2_cast_fu_617_p3;
wire   [5:0] zext_ln26_10_fu_613_p1;
wire   [5:0] sub_ln26_1_fu_625_p2;
wire   [5:0] add_ln26_6_fu_631_p2;
wire   [5:0] zext_ln26_8_fu_600_p1;
wire   [5:0] add_ln26_7_fu_641_p2;
wire   [3:0] zext_ln26_14_fu_667_p1;
wire   [3:0] add_ln26_8_fu_671_p2;
wire   [5:0] p_shl3_cast_fu_680_p3;
wire   [5:0] zext_ln26_15_fu_676_p1;
wire   [5:0] sub_ln26_2_fu_688_p2;
wire   [5:0] add_ln26_9_fu_694_p2;
wire   [5:0] zext_ln26_13_fu_663_p1;
wire   [5:0] add_ln26_10_fu_704_p2;
wire   [31:0] bitcast_ln33_fu_714_p1;
wire   [7:0] tmp_fu_718_p4;
wire   [22:0] trunc_ln33_fu_728_p1;
wire   [0:0] icmp_ln33_1_fu_738_p2;
wire   [0:0] icmp_ln33_fu_732_p2;
wire   [0:0] or_ln33_fu_744_p2;
wire   [0:0] tmp_4_fu_301_p2;
wire   [0:0] and_ln33_fu_750_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

conv_1_conv_weighbkb #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_1_conv_weighcud #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_1_conv_weighdEe #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_address0),
    .ce0(conv_weights_2_ce0),
    .q0(conv_weights_2_q0)
);

conv_1_fadd_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_eOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_284_p0),
    .din1(grp_fu_284_p1),
    .ce(1'b1),
    .dout(grp_fu_284_p2)
);

conv_1_fmul_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_fYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_292_p0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_292_p2)
);

conv_1_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_g8j_U3(
    .din0(grp_fu_284_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_4_fu_301_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_390_p2 == 1'd1))) begin
        c_0_reg_170 <= c_reg_781;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_317_p2 == 1'd0))) begin
        c_0_reg_170 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ch_0_0_reg_228 <= add_ln24_reg_855;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_420_p2 == 1'd0))) begin
        ch_0_0_reg_228 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ch_0_1_reg_250 <= add_ln24_1_reg_883;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_525_p2 == 1'd1))) begin
        ch_0_1_reg_250 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ch_0_2_reg_273 <= add_ln24_2_reg_911;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln24_1_fu_588_p2 == 1'd1))) begin
        ch_0_2_reg_273 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        f_0_reg_182 <= f_reg_800;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_341_p2 == 1'd0))) begin
        f_0_reg_182 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_341_p2 == 1'd1))) begin
        r_0_reg_158 <= r_reg_768;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_158 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln24_2_fu_651_p2 == 1'd1))) begin
        w_sum_0_reg_205 <= w_sum_2_2_reg_261;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_390_p2 == 1'd0))) begin
        w_sum_0_reg_205 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        w_sum_2_0_reg_217 <= grp_fu_284_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_420_p2 == 1'd0))) begin
        w_sum_2_0_reg_217 <= w_sum_0_reg_205;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        w_sum_2_1_reg_239 <= grp_fu_284_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_525_p2 == 1'd1))) begin
        w_sum_2_1_reg_239 <= w_sum_2_0_reg_217;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        w_sum_2_2_reg_261 <= grp_fu_284_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln24_1_fu_588_p2 == 1'd1))) begin
        w_sum_2_2_reg_261 <= w_sum_2_1_reg_239;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln24_2_fu_651_p2 == 1'd1))) begin
        wr_0_reg_194 <= wr_reg_820;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_390_p2 == 1'd0))) begin
        wr_0_reg_194 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln24_1_reg_883 <= add_ln24_1_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln24_2_reg_911 <= add_ln24_2_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln24_reg_855 <= add_ln24_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_781 <= c_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_390_p2 == 1'd0))) begin
        conv_out_addr_reg_812 <= zext_ln34_4_fu_415_p1;
        zext_ln34_2_reg_805[1 : 0] <= zext_ln34_2_fu_402_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_800 <= f_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_768 <= r_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_341_p2 == 1'd0))) begin
        sub_ln34_reg_787 <= sub_ln34_fu_378_p2;
        xor_ln26_reg_792 <= xor_ln26_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_820 <= wr_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_317_p2 == 1'd0))) begin
        zext_ln11_reg_773[2 : 1] <= zext_ln11_fu_337_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_420_p2 == 1'd0))) begin
        zext_ln22_reg_842[4 : 1] <= zext_ln22_fu_486_p1[4 : 1];
        zext_ln26_1_reg_832[4 : 1] <= zext_ln26_1_fu_460_p1[4 : 1];
        zext_ln26_2_reg_837[4 : 1] <= zext_ln26_2_fu_473_p1[4 : 1];
        zext_ln26_reg_825[2 : 1] <= zext_ln26_fu_440_p1[2 : 1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_317_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_317_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_weights_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_284_p0 = w_sum_2_2_reg_261;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_284_p0 = w_sum_2_1_reg_239;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_284_p0 = w_sum_2_0_reg_217;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_284_p0 = w_sum_0_reg_205;
    end else begin
        grp_fu_284_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_284_p1 = grp_fu_292_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_284_p1 = merge_i_fu_516_p3;
    end else begin
        grp_fu_284_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_292_p0 = conv_weights_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_292_p0 = conv_weights_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_292_p0 = conv_weights_0_q0;
    end else begin
        grp_fu_292_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        input_r_address0 = zext_ln26_17_fu_709_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address0 = zext_ln26_12_fu_646_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = zext_ln26_7_fu_583_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_317_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_341_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_390_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_420_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_525_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln24_1_fu_588_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln24_2_fu_651_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_1_fu_594_p2 = (ch_0_1_reg_250 + 2'd1);

assign add_ln24_2_fu_657_p2 = (ch_0_2_reg_273 + 2'd1);

assign add_ln24_fu_531_p2 = (ch_0_0_reg_228 + 2'd1);

assign add_ln26_10_fu_704_p2 = (zext_ln22_reg_842 + zext_ln26_13_fu_663_p1);

assign add_ln26_2_fu_545_p2 = (zext_ln26_reg_825 + zext_ln26_4_fu_541_p1);

assign add_ln26_3_fu_568_p2 = (sub_ln26_fu_562_p2 + zext_ln34_2_reg_805);

assign add_ln26_4_fu_578_p2 = (zext_ln26_1_reg_832 + zext_ln26_3_fu_537_p1);

assign add_ln26_5_fu_608_p2 = (zext_ln26_reg_825 + zext_ln26_9_fu_604_p1);

assign add_ln26_6_fu_631_p2 = (sub_ln26_1_fu_625_p2 + zext_ln34_2_reg_805);

assign add_ln26_7_fu_641_p2 = (zext_ln26_2_reg_837 + zext_ln26_8_fu_600_p1);

assign add_ln26_8_fu_671_p2 = (zext_ln26_reg_825 + zext_ln26_14_fu_667_p1);

assign add_ln26_9_fu_694_p2 = (sub_ln26_2_fu_688_p2 + zext_ln34_2_reg_805);

assign add_ln26_fu_444_p2 = (wr_0_reg_194 + r_0_reg_158);

assign add_ln34_1_fu_410_p2 = (sub_ln34_reg_787 + zext_ln34_3_fu_406_p1);

assign add_ln34_fu_357_p2 = (zext_ln34_fu_353_p1 + zext_ln11_reg_773);

assign and_ln33_fu_750_p2 = (tmp_4_fu_301_p2 & or_ln33_fu_744_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln33_fu_714_p1 = grp_fu_284_p2;

assign c_fu_347_p2 = (c_0_reg_170 + 2'd1);

assign conv_out_address0 = conv_out_addr_reg_812;

assign conv_out_d0 = ((and_ln33_fu_750_p2[0:0] === 1'b1) ? grp_fu_284_p2 : 32'd0);

assign conv_weights_0_address0 = zext_ln26_6_fu_573_p1;

assign conv_weights_1_address0 = zext_ln26_11_fu_636_p1;

assign conv_weights_2_address0 = zext_ln26_16_fu_699_p1;

assign empty_13_fu_510_p2 = (icmp_ln7_fu_490_p2 | icmp_ln7_1_fu_496_p2);

assign f_fu_396_p2 = (f_0_reg_182 + 2'd1);

assign icmp_ln11_fu_341_p2 = ((c_0_reg_170 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_390_p2 = ((f_0_reg_182 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_420_p2 = ((wr_0_reg_194 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_588_p2 = ((ch_0_1_reg_250 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_651_p2 = ((ch_0_2_reg_273 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_525_p2 = ((ch_0_0_reg_228 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_738_p2 = ((trunc_ln33_fu_728_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_732_p2 = ((tmp_fu_718_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_496_p2 = ((f_0_reg_182 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_490_p2 = ((f_0_reg_182 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_317_p2 = ((r_0_reg_158 == 2'd2) ? 1'b1 : 1'b0);

assign merge_i_fu_516_p3 = ((empty_13_fu_510_p2[0:0] === 1'b1) ? select_ln7_i_fu_502_p3 : 32'd1069547520);

assign or_ln33_fu_744_p2 = (icmp_ln33_fu_732_p2 | icmp_ln33_1_fu_738_p2);

assign p_shl1_cast_fu_554_p3 = {{add_ln26_2_fu_545_p2}, {2'd0}};

assign p_shl2_cast_fu_617_p3 = {{add_ln26_5_fu_608_p2}, {2'd0}};

assign p_shl3_cast_fu_680_p3 = {{add_ln26_8_fu_671_p2}, {2'd0}};

assign p_shl_cast_fu_370_p3 = {{trunc_ln34_fu_366_p1}, {2'd0}};

assign r_fu_323_p2 = (r_0_reg_158 + 2'd1);

assign select_ln7_i_fu_502_p3 = ((icmp_ln7_1_fu_496_p2[0:0] === 1'b1) ? 32'd1073741824 : 32'd1065353216);

assign sub_ln26_1_fu_625_p2 = (p_shl2_cast_fu_617_p3 - zext_ln26_10_fu_613_p1);

assign sub_ln26_2_fu_688_p2 = (p_shl3_cast_fu_680_p3 - zext_ln26_15_fu_676_p1);

assign sub_ln26_fu_562_p2 = (p_shl1_cast_fu_554_p3 - zext_ln26_5_fu_550_p1);

assign sub_ln34_fu_378_p2 = (p_shl_cast_fu_370_p3 - zext_ln34_1_fu_362_p1);

assign tmp_10_fu_450_p4 = {{{add_ln26_fu_444_p2}, {c_0_reg_170}}, {1'd0}};

assign tmp_11_fu_464_p4 = {{{add_ln26_fu_444_p2}, {c_reg_781}}, {1'd0}};

assign tmp_12_fu_477_p4 = {{{add_ln26_fu_444_p2}, {xor_ln26_reg_792}}, {1'd0}};

assign tmp_8_fu_329_p3 = {{r_0_reg_158}, {1'd0}};

assign tmp_9_fu_432_p3 = {{wr_0_reg_194}, {1'd0}};

assign tmp_fu_718_p4 = {{bitcast_ln33_fu_714_p1[30:23]}};

assign trunc_ln33_fu_728_p1 = bitcast_ln33_fu_714_p1[22:0];

assign trunc_ln34_fu_366_p1 = add_ln34_fu_357_p2[2:0];

assign wr_fu_426_p2 = (wr_0_reg_194 + 2'd1);

assign xor_ln26_fu_384_p2 = (c_0_reg_170 ^ 2'd2);

assign zext_ln11_fu_337_p1 = tmp_8_fu_329_p3;

assign zext_ln22_fu_486_p1 = tmp_12_fu_477_p4;

assign zext_ln26_10_fu_613_p1 = add_ln26_5_fu_608_p2;

assign zext_ln26_11_fu_636_p1 = add_ln26_6_fu_631_p2;

assign zext_ln26_12_fu_646_p1 = add_ln26_7_fu_641_p2;

assign zext_ln26_13_fu_663_p1 = ch_0_2_reg_273;

assign zext_ln26_14_fu_667_p1 = ch_0_2_reg_273;

assign zext_ln26_15_fu_676_p1 = add_ln26_8_fu_671_p2;

assign zext_ln26_16_fu_699_p1 = add_ln26_9_fu_694_p2;

assign zext_ln26_17_fu_709_p1 = add_ln26_10_fu_704_p2;

assign zext_ln26_1_fu_460_p1 = tmp_10_fu_450_p4;

assign zext_ln26_2_fu_473_p1 = tmp_11_fu_464_p4;

assign zext_ln26_3_fu_537_p1 = ch_0_0_reg_228;

assign zext_ln26_4_fu_541_p1 = ch_0_0_reg_228;

assign zext_ln26_5_fu_550_p1 = add_ln26_2_fu_545_p2;

assign zext_ln26_6_fu_573_p1 = add_ln26_3_fu_568_p2;

assign zext_ln26_7_fu_583_p1 = add_ln26_4_fu_578_p2;

assign zext_ln26_8_fu_600_p1 = ch_0_1_reg_250;

assign zext_ln26_9_fu_604_p1 = ch_0_1_reg_250;

assign zext_ln26_fu_440_p1 = tmp_9_fu_432_p3;

assign zext_ln34_1_fu_362_p1 = add_ln34_fu_357_p2;

assign zext_ln34_2_fu_402_p1 = f_0_reg_182;

assign zext_ln34_3_fu_406_p1 = f_0_reg_182;

assign zext_ln34_4_fu_415_p1 = add_ln34_1_fu_410_p2;

assign zext_ln34_fu_353_p1 = c_0_reg_170;

always @ (posedge ap_clk) begin
    zext_ln11_reg_773[0] <= 1'b0;
    zext_ln11_reg_773[3] <= 1'b0;
    zext_ln34_2_reg_805[5:2] <= 4'b0000;
    zext_ln26_reg_825[0] <= 1'b0;
    zext_ln26_reg_825[3] <= 1'b0;
    zext_ln26_1_reg_832[0] <= 1'b0;
    zext_ln26_1_reg_832[5] <= 1'b0;
    zext_ln26_2_reg_837[0] <= 1'b0;
    zext_ln26_2_reg_837[5] <= 1'b0;
    zext_ln22_reg_842[0] <= 1'b0;
    zext_ln22_reg_842[5] <= 1'b0;
end

endmodule //conv_1
