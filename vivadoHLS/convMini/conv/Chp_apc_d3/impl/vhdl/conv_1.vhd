-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    conv_out_0_ce0 : OUT STD_LOGIC;
    conv_out_0_we0 : OUT STD_LOGIC;
    conv_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_out_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    conv_out_1_ce0 : OUT STD_LOGIC;
    conv_out_1_we0 : OUT STD_LOGIC;
    conv_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_out_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    conv_out_2_ce0 : OUT STD_LOGIC;
    conv_out_2_we0 : OUT STD_LOGIC;
    conv_out_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=493,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=413,HLS_SYN_LUT=1188,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3FC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_ce0 : STD_LOGIC;
    signal conv_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten29_reg_237 : STD_LOGIC_VECTOR (4 downto 0);
    signal wr_0_reg_248 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_259 : STD_LOGIC_VECTOR (3 downto 0);
    signal wc_0_reg_270 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_293 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln8_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln8_reg_828 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln11_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_1_fu_353_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_838 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_2_fu_403_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_2_reg_845 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_3_fu_411_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_3_reg_852 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_out_0_addr_reg_860 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_out_1_addr_reg_865 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_out_2_addr_reg_870 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln18_fu_436_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_reg_875 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln18_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_880 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_880_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_fu_464_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_reg_884 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln26_2_fu_490_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_2_reg_889 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_5_fu_582_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_5_reg_894 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_6_fu_590_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_6_reg_899 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln26_2_fu_689_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_2_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_699_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_reg_924 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ch_fu_715_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ch_reg_939 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal merge_i_fu_744_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal f_fu_806_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal select_ln11_fu_817_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten54_reg_181 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_reg_192 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten40_reg_203 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_215 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_0_reg_226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten29_phi_fu_241_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_252_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_263_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_274_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_2_phi_fu_285_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ch_0_phi_fu_297_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_2_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_3_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_5_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_sum_1_fu_795_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_304_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal r_fu_333_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_361_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln14_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_345_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln34_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_391_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_1_fu_419_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_fu_369_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_423_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_440_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln26_1_fu_445_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln21_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_470_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_502_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_1_fu_510_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_498_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_514_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_2_fu_524_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_537_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_450_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln24_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_1_fu_482_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln26_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_570_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln26_2_fu_598_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_fu_520_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_3_fu_602_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_608_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln26_3_fu_529_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln26_4_fu_620_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_625_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln26_4_fu_544_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln26_7_fu_633_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_1_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_5_fu_651_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_1_fu_661_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_665_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln26_fu_657_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_1_fu_673_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_6_fu_679_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_fu_693_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln7_1_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_5_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_i_fu_730_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln33_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_757_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_767_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_1_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_1_fu_811_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1_fadd_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_U : component conv_1_conv_weights
    generic map (
        DataWidth => 32,
        AddressRange => 54,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_address0,
        ce0 => conv_weights_ce0,
        q0 => conv_weights_q0);

    conv_1_fadd_32ns_bkb_U1 : component conv_1_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_304_p0,
        din1 => grp_fu_304_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_304_p2);

    conv_1_fmul_32ns_cud_U2 : component conv_1_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_q0,
        din1 => grp_fu_309_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p2);

    conv_1_fcmp_32ns_dEe_U3 : component conv_1_fcmp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_304_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_5_fu_315_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln8_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_0_reg_215 <= select_ln34_3_reg_852;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_215 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ch_0_reg_293 <= ch_reg_939;
            elsif (((icmp_ln8_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ch_0_reg_293 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                f_0_reg_226 <= f_fu_806_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_226 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten29_reg_237 <= add_ln18_reg_884;
            elsif (((icmp_ln8_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten29_reg_237 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten40_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten40_reg_203 <= select_ln11_fu_817_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten40_reg_203 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten54_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten54_reg_181 <= add_ln8_reg_828;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten54_reg_181 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_259 <= select_ln21_reg_924;
            elsif (((icmp_ln8_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_259 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                r_0_reg_192 <= select_ln34_1_reg_838;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_192 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_sum_2_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_880_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                w_sum_2_reg_281 <= grp_fu_304_p2;
            elsif (((icmp_ln8_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_2_reg_281 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_270 <= select_ln26_6_reg_899;
            elsif (((icmp_ln8_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_270 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_248 <= select_ln26_2_reg_889;
            elsif (((icmp_ln8_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_248 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln18_reg_884 <= add_ln18_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_828 <= add_ln8_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ch_reg_939 <= ch_fu_715_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_0_addr_reg_860 <= zext_ln34_2_fu_429_p1(2 - 1 downto 0);
                conv_out_1_addr_reg_865 <= zext_ln34_2_fu_429_p1(2 - 1 downto 0);
                conv_out_2_addr_reg_870 <= zext_ln34_2_fu_429_p1(2 - 1 downto 0);
                icmp_ln11_reg_833 <= icmp_ln11_fu_339_p2;
                select_ln34_1_reg_838 <= select_ln34_1_fu_353_p3;
                select_ln34_2_reg_845 <= select_ln34_2_fu_403_p3;
                select_ln34_3_reg_852 <= select_ln34_3_fu_411_p3;
                    zext_ln18_reg_875(1 downto 0) <= zext_ln18_fu_436_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_880 <= icmp_ln18_fu_458_p2;
                icmp_ln18_reg_880_pp0_iter1_reg <= icmp_ln18_reg_880;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_458_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln21_reg_924 <= select_ln21_fu_699_p3;
                select_ln26_2_reg_889 <= select_ln26_2_fu_490_p3;
                select_ln26_6_reg_899 <= select_ln26_6_fu_590_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln26_5_reg_894 <= select_ln26_5_fu_582_p3;
                trunc_ln26_2_reg_919 <= trunc_ln26_2_fu_689_p1;
            end if;
        end if;
    end process;
    zext_ln18_reg_875(6 downto 2) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_fu_321_p2, ap_CS_fsm_state2, icmp_ln18_fu_458_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln18_fu_458_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln18_fu_458_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln11_1_fu_811_p2 <= std_logic_vector(unsigned(indvar_flatten40_reg_203) + unsigned(ap_const_lv4_1));
    add_ln18_fu_464_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten29_phi_fu_241_p4) + unsigned(ap_const_lv5_1));
    add_ln21_fu_693_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_263_p4));
    add_ln26_1_fu_445_p2 <= std_logic_vector(unsigned(select_ln34_3_reg_852) + unsigned(ap_phi_mux_wc_0_phi_fu_274_p4));
    add_ln26_2_fu_524_p2 <= std_logic_vector(unsigned(select_ln34_1_reg_838) + unsigned(wr_fu_470_p2));
    add_ln26_3_fu_602_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_598_p1) + unsigned(sext_ln26_fu_520_p1));
    add_ln26_4_fu_620_p2 <= std_logic_vector(unsigned(select_ln34_3_reg_852) + unsigned(wc_fu_570_p2));
    add_ln26_5_fu_651_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_647_p1) + unsigned(sext_ln26_1_fu_616_p1));
    add_ln26_6_fu_679_p2 <= std_logic_vector(unsigned(zext_ln18_reg_875) + unsigned(sub_ln26_1_fu_673_p2));
    add_ln26_fu_440_p2 <= std_logic_vector(unsigned(select_ln34_1_reg_838) + unsigned(ap_phi_mux_wr_0_phi_fu_252_p4));
    add_ln34_fu_423_p2 <= std_logic_vector(unsigned(zext_ln34_1_fu_419_p1) + unsigned(zext_ln34_fu_369_p1));
    add_ln8_fu_327_p2 <= std_logic_vector(unsigned(indvar_flatten54_reg_181) + unsigned(ap_const_lv4_1));
    and_ln26_fu_564_p2 <= (xor_ln26_fu_552_p2 and icmp_ln24_fu_558_p2);
    and_ln33_fu_789_p2 <= (tmp_5_fu_315_p2 and or_ln33_fu_783_p2);
    and_ln34_fu_385_p2 <= (xor_ln34_fu_373_p2 and icmp_ln14_fu_379_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_458_p2)
    begin
        if ((icmp_ln18_fu_458_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln8_fu_321_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_phi_fu_297_p4_assign_proc : process(ch_0_reg_293, icmp_ln18_reg_880, ap_CS_fsm_pp0_stage0, ch_reg_939, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ch_0_phi_fu_297_p4 <= ch_reg_939;
        else 
            ap_phi_mux_ch_0_phi_fu_297_p4 <= ch_0_reg_293;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten29_phi_fu_241_p4_assign_proc : process(indvar_flatten29_reg_237, icmp_ln18_reg_880, ap_CS_fsm_pp0_stage0, add_ln18_reg_884, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten29_phi_fu_241_p4 <= add_ln18_reg_884;
        else 
            ap_phi_mux_indvar_flatten29_phi_fu_241_p4 <= indvar_flatten29_reg_237;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_263_p4_assign_proc : process(indvar_flatten_reg_259, icmp_ln18_reg_880, ap_CS_fsm_pp0_stage0, select_ln21_reg_924, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_263_p4 <= select_ln21_reg_924;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_263_p4 <= indvar_flatten_reg_259;
        end if; 
    end process;

    ap_phi_mux_w_sum_2_phi_fu_285_p4 <= w_sum_2_reg_281;

    ap_phi_mux_wc_0_phi_fu_274_p4_assign_proc : process(wc_0_reg_270, icmp_ln18_reg_880, ap_CS_fsm_pp0_stage0, select_ln26_6_reg_899, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wc_0_phi_fu_274_p4 <= select_ln26_6_reg_899;
        else 
            ap_phi_mux_wc_0_phi_fu_274_p4 <= wc_0_reg_270;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_252_p4_assign_proc : process(wr_0_reg_248, icmp_ln18_reg_880, ap_CS_fsm_pp0_stage0, select_ln26_2_reg_889, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_880 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wr_0_phi_fu_252_p4 <= select_ln26_2_reg_889;
        else 
            ap_phi_mux_wr_0_phi_fu_252_p4 <= wr_0_reg_248;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_321_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln33_fu_753_p1 <= grp_fu_304_p2;
    c_fu_391_p2 <= std_logic_vector(unsigned(select_ln34_fu_345_p3) + unsigned(ap_const_lv2_1));
    ch_fu_715_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln26_5_reg_894));
    conv_out_0_address0 <= conv_out_0_addr_reg_860;

    conv_out_0_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_0_d0 <= w_sum_1_fu_795_p3;

    conv_out_0_we0_assign_proc : process(select_ln34_2_reg_845, ap_CS_fsm_state8)
    begin
        if (((select_ln34_2_reg_845 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            conv_out_0_we0 <= ap_const_logic_1;
        else 
            conv_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_address0 <= conv_out_1_addr_reg_865;

    conv_out_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_d0 <= w_sum_1_fu_795_p3;

    conv_out_1_we0_assign_proc : process(select_ln34_2_reg_845, ap_CS_fsm_state8)
    begin
        if (((select_ln34_2_reg_845 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            conv_out_1_we0 <= ap_const_logic_1;
        else 
            conv_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_2_address0 <= conv_out_2_addr_reg_870;

    conv_out_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_out_2_ce0 <= ap_const_logic_1;
        else 
            conv_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_2_d0 <= w_sum_1_fu_795_p3;

    conv_out_2_we0_assign_proc : process(select_ln34_2_reg_845, ap_CS_fsm_state8)
    begin
        if ((not((select_ln34_2_reg_845 = ap_const_lv2_0)) and not((select_ln34_2_reg_845 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            conv_out_2_we0 <= ap_const_logic_1;
        else 
            conv_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_address0 <= zext_ln26_5_fu_684_p1(6 - 1 downto 0);

    conv_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_ce0 <= ap_const_logic_1;
        else 
            conv_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_5_fu_738_p2 <= (icmp_ln7_fu_720_p2 or icmp_ln7_1_fu_725_p2);
    f_fu_806_p2 <= std_logic_vector(unsigned(select_ln34_2_reg_845) + unsigned(ap_const_lv2_1));

    grp_fu_304_p0_assign_proc : process(w_sum_2_reg_281, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state7, ap_block_pp0_stage0, ap_phi_mux_w_sum_2_phi_fu_285_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_304_p0 <= w_sum_2_reg_281;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_304_p0 <= ap_phi_mux_w_sum_2_phi_fu_285_p4;
        else 
            grp_fu_304_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_304_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, grp_fu_309_p2, ap_enable_reg_pp0_iter1, merge_i_fu_744_p3, ap_CS_fsm_state7, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_304_p1 <= merge_i_fu_744_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_304_p1 <= grp_fu_309_p2;
        else 
            grp_fu_304_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_309_p1 <= 
        input_1_q0 when (trunc_ln26_2_reg_919(0) = '1') else 
        input_0_q0;
    icmp_ln11_fu_339_p2 <= "1" when (indvar_flatten40_reg_203 = ap_const_lv4_6) else "0";
    icmp_ln14_fu_379_p2 <= "1" when (f_0_reg_226 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_458_p2 <= "1" when (ap_phi_mux_indvar_flatten29_phi_fu_241_p4 = ap_const_lv5_12) else "0";
    icmp_ln21_fu_476_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_263_p4 = ap_const_lv4_6) else "0";
    icmp_ln24_fu_558_p2 <= "1" when (ap_phi_mux_ch_0_phi_fu_297_p4 = ap_const_lv2_2) else "0";
    icmp_ln33_1_fu_777_p2 <= "1" when (trunc_ln33_fu_767_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_771_p2 <= "0" when (tmp_fu_757_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_1_fu_725_p2 <= "1" when (select_ln34_2_reg_845 = ap_const_lv2_1) else "0";
    icmp_ln7_fu_720_p2 <= "1" when (select_ln34_2_reg_845 = ap_const_lv2_0) else "0";
    icmp_ln8_fu_321_p2 <= "1" when (indvar_flatten54_reg_181 = ap_const_lv4_C) else "0";
    input_0_address0 <= zext_ln26_3_fu_641_p1(4 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= zext_ln26_3_fu_641_p1(4 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    merge_i_fu_744_p3 <= 
        select_ln7_i_fu_730_p3 when (empty_5_fu_738_p2(0) = '1') else 
        ap_const_lv32_3FC00000;
    or_ln26_fu_576_p2 <= (icmp_ln21_fu_476_p2 or and_ln26_fu_564_p2);
    or_ln33_fu_783_p2 <= (icmp_ln33_fu_771_p2 or icmp_ln33_1_fu_777_p2);
    or_ln34_fu_397_p2 <= (icmp_ln11_fu_339_p2 or and_ln34_fu_385_p2);
    p_shl_cast_fu_665_p3 <= (trunc_ln26_1_fu_661_p1 & ap_const_lv2_0);
    r_fu_333_p2 <= std_logic_vector(unsigned(r_0_reg_192) + unsigned(ap_const_lv2_1));
    select_ln11_fu_817_p3 <= 
        ap_const_lv4_1 when (icmp_ln11_reg_833(0) = '1') else 
        add_ln11_1_fu_811_p2;
    select_ln21_fu_699_p3 <= 
        ap_const_lv4_1 when (icmp_ln21_fu_476_p2(0) = '1') else 
        add_ln21_fu_693_p2;
    select_ln26_1_fu_482_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_476_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_274_p4;
    select_ln26_2_fu_490_p3 <= 
        wr_fu_470_p2 when (icmp_ln21_fu_476_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_252_p4;
    select_ln26_3_fu_529_p3 <= 
        add_ln26_2_fu_524_p2 when (icmp_ln21_fu_476_p2(0) = '1') else 
        add_ln26_fu_440_p2;
    select_ln26_4_fu_544_p3 <= 
        tmp_7_fu_537_p3 when (icmp_ln21_fu_476_p2(0) = '1') else 
        tmp_3_fu_450_p3;
    select_ln26_5_fu_582_p3 <= 
        ap_const_lv2_0 when (or_ln26_fu_576_p2(0) = '1') else 
        ap_phi_mux_ch_0_phi_fu_297_p4;
    select_ln26_6_fu_590_p3 <= 
        wc_fu_570_p2 when (and_ln26_fu_564_p2(0) = '1') else 
        select_ln26_1_fu_482_p3;
    select_ln26_7_fu_633_p3 <= 
        tmp_10_fu_625_p3 when (and_ln26_fu_564_p2(0) = '1') else 
        select_ln26_4_fu_544_p3;
    select_ln34_1_fu_353_p3 <= 
        r_fu_333_p2 when (icmp_ln11_fu_339_p2(0) = '1') else 
        r_0_reg_192;
    select_ln34_2_fu_403_p3 <= 
        ap_const_lv2_0 when (or_ln34_fu_397_p2(0) = '1') else 
        f_0_reg_226;
    select_ln34_3_fu_411_p3 <= 
        c_fu_391_p2 when (and_ln34_fu_385_p2(0) = '1') else 
        select_ln34_fu_345_p3;
    select_ln34_fu_345_p3 <= 
        ap_const_lv2_0 when (icmp_ln11_fu_339_p2(0) = '1') else 
        c_0_reg_215;
    select_ln7_i_fu_730_p3 <= 
        ap_const_lv32_40000000 when (icmp_ln7_1_fu_725_p2(0) = '1') else 
        ap_const_lv32_3F800000;
        sext_ln26_1_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_608_p3),64));

        sext_ln26_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_514_p2),6));

    sub_ln26_1_fu_673_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_665_p3) - unsigned(trunc_ln26_fu_657_p1));
    sub_ln26_fu_514_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_510_p1) - unsigned(zext_ln26_fu_498_p1));
    tmp_10_fu_625_p3 <= (select_ln26_3_fu_529_p3 & add_ln26_4_fu_620_p2);
    tmp_2_fu_361_p3 <= (select_ln34_1_fu_353_p3 & ap_const_lv1_0);
    tmp_3_fu_450_p3 <= (add_ln26_fu_440_p2 & add_ln26_1_fu_445_p2);
    tmp_6_fu_502_p3 <= (select_ln26_2_fu_490_p3 & ap_const_lv2_0);
    tmp_7_fu_537_p3 <= (add_ln26_2_fu_524_p2 & select_ln34_3_reg_852);
    tmp_9_fu_608_p3 <= (add_ln26_3_fu_602_p2 & ap_const_lv1_0);
    tmp_fu_757_p4 <= bitcast_ln33_fu_753_p1(30 downto 23);
    trunc_ln26_1_fu_661_p1 <= add_ln26_5_fu_651_p2(5 - 1 downto 0);
    trunc_ln26_2_fu_689_p1 <= select_ln26_5_fu_582_p3(1 - 1 downto 0);
    trunc_ln26_fu_657_p1 <= add_ln26_5_fu_651_p2(7 - 1 downto 0);
    trunc_ln33_fu_767_p1 <= bitcast_ln33_fu_753_p1(23 - 1 downto 0);
    w_sum_1_fu_795_p3 <= 
        grp_fu_304_p2 when (and_ln33_fu_789_p2(0) = '1') else 
        ap_const_lv32_0;
    wc_fu_570_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln26_1_fu_482_p3));
    wr_fu_470_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_wr_0_phi_fu_252_p4));
    xor_ln26_fu_552_p2 <= (icmp_ln21_fu_476_p2 xor ap_const_lv1_1);
    xor_ln34_fu_373_p2 <= (icmp_ln11_fu_339_p2 xor ap_const_lv1_1);
    zext_ln18_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_2_fu_403_p3),7));
    zext_ln26_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_502_p3),5));
    zext_ln26_2_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_6_fu_590_p3),6));
    zext_ln26_3_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_7_fu_633_p3),64));
    zext_ln26_4_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_5_fu_582_p3),64));
    zext_ln26_5_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_679_p2),64));
    zext_ln26_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_2_fu_490_p3),5));
    zext_ln34_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_3_fu_411_p3),4));
    zext_ln34_2_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_423_p2),64));
    zext_ln34_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_361_p3),4));
end behav;
