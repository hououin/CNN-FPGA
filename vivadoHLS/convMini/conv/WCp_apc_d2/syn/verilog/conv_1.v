// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=289,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=528,HLS_SYN_LUT=1089,HLS_VERSION=2020_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_0_address1,
        input_0_ce1,
        input_0_q1,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_1_address1,
        input_1_ce1,
        input_1_q1,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_2_address1,
        input_2_ce1,
        input_2_q1,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_3_address1,
        input_3_ce1,
        input_3_q1,
        conv_out_0_address0,
        conv_out_0_ce0,
        conv_out_0_we0,
        conv_out_0_d0,
        conv_out_1_address0,
        conv_out_1_ce0,
        conv_out_1_we0,
        conv_out_1_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_pp0_stage1 = 6'd8;
parameter    ap_ST_fsm_state8 = 6'd16;
parameter    ap_ST_fsm_state9 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [2:0] input_0_address1;
output   input_0_ce1;
input  [31:0] input_0_q1;
output  [2:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [2:0] input_1_address1;
output   input_1_ce1;
input  [31:0] input_1_q1;
output  [2:0] input_2_address0;
output   input_2_ce0;
input  [31:0] input_2_q0;
output  [2:0] input_2_address1;
output   input_2_ce1;
input  [31:0] input_2_q1;
output  [2:0] input_3_address0;
output   input_3_ce0;
input  [31:0] input_3_q0;
output  [2:0] input_3_address1;
output   input_3_ce1;
input  [31:0] input_3_q1;
output  [2:0] conv_out_0_address0;
output   conv_out_0_ce0;
output   conv_out_0_we0;
output  [31:0] conv_out_0_d0;
output  [2:0] conv_out_1_address0;
output   conv_out_1_ce0;
output   conv_out_1_we0;
output  [31:0] conv_out_1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_0_ce1;
reg input_1_ce0;
reg input_1_ce1;
reg input_2_ce0;
reg input_2_ce1;
reg input_3_ce0;
reg input_3_ce1;
reg conv_out_0_ce0;
reg conv_out_0_we0;
reg conv_out_1_ce0;
reg conv_out_1_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [4:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
reg   [3:0] indvar_flatten_reg_314;
reg   [1:0] wr_0_reg_325;
reg   [31:0] w_sum_1_reg_336;
reg   [1:0] wc_0_reg_348;
wire   [31:0] grp_fu_365_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln18_reg_859;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln18_reg_859_pp0_iter1_reg;
wire   [0:0] icmp_ln8_fu_382_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln8_fu_388_p2;
reg   [3:0] add_ln8_reg_811;
wire   [0:0] icmp_ln11_fu_400_p2;
reg   [0:0] icmp_ln11_reg_816;
wire   [1:0] select_ln34_1_fu_414_p3;
reg   [1:0] select_ln34_1_reg_821;
wire   [1:0] select_ln34_2_fu_480_p3;
reg   [1:0] select_ln34_2_reg_827;
wire   [0:0] select_ln34_3_fu_492_p3;
reg   [0:0] select_ln34_3_reg_834;
wire   [1:0] select_ln11_fu_500_p3;
reg   [1:0] select_ln11_reg_838;
wire   [5:0] zext_ln34_1_fu_508_p1;
reg   [5:0] zext_ln34_1_reg_844;
reg   [2:0] conv_out_0_addr_reg_849;
reg   [2:0] conv_out_1_addr_reg_854;
wire   [0:0] icmp_ln18_fu_528_p2;
wire   [3:0] add_ln18_fu_534_p2;
reg   [3:0] add_ln18_reg_863;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln26_fu_552_p3;
reg   [1:0] select_ln26_reg_868;
wire   [1:0] select_ln26_1_fu_560_p3;
reg   [1:0] select_ln26_1_reg_874;
wire   [31:0] tmp_7_fu_670_p6;
reg   [31:0] conv_weights_1_load_reg_939;
wire   [31:0] tmp_8_fu_685_p6;
reg   [31:0] tmp_8_reg_944;
wire   [1:0] wc_fu_699_p2;
reg   [1:0] wc_reg_949;
wire   [31:0] grp_fu_359_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] merge_i_fu_728_p3;
wire    ap_CS_fsm_state8;
wire   [1:0] f_fu_789_p2;
wire    ap_CS_fsm_state9;
wire   [3:0] select_ln11_1_fu_800_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] indvar_flatten29_reg_258;
reg   [1:0] r_0_reg_269;
reg   [3:0] indvar_flatten15_reg_280;
reg   [1:0] c_0_reg_292;
reg   [1:0] f_0_reg_303;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_318_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_329_p4;
reg   [31:0] ap_phi_mux_w_sum_1_phi_fu_340_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_352_p4;
wire  signed [63:0] sext_ln34_fu_522_p1;
wire   [63:0] zext_ln26_2_fu_607_p1;
wire   [63:0] tmp_9_fu_621_p3;
wire   [63:0] zext_ln26_4_fu_660_p1;
wire   [31:0] w_sum_2_fu_779_p3;
reg   [31:0] grp_fu_359_p0;
reg   [31:0] grp_fu_359_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] grp_fu_365_p0;
reg   [31:0] grp_fu_365_p1;
wire   [1:0] r_fu_394_p2;
wire   [3:0] tmp_1_fu_426_p3;
wire   [3:0] zext_ln34_fu_422_p1;
wire   [0:0] trunc_ln34_fu_446_p1;
wire   [0:0] xor_ln34_fu_440_p2;
wire   [0:0] icmp_ln14_fu_456_p2;
wire   [1:0] select_ln34_fu_406_p3;
wire   [0:0] and_ln34_1_fu_462_p2;
wire   [0:0] or_ln34_fu_474_p2;
wire   [1:0] c_fu_468_p2;
wire   [0:0] trunc_ln34_1_fu_488_p1;
wire   [0:0] and_ln34_fu_450_p2;
wire   [3:0] zext_ln34_2_fu_512_p1;
wire   [3:0] sub_ln34_fu_434_p2;
wire   [3:0] add_ln34_fu_516_p2;
wire   [0:0] icmp_ln21_fu_546_p2;
wire   [1:0] wr_fu_540_p2;
wire   [3:0] tmp_2_fu_572_p3;
wire   [4:0] zext_ln26_1_fu_580_p1;
wire   [4:0] zext_ln26_fu_568_p1;
wire   [4:0] sub_ln26_fu_584_p2;
wire   [1:0] add_ln26_fu_594_p2;
wire   [2:0] tmp_5_fu_599_p3;
wire   [2:0] or_ln26_fu_615_p2;
wire  signed [5:0] sext_ln26_fu_590_p1;
wire   [5:0] zext_ln26_3_fu_633_p1;
wire   [5:0] add_ln26_2_fu_637_p2;
wire   [5:0] shl_ln26_fu_643_p2;
wire   [5:0] sub_ln26_1_fu_649_p2;
wire   [5:0] add_ln26_3_fu_655_p2;
wire   [1:0] add_ln26_1_fu_666_p2;
wire   [0:0] icmp_ln7_1_fu_709_p2;
wire   [0:0] icmp_ln7_fu_704_p2;
wire   [0:0] empty_5_fu_722_p2;
wire   [31:0] select_ln7_i_fu_714_p3;
wire   [31:0] bitcast_ln33_fu_737_p1;
wire   [7:0] tmp_fu_741_p4;
wire   [22:0] trunc_ln33_fu_751_p1;
wire   [0:0] icmp_ln33_1_fu_761_p2;
wire   [0:0] icmp_ln33_fu_755_p2;
wire   [0:0] or_ln33_fu_767_p2;
wire   [0:0] tmp_4_fu_371_p2;
wire   [0:0] and_ln33_fu_773_p2;
wire   [3:0] add_ln11_1_fu_794_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

conv_1_conv_weighbkb #(
    .DataWidth( 32 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_1_conv_weighcud #(
    .DataWidth( 32 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_1_fadd_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_dEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_359_p0),
    .din1(grp_fu_359_p1),
    .ce(1'b1),
    .dout(grp_fu_359_p2)
);

conv_1_fmul_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_eOg_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_365_p0),
    .din1(grp_fu_365_p1),
    .ce(1'b1),
    .dout(grp_fu_365_p2)
);

conv_1_fcmp_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_fYi_U3(
    .din0(grp_fu_359_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_4_fu_371_p2)
);

conv_1_mux_42_32_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
conv_1_mux_42_32_g8j_U4(
    .din0(input_0_q0),
    .din1(input_1_q0),
    .din2(input_2_q0),
    .din3(input_3_q0),
    .din4(add_ln26_1_fu_666_p2),
    .dout(tmp_7_fu_670_p6)
);

conv_1_mux_42_32_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
conv_1_mux_42_32_g8j_U5(
    .din0(input_0_q1),
    .din1(input_1_q1),
    .din2(input_2_q1),
    .din3(input_3_q1),
    .din4(add_ln26_1_fu_666_p2),
    .dout(tmp_8_fu_685_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_382_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_382_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_0_reg_292 <= select_ln11_reg_838;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_292 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        f_0_reg_303 <= f_fu_789_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_303 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten15_reg_280 <= select_ln11_1_fu_800_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten15_reg_280 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten29_reg_258 <= add_ln8_reg_811;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten29_reg_258 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_314 <= add_ln18_reg_863;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_382_p2 == 1'd0))) begin
        indvar_flatten_reg_314 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_0_reg_269 <= select_ln34_1_reg_821;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_269 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_859_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_sum_1_reg_336 <= grp_fu_359_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_382_p2 == 1'd0))) begin
        w_sum_1_reg_336 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wc_0_reg_348 <= wc_reg_949;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_382_p2 == 1'd0))) begin
        wc_0_reg_348 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_0_reg_325 <= select_ln26_1_reg_874;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_382_p2 == 1'd0))) begin
        wr_0_reg_325 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln18_reg_863 <= add_ln18_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_811 <= add_ln8_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_382_p2 == 1'd0))) begin
        conv_out_0_addr_reg_849 <= sext_ln34_fu_522_p1;
        conv_out_1_addr_reg_854 <= sext_ln34_fu_522_p1;
        icmp_ln11_reg_816 <= icmp_ln11_fu_400_p2;
        select_ln11_reg_838 <= select_ln11_fu_500_p3;
        select_ln34_1_reg_821 <= select_ln34_1_fu_414_p3;
        select_ln34_2_reg_827 <= select_ln34_2_fu_480_p3;
        select_ln34_3_reg_834 <= select_ln34_3_fu_492_p3;
        zext_ln34_1_reg_844[1 : 0] <= zext_ln34_1_fu_508_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln18_reg_859 == 1'd0))) begin
        conv_weights_1_load_reg_939 <= conv_weights_1_q0;
        tmp_8_reg_944 <= tmp_8_fu_685_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln18_reg_859 <= icmp_ln18_fu_528_p2;
        icmp_ln18_reg_859_pp0_iter1_reg <= icmp_ln18_reg_859;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_fu_528_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln26_1_reg_874 <= select_ln26_1_fu_560_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_fu_528_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln26_reg_868 <= select_ln26_fu_552_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln18_reg_859 == 1'd0))) begin
        wc_reg_949 <= wc_fu_699_p2;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_528_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_382_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_859 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_318_p4 = add_ln18_reg_863;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_318_p4 = indvar_flatten_reg_314;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_859_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_w_sum_1_phi_fu_340_p4 = grp_fu_359_p2;
    end else begin
        ap_phi_mux_w_sum_1_phi_fu_340_p4 = w_sum_1_reg_336;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_859 == 1'd0))) begin
        ap_phi_mux_wc_0_phi_fu_352_p4 = wc_reg_949;
    end else begin
        ap_phi_mux_wc_0_phi_fu_352_p4 = wc_0_reg_348;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_859 == 1'd0))) begin
        ap_phi_mux_wr_0_phi_fu_329_p4 = select_ln26_1_reg_874;
    end else begin
        ap_phi_mux_wr_0_phi_fu_329_p4 = wr_0_reg_325;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_382_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_out_0_ce0 = 1'b1;
    end else begin
        conv_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (select_ln34_3_reg_834 == 1'd0))) begin
        conv_out_0_we0 = 1'b1;
    end else begin
        conv_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_out_1_ce0 = 1'b1;
    end else begin
        conv_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (select_ln34_3_reg_834 == 1'd1))) begin
        conv_out_1_we0 = 1'b1;
    end else begin
        conv_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_359_p0 = w_sum_1_reg_336;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_359_p0 = grp_fu_359_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_359_p0 = ap_phi_mux_w_sum_1_phi_fu_340_p4;
    end else begin
        grp_fu_359_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_359_p1 = merge_i_fu_728_p3;
    end else if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_359_p1 = grp_fu_365_p2;
    end else begin
        grp_fu_359_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_365_p0 = conv_weights_1_load_reg_939;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_365_p0 = conv_weights_0_q0;
    end else begin
        grp_fu_365_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_365_p1 = tmp_8_reg_944;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_365_p1 = tmp_7_fu_670_p6;
    end else begin
        grp_fu_365_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_0_ce1 = 1'b1;
    end else begin
        input_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_1_ce1 = 1'b1;
    end else begin
        input_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_2_ce1 = 1'b1;
    end else begin
        input_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_3_ce1 = 1'b1;
    end else begin
        input_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_382_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_528_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_528_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_794_p2 = (indvar_flatten15_reg_280 + 4'd1);

assign add_ln18_fu_534_p2 = (ap_phi_mux_indvar_flatten_phi_fu_318_p4 + 4'd1);

assign add_ln26_1_fu_666_p2 = (select_ln26_reg_868 + select_ln11_reg_838);

assign add_ln26_2_fu_637_p2 = ($signed(sext_ln26_fu_590_p1) + $signed(zext_ln26_3_fu_633_p1));

assign add_ln26_3_fu_655_p2 = (sub_ln26_1_fu_649_p2 + zext_ln34_1_reg_844);

assign add_ln26_fu_594_p2 = (select_ln26_1_fu_560_p3 + select_ln34_1_reg_821);

assign add_ln34_fu_516_p2 = (zext_ln34_2_fu_512_p1 + sub_ln34_fu_434_p2);

assign add_ln8_fu_388_p2 = (indvar_flatten29_reg_258 + 4'd1);

assign and_ln33_fu_773_p2 = (tmp_4_fu_371_p2 & or_ln33_fu_767_p2);

assign and_ln34_1_fu_462_p2 = (xor_ln34_fu_440_p2 & icmp_ln14_fu_456_p2);

assign and_ln34_fu_450_p2 = (xor_ln34_fu_440_p2 & trunc_ln34_fu_446_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln33_fu_737_p1 = grp_fu_359_p2;

assign c_fu_468_p2 = (2'd1 + select_ln34_fu_406_p3);

assign conv_out_0_address0 = conv_out_0_addr_reg_849;

assign conv_out_0_d0 = w_sum_2_fu_779_p3;

assign conv_out_1_address0 = conv_out_1_addr_reg_854;

assign conv_out_1_d0 = w_sum_2_fu_779_p3;

assign conv_weights_0_address0 = zext_ln26_4_fu_660_p1;

assign conv_weights_1_address0 = zext_ln26_4_fu_660_p1;

assign empty_5_fu_722_p2 = (icmp_ln7_fu_704_p2 | icmp_ln7_1_fu_709_p2);

assign f_fu_789_p2 = (select_ln34_2_reg_827 + 2'd1);

assign icmp_ln11_fu_400_p2 = ((indvar_flatten15_reg_280 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_456_p2 = ((f_0_reg_303 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_528_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_318_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_546_p2 = ((ap_phi_mux_wc_0_phi_fu_352_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_761_p2 = ((trunc_ln33_fu_751_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_755_p2 = ((tmp_fu_741_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_709_p2 = ((select_ln34_2_reg_827 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_704_p2 = ((select_ln34_2_reg_827 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_382_p2 = ((indvar_flatten29_reg_258 == 4'd12) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln26_2_fu_607_p1;

assign input_0_address1 = tmp_9_fu_621_p3;

assign input_1_address0 = zext_ln26_2_fu_607_p1;

assign input_1_address1 = tmp_9_fu_621_p3;

assign input_2_address0 = zext_ln26_2_fu_607_p1;

assign input_2_address1 = tmp_9_fu_621_p3;

assign input_3_address0 = zext_ln26_2_fu_607_p1;

assign input_3_address1 = tmp_9_fu_621_p3;

assign merge_i_fu_728_p3 = ((empty_5_fu_722_p2[0:0] === 1'b1) ? select_ln7_i_fu_714_p3 : 32'd1069547520);

assign or_ln26_fu_615_p2 = (tmp_5_fu_599_p3 | 3'd1);

assign or_ln33_fu_767_p2 = (icmp_ln33_fu_755_p2 | icmp_ln33_1_fu_761_p2);

assign or_ln34_fu_474_p2 = (icmp_ln11_fu_400_p2 | and_ln34_1_fu_462_p2);

assign r_fu_394_p2 = (2'd1 + r_0_reg_269);

assign select_ln11_1_fu_800_p3 = ((icmp_ln11_reg_816[0:0] === 1'b1) ? 4'd1 : add_ln11_1_fu_794_p2);

assign select_ln11_fu_500_p3 = ((and_ln34_1_fu_462_p2[0:0] === 1'b1) ? c_fu_468_p2 : select_ln34_fu_406_p3);

assign select_ln26_1_fu_560_p3 = ((icmp_ln21_fu_546_p2[0:0] === 1'b1) ? wr_fu_540_p2 : ap_phi_mux_wr_0_phi_fu_329_p4);

assign select_ln26_fu_552_p3 = ((icmp_ln21_fu_546_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_352_p4);

assign select_ln34_1_fu_414_p3 = ((icmp_ln11_fu_400_p2[0:0] === 1'b1) ? r_fu_394_p2 : r_0_reg_269);

assign select_ln34_2_fu_480_p3 = ((or_ln34_fu_474_p2[0:0] === 1'b1) ? 2'd0 : f_0_reg_303);

assign select_ln34_3_fu_492_p3 = ((and_ln34_1_fu_462_p2[0:0] === 1'b1) ? trunc_ln34_1_fu_488_p1 : and_ln34_fu_450_p2);

assign select_ln34_fu_406_p3 = ((icmp_ln11_fu_400_p2[0:0] === 1'b1) ? 2'd0 : c_0_reg_292);

assign select_ln7_i_fu_714_p3 = ((icmp_ln7_1_fu_709_p2[0:0] === 1'b1) ? 32'd1073741824 : 32'd1065353216);

assign sext_ln26_fu_590_p1 = $signed(sub_ln26_fu_584_p2);

assign sext_ln34_fu_522_p1 = $signed(add_ln34_fu_516_p2);

assign shl_ln26_fu_643_p2 = add_ln26_2_fu_637_p2 << 6'd2;

assign sub_ln26_1_fu_649_p2 = (shl_ln26_fu_643_p2 - add_ln26_2_fu_637_p2);

assign sub_ln26_fu_584_p2 = (zext_ln26_1_fu_580_p1 - zext_ln26_fu_568_p1);

assign sub_ln34_fu_434_p2 = (tmp_1_fu_426_p3 - zext_ln34_fu_422_p1);

assign tmp_1_fu_426_p3 = {{select_ln34_1_fu_414_p3}, {2'd0}};

assign tmp_2_fu_572_p3 = {{select_ln26_1_fu_560_p3}, {2'd0}};

assign tmp_5_fu_599_p3 = {{add_ln26_fu_594_p2}, {1'd0}};

assign tmp_9_fu_621_p3 = {{61'd0}, {or_ln26_fu_615_p2}};

assign tmp_fu_741_p4 = {{bitcast_ln33_fu_737_p1[30:23]}};

assign trunc_ln33_fu_751_p1 = bitcast_ln33_fu_737_p1[22:0];

assign trunc_ln34_1_fu_488_p1 = c_fu_468_p2[0:0];

assign trunc_ln34_fu_446_p1 = c_0_reg_292[0:0];

assign w_sum_2_fu_779_p3 = ((and_ln33_fu_773_p2[0:0] === 1'b1) ? grp_fu_359_p2 : 32'd0);

assign wc_fu_699_p2 = (2'd1 + select_ln26_reg_868);

assign wr_fu_540_p2 = (2'd1 + ap_phi_mux_wr_0_phi_fu_329_p4);

assign xor_ln34_fu_440_p2 = (icmp_ln11_fu_400_p2 ^ 1'd1);

assign zext_ln26_1_fu_580_p1 = tmp_2_fu_572_p3;

assign zext_ln26_2_fu_607_p1 = tmp_5_fu_599_p3;

assign zext_ln26_3_fu_633_p1 = select_ln26_fu_552_p3;

assign zext_ln26_4_fu_660_p1 = add_ln26_3_fu_655_p2;

assign zext_ln26_fu_568_p1 = select_ln26_1_fu_560_p3;

assign zext_ln34_1_fu_508_p1 = select_ln34_2_fu_480_p3;

assign zext_ln34_2_fu_512_p1 = select_ln34_2_fu_480_p3;

assign zext_ln34_fu_422_p1 = select_ln34_1_fu_414_p3;

always @ (posedge ap_clk) begin
    zext_ln34_1_reg_844[5:2] <= 4'b0000;
end

endmodule //conv_1
