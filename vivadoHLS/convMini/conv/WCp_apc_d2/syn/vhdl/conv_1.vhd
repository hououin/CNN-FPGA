-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_0_ce1 : OUT STD_LOGIC;
    input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_1_ce1 : OUT STD_LOGIC;
    input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_ce1 : OUT STD_LOGIC;
    input_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_3_ce0 : OUT STD_LOGIC;
    input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_3_ce1 : OUT STD_LOGIC;
    input_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_out_0_ce0 : OUT STD_LOGIC;
    conv_out_0_we0 : OUT STD_LOGIC;
    conv_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_out_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_out_1_ce0 : OUT STD_LOGIC;
    conv_out_1_we0 : OUT STD_LOGIC;
    conv_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=289,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=528,HLS_SYN_LUT=1089,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv61_0 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3FC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_314 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_0_reg_325 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_348 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_859 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln18_reg_859_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_388_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln8_reg_811 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln11_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_816 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_1_fu_414_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_821 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_2_fu_480_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_2_reg_827 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_3_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_3_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_fu_500_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln11_reg_838 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_1_fu_508_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln34_1_reg_844 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_out_0_addr_reg_849 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_out_1_addr_reg_854 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln18_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_fu_534_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_reg_863 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln26_fu_552_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_reg_868 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_1_fu_560_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_1_reg_874 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_670_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_load_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_685_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_fu_699_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_949 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal merge_i_fu_728_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal f_fu_789_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal select_ln11_1_fu_800_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten29_reg_258 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_reg_269 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten15_reg_280 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_292 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_0_reg_303 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_318_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_329_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_1_phi_fu_340_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_352_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln34_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_2_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_621_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_4_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_sum_2_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_359_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_365_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_394_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_426_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_fu_422_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln34_fu_446_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_406_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln34_1_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_468_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln34_1_fu_488_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_2_fu_512_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln34_fu_434_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_516_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln21_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_540_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_572_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_1_fu_580_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_568_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_584_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_594_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_599_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln26_fu_615_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln26_fu_590_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_3_fu_633_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_2_fu_637_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln26_fu_643_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_1_fu_649_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_3_fu_655_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_1_fu_666_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln7_1_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_5_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_i_fu_714_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln33_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_741_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_751_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_1_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_1_fu_794_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1_fadd_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_mux_42_32_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_1_conv_weighbkb
    generic map (
        DataWidth => 32,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_1_conv_weighcud
    generic map (
        DataWidth => 32,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_1_fadd_32ns_dEe_U1 : component conv_1_fadd_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_359_p0,
        din1 => grp_fu_359_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_359_p2);

    conv_1_fmul_32ns_eOg_U2 : component conv_1_fmul_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_365_p0,
        din1 => grp_fu_365_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p2);

    conv_1_fcmp_32ns_fYi_U3 : component conv_1_fcmp_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_359_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_4_fu_371_p2);

    conv_1_mux_42_32_g8j_U4 : component conv_1_mux_42_32_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => input_0_q0,
        din1 => input_1_q0,
        din2 => input_2_q0,
        din3 => input_3_q0,
        din4 => add_ln26_1_fu_666_p2,
        dout => tmp_7_fu_670_p6);

    conv_1_mux_42_32_g8j_U5 : component conv_1_mux_42_32_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => input_0_q1,
        din1 => input_1_q1,
        din2 => input_2_q1,
        din3 => input_3_q1,
        din4 => add_ln26_1_fu_666_p2,
        dout => tmp_8_fu_685_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_382_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_382_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c_0_reg_292 <= select_ln11_reg_838;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_292 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                f_0_reg_303 <= f_fu_789_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_303 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten15_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten15_reg_280 <= select_ln11_1_fu_800_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten15_reg_280 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten29_reg_258 <= add_ln8_reg_811;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten29_reg_258 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_859 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_314 <= add_ln18_reg_863;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_382_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_314 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_0_reg_269 <= select_ln34_1_reg_821;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_269 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_859_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_sum_1_reg_336 <= grp_fu_359_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_382_p2 = ap_const_lv1_0))) then 
                w_sum_1_reg_336 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_859 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_348 <= wc_reg_949;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_382_p2 = ap_const_lv1_0))) then 
                wc_0_reg_348 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_859 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_325 <= select_ln26_1_reg_874;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_382_p2 = ap_const_lv1_0))) then 
                wr_0_reg_325 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln18_reg_863 <= add_ln18_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_811 <= add_ln8_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_382_p2 = ap_const_lv1_0))) then
                conv_out_0_addr_reg_849 <= sext_ln34_fu_522_p1(3 - 1 downto 0);
                conv_out_1_addr_reg_854 <= sext_ln34_fu_522_p1(3 - 1 downto 0);
                icmp_ln11_reg_816 <= icmp_ln11_fu_400_p2;
                select_ln11_reg_838 <= select_ln11_fu_500_p3;
                select_ln34_1_reg_821 <= select_ln34_1_fu_414_p3;
                select_ln34_2_reg_827 <= select_ln34_2_fu_480_p3;
                select_ln34_3_reg_834 <= select_ln34_3_fu_492_p3;
                    zext_ln34_1_reg_844(1 downto 0) <= zext_ln34_1_fu_508_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln18_reg_859 = ap_const_lv1_0))) then
                conv_weights_1_load_reg_939 <= conv_weights_1_q0;
                tmp_8_reg_944 <= tmp_8_fu_685_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_859 <= icmp_ln18_fu_528_p2;
                icmp_ln18_reg_859_pp0_iter1_reg <= icmp_ln18_reg_859;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_fu_528_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln26_1_reg_874 <= select_ln26_1_fu_560_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_fu_528_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln26_reg_868 <= select_ln26_fu_552_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln18_reg_859 = ap_const_lv1_0))) then
                wc_reg_949 <= wc_fu_699_p2;
            end if;
        end if;
    end process;
    zext_ln34_1_reg_844(5 downto 2) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln8_fu_382_p2, ap_CS_fsm_state2, icmp_ln18_fu_528_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_382_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_528_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_528_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln11_1_fu_794_p2 <= std_logic_vector(unsigned(indvar_flatten15_reg_280) + unsigned(ap_const_lv4_1));
    add_ln18_fu_534_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_318_p4) + unsigned(ap_const_lv4_1));
    add_ln26_1_fu_666_p2 <= std_logic_vector(unsigned(select_ln26_reg_868) + unsigned(select_ln11_reg_838));
    add_ln26_2_fu_637_p2 <= std_logic_vector(signed(sext_ln26_fu_590_p1) + signed(zext_ln26_3_fu_633_p1));
    add_ln26_3_fu_655_p2 <= std_logic_vector(unsigned(sub_ln26_1_fu_649_p2) + unsigned(zext_ln34_1_reg_844));
    add_ln26_fu_594_p2 <= std_logic_vector(unsigned(select_ln26_1_fu_560_p3) + unsigned(select_ln34_1_reg_821));
    add_ln34_fu_516_p2 <= std_logic_vector(unsigned(zext_ln34_2_fu_512_p1) + unsigned(sub_ln34_fu_434_p2));
    add_ln8_fu_388_p2 <= std_logic_vector(unsigned(indvar_flatten29_reg_258) + unsigned(ap_const_lv4_1));
    and_ln33_fu_773_p2 <= (tmp_4_fu_371_p2 and or_ln33_fu_767_p2);
    and_ln34_1_fu_462_p2 <= (xor_ln34_fu_440_p2 and icmp_ln14_fu_456_p2);
    and_ln34_fu_450_p2 <= (xor_ln34_fu_440_p2 and trunc_ln34_fu_446_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_528_p2)
    begin
        if ((icmp_ln18_fu_528_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln8_fu_382_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_382_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_318_p4_assign_proc : process(indvar_flatten_reg_314, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln18_reg_859, add_ln18_reg_863, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_859 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_318_p4 <= add_ln18_reg_863;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_318_p4 <= indvar_flatten_reg_314;
        end if; 
    end process;


    ap_phi_mux_w_sum_1_phi_fu_340_p4_assign_proc : process(w_sum_1_reg_336, ap_CS_fsm_pp0_stage0, icmp_ln18_reg_859_pp0_iter1_reg, grp_fu_359_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_859_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_w_sum_1_phi_fu_340_p4 <= grp_fu_359_p2;
        else 
            ap_phi_mux_w_sum_1_phi_fu_340_p4 <= w_sum_1_reg_336;
        end if; 
    end process;


    ap_phi_mux_wc_0_phi_fu_352_p4_assign_proc : process(wc_0_reg_348, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln18_reg_859, wc_reg_949, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_859 = ap_const_lv1_0))) then 
            ap_phi_mux_wc_0_phi_fu_352_p4 <= wc_reg_949;
        else 
            ap_phi_mux_wc_0_phi_fu_352_p4 <= wc_0_reg_348;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_329_p4_assign_proc : process(wr_0_reg_325, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln18_reg_859, select_ln26_1_reg_874, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_859 = ap_const_lv1_0))) then 
            ap_phi_mux_wr_0_phi_fu_329_p4 <= select_ln26_1_reg_874;
        else 
            ap_phi_mux_wr_0_phi_fu_329_p4 <= wr_0_reg_325;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_382_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_382_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln33_fu_737_p1 <= grp_fu_359_p2;
    c_fu_468_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln34_fu_406_p3));
    conv_out_0_address0 <= conv_out_0_addr_reg_849;

    conv_out_0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_0_d0 <= w_sum_2_fu_779_p3;

    conv_out_0_we0_assign_proc : process(select_ln34_3_reg_834, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (select_ln34_3_reg_834 = ap_const_lv1_0))) then 
            conv_out_0_we0 <= ap_const_logic_1;
        else 
            conv_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_address0 <= conv_out_1_addr_reg_854;

    conv_out_1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_d0 <= w_sum_2_fu_779_p3;

    conv_out_1_we0_assign_proc : process(select_ln34_3_reg_834, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (select_ln34_3_reg_834 = ap_const_lv1_1))) then 
            conv_out_1_we0 <= ap_const_logic_1;
        else 
            conv_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln26_4_fu_660_p1(5 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln26_4_fu_660_p1(5 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_5_fu_722_p2 <= (icmp_ln7_fu_704_p2 or icmp_ln7_1_fu_709_p2);
    f_fu_789_p2 <= std_logic_vector(unsigned(select_ln34_2_reg_827) + unsigned(ap_const_lv2_1));

    grp_fu_359_p0_assign_proc : process(w_sum_1_reg_336, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, grp_fu_359_p2, ap_CS_fsm_state8, ap_block_pp0_stage0, ap_phi_mux_w_sum_1_phi_fu_340_p4, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_359_p0 <= w_sum_1_reg_336;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_359_p0 <= grp_fu_359_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_359_p0 <= ap_phi_mux_w_sum_1_phi_fu_340_p4;
        else 
            grp_fu_359_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_359_p1_assign_proc : process(grp_fu_365_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, merge_i_fu_728_p3, ap_CS_fsm_state8, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_359_p1 <= merge_i_fu_728_p3;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_359_p1 <= grp_fu_365_p2;
        else 
            grp_fu_359_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_365_p0_assign_proc : process(conv_weights_0_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, conv_weights_1_load_reg_939, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_365_p0 <= conv_weights_1_load_reg_939;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_365_p0 <= conv_weights_0_q0;
        else 
            grp_fu_365_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_365_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_7_fu_670_p6, tmp_8_reg_944, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_365_p1 <= tmp_8_reg_944;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_365_p1 <= tmp_7_fu_670_p6;
        else 
            grp_fu_365_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_400_p2 <= "1" when (indvar_flatten15_reg_280 = ap_const_lv4_6) else "0";
    icmp_ln14_fu_456_p2 <= "1" when (f_0_reg_303 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_528_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_318_p4 = ap_const_lv4_9) else "0";
    icmp_ln21_fu_546_p2 <= "1" when (ap_phi_mux_wc_0_phi_fu_352_p4 = ap_const_lv2_3) else "0";
    icmp_ln33_1_fu_761_p2 <= "1" when (trunc_ln33_fu_751_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_755_p2 <= "0" when (tmp_fu_741_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_1_fu_709_p2 <= "1" when (select_ln34_2_reg_827 = ap_const_lv2_1) else "0";
    icmp_ln7_fu_704_p2 <= "1" when (select_ln34_2_reg_827 = ap_const_lv2_0) else "0";
    icmp_ln8_fu_382_p2 <= "1" when (indvar_flatten29_reg_258 = ap_const_lv4_C) else "0";
    input_0_address0 <= zext_ln26_2_fu_607_p1(3 - 1 downto 0);
    input_0_address1 <= tmp_9_fu_621_p3(3 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_ce1 <= ap_const_logic_1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= zext_ln26_2_fu_607_p1(3 - 1 downto 0);
    input_1_address1 <= tmp_9_fu_621_p3(3 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_ce1 <= ap_const_logic_1;
        else 
            input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_address0 <= zext_ln26_2_fu_607_p1(3 - 1 downto 0);
    input_2_address1 <= tmp_9_fu_621_p3(3 - 1 downto 0);

    input_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_ce1 <= ap_const_logic_1;
        else 
            input_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_address0 <= zext_ln26_2_fu_607_p1(3 - 1 downto 0);
    input_3_address1 <= tmp_9_fu_621_p3(3 - 1 downto 0);

    input_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_3_ce0 <= ap_const_logic_1;
        else 
            input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_3_ce1 <= ap_const_logic_1;
        else 
            input_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    merge_i_fu_728_p3 <= 
        select_ln7_i_fu_714_p3 when (empty_5_fu_722_p2(0) = '1') else 
        ap_const_lv32_3FC00000;
    or_ln26_fu_615_p2 <= (tmp_5_fu_599_p3 or ap_const_lv3_1);
    or_ln33_fu_767_p2 <= (icmp_ln33_fu_755_p2 or icmp_ln33_1_fu_761_p2);
    or_ln34_fu_474_p2 <= (icmp_ln11_fu_400_p2 or and_ln34_1_fu_462_p2);
    r_fu_394_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(r_0_reg_269));
    select_ln11_1_fu_800_p3 <= 
        ap_const_lv4_1 when (icmp_ln11_reg_816(0) = '1') else 
        add_ln11_1_fu_794_p2;
    select_ln11_fu_500_p3 <= 
        c_fu_468_p2 when (and_ln34_1_fu_462_p2(0) = '1') else 
        select_ln34_fu_406_p3;
    select_ln26_1_fu_560_p3 <= 
        wr_fu_540_p2 when (icmp_ln21_fu_546_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_329_p4;
    select_ln26_fu_552_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_546_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_352_p4;
    select_ln34_1_fu_414_p3 <= 
        r_fu_394_p2 when (icmp_ln11_fu_400_p2(0) = '1') else 
        r_0_reg_269;
    select_ln34_2_fu_480_p3 <= 
        ap_const_lv2_0 when (or_ln34_fu_474_p2(0) = '1') else 
        f_0_reg_303;
    select_ln34_3_fu_492_p3 <= 
        trunc_ln34_1_fu_488_p1 when (and_ln34_1_fu_462_p2(0) = '1') else 
        and_ln34_fu_450_p2;
    select_ln34_fu_406_p3 <= 
        ap_const_lv2_0 when (icmp_ln11_fu_400_p2(0) = '1') else 
        c_0_reg_292;
    select_ln7_i_fu_714_p3 <= 
        ap_const_lv32_40000000 when (icmp_ln7_1_fu_709_p2(0) = '1') else 
        ap_const_lv32_3F800000;
        sext_ln26_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_584_p2),6));

        sext_ln34_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_fu_516_p2),64));

    shl_ln26_fu_643_p2 <= std_logic_vector(shift_left(unsigned(add_ln26_2_fu_637_p2),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    sub_ln26_1_fu_649_p2 <= std_logic_vector(unsigned(shl_ln26_fu_643_p2) - unsigned(add_ln26_2_fu_637_p2));
    sub_ln26_fu_584_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_580_p1) - unsigned(zext_ln26_fu_568_p1));
    sub_ln34_fu_434_p2 <= std_logic_vector(unsigned(tmp_1_fu_426_p3) - unsigned(zext_ln34_fu_422_p1));
    tmp_1_fu_426_p3 <= (select_ln34_1_fu_414_p3 & ap_const_lv2_0);
    tmp_2_fu_572_p3 <= (select_ln26_1_fu_560_p3 & ap_const_lv2_0);
    tmp_5_fu_599_p3 <= (add_ln26_fu_594_p2 & ap_const_lv1_0);
    tmp_9_fu_621_p3 <= (ap_const_lv61_0 & or_ln26_fu_615_p2);
    tmp_fu_741_p4 <= bitcast_ln33_fu_737_p1(30 downto 23);
    trunc_ln33_fu_751_p1 <= bitcast_ln33_fu_737_p1(23 - 1 downto 0);
    trunc_ln34_1_fu_488_p1 <= c_fu_468_p2(1 - 1 downto 0);
    trunc_ln34_fu_446_p1 <= c_0_reg_292(1 - 1 downto 0);
    w_sum_2_fu_779_p3 <= 
        grp_fu_359_p2 when (and_ln33_fu_773_p2(0) = '1') else 
        ap_const_lv32_0;
    wc_fu_699_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln26_reg_868));
    wr_fu_540_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_wr_0_phi_fu_329_p4));
    xor_ln34_fu_440_p2 <= (icmp_ln11_fu_400_p2 xor ap_const_lv1_1);
    zext_ln26_1_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_572_p3),5));
    zext_ln26_2_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_599_p3),64));
    zext_ln26_3_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_fu_552_p3),6));
    zext_ln26_4_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_655_p2),64));
    zext_ln26_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_1_fu_560_p3),5));
    zext_ln34_1_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_2_fu_480_p3),6));
    zext_ln34_2_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_2_fu_480_p3),4));
    zext_ln34_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_fu_414_p3),4));
end behav;
