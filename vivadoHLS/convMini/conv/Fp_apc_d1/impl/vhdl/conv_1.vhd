-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_0_ce1 : OUT STD_LOGIC;
    input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_1_ce1 : OUT STD_LOGIC;
    input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_ce1 : OUT STD_LOGIC;
    input_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_3_ce0 : OUT STD_LOGIC;
    input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_3_ce1 : OUT STD_LOGIC;
    input_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_out_0_ce0 : OUT STD_LOGIC;
    conv_out_0_we0 : OUT STD_LOGIC;
    conv_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_out_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_out_1_ce0 : OUT STD_LOGIC;
    conv_out_1_we0 : OUT STD_LOGIC;
    conv_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=56,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=32,HLS_SYN_FF=3624,HLS_SYN_LUT=4136,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_3E37EC08 : STD_LOGIC_VECTOR (31 downto 0) := "00111110001101111110110000001000";
    constant ap_const_lv32_3E615C94 : STD_LOGIC_VECTOR (31 downto 0) := "00111110011000010101110010010100";
    constant ap_const_lv32_BE8504C1 : STD_LOGIC_VECTOR (31 downto 0) := "10111110100001010000010011000001";
    constant ap_const_lv32_3EA32B74 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101000110010101101110100";
    constant ap_const_lv32_3E78A41C : STD_LOGIC_VECTOR (31 downto 0) := "00111110011110001010010000011100";
    constant ap_const_lv32_3EA68536 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101001101000010100110110";
    constant ap_const_lv32_3E76DEDC : STD_LOGIC_VECTOR (31 downto 0) := "00111110011101101101111011011100";
    constant ap_const_lv32_BEA91F9C : STD_LOGIC_VECTOR (31 downto 0) := "10111110101010010001111110011100";
    constant ap_const_lv32_3DCF278C : STD_LOGIC_VECTOR (31 downto 0) := "00111101110011110010011110001100";
    constant ap_const_lv32_BDF4E43C : STD_LOGIC_VECTOR (31 downto 0) := "10111101111101001110010000111100";
    constant ap_const_lv32_BEADDDDD : STD_LOGIC_VECTOR (31 downto 0) := "10111110101011011101110111011101";
    constant ap_const_lv32_BCF74B10 : STD_LOGIC_VECTOR (31 downto 0) := "10111100111101110100101100010000";
    constant ap_const_lv32_3E9AB23C : STD_LOGIC_VECTOR (31 downto 0) := "00111110100110101011001000111100";
    constant ap_const_lv32_3E81FB5A : STD_LOGIC_VECTOR (31 downto 0) := "00111110100000011111101101011010";
    constant ap_const_lv32_BE7C412C : STD_LOGIC_VECTOR (31 downto 0) := "10111110011111000100000100101100";
    constant ap_const_lv32_3EAD4EA2 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101011010100111010100010";
    constant ap_const_lv32_3D45AE78 : STD_LOGIC_VECTOR (31 downto 0) := "00111101010001011010111001111000";
    constant ap_const_lv32_BD36F7F9 : STD_LOGIC_VECTOR (31 downto 0) := "10111101001101101111011111111001";
    constant ap_const_lv32_3DEE96C8 : STD_LOGIC_VECTOR (31 downto 0) := "00111101111011101001011011001000";
    constant ap_const_lv32_BE49AB01 : STD_LOGIC_VECTOR (31 downto 0) := "10111110010010011010101100000001";
    constant ap_const_lv32_BEA81C5A : STD_LOGIC_VECTOR (31 downto 0) := "10111110101010000001110001011010";
    constant ap_const_lv32_BDD75160 : STD_LOGIC_VECTOR (31 downto 0) := "10111101110101110101000101100000";
    constant ap_const_lv32_3E6F20E0 : STD_LOGIC_VECTOR (31 downto 0) := "00111110011011110010000011100000";
    constant ap_const_lv32_3E094662 : STD_LOGIC_VECTOR (31 downto 0) := "00111110000010010100011001100010";
    constant ap_const_lv32_BE503D78 : STD_LOGIC_VECTOR (31 downto 0) := "10111110010100000011110101111000";
    constant ap_const_lv32_3E870E8E : STD_LOGIC_VECTOR (31 downto 0) := "00111110100001110000111010001110";
    constant ap_const_lv32_BE92C033 : STD_LOGIC_VECTOR (31 downto 0) := "10111110100100101100000000110011";
    constant ap_const_lv32_3E443EB0 : STD_LOGIC_VECTOR (31 downto 0) := "00111110010001000011111010110000";
    constant ap_const_lv32_3EA6D054 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101001101101000001010100";
    constant ap_const_lv32_3CFA86CF : STD_LOGIC_VECTOR (31 downto 0) := "00111100111110101000011011001111";
    constant ap_const_lv32_BD2349A1 : STD_LOGIC_VECTOR (31 downto 0) := "10111101001000110100100110100001";
    constant ap_const_lv32_3E5C9714 : STD_LOGIC_VECTOR (31 downto 0) := "00111110010111001001011100010100";
    constant ap_const_lv32_BE1F86FE : STD_LOGIC_VECTOR (31 downto 0) := "10111110000111111000011011111110";
    constant ap_const_lv32_BDB7A18F : STD_LOGIC_VECTOR (31 downto 0) := "10111101101101111010000110001111";
    constant ap_const_lv32_BD4B8821 : STD_LOGIC_VECTOR (31 downto 0) := "10111101010010111000100000100001";
    constant ap_const_lv32_3E3AE340 : STD_LOGIC_VECTOR (31 downto 0) := "00111110001110101110001101000000";
    constant ap_const_lv32_BE000ADE : STD_LOGIC_VECTOR (31 downto 0) := "10111110000000000000101011011110";
    constant ap_const_lv32_BE15221C : STD_LOGIC_VECTOR (31 downto 0) := "10111110000101010010001000011100";
    constant ap_const_lv32_3EB70B26 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101101110000101100100110";
    constant ap_const_lv32_3CA2BDD0 : STD_LOGIC_VECTOR (31 downto 0) := "00111100101000101011110111010000";
    constant ap_const_lv32_BDFA0B84 : STD_LOGIC_VECTOR (31 downto 0) := "10111101111110100000101110000100";
    constant ap_const_lv32_3E306810 : STD_LOGIC_VECTOR (31 downto 0) := "00111110001100000110100000010000";
    constant ap_const_lv32_3EBA2314 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101110100010001100010100";
    constant ap_const_lv32_BE4BA407 : STD_LOGIC_VECTOR (31 downto 0) := "10111110010010111010010000000111";
    constant ap_const_lv32_BEB2F335 : STD_LOGIC_VECTOR (31 downto 0) := "10111110101100101111001100110101";
    constant ap_const_lv32_BDE167B8 : STD_LOGIC_VECTOR (31 downto 0) := "10111101111000010110011110111000";
    constant ap_const_lv32_3E4AE890 : STD_LOGIC_VECTOR (31 downto 0) := "00111110010010101110100010010000";
    constant ap_const_lv32_BD0BACAF : STD_LOGIC_VECTOR (31 downto 0) := "10111101000010111010110010101111";
    constant ap_const_lv32_BE24587C : STD_LOGIC_VECTOR (31 downto 0) := "10111110001001000101100001111100";
    constant ap_const_lv32_3E852084 : STD_LOGIC_VECTOR (31 downto 0) := "00111110100001010010000010000100";
    constant ap_const_lv32_BDF4226D : STD_LOGIC_VECTOR (31 downto 0) := "10111101111101000010001001101101";
    constant ap_const_lv32_BE90719E : STD_LOGIC_VECTOR (31 downto 0) := "10111110100100000111000110011110";
    constant ap_const_lv32_BEB7FFC9 : STD_LOGIC_VECTOR (31 downto 0) := "10111110101101111111111111001001";
    constant ap_const_lv32_BE543CC7 : STD_LOGIC_VECTOR (31 downto 0) := "10111110010101000011110011000111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3FC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten45_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_reg_467 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_478 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_489 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_0_reg_500 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln8_reg_1291 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state22_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_552_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_reg_1291_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln8_reg_1291_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln8_reg_1291_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln8_reg_1291_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal icmp_ln8_reg_1291_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal icmp_ln8_reg_1291_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_709_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln8_reg_1295 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln26_19_fu_735_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_19_reg_1300 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln26_fu_743_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_reg_1305_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_reg_1305_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_reg_1305_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_reg_1305_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_reg_1305_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_reg_1305_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_777_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_reg_1315 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_reg_1315_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_reg_1315_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_reg_1315_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_reg_1315_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_reg_1315_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_reg_1315_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_fu_785_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_1340 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_1340_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_1340_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_1340_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_1340_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_1340_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_1340_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_2_fu_851_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_2_reg_1387 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_3_fu_879_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_3_reg_1392 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln11_fu_893_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln11_reg_1397 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_938_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_950_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_962_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_974_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_986_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_998_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_0_1_reg_1512 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1047_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1059_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1527 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1527_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_0_1_reg_1532 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_0_1_reg_1532_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_0_1_reg_1532_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1071_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1083_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1547 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1547_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1547_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1547_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_0_1_reg_1552 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_0_1_reg_1552_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_0_1_reg_1552_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_0_1_reg_1552_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_0_1_reg_1552_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1095_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1107_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_1119_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_reg_1567 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_0_1_1_reg_1572 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1124_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1136_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_1587 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_1587_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_1587_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_1_reg_1592 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_1_reg_1592_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_1_reg_1592_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1148_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1160_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_1607 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_1607_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_1607_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_1607_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_1607_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_1_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_1_reg_1612_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_1_reg_1612_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_1_reg_1612_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_1_reg_1612_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_1172_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1184_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_reg_1627 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_1_reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_1637 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_1637_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_1637_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_1_reg_1642 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_1_reg_1642_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_1_reg_1642_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_1647 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_1647_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_1647_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_1647_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_1647_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_1_reg_1652 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_1_reg_1652_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_1_reg_1652_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_1_reg_1652_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_1_reg_1652_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1196_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten45_phi_fu_460_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_471_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_482_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_493_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_f_0_phi_fu_504_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln26_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_1_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_2_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln26_3_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_4_fu_1017_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln26_5_fu_1039_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_2_fu_1233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_sum_1_fu_1281_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_511_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_523_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_529_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_535_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_541_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_541_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_552_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_557_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_561_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_715_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln14_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_18_fu_727_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln26_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_765_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_793_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln26_3_fu_809_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln_fu_815_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_2_fu_837_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln26_1_fu_831_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_20_fu_843_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln26_2_fu_865_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln26_1_fu_859_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_21_fu_871_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln11_fu_887_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_901_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln26_fu_916_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln26_1_fu_922_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_fu_1010_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln26_4_fu_1025_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln26_2_fu_1031_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_1211_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_fu_1208_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_1_fu_1224_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln34_fu_1218_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_1227_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln33_fu_1239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_1243_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_1253_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_1_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_1269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_1275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1_fadd_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_mux_32_32_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_fadd_32ns_bkb_U1 : component conv_1_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_511_p0,
        din1 => grp_fu_511_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_511_p2);

    conv_1_fadd_32ns_bkb_U2 : component conv_1_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_517_p0,
        din1 => grp_fu_517_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_517_p2);

    conv_1_fadd_32ns_bkb_U3 : component conv_1_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_523_p0,
        din1 => grp_fu_523_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_523_p2);

    conv_1_fadd_32ns_bkb_U4 : component conv_1_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_529_p0,
        din1 => grp_fu_529_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_529_p2);

    conv_1_fadd_32ns_bkb_U5 : component conv_1_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_535_p0,
        din1 => grp_fu_535_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_535_p2);

    conv_1_fadd_32ns_bkb_U6 : component conv_1_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_541_p0,
        din1 => grp_fu_541_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_541_p2);

    conv_1_fadd_32ns_bkb_U7 : component conv_1_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_541_p2,
        din1 => tmp_21_fu_1196_p5,
        ce => ap_const_logic_1,
        dout => grp_fu_547_p2);

    conv_1_fmul_32ns_cud_U8 : component conv_1_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_552_p0,
        din1 => grp_fu_552_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_552_p2);

    conv_1_fmul_32ns_cud_U9 : component conv_1_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_557_p0,
        din1 => grp_fu_557_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_557_p2);

    conv_1_fmul_32ns_cud_U10 : component conv_1_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_561_p0,
        din1 => grp_fu_561_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_561_p2);

    conv_1_fmul_32ns_cud_U11 : component conv_1_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_565_p0,
        din1 => grp_fu_565_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_565_p2);

    conv_1_fmul_32ns_cud_U12 : component conv_1_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_569_p0,
        din1 => grp_fu_569_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_569_p2);

    conv_1_fmul_32ns_cud_U13 : component conv_1_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_573_p0,
        din1 => grp_fu_573_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_573_p2);

    conv_1_fcmp_32ns_dEe_U14 : component conv_1_fcmp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_547_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_23_fu_577_p2);

    conv_1_mux_32_32_eOg_U15 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3E37EC08,
        din1 => ap_const_lv32_3E615C94,
        din2 => ap_const_lv32_BE8504C1,
        din3 => select_ln34_reg_1315,
        dout => tmp_fu_938_p5);

    conv_1_mux_32_32_eOg_U16 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3EA32B74,
        din1 => ap_const_lv32_3E78A41C,
        din2 => ap_const_lv32_3EA68536,
        din3 => select_ln34_reg_1315,
        dout => tmp_4_fu_950_p5);

    conv_1_mux_32_32_eOg_U17 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3E76DEDC,
        din1 => ap_const_lv32_BEA91F9C,
        din2 => ap_const_lv32_3DCF278C,
        din3 => select_ln34_reg_1315,
        dout => tmp_9_fu_962_p5);

    conv_1_mux_32_32_eOg_U18 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BDF4E43C,
        din1 => ap_const_lv32_BEADDDDD,
        din2 => ap_const_lv32_BCF74B10,
        din3 => select_ln34_reg_1315,
        dout => tmp_10_fu_974_p5);

    conv_1_mux_32_32_eOg_U19 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3E9AB23C,
        din1 => ap_const_lv32_3E81FB5A,
        din2 => ap_const_lv32_BE7C412C,
        din3 => select_ln34_reg_1315,
        dout => tmp_15_fu_986_p5);

    conv_1_mux_32_32_eOg_U20 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3EAD4EA2,
        din1 => ap_const_lv32_3D45AE78,
        din2 => ap_const_lv32_BD36F7F9,
        din3 => select_ln34_reg_1315,
        dout => tmp_16_fu_998_p5);

    conv_1_mux_32_32_eOg_U21 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3DEE96C8,
        din1 => ap_const_lv32_BE49AB01,
        din2 => ap_const_lv32_BEA81C5A,
        din3 => select_ln34_reg_1315,
        dout => tmp_5_fu_1047_p5);

    conv_1_mux_32_32_eOg_U22 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BDD75160,
        din1 => ap_const_lv32_3E6F20E0,
        din2 => ap_const_lv32_3E094662,
        din3 => select_ln34_reg_1315,
        dout => tmp_6_fu_1059_p5);

    conv_1_mux_32_32_eOg_U23 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BE503D78,
        din1 => ap_const_lv32_3E870E8E,
        din2 => ap_const_lv32_BE92C033,
        din3 => select_ln34_reg_1315,
        dout => tmp_11_fu_1071_p5);

    conv_1_mux_32_32_eOg_U24 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3E443EB0,
        din1 => ap_const_lv32_3EA6D054,
        din2 => ap_const_lv32_3CFA86CF,
        din3 => select_ln34_reg_1315,
        dout => tmp_12_fu_1083_p5);

    conv_1_mux_32_32_eOg_U25 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BD2349A1,
        din1 => ap_const_lv32_3E5C9714,
        din2 => ap_const_lv32_BE1F86FE,
        din3 => select_ln34_reg_1315,
        dout => tmp_17_fu_1095_p5);

    conv_1_mux_32_32_eOg_U26 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BDB7A18F,
        din1 => ap_const_lv32_BD4B8821,
        din2 => ap_const_lv32_3E3AE340,
        din3 => select_ln34_reg_1315,
        dout => tmp_18_fu_1107_p5);

    conv_1_mux_32_32_eOg_U27 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BE000ADE,
        din1 => ap_const_lv32_BE15221C,
        din2 => ap_const_lv32_3EB70B26,
        din3 => select_ln34_reg_1315,
        dout => tmp_7_fu_1124_p5);

    conv_1_mux_32_32_eOg_U28 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3CA2BDD0,
        din1 => ap_const_lv32_BDFA0B84,
        din2 => ap_const_lv32_3E306810,
        din3 => select_ln34_reg_1315,
        dout => tmp_8_fu_1136_p5);

    conv_1_mux_32_32_eOg_U29 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3EBA2314,
        din1 => ap_const_lv32_BE4BA407,
        din2 => ap_const_lv32_BEB2F335,
        din3 => select_ln34_reg_1315,
        dout => tmp_13_fu_1148_p5);

    conv_1_mux_32_32_eOg_U30 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BDE167B8,
        din1 => ap_const_lv32_3E4AE890,
        din2 => ap_const_lv32_BD0BACAF,
        din3 => select_ln34_reg_1315,
        dout => tmp_14_fu_1160_p5);

    conv_1_mux_32_32_eOg_U31 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BE24587C,
        din1 => ap_const_lv32_3E852084,
        din2 => ap_const_lv32_BDF4226D,
        din3 => select_ln34_reg_1315,
        dout => tmp_19_fu_1172_p5);

    conv_1_mux_32_32_eOg_U32 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BE90719E,
        din1 => ap_const_lv32_BEB7FFC9,
        din2 => ap_const_lv32_BE543CC7,
        din3 => select_ln34_reg_1315,
        dout => tmp_20_fu_1184_p5);

    conv_1_mux_32_32_eOg_U33 : component conv_1_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_40000000,
        din2 => ap_const_lv32_3FC00000,
        din3 => select_ln34_reg_1315_pp0_iter6_reg,
        dout => tmp_21_fu_1196_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then 
                c_0_reg_489 <= select_ln34_1_reg_1340;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_489 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then 
                f_0_reg_500 <= f_reg_1567;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_500 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten45_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then 
                indvar_flatten45_reg_456 <= add_ln8_reg_1295;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten45_reg_456 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then 
                indvar_flatten_reg_478 <= select_ln11_reg_1397;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_478 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then 
                r_0_reg_467 <= select_ln26_19_reg_1300;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_467 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln8_reg_1295 <= add_ln8_fu_709_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then
                f_reg_1567 <= f_fu_1119_p2;
                tmp_1_0_0_1_reg_1512 <= grp_fu_557_p2;
                tmp_1_1_0_1_reg_1532 <= grp_fu_565_p2;
                tmp_1_1_reg_1527 <= grp_fu_561_p2;
                tmp_1_2_0_1_reg_1552 <= grp_fu_573_p2;
                tmp_1_2_reg_1547 <= grp_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln8_reg_1291 <= icmp_ln8_fu_703_p2;
                icmp_ln8_reg_1291_pp0_iter1_reg <= icmp_ln8_reg_1291;
                icmp_ln8_reg_1291_pp0_iter2_reg <= icmp_ln8_reg_1291_pp0_iter1_reg;
                icmp_ln8_reg_1291_pp0_iter3_reg <= icmp_ln8_reg_1291_pp0_iter2_reg;
                icmp_ln8_reg_1291_pp0_iter4_reg <= icmp_ln8_reg_1291_pp0_iter3_reg;
                icmp_ln8_reg_1291_pp0_iter5_reg <= icmp_ln8_reg_1291_pp0_iter4_reg;
                icmp_ln8_reg_1291_pp0_iter6_reg <= icmp_ln8_reg_1291_pp0_iter5_reg;
                select_ln34_1_reg_1340_pp0_iter1_reg <= select_ln34_1_reg_1340;
                select_ln34_1_reg_1340_pp0_iter2_reg <= select_ln34_1_reg_1340_pp0_iter1_reg;
                select_ln34_1_reg_1340_pp0_iter3_reg <= select_ln34_1_reg_1340_pp0_iter2_reg;
                select_ln34_1_reg_1340_pp0_iter4_reg <= select_ln34_1_reg_1340_pp0_iter3_reg;
                select_ln34_1_reg_1340_pp0_iter5_reg <= select_ln34_1_reg_1340_pp0_iter4_reg;
                select_ln34_1_reg_1340_pp0_iter6_reg <= select_ln34_1_reg_1340_pp0_iter5_reg;
                select_ln34_reg_1315_pp0_iter1_reg <= select_ln34_reg_1315;
                select_ln34_reg_1315_pp0_iter2_reg <= select_ln34_reg_1315_pp0_iter1_reg;
                select_ln34_reg_1315_pp0_iter3_reg <= select_ln34_reg_1315_pp0_iter2_reg;
                select_ln34_reg_1315_pp0_iter4_reg <= select_ln34_reg_1315_pp0_iter3_reg;
                select_ln34_reg_1315_pp0_iter5_reg <= select_ln34_reg_1315_pp0_iter4_reg;
                select_ln34_reg_1315_pp0_iter6_reg <= select_ln34_reg_1315_pp0_iter5_reg;
                tmp_1_1_1_1_reg_1592_pp0_iter2_reg <= tmp_1_1_1_1_reg_1592;
                tmp_1_1_1_1_reg_1592_pp0_iter3_reg <= tmp_1_1_1_1_reg_1592_pp0_iter2_reg;
                tmp_1_1_1_reg_1587_pp0_iter2_reg <= tmp_1_1_1_reg_1587;
                tmp_1_1_1_reg_1587_pp0_iter3_reg <= tmp_1_1_1_reg_1587_pp0_iter2_reg;
                tmp_1_2_1_1_reg_1612_pp0_iter2_reg <= tmp_1_2_1_1_reg_1612;
                tmp_1_2_1_1_reg_1612_pp0_iter3_reg <= tmp_1_2_1_1_reg_1612_pp0_iter2_reg;
                tmp_1_2_1_1_reg_1612_pp0_iter4_reg <= tmp_1_2_1_1_reg_1612_pp0_iter3_reg;
                tmp_1_2_1_1_reg_1612_pp0_iter5_reg <= tmp_1_2_1_1_reg_1612_pp0_iter4_reg;
                tmp_1_2_1_reg_1607_pp0_iter2_reg <= tmp_1_2_1_reg_1607;
                tmp_1_2_1_reg_1607_pp0_iter3_reg <= tmp_1_2_1_reg_1607_pp0_iter2_reg;
                tmp_1_2_1_reg_1607_pp0_iter4_reg <= tmp_1_2_1_reg_1607_pp0_iter3_reg;
                tmp_1_2_1_reg_1607_pp0_iter5_reg <= tmp_1_2_1_reg_1607_pp0_iter4_reg;
                trunc_ln26_reg_1305_pp0_iter1_reg <= trunc_ln26_reg_1305;
                trunc_ln26_reg_1305_pp0_iter2_reg <= trunc_ln26_reg_1305_pp0_iter1_reg;
                trunc_ln26_reg_1305_pp0_iter3_reg <= trunc_ln26_reg_1305_pp0_iter2_reg;
                trunc_ln26_reg_1305_pp0_iter4_reg <= trunc_ln26_reg_1305_pp0_iter3_reg;
                trunc_ln26_reg_1305_pp0_iter5_reg <= trunc_ln26_reg_1305_pp0_iter4_reg;
                trunc_ln26_reg_1305_pp0_iter6_reg <= trunc_ln26_reg_1305_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_1291 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1291 = ap_const_lv1_0)))) then
                reg_661 <= grp_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_fu_703_p2 = ap_const_lv1_0))) then
                select_ln11_reg_1397 <= select_ln11_fu_893_p3;
                select_ln26_19_reg_1300 <= select_ln26_19_fu_735_p3;
                select_ln34_1_reg_1340 <= select_ln34_1_fu_785_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_fu_703_p2 = ap_const_lv1_0))) then
                select_ln34_2_reg_1387 <= select_ln34_2_fu_851_p3;
                select_ln34_3_reg_1392 <= select_ln34_3_fu_879_p3;
                select_ln34_reg_1315 <= select_ln34_fu_777_p3;
                trunc_ln26_reg_1305 <= trunc_ln26_fu_743_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then
                tmp_1_0_1_1_reg_1572 <= grp_fu_557_p2;
                tmp_1_1_1_1_reg_1592 <= grp_fu_565_p2;
                tmp_1_1_1_reg_1587 <= grp_fu_561_p2;
                tmp_1_2_1_1_reg_1612 <= grp_fu_573_p2;
                tmp_1_2_1_reg_1607 <= grp_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln8_reg_1291_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_1_0_2_1_reg_1632 <= grp_fu_557_p2;
                tmp_1_0_2_reg_1627 <= grp_fu_552_p2;
                tmp_1_1_2_1_reg_1642 <= grp_fu_565_p2;
                tmp_1_1_2_reg_1637 <= grp_fu_561_p2;
                tmp_1_2_2_1_reg_1652 <= grp_fu_573_p2;
                tmp_1_2_2_reg_1647 <= grp_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_1_1_0_1_reg_1532_pp0_iter1_reg <= tmp_1_1_0_1_reg_1532;
                tmp_1_1_0_1_reg_1532_pp0_iter2_reg <= tmp_1_1_0_1_reg_1532_pp0_iter1_reg;
                tmp_1_1_reg_1527_pp0_iter1_reg <= tmp_1_1_reg_1527;
                tmp_1_2_0_1_reg_1552_pp0_iter1_reg <= tmp_1_2_0_1_reg_1552;
                tmp_1_2_0_1_reg_1552_pp0_iter2_reg <= tmp_1_2_0_1_reg_1552_pp0_iter1_reg;
                tmp_1_2_0_1_reg_1552_pp0_iter3_reg <= tmp_1_2_0_1_reg_1552_pp0_iter2_reg;
                tmp_1_2_0_1_reg_1552_pp0_iter4_reg <= tmp_1_2_0_1_reg_1552_pp0_iter3_reg;
                tmp_1_2_reg_1547_pp0_iter1_reg <= tmp_1_2_reg_1547;
                tmp_1_2_reg_1547_pp0_iter2_reg <= tmp_1_2_reg_1547_pp0_iter1_reg;
                tmp_1_2_reg_1547_pp0_iter3_reg <= tmp_1_2_reg_1547_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_1_1_2_1_reg_1642_pp0_iter2_reg <= tmp_1_1_2_1_reg_1642;
                tmp_1_1_2_1_reg_1642_pp0_iter3_reg <= tmp_1_1_2_1_reg_1642_pp0_iter2_reg;
                tmp_1_1_2_reg_1637_pp0_iter2_reg <= tmp_1_1_2_reg_1637;
                tmp_1_1_2_reg_1637_pp0_iter3_reg <= tmp_1_1_2_reg_1637_pp0_iter2_reg;
                tmp_1_2_2_1_reg_1652_pp0_iter2_reg <= tmp_1_2_2_1_reg_1652;
                tmp_1_2_2_1_reg_1652_pp0_iter3_reg <= tmp_1_2_2_1_reg_1652_pp0_iter2_reg;
                tmp_1_2_2_1_reg_1652_pp0_iter4_reg <= tmp_1_2_2_1_reg_1652_pp0_iter3_reg;
                tmp_1_2_2_1_reg_1652_pp0_iter5_reg <= tmp_1_2_2_1_reg_1652_pp0_iter4_reg;
                tmp_1_2_2_reg_1647_pp0_iter2_reg <= tmp_1_2_2_reg_1647;
                tmp_1_2_2_reg_1647_pp0_iter3_reg <= tmp_1_2_2_reg_1647_pp0_iter2_reg;
                tmp_1_2_2_reg_1647_pp0_iter4_reg <= tmp_1_2_2_reg_1647_pp0_iter3_reg;
                tmp_1_2_2_reg_1647_pp0_iter5_reg <= tmp_1_2_2_reg_1647_pp0_iter4_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, icmp_ln8_fu_703_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter7, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln8_fu_703_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln8_fu_703_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln11_fu_887_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_482_p4) + unsigned(ap_const_lv4_1));
    add_ln26_1_fu_859_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(select_ln26_18_fu_727_p3));
    add_ln26_2_fu_837_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_c_0_phi_fu_493_p4));
    add_ln26_fu_765_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln26_18_fu_727_p3));
    add_ln34_fu_1227_p2 <= std_logic_vector(unsigned(zext_ln34_1_fu_1224_p1) + unsigned(sub_ln34_fu_1218_p2));
    add_ln8_fu_709_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten45_phi_fu_460_p4) + unsigned(ap_const_lv4_1));
    and_ln26_fu_759_p2 <= (xor_ln26_fu_747_p2 and icmp_ln14_fu_753_p2);
    and_ln33_fu_1275_p2 <= (tmp_23_fu_577_p2 and or_ln33_fu_1269_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state24 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln8_fu_703_p2)
    begin
        if ((icmp_ln8_fu_703_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_493_p4_assign_proc : process(c_0_reg_489, icmp_ln8_reg_1291, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln34_1_reg_1340, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then 
            ap_phi_mux_c_0_phi_fu_493_p4 <= select_ln34_1_reg_1340;
        else 
            ap_phi_mux_c_0_phi_fu_493_p4 <= c_0_reg_489;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_504_p4_assign_proc : process(f_0_reg_500, icmp_ln8_reg_1291, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, f_reg_1567, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_504_p4 <= f_reg_1567;
        else 
            ap_phi_mux_f_0_phi_fu_504_p4 <= f_0_reg_500;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten45_phi_fu_460_p4_assign_proc : process(indvar_flatten45_reg_456, icmp_ln8_reg_1291, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln8_reg_1295, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten45_phi_fu_460_p4 <= add_ln8_reg_1295;
        else 
            ap_phi_mux_indvar_flatten45_phi_fu_460_p4 <= indvar_flatten45_reg_456;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_482_p4_assign_proc : process(indvar_flatten_reg_478, icmp_ln8_reg_1291, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln11_reg_1397, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_482_p4 <= select_ln11_reg_1397;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_482_p4 <= indvar_flatten_reg_478;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_471_p4_assign_proc : process(r_0_reg_467, icmp_ln8_reg_1291, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln26_19_reg_1300, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1291 = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_phi_fu_471_p4 <= select_ln26_19_reg_1300;
        else 
            ap_phi_mux_r_0_phi_fu_471_p4 <= r_0_reg_467;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln33_fu_1239_p1 <= grp_fu_547_p2;
    conv_out_0_address0 <= zext_ln34_2_fu_1233_p1(3 - 1 downto 0);

    conv_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_0_d0 <= w_sum_1_fu_1281_p3;

    conv_out_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, trunc_ln26_reg_1305_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln26_reg_1305_pp0_iter6_reg = ap_const_lv1_0))) then 
            conv_out_0_we0 <= ap_const_logic_1;
        else 
            conv_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_address0 <= zext_ln34_2_fu_1233_p1(3 - 1 downto 0);

    conv_out_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_d0 <= w_sum_1_fu_1281_p3;

    conv_out_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, trunc_ln26_reg_1305_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((trunc_ln26_reg_1305_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_1_we0 <= ap_const_logic_1;
        else 
            conv_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_1119_p2 <= std_logic_vector(unsigned(select_ln34_reg_1315) + unsigned(ap_const_lv2_1));

    grp_fu_511_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_fu_552_p2, grp_fu_511_p2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_511_p0 <= grp_fu_511_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_511_p0 <= grp_fu_552_p2;
        else 
            grp_fu_511_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_511_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, reg_661, tmp_1_0_0_1_reg_1512, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_511_p1 <= reg_661;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_511_p1 <= tmp_1_0_0_1_reg_1512;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_511_p1 <= ap_const_lv32_0;
        else 
            grp_fu_511_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_517_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_fu_511_p2, grp_fu_517_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_517_p0 <= grp_fu_517_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_517_p0 <= grp_fu_511_p2;
        else 
            grp_fu_517_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_517_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_1_0_1_1_reg_1572, tmp_1_0_2_reg_1627, tmp_1_0_2_1_reg_1632, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_517_p1 <= tmp_1_0_2_1_reg_1632;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_517_p1 <= tmp_1_0_2_reg_1627;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_517_p1 <= tmp_1_0_1_1_reg_1572;
        else 
            grp_fu_517_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_523_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, grp_fu_517_p2, ap_enable_reg_pp0_iter2, grp_fu_523_p2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_523_p0 <= grp_fu_523_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_523_p0 <= grp_fu_517_p2;
        else 
            grp_fu_523_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_523_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, tmp_1_1_reg_1527_pp0_iter1_reg, tmp_1_1_0_1_reg_1532_pp0_iter2_reg, tmp_1_1_1_reg_1587_pp0_iter3_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_523_p1 <= tmp_1_1_1_reg_1587_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_523_p1 <= tmp_1_1_0_1_reg_1532_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_523_p1 <= tmp_1_1_reg_1527_pp0_iter1_reg;
        else 
            grp_fu_523_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_529_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, grp_fu_523_p2, ap_enable_reg_pp0_iter3, grp_fu_529_p2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_529_p0 <= grp_fu_529_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_529_p0 <= grp_fu_523_p2;
        else 
            grp_fu_529_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_529_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, tmp_1_1_1_1_reg_1592_pp0_iter3_reg, tmp_1_1_2_reg_1637_pp0_iter3_reg, tmp_1_1_2_1_reg_1642_pp0_iter3_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grp_fu_529_p1 <= tmp_1_1_2_1_reg_1642_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_529_p1 <= tmp_1_1_2_reg_1637_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_529_p1 <= tmp_1_1_1_1_reg_1592_pp0_iter3_reg;
        else 
            grp_fu_529_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_535_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, grp_fu_529_p2, ap_enable_reg_pp0_iter4, grp_fu_535_p2, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_535_p0 <= grp_fu_535_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_535_p0 <= grp_fu_529_p2;
        else 
            grp_fu_535_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_535_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, tmp_1_2_reg_1547_pp0_iter3_reg, tmp_1_2_0_1_reg_1552_pp0_iter4_reg, tmp_1_2_1_reg_1607_pp0_iter5_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_535_p1 <= tmp_1_2_1_reg_1607_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_535_p1 <= tmp_1_2_0_1_reg_1552_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_535_p1 <= tmp_1_2_reg_1547_pp0_iter3_reg;
        else 
            grp_fu_535_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_541_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, grp_fu_535_p2, ap_enable_reg_pp0_iter5, grp_fu_541_p2, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_541_p0 <= grp_fu_541_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_541_p0 <= grp_fu_535_p2;
        else 
            grp_fu_541_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_541_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, tmp_1_2_1_1_reg_1612_pp0_iter5_reg, tmp_1_2_2_reg_1647_pp0_iter5_reg, tmp_1_2_2_1_reg_1652_pp0_iter5_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            grp_fu_541_p1 <= tmp_1_2_2_1_reg_1652_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_541_p1 <= tmp_1_2_2_reg_1647_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_541_p1 <= tmp_1_2_1_1_reg_1612_pp0_iter5_reg;
        else 
            grp_fu_541_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_552_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_fu_938_p5, tmp_5_fu_1047_p5, tmp_7_fu_1124_p5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_552_p0 <= tmp_7_fu_1124_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_552_p0 <= tmp_5_fu_1047_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_552_p0 <= tmp_fu_938_p5;
        else 
            grp_fu_552_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_552_p1 <= 
        input_1_q0 when (trunc_ln26_reg_1305(0) = '1') else 
        input_0_q0;

    grp_fu_557_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_4_fu_950_p5, tmp_6_fu_1059_p5, tmp_8_fu_1136_p5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_557_p0 <= tmp_8_fu_1136_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_557_p0 <= tmp_6_fu_1059_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_557_p0 <= tmp_4_fu_950_p5;
        else 
            grp_fu_557_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_557_p1 <= 
        input_1_q1 when (trunc_ln26_reg_1305(0) = '1') else 
        input_0_q1;

    grp_fu_561_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_9_fu_962_p5, tmp_11_fu_1071_p5, tmp_13_fu_1148_p5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_561_p0 <= tmp_13_fu_1148_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_561_p0 <= tmp_11_fu_1071_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_561_p0 <= tmp_9_fu_962_p5;
        else 
            grp_fu_561_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_561_p1 <= 
        input_2_q0 when (trunc_ln26_reg_1305(0) = '1') else 
        input_1_q0;

    grp_fu_565_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_10_fu_974_p5, tmp_12_fu_1083_p5, tmp_14_fu_1160_p5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_565_p0 <= tmp_14_fu_1160_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_565_p0 <= tmp_12_fu_1083_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_565_p0 <= tmp_10_fu_974_p5;
        else 
            grp_fu_565_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_565_p1 <= 
        input_2_q1 when (trunc_ln26_reg_1305(0) = '1') else 
        input_1_q1;

    grp_fu_569_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_15_fu_986_p5, tmp_17_fu_1095_p5, tmp_19_fu_1172_p5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_569_p0 <= tmp_19_fu_1172_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_569_p0 <= tmp_17_fu_1095_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_569_p0 <= tmp_15_fu_986_p5;
        else 
            grp_fu_569_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_569_p1 <= 
        input_3_q0 when (trunc_ln26_reg_1305(0) = '1') else 
        input_2_q0;

    grp_fu_573_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_16_fu_998_p5, tmp_18_fu_1107_p5, tmp_20_fu_1184_p5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_573_p0 <= tmp_20_fu_1184_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_573_p0 <= tmp_18_fu_1107_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_573_p0 <= tmp_16_fu_998_p5;
        else 
            grp_fu_573_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_573_p1 <= 
        input_3_q1 when (trunc_ln26_reg_1305(0) = '1') else 
        input_2_q1;
    icmp_ln11_fu_721_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_482_p4 = ap_const_lv4_6) else "0";
    icmp_ln14_fu_753_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_504_p4 = ap_const_lv2_3) else "0";
    icmp_ln33_1_fu_1263_p2 <= "1" when (trunc_ln33_fu_1253_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_1257_p2 <= "0" when (tmp_22_fu_1243_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_703_p2 <= "1" when (ap_phi_mux_indvar_flatten45_phi_fu_460_p4 = ap_const_lv4_C) else "0";

    input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_fu_801_p1, zext_ln26_2_fu_908_p1, ap_block_pp0_stage1, zext_ln26_4_fu_1017_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_0_address0 <= zext_ln26_4_fu_1017_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_0_address0 <= zext_ln26_2_fu_908_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_0_address0 <= zext_ln26_fu_801_p1(3 - 1 downto 0);
            else 
                input_0_address0 <= "XXX";
            end if;
        else 
            input_0_address0 <= "XXX";
        end if; 
    end process;


    input_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_1_fu_823_p1, ap_block_pp0_stage1, zext_ln26_3_fu_930_p1, ap_block_pp0_stage2, zext_ln26_5_fu_1039_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_0_address1 <= zext_ln26_5_fu_1039_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_0_address1 <= zext_ln26_3_fu_930_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_0_address1 <= zext_ln26_1_fu_823_p1(3 - 1 downto 0);
            else 
                input_0_address1 <= "XXX";
            end if;
        else 
            input_0_address1 <= "XXX";
        end if; 
    end process;


    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_0_ce1 <= ap_const_logic_1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_fu_801_p1, zext_ln26_2_fu_908_p1, ap_block_pp0_stage1, zext_ln26_4_fu_1017_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_1_address0 <= zext_ln26_4_fu_1017_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_1_address0 <= zext_ln26_2_fu_908_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_1_address0 <= zext_ln26_fu_801_p1(3 - 1 downto 0);
            else 
                input_1_address0 <= "XXX";
            end if;
        else 
            input_1_address0 <= "XXX";
        end if; 
    end process;


    input_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_1_fu_823_p1, ap_block_pp0_stage1, zext_ln26_3_fu_930_p1, ap_block_pp0_stage2, zext_ln26_5_fu_1039_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_1_address1 <= zext_ln26_5_fu_1039_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_1_address1 <= zext_ln26_3_fu_930_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_1_address1 <= zext_ln26_1_fu_823_p1(3 - 1 downto 0);
            else 
                input_1_address1 <= "XXX";
            end if;
        else 
            input_1_address1 <= "XXX";
        end if; 
    end process;


    input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_1_ce1 <= ap_const_logic_1;
        else 
            input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_fu_801_p1, zext_ln26_2_fu_908_p1, ap_block_pp0_stage1, zext_ln26_4_fu_1017_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_2_address0 <= zext_ln26_4_fu_1017_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_2_address0 <= zext_ln26_2_fu_908_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_2_address0 <= zext_ln26_fu_801_p1(3 - 1 downto 0);
            else 
                input_2_address0 <= "XXX";
            end if;
        else 
            input_2_address0 <= "XXX";
        end if; 
    end process;


    input_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_1_fu_823_p1, ap_block_pp0_stage1, zext_ln26_3_fu_930_p1, ap_block_pp0_stage2, zext_ln26_5_fu_1039_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_2_address1 <= zext_ln26_5_fu_1039_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_2_address1 <= zext_ln26_3_fu_930_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_2_address1 <= zext_ln26_1_fu_823_p1(3 - 1 downto 0);
            else 
                input_2_address1 <= "XXX";
            end if;
        else 
            input_2_address1 <= "XXX";
        end if; 
    end process;


    input_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_2_ce1 <= ap_const_logic_1;
        else 
            input_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_fu_801_p1, zext_ln26_2_fu_908_p1, ap_block_pp0_stage1, zext_ln26_4_fu_1017_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_3_address0 <= zext_ln26_4_fu_1017_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_3_address0 <= zext_ln26_2_fu_908_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_3_address0 <= zext_ln26_fu_801_p1(3 - 1 downto 0);
            else 
                input_3_address0 <= "XXX";
            end if;
        else 
            input_3_address0 <= "XXX";
        end if; 
    end process;


    input_3_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_1_fu_823_p1, ap_block_pp0_stage1, zext_ln26_3_fu_930_p1, ap_block_pp0_stage2, zext_ln26_5_fu_1039_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_3_address1 <= zext_ln26_5_fu_1039_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_3_address1 <= zext_ln26_3_fu_930_p1(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_3_address1 <= zext_ln26_1_fu_823_p1(3 - 1 downto 0);
            else 
                input_3_address1 <= "XXX";
            end if;
        else 
            input_3_address1 <= "XXX";
        end if; 
    end process;


    input_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_3_ce0 <= ap_const_logic_1;
        else 
            input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_3_ce1 <= ap_const_logic_1;
        else 
            input_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln26_1_fu_922_p3 <= (ap_const_lv2_0 & or_ln26_fu_916_p2);
    or_ln26_2_fu_1031_p3 <= (ap_const_lv2_0 & or_ln26_4_fu_1025_p2);
    or_ln26_3_fu_809_p2 <= (tmp_1_fu_793_p3 or ap_const_lv3_1);
    or_ln26_4_fu_1025_p2 <= (tmp_24_fu_1010_p3 or ap_const_lv3_1);
    or_ln26_fu_916_p2 <= (tmp_2_fu_901_p3 or ap_const_lv3_1);
    or_ln33_fu_1269_p2 <= (icmp_ln33_fu_1257_p2 or icmp_ln33_1_fu_1263_p2);
    or_ln34_fu_771_p2 <= (icmp_ln11_fu_721_p2 or and_ln26_fu_759_p2);
    or_ln_fu_815_p3 <= (ap_const_lv2_0 & or_ln26_3_fu_809_p2);
    p_shl_cast_fu_1211_p3 <= (select_ln34_1_reg_1340_pp0_iter6_reg & ap_const_lv2_0);
    r_fu_715_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_r_0_phi_fu_471_p4));
    select_ln11_fu_893_p3 <= 
        ap_const_lv4_1 when (icmp_ln11_fu_721_p2(0) = '1') else 
        add_ln11_fu_887_p2;
    select_ln26_18_fu_727_p3 <= 
        ap_const_lv2_0 when (icmp_ln11_fu_721_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_493_p4;
    select_ln26_19_fu_735_p3 <= 
        r_fu_715_p2 when (icmp_ln11_fu_721_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_471_p4;
    select_ln26_20_fu_843_p3 <= 
        ap_const_lv2_1 when (icmp_ln11_fu_721_p2(0) = '1') else 
        add_ln26_2_fu_837_p2;
    select_ln26_21_fu_871_p3 <= 
        ap_const_lv2_2 when (icmp_ln11_fu_721_p2(0) = '1') else 
        xor_ln26_2_fu_865_p2;
    select_ln34_1_fu_785_p3 <= 
        add_ln26_fu_765_p2 when (and_ln26_fu_759_p2(0) = '1') else 
        select_ln26_18_fu_727_p3;
    select_ln34_2_fu_851_p3 <= 
        xor_ln26_1_fu_831_p2 when (and_ln26_fu_759_p2(0) = '1') else 
        select_ln26_20_fu_843_p3;
    select_ln34_3_fu_879_p3 <= 
        add_ln26_1_fu_859_p2 when (and_ln26_fu_759_p2(0) = '1') else 
        select_ln26_21_fu_871_p3;
    select_ln34_fu_777_p3 <= 
        ap_const_lv2_0 when (or_ln34_fu_771_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_504_p4;
    sub_ln34_fu_1218_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1211_p3) - unsigned(zext_ln34_fu_1208_p1));
    tmp_1_fu_793_p3 <= (select_ln34_1_fu_785_p3 & ap_const_lv1_0);
    tmp_22_fu_1243_p4 <= bitcast_ln33_fu_1239_p1(30 downto 23);
    tmp_24_fu_1010_p3 <= (select_ln34_3_reg_1392 & ap_const_lv1_0);
    tmp_2_fu_901_p3 <= (select_ln34_2_reg_1387 & ap_const_lv1_0);
    trunc_ln26_fu_743_p1 <= select_ln26_19_fu_735_p3(1 - 1 downto 0);
    trunc_ln33_fu_1253_p1 <= bitcast_ln33_fu_1239_p1(23 - 1 downto 0);
    w_sum_1_fu_1281_p3 <= 
        grp_fu_547_p2 when (and_ln33_fu_1275_p2(0) = '1') else 
        ap_const_lv32_0;
    xor_ln26_1_fu_831_p2 <= (select_ln26_18_fu_727_p3 xor ap_const_lv2_2);
    xor_ln26_2_fu_865_p2 <= (ap_phi_mux_c_0_phi_fu_493_p4 xor ap_const_lv2_2);
    xor_ln26_fu_747_p2 <= (icmp_ln11_fu_721_p2 xor ap_const_lv1_1);
    zext_ln26_1_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_815_p3),64));
    zext_ln26_2_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_901_p3),64));
    zext_ln26_3_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_1_fu_922_p3),64));
    zext_ln26_4_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_1010_p3),64));
    zext_ln26_5_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_2_fu_1031_p3),64));
    zext_ln26_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_793_p3),64));
    zext_ln34_1_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_reg_1315_pp0_iter6_reg),4));
    zext_ln34_2_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_1227_p2),64));
    zext_ln34_fu_1208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_reg_1340_pp0_iter6_reg),4));
end behav;
