// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=289,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=1058,HLS_SYN_LUT=1289,HLS_VERSION=2020_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_pp0_stage0 = 9'd4;
parameter    ap_ST_fsm_pp0_stage1 = 9'd8;
parameter    ap_ST_fsm_pp0_stage2 = 9'd16;
parameter    ap_ST_fsm_pp0_stage3 = 9'd32;
parameter    ap_ST_fsm_pp0_stage4 = 9'd64;
parameter    ap_ST_fsm_pp0_stage5 = 9'd128;
parameter    ap_ST_fsm_state13 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [4:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [3:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] input_r_address0;
reg input_r_ce0;
reg[4:0] input_r_address1;
reg input_r_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] conv_weights_0_0_address0;
reg    conv_weights_0_0_ce0;
wire   [31:0] conv_weights_0_0_q0;
wire   [3:0] conv_weights_0_1_address0;
reg    conv_weights_0_1_ce0;
wire   [31:0] conv_weights_0_1_q0;
wire   [3:0] conv_weights_1_0_address0;
reg    conv_weights_1_0_ce0;
wire   [31:0] conv_weights_1_0_q0;
wire   [3:0] conv_weights_1_1_address0;
reg    conv_weights_1_1_ce0;
wire   [31:0] conv_weights_1_1_q0;
wire   [3:0] conv_weights_2_0_address0;
reg    conv_weights_2_0_ce0;
wire   [31:0] conv_weights_2_0_q0;
wire   [3:0] conv_weights_2_1_address0;
reg    conv_weights_2_1_ce0;
wire   [31:0] conv_weights_2_1_q0;
reg   [1:0] wr_0_reg_309;
reg   [31:0] w_sum_0_reg_320;
reg   [31:0] reg_356;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln18_reg_897;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] reg_361;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state12_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_343_p2;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln18_reg_897_pp0_iter1_reg;
wire   [31:0] grp_fu_332_p2;
wire   [0:0] icmp_ln8_fu_389_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln8_fu_395_p2;
reg   [3:0] add_ln8_reg_842;
wire   [0:0] icmp_ln11_fu_407_p2;
reg   [0:0] icmp_ln11_reg_847;
wire   [1:0] select_ln34_1_fu_421_p3;
reg   [1:0] select_ln34_1_reg_852;
wire   [1:0] select_ln34_4_fu_487_p3;
reg   [1:0] select_ln34_4_reg_858;
wire   [1:0] select_ln34_5_fu_495_p3;
reg   [1:0] select_ln34_5_reg_863;
wire   [1:0] select_ln34_6_fu_541_p3;
reg   [1:0] select_ln34_6_reg_870;
wire   [1:0] select_ln34_7_fu_555_p3;
reg   [1:0] select_ln34_7_reg_876;
wire   [4:0] zext_ln34_3_fu_563_p1;
reg   [4:0] zext_ln34_3_reg_882;
reg   [3:0] conv_out_addr_reg_887;
wire   [31:0] merge_i_fu_604_p3;
reg   [31:0] merge_i_reg_892;
wire   [0:0] icmp_ln18_fu_612_p2;
wire   [1:0] wr_fu_618_p2;
reg   [1:0] wr_reg_901;
wire   [1:0] add_ln26_fu_661_p2;
reg   [1:0] add_ln26_reg_937;
reg   [31:0] conv_weights_0_1_loa_reg_970;
reg   [31:0] conv_weights_1_0_loa_reg_975;
reg   [31:0] conv_weights_1_1_loa_reg_980;
reg   [31:0] conv_weights_2_0_loa_reg_985;
reg   [31:0] conv_weights_2_1_loa_reg_990;
reg   [31:0] input_load_3_reg_1005;
reg   [31:0] input_load_5_reg_1010;
wire   [0:0] icmp_ln18_1_fu_764_p2;
reg   [0:0] icmp_ln18_1_reg_1015;
wire   [1:0] f_fu_820_p2;
wire    ap_CS_fsm_state13;
wire   [3:0] select_ln11_fu_831_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage3_subdone;
reg   [3:0] indvar_flatten21_reg_253;
reg   [1:0] r_0_reg_264;
reg   [3:0] indvar_flatten_reg_275;
reg   [1:0] c_0_reg_287;
reg   [1:0] f_0_reg_298;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_313_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_w_sum_0_phi_fu_324_p4;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln34_4_fu_573_p1;
wire  signed [63:0] sext_ln26_fu_651_p1;
wire   [63:0] tmp_2_fu_666_p5;
wire   [63:0] zext_ln26_2_fu_695_p1;
wire   [63:0] tmp_7_fu_700_p5;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln26_3_fu_727_p1;
wire   [63:0] tmp_8_fu_732_p5;
wire   [63:0] zext_ln26_4_fu_759_p1;
wire    ap_block_pp0_stage3;
reg   [31:0] grp_fu_332_p0;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
reg   [31:0] grp_fu_343_p0;
reg   [31:0] grp_fu_343_p1;
wire   [31:0] grp_fu_338_p2;
wire   [1:0] r_fu_401_p2;
wire   [2:0] tmp_1_fu_429_p3;
wire   [1:0] c_fu_377_p2;
wire   [1:0] xor_ln26_fu_383_p2;
wire   [0:0] icmp_ln14_fu_463_p2;
wire   [0:0] xor_ln34_fu_457_p2;
wire   [1:0] select_ln34_fu_413_p3;
wire   [0:0] and_ln34_fu_469_p2;
wire   [0:0] or_ln34_fu_481_p2;
wire   [1:0] add_ln26_2_fu_475_p2;
wire   [3:0] zext_ln34_fu_437_p1;
wire   [3:0] zext_ln34_1_fu_503_p1;
wire   [3:0] add_ln34_fu_507_p2;
wire   [2:0] trunc_ln34_fu_517_p1;
wire   [4:0] p_shl_cast_fu_521_p3;
wire   [4:0] zext_ln34_2_fu_513_p1;
wire   [1:0] xor_ln26_1_fu_535_p2;
wire   [1:0] select_ln34_2_fu_441_p3;
wire   [1:0] add_ln26_3_fu_549_p2;
wire   [1:0] select_ln34_3_fu_449_p3;
wire   [4:0] sub_ln34_fu_529_p2;
wire   [4:0] add_ln34_1_fu_567_p2;
wire   [0:0] icmp_ln7_1_fu_584_p2;
wire   [0:0] icmp_ln7_fu_578_p2;
wire   [0:0] empty_7_fu_598_p2;
wire   [31:0] select_ln7_i_fu_590_p3;
wire   [3:0] tmp_6_fu_628_p3;
wire   [4:0] zext_ln26_1_fu_636_p1;
wire   [4:0] zext_ln26_fu_624_p1;
wire   [4:0] sub_ln26_fu_640_p2;
wire   [4:0] add_ln26_4_fu_646_p2;
wire   [6:0] tmp_10_cast_fu_678_p5;
wire   [6:0] or_ln26_fu_689_p2;
wire   [6:0] tmp_13_cast_fu_711_p5;
wire   [6:0] or_ln26_1_fu_721_p2;
wire   [6:0] tmp_16_cast_fu_743_p5;
wire   [6:0] or_ln26_2_fu_753_p2;
wire   [31:0] bitcast_ln33_fu_769_p1;
wire   [7:0] tmp_fu_773_p4;
wire   [22:0] trunc_ln33_fu_783_p1;
wire   [0:0] icmp_ln33_1_fu_793_p2;
wire   [0:0] icmp_ln33_fu_787_p2;
wire   [0:0] or_ln33_fu_799_p2;
wire   [0:0] tmp_4_fu_350_p2;
wire   [0:0] and_ln33_fu_805_p2;
wire   [3:0] add_ln11_fu_825_p2;
wire    ap_block_pp0_stage3_00001;
reg   [8:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_weighbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_0_address0),
    .ce0(conv_weights_0_0_ce0),
    .q0(conv_weights_0_0_q0)
);

conv_1_conv_weighcud #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_1_address0),
    .ce0(conv_weights_0_1_ce0),
    .q0(conv_weights_0_1_q0)
);

conv_1_conv_weighdEe #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_0_address0),
    .ce0(conv_weights_1_0_ce0),
    .q0(conv_weights_1_0_q0)
);

conv_1_conv_weigheOg #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_1_address0),
    .ce0(conv_weights_1_1_ce0),
    .q0(conv_weights_1_1_q0)
);

conv_1_conv_weighfYi #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_0_address0),
    .ce0(conv_weights_2_0_ce0),
    .q0(conv_weights_2_0_q0)
);

conv_1_conv_weighg8j #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_1_address0),
    .ce0(conv_weights_2_1_ce0),
    .q0(conv_weights_2_1_q0)
);

conv_1_fadd_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_hbi_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_332_p0),
    .din1(grp_fu_343_p2),
    .ce(1'b1),
    .dout(grp_fu_332_p2)
);

conv_1_fadd_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_hbi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_332_p2),
    .din1(merge_i_reg_892),
    .ce(1'b1),
    .dout(grp_fu_338_p2)
);

conv_1_fmul_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_ibs_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_343_p0),
    .din1(grp_fu_343_p1),
    .ce(1'b1),
    .dout(grp_fu_343_p2)
);

conv_1_fcmp_32ns_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_jbC_U4(
    .din0(grp_fu_338_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_4_fu_350_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_389_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_389_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        c_0_reg_287 <= select_ln34_5_reg_863;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_287 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        f_0_reg_298 <= f_fu_820_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_298 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten21_reg_253 <= add_ln8_reg_842;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten21_reg_253 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten_reg_275 <= select_ln11_fu_831_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_275 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        r_0_reg_264 <= select_ln34_1_reg_852;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_264 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_reg_897 == 1'd0))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            reg_361 <= input_r_q0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            reg_361 <= input_r_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_897_pp0_iter1_reg == 1'd0))) begin
        w_sum_0_reg_320 <= grp_fu_332_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_389_p2 == 1'd0))) begin
        w_sum_0_reg_320 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_897 == 1'd0))) begin
        wr_0_reg_309 <= wr_reg_901;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_389_p2 == 1'd0))) begin
        wr_0_reg_309 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_fu_612_p2 == 1'd0))) begin
        add_ln26_reg_937 <= add_ln26_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_842 <= add_ln8_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_389_p2 == 1'd0))) begin
        conv_out_addr_reg_887 <= zext_ln34_4_fu_573_p1;
        icmp_ln11_reg_847 <= icmp_ln11_fu_407_p2;
        merge_i_reg_892[30 : 22] <= merge_i_fu_604_p3[30 : 22];
        select_ln34_1_reg_852 <= select_ln34_1_fu_421_p3;
        select_ln34_4_reg_858 <= select_ln34_4_fu_487_p3;
        select_ln34_5_reg_863 <= select_ln34_5_fu_495_p3;
        select_ln34_6_reg_870 <= select_ln34_6_fu_541_p3;
        select_ln34_7_reg_876 <= select_ln34_7_fu_555_p3;
        zext_ln34_3_reg_882[1 : 0] <= zext_ln34_3_fu_563_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_897 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_weights_0_1_loa_reg_970 <= conv_weights_0_1_q0;
        conv_weights_1_0_loa_reg_975 <= conv_weights_1_0_q0;
        conv_weights_1_1_loa_reg_980 <= conv_weights_1_1_q0;
        conv_weights_2_0_loa_reg_985 <= conv_weights_2_0_q0;
        conv_weights_2_1_loa_reg_990 <= conv_weights_2_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_897 == 1'd0))) begin
        icmp_ln18_1_reg_1015 <= icmp_ln18_1_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln18_reg_897 <= icmp_ln18_fu_612_p2;
        icmp_ln18_reg_897_pp0_iter1_reg <= icmp_ln18_reg_897;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_897 == 1'd0))) begin
        input_load_3_reg_1005 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln18_reg_897 == 1'd0))) begin
        input_load_5_reg_1010 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_897 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_897 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_356 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_reg_901 <= wr_fu_618_p2;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_612_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_389_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln18_reg_897_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_w_sum_0_phi_fu_324_p4 = grp_fu_332_p2;
    end else begin
        ap_phi_mux_w_sum_0_phi_fu_324_p4 = w_sum_0_reg_320;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_897 == 1'd0))) begin
        ap_phi_mux_wr_0_phi_fu_313_p4 = wr_reg_901;
    end else begin
        ap_phi_mux_wr_0_phi_fu_313_p4 = wr_0_reg_309;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_389_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_1_reg_1015 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_0_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_0_1_ce0 = 1'b1;
    end else begin
        conv_weights_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_1_0_ce0 = 1'b1;
    end else begin
        conv_weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_1_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_2_0_ce0 = 1'b1;
    end else begin
        conv_weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_2_1_ce0 = 1'b1;
    end else begin
        conv_weights_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_332_p0 = grp_fu_332_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_332_p0 = ap_phi_mux_w_sum_0_phi_fu_324_p4;
    end else begin
        grp_fu_332_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_343_p0 = conv_weights_2_1_loa_reg_990;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_343_p0 = conv_weights_2_0_loa_reg_985;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_343_p0 = conv_weights_1_1_loa_reg_980;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_343_p0 = conv_weights_1_0_loa_reg_975;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_343_p0 = conv_weights_0_1_loa_reg_970;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_343_p0 = conv_weights_0_0_q0;
    end else begin
        grp_fu_343_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_343_p1 = input_load_5_reg_1010;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_343_p1 = input_load_3_reg_1005;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_343_p1 = reg_356;
    end else if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_343_p1 = reg_361;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_343_p1 = input_r_q0;
    end else begin
        grp_fu_343_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address0 = tmp_8_fu_732_p5;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address0 = tmp_7_fu_700_p5;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address0 = tmp_2_fu_666_p5;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = zext_ln26_4_fu_759_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = zext_ln26_3_fu_727_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address1 = zext_ln26_2_fu_695_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_389_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln18_fu_612_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln18_fu_612_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_825_p2 = (indvar_flatten_reg_275 + 4'd1);

assign add_ln26_2_fu_475_p2 = (2'd1 + select_ln34_fu_413_p3);

assign add_ln26_3_fu_549_p2 = ($signed(2'd3) + $signed(select_ln34_fu_413_p3));

assign add_ln26_4_fu_646_p2 = (sub_ln26_fu_640_p2 + zext_ln34_3_reg_882);

assign add_ln26_fu_661_p2 = (ap_phi_mux_wr_0_phi_fu_313_p4 + select_ln34_1_reg_852);

assign add_ln34_1_fu_567_p2 = (sub_ln34_fu_529_p2 + zext_ln34_3_fu_563_p1);

assign add_ln34_fu_507_p2 = (zext_ln34_fu_437_p1 + zext_ln34_1_fu_503_p1);

assign add_ln8_fu_395_p2 = (indvar_flatten21_reg_253 + 4'd1);

assign and_ln33_fu_805_p2 = (tmp_4_fu_350_p2 & or_ln33_fu_799_p2);

assign and_ln34_fu_469_p2 = (xor_ln34_fu_457_p2 & icmp_ln14_fu_463_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln33_fu_769_p1 = grp_fu_338_p2;

assign c_fu_377_p2 = (c_0_reg_287 + 2'd1);

assign conv_out_address0 = conv_out_addr_reg_887;

assign conv_out_d0 = ((and_ln33_fu_805_p2[0:0] === 1'b1) ? grp_fu_338_p2 : 32'd0);

assign conv_weights_0_0_address0 = sext_ln26_fu_651_p1;

assign conv_weights_0_1_address0 = sext_ln26_fu_651_p1;

assign conv_weights_1_0_address0 = sext_ln26_fu_651_p1;

assign conv_weights_1_1_address0 = sext_ln26_fu_651_p1;

assign conv_weights_2_0_address0 = sext_ln26_fu_651_p1;

assign conv_weights_2_1_address0 = sext_ln26_fu_651_p1;

assign empty_7_fu_598_p2 = (icmp_ln7_fu_578_p2 | icmp_ln7_1_fu_584_p2);

assign f_fu_820_p2 = (select_ln34_4_reg_858 + 2'd1);

assign icmp_ln11_fu_407_p2 = ((indvar_flatten_reg_275 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_463_p2 = ((f_0_reg_298 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_1_fu_764_p2 = ((wr_reg_901 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_612_p2 = ((ap_phi_mux_wr_0_phi_fu_313_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_793_p2 = ((trunc_ln33_fu_783_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_787_p2 = ((tmp_fu_773_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_584_p2 = ((select_ln34_4_fu_487_p3 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_578_p2 = ((select_ln34_4_fu_487_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_389_p2 = ((indvar_flatten21_reg_253 == 4'd12) ? 1'b1 : 1'b0);

assign merge_i_fu_604_p3 = ((empty_7_fu_598_p2[0:0] === 1'b1) ? select_ln7_i_fu_590_p3 : 32'd1069547520);

assign or_ln26_1_fu_721_p2 = (tmp_13_cast_fu_711_p5 | 7'd1);

assign or_ln26_2_fu_753_p2 = (tmp_16_cast_fu_743_p5 | 7'd1);

assign or_ln26_fu_689_p2 = (tmp_10_cast_fu_678_p5 | 7'd1);

assign or_ln33_fu_799_p2 = (icmp_ln33_fu_787_p2 | icmp_ln33_1_fu_793_p2);

assign or_ln34_fu_481_p2 = (icmp_ln11_fu_407_p2 | and_ln34_fu_469_p2);

assign p_shl_cast_fu_521_p3 = {{trunc_ln34_fu_517_p1}, {2'd0}};

assign r_fu_401_p2 = (2'd1 + r_0_reg_264);

assign select_ln11_fu_831_p3 = ((icmp_ln11_reg_847[0:0] === 1'b1) ? 4'd1 : add_ln11_fu_825_p2);

assign select_ln34_1_fu_421_p3 = ((icmp_ln11_fu_407_p2[0:0] === 1'b1) ? r_fu_401_p2 : r_0_reg_264);

assign select_ln34_2_fu_441_p3 = ((icmp_ln11_fu_407_p2[0:0] === 1'b1) ? 2'd1 : c_fu_377_p2);

assign select_ln34_3_fu_449_p3 = ((icmp_ln11_fu_407_p2[0:0] === 1'b1) ? 2'd2 : xor_ln26_fu_383_p2);

assign select_ln34_4_fu_487_p3 = ((or_ln34_fu_481_p2[0:0] === 1'b1) ? 2'd0 : f_0_reg_298);

assign select_ln34_5_fu_495_p3 = ((and_ln34_fu_469_p2[0:0] === 1'b1) ? add_ln26_2_fu_475_p2 : select_ln34_fu_413_p3);

assign select_ln34_6_fu_541_p3 = ((and_ln34_fu_469_p2[0:0] === 1'b1) ? xor_ln26_1_fu_535_p2 : select_ln34_2_fu_441_p3);

assign select_ln34_7_fu_555_p3 = ((and_ln34_fu_469_p2[0:0] === 1'b1) ? add_ln26_3_fu_549_p2 : select_ln34_3_fu_449_p3);

assign select_ln34_fu_413_p3 = ((icmp_ln11_fu_407_p2[0:0] === 1'b1) ? 2'd0 : c_0_reg_287);

assign select_ln7_i_fu_590_p3 = ((icmp_ln7_1_fu_584_p2[0:0] === 1'b1) ? 32'd1073741824 : 32'd1065353216);

assign sext_ln26_fu_651_p1 = $signed(add_ln26_4_fu_646_p2);

assign sub_ln26_fu_640_p2 = (zext_ln26_1_fu_636_p1 - zext_ln26_fu_624_p1);

assign sub_ln34_fu_529_p2 = (p_shl_cast_fu_521_p3 - zext_ln34_2_fu_513_p1);

assign tmp_10_cast_fu_678_p5 = {{{{{{2'd0}, {add_ln26_fu_661_p2}}}, {select_ln34_5_reg_863}}}, {1'd0}};

assign tmp_13_cast_fu_711_p5 = {{{{{{2'd0}, {add_ln26_reg_937}}}, {select_ln34_6_reg_870}}}, {1'd0}};

assign tmp_16_cast_fu_743_p5 = {{{{{{2'd0}, {add_ln26_reg_937}}}, {select_ln34_7_reg_876}}}, {1'd0}};

assign tmp_1_fu_429_p3 = {{select_ln34_1_fu_421_p3}, {1'd0}};

assign tmp_2_fu_666_p5 = {{{{{{59'd0}, {add_ln26_fu_661_p2}}}, {select_ln34_5_reg_863}}}, {1'd0}};

assign tmp_6_fu_628_p3 = {{ap_phi_mux_wr_0_phi_fu_313_p4}, {2'd0}};

assign tmp_7_fu_700_p5 = {{{{{{59'd0}, {add_ln26_reg_937}}}, {select_ln34_6_reg_870}}}, {1'd0}};

assign tmp_8_fu_732_p5 = {{{{{{59'd0}, {add_ln26_reg_937}}}, {select_ln34_7_reg_876}}}, {1'd0}};

assign tmp_fu_773_p4 = {{bitcast_ln33_fu_769_p1[30:23]}};

assign trunc_ln33_fu_783_p1 = bitcast_ln33_fu_769_p1[22:0];

assign trunc_ln34_fu_517_p1 = add_ln34_fu_507_p2[2:0];

assign wr_fu_618_p2 = (ap_phi_mux_wr_0_phi_fu_313_p4 + 2'd1);

assign xor_ln26_1_fu_535_p2 = (select_ln34_fu_413_p3 ^ 2'd2);

assign xor_ln26_fu_383_p2 = (c_0_reg_287 ^ 2'd2);

assign xor_ln34_fu_457_p2 = (icmp_ln11_fu_407_p2 ^ 1'd1);

assign zext_ln26_1_fu_636_p1 = tmp_6_fu_628_p3;

assign zext_ln26_2_fu_695_p1 = or_ln26_fu_689_p2;

assign zext_ln26_3_fu_727_p1 = or_ln26_1_fu_721_p2;

assign zext_ln26_4_fu_759_p1 = or_ln26_2_fu_753_p2;

assign zext_ln26_fu_624_p1 = ap_phi_mux_wr_0_phi_fu_313_p4;

assign zext_ln34_1_fu_503_p1 = select_ln34_5_fu_495_p3;

assign zext_ln34_2_fu_513_p1 = add_ln34_fu_507_p2;

assign zext_ln34_3_fu_563_p1 = select_ln34_4_fu_487_p3;

assign zext_ln34_4_fu_573_p1 = add_ln34_1_fu_567_p2;

assign zext_ln34_fu_437_p1 = tmp_1_fu_429_p3;

always @ (posedge ap_clk) begin
    zext_ln34_3_reg_882[4:2] <= 3'b000;
    merge_i_reg_892[21:0] <= 22'b0000000000000000000000;
    merge_i_reg_892[31] <= 1'b0;
end

endmodule //conv_1
