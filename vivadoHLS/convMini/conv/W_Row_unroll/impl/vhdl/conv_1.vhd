-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=1153,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=682,HLS_SYN_LUT=1270,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3FC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_2_ce0 : STD_LOGIC;
    signal conv_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal r_fu_369_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_874 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln26_fu_383_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_reg_880 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_387_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln26_reg_885 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_fu_399_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_893 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln34_fu_430_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln34_reg_898 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln11_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_442_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_reg_906 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln34_2_fu_448_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln34_2_reg_911 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln14_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_out_addr_reg_918 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln21_fu_472_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_reg_926 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln26_1_fu_486_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_1_reg_931 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln21_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_fu_506_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_reg_936 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_fu_516_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_reg_944 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln24_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln21_1_fu_579_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_1_reg_972 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln26_2_fu_593_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_reg_977 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln21_1_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_1_fu_612_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_1_reg_982 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_1_fu_622_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_1_reg_990 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln24_1_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln21_2_fu_685_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_2_reg_1018 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln26_8_fu_699_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_8_reg_1023 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln21_2_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_2_fu_718_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_2_reg_1028 : STD_LOGIC_VECTOR (5 downto 0);
    signal merge_i_fu_748_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_2_fu_763_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_2_reg_1041 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln24_2_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal r_0_reg_158 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_reg_170 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_0_reg_182 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal w_sum_1_0_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_0_reg_206 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_0_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_0_reg_229 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_1_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_1_reg_251 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_1_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_1_reg_274 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_2_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_2_reg_296 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_2_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_2_reg_319 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_4_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_6_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_7_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_13_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_17_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_18_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_375_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln34_fu_405_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_409_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln34_fu_418_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_422_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_1_fu_414_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_3_fu_452_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_1_fu_456_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_478_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_fu_490_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_496_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_4_fu_526_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_4_fu_530_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_539_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_5_fu_535_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_fu_547_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_5_fu_553_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_3_fu_522_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_6_fu_563_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_585_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_1_fu_597_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_603_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_10_fu_632_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_7_fu_636_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_645_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_11_fu_641_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_1_fu_653_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_8_fu_659_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_9_fu_628_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_9_fu_669_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_691_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_2_fu_703_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_16_fu_709_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln7_1_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_i_fu_734_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_15_fu_773_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_10_fu_777_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_cast_fu_786_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_16_fu_782_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_2_fu_794_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_11_fu_800_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_14_fu_769_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_12_fu_810_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln33_fu_820_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_824_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_834_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_1_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component conv_1_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_weighbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_1_conv_weighbkb
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_1_conv_weighcud
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_weights_2_U : component conv_1_conv_weighdEe
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_address0,
        ce0 => conv_weights_2_ce0,
        q0 => conv_weights_2_q0);

    conv_1_fadd_32ns_eOg_U1 : component conv_1_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_330_p0,
        din1 => grp_fu_330_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_330_p2);

    conv_1_fmul_32ns_fYi_U2 : component conv_1_fmul_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_338_p0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_338_p2);

    conv_1_fcmp_32ns_g8j_U3 : component conv_1_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_330_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_8_fu_347_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_436_p2 = ap_const_lv1_1))) then 
                c_0_reg_170 <= c_reg_893;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_363_p2 = ap_const_lv1_0))) then 
                c_0_reg_170 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_0_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                ch_0_0_reg_229 <= add_ln24_reg_944;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_466_p2 = ap_const_lv1_0))) then 
                ch_0_0_reg_229 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_1_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                ch_0_1_reg_274 <= add_ln24_1_reg_990;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_1_fu_573_p2 = ap_const_lv1_0))) then 
                ch_0_1_reg_274 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_2_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                ch_0_2_reg_319 <= add_ln24_2_reg_1041;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln21_2_fu_679_p2 = ap_const_lv1_0))) then 
                ch_0_2_reg_319 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                f_0_reg_182 <= f_reg_906;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_393_p2 = ap_const_lv1_0))) then 
                f_0_reg_182 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_393_p2 = ap_const_lv1_1))) then 
                r_0_reg_158 <= r_reg_874;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_158 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_sum_1_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_510_p2 = ap_const_lv1_1))) then 
                w_sum_1_0_reg_194 <= w_sum_2_0_reg_217;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_436_p2 = ap_const_lv1_0))) then 
                w_sum_1_0_reg_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_1_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_1_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                w_sum_1_1_reg_240 <= w_sum_2_1_reg_262;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_466_p2 = ap_const_lv1_1))) then 
                w_sum_1_1_reg_240 <= w_sum_1_0_reg_194;
            end if; 
        end if;
    end process;

    w_sum_1_2_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_2_fu_757_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                w_sum_1_2_reg_285 <= w_sum_2_2_reg_307;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_1_fu_573_p2 = ap_const_lv1_1))) then 
                w_sum_1_2_reg_285 <= w_sum_1_1_reg_240;
            end if; 
        end if;
    end process;

    w_sum_2_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_sum_2_0_reg_217 <= grp_fu_330_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_466_p2 = ap_const_lv1_0))) then 
                w_sum_2_0_reg_217 <= w_sum_1_0_reg_194;
            end if; 
        end if;
    end process;

    w_sum_2_1_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                w_sum_2_1_reg_262 <= grp_fu_330_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_1_fu_573_p2 = ap_const_lv1_0))) then 
                w_sum_2_1_reg_262 <= w_sum_1_1_reg_240;
            end if; 
        end if;
    end process;

    w_sum_2_2_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                w_sum_2_2_reg_307 <= grp_fu_330_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln21_2_fu_679_p2 = ap_const_lv1_0))) then 
                w_sum_2_2_reg_307 <= w_sum_1_2_reg_285;
            end if; 
        end if;
    end process;

    wc_0_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_510_p2 = ap_const_lv1_1))) then 
                wc_0_0_reg_206 <= add_ln21_reg_926;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_436_p2 = ap_const_lv1_0))) then 
                wc_0_0_reg_206 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wc_0_1_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_1_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                wc_0_1_reg_251 <= add_ln21_1_reg_972;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_466_p2 = ap_const_lv1_1))) then 
                wc_0_1_reg_251 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wc_0_2_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_2_fu_757_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                wc_0_2_reg_296 <= add_ln21_2_reg_1018;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_1_fu_573_p2 = ap_const_lv1_1))) then 
                wc_0_2_reg_296 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln21_1_reg_972 <= add_ln21_1_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln21_2_reg_1018 <= add_ln21_2_fu_685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln21_reg_926 <= add_ln21_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln24_1_reg_990 <= add_ln24_1_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln24_2_reg_1041 <= add_ln24_2_fu_763_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln24_reg_944 <= add_ln24_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_893 <= c_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_436_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_918 <= zext_ln34_4_fu_461_p1(4 - 1 downto 0);
                    zext_ln34_2_reg_911(1 downto 0) <= zext_ln34_2_fu_448_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_906 <= f_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_874 <= r_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_393_p2 = ap_const_lv1_0))) then
                sub_ln34_reg_898 <= sub_ln34_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_363_p2 = ap_const_lv1_0))) then
                xor_ln26_reg_885 <= xor_ln26_fu_387_p2;
                    zext_ln26_reg_880(2 downto 1) <= zext_ln26_fu_383_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_1_fu_573_p2 = ap_const_lv1_0))) then
                    zext_ln24_1_reg_982(4 downto 1) <= zext_ln24_1_fu_612_p1(4 downto 1);
                    zext_ln26_2_reg_977(2 downto 1) <= zext_ln26_2_fu_593_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln21_2_fu_679_p2 = ap_const_lv1_0))) then
                    zext_ln24_2_reg_1028(4 downto 1) <= zext_ln24_2_fu_718_p1(4 downto 1);
                    zext_ln26_8_reg_1023(2 downto 1) <= zext_ln26_8_fu_699_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_466_p2 = ap_const_lv1_0))) then
                    zext_ln24_reg_936(4 downto 1) <= zext_ln24_fu_506_p1(4 downto 1);
                    zext_ln26_1_reg_931(2 downto 1) <= zext_ln26_1_fu_486_p1(2 downto 1);
            end if;
        end if;
    end process;
    zext_ln26_reg_880(0) <= '0';
    zext_ln26_reg_880(3) <= '0';
    zext_ln34_2_reg_911(5 downto 2) <= "0000";
    zext_ln26_1_reg_931(0) <= '0';
    zext_ln26_1_reg_931(3) <= '0';
    zext_ln24_reg_936(0) <= '0';
    zext_ln24_reg_936(5) <= '0';
    zext_ln26_2_reg_977(0) <= '0';
    zext_ln26_2_reg_977(3) <= '0';
    zext_ln24_1_reg_982(0) <= '0';
    zext_ln24_1_reg_982(5) <= '0';
    zext_ln26_8_reg_1023(0) <= '0';
    zext_ln26_8_reg_1023(3) <= '0';
    zext_ln24_2_reg_1028(0) <= '0';
    zext_ln24_2_reg_1028(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_363_p2, ap_CS_fsm_state3, icmp_ln11_fu_393_p2, ap_CS_fsm_state4, icmp_ln14_fu_436_p2, ap_CS_fsm_state5, icmp_ln21_fu_466_p2, ap_CS_fsm_state6, icmp_ln24_fu_510_p2, ap_CS_fsm_state10, icmp_ln21_1_fu_573_p2, ap_CS_fsm_state11, icmp_ln24_1_fu_616_p2, ap_CS_fsm_state15, icmp_ln21_2_fu_679_p2, ap_CS_fsm_state16, icmp_ln24_2_fu_757_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_363_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_393_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_436_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_466_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_510_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_1_fu_573_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln24_1_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln21_2_fu_679_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln24_2_fu_757_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln21_1_fu_579_p2 <= std_logic_vector(unsigned(wc_0_1_reg_251) + unsigned(ap_const_lv2_1));
    add_ln21_2_fu_685_p2 <= std_logic_vector(unsigned(wc_0_2_reg_296) + unsigned(ap_const_lv2_1));
    add_ln21_fu_472_p2 <= std_logic_vector(unsigned(wc_0_0_reg_206) + unsigned(ap_const_lv2_1));
    add_ln24_1_fu_622_p2 <= std_logic_vector(unsigned(ch_0_1_reg_274) + unsigned(ap_const_lv2_1));
    add_ln24_2_fu_763_p2 <= std_logic_vector(unsigned(ch_0_2_reg_319) + unsigned(ap_const_lv2_1));
    add_ln24_fu_516_p2 <= std_logic_vector(unsigned(ch_0_0_reg_229) + unsigned(ap_const_lv2_1));
    add_ln26_10_fu_777_p2 <= std_logic_vector(unsigned(zext_ln26_8_reg_1023) + unsigned(zext_ln26_15_fu_773_p1));
    add_ln26_11_fu_800_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_794_p2) + unsigned(zext_ln34_2_reg_911));
    add_ln26_12_fu_810_p2 <= std_logic_vector(unsigned(zext_ln24_2_reg_1028) + unsigned(zext_ln26_14_fu_769_p1));
    add_ln26_1_fu_597_p2 <= std_logic_vector(unsigned(wc_0_1_reg_251) + unsigned(c_0_reg_170));
    add_ln26_2_fu_703_p2 <= std_logic_vector(unsigned(wc_0_2_reg_296) + unsigned(c_0_reg_170));
    add_ln26_4_fu_530_p2 <= std_logic_vector(unsigned(zext_ln26_1_reg_931) + unsigned(zext_ln26_4_fu_526_p1));
    add_ln26_5_fu_553_p2 <= std_logic_vector(unsigned(sub_ln26_fu_547_p2) + unsigned(zext_ln34_2_reg_911));
    add_ln26_6_fu_563_p2 <= std_logic_vector(unsigned(zext_ln24_reg_936) + unsigned(zext_ln26_3_fu_522_p1));
    add_ln26_7_fu_636_p2 <= std_logic_vector(unsigned(zext_ln26_2_reg_977) + unsigned(zext_ln26_10_fu_632_p1));
    add_ln26_8_fu_659_p2 <= std_logic_vector(unsigned(sub_ln26_1_fu_653_p2) + unsigned(zext_ln34_2_reg_911));
    add_ln26_9_fu_669_p2 <= std_logic_vector(unsigned(zext_ln24_1_reg_982) + unsigned(zext_ln26_9_fu_628_p1));
    add_ln26_fu_490_p2 <= std_logic_vector(unsigned(wc_0_0_reg_206) + unsigned(c_0_reg_170));
    add_ln34_1_fu_456_p2 <= std_logic_vector(unsigned(sub_ln34_reg_898) + unsigned(zext_ln34_3_fu_452_p1));
    add_ln34_fu_409_p2 <= std_logic_vector(unsigned(zext_ln34_fu_405_p1) + unsigned(zext_ln26_reg_880));
    and_ln33_fu_856_p2 <= (tmp_8_fu_347_p2 and or_ln33_fu_850_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_363_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_363_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_363_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_363_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln33_fu_820_p1 <= grp_fu_330_p2;
    c_fu_399_p2 <= std_logic_vector(unsigned(c_0_reg_170) + unsigned(ap_const_lv2_1));
    conv_out_address0 <= conv_out_addr_reg_918;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_330_p2 when (and_ln33_fu_856_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln26_6_fu_558_p1(5 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln26_12_fu_664_p1(5 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_address0 <= zext_ln26_17_fu_805_p1(5 - 1 downto 0);

    conv_weights_2_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_15_fu_742_p2 <= (icmp_ln7_fu_722_p2 or icmp_ln7_1_fu_728_p2);
    f_fu_442_p2 <= std_logic_vector(unsigned(f_0_reg_182) + unsigned(ap_const_lv2_1));

    grp_fu_330_p0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state15, w_sum_2_0_reg_217, w_sum_2_1_reg_262, w_sum_1_2_reg_285, w_sum_2_2_reg_307)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_330_p0 <= w_sum_2_2_reg_307;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_330_p0 <= w_sum_1_2_reg_285;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_330_p0 <= w_sum_2_1_reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_330_p0 <= w_sum_2_0_reg_217;
        else 
            grp_fu_330_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_330_p1_assign_proc : process(grp_fu_338_p2, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state15, merge_i_fu_748_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_330_p1 <= merge_i_fu_748_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_330_p1 <= grp_fu_338_p2;
        else 
            grp_fu_330_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p0_assign_proc : process(conv_weights_0_q0, conv_weights_1_q0, conv_weights_2_q0, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_338_p0 <= conv_weights_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_338_p0 <= conv_weights_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_338_p0 <= conv_weights_0_q0;
        else 
            grp_fu_338_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_393_p2 <= "1" when (c_0_reg_170 = ap_const_lv2_2) else "0";
    icmp_ln14_fu_436_p2 <= "1" when (f_0_reg_182 = ap_const_lv2_3) else "0";
    icmp_ln21_1_fu_573_p2 <= "1" when (wc_0_1_reg_251 = ap_const_lv2_3) else "0";
    icmp_ln21_2_fu_679_p2 <= "1" when (wc_0_2_reg_296 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_466_p2 <= "1" when (wc_0_0_reg_206 = ap_const_lv2_3) else "0";
    icmp_ln24_1_fu_616_p2 <= "1" when (ch_0_1_reg_274 = ap_const_lv2_2) else "0";
    icmp_ln24_2_fu_757_p2 <= "1" when (ch_0_2_reg_319 = ap_const_lv2_2) else "0";
    icmp_ln24_fu_510_p2 <= "1" when (ch_0_0_reg_229 = ap_const_lv2_2) else "0";
    icmp_ln33_1_fu_844_p2 <= "1" when (trunc_ln33_fu_834_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_838_p2 <= "0" when (tmp_fu_824_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_1_fu_728_p2 <= "1" when (f_0_reg_182 = ap_const_lv2_1) else "0";
    icmp_ln7_fu_722_p2 <= "1" when (f_0_reg_182 = ap_const_lv2_0) else "0";
    icmp_ln8_fu_363_p2 <= "1" when (r_0_reg_158 = ap_const_lv2_2) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state16, zext_ln26_7_fu_568_p1, zext_ln26_13_fu_674_p1, zext_ln26_18_fu_815_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_r_address0 <= zext_ln26_18_fu_815_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= zext_ln26_13_fu_674_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln26_7_fu_568_p1(5 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    merge_i_fu_748_p3 <= 
        select_ln7_i_fu_734_p3 when (empty_15_fu_742_p2(0) = '1') else 
        ap_const_lv32_3FC00000;
    or_ln33_fu_850_p2 <= (icmp_ln33_fu_838_p2 or icmp_ln33_1_fu_844_p2);
    p_shl1_cast_fu_539_p3 <= (add_ln26_4_fu_530_p2 & ap_const_lv2_0);
    p_shl2_cast_fu_645_p3 <= (add_ln26_7_fu_636_p2 & ap_const_lv2_0);
    p_shl3_cast_fu_786_p3 <= (add_ln26_10_fu_777_p2 & ap_const_lv2_0);
    p_shl_cast_fu_422_p3 <= (trunc_ln34_fu_418_p1 & ap_const_lv2_0);
    r_fu_369_p2 <= std_logic_vector(unsigned(r_0_reg_158) + unsigned(ap_const_lv2_1));
    select_ln7_i_fu_734_p3 <= 
        ap_const_lv32_40000000 when (icmp_ln7_1_fu_728_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    sub_ln26_1_fu_653_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_645_p3) - unsigned(zext_ln26_11_fu_641_p1));
    sub_ln26_2_fu_794_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_786_p3) - unsigned(zext_ln26_16_fu_782_p1));
    sub_ln26_fu_547_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_539_p3) - unsigned(zext_ln26_5_fu_535_p1));
    sub_ln34_fu_430_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_422_p3) - unsigned(zext_ln34_1_fu_414_p1));
    tmp_10_fu_375_p3 <= (r_0_reg_158 & ap_const_lv1_0);
    tmp_11_fu_478_p3 <= (wc_0_0_reg_206 & ap_const_lv1_0);
    tmp_12_fu_496_p4 <= ((r_0_reg_158 & add_ln26_fu_490_p2) & ap_const_lv1_0);
    tmp_13_fu_585_p3 <= (wc_0_1_reg_251 & ap_const_lv1_0);
    tmp_14_fu_603_p4 <= ((r_reg_874 & add_ln26_1_fu_597_p2) & ap_const_lv1_0);
    tmp_15_fu_691_p3 <= (wc_0_2_reg_296 & ap_const_lv1_0);
    tmp_16_fu_709_p4 <= ((xor_ln26_reg_885 & add_ln26_2_fu_703_p2) & ap_const_lv1_0);
    tmp_fu_824_p4 <= bitcast_ln33_fu_820_p1(30 downto 23);
    trunc_ln33_fu_834_p1 <= bitcast_ln33_fu_820_p1(23 - 1 downto 0);
    trunc_ln34_fu_418_p1 <= add_ln34_fu_409_p2(3 - 1 downto 0);
    xor_ln26_fu_387_p2 <= (r_0_reg_158 xor ap_const_lv2_2);
    zext_ln24_1_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_603_p4),6));
    zext_ln24_2_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_709_p4),6));
    zext_ln24_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_496_p4),6));
    zext_ln26_10_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_274),4));
    zext_ln26_11_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_636_p2),6));
    zext_ln26_12_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_659_p2),64));
    zext_ln26_13_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_fu_669_p2),64));
    zext_ln26_14_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_2_reg_319),6));
    zext_ln26_15_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_2_reg_319),4));
    zext_ln26_16_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_10_fu_777_p2),6));
    zext_ln26_17_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_11_fu_800_p2),64));
    zext_ln26_18_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_12_fu_810_p2),64));
    zext_ln26_1_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_478_p3),4));
    zext_ln26_2_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_585_p3),4));
    zext_ln26_3_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_229),6));
    zext_ln26_4_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_229),4));
    zext_ln26_5_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_4_fu_530_p2),6));
    zext_ln26_6_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_553_p2),64));
    zext_ln26_7_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_563_p2),64));
    zext_ln26_8_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_691_p3),4));
    zext_ln26_9_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_274),6));
    zext_ln26_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_375_p3),4));
    zext_ln34_1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_409_p2),5));
    zext_ln34_2_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_182),6));
    zext_ln34_3_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_182),5));
    zext_ln34_4_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_fu_456_p2),64));
    zext_ln34_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_170),4));
end behav;
