// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=1153,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=682,HLS_SYN_LUT=1270,HLS_VERSION=2020_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [3:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] input_r_address0;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [4:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
wire   [4:0] conv_weights_2_address0;
reg    conv_weights_2_ce0;
wire   [31:0] conv_weights_2_q0;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_338_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state18;
wire   [1:0] r_fu_369_p2;
reg   [1:0] r_reg_874;
wire    ap_CS_fsm_state2;
wire   [3:0] zext_ln26_fu_383_p1;
reg   [3:0] zext_ln26_reg_880;
wire   [0:0] icmp_ln8_fu_363_p2;
wire   [1:0] xor_ln26_fu_387_p2;
reg   [1:0] xor_ln26_reg_885;
wire   [1:0] c_fu_399_p2;
reg   [1:0] c_reg_893;
wire    ap_CS_fsm_state3;
wire   [4:0] sub_ln34_fu_430_p2;
reg   [4:0] sub_ln34_reg_898;
wire   [0:0] icmp_ln11_fu_393_p2;
wire   [1:0] f_fu_442_p2;
reg   [1:0] f_reg_906;
wire    ap_CS_fsm_state4;
wire   [5:0] zext_ln34_2_fu_448_p1;
reg   [5:0] zext_ln34_2_reg_911;
wire   [0:0] icmp_ln14_fu_436_p2;
reg   [3:0] conv_out_addr_reg_918;
wire   [1:0] add_ln21_fu_472_p2;
reg   [1:0] add_ln21_reg_926;
wire    ap_CS_fsm_state5;
wire   [3:0] zext_ln26_1_fu_486_p1;
reg   [3:0] zext_ln26_1_reg_931;
wire   [0:0] icmp_ln21_fu_466_p2;
wire   [5:0] zext_ln24_fu_506_p1;
reg   [5:0] zext_ln24_reg_936;
wire   [1:0] add_ln24_fu_516_p2;
reg   [1:0] add_ln24_reg_944;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln24_fu_510_p2;
wire   [31:0] grp_fu_330_p2;
wire    ap_CS_fsm_state9;
wire   [1:0] add_ln21_1_fu_579_p2;
reg   [1:0] add_ln21_1_reg_972;
wire    ap_CS_fsm_state10;
wire   [3:0] zext_ln26_2_fu_593_p1;
reg   [3:0] zext_ln26_2_reg_977;
wire   [0:0] icmp_ln21_1_fu_573_p2;
wire   [5:0] zext_ln24_1_fu_612_p1;
reg   [5:0] zext_ln24_1_reg_982;
wire   [1:0] add_ln24_1_fu_622_p2;
reg   [1:0] add_ln24_1_reg_990;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln24_1_fu_616_p2;
wire    ap_CS_fsm_state14;
wire   [1:0] add_ln21_2_fu_685_p2;
reg   [1:0] add_ln21_2_reg_1018;
wire    ap_CS_fsm_state15;
wire   [3:0] zext_ln26_8_fu_699_p1;
reg   [3:0] zext_ln26_8_reg_1023;
wire   [0:0] icmp_ln21_2_fu_679_p2;
wire   [5:0] zext_ln24_2_fu_718_p1;
reg   [5:0] zext_ln24_2_reg_1028;
wire   [31:0] merge_i_fu_748_p3;
wire   [1:0] add_ln24_2_fu_763_p2;
reg   [1:0] add_ln24_2_reg_1041;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln24_2_fu_757_p2;
wire    ap_CS_fsm_state19;
reg   [1:0] r_0_reg_158;
reg   [1:0] c_0_reg_170;
reg   [1:0] f_0_reg_182;
wire    ap_CS_fsm_state20;
reg   [31:0] w_sum_1_0_reg_194;
reg   [1:0] wc_0_0_reg_206;
reg   [31:0] w_sum_2_0_reg_217;
reg   [1:0] ch_0_0_reg_229;
reg   [31:0] w_sum_1_1_reg_240;
reg   [1:0] wc_0_1_reg_251;
reg   [31:0] w_sum_2_1_reg_262;
reg   [1:0] ch_0_1_reg_274;
reg   [31:0] w_sum_1_2_reg_285;
reg   [1:0] wc_0_2_reg_296;
reg   [31:0] w_sum_2_2_reg_307;
reg   [1:0] ch_0_2_reg_319;
wire   [63:0] zext_ln34_4_fu_461_p1;
wire   [63:0] zext_ln26_6_fu_558_p1;
wire   [63:0] zext_ln26_7_fu_568_p1;
wire   [63:0] zext_ln26_12_fu_664_p1;
wire   [63:0] zext_ln26_13_fu_674_p1;
wire   [63:0] zext_ln26_17_fu_805_p1;
wire   [63:0] zext_ln26_18_fu_815_p1;
reg   [31:0] grp_fu_330_p0;
reg   [31:0] grp_fu_330_p1;
reg   [31:0] grp_fu_338_p0;
wire   [2:0] tmp_10_fu_375_p3;
wire   [3:0] zext_ln34_fu_405_p1;
wire   [3:0] add_ln34_fu_409_p2;
wire   [2:0] trunc_ln34_fu_418_p1;
wire   [4:0] p_shl_cast_fu_422_p3;
wire   [4:0] zext_ln34_1_fu_414_p1;
wire   [4:0] zext_ln34_3_fu_452_p1;
wire   [4:0] add_ln34_1_fu_456_p2;
wire   [2:0] tmp_11_fu_478_p3;
wire   [1:0] add_ln26_fu_490_p2;
wire   [4:0] tmp_12_fu_496_p4;
wire   [3:0] zext_ln26_4_fu_526_p1;
wire   [3:0] add_ln26_4_fu_530_p2;
wire   [5:0] p_shl1_cast_fu_539_p3;
wire   [5:0] zext_ln26_5_fu_535_p1;
wire   [5:0] sub_ln26_fu_547_p2;
wire   [5:0] add_ln26_5_fu_553_p2;
wire   [5:0] zext_ln26_3_fu_522_p1;
wire   [5:0] add_ln26_6_fu_563_p2;
wire   [2:0] tmp_13_fu_585_p3;
wire   [1:0] add_ln26_1_fu_597_p2;
wire   [4:0] tmp_14_fu_603_p4;
wire   [3:0] zext_ln26_10_fu_632_p1;
wire   [3:0] add_ln26_7_fu_636_p2;
wire   [5:0] p_shl2_cast_fu_645_p3;
wire   [5:0] zext_ln26_11_fu_641_p1;
wire   [5:0] sub_ln26_1_fu_653_p2;
wire   [5:0] add_ln26_8_fu_659_p2;
wire   [5:0] zext_ln26_9_fu_628_p1;
wire   [5:0] add_ln26_9_fu_669_p2;
wire   [2:0] tmp_15_fu_691_p3;
wire   [1:0] add_ln26_2_fu_703_p2;
wire   [4:0] tmp_16_fu_709_p4;
wire   [0:0] icmp_ln7_1_fu_728_p2;
wire   [0:0] icmp_ln7_fu_722_p2;
wire   [0:0] empty_15_fu_742_p2;
wire   [31:0] select_ln7_i_fu_734_p3;
wire   [3:0] zext_ln26_15_fu_773_p1;
wire   [3:0] add_ln26_10_fu_777_p2;
wire   [5:0] p_shl3_cast_fu_786_p3;
wire   [5:0] zext_ln26_16_fu_782_p1;
wire   [5:0] sub_ln26_2_fu_794_p2;
wire   [5:0] add_ln26_11_fu_800_p2;
wire   [5:0] zext_ln26_14_fu_769_p1;
wire   [5:0] add_ln26_12_fu_810_p2;
wire   [31:0] bitcast_ln33_fu_820_p1;
wire   [7:0] tmp_fu_824_p4;
wire   [22:0] trunc_ln33_fu_834_p1;
wire   [0:0] icmp_ln33_1_fu_844_p2;
wire   [0:0] icmp_ln33_fu_838_p2;
wire   [0:0] or_ln33_fu_850_p2;
wire   [0:0] tmp_8_fu_347_p2;
wire   [0:0] and_ln33_fu_856_p2;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

conv_1_conv_weighbkb #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_1_conv_weighcud #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_1_conv_weighdEe #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_address0),
    .ce0(conv_weights_2_ce0),
    .q0(conv_weights_2_q0)
);

conv_1_fadd_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_eOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_330_p0),
    .din1(grp_fu_330_p1),
    .ce(1'b1),
    .dout(grp_fu_330_p2)
);

conv_1_fmul_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_fYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_338_p0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_338_p2)
);

conv_1_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_g8j_U3(
    .din0(grp_fu_330_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_8_fu_347_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_436_p2 == 1'd1))) begin
        c_0_reg_170 <= c_reg_893;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_363_p2 == 1'd0))) begin
        c_0_reg_170 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ch_0_0_reg_229 <= add_ln24_reg_944;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_466_p2 == 1'd0))) begin
        ch_0_0_reg_229 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ch_0_1_reg_274 <= add_ln24_1_reg_990;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_1_fu_573_p2 == 1'd0))) begin
        ch_0_1_reg_274 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ch_0_2_reg_319 <= add_ln24_2_reg_1041;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln21_2_fu_679_p2 == 1'd0))) begin
        ch_0_2_reg_319 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        f_0_reg_182 <= f_reg_906;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_393_p2 == 1'd0))) begin
        f_0_reg_182 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_393_p2 == 1'd1))) begin
        r_0_reg_158 <= r_reg_874;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_158 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_510_p2 == 1'd1))) begin
        w_sum_1_0_reg_194 <= w_sum_2_0_reg_217;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_436_p2 == 1'd0))) begin
        w_sum_1_0_reg_194 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_1_fu_616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        w_sum_1_1_reg_240 <= w_sum_2_1_reg_262;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_466_p2 == 1'd1))) begin
        w_sum_1_1_reg_240 <= w_sum_1_0_reg_194;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_2_fu_757_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        w_sum_1_2_reg_285 <= w_sum_2_2_reg_307;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_1_fu_573_p2 == 1'd1))) begin
        w_sum_1_2_reg_285 <= w_sum_1_1_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        w_sum_2_0_reg_217 <= grp_fu_330_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_466_p2 == 1'd0))) begin
        w_sum_2_0_reg_217 <= w_sum_1_0_reg_194;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        w_sum_2_1_reg_262 <= grp_fu_330_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_1_fu_573_p2 == 1'd0))) begin
        w_sum_2_1_reg_262 <= w_sum_1_1_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        w_sum_2_2_reg_307 <= grp_fu_330_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln21_2_fu_679_p2 == 1'd0))) begin
        w_sum_2_2_reg_307 <= w_sum_1_2_reg_285;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_510_p2 == 1'd1))) begin
        wc_0_0_reg_206 <= add_ln21_reg_926;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_436_p2 == 1'd0))) begin
        wc_0_0_reg_206 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_1_fu_616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        wc_0_1_reg_251 <= add_ln21_1_reg_972;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_466_p2 == 1'd1))) begin
        wc_0_1_reg_251 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_2_fu_757_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        wc_0_2_reg_296 <= add_ln21_2_reg_1018;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_1_fu_573_p2 == 1'd1))) begin
        wc_0_2_reg_296 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln21_1_reg_972 <= add_ln21_1_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln21_2_reg_1018 <= add_ln21_2_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln21_reg_926 <= add_ln21_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln24_1_reg_990 <= add_ln24_1_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln24_2_reg_1041 <= add_ln24_2_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln24_reg_944 <= add_ln24_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_893 <= c_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_436_p2 == 1'd0))) begin
        conv_out_addr_reg_918 <= zext_ln34_4_fu_461_p1;
        zext_ln34_2_reg_911[1 : 0] <= zext_ln34_2_fu_448_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_906 <= f_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_874 <= r_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_393_p2 == 1'd0))) begin
        sub_ln34_reg_898 <= sub_ln34_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_363_p2 == 1'd0))) begin
        xor_ln26_reg_885 <= xor_ln26_fu_387_p2;
        zext_ln26_reg_880[2 : 1] <= zext_ln26_fu_383_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_1_fu_573_p2 == 1'd0))) begin
        zext_ln24_1_reg_982[4 : 1] <= zext_ln24_1_fu_612_p1[4 : 1];
        zext_ln26_2_reg_977[2 : 1] <= zext_ln26_2_fu_593_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln21_2_fu_679_p2 == 1'd0))) begin
        zext_ln24_2_reg_1028[4 : 1] <= zext_ln24_2_fu_718_p1[4 : 1];
        zext_ln26_8_reg_1023[2 : 1] <= zext_ln26_8_fu_699_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_466_p2 == 1'd0))) begin
        zext_ln24_reg_936[4 : 1] <= zext_ln24_fu_506_p1[4 : 1];
        zext_ln26_1_reg_931[2 : 1] <= zext_ln26_1_fu_486_p1[2 : 1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_363_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_363_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_weights_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_330_p0 = w_sum_2_2_reg_307;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_330_p0 = w_sum_1_2_reg_285;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_330_p0 = w_sum_2_1_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_330_p0 = w_sum_2_0_reg_217;
    end else begin
        grp_fu_330_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_330_p1 = merge_i_fu_748_p3;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_330_p1 = grp_fu_338_p2;
    end else begin
        grp_fu_330_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_338_p0 = conv_weights_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_338_p0 = conv_weights_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_338_p0 = conv_weights_0_q0;
    end else begin
        grp_fu_338_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        input_r_address0 = zext_ln26_18_fu_815_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address0 = zext_ln26_13_fu_674_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = zext_ln26_7_fu_568_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_363_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_393_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_436_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_466_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_510_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_1_fu_573_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln24_1_fu_616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln21_2_fu_679_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln24_2_fu_757_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_1_fu_579_p2 = (wc_0_1_reg_251 + 2'd1);

assign add_ln21_2_fu_685_p2 = (wc_0_2_reg_296 + 2'd1);

assign add_ln21_fu_472_p2 = (wc_0_0_reg_206 + 2'd1);

assign add_ln24_1_fu_622_p2 = (ch_0_1_reg_274 + 2'd1);

assign add_ln24_2_fu_763_p2 = (ch_0_2_reg_319 + 2'd1);

assign add_ln24_fu_516_p2 = (ch_0_0_reg_229 + 2'd1);

assign add_ln26_10_fu_777_p2 = (zext_ln26_8_reg_1023 + zext_ln26_15_fu_773_p1);

assign add_ln26_11_fu_800_p2 = (sub_ln26_2_fu_794_p2 + zext_ln34_2_reg_911);

assign add_ln26_12_fu_810_p2 = (zext_ln24_2_reg_1028 + zext_ln26_14_fu_769_p1);

assign add_ln26_1_fu_597_p2 = (wc_0_1_reg_251 + c_0_reg_170);

assign add_ln26_2_fu_703_p2 = (wc_0_2_reg_296 + c_0_reg_170);

assign add_ln26_4_fu_530_p2 = (zext_ln26_1_reg_931 + zext_ln26_4_fu_526_p1);

assign add_ln26_5_fu_553_p2 = (sub_ln26_fu_547_p2 + zext_ln34_2_reg_911);

assign add_ln26_6_fu_563_p2 = (zext_ln24_reg_936 + zext_ln26_3_fu_522_p1);

assign add_ln26_7_fu_636_p2 = (zext_ln26_2_reg_977 + zext_ln26_10_fu_632_p1);

assign add_ln26_8_fu_659_p2 = (sub_ln26_1_fu_653_p2 + zext_ln34_2_reg_911);

assign add_ln26_9_fu_669_p2 = (zext_ln24_1_reg_982 + zext_ln26_9_fu_628_p1);

assign add_ln26_fu_490_p2 = (wc_0_0_reg_206 + c_0_reg_170);

assign add_ln34_1_fu_456_p2 = (sub_ln34_reg_898 + zext_ln34_3_fu_452_p1);

assign add_ln34_fu_409_p2 = (zext_ln34_fu_405_p1 + zext_ln26_reg_880);

assign and_ln33_fu_856_p2 = (tmp_8_fu_347_p2 & or_ln33_fu_850_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln33_fu_820_p1 = grp_fu_330_p2;

assign c_fu_399_p2 = (c_0_reg_170 + 2'd1);

assign conv_out_address0 = conv_out_addr_reg_918;

assign conv_out_d0 = ((and_ln33_fu_856_p2[0:0] === 1'b1) ? grp_fu_330_p2 : 32'd0);

assign conv_weights_0_address0 = zext_ln26_6_fu_558_p1;

assign conv_weights_1_address0 = zext_ln26_12_fu_664_p1;

assign conv_weights_2_address0 = zext_ln26_17_fu_805_p1;

assign empty_15_fu_742_p2 = (icmp_ln7_fu_722_p2 | icmp_ln7_1_fu_728_p2);

assign f_fu_442_p2 = (f_0_reg_182 + 2'd1);

assign icmp_ln11_fu_393_p2 = ((c_0_reg_170 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_436_p2 = ((f_0_reg_182 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_573_p2 = ((wc_0_1_reg_251 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_2_fu_679_p2 = ((wc_0_2_reg_296 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_466_p2 = ((wc_0_0_reg_206 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_616_p2 = ((ch_0_1_reg_274 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_757_p2 = ((ch_0_2_reg_319 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_510_p2 = ((ch_0_0_reg_229 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_844_p2 = ((trunc_ln33_fu_834_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_838_p2 = ((tmp_fu_824_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_728_p2 = ((f_0_reg_182 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_722_p2 = ((f_0_reg_182 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_363_p2 = ((r_0_reg_158 == 2'd2) ? 1'b1 : 1'b0);

assign merge_i_fu_748_p3 = ((empty_15_fu_742_p2[0:0] === 1'b1) ? select_ln7_i_fu_734_p3 : 32'd1069547520);

assign or_ln33_fu_850_p2 = (icmp_ln33_fu_838_p2 | icmp_ln33_1_fu_844_p2);

assign p_shl1_cast_fu_539_p3 = {{add_ln26_4_fu_530_p2}, {2'd0}};

assign p_shl2_cast_fu_645_p3 = {{add_ln26_7_fu_636_p2}, {2'd0}};

assign p_shl3_cast_fu_786_p3 = {{add_ln26_10_fu_777_p2}, {2'd0}};

assign p_shl_cast_fu_422_p3 = {{trunc_ln34_fu_418_p1}, {2'd0}};

assign r_fu_369_p2 = (r_0_reg_158 + 2'd1);

assign select_ln7_i_fu_734_p3 = ((icmp_ln7_1_fu_728_p2[0:0] === 1'b1) ? 32'd1073741824 : 32'd1065353216);

assign sub_ln26_1_fu_653_p2 = (p_shl2_cast_fu_645_p3 - zext_ln26_11_fu_641_p1);

assign sub_ln26_2_fu_794_p2 = (p_shl3_cast_fu_786_p3 - zext_ln26_16_fu_782_p1);

assign sub_ln26_fu_547_p2 = (p_shl1_cast_fu_539_p3 - zext_ln26_5_fu_535_p1);

assign sub_ln34_fu_430_p2 = (p_shl_cast_fu_422_p3 - zext_ln34_1_fu_414_p1);

assign tmp_10_fu_375_p3 = {{r_0_reg_158}, {1'd0}};

assign tmp_11_fu_478_p3 = {{wc_0_0_reg_206}, {1'd0}};

assign tmp_12_fu_496_p4 = {{{r_0_reg_158}, {add_ln26_fu_490_p2}}, {1'd0}};

assign tmp_13_fu_585_p3 = {{wc_0_1_reg_251}, {1'd0}};

assign tmp_14_fu_603_p4 = {{{r_reg_874}, {add_ln26_1_fu_597_p2}}, {1'd0}};

assign tmp_15_fu_691_p3 = {{wc_0_2_reg_296}, {1'd0}};

assign tmp_16_fu_709_p4 = {{{xor_ln26_reg_885}, {add_ln26_2_fu_703_p2}}, {1'd0}};

assign tmp_fu_824_p4 = {{bitcast_ln33_fu_820_p1[30:23]}};

assign trunc_ln33_fu_834_p1 = bitcast_ln33_fu_820_p1[22:0];

assign trunc_ln34_fu_418_p1 = add_ln34_fu_409_p2[2:0];

assign xor_ln26_fu_387_p2 = (r_0_reg_158 ^ 2'd2);

assign zext_ln24_1_fu_612_p1 = tmp_14_fu_603_p4;

assign zext_ln24_2_fu_718_p1 = tmp_16_fu_709_p4;

assign zext_ln24_fu_506_p1 = tmp_12_fu_496_p4;

assign zext_ln26_10_fu_632_p1 = ch_0_1_reg_274;

assign zext_ln26_11_fu_641_p1 = add_ln26_7_fu_636_p2;

assign zext_ln26_12_fu_664_p1 = add_ln26_8_fu_659_p2;

assign zext_ln26_13_fu_674_p1 = add_ln26_9_fu_669_p2;

assign zext_ln26_14_fu_769_p1 = ch_0_2_reg_319;

assign zext_ln26_15_fu_773_p1 = ch_0_2_reg_319;

assign zext_ln26_16_fu_782_p1 = add_ln26_10_fu_777_p2;

assign zext_ln26_17_fu_805_p1 = add_ln26_11_fu_800_p2;

assign zext_ln26_18_fu_815_p1 = add_ln26_12_fu_810_p2;

assign zext_ln26_1_fu_486_p1 = tmp_11_fu_478_p3;

assign zext_ln26_2_fu_593_p1 = tmp_13_fu_585_p3;

assign zext_ln26_3_fu_522_p1 = ch_0_0_reg_229;

assign zext_ln26_4_fu_526_p1 = ch_0_0_reg_229;

assign zext_ln26_5_fu_535_p1 = add_ln26_4_fu_530_p2;

assign zext_ln26_6_fu_558_p1 = add_ln26_5_fu_553_p2;

assign zext_ln26_7_fu_568_p1 = add_ln26_6_fu_563_p2;

assign zext_ln26_8_fu_699_p1 = tmp_15_fu_691_p3;

assign zext_ln26_9_fu_628_p1 = ch_0_1_reg_274;

assign zext_ln26_fu_383_p1 = tmp_10_fu_375_p3;

assign zext_ln34_1_fu_414_p1 = add_ln34_fu_409_p2;

assign zext_ln34_2_fu_448_p1 = f_0_reg_182;

assign zext_ln34_3_fu_452_p1 = f_0_reg_182;

assign zext_ln34_4_fu_461_p1 = add_ln34_1_fu_456_p2;

assign zext_ln34_fu_405_p1 = c_0_reg_170;

always @ (posedge ap_clk) begin
    zext_ln26_reg_880[0] <= 1'b0;
    zext_ln26_reg_880[3] <= 1'b0;
    zext_ln34_2_reg_911[5:2] <= 4'b0000;
    zext_ln26_1_reg_931[0] <= 1'b0;
    zext_ln26_1_reg_931[3] <= 1'b0;
    zext_ln24_reg_936[0] <= 1'b0;
    zext_ln24_reg_936[5] <= 1'b0;
    zext_ln26_2_reg_977[0] <= 1'b0;
    zext_ln26_2_reg_977[3] <= 1'b0;
    zext_ln24_1_reg_982[0] <= 1'b0;
    zext_ln24_1_reg_982[5] <= 1'b0;
    zext_ln26_8_reg_1023[0] <= 1'b0;
    zext_ln26_8_reg_1023[3] <= 1'b0;
    zext_ln24_2_reg_1028[0] <= 1'b0;
    zext_ln24_2_reg_1028[5] <= 1'b0;
end

endmodule //conv_1
