-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=289,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=531,HLS_SYN_LUT=1062,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3FC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_221 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_0_reg_232 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_255 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln18_reg_728_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_296_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln8_reg_689 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln11_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_1_fu_322_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_699 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_2_fu_372_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_2_reg_705 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_3_fu_380_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_3_reg_712 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_3_fu_420_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln34_3_reg_718 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_out_addr_reg_723 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln18_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_fu_445_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_reg_732 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln26_fu_463_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_reg_737 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_1_fu_471_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_1_reg_742 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weights_1_load_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_1_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_fu_578_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_787 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal merge_i_fu_607_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal f_fu_616_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_reg_807 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln11_fu_627_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln11_reg_812 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten21_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal r_0_reg_176 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten7_reg_187 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_199 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_0_reg_210 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_225_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_236_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_1_phi_fu_247_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_259_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_5_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_3_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_4_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_569_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_272_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_302_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_330_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln14_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_314_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln34_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_360_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_fu_338_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_1_fu_388_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_392_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln34_fu_402_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_406_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_2_fu_398_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln34_fu_414_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_4_fu_424_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_1_fu_428_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_451_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_483_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_1_fu_491_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_479_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_2_fu_510_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_fu_501_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_2_fu_514_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln26_fu_520_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_1_fu_526_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_3_fu_532_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_fu_505_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln26_1_fu_543_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_548_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln26_fu_563_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln7_1_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_5_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_i_fu_593_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_1_fu_621_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln33_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_638_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_648_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_1_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1_fadd_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_weighbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_1_conv_weighbkb
    generic map (
        DataWidth => 32,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_1_conv_weighcud
    generic map (
        DataWidth => 32,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_1_fadd_32ns_dEe_U1 : component conv_1_fadd_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_266_p0,
        din1 => grp_fu_266_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    conv_1_fmul_32ns_eOg_U2 : component conv_1_fmul_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_272_p0,
        din1 => grp_fu_272_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_272_p2);

    conv_1_fcmp_32ns_fYi_U3 : component conv_1_fcmp_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_266_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_4_fu_279_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln8_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c_0_reg_199 <= select_ln34_3_reg_712;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_199 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                f_0_reg_210 <= f_reg_807;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_210 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten21_reg_165 <= add_ln8_reg_689;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten21_reg_165 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten7_reg_187 <= select_ln11_reg_812;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten7_reg_187 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_728 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_221 <= add_ln18_reg_732;
            elsif (((icmp_ln8_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_221 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_0_reg_176 <= select_ln34_1_reg_699;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_176 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_728_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                w_sum_1_reg_243 <= grp_fu_266_p2;
            elsif (((icmp_ln8_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_1_reg_243 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_728 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                wc_0_reg_255 <= wc_reg_787;
            elsif (((icmp_ln8_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_255 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_728 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                wr_0_reg_232 <= select_ln26_1_reg_742;
            elsif (((icmp_ln8_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_232 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln18_reg_732 <= add_ln18_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_689 <= add_ln8_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_723 <= zext_ln34_5_fu_434_p1(4 - 1 downto 0);
                icmp_ln11_reg_694 <= icmp_ln11_fu_308_p2;
                select_ln34_1_reg_699 <= select_ln34_1_fu_322_p3;
                select_ln34_2_reg_705 <= select_ln34_2_fu_372_p3;
                select_ln34_3_reg_712 <= select_ln34_3_fu_380_p3;
                    zext_ln34_3_reg_718(1 downto 0) <= zext_ln34_3_fu_420_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln18_reg_728 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv_weights_1_load_reg_777 <= conv_weights_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                f_reg_807 <= f_fu_616_p2;
                select_ln11_reg_812 <= select_ln11_fu_627_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln18_reg_728 <= icmp_ln18_fu_439_p2;
                icmp_ln18_reg_728_pp0_iter1_reg <= icmp_ln18_reg_728;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln18_reg_728 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                input_load_1_reg_782 <= input_r_q1;
                wc_reg_787 <= wc_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_439_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln26_1_reg_742 <= select_ln26_1_fu_471_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_439_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln26_reg_737 <= select_ln26_fu_463_p3;
            end if;
        end if;
    end process;
    zext_ln34_3_reg_718(5 downto 2) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln8_fu_290_p2, ap_CS_fsm_state2, icmp_ln18_fu_439_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_290_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln18_fu_439_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln18_fu_439_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln11_1_fu_621_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten7_reg_187));
    add_ln18_fu_445_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_225_p4) + unsigned(ap_const_lv4_1));
    add_ln26_1_fu_543_p2 <= std_logic_vector(unsigned(select_ln34_3_reg_712) + unsigned(select_ln26_fu_463_p3));
    add_ln26_2_fu_514_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_510_p1) + unsigned(sext_ln26_fu_501_p1));
    add_ln26_3_fu_532_p2 <= std_logic_vector(unsigned(zext_ln34_3_reg_718) + unsigned(sub_ln26_1_fu_526_p2));
    add_ln26_fu_505_p2 <= std_logic_vector(unsigned(select_ln34_1_reg_699) + unsigned(select_ln26_1_fu_471_p3));
    add_ln34_1_fu_428_p2 <= std_logic_vector(unsigned(sub_ln34_fu_414_p2) + unsigned(zext_ln34_4_fu_424_p1));
    add_ln34_fu_392_p2 <= std_logic_vector(unsigned(zext_ln34_fu_338_p1) + unsigned(zext_ln34_1_fu_388_p1));
    add_ln8_fu_296_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_165) + unsigned(ap_const_lv4_1));
    and_ln33_fu_670_p2 <= (tmp_4_fu_279_p2 and or_ln33_fu_664_p2);
    and_ln34_fu_354_p2 <= (xor_ln34_fu_342_p2 and icmp_ln14_fu_348_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_439_p2)
    begin
        if ((icmp_ln18_fu_439_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln8_fu_290_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_290_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_225_p4_assign_proc : process(indvar_flatten_reg_221, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln18_reg_728, add_ln18_reg_732, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_728 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_225_p4 <= add_ln18_reg_732;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_225_p4 <= indvar_flatten_reg_221;
        end if; 
    end process;


    ap_phi_mux_w_sum_1_phi_fu_247_p4_assign_proc : process(w_sum_1_reg_243, ap_CS_fsm_pp0_stage0, icmp_ln18_reg_728_pp0_iter1_reg, grp_fu_266_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_728_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_w_sum_1_phi_fu_247_p4 <= grp_fu_266_p2;
        else 
            ap_phi_mux_w_sum_1_phi_fu_247_p4 <= w_sum_1_reg_243;
        end if; 
    end process;


    ap_phi_mux_wc_0_phi_fu_259_p4_assign_proc : process(wc_0_reg_255, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln18_reg_728, wc_reg_787, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_728 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wc_0_phi_fu_259_p4 <= wc_reg_787;
        else 
            ap_phi_mux_wc_0_phi_fu_259_p4 <= wc_0_reg_255;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_236_p4_assign_proc : process(wr_0_reg_232, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln18_reg_728, select_ln26_1_reg_742, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_728 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wr_0_phi_fu_236_p4 <= select_ln26_1_reg_742;
        else 
            ap_phi_mux_wr_0_phi_fu_236_p4 <= wr_0_reg_232;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_290_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_290_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln33_fu_634_p1 <= grp_fu_266_p2;
    c_fu_360_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln34_fu_314_p3));
    conv_out_address0 <= conv_out_addr_reg_723;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_266_p2 when (and_ln33_fu_670_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln26_3_fu_537_p1(5 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln26_3_fu_537_p1(5 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_5_fu_601_p2 <= (icmp_ln7_fu_583_p2 or icmp_ln7_1_fu_588_p2);
    f_fu_616_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln34_2_reg_705));

    grp_fu_266_p0_assign_proc : process(w_sum_1_reg_243, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, grp_fu_266_p2, ap_CS_fsm_state8, ap_block_pp0_stage0, ap_phi_mux_w_sum_1_phi_fu_247_p4, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_266_p0 <= w_sum_1_reg_243;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_266_p0 <= grp_fu_266_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_266_p0 <= ap_phi_mux_w_sum_1_phi_fu_247_p4;
        else 
            grp_fu_266_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_266_p1_assign_proc : process(grp_fu_272_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, merge_i_fu_607_p3, ap_CS_fsm_state8, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_266_p1 <= merge_i_fu_607_p3;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_266_p1 <= grp_fu_272_p2;
        else 
            grp_fu_266_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_272_p0_assign_proc : process(conv_weights_0_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, conv_weights_1_load_reg_777, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_272_p0 <= conv_weights_1_load_reg_777;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_272_p0 <= conv_weights_0_q0;
        else 
            grp_fu_272_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_272_p1_assign_proc : process(input_r_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, input_load_1_reg_782, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_272_p1 <= input_load_1_reg_782;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_272_p1 <= input_r_q0;
        else 
            grp_fu_272_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_308_p2 <= "1" when (indvar_flatten7_reg_187 = ap_const_lv4_6) else "0";
    icmp_ln14_fu_348_p2 <= "1" when (f_0_reg_210 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_439_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_225_p4 = ap_const_lv4_9) else "0";
    icmp_ln21_fu_457_p2 <= "1" when (ap_phi_mux_wc_0_phi_fu_259_p4 = ap_const_lv2_3) else "0";
    icmp_ln33_1_fu_658_p2 <= "1" when (trunc_ln33_fu_648_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_652_p2 <= "0" when (tmp_fu_638_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_1_fu_588_p2 <= "1" when (select_ln34_2_reg_705 = ap_const_lv2_1) else "0";
    icmp_ln7_fu_583_p2 <= "1" when (select_ln34_2_reg_705 = ap_const_lv2_0) else "0";
    icmp_ln8_fu_290_p2 <= "1" when (indvar_flatten21_reg_165 = ap_const_lv4_C) else "0";
    input_r_address0 <= zext_ln26_4_fu_558_p1(5 - 1 downto 0);
    input_r_address1 <= tmp_9_fu_569_p3(5 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    merge_i_fu_607_p3 <= 
        select_ln7_i_fu_593_p3 when (empty_5_fu_601_p2(0) = '1') else 
        ap_const_lv32_3FC00000;
    or_ln26_fu_563_p2 <= (tmp_8_fu_548_p4 or ap_const_lv5_1);
    or_ln33_fu_664_p2 <= (icmp_ln33_fu_652_p2 or icmp_ln33_1_fu_658_p2);
    or_ln34_fu_366_p2 <= (icmp_ln11_fu_308_p2 or and_ln34_fu_354_p2);
    p_shl_cast_fu_406_p3 <= (trunc_ln34_fu_402_p1 & ap_const_lv2_0);
    r_fu_302_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(r_0_reg_176));
    select_ln11_fu_627_p3 <= 
        ap_const_lv4_1 when (icmp_ln11_reg_694(0) = '1') else 
        add_ln11_1_fu_621_p2;
    select_ln26_1_fu_471_p3 <= 
        wr_fu_451_p2 when (icmp_ln21_fu_457_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_236_p4;
    select_ln26_fu_463_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_457_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_259_p4;
    select_ln34_1_fu_322_p3 <= 
        r_fu_302_p2 when (icmp_ln11_fu_308_p2(0) = '1') else 
        r_0_reg_176;
    select_ln34_2_fu_372_p3 <= 
        ap_const_lv2_0 when (or_ln34_fu_366_p2(0) = '1') else 
        f_0_reg_210;
    select_ln34_3_fu_380_p3 <= 
        c_fu_360_p2 when (and_ln34_fu_354_p2(0) = '1') else 
        select_ln34_fu_314_p3;
    select_ln34_fu_314_p3 <= 
        ap_const_lv2_0 when (icmp_ln11_fu_308_p2(0) = '1') else 
        c_0_reg_199;
    select_ln7_i_fu_593_p3 <= 
        ap_const_lv32_40000000 when (icmp_ln7_1_fu_588_p2(0) = '1') else 
        ap_const_lv32_3F800000;
        sext_ln26_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_495_p2),6));

    shl_ln26_fu_520_p2 <= std_logic_vector(shift_left(unsigned(add_ln26_2_fu_514_p2),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    sub_ln26_1_fu_526_p2 <= std_logic_vector(unsigned(shl_ln26_fu_520_p2) - unsigned(add_ln26_2_fu_514_p2));
    sub_ln26_fu_495_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_491_p1) - unsigned(zext_ln26_fu_479_p1));
    sub_ln34_fu_414_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_406_p3) - unsigned(zext_ln34_2_fu_398_p1));
    tmp_1_fu_330_p3 <= (select_ln34_1_fu_322_p3 & ap_const_lv1_0);
    tmp_5_fu_483_p3 <= (select_ln26_1_fu_471_p3 & ap_const_lv2_0);
    tmp_8_fu_548_p4 <= ((add_ln26_fu_505_p2 & add_ln26_1_fu_543_p2) & ap_const_lv1_0);
    tmp_9_fu_569_p3 <= (ap_const_lv59_0 & or_ln26_fu_563_p2);
    tmp_fu_638_p4 <= bitcast_ln33_fu_634_p1(30 downto 23);
    trunc_ln33_fu_648_p1 <= bitcast_ln33_fu_634_p1(23 - 1 downto 0);
    trunc_ln34_fu_402_p1 <= add_ln34_fu_392_p2(3 - 1 downto 0);
    wc_fu_578_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln26_reg_737));
    wr_fu_451_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_wr_0_phi_fu_236_p4));
    xor_ln34_fu_342_p2 <= (icmp_ln11_fu_308_p2 xor ap_const_lv1_1);
    zext_ln26_1_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_483_p3),5));
    zext_ln26_2_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_fu_463_p3),6));
    zext_ln26_3_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_532_p2),64));
    zext_ln26_4_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_548_p4),64));
    zext_ln26_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_1_fu_471_p3),5));
    zext_ln34_1_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_3_fu_380_p3),4));
    zext_ln34_2_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_392_p2),5));
    zext_ln34_3_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_2_fu_372_p3),6));
    zext_ln34_4_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_2_fu_372_p3),5));
    zext_ln34_5_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_fu_428_p2),64));
    zext_ln34_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_330_p3),4));
end behav;
