// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=289,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=531,HLS_SYN_LUT=1062,HLS_VERSION=2020_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_pp0_stage1 = 6'd8;
parameter    ap_ST_fsm_state8 = 6'd16;
parameter    ap_ST_fsm_state9 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [4:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [3:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg input_r_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [4:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
reg   [3:0] indvar_flatten_reg_221;
reg   [1:0] wr_0_reg_232;
reg   [31:0] w_sum_1_reg_243;
reg   [1:0] wc_0_reg_255;
wire   [31:0] grp_fu_272_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln18_reg_728;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln18_reg_728_pp0_iter1_reg;
wire   [0:0] icmp_ln8_fu_290_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln8_fu_296_p2;
reg   [3:0] add_ln8_reg_689;
wire   [0:0] icmp_ln11_fu_308_p2;
reg   [0:0] icmp_ln11_reg_694;
wire   [1:0] select_ln34_1_fu_322_p3;
reg   [1:0] select_ln34_1_reg_699;
wire   [1:0] select_ln34_2_fu_372_p3;
reg   [1:0] select_ln34_2_reg_705;
wire   [1:0] select_ln34_3_fu_380_p3;
reg   [1:0] select_ln34_3_reg_712;
wire   [5:0] zext_ln34_3_fu_420_p1;
reg   [5:0] zext_ln34_3_reg_718;
reg   [3:0] conv_out_addr_reg_723;
wire   [0:0] icmp_ln18_fu_439_p2;
wire   [3:0] add_ln18_fu_445_p2;
reg   [3:0] add_ln18_reg_732;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln26_fu_463_p3;
reg   [1:0] select_ln26_reg_737;
wire   [1:0] select_ln26_1_fu_471_p3;
reg   [1:0] select_ln26_1_reg_742;
reg   [31:0] conv_weights_1_load_reg_777;
reg   [31:0] input_load_1_reg_782;
wire   [1:0] wc_fu_578_p2;
reg   [1:0] wc_reg_787;
wire   [31:0] grp_fu_266_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] merge_i_fu_607_p3;
wire    ap_CS_fsm_state8;
wire   [1:0] f_fu_616_p2;
reg   [1:0] f_reg_807;
wire   [3:0] select_ln11_fu_627_p3;
reg   [3:0] select_ln11_reg_812;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] indvar_flatten21_reg_165;
wire    ap_CS_fsm_state9;
reg   [1:0] r_0_reg_176;
reg   [3:0] indvar_flatten7_reg_187;
reg   [1:0] c_0_reg_199;
reg   [1:0] f_0_reg_210;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_225_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_236_p4;
reg   [31:0] ap_phi_mux_w_sum_1_phi_fu_247_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_259_p4;
wire   [63:0] zext_ln34_5_fu_434_p1;
wire   [63:0] zext_ln26_3_fu_537_p1;
wire   [63:0] zext_ln26_4_fu_558_p1;
wire   [63:0] tmp_9_fu_569_p3;
reg   [31:0] grp_fu_266_p0;
reg   [31:0] grp_fu_266_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] grp_fu_272_p0;
reg   [31:0] grp_fu_272_p1;
wire   [1:0] r_fu_302_p2;
wire   [2:0] tmp_1_fu_330_p3;
wire   [0:0] icmp_ln14_fu_348_p2;
wire   [0:0] xor_ln34_fu_342_p2;
wire   [1:0] select_ln34_fu_314_p3;
wire   [0:0] and_ln34_fu_354_p2;
wire   [0:0] or_ln34_fu_366_p2;
wire   [1:0] c_fu_360_p2;
wire   [3:0] zext_ln34_fu_338_p1;
wire   [3:0] zext_ln34_1_fu_388_p1;
wire   [3:0] add_ln34_fu_392_p2;
wire   [2:0] trunc_ln34_fu_402_p1;
wire   [4:0] p_shl_cast_fu_406_p3;
wire   [4:0] zext_ln34_2_fu_398_p1;
wire   [4:0] sub_ln34_fu_414_p2;
wire   [4:0] zext_ln34_4_fu_424_p1;
wire   [4:0] add_ln34_1_fu_428_p2;
wire   [0:0] icmp_ln21_fu_457_p2;
wire   [1:0] wr_fu_451_p2;
wire   [3:0] tmp_5_fu_483_p3;
wire   [4:0] zext_ln26_1_fu_491_p1;
wire   [4:0] zext_ln26_fu_479_p1;
wire   [4:0] sub_ln26_fu_495_p2;
wire   [5:0] zext_ln26_2_fu_510_p1;
wire  signed [5:0] sext_ln26_fu_501_p1;
wire   [5:0] add_ln26_2_fu_514_p2;
wire   [5:0] shl_ln26_fu_520_p2;
wire   [5:0] sub_ln26_1_fu_526_p2;
wire   [5:0] add_ln26_3_fu_532_p2;
wire   [1:0] add_ln26_fu_505_p2;
wire   [1:0] add_ln26_1_fu_543_p2;
wire   [4:0] tmp_8_fu_548_p4;
wire   [4:0] or_ln26_fu_563_p2;
wire   [0:0] icmp_ln7_1_fu_588_p2;
wire   [0:0] icmp_ln7_fu_583_p2;
wire   [0:0] empty_5_fu_601_p2;
wire   [31:0] select_ln7_i_fu_593_p3;
wire   [3:0] add_ln11_1_fu_621_p2;
wire   [31:0] bitcast_ln33_fu_634_p1;
wire   [7:0] tmp_fu_638_p4;
wire   [22:0] trunc_ln33_fu_648_p1;
wire   [0:0] icmp_ln33_1_fu_658_p2;
wire   [0:0] icmp_ln33_fu_652_p2;
wire   [0:0] or_ln33_fu_664_p2;
wire   [0:0] tmp_4_fu_279_p2;
wire   [0:0] and_ln33_fu_670_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

conv_1_conv_weighbkb #(
    .DataWidth( 32 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_1_conv_weighcud #(
    .DataWidth( 32 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_1_fadd_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_dEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_266_p0),
    .din1(grp_fu_266_p1),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

conv_1_fmul_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_eOg_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_272_p0),
    .din1(grp_fu_272_p1),
    .ce(1'b1),
    .dout(grp_fu_272_p2)
);

conv_1_fcmp_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_fYi_U3(
    .din0(grp_fu_266_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_4_fu_279_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln8_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln8_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_0_reg_199 <= select_ln34_3_reg_712;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_199 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        f_0_reg_210 <= f_reg_807;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_210 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten21_reg_165 <= add_ln8_reg_689;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten21_reg_165 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten7_reg_187 <= select_ln11_reg_812;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten7_reg_187 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_728 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_221 <= add_ln18_reg_732;
    end else if (((icmp_ln8_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_221 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_0_reg_176 <= select_ln34_1_reg_699;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_176 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_728_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        w_sum_1_reg_243 <= grp_fu_266_p2;
    end else if (((icmp_ln8_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_1_reg_243 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_728 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wc_0_reg_255 <= wc_reg_787;
    end else if (((icmp_ln8_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wc_0_reg_255 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_728 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wr_0_reg_232 <= select_ln26_1_reg_742;
    end else if (((icmp_ln8_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_232 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln18_reg_732 <= add_ln18_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_689 <= add_ln8_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_addr_reg_723 <= zext_ln34_5_fu_434_p1;
        icmp_ln11_reg_694 <= icmp_ln11_fu_308_p2;
        select_ln34_1_reg_699 <= select_ln34_1_fu_322_p3;
        select_ln34_2_reg_705 <= select_ln34_2_fu_372_p3;
        select_ln34_3_reg_712 <= select_ln34_3_fu_380_p3;
        zext_ln34_3_reg_718[1 : 0] <= zext_ln34_3_fu_420_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln18_reg_728 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv_weights_1_load_reg_777 <= conv_weights_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        f_reg_807 <= f_fu_616_p2;
        select_ln11_reg_812 <= select_ln11_fu_627_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln18_reg_728 <= icmp_ln18_fu_439_p2;
        icmp_ln18_reg_728_pp0_iter1_reg <= icmp_ln18_reg_728;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln18_reg_728 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_load_1_reg_782 <= input_r_q1;
        wc_reg_787 <= wc_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_439_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln26_1_reg_742 <= select_ln26_1_fu_471_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_439_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln26_reg_737 <= select_ln26_fu_463_p3;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_439_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_290_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_728 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_225_p4 = add_ln18_reg_732;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_225_p4 = indvar_flatten_reg_221;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_728_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_w_sum_1_phi_fu_247_p4 = grp_fu_266_p2;
    end else begin
        ap_phi_mux_w_sum_1_phi_fu_247_p4 = w_sum_1_reg_243;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_728 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wc_0_phi_fu_259_p4 = wc_reg_787;
    end else begin
        ap_phi_mux_wc_0_phi_fu_259_p4 = wc_0_reg_255;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_728 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wr_0_phi_fu_236_p4 = select_ln26_1_reg_742;
    end else begin
        ap_phi_mux_wr_0_phi_fu_236_p4 = wr_0_reg_232;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_290_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_266_p0 = w_sum_1_reg_243;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_266_p0 = grp_fu_266_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_266_p0 = ap_phi_mux_w_sum_1_phi_fu_247_p4;
    end else begin
        grp_fu_266_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_266_p1 = merge_i_fu_607_p3;
    end else if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_266_p1 = grp_fu_272_p2;
    end else begin
        grp_fu_266_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_272_p0 = conv_weights_1_load_reg_777;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_272_p0 = conv_weights_0_q0;
    end else begin
        grp_fu_272_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_272_p1 = input_load_1_reg_782;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_272_p1 = input_r_q0;
    end else begin
        grp_fu_272_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_290_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln18_fu_439_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln18_fu_439_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_621_p2 = (4'd1 + indvar_flatten7_reg_187);

assign add_ln18_fu_445_p2 = (ap_phi_mux_indvar_flatten_phi_fu_225_p4 + 4'd1);

assign add_ln26_1_fu_543_p2 = (select_ln34_3_reg_712 + select_ln26_fu_463_p3);

assign add_ln26_2_fu_514_p2 = ($signed(zext_ln26_2_fu_510_p1) + $signed(sext_ln26_fu_501_p1));

assign add_ln26_3_fu_532_p2 = (zext_ln34_3_reg_718 + sub_ln26_1_fu_526_p2);

assign add_ln26_fu_505_p2 = (select_ln34_1_reg_699 + select_ln26_1_fu_471_p3);

assign add_ln34_1_fu_428_p2 = (sub_ln34_fu_414_p2 + zext_ln34_4_fu_424_p1);

assign add_ln34_fu_392_p2 = (zext_ln34_fu_338_p1 + zext_ln34_1_fu_388_p1);

assign add_ln8_fu_296_p2 = (indvar_flatten21_reg_165 + 4'd1);

assign and_ln33_fu_670_p2 = (tmp_4_fu_279_p2 & or_ln33_fu_664_p2);

assign and_ln34_fu_354_p2 = (xor_ln34_fu_342_p2 & icmp_ln14_fu_348_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln33_fu_634_p1 = grp_fu_266_p2;

assign c_fu_360_p2 = (2'd1 + select_ln34_fu_314_p3);

assign conv_out_address0 = conv_out_addr_reg_723;

assign conv_out_d0 = ((and_ln33_fu_670_p2[0:0] === 1'b1) ? grp_fu_266_p2 : 32'd0);

assign conv_weights_0_address0 = zext_ln26_3_fu_537_p1;

assign conv_weights_1_address0 = zext_ln26_3_fu_537_p1;

assign empty_5_fu_601_p2 = (icmp_ln7_fu_583_p2 | icmp_ln7_1_fu_588_p2);

assign f_fu_616_p2 = (2'd1 + select_ln34_2_reg_705);

assign icmp_ln11_fu_308_p2 = ((indvar_flatten7_reg_187 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_348_p2 = ((f_0_reg_210 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_439_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_225_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_457_p2 = ((ap_phi_mux_wc_0_phi_fu_259_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_658_p2 = ((trunc_ln33_fu_648_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_652_p2 = ((tmp_fu_638_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_588_p2 = ((select_ln34_2_reg_705 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_583_p2 = ((select_ln34_2_reg_705 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_290_p2 = ((indvar_flatten21_reg_165 == 4'd12) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln26_4_fu_558_p1;

assign input_r_address1 = tmp_9_fu_569_p3;

assign merge_i_fu_607_p3 = ((empty_5_fu_601_p2[0:0] === 1'b1) ? select_ln7_i_fu_593_p3 : 32'd1069547520);

assign or_ln26_fu_563_p2 = (tmp_8_fu_548_p4 | 5'd1);

assign or_ln33_fu_664_p2 = (icmp_ln33_fu_652_p2 | icmp_ln33_1_fu_658_p2);

assign or_ln34_fu_366_p2 = (icmp_ln11_fu_308_p2 | and_ln34_fu_354_p2);

assign p_shl_cast_fu_406_p3 = {{trunc_ln34_fu_402_p1}, {2'd0}};

assign r_fu_302_p2 = (2'd1 + r_0_reg_176);

assign select_ln11_fu_627_p3 = ((icmp_ln11_reg_694[0:0] === 1'b1) ? 4'd1 : add_ln11_1_fu_621_p2);

assign select_ln26_1_fu_471_p3 = ((icmp_ln21_fu_457_p2[0:0] === 1'b1) ? wr_fu_451_p2 : ap_phi_mux_wr_0_phi_fu_236_p4);

assign select_ln26_fu_463_p3 = ((icmp_ln21_fu_457_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_259_p4);

assign select_ln34_1_fu_322_p3 = ((icmp_ln11_fu_308_p2[0:0] === 1'b1) ? r_fu_302_p2 : r_0_reg_176);

assign select_ln34_2_fu_372_p3 = ((or_ln34_fu_366_p2[0:0] === 1'b1) ? 2'd0 : f_0_reg_210);

assign select_ln34_3_fu_380_p3 = ((and_ln34_fu_354_p2[0:0] === 1'b1) ? c_fu_360_p2 : select_ln34_fu_314_p3);

assign select_ln34_fu_314_p3 = ((icmp_ln11_fu_308_p2[0:0] === 1'b1) ? 2'd0 : c_0_reg_199);

assign select_ln7_i_fu_593_p3 = ((icmp_ln7_1_fu_588_p2[0:0] === 1'b1) ? 32'd1073741824 : 32'd1065353216);

assign sext_ln26_fu_501_p1 = $signed(sub_ln26_fu_495_p2);

assign shl_ln26_fu_520_p2 = add_ln26_2_fu_514_p2 << 6'd2;

assign sub_ln26_1_fu_526_p2 = (shl_ln26_fu_520_p2 - add_ln26_2_fu_514_p2);

assign sub_ln26_fu_495_p2 = (zext_ln26_1_fu_491_p1 - zext_ln26_fu_479_p1);

assign sub_ln34_fu_414_p2 = (p_shl_cast_fu_406_p3 - zext_ln34_2_fu_398_p1);

assign tmp_1_fu_330_p3 = {{select_ln34_1_fu_322_p3}, {1'd0}};

assign tmp_5_fu_483_p3 = {{select_ln26_1_fu_471_p3}, {2'd0}};

assign tmp_8_fu_548_p4 = {{{add_ln26_fu_505_p2}, {add_ln26_1_fu_543_p2}}, {1'd0}};

assign tmp_9_fu_569_p3 = {{59'd0}, {or_ln26_fu_563_p2}};

assign tmp_fu_638_p4 = {{bitcast_ln33_fu_634_p1[30:23]}};

assign trunc_ln33_fu_648_p1 = bitcast_ln33_fu_634_p1[22:0];

assign trunc_ln34_fu_402_p1 = add_ln34_fu_392_p2[2:0];

assign wc_fu_578_p2 = (2'd1 + select_ln26_reg_737);

assign wr_fu_451_p2 = (2'd1 + ap_phi_mux_wr_0_phi_fu_236_p4);

assign xor_ln34_fu_342_p2 = (icmp_ln11_fu_308_p2 ^ 1'd1);

assign zext_ln26_1_fu_491_p1 = tmp_5_fu_483_p3;

assign zext_ln26_2_fu_510_p1 = select_ln26_fu_463_p3;

assign zext_ln26_3_fu_537_p1 = add_ln26_3_fu_532_p2;

assign zext_ln26_4_fu_558_p1 = tmp_8_fu_548_p4;

assign zext_ln26_fu_479_p1 = select_ln26_1_fu_471_p3;

assign zext_ln34_1_fu_388_p1 = select_ln34_3_fu_380_p3;

assign zext_ln34_2_fu_398_p1 = add_ln34_fu_392_p2;

assign zext_ln34_3_fu_420_p1 = select_ln34_2_fu_372_p3;

assign zext_ln34_4_fu_424_p1 = select_ln34_2_fu_372_p3;

assign zext_ln34_5_fu_434_p1 = add_ln34_1_fu_428_p2;

assign zext_ln34_fu_338_p1 = tmp_1_fu_330_p3;

always @ (posedge ap_clk) begin
    zext_ln34_3_reg_718[5:2] <= 4'b0000;
end

endmodule //conv_1
