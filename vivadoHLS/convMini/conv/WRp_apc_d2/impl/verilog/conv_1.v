// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=289,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=901,HLS_SYN_LUT=1187,HLS_VERSION=2020_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_0_address1,
        input_0_ce1,
        input_0_q1,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_1_address1,
        input_1_ce1,
        input_1_q1,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_2_address1,
        input_2_ce1,
        input_2_q1,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_3_address1,
        input_3_ce1,
        input_3_q1,
        conv_out_0_address0,
        conv_out_0_ce0,
        conv_out_0_we0,
        conv_out_0_d0,
        conv_out_1_address0,
        conv_out_1_ce0,
        conv_out_1_we0,
        conv_out_1_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_pp0_stage1 = 10'd8;
parameter    ap_ST_fsm_pp0_stage2 = 10'd16;
parameter    ap_ST_fsm_pp0_stage3 = 10'd32;
parameter    ap_ST_fsm_pp0_stage4 = 10'd64;
parameter    ap_ST_fsm_pp0_stage5 = 10'd128;
parameter    ap_ST_fsm_state12 = 10'd256;
parameter    ap_ST_fsm_state13 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [2:0] input_0_address1;
output   input_0_ce1;
input  [31:0] input_0_q1;
output  [2:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [2:0] input_1_address1;
output   input_1_ce1;
input  [31:0] input_1_q1;
output  [2:0] input_2_address0;
output   input_2_ce0;
input  [31:0] input_2_q0;
output  [2:0] input_2_address1;
output   input_2_ce1;
input  [31:0] input_2_q1;
output  [2:0] input_3_address0;
output   input_3_ce0;
input  [31:0] input_3_q0;
output  [2:0] input_3_address1;
output   input_3_ce1;
input  [31:0] input_3_q1;
output  [2:0] conv_out_0_address0;
output   conv_out_0_ce0;
output   conv_out_0_we0;
output  [31:0] conv_out_0_d0;
output  [2:0] conv_out_1_address0;
output   conv_out_1_ce0;
output   conv_out_1_we0;
output  [31:0] conv_out_1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_0_ce1;
reg input_1_ce0;
reg input_1_ce1;
reg input_2_ce0;
reg input_2_ce1;
reg input_3_ce0;
reg input_3_ce1;
reg conv_out_0_ce0;
reg conv_out_0_we0;
reg conv_out_1_ce0;
reg conv_out_1_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] conv_weights_0_0_address0;
reg    conv_weights_0_0_ce0;
wire   [31:0] conv_weights_0_0_q0;
wire   [3:0] conv_weights_0_1_address0;
reg    conv_weights_0_1_ce0;
wire   [31:0] conv_weights_0_1_q0;
wire   [3:0] conv_weights_1_0_address0;
reg    conv_weights_1_0_ce0;
wire   [31:0] conv_weights_1_0_q0;
wire   [3:0] conv_weights_1_1_address0;
reg    conv_weights_1_1_ce0;
wire   [31:0] conv_weights_1_1_q0;
wire   [3:0] conv_weights_2_0_address0;
reg    conv_weights_2_0_ce0;
wire   [31:0] conv_weights_2_0_q0;
wire   [3:0] conv_weights_2_1_address0;
reg    conv_weights_2_1_ce0;
wire   [31:0] conv_weights_2_1_q0;
reg   [1:0] wr_0_reg_366;
reg   [31:0] w_sum_0_reg_377;
wire   [31:0] grp_fu_395_p2;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln18_reg_854;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln18_reg_854_pp0_iter1_reg;
wire   [31:0] grp_fu_389_p2;
wire   [0:0] icmp_ln8_fu_417_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln8_fu_423_p2;
reg   [3:0] add_ln8_reg_801;
wire   [0:0] icmp_ln11_fu_435_p2;
reg   [0:0] icmp_ln11_reg_806;
wire   [1:0] select_ln34_1_fu_449_p3;
reg   [1:0] select_ln34_1_reg_811;
wire   [1:0] select_ln26_6_fu_515_p3;
reg   [1:0] select_ln26_6_reg_817;
wire   [0:0] select_ln26_7_fu_527_p3;
reg   [0:0] select_ln26_7_reg_824;
wire   [1:0] select_ln11_fu_535_p3;
reg   [1:0] select_ln11_reg_834;
wire   [4:0] zext_ln34_1_fu_543_p1;
reg   [4:0] zext_ln34_1_reg_839;
reg   [2:0] conv_out_0_addr_reg_844;
reg   [2:0] conv_out_1_addr_reg_849;
wire   [0:0] icmp_ln18_fu_563_p2;
wire   [1:0] wr_fu_569_p2;
reg   [1:0] wr_reg_858;
wire   [31:0] select_ln26_fu_651_p3;
reg   [31:0] conv_weights_0_1_loa_reg_943;
wire   [31:0] select_ln26_1_fu_659_p3;
reg   [31:0] select_ln26_1_reg_948;
reg   [31:0] conv_weights_1_0_loa_reg_953;
wire   [31:0] select_ln26_2_fu_666_p3;
reg   [31:0] select_ln26_2_reg_958;
reg   [31:0] conv_weights_1_1_loa_reg_963;
wire   [31:0] select_ln26_3_fu_673_p3;
reg   [31:0] select_ln26_3_reg_968;
reg   [31:0] conv_weights_2_0_loa_reg_973;
wire   [31:0] select_ln26_4_fu_680_p3;
reg   [31:0] select_ln26_4_reg_978;
reg   [31:0] conv_weights_2_1_loa_reg_983;
wire   [31:0] select_ln26_5_fu_687_p3;
reg   [31:0] select_ln26_5_reg_988;
wire   [31:0] merge_i_fu_718_p3;
wire    ap_CS_fsm_state12;
wire   [1:0] f_fu_779_p2;
wire    ap_CS_fsm_state13;
wire   [3:0] select_ln11_1_fu_790_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [3:0] indvar_flatten15_reg_310;
reg   [1:0] r_0_reg_321;
reg   [3:0] indvar_flatten_reg_332;
reg   [1:0] c_0_reg_344;
reg   [1:0] f_0_reg_355;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_370_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_w_sum_0_phi_fu_381_p4;
wire    ap_block_pp0_stage2;
wire  signed [63:0] sext_ln34_fu_557_p1;
wire  signed [63:0] sext_ln26_fu_602_p1;
wire   [63:0] zext_ln26_2_fu_625_p1;
wire   [63:0] tmp_7_fu_639_p3;
wire   [31:0] w_sum_1_fu_769_p3;
reg   [31:0] grp_fu_389_p0;
reg   [31:0] grp_fu_389_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage1;
reg   [31:0] grp_fu_395_p0;
reg   [31:0] grp_fu_395_p1;
wire   [1:0] r_fu_429_p2;
wire   [3:0] tmp_1_fu_461_p3;
wire   [3:0] zext_ln34_fu_457_p1;
wire   [0:0] trunc_ln26_fu_481_p1;
wire   [0:0] xor_ln34_fu_475_p2;
wire   [0:0] icmp_ln14_fu_491_p2;
wire   [1:0] select_ln34_fu_441_p3;
wire   [0:0] and_ln34_1_fu_497_p2;
wire   [0:0] or_ln26_fu_509_p2;
wire   [1:0] c_fu_503_p2;
wire   [0:0] trunc_ln26_1_fu_523_p1;
wire   [0:0] and_ln34_fu_485_p2;
wire   [3:0] zext_ln34_2_fu_547_p1;
wire   [3:0] sub_ln34_fu_469_p2;
wire   [3:0] add_ln34_fu_551_p2;
wire   [3:0] tmp_2_fu_579_p3;
wire   [4:0] zext_ln26_1_fu_587_p1;
wire   [4:0] zext_ln26_fu_575_p1;
wire   [4:0] sub_ln26_fu_591_p2;
wire   [4:0] add_ln26_1_fu_597_p2;
wire   [1:0] add_ln26_fu_612_p2;
wire   [2:0] tmp_6_fu_617_p3;
wire   [2:0] or_ln26_1_fu_633_p2;
wire   [0:0] icmp_ln7_1_fu_699_p2;
wire   [0:0] icmp_ln7_fu_694_p2;
wire   [0:0] empty_5_fu_712_p2;
wire   [31:0] select_ln7_i_fu_704_p3;
wire   [31:0] bitcast_ln33_fu_727_p1;
wire   [7:0] tmp_fu_731_p4;
wire   [22:0] trunc_ln33_fu_741_p1;
wire   [0:0] icmp_ln33_1_fu_751_p2;
wire   [0:0] icmp_ln33_fu_745_p2;
wire   [0:0] or_ln33_fu_757_p2;
wire   [0:0] tmp_4_fu_401_p2;
wire   [0:0] and_ln33_fu_763_p2;
wire   [3:0] add_ln11_1_fu_784_p2;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_weighbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_0_address0),
    .ce0(conv_weights_0_0_ce0),
    .q0(conv_weights_0_0_q0)
);

conv_1_conv_weighcud #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_1_address0),
    .ce0(conv_weights_0_1_ce0),
    .q0(conv_weights_0_1_q0)
);

conv_1_conv_weighdEe #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_0_address0),
    .ce0(conv_weights_1_0_ce0),
    .q0(conv_weights_1_0_q0)
);

conv_1_conv_weigheOg #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_1_address0),
    .ce0(conv_weights_1_1_ce0),
    .q0(conv_weights_1_1_q0)
);

conv_1_conv_weighfYi #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_0_address0),
    .ce0(conv_weights_2_0_ce0),
    .q0(conv_weights_2_0_q0)
);

conv_1_conv_weighg8j #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
conv_weights_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_1_address0),
    .ce0(conv_weights_2_1_ce0),
    .q0(conv_weights_2_1_q0)
);

conv_1_fadd_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_hbi_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_389_p0),
    .din1(grp_fu_389_p1),
    .ce(1'b1),
    .dout(grp_fu_389_p2)
);

conv_1_fmul_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_ibs_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_395_p0),
    .din1(grp_fu_395_p1),
    .ce(1'b1),
    .dout(grp_fu_395_p2)
);

conv_1_fcmp_32ns_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_jbC_U3(
    .din0(grp_fu_389_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_4_fu_401_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_417_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_417_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        c_0_reg_344 <= select_ln11_reg_834;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_344 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        f_0_reg_355 <= f_fu_779_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_355 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten15_reg_310 <= add_ln8_reg_801;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten15_reg_310 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten_reg_332 <= select_ln11_1_fu_790_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_332 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        r_0_reg_321 <= select_ln34_1_reg_811;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_321 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln18_reg_854_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        w_sum_0_reg_377 <= grp_fu_389_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_417_p2 == 1'd0))) begin
        w_sum_0_reg_377 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_854 == 1'd0))) begin
        wr_0_reg_366 <= wr_reg_858;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_417_p2 == 1'd0))) begin
        wr_0_reg_366 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_801 <= add_ln8_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_417_p2 == 1'd0))) begin
        conv_out_0_addr_reg_844 <= sext_ln34_fu_557_p1;
        conv_out_1_addr_reg_849 <= sext_ln34_fu_557_p1;
        icmp_ln11_reg_806 <= icmp_ln11_fu_435_p2;
        select_ln11_reg_834 <= select_ln11_fu_535_p3;
        select_ln26_6_reg_817 <= select_ln26_6_fu_515_p3;
        select_ln26_7_reg_824 <= select_ln26_7_fu_527_p3;
        select_ln34_1_reg_811 <= select_ln34_1_fu_449_p3;
        zext_ln34_1_reg_839[1 : 0] <= zext_ln34_1_fu_543_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_854 == 1'd0))) begin
        conv_weights_0_1_loa_reg_943 <= conv_weights_0_1_q0;
        conv_weights_1_0_loa_reg_953 <= conv_weights_1_0_q0;
        conv_weights_1_1_loa_reg_963 <= conv_weights_1_1_q0;
        conv_weights_2_0_loa_reg_973 <= conv_weights_2_0_q0;
        conv_weights_2_1_loa_reg_983 <= conv_weights_2_1_q0;
        select_ln26_1_reg_948 <= select_ln26_1_fu_659_p3;
        select_ln26_2_reg_958 <= select_ln26_2_fu_666_p3;
        select_ln26_3_reg_968 <= select_ln26_3_fu_673_p3;
        select_ln26_4_reg_978 <= select_ln26_4_fu_680_p3;
        select_ln26_5_reg_988 <= select_ln26_5_fu_687_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln18_reg_854 <= icmp_ln18_fu_563_p2;
        icmp_ln18_reg_854_pp0_iter1_reg <= icmp_ln18_reg_854;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_reg_858 <= wr_fu_569_p2;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_563_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln18_reg_854_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_w_sum_0_phi_fu_381_p4 = grp_fu_389_p2;
    end else begin
        ap_phi_mux_w_sum_0_phi_fu_381_p4 = w_sum_0_reg_377;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_854 == 1'd0))) begin
        ap_phi_mux_wr_0_phi_fu_370_p4 = wr_reg_858;
    end else begin
        ap_phi_mux_wr_0_phi_fu_370_p4 = wr_0_reg_366;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_out_0_ce0 = 1'b1;
    end else begin
        conv_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (select_ln26_7_reg_824 == 1'd0))) begin
        conv_out_0_we0 = 1'b1;
    end else begin
        conv_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_out_1_ce0 = 1'b1;
    end else begin
        conv_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln26_7_reg_824 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        conv_out_1_we0 = 1'b1;
    end else begin
        conv_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_0_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_0_1_ce0 = 1'b1;
    end else begin
        conv_weights_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_1_0_ce0 = 1'b1;
    end else begin
        conv_weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_1_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_2_0_ce0 = 1'b1;
    end else begin
        conv_weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_2_1_ce0 = 1'b1;
    end else begin
        conv_weights_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_389_p0 = w_sum_0_reg_377;
    end else if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_389_p0 = grp_fu_389_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_389_p0 = ap_phi_mux_w_sum_0_phi_fu_381_p4;
    end else begin
        grp_fu_389_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_389_p1 = merge_i_fu_718_p3;
    end else if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_389_p1 = grp_fu_395_p2;
    end else begin
        grp_fu_389_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_395_p0 = conv_weights_2_1_loa_reg_983;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_395_p0 = conv_weights_2_0_loa_reg_973;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_395_p0 = conv_weights_1_1_loa_reg_963;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_395_p0 = conv_weights_1_0_loa_reg_953;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_395_p0 = conv_weights_0_1_loa_reg_943;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_395_p0 = conv_weights_0_0_q0;
    end else begin
        grp_fu_395_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_395_p1 = select_ln26_5_reg_988;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_395_p1 = select_ln26_4_reg_978;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_395_p1 = select_ln26_3_reg_968;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_395_p1 = select_ln26_2_reg_958;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_395_p1 = select_ln26_1_reg_948;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_395_p1 = select_ln26_fu_651_p3;
    end else begin
        grp_fu_395_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_0_ce1 = 1'b1;
    end else begin
        input_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_1_ce1 = 1'b1;
    end else begin
        input_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_2_ce1 = 1'b1;
    end else begin
        input_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_3_ce1 = 1'b1;
    end else begin
        input_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln18_fu_563_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln18_fu_563_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_784_p2 = (indvar_flatten_reg_332 + 4'd1);

assign add_ln26_1_fu_597_p2 = (zext_ln34_1_reg_839 + sub_ln26_fu_591_p2);

assign add_ln26_fu_612_p2 = (select_ln34_1_reg_811 + ap_phi_mux_wr_0_phi_fu_370_p4);

assign add_ln34_fu_551_p2 = (zext_ln34_2_fu_547_p1 + sub_ln34_fu_469_p2);

assign add_ln8_fu_423_p2 = (indvar_flatten15_reg_310 + 4'd1);

assign and_ln33_fu_763_p2 = (tmp_4_fu_401_p2 & or_ln33_fu_757_p2);

assign and_ln34_1_fu_497_p2 = (xor_ln34_fu_475_p2 & icmp_ln14_fu_491_p2);

assign and_ln34_fu_485_p2 = (xor_ln34_fu_475_p2 & trunc_ln26_fu_481_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln33_fu_727_p1 = grp_fu_389_p2;

assign c_fu_503_p2 = (2'd1 + select_ln34_fu_441_p3);

assign conv_out_0_address0 = conv_out_0_addr_reg_844;

assign conv_out_0_d0 = w_sum_1_fu_769_p3;

assign conv_out_1_address0 = conv_out_1_addr_reg_849;

assign conv_out_1_d0 = w_sum_1_fu_769_p3;

assign conv_weights_0_0_address0 = sext_ln26_fu_602_p1;

assign conv_weights_0_1_address0 = sext_ln26_fu_602_p1;

assign conv_weights_1_0_address0 = sext_ln26_fu_602_p1;

assign conv_weights_1_1_address0 = sext_ln26_fu_602_p1;

assign conv_weights_2_0_address0 = sext_ln26_fu_602_p1;

assign conv_weights_2_1_address0 = sext_ln26_fu_602_p1;

assign empty_5_fu_712_p2 = (icmp_ln7_fu_694_p2 | icmp_ln7_1_fu_699_p2);

assign f_fu_779_p2 = (select_ln26_6_reg_817 + 2'd1);

assign icmp_ln11_fu_435_p2 = ((indvar_flatten_reg_332 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_491_p2 = ((f_0_reg_355 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_563_p2 = ((ap_phi_mux_wr_0_phi_fu_370_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_751_p2 = ((trunc_ln33_fu_741_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_745_p2 = ((tmp_fu_731_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_699_p2 = ((select_ln26_6_reg_817 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_694_p2 = ((select_ln26_6_reg_817 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_417_p2 = ((indvar_flatten15_reg_310 == 4'd12) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln26_2_fu_625_p1;

assign input_0_address1 = tmp_7_fu_639_p3;

assign input_1_address0 = zext_ln26_2_fu_625_p1;

assign input_1_address1 = tmp_7_fu_639_p3;

assign input_2_address0 = zext_ln26_2_fu_625_p1;

assign input_2_address1 = tmp_7_fu_639_p3;

assign input_3_address0 = zext_ln26_2_fu_625_p1;

assign input_3_address1 = tmp_7_fu_639_p3;

assign merge_i_fu_718_p3 = ((empty_5_fu_712_p2[0:0] === 1'b1) ? select_ln7_i_fu_704_p3 : 32'd1069547520);

assign or_ln26_1_fu_633_p2 = (tmp_6_fu_617_p3 | 3'd1);

assign or_ln26_fu_509_p2 = (icmp_ln11_fu_435_p2 | and_ln34_1_fu_497_p2);

assign or_ln33_fu_757_p2 = (icmp_ln33_fu_745_p2 | icmp_ln33_1_fu_751_p2);

assign r_fu_429_p2 = (2'd1 + r_0_reg_321);

assign select_ln11_1_fu_790_p3 = ((icmp_ln11_reg_806[0:0] === 1'b1) ? 4'd1 : add_ln11_1_fu_784_p2);

assign select_ln11_fu_535_p3 = ((and_ln34_1_fu_497_p2[0:0] === 1'b1) ? c_fu_503_p2 : select_ln34_fu_441_p3);

assign select_ln26_1_fu_659_p3 = ((select_ln26_7_reg_824[0:0] === 1'b1) ? input_1_q1 : input_0_q1);

assign select_ln26_2_fu_666_p3 = ((select_ln26_7_reg_824[0:0] === 1'b1) ? input_2_q0 : input_1_q0);

assign select_ln26_3_fu_673_p3 = ((select_ln26_7_reg_824[0:0] === 1'b1) ? input_2_q1 : input_1_q1);

assign select_ln26_4_fu_680_p3 = ((select_ln26_7_reg_824[0:0] === 1'b1) ? input_3_q0 : input_2_q0);

assign select_ln26_5_fu_687_p3 = ((select_ln26_7_reg_824[0:0] === 1'b1) ? input_3_q1 : input_2_q1);

assign select_ln26_6_fu_515_p3 = ((or_ln26_fu_509_p2[0:0] === 1'b1) ? 2'd0 : f_0_reg_355);

assign select_ln26_7_fu_527_p3 = ((and_ln34_1_fu_497_p2[0:0] === 1'b1) ? trunc_ln26_1_fu_523_p1 : and_ln34_fu_485_p2);

assign select_ln26_fu_651_p3 = ((select_ln26_7_reg_824[0:0] === 1'b1) ? input_1_q0 : input_0_q0);

assign select_ln34_1_fu_449_p3 = ((icmp_ln11_fu_435_p2[0:0] === 1'b1) ? r_fu_429_p2 : r_0_reg_321);

assign select_ln34_fu_441_p3 = ((icmp_ln11_fu_435_p2[0:0] === 1'b1) ? 2'd0 : c_0_reg_344);

assign select_ln7_i_fu_704_p3 = ((icmp_ln7_1_fu_699_p2[0:0] === 1'b1) ? 32'd1073741824 : 32'd1065353216);

assign sext_ln26_fu_602_p1 = $signed(add_ln26_1_fu_597_p2);

assign sext_ln34_fu_557_p1 = $signed(add_ln34_fu_551_p2);

assign sub_ln26_fu_591_p2 = (zext_ln26_1_fu_587_p1 - zext_ln26_fu_575_p1);

assign sub_ln34_fu_469_p2 = (tmp_1_fu_461_p3 - zext_ln34_fu_457_p1);

assign tmp_1_fu_461_p3 = {{select_ln34_1_fu_449_p3}, {2'd0}};

assign tmp_2_fu_579_p3 = {{ap_phi_mux_wr_0_phi_fu_370_p4}, {2'd0}};

assign tmp_6_fu_617_p3 = {{add_ln26_fu_612_p2}, {1'd0}};

assign tmp_7_fu_639_p3 = {{61'd0}, {or_ln26_1_fu_633_p2}};

assign tmp_fu_731_p4 = {{bitcast_ln33_fu_727_p1[30:23]}};

assign trunc_ln26_1_fu_523_p1 = c_fu_503_p2[0:0];

assign trunc_ln26_fu_481_p1 = c_0_reg_344[0:0];

assign trunc_ln33_fu_741_p1 = bitcast_ln33_fu_727_p1[22:0];

assign w_sum_1_fu_769_p3 = ((and_ln33_fu_763_p2[0:0] === 1'b1) ? grp_fu_389_p2 : 32'd0);

assign wr_fu_569_p2 = (ap_phi_mux_wr_0_phi_fu_370_p4 + 2'd1);

assign xor_ln34_fu_475_p2 = (icmp_ln11_fu_435_p2 ^ 1'd1);

assign zext_ln26_1_fu_587_p1 = tmp_2_fu_579_p3;

assign zext_ln26_2_fu_625_p1 = tmp_6_fu_617_p3;

assign zext_ln26_fu_575_p1 = ap_phi_mux_wr_0_phi_fu_370_p4;

assign zext_ln34_1_fu_543_p1 = select_ln26_6_fu_515_p3;

assign zext_ln34_2_fu_547_p1 = select_ln26_6_fu_515_p3;

assign zext_ln34_fu_457_p1 = select_ln34_1_fu_449_p3;

always @ (posedge ap_clk) begin
    zext_ln34_1_reg_839[4:2] <= 3'b000;
end

endmodule //conv_1
