-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_0_ce1 : OUT STD_LOGIC;
    input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_1_ce1 : OUT STD_LOGIC;
    input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_ce1 : OUT STD_LOGIC;
    input_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_3_ce0 : OUT STD_LOGIC;
    input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_3_ce1 : OUT STD_LOGIC;
    input_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_out_0_ce0 : OUT STD_LOGIC;
    conv_out_0_we0 : OUT STD_LOGIC;
    conv_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_out_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    conv_out_1_ce0 : OUT STD_LOGIC;
    conv_out_1_we0 : OUT STD_LOGIC;
    conv_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=289,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=901,HLS_SYN_LUT=1187,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv61_0 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3FC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_weights_0_0_ce0 : STD_LOGIC;
    signal conv_weights_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_weights_0_1_ce0 : STD_LOGIC;
    signal conv_weights_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_weights_1_0_ce0 : STD_LOGIC;
    signal conv_weights_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_weights_1_1_ce0 : STD_LOGIC;
    signal conv_weights_1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_weights_2_0_ce0 : STD_LOGIC;
    signal conv_weights_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_weights_2_1_ce0 : STD_LOGIC;
    signal conv_weights_2_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wr_0_reg_366 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln18_reg_854 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state8_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln18_reg_854_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_423_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln8_reg_801 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln11_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_806 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_1_fu_449_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_811 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_6_fu_515_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_6_reg_817 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_7_fu_527_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_7_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_fu_535_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln11_reg_834 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_1_fu_543_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_1_reg_839 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_out_0_addr_reg_844 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_out_1_addr_reg_849 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln18_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_569_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_858 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_fu_651_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_1_loa_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_1_fu_659_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_1_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_0_loa_reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_2_fu_666_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_2_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_1_loa_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_3_fu_673_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_3_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_0_loa_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_4_fu_680_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_4_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_1_loa_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_5_fu_687_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_5_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal merge_i_fu_718_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal f_fu_779_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal select_ln11_1_fu_790_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal indvar_flatten15_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_0_reg_321 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_332 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_344 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_0_reg_355 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_wr_0_phi_fu_370_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_w_sum_0_phi_fu_381_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal sext_ln34_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_2_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_639_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_sum_1_fu_769_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_389_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_395_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_429_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_fu_457_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln26_fu_481_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_441_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln34_1_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_503_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln26_1_fu_523_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_2_fu_547_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln34_fu_469_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_551_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_579_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_1_fu_587_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_575_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_591_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_597_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_612_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_617_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln26_1_fu_633_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln7_1_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_5_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_i_fu_704_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln33_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_731_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_741_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_1_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_1_fu_784_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1_fadd_32ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_weighbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weigheOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_0_U : component conv_1_conv_weighbkb
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_0_address0,
        ce0 => conv_weights_0_0_ce0,
        q0 => conv_weights_0_0_q0);

    conv_weights_0_1_U : component conv_1_conv_weighcud
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_1_address0,
        ce0 => conv_weights_0_1_ce0,
        q0 => conv_weights_0_1_q0);

    conv_weights_1_0_U : component conv_1_conv_weighdEe
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_0_address0,
        ce0 => conv_weights_1_0_ce0,
        q0 => conv_weights_1_0_q0);

    conv_weights_1_1_U : component conv_1_conv_weigheOg
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_1_address0,
        ce0 => conv_weights_1_1_ce0,
        q0 => conv_weights_1_1_q0);

    conv_weights_2_0_U : component conv_1_conv_weighfYi
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_0_address0,
        ce0 => conv_weights_2_0_ce0,
        q0 => conv_weights_2_0_q0);

    conv_weights_2_1_U : component conv_1_conv_weighg8j
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_1_address0,
        ce0 => conv_weights_2_1_ce0,
        q0 => conv_weights_2_1_q0);

    conv_1_fadd_32ns_hbi_U1 : component conv_1_fadd_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_389_p0,
        din1 => grp_fu_389_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_389_p2);

    conv_1_fmul_32ns_ibs_U2 : component conv_1_fmul_32ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_395_p0,
        din1 => grp_fu_395_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_395_p2);

    conv_1_fcmp_32ns_jbC_U3 : component conv_1_fcmp_32ns_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_389_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_4_fu_401_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_417_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_417_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                c_0_reg_344 <= select_ln11_reg_834;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_344 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                f_0_reg_355 <= f_fu_779_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_355 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten15_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten15_reg_310 <= add_ln8_reg_801;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten15_reg_310 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten_reg_332 <= select_ln11_1_fu_790_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_332 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                r_0_reg_321 <= select_ln34_1_reg_811;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_321 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln18_reg_854_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                w_sum_0_reg_377 <= grp_fu_389_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_417_p2 = ap_const_lv1_0))) then 
                w_sum_0_reg_377 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wr_0_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_854 = ap_const_lv1_0))) then 
                wr_0_reg_366 <= wr_reg_858;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_417_p2 = ap_const_lv1_0))) then 
                wr_0_reg_366 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_801 <= add_ln8_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_417_p2 = ap_const_lv1_0))) then
                conv_out_0_addr_reg_844 <= sext_ln34_fu_557_p1(3 - 1 downto 0);
                conv_out_1_addr_reg_849 <= sext_ln34_fu_557_p1(3 - 1 downto 0);
                icmp_ln11_reg_806 <= icmp_ln11_fu_435_p2;
                select_ln11_reg_834 <= select_ln11_fu_535_p3;
                select_ln26_6_reg_817 <= select_ln26_6_fu_515_p3;
                select_ln26_7_reg_824 <= select_ln26_7_fu_527_p3;
                select_ln34_1_reg_811 <= select_ln34_1_fu_449_p3;
                    zext_ln34_1_reg_839(1 downto 0) <= zext_ln34_1_fu_543_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_854 = ap_const_lv1_0))) then
                conv_weights_0_1_loa_reg_943 <= conv_weights_0_1_q0;
                conv_weights_1_0_loa_reg_953 <= conv_weights_1_0_q0;
                conv_weights_1_1_loa_reg_963 <= conv_weights_1_1_q0;
                conv_weights_2_0_loa_reg_973 <= conv_weights_2_0_q0;
                conv_weights_2_1_loa_reg_983 <= conv_weights_2_1_q0;
                select_ln26_1_reg_948 <= select_ln26_1_fu_659_p3;
                select_ln26_2_reg_958 <= select_ln26_2_fu_666_p3;
                select_ln26_3_reg_968 <= select_ln26_3_fu_673_p3;
                select_ln26_4_reg_978 <= select_ln26_4_fu_680_p3;
                select_ln26_5_reg_988 <= select_ln26_5_fu_687_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_854 <= icmp_ln18_fu_563_p2;
                icmp_ln18_reg_854_pp0_iter1_reg <= icmp_ln18_reg_854;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                wr_reg_858 <= wr_fu_569_p2;
            end if;
        end if;
    end process;
    zext_ln34_1_reg_839(4 downto 2) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln8_fu_417_p2, ap_CS_fsm_state2, icmp_ln18_fu_563_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_417_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln18_fu_563_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln18_fu_563_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_784_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_332) + unsigned(ap_const_lv4_1));
    add_ln26_1_fu_597_p2 <= std_logic_vector(unsigned(zext_ln34_1_reg_839) + unsigned(sub_ln26_fu_591_p2));
    add_ln26_fu_612_p2 <= std_logic_vector(unsigned(select_ln34_1_reg_811) + unsigned(ap_phi_mux_wr_0_phi_fu_370_p4));
    add_ln34_fu_551_p2 <= std_logic_vector(unsigned(zext_ln34_2_fu_547_p1) + unsigned(sub_ln34_fu_469_p2));
    add_ln8_fu_423_p2 <= std_logic_vector(unsigned(indvar_flatten15_reg_310) + unsigned(ap_const_lv4_1));
    and_ln33_fu_763_p2 <= (tmp_4_fu_401_p2 and or_ln33_fu_757_p2);
    and_ln34_1_fu_497_p2 <= (xor_ln34_fu_475_p2 and icmp_ln14_fu_491_p2);
    and_ln34_fu_485_p2 <= (xor_ln34_fu_475_p2 and trunc_ln26_fu_481_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_563_p2)
    begin
        if ((icmp_ln18_fu_563_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln8_fu_417_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_417_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_w_sum_0_phi_fu_381_p4_assign_proc : process(w_sum_0_reg_377, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, icmp_ln18_reg_854_pp0_iter1_reg, grp_fu_389_p2, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln18_reg_854_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_w_sum_0_phi_fu_381_p4 <= grp_fu_389_p2;
        else 
            ap_phi_mux_w_sum_0_phi_fu_381_p4 <= w_sum_0_reg_377;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_370_p4_assign_proc : process(wr_0_reg_366, icmp_ln18_reg_854, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, wr_reg_858, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_854 = ap_const_lv1_0))) then 
            ap_phi_mux_wr_0_phi_fu_370_p4 <= wr_reg_858;
        else 
            ap_phi_mux_wr_0_phi_fu_370_p4 <= wr_0_reg_366;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_417_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_417_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln33_fu_727_p1 <= grp_fu_389_p2;
    c_fu_503_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln34_fu_441_p3));
    conv_out_0_address0 <= conv_out_0_addr_reg_844;

    conv_out_0_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_0_d0 <= w_sum_1_fu_769_p3;

    conv_out_0_we0_assign_proc : process(select_ln26_7_reg_824, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (select_ln26_7_reg_824 = ap_const_lv1_0))) then 
            conv_out_0_we0 <= ap_const_logic_1;
        else 
            conv_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_address0 <= conv_out_1_addr_reg_849;

    conv_out_1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_d0 <= w_sum_1_fu_769_p3;

    conv_out_1_we0_assign_proc : process(select_ln26_7_reg_824, ap_CS_fsm_state13)
    begin
        if (((select_ln26_7_reg_824 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            conv_out_1_we0 <= ap_const_logic_1;
        else 
            conv_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_0_address0 <= sext_ln26_fu_602_p1(4 - 1 downto 0);

    conv_weights_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_1_address0 <= sext_ln26_fu_602_p1(4 - 1 downto 0);

    conv_weights_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_0_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_0_address0 <= sext_ln26_fu_602_p1(4 - 1 downto 0);

    conv_weights_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_1_address0 <= sext_ln26_fu_602_p1(4 - 1 downto 0);

    conv_weights_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_1_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_0_address0 <= sext_ln26_fu_602_p1(4 - 1 downto 0);

    conv_weights_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_1_address0 <= sext_ln26_fu_602_p1(4 - 1 downto 0);

    conv_weights_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_2_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_5_fu_712_p2 <= (icmp_ln7_fu_694_p2 or icmp_ln7_1_fu_699_p2);
    f_fu_779_p2 <= std_logic_vector(unsigned(select_ln26_6_reg_817) + unsigned(ap_const_lv2_1));

    grp_fu_389_p0_assign_proc : process(w_sum_0_reg_377, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, grp_fu_389_p2, ap_CS_fsm_state12, ap_block_pp0_stage0, ap_phi_mux_w_sum_0_phi_fu_381_p4, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_389_p0 <= w_sum_0_reg_377;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_389_p0 <= grp_fu_389_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_389_p0 <= ap_phi_mux_w_sum_0_phi_fu_381_p4;
        else 
            grp_fu_389_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_389_p1_assign_proc : process(grp_fu_395_p2, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, merge_i_fu_718_p3, ap_CS_fsm_state12, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_389_p1 <= merge_i_fu_718_p3;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_389_p1 <= grp_fu_395_p2;
        else 
            grp_fu_389_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_395_p0_assign_proc : process(conv_weights_0_0_q0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, conv_weights_0_1_loa_reg_943, conv_weights_1_0_loa_reg_953, conv_weights_1_1_loa_reg_963, conv_weights_2_0_loa_reg_973, conv_weights_2_1_loa_reg_983, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_395_p0 <= conv_weights_2_1_loa_reg_983;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p0 <= conv_weights_2_0_loa_reg_973;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p0 <= conv_weights_1_1_loa_reg_963;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p0 <= conv_weights_1_0_loa_reg_953;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_395_p0 <= conv_weights_0_1_loa_reg_943;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p0 <= conv_weights_0_0_q0;
        else 
            grp_fu_395_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_395_p1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln26_fu_651_p3, select_ln26_1_reg_948, select_ln26_2_reg_958, select_ln26_3_reg_968, select_ln26_4_reg_978, select_ln26_5_reg_988, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_395_p1 <= select_ln26_5_reg_988;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p1 <= select_ln26_4_reg_978;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p1 <= select_ln26_3_reg_968;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p1 <= select_ln26_2_reg_958;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_395_p1 <= select_ln26_1_reg_948;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p1 <= select_ln26_fu_651_p3;
        else 
            grp_fu_395_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_435_p2 <= "1" when (indvar_flatten_reg_332 = ap_const_lv4_6) else "0";
    icmp_ln14_fu_491_p2 <= "1" when (f_0_reg_355 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_563_p2 <= "1" when (ap_phi_mux_wr_0_phi_fu_370_p4 = ap_const_lv2_3) else "0";
    icmp_ln33_1_fu_751_p2 <= "1" when (trunc_ln33_fu_741_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_745_p2 <= "0" when (tmp_fu_731_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_1_fu_699_p2 <= "1" when (select_ln26_6_reg_817 = ap_const_lv2_1) else "0";
    icmp_ln7_fu_694_p2 <= "1" when (select_ln26_6_reg_817 = ap_const_lv2_0) else "0";
    icmp_ln8_fu_417_p2 <= "1" when (indvar_flatten15_reg_310 = ap_const_lv4_C) else "0";
    input_0_address0 <= zext_ln26_2_fu_625_p1(3 - 1 downto 0);
    input_0_address1 <= tmp_7_fu_639_p3(3 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_ce1 <= ap_const_logic_1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= zext_ln26_2_fu_625_p1(3 - 1 downto 0);
    input_1_address1 <= tmp_7_fu_639_p3(3 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_ce1 <= ap_const_logic_1;
        else 
            input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_address0 <= zext_ln26_2_fu_625_p1(3 - 1 downto 0);
    input_2_address1 <= tmp_7_fu_639_p3(3 - 1 downto 0);

    input_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_ce1 <= ap_const_logic_1;
        else 
            input_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_address0 <= zext_ln26_2_fu_625_p1(3 - 1 downto 0);
    input_3_address1 <= tmp_7_fu_639_p3(3 - 1 downto 0);

    input_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_3_ce0 <= ap_const_logic_1;
        else 
            input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_3_ce1 <= ap_const_logic_1;
        else 
            input_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    merge_i_fu_718_p3 <= 
        select_ln7_i_fu_704_p3 when (empty_5_fu_712_p2(0) = '1') else 
        ap_const_lv32_3FC00000;
    or_ln26_1_fu_633_p2 <= (tmp_6_fu_617_p3 or ap_const_lv3_1);
    or_ln26_fu_509_p2 <= (icmp_ln11_fu_435_p2 or and_ln34_1_fu_497_p2);
    or_ln33_fu_757_p2 <= (icmp_ln33_fu_745_p2 or icmp_ln33_1_fu_751_p2);
    r_fu_429_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(r_0_reg_321));
    select_ln11_1_fu_790_p3 <= 
        ap_const_lv4_1 when (icmp_ln11_reg_806(0) = '1') else 
        add_ln11_1_fu_784_p2;
    select_ln11_fu_535_p3 <= 
        c_fu_503_p2 when (and_ln34_1_fu_497_p2(0) = '1') else 
        select_ln34_fu_441_p3;
    select_ln26_1_fu_659_p3 <= 
        input_1_q1 when (select_ln26_7_reg_824(0) = '1') else 
        input_0_q1;
    select_ln26_2_fu_666_p3 <= 
        input_2_q0 when (select_ln26_7_reg_824(0) = '1') else 
        input_1_q0;
    select_ln26_3_fu_673_p3 <= 
        input_2_q1 when (select_ln26_7_reg_824(0) = '1') else 
        input_1_q1;
    select_ln26_4_fu_680_p3 <= 
        input_3_q0 when (select_ln26_7_reg_824(0) = '1') else 
        input_2_q0;
    select_ln26_5_fu_687_p3 <= 
        input_3_q1 when (select_ln26_7_reg_824(0) = '1') else 
        input_2_q1;
    select_ln26_6_fu_515_p3 <= 
        ap_const_lv2_0 when (or_ln26_fu_509_p2(0) = '1') else 
        f_0_reg_355;
    select_ln26_7_fu_527_p3 <= 
        trunc_ln26_1_fu_523_p1 when (and_ln34_1_fu_497_p2(0) = '1') else 
        and_ln34_fu_485_p2;
    select_ln26_fu_651_p3 <= 
        input_1_q0 when (select_ln26_7_reg_824(0) = '1') else 
        input_0_q0;
    select_ln34_1_fu_449_p3 <= 
        r_fu_429_p2 when (icmp_ln11_fu_435_p2(0) = '1') else 
        r_0_reg_321;
    select_ln34_fu_441_p3 <= 
        ap_const_lv2_0 when (icmp_ln11_fu_435_p2(0) = '1') else 
        c_0_reg_344;
    select_ln7_i_fu_704_p3 <= 
        ap_const_lv32_40000000 when (icmp_ln7_1_fu_699_p2(0) = '1') else 
        ap_const_lv32_3F800000;
        sext_ln26_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_1_fu_597_p2),64));

        sext_ln34_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_fu_551_p2),64));

    sub_ln26_fu_591_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_587_p1) - unsigned(zext_ln26_fu_575_p1));
    sub_ln34_fu_469_p2 <= std_logic_vector(unsigned(tmp_1_fu_461_p3) - unsigned(zext_ln34_fu_457_p1));
    tmp_1_fu_461_p3 <= (select_ln34_1_fu_449_p3 & ap_const_lv2_0);
    tmp_2_fu_579_p3 <= (ap_phi_mux_wr_0_phi_fu_370_p4 & ap_const_lv2_0);
    tmp_6_fu_617_p3 <= (add_ln26_fu_612_p2 & ap_const_lv1_0);
    tmp_7_fu_639_p3 <= (ap_const_lv61_0 & or_ln26_1_fu_633_p2);
    tmp_fu_731_p4 <= bitcast_ln33_fu_727_p1(30 downto 23);
    trunc_ln26_1_fu_523_p1 <= c_fu_503_p2(1 - 1 downto 0);
    trunc_ln26_fu_481_p1 <= c_0_reg_344(1 - 1 downto 0);
    trunc_ln33_fu_741_p1 <= bitcast_ln33_fu_727_p1(23 - 1 downto 0);
    w_sum_1_fu_769_p3 <= 
        grp_fu_389_p2 when (and_ln33_fu_763_p2(0) = '1') else 
        ap_const_lv32_0;
    wr_fu_569_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_370_p4) + unsigned(ap_const_lv2_1));
    xor_ln34_fu_475_p2 <= (icmp_ln11_fu_435_p2 xor ap_const_lv1_1);
    zext_ln26_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_579_p3),5));
    zext_ln26_2_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_617_p3),64));
    zext_ln26_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wr_0_phi_fu_370_p4),5));
    zext_ln34_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_6_fu_515_p3),5));
    zext_ln34_2_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_6_fu_515_p3),4));
    zext_ln34_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_fu_449_p3),4));
end behav;
