// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=1198,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=724,HLS_SYN_LUT=1572,HLS_VERSION=2020_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [3:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] input_r_address0;
reg input_r_ce0;
reg[3:0] conv_out_address0;
reg conv_out_ce0;
reg conv_out_we0;
reg[31:0] conv_out_d0;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] conv_weights_address0;
reg    conv_weights_ce0;
wire   [31:0] conv_weights_q0;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_332_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_324_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state18;
wire   [1:0] add_ln11_fu_372_p2;
reg   [1:0] add_ln11_reg_990;
wire    ap_CS_fsm_state2;
wire   [4:0] sub_ln34_fu_394_p2;
reg   [4:0] sub_ln34_reg_995;
wire   [0:0] icmp_ln11_fu_366_p2;
wire   [1:0] add_ln14_fu_406_p2;
reg   [1:0] add_ln14_reg_1003;
wire    ap_CS_fsm_state3;
wire   [6:0] zext_ln34_4_fu_412_p1;
reg   [6:0] zext_ln34_4_reg_1008;
wire   [0:0] icmp_ln14_fu_400_p2;
reg   [3:0] conv_out_addr_reg_1013;
wire   [1:0] add_ln18_fu_436_p2;
reg   [1:0] add_ln18_reg_1021;
wire    ap_CS_fsm_state4;
wire  signed [5:0] sext_ln26_fu_464_p1;
reg  signed [5:0] sext_ln26_reg_1026;
wire   [0:0] icmp_ln18_fu_430_p2;
wire   [31:0] merge_i_fu_494_p3;
wire   [1:0] add_ln21_fu_509_p2;
reg   [1:0] add_ln21_reg_1039;
wire    ap_CS_fsm_state5;
wire  signed [63:0] sext_ln26_2_fu_532_p1;
reg  signed [63:0] sext_ln26_2_reg_1044;
wire   [0:0] icmp_ln21_fu_503_p2;
wire   [5:0] zext_ln24_fu_552_p1;
reg   [5:0] zext_ln24_reg_1049;
wire   [1:0] add_ln24_fu_562_p2;
reg   [1:0] add_ln24_reg_1057;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln24_fu_556_p2;
wire   [1:0] add_ln11_1_fu_680_p2;
reg   [1:0] add_ln11_1_reg_1075;
wire    ap_CS_fsm_state11;
wire   [4:0] add_ln34_fu_708_p2;
reg   [4:0] add_ln34_reg_1080;
wire   [0:0] icmp_ln11_1_fu_674_p2;
wire   [1:0] add_ln14_1_fu_720_p2;
reg   [1:0] add_ln14_1_reg_1088;
wire    ap_CS_fsm_state12;
wire   [6:0] zext_ln34_6_fu_726_p1;
reg   [6:0] zext_ln34_6_reg_1093;
wire   [0:0] icmp_ln14_1_fu_714_p2;
reg   [3:0] conv_out_addr_1_reg_1098;
wire   [1:0] add_ln26_fu_750_p2;
reg   [1:0] add_ln26_reg_1106;
wire    ap_CS_fsm_state13;
wire  signed [5:0] sext_ln26_1_fu_778_p1;
reg  signed [5:0] sext_ln26_1_reg_1112;
wire   [0:0] icmp_ln18_1_fu_744_p2;
wire   [31:0] merge_i4_fu_808_p3;
wire   [1:0] add_ln21_1_fu_823_p2;
reg   [1:0] add_ln21_1_reg_1125;
wire    ap_CS_fsm_state14;
wire  signed [63:0] sext_ln26_3_fu_846_p1;
reg  signed [63:0] sext_ln26_3_reg_1130;
wire   [0:0] icmp_ln21_1_fu_817_p2;
wire   [5:0] zext_ln24_1_fu_865_p1;
reg   [5:0] zext_ln24_1_reg_1135;
wire   [1:0] add_ln24_1_fu_875_p2;
reg   [1:0] add_ln24_1_reg_1143;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln24_1_fu_869_p2;
reg   [1:0] c_0_0_reg_137;
reg   [1:0] f_0_0_reg_149;
wire    ap_CS_fsm_state10;
reg   [1:0] wr_0_0_reg_161;
reg   [31:0] w_sum_0_0_reg_173;
reg   [31:0] w_sum_1_0_reg_185;
reg   [1:0] wc_0_0_reg_197;
reg   [31:0] w_sum_2_0_reg_208;
reg   [1:0] ch_0_0_reg_220;
reg   [1:0] c_0_1_reg_231;
reg   [1:0] f_0_1_reg_243;
wire    ap_CS_fsm_state19;
reg   [1:0] wr_0_1_reg_255;
reg   [31:0] w_sum_0_1_reg_266;
reg   [31:0] w_sum_1_1_reg_278;
reg   [1:0] wc_0_1_reg_290;
reg   [31:0] w_sum_2_1_reg_301;
reg   [1:0] ch_0_1_reg_313;
wire  signed [63:0] sext_ln34_fu_425_p1;
wire   [63:0] zext_ln26_8_fu_608_p1;
wire   [63:0] zext_ln26_9_fu_618_p1;
wire  signed [63:0] sext_ln34_1_fu_739_p1;
wire   [63:0] zext_ln26_12_fu_921_p1;
wire   [63:0] zext_ln26_13_fu_931_p1;
wire   [31:0] select_ln33_fu_665_p3;
wire   [31:0] select_ln33_1_fu_978_p3;
reg   [31:0] grp_fu_324_p0;
reg   [31:0] grp_fu_324_p1;
wire   [3:0] tmp_12_fu_382_p3;
wire   [4:0] zext_ln34_1_fu_390_p1;
wire   [4:0] zext_ln34_fu_378_p1;
wire   [4:0] zext_ln34_5_fu_416_p1;
wire   [4:0] add_ln34_1_fu_420_p2;
wire   [3:0] tmp_16_fu_446_p3;
wire   [4:0] zext_ln26_1_fu_454_p1;
wire   [4:0] zext_ln26_fu_442_p1;
wire   [4:0] sub_ln26_fu_458_p2;
wire   [0:0] icmp_ln7_1_fu_474_p2;
wire   [0:0] icmp_ln7_fu_468_p2;
wire   [0:0] empty_7_fu_488_p2;
wire   [31:0] select_ln7_i_fu_480_p3;
wire   [5:0] zext_ln26_4_fu_515_p1;
wire   [5:0] add_ln26_3_fu_519_p2;
wire   [6:0] tmp_18_fu_524_p3;
wire   [1:0] add_ln26_1_fu_536_p2;
wire   [4:0] tmp_19_fu_542_p4;
wire   [63:0] zext_ln26_6_fu_568_p1;
wire   [63:0] add_ln26_5_fu_576_p2;
wire   [4:0] trunc_ln26_1_fu_585_p1;
wire   [6:0] p_shl2_cast_fu_589_p3;
wire   [6:0] trunc_ln26_fu_581_p1;
wire   [6:0] sub_ln26_2_fu_597_p2;
wire   [6:0] add_ln26_6_fu_603_p2;
wire   [5:0] zext_ln26_7_fu_572_p1;
wire   [5:0] add_ln26_7_fu_613_p2;
wire   [31:0] bitcast_ln33_fu_623_p1;
wire   [7:0] tmp_6_fu_627_p4;
wire   [22:0] trunc_ln33_fu_637_p1;
wire   [0:0] icmp_ln33_1_fu_647_p2;
wire   [0:0] icmp_ln33_fu_641_p2;
wire   [0:0] or_ln33_fu_653_p2;
wire   [0:0] grp_fu_339_p2;
wire   [0:0] and_ln33_fu_659_p2;
wire   [3:0] tmp_15_fu_690_p3;
wire   [4:0] zext_ln34_3_fu_698_p1;
wire   [4:0] zext_ln34_2_fu_686_p1;
wire   [4:0] sub_ln34_1_fu_702_p2;
wire   [4:0] zext_ln34_7_fu_730_p1;
wire   [4:0] add_ln34_2_fu_734_p2;
wire   [3:0] tmp_17_fu_760_p3;
wire   [4:0] zext_ln26_3_fu_768_p1;
wire   [4:0] zext_ln26_2_fu_756_p1;
wire   [4:0] sub_ln26_1_fu_772_p2;
wire   [0:0] icmp_ln7_3_fu_788_p2;
wire   [0:0] icmp_ln7_2_fu_782_p2;
wire   [0:0] empty_18_fu_802_p2;
wire   [31:0] select_ln7_i3_fu_794_p3;
wire   [5:0] zext_ln26_5_fu_829_p1;
wire   [5:0] add_ln26_4_fu_833_p2;
wire   [6:0] tmp_20_fu_838_p3;
wire   [1:0] add_ln26_2_fu_850_p2;
wire   [4:0] tmp_21_fu_856_p4;
wire   [63:0] zext_ln26_10_fu_881_p1;
wire   [63:0] add_ln26_8_fu_889_p2;
wire   [4:0] trunc_ln26_3_fu_898_p1;
wire   [6:0] p_shl5_cast_fu_902_p3;
wire   [6:0] trunc_ln26_2_fu_894_p1;
wire   [6:0] sub_ln26_3_fu_910_p2;
wire   [6:0] add_ln26_9_fu_916_p2;
wire   [5:0] zext_ln26_11_fu_885_p1;
wire   [5:0] add_ln26_10_fu_926_p2;
wire   [31:0] bitcast_ln33_1_fu_936_p1;
wire   [7:0] tmp_13_fu_940_p4;
wire   [22:0] trunc_ln33_1_fu_950_p1;
wire   [0:0] icmp_ln33_3_fu_960_p2;
wire   [0:0] icmp_ln33_2_fu_954_p2;
wire   [0:0] or_ln33_1_fu_966_p2;
wire   [0:0] and_ln33_1_fu_972_p2;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

conv_1_conv_weights #(
    .DataWidth( 32 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
conv_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_address0),
    .ce0(conv_weights_ce0),
    .q0(conv_weights_q0)
);

conv_1_fadd_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_324_p0),
    .din1(grp_fu_324_p1),
    .ce(1'b1),
    .dout(grp_fu_324_p2)
);

conv_1_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_weights_q0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_332_p2)
);

conv_1_fcmp_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_dEe_U3(
    .din0(grp_fu_324_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(grp_fu_339_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_400_p2 == 1'd1))) begin
        c_0_0_reg_137 <= add_ln11_reg_990;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_0_reg_137 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln14_1_fu_714_p2 == 1'd1))) begin
        c_0_1_reg_231 <= add_ln11_1_reg_1075;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln11_fu_366_p2 == 1'd1))) begin
        c_0_1_reg_231 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ch_0_0_reg_220 <= add_ln24_reg_1057;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_503_p2 == 1'd0))) begin
        ch_0_0_reg_220 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ch_0_1_reg_313 <= add_ln24_1_reg_1143;
    end else if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln21_1_fu_817_p2 == 1'd0))) begin
        ch_0_1_reg_313 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        f_0_0_reg_149 <= add_ln14_reg_1003;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln11_fu_366_p2 == 1'd0))) begin
        f_0_0_reg_149 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        f_0_1_reg_243 <= add_ln14_1_reg_1088;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln11_1_fu_674_p2 == 1'd0))) begin
        f_0_1_reg_243 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_503_p2 == 1'd1))) begin
        w_sum_0_0_reg_173 <= w_sum_1_0_reg_185;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_400_p2 == 1'd0))) begin
        w_sum_0_0_reg_173 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln21_1_fu_817_p2 == 1'd1))) begin
        w_sum_0_1_reg_266 <= w_sum_1_1_reg_278;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln14_1_fu_714_p2 == 1'd0))) begin
        w_sum_0_1_reg_266 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_556_p2 == 1'd1))) begin
        w_sum_1_0_reg_185 <= w_sum_2_0_reg_208;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_430_p2 == 1'd0))) begin
        w_sum_1_0_reg_185 <= w_sum_0_0_reg_173;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln24_1_fu_869_p2 == 1'd1))) begin
        w_sum_1_1_reg_278 <= w_sum_2_1_reg_301;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln18_1_fu_744_p2 == 1'd0))) begin
        w_sum_1_1_reg_278 <= w_sum_0_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        w_sum_2_0_reg_208 <= grp_fu_324_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_503_p2 == 1'd0))) begin
        w_sum_2_0_reg_208 <= w_sum_1_0_reg_185;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        w_sum_2_1_reg_301 <= grp_fu_324_p2;
    end else if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln21_1_fu_817_p2 == 1'd0))) begin
        w_sum_2_1_reg_301 <= w_sum_1_1_reg_278;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_556_p2 == 1'd1))) begin
        wc_0_0_reg_197 <= add_ln21_reg_1039;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_430_p2 == 1'd0))) begin
        wc_0_0_reg_197 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln24_1_fu_869_p2 == 1'd1))) begin
        wc_0_1_reg_290 <= add_ln21_1_reg_1125;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln18_1_fu_744_p2 == 1'd0))) begin
        wc_0_1_reg_290 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_503_p2 == 1'd1))) begin
        wr_0_0_reg_161 <= add_ln18_reg_1021;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_400_p2 == 1'd0))) begin
        wr_0_0_reg_161 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln21_1_fu_817_p2 == 1'd1))) begin
        wr_0_1_reg_255 <= add_ln26_reg_1106;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln14_1_fu_714_p2 == 1'd0))) begin
        wr_0_1_reg_255 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln11_1_reg_1075 <= add_ln11_1_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln11_reg_990 <= add_ln11_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln14_1_reg_1088 <= add_ln14_1_fu_720_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln14_reg_1003 <= add_ln14_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln18_reg_1021 <= add_ln18_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln21_1_reg_1125 <= add_ln21_1_fu_823_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln21_reg_1039 <= add_ln21_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln24_1_reg_1143 <= add_ln24_1_fu_875_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln24_reg_1057 <= add_ln24_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln26_reg_1106 <= add_ln26_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln11_1_fu_674_p2 == 1'd0))) begin
        add_ln34_reg_1080 <= add_ln34_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln14_1_fu_714_p2 == 1'd0))) begin
        conv_out_addr_1_reg_1098 <= sext_ln34_1_fu_739_p1;
        zext_ln34_6_reg_1093[1 : 0] <= zext_ln34_6_fu_726_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_400_p2 == 1'd0))) begin
        conv_out_addr_reg_1013 <= sext_ln34_fu_425_p1;
        zext_ln34_4_reg_1008[1 : 0] <= zext_ln34_4_fu_412_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln18_1_fu_744_p2 == 1'd0))) begin
        sext_ln26_1_reg_1112 <= sext_ln26_1_fu_778_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_503_p2 == 1'd0))) begin
        sext_ln26_2_reg_1044[63 : 1] <= sext_ln26_2_fu_532_p1[63 : 1];
        zext_ln24_reg_1049[4 : 1] <= zext_ln24_fu_552_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln21_1_fu_817_p2 == 1'd0))) begin
        sext_ln26_3_reg_1130[63 : 1] <= sext_ln26_3_fu_846_p1[63 : 1];
        zext_ln24_1_reg_1135[4 : 1] <= zext_ln24_1_fu_865_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_430_p2 == 1'd0))) begin
        sext_ln26_reg_1026 <= sext_ln26_fu_464_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln11_fu_366_p2 == 1'd0))) begin
        sub_ln34_reg_995 <= sub_ln34_fu_394_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln11_1_fu_674_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln11_1_fu_674_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        conv_out_address0 = conv_out_addr_1_reg_1098;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_out_address0 = conv_out_addr_reg_1013;
    end else begin
        conv_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state10))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        conv_out_d0 = select_ln33_1_fu_978_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_out_d0 = select_ln33_fu_665_p3;
    end else begin
        conv_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state10))) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_weights_address0 = zext_ln26_12_fu_921_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_weights_address0 = zext_ln26_8_fu_608_p1;
    end else begin
        conv_weights_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6))) begin
        conv_weights_ce0 = 1'b1;
    end else begin
        conv_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_324_p0 = w_sum_2_1_reg_301;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_324_p0 = w_sum_0_1_reg_266;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_324_p0 = w_sum_2_0_reg_208;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_324_p0 = w_sum_0_0_reg_173;
    end else begin
        grp_fu_324_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_324_p1 = merge_i4_fu_808_p3;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_324_p1 = grp_fu_332_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_324_p1 = merge_i_fu_494_p3;
    end else begin
        grp_fu_324_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        input_r_address0 = zext_ln26_13_fu_931_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = zext_ln26_9_fu_618_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln11_fu_366_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_400_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_430_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_503_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_556_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln11_1_fu_674_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln14_1_fu_714_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln18_1_fu_744_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln21_1_fu_817_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln24_1_fu_869_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_680_p2 = (c_0_1_reg_231 + 2'd1);

assign add_ln11_fu_372_p2 = (c_0_0_reg_137 + 2'd1);

assign add_ln14_1_fu_720_p2 = (f_0_1_reg_243 + 2'd1);

assign add_ln14_fu_406_p2 = (f_0_0_reg_149 + 2'd1);

assign add_ln18_fu_436_p2 = (wr_0_0_reg_161 + 2'd1);

assign add_ln21_1_fu_823_p2 = (wc_0_1_reg_290 + 2'd1);

assign add_ln21_fu_509_p2 = (wc_0_0_reg_197 + 2'd1);

assign add_ln24_1_fu_875_p2 = (ch_0_1_reg_313 + 2'd1);

assign add_ln24_fu_562_p2 = (ch_0_0_reg_220 + 2'd1);

assign add_ln26_10_fu_926_p2 = (zext_ln26_11_fu_885_p1 + zext_ln24_1_reg_1135);

assign add_ln26_1_fu_536_p2 = (wc_0_0_reg_197 + c_0_0_reg_137);

assign add_ln26_2_fu_850_p2 = (wc_0_1_reg_290 + c_0_1_reg_231);

assign add_ln26_3_fu_519_p2 = ($signed(sext_ln26_reg_1026) + $signed(zext_ln26_4_fu_515_p1));

assign add_ln26_4_fu_833_p2 = ($signed(sext_ln26_1_reg_1112) + $signed(zext_ln26_5_fu_829_p1));

assign add_ln26_5_fu_576_p2 = ($signed(zext_ln26_6_fu_568_p1) + $signed(sext_ln26_2_reg_1044));

assign add_ln26_6_fu_603_p2 = (zext_ln34_4_reg_1008 + sub_ln26_2_fu_597_p2);

assign add_ln26_7_fu_613_p2 = (zext_ln26_7_fu_572_p1 + zext_ln24_reg_1049);

assign add_ln26_8_fu_889_p2 = ($signed(zext_ln26_10_fu_881_p1) + $signed(sext_ln26_3_reg_1130));

assign add_ln26_9_fu_916_p2 = (zext_ln34_6_reg_1093 + sub_ln26_3_fu_910_p2);

assign add_ln26_fu_750_p2 = (wr_0_1_reg_255 + 2'd1);

assign add_ln34_1_fu_420_p2 = (sub_ln34_reg_995 + zext_ln34_5_fu_416_p1);

assign add_ln34_2_fu_734_p2 = (add_ln34_reg_1080 + zext_ln34_7_fu_730_p1);

assign add_ln34_fu_708_p2 = (sub_ln34_1_fu_702_p2 + 5'd6);

assign and_ln33_1_fu_972_p2 = (or_ln33_1_fu_966_p2 & grp_fu_339_p2);

assign and_ln33_fu_659_p2 = (or_ln33_fu_653_p2 & grp_fu_339_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln33_1_fu_936_p1 = grp_fu_324_p2;

assign bitcast_ln33_fu_623_p1 = grp_fu_324_p2;

assign empty_18_fu_802_p2 = (icmp_ln7_3_fu_788_p2 | icmp_ln7_2_fu_782_p2);

assign empty_7_fu_488_p2 = (icmp_ln7_fu_468_p2 | icmp_ln7_1_fu_474_p2);

assign icmp_ln11_1_fu_674_p2 = ((c_0_1_reg_231 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_366_p2 = ((c_0_0_reg_137 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln14_1_fu_714_p2 = ((f_0_1_reg_243 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_400_p2 = ((f_0_0_reg_149 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_1_fu_744_p2 = ((wr_0_1_reg_255 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_430_p2 = ((wr_0_0_reg_161 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_817_p2 = ((wc_0_1_reg_290 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_503_p2 = ((wc_0_0_reg_197 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_869_p2 = ((ch_0_1_reg_313 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_556_p2 = ((ch_0_0_reg_220 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_647_p2 = ((trunc_ln33_fu_637_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_2_fu_954_p2 = ((tmp_13_fu_940_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln33_3_fu_960_p2 = ((trunc_ln33_1_fu_950_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_641_p2 = ((tmp_6_fu_627_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_474_p2 = ((f_0_0_reg_149 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_2_fu_782_p2 = ((f_0_1_reg_243 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_3_fu_788_p2 = ((f_0_1_reg_243 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_468_p2 = ((f_0_0_reg_149 == 2'd0) ? 1'b1 : 1'b0);

assign merge_i4_fu_808_p3 = ((empty_18_fu_802_p2[0:0] === 1'b1) ? select_ln7_i3_fu_794_p3 : 32'd1069547520);

assign merge_i_fu_494_p3 = ((empty_7_fu_488_p2[0:0] === 1'b1) ? select_ln7_i_fu_480_p3 : 32'd1069547520);

assign or_ln33_1_fu_966_p2 = (icmp_ln33_3_fu_960_p2 | icmp_ln33_2_fu_954_p2);

assign or_ln33_fu_653_p2 = (icmp_ln33_fu_641_p2 | icmp_ln33_1_fu_647_p2);

assign p_shl2_cast_fu_589_p3 = {{trunc_ln26_1_fu_585_p1}, {2'd0}};

assign p_shl5_cast_fu_902_p3 = {{trunc_ln26_3_fu_898_p1}, {2'd0}};

assign select_ln33_1_fu_978_p3 = ((and_ln33_1_fu_972_p2[0:0] === 1'b1) ? grp_fu_324_p2 : 32'd0);

assign select_ln33_fu_665_p3 = ((and_ln33_fu_659_p2[0:0] === 1'b1) ? grp_fu_324_p2 : 32'd0);

assign select_ln7_i3_fu_794_p3 = ((icmp_ln7_3_fu_788_p2[0:0] === 1'b1) ? 32'd1073741824 : 32'd1065353216);

assign select_ln7_i_fu_480_p3 = ((icmp_ln7_1_fu_474_p2[0:0] === 1'b1) ? 32'd1073741824 : 32'd1065353216);

assign sext_ln26_1_fu_778_p1 = $signed(sub_ln26_1_fu_772_p2);

assign sext_ln26_2_fu_532_p1 = $signed(tmp_18_fu_524_p3);

assign sext_ln26_3_fu_846_p1 = $signed(tmp_20_fu_838_p3);

assign sext_ln26_fu_464_p1 = $signed(sub_ln26_fu_458_p2);

assign sext_ln34_1_fu_739_p1 = $signed(add_ln34_2_fu_734_p2);

assign sext_ln34_fu_425_p1 = $signed(add_ln34_1_fu_420_p2);

assign sub_ln26_1_fu_772_p2 = (zext_ln26_3_fu_768_p1 - zext_ln26_2_fu_756_p1);

assign sub_ln26_2_fu_597_p2 = (p_shl2_cast_fu_589_p3 - trunc_ln26_fu_581_p1);

assign sub_ln26_3_fu_910_p2 = (p_shl5_cast_fu_902_p3 - trunc_ln26_2_fu_894_p1);

assign sub_ln26_fu_458_p2 = (zext_ln26_1_fu_454_p1 - zext_ln26_fu_442_p1);

assign sub_ln34_1_fu_702_p2 = (zext_ln34_3_fu_698_p1 - zext_ln34_2_fu_686_p1);

assign sub_ln34_fu_394_p2 = (zext_ln34_1_fu_390_p1 - zext_ln34_fu_378_p1);

assign tmp_12_fu_382_p3 = {{c_0_0_reg_137}, {2'd0}};

assign tmp_13_fu_940_p4 = {{bitcast_ln33_1_fu_936_p1[30:23]}};

assign tmp_15_fu_690_p3 = {{c_0_1_reg_231}, {2'd0}};

assign tmp_16_fu_446_p3 = {{wr_0_0_reg_161}, {2'd0}};

assign tmp_17_fu_760_p3 = {{wr_0_1_reg_255}, {2'd0}};

assign tmp_18_fu_524_p3 = {{add_ln26_3_fu_519_p2}, {1'd0}};

assign tmp_19_fu_542_p4 = {{{wr_0_0_reg_161}, {add_ln26_1_fu_536_p2}}, {1'd0}};

assign tmp_20_fu_838_p3 = {{add_ln26_4_fu_833_p2}, {1'd0}};

assign tmp_21_fu_856_p4 = {{{add_ln26_reg_1106}, {add_ln26_2_fu_850_p2}}, {1'd0}};

assign tmp_6_fu_627_p4 = {{bitcast_ln33_fu_623_p1[30:23]}};

assign trunc_ln26_1_fu_585_p1 = add_ln26_5_fu_576_p2[4:0];

assign trunc_ln26_2_fu_894_p1 = add_ln26_8_fu_889_p2[6:0];

assign trunc_ln26_3_fu_898_p1 = add_ln26_8_fu_889_p2[4:0];

assign trunc_ln26_fu_581_p1 = add_ln26_5_fu_576_p2[6:0];

assign trunc_ln33_1_fu_950_p1 = bitcast_ln33_1_fu_936_p1[22:0];

assign trunc_ln33_fu_637_p1 = bitcast_ln33_fu_623_p1[22:0];

assign zext_ln24_1_fu_865_p1 = tmp_21_fu_856_p4;

assign zext_ln24_fu_552_p1 = tmp_19_fu_542_p4;

assign zext_ln26_10_fu_881_p1 = ch_0_1_reg_313;

assign zext_ln26_11_fu_885_p1 = ch_0_1_reg_313;

assign zext_ln26_12_fu_921_p1 = add_ln26_9_fu_916_p2;

assign zext_ln26_13_fu_931_p1 = add_ln26_10_fu_926_p2;

assign zext_ln26_1_fu_454_p1 = tmp_16_fu_446_p3;

assign zext_ln26_2_fu_756_p1 = wr_0_1_reg_255;

assign zext_ln26_3_fu_768_p1 = tmp_17_fu_760_p3;

assign zext_ln26_4_fu_515_p1 = wc_0_0_reg_197;

assign zext_ln26_5_fu_829_p1 = wc_0_1_reg_290;

assign zext_ln26_6_fu_568_p1 = ch_0_0_reg_220;

assign zext_ln26_7_fu_572_p1 = ch_0_0_reg_220;

assign zext_ln26_8_fu_608_p1 = add_ln26_6_fu_603_p2;

assign zext_ln26_9_fu_618_p1 = add_ln26_7_fu_613_p2;

assign zext_ln26_fu_442_p1 = wr_0_0_reg_161;

assign zext_ln34_1_fu_390_p1 = tmp_12_fu_382_p3;

assign zext_ln34_2_fu_686_p1 = c_0_1_reg_231;

assign zext_ln34_3_fu_698_p1 = tmp_15_fu_690_p3;

assign zext_ln34_4_fu_412_p1 = f_0_0_reg_149;

assign zext_ln34_5_fu_416_p1 = f_0_0_reg_149;

assign zext_ln34_6_fu_726_p1 = f_0_1_reg_243;

assign zext_ln34_7_fu_730_p1 = f_0_1_reg_243;

assign zext_ln34_fu_378_p1 = c_0_0_reg_137;

always @ (posedge ap_clk) begin
    zext_ln34_4_reg_1008[6:2] <= 5'b00000;
    sext_ln26_2_reg_1044[0] <= 1'b0;
    zext_ln24_reg_1049[0] <= 1'b0;
    zext_ln24_reg_1049[5] <= 1'b0;
    zext_ln34_6_reg_1093[6:2] <= 5'b00000;
    sext_ln26_3_reg_1130[0] <= 1'b0;
    zext_ln24_1_reg_1135[0] <= 1'b0;
    zext_ln24_1_reg_1135[5] <= 1'b0;
end

endmodule //conv_1
