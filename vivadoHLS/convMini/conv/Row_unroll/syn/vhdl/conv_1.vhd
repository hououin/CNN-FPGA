-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=1198,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=724,HLS_SYN_LUT=1572,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3FC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_ce0 : STD_LOGIC;
    signal conv_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln11_fu_372_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln11_reg_990 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln34_fu_394_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln34_reg_995 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln11_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_406_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln14_reg_1003 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln34_4_fu_412_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln34_4_reg_1008 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln14_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_out_addr_reg_1013 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_fu_436_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln18_reg_1021 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln26_fu_464_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_reg_1026 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal merge_i_fu_494_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_fu_509_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_reg_1039 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln26_2_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_2_reg_1044 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln21_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_fu_552_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_reg_1049 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_fu_562_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_reg_1057 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln24_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_1_fu_680_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln11_1_reg_1075 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln34_fu_708_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_reg_1080 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln11_1_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_1_fu_720_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln14_1_reg_1088 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln34_6_fu_726_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln34_6_reg_1093 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln14_1_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_out_addr_1_reg_1098 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_750_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln26_reg_1106 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln26_1_fu_778_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_1_reg_1112 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_1_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal merge_i4_fu_808_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_1_fu_823_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_1_reg_1125 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sext_ln26_3_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_3_reg_1130 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln21_1_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_1_fu_865_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_1_reg_1135 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_1_fu_875_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_1_reg_1143 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln24_1_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_0_reg_137 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_0_0_reg_149 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal wr_0_0_reg_161 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_0_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_0_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_0_reg_197 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_0_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_0_reg_220 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_1_reg_231 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_0_1_reg_243 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal wr_0_1_reg_255 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_1_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_1_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_1_reg_290 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_1_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_1_reg_313 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln34_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_1_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_13_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln33_fu_665_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_1_fu_978_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_382_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_1_fu_390_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_fu_378_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_5_fu_416_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_1_fu_420_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_446_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_1_fu_454_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_442_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_458_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln7_1_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_7_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_i_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_4_fu_515_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_3_fu_519_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_524_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_1_fu_536_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_fu_542_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_6_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_5_fu_576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_1_fu_585_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_589_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln26_fu_581_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_2_fu_597_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_6_fu_603_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_7_fu_572_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_7_fu_613_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln33_fu_623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_627_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_637_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_1_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_690_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_3_fu_698_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_2_fu_686_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln34_1_fu_702_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_7_fu_730_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_2_fu_734_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_760_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_3_fu_768_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_2_fu_756_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_1_fu_772_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln7_3_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_2_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_18_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_i3_fu_794_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_5_fu_829_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_4_fu_833_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_838_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_2_fu_850_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_fu_856_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_10_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_8_fu_889_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_3_fu_898_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl5_cast_fu_902_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln26_2_fu_894_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_3_fu_910_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_9_fu_916_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_11_fu_885_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_10_fu_926_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln33_1_fu_936_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_940_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_1_fu_950_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_3_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_2_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_1_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component conv_1_fadd_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_U : component conv_1_conv_weights
    generic map (
        DataWidth => 32,
        AddressRange => 54,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_address0,
        ce0 => conv_weights_ce0,
        q0 => conv_weights_q0);

    conv_1_fadd_32ns_bkb_U1 : component conv_1_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_324_p0,
        din1 => grp_fu_324_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);

    conv_1_fmul_32ns_cud_U2 : component conv_1_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_q0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    conv_1_fcmp_32ns_dEe_U3 : component conv_1_fcmp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_324_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => grp_fu_339_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_0_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln14_fu_400_p2 = ap_const_lv1_1))) then 
                c_0_0_reg_137 <= add_ln11_reg_990;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_0_reg_137 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_0_1_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln14_1_fu_714_p2 = ap_const_lv1_1))) then 
                c_0_1_reg_231 <= add_ln11_1_reg_1075;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_366_p2 = ap_const_lv1_1))) then 
                c_0_1_reg_231 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_0_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                ch_0_0_reg_220 <= add_ln24_reg_1057;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_503_p2 = ap_const_lv1_0))) then 
                ch_0_0_reg_220 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_1_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                ch_0_1_reg_313 <= add_ln24_1_reg_1143;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln21_1_fu_817_p2 = ap_const_lv1_0))) then 
                ch_0_1_reg_313 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                f_0_0_reg_149 <= add_ln14_reg_1003;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_366_p2 = ap_const_lv1_0))) then 
                f_0_0_reg_149 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_1_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                f_0_1_reg_243 <= add_ln14_1_reg_1088;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln11_1_fu_674_p2 = ap_const_lv1_0))) then 
                f_0_1_reg_243 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_sum_0_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_503_p2 = ap_const_lv1_1))) then 
                w_sum_0_0_reg_173 <= w_sum_1_0_reg_185;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln14_fu_400_p2 = ap_const_lv1_0))) then 
                w_sum_0_0_reg_173 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_0_1_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln21_1_fu_817_p2 = ap_const_lv1_1))) then 
                w_sum_0_1_reg_266 <= w_sum_1_1_reg_278;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln14_1_fu_714_p2 = ap_const_lv1_0))) then 
                w_sum_0_1_reg_266 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_556_p2 = ap_const_lv1_1))) then 
                w_sum_1_0_reg_185 <= w_sum_2_0_reg_208;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_430_p2 = ap_const_lv1_0))) then 
                w_sum_1_0_reg_185 <= w_sum_0_0_reg_173;
            end if; 
        end if;
    end process;

    w_sum_1_1_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln24_1_fu_869_p2 = ap_const_lv1_1))) then 
                w_sum_1_1_reg_278 <= w_sum_2_1_reg_301;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln18_1_fu_744_p2 = ap_const_lv1_0))) then 
                w_sum_1_1_reg_278 <= w_sum_0_1_reg_266;
            end if; 
        end if;
    end process;

    w_sum_2_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_sum_2_0_reg_208 <= grp_fu_324_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_503_p2 = ap_const_lv1_0))) then 
                w_sum_2_0_reg_208 <= w_sum_1_0_reg_185;
            end if; 
        end if;
    end process;

    w_sum_2_1_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                w_sum_2_1_reg_301 <= grp_fu_324_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln21_1_fu_817_p2 = ap_const_lv1_0))) then 
                w_sum_2_1_reg_301 <= w_sum_1_1_reg_278;
            end if; 
        end if;
    end process;

    wc_0_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_556_p2 = ap_const_lv1_1))) then 
                wc_0_0_reg_197 <= add_ln21_reg_1039;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_430_p2 = ap_const_lv1_0))) then 
                wc_0_0_reg_197 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wc_0_1_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln24_1_fu_869_p2 = ap_const_lv1_1))) then 
                wc_0_1_reg_290 <= add_ln21_1_reg_1125;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln18_1_fu_744_p2 = ap_const_lv1_0))) then 
                wc_0_1_reg_290 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_503_p2 = ap_const_lv1_1))) then 
                wr_0_0_reg_161 <= add_ln18_reg_1021;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln14_fu_400_p2 = ap_const_lv1_0))) then 
                wr_0_0_reg_161 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_1_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln21_1_fu_817_p2 = ap_const_lv1_1))) then 
                wr_0_1_reg_255 <= add_ln26_reg_1106;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln14_1_fu_714_p2 = ap_const_lv1_0))) then 
                wr_0_1_reg_255 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln11_1_reg_1075 <= add_ln11_1_fu_680_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln11_reg_990 <= add_ln11_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln14_1_reg_1088 <= add_ln14_1_fu_720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln14_reg_1003 <= add_ln14_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln18_reg_1021 <= add_ln18_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln21_1_reg_1125 <= add_ln21_1_fu_823_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln21_reg_1039 <= add_ln21_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln24_1_reg_1143 <= add_ln24_1_fu_875_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln24_reg_1057 <= add_ln24_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln26_reg_1106 <= add_ln26_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln11_1_fu_674_p2 = ap_const_lv1_0))) then
                add_ln34_reg_1080 <= add_ln34_fu_708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln14_1_fu_714_p2 = ap_const_lv1_0))) then
                conv_out_addr_1_reg_1098 <= sext_ln34_1_fu_739_p1(4 - 1 downto 0);
                    zext_ln34_6_reg_1093(1 downto 0) <= zext_ln34_6_fu_726_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln14_fu_400_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_1013 <= sext_ln34_fu_425_p1(4 - 1 downto 0);
                    zext_ln34_4_reg_1008(1 downto 0) <= zext_ln34_4_fu_412_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln18_1_fu_744_p2 = ap_const_lv1_0))) then
                sext_ln26_1_reg_1112 <= sext_ln26_1_fu_778_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_503_p2 = ap_const_lv1_0))) then
                    sext_ln26_2_reg_1044(63 downto 1) <= sext_ln26_2_fu_532_p1(63 downto 1);
                    zext_ln24_reg_1049(4 downto 1) <= zext_ln24_fu_552_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln21_1_fu_817_p2 = ap_const_lv1_0))) then
                    sext_ln26_3_reg_1130(63 downto 1) <= sext_ln26_3_fu_846_p1(63 downto 1);
                    zext_ln24_1_reg_1135(4 downto 1) <= zext_ln24_1_fu_865_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_430_p2 = ap_const_lv1_0))) then
                sext_ln26_reg_1026 <= sext_ln26_fu_464_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_366_p2 = ap_const_lv1_0))) then
                sub_ln34_reg_995 <= sub_ln34_fu_394_p2;
            end if;
        end if;
    end process;
    zext_ln34_4_reg_1008(6 downto 2) <= "00000";
    sext_ln26_2_reg_1044(0) <= '0';
    zext_ln24_reg_1049(0) <= '0';
    zext_ln24_reg_1049(5) <= '0';
    zext_ln34_6_reg_1093(6 downto 2) <= "00000";
    sext_ln26_3_reg_1130(0) <= '0';
    zext_ln24_1_reg_1135(0) <= '0';
    zext_ln24_1_reg_1135(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln11_fu_366_p2, ap_CS_fsm_state3, icmp_ln14_fu_400_p2, ap_CS_fsm_state4, icmp_ln18_fu_430_p2, ap_CS_fsm_state5, icmp_ln21_fu_503_p2, ap_CS_fsm_state6, icmp_ln24_fu_556_p2, ap_CS_fsm_state11, icmp_ln11_1_fu_674_p2, ap_CS_fsm_state12, icmp_ln14_1_fu_714_p2, ap_CS_fsm_state13, icmp_ln18_1_fu_744_p2, ap_CS_fsm_state14, icmp_ln21_1_fu_817_p2, ap_CS_fsm_state15, icmp_ln24_1_fu_869_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_366_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln14_fu_400_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_430_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_503_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_556_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln11_1_fu_674_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln14_1_fu_714_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln18_1_fu_744_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln21_1_fu_817_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln24_1_fu_869_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_680_p2 <= std_logic_vector(unsigned(c_0_1_reg_231) + unsigned(ap_const_lv2_1));
    add_ln11_fu_372_p2 <= std_logic_vector(unsigned(c_0_0_reg_137) + unsigned(ap_const_lv2_1));
    add_ln14_1_fu_720_p2 <= std_logic_vector(unsigned(f_0_1_reg_243) + unsigned(ap_const_lv2_1));
    add_ln14_fu_406_p2 <= std_logic_vector(unsigned(f_0_0_reg_149) + unsigned(ap_const_lv2_1));
    add_ln18_fu_436_p2 <= std_logic_vector(unsigned(wr_0_0_reg_161) + unsigned(ap_const_lv2_1));
    add_ln21_1_fu_823_p2 <= std_logic_vector(unsigned(wc_0_1_reg_290) + unsigned(ap_const_lv2_1));
    add_ln21_fu_509_p2 <= std_logic_vector(unsigned(wc_0_0_reg_197) + unsigned(ap_const_lv2_1));
    add_ln24_1_fu_875_p2 <= std_logic_vector(unsigned(ch_0_1_reg_313) + unsigned(ap_const_lv2_1));
    add_ln24_fu_562_p2 <= std_logic_vector(unsigned(ch_0_0_reg_220) + unsigned(ap_const_lv2_1));
    add_ln26_10_fu_926_p2 <= std_logic_vector(unsigned(zext_ln26_11_fu_885_p1) + unsigned(zext_ln24_1_reg_1135));
    add_ln26_1_fu_536_p2 <= std_logic_vector(unsigned(wc_0_0_reg_197) + unsigned(c_0_0_reg_137));
    add_ln26_2_fu_850_p2 <= std_logic_vector(unsigned(wc_0_1_reg_290) + unsigned(c_0_1_reg_231));
    add_ln26_3_fu_519_p2 <= std_logic_vector(signed(sext_ln26_reg_1026) + signed(zext_ln26_4_fu_515_p1));
    add_ln26_4_fu_833_p2 <= std_logic_vector(signed(sext_ln26_1_reg_1112) + signed(zext_ln26_5_fu_829_p1));
    add_ln26_5_fu_576_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_568_p1) + unsigned(sext_ln26_2_reg_1044));
    add_ln26_6_fu_603_p2 <= std_logic_vector(unsigned(zext_ln34_4_reg_1008) + unsigned(sub_ln26_2_fu_597_p2));
    add_ln26_7_fu_613_p2 <= std_logic_vector(unsigned(zext_ln26_7_fu_572_p1) + unsigned(zext_ln24_reg_1049));
    add_ln26_8_fu_889_p2 <= std_logic_vector(unsigned(zext_ln26_10_fu_881_p1) + unsigned(sext_ln26_3_reg_1130));
    add_ln26_9_fu_916_p2 <= std_logic_vector(unsigned(zext_ln34_6_reg_1093) + unsigned(sub_ln26_3_fu_910_p2));
    add_ln26_fu_750_p2 <= std_logic_vector(unsigned(wr_0_1_reg_255) + unsigned(ap_const_lv2_1));
    add_ln34_1_fu_420_p2 <= std_logic_vector(unsigned(sub_ln34_reg_995) + unsigned(zext_ln34_5_fu_416_p1));
    add_ln34_2_fu_734_p2 <= std_logic_vector(unsigned(add_ln34_reg_1080) + unsigned(zext_ln34_7_fu_730_p1));
    add_ln34_fu_708_p2 <= std_logic_vector(unsigned(sub_ln34_1_fu_702_p2) + unsigned(ap_const_lv5_6));
    and_ln33_1_fu_972_p2 <= (or_ln33_1_fu_966_p2 and grp_fu_339_p2);
    and_ln33_fu_659_p2 <= (or_ln33_fu_653_p2 and grp_fu_339_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state11, icmp_ln11_1_fu_674_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln11_1_fu_674_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln11_1_fu_674_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln11_1_fu_674_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln33_1_fu_936_p1 <= grp_fu_324_p2;
    bitcast_ln33_fu_623_p1 <= grp_fu_324_p2;

    conv_out_address0_assign_proc : process(conv_out_addr_reg_1013, conv_out_addr_1_reg_1098, ap_CS_fsm_state10, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv_out_address0 <= conv_out_addr_1_reg_1098;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_out_address0 <= conv_out_addr_reg_1013;
        else 
            conv_out_address0 <= "XXXX";
        end if; 
    end process;


    conv_out_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_d0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state19, select_ln33_fu_665_p3, select_ln33_1_fu_978_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv_out_d0 <= select_ln33_1_fu_978_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_out_d0 <= select_ln33_fu_665_p3;
        else 
            conv_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_weights_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state15, zext_ln26_8_fu_608_p1, zext_ln26_12_fu_921_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            conv_weights_address0 <= zext_ln26_12_fu_921_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_weights_address0 <= zext_ln26_8_fu_608_p1(6 - 1 downto 0);
        else 
            conv_weights_address0 <= "XXXXXX";
        end if; 
    end process;


    conv_weights_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            conv_weights_ce0 <= ap_const_logic_1;
        else 
            conv_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_18_fu_802_p2 <= (icmp_ln7_3_fu_788_p2 or icmp_ln7_2_fu_782_p2);
    empty_7_fu_488_p2 <= (icmp_ln7_fu_468_p2 or icmp_ln7_1_fu_474_p2);

    grp_fu_324_p0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state17, ap_CS_fsm_state4, ap_CS_fsm_state13, w_sum_0_0_reg_173, w_sum_2_0_reg_208, w_sum_0_1_reg_266, w_sum_2_1_reg_301)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_324_p0 <= w_sum_2_1_reg_301;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_324_p0 <= w_sum_0_1_reg_266;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_324_p0 <= w_sum_2_0_reg_208;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_324_p0 <= w_sum_0_0_reg_173;
        else 
            grp_fu_324_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_324_p1_assign_proc : process(grp_fu_332_p2, ap_CS_fsm_state8, ap_CS_fsm_state17, ap_CS_fsm_state4, merge_i_fu_494_p3, ap_CS_fsm_state13, merge_i4_fu_808_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_324_p1 <= merge_i4_fu_808_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_324_p1 <= grp_fu_332_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_324_p1 <= merge_i_fu_494_p3;
        else 
            grp_fu_324_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_1_fu_674_p2 <= "1" when (c_0_1_reg_231 = ap_const_lv2_2) else "0";
    icmp_ln11_fu_366_p2 <= "1" when (c_0_0_reg_137 = ap_const_lv2_2) else "0";
    icmp_ln14_1_fu_714_p2 <= "1" when (f_0_1_reg_243 = ap_const_lv2_3) else "0";
    icmp_ln14_fu_400_p2 <= "1" when (f_0_0_reg_149 = ap_const_lv2_3) else "0";
    icmp_ln18_1_fu_744_p2 <= "1" when (wr_0_1_reg_255 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_430_p2 <= "1" when (wr_0_0_reg_161 = ap_const_lv2_3) else "0";
    icmp_ln21_1_fu_817_p2 <= "1" when (wc_0_1_reg_290 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_503_p2 <= "1" when (wc_0_0_reg_197 = ap_const_lv2_3) else "0";
    icmp_ln24_1_fu_869_p2 <= "1" when (ch_0_1_reg_313 = ap_const_lv2_2) else "0";
    icmp_ln24_fu_556_p2 <= "1" when (ch_0_0_reg_220 = ap_const_lv2_2) else "0";
    icmp_ln33_1_fu_647_p2 <= "1" when (trunc_ln33_fu_637_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_2_fu_954_p2 <= "0" when (tmp_13_fu_940_p4 = ap_const_lv8_FF) else "1";
    icmp_ln33_3_fu_960_p2 <= "1" when (trunc_ln33_1_fu_950_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_641_p2 <= "0" when (tmp_6_fu_627_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_1_fu_474_p2 <= "1" when (f_0_0_reg_149 = ap_const_lv2_1) else "0";
    icmp_ln7_2_fu_782_p2 <= "1" when (f_0_1_reg_243 = ap_const_lv2_0) else "0";
    icmp_ln7_3_fu_788_p2 <= "1" when (f_0_1_reg_243 = ap_const_lv2_1) else "0";
    icmp_ln7_fu_468_p2 <= "1" when (f_0_0_reg_149 = ap_const_lv2_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state15, zext_ln26_9_fu_618_p1, zext_ln26_13_fu_931_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_r_address0 <= zext_ln26_13_fu_931_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln26_9_fu_618_p1(5 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    merge_i4_fu_808_p3 <= 
        select_ln7_i3_fu_794_p3 when (empty_18_fu_802_p2(0) = '1') else 
        ap_const_lv32_3FC00000;
    merge_i_fu_494_p3 <= 
        select_ln7_i_fu_480_p3 when (empty_7_fu_488_p2(0) = '1') else 
        ap_const_lv32_3FC00000;
    or_ln33_1_fu_966_p2 <= (icmp_ln33_3_fu_960_p2 or icmp_ln33_2_fu_954_p2);
    or_ln33_fu_653_p2 <= (icmp_ln33_fu_641_p2 or icmp_ln33_1_fu_647_p2);
    p_shl2_cast_fu_589_p3 <= (trunc_ln26_1_fu_585_p1 & ap_const_lv2_0);
    p_shl5_cast_fu_902_p3 <= (trunc_ln26_3_fu_898_p1 & ap_const_lv2_0);
    select_ln33_1_fu_978_p3 <= 
        grp_fu_324_p2 when (and_ln33_1_fu_972_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln33_fu_665_p3 <= 
        grp_fu_324_p2 when (and_ln33_fu_659_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln7_i3_fu_794_p3 <= 
        ap_const_lv32_40000000 when (icmp_ln7_3_fu_788_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln7_i_fu_480_p3 <= 
        ap_const_lv32_40000000 when (icmp_ln7_1_fu_474_p2(0) = '1') else 
        ap_const_lv32_3F800000;
        sext_ln26_1_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_1_fu_772_p2),6));

        sext_ln26_2_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_524_p3),64));

        sext_ln26_3_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_838_p3),64));

        sext_ln26_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_458_p2),6));

        sext_ln34_1_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_2_fu_734_p2),64));

        sext_ln34_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_1_fu_420_p2),64));

    sub_ln26_1_fu_772_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_768_p1) - unsigned(zext_ln26_2_fu_756_p1));
    sub_ln26_2_fu_597_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_589_p3) - unsigned(trunc_ln26_fu_581_p1));
    sub_ln26_3_fu_910_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_902_p3) - unsigned(trunc_ln26_2_fu_894_p1));
    sub_ln26_fu_458_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_454_p1) - unsigned(zext_ln26_fu_442_p1));
    sub_ln34_1_fu_702_p2 <= std_logic_vector(unsigned(zext_ln34_3_fu_698_p1) - unsigned(zext_ln34_2_fu_686_p1));
    sub_ln34_fu_394_p2 <= std_logic_vector(unsigned(zext_ln34_1_fu_390_p1) - unsigned(zext_ln34_fu_378_p1));
    tmp_12_fu_382_p3 <= (c_0_0_reg_137 & ap_const_lv2_0);
    tmp_13_fu_940_p4 <= bitcast_ln33_1_fu_936_p1(30 downto 23);
    tmp_15_fu_690_p3 <= (c_0_1_reg_231 & ap_const_lv2_0);
    tmp_16_fu_446_p3 <= (wr_0_0_reg_161 & ap_const_lv2_0);
    tmp_17_fu_760_p3 <= (wr_0_1_reg_255 & ap_const_lv2_0);
    tmp_18_fu_524_p3 <= (add_ln26_3_fu_519_p2 & ap_const_lv1_0);
    tmp_19_fu_542_p4 <= ((wr_0_0_reg_161 & add_ln26_1_fu_536_p2) & ap_const_lv1_0);
    tmp_20_fu_838_p3 <= (add_ln26_4_fu_833_p2 & ap_const_lv1_0);
    tmp_21_fu_856_p4 <= ((add_ln26_reg_1106 & add_ln26_2_fu_850_p2) & ap_const_lv1_0);
    tmp_6_fu_627_p4 <= bitcast_ln33_fu_623_p1(30 downto 23);
    trunc_ln26_1_fu_585_p1 <= add_ln26_5_fu_576_p2(5 - 1 downto 0);
    trunc_ln26_2_fu_894_p1 <= add_ln26_8_fu_889_p2(7 - 1 downto 0);
    trunc_ln26_3_fu_898_p1 <= add_ln26_8_fu_889_p2(5 - 1 downto 0);
    trunc_ln26_fu_581_p1 <= add_ln26_5_fu_576_p2(7 - 1 downto 0);
    trunc_ln33_1_fu_950_p1 <= bitcast_ln33_1_fu_936_p1(23 - 1 downto 0);
    trunc_ln33_fu_637_p1 <= bitcast_ln33_fu_623_p1(23 - 1 downto 0);
    zext_ln24_1_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_856_p4),6));
    zext_ln24_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_542_p4),6));
    zext_ln26_10_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_313),64));
    zext_ln26_11_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_313),6));
    zext_ln26_12_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_fu_916_p2),64));
    zext_ln26_13_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_10_fu_926_p2),64));
    zext_ln26_1_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_446_p3),5));
    zext_ln26_2_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_1_reg_255),5));
    zext_ln26_3_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_760_p3),5));
    zext_ln26_4_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_0_reg_197),6));
    zext_ln26_5_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_1_reg_290),6));
    zext_ln26_6_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_220),64));
    zext_ln26_7_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_220),6));
    zext_ln26_8_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_603_p2),64));
    zext_ln26_9_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_613_p2),64));
    zext_ln26_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_0_reg_161),5));
    zext_ln34_1_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_382_p3),5));
    zext_ln34_2_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_1_reg_231),5));
    zext_ln34_3_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_690_p3),5));
    zext_ln34_4_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_0_reg_149),7));
    zext_ln34_5_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_0_reg_149),5));
    zext_ln34_6_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_1_reg_243),7));
    zext_ln34_7_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_1_reg_243),5));
    zext_ln34_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_0_reg_137),5));
end behav;
