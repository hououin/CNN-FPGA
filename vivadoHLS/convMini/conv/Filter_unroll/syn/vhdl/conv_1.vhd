-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=1185,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=819,HLS_SYN_LUT=1571,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3FC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weights_2_ce0 : STD_LOGIC;
    signal conv_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal r_fu_453_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_1075 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln11_fu_467_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln11_reg_1080 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_477_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_1088 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal conv_out_addr_reg_1093 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln11_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_out_addr_1_reg_1098 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_out_addr_2_reg_1103 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_fu_547_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln18_reg_1111 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_2_fu_575_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_2_reg_1116 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_579_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln26_reg_1121 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_fu_591_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_reg_1129 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal shl_ln26_fu_606_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln26_reg_1134 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln21_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_fu_627_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_reg_1139 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_fu_637_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_reg_1147 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln24_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln18_1_fu_724_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln18_1_reg_1175 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln26_5_fu_752_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_5_reg_1180 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_1_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_1_fu_756_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln26_1_reg_1185 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_1_fu_768_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_1_reg_1193 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal shl_ln26_1_fu_783_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln26_1_reg_1198 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln21_1_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_1_fu_804_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_1_reg_1203 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_1_fu_814_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_1_reg_1211 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln24_1_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln18_2_fu_901_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln18_2_reg_1239 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln26_9_fu_929_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_9_reg_1244 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_2_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_2_fu_933_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln26_2_reg_1249 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_2_fu_945_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_2_reg_1257 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal shl_ln26_2_fu_960_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln26_2_reg_1262 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln21_2_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_2_fu_981_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln24_2_reg_1267 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_2_fu_991_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_2_reg_1275 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln24_2_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal r_0_reg_178 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_reg_190 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal wr_0_0_reg_202 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_0_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_0_reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_0_reg_237 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_0_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_0_reg_260 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_0_1_reg_271 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal w_sum_0_1_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_1_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_1_reg_306 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_1_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_1_reg_329 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_0_2_reg_340 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal w_sum_0_2_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_2_reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_2_reg_375 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_2_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_2_reg_398 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_2_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_3_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_4_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_13_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_16_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_17_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_19_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_20_fu_1016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln33_fu_709_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_1_fu_886_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_2_fu_1063_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_409_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_459_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln34_fu_483_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_487_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln34_fu_496_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_500_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_1_fu_492_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln34_fu_508_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_1_fu_519_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_2_fu_530_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_557_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_1_fu_565_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_553_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_569_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_6_fu_597_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_6_fu_601_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_3_fu_612_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_fu_618_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_11_fu_643_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_8_fu_647_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_9_fu_657_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln33_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_671_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_681_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_1_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_734_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_742_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_3_fu_730_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_1_fu_746_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_10_fu_774_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_7_fu_778_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_4_fu_789_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_fu_795_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_15_fu_820_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_11_fu_824_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_12_fu_834_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln33_1_fu_844_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_848_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_1_fu_858_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_3_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_2_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_1_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_911_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_8_fu_919_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_7_fu_907_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_2_fu_923_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_14_fu_951_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_10_fu_955_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_5_fu_966_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_22_fu_972_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_18_fu_997_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_13_fu_1001_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_14_fu_1011_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln33_2_fu_1021_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1025_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_2_fu_1035_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_5_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_4_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_2_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_2_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component conv_1_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_weighbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_weighdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_1_conv_weighbkb
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_1_conv_weighcud
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_weights_2_U : component conv_1_conv_weighdEe
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_address0,
        ce0 => conv_weights_2_ce0,
        q0 => conv_weights_2_q0);

    conv_1_fadd_32ns_eOg_U1 : component conv_1_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_409_p0,
        din1 => grp_fu_409_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_409_p2);

    conv_1_fmul_32ns_fYi_U2 : component conv_1_fmul_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_422_p0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_422_p2);

    conv_1_fcmp_32ns_g8j_U3 : component conv_1_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_409_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => grp_fu_431_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                c_0_reg_190 <= c_reg_1088;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_447_p2 = ap_const_lv1_0))) then 
                c_0_reg_190 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                ch_0_0_reg_260 <= add_ln24_reg_1147;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_585_p2 = ap_const_lv1_0))) then 
                ch_0_0_reg_260 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_1_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                ch_0_1_reg_329 <= add_ln24_1_reg_1211;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln21_1_fu_762_p2 = ap_const_lv1_0))) then 
                ch_0_1_reg_329 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_2_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                ch_0_2_reg_398 <= add_ln24_2_reg_1275;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln21_2_fu_939_p2 = ap_const_lv1_0))) then 
                ch_0_2_reg_398 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_471_p2 = ap_const_lv1_1))) then 
                r_0_reg_178 <= r_reg_1075;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_178 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_sum_0_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_585_p2 = ap_const_lv1_1))) then 
                w_sum_0_0_reg_213 <= w_sum_1_0_reg_225;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_471_p2 = ap_const_lv1_0))) then 
                w_sum_0_0_reg_213 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_0_1_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_1_fu_762_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                w_sum_0_1_reg_282 <= w_sum_1_1_reg_294;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                w_sum_0_1_reg_282 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_0_2_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_2_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                w_sum_0_2_reg_351 <= w_sum_1_2_reg_363;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                w_sum_0_2_reg_351 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_631_p2 = ap_const_lv1_1))) then 
                w_sum_1_0_reg_225 <= w_sum_2_0_reg_248;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_541_p2 = ap_const_lv1_0))) then 
                w_sum_1_0_reg_225 <= w_sum_0_0_reg_213;
            end if; 
        end if;
    end process;

    w_sum_1_1_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_1_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                w_sum_1_1_reg_294 <= w_sum_2_1_reg_317;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln18_1_fu_718_p2 = ap_const_lv1_0))) then 
                w_sum_1_1_reg_294 <= w_sum_0_1_reg_282;
            end if; 
        end if;
    end process;

    w_sum_1_2_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_2_fu_985_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                w_sum_1_2_reg_363 <= w_sum_2_2_reg_386;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln18_2_fu_895_p2 = ap_const_lv1_0))) then 
                w_sum_1_2_reg_363 <= w_sum_0_2_reg_351;
            end if; 
        end if;
    end process;

    w_sum_2_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_sum_2_0_reg_248 <= grp_fu_409_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_585_p2 = ap_const_lv1_0))) then 
                w_sum_2_0_reg_248 <= w_sum_1_0_reg_225;
            end if; 
        end if;
    end process;

    w_sum_2_1_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                w_sum_2_1_reg_317 <= grp_fu_409_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln21_1_fu_762_p2 = ap_const_lv1_0))) then 
                w_sum_2_1_reg_317 <= w_sum_1_1_reg_294;
            end if; 
        end if;
    end process;

    w_sum_2_2_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                w_sum_2_2_reg_386 <= grp_fu_409_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln21_2_fu_939_p2 = ap_const_lv1_0))) then 
                w_sum_2_2_reg_386 <= w_sum_1_2_reg_363;
            end if; 
        end if;
    end process;

    wc_0_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_631_p2 = ap_const_lv1_1))) then 
                wc_0_0_reg_237 <= add_ln21_reg_1129;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_541_p2 = ap_const_lv1_0))) then 
                wc_0_0_reg_237 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wc_0_1_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_1_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                wc_0_1_reg_306 <= add_ln21_1_reg_1193;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln18_1_fu_718_p2 = ap_const_lv1_0))) then 
                wc_0_1_reg_306 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wc_0_2_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_2_fu_985_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                wc_0_2_reg_375 <= add_ln21_2_reg_1257;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln18_2_fu_895_p2 = ap_const_lv1_0))) then 
                wc_0_2_reg_375 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_585_p2 = ap_const_lv1_1))) then 
                wr_0_0_reg_202 <= add_ln18_reg_1111;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_471_p2 = ap_const_lv1_0))) then 
                wr_0_0_reg_202 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_1_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_1_fu_762_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                wr_0_1_reg_271 <= add_ln18_1_reg_1175;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                wr_0_1_reg_271 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_2_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_2_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                wr_0_2_reg_340 <= add_ln18_2_reg_1239;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                wr_0_2_reg_340 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln18_1_reg_1175 <= add_ln18_1_fu_724_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln18_2_reg_1239 <= add_ln18_2_fu_901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln18_reg_1111 <= add_ln18_fu_547_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln21_1_reg_1193 <= add_ln21_1_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln21_2_reg_1257 <= add_ln21_2_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln21_reg_1129 <= add_ln21_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln24_1_reg_1211 <= add_ln24_1_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln24_2_reg_1275 <= add_ln24_2_fu_991_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln24_reg_1147 <= add_ln24_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln18_1_fu_718_p2 = ap_const_lv1_0))) then
                add_ln26_1_reg_1185 <= add_ln26_1_fu_756_p2;
                    zext_ln26_5_reg_1180(4 downto 0) <= zext_ln26_5_fu_752_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln18_2_fu_895_p2 = ap_const_lv1_0))) then
                add_ln26_2_reg_1249 <= add_ln26_2_fu_933_p2;
                    zext_ln26_9_reg_1244(4 downto 0) <= zext_ln26_9_fu_929_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_541_p2 = ap_const_lv1_0))) then
                add_ln26_reg_1121 <= add_ln26_fu_579_p2;
                    zext_ln26_2_reg_1116(4 downto 0) <= zext_ln26_2_fu_575_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_1088 <= c_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_471_p2 = ap_const_lv1_0))) then
                conv_out_addr_1_reg_1098 <= zext_ln34_3_fu_525_p1(4 - 1 downto 0);
                conv_out_addr_2_reg_1103 <= zext_ln34_4_fu_536_p1(4 - 1 downto 0);
                conv_out_addr_reg_1093 <= zext_ln34_2_fu_514_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_1075 <= r_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln21_1_fu_762_p2 = ap_const_lv1_0))) then
                    shl_ln26_1_reg_1198(5 downto 1) <= shl_ln26_1_fu_783_p2(5 downto 1);
                    zext_ln24_1_reg_1203(4 downto 1) <= zext_ln24_1_fu_804_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln21_2_fu_939_p2 = ap_const_lv1_0))) then
                    shl_ln26_2_reg_1262(5 downto 1) <= shl_ln26_2_fu_960_p2(5 downto 1);
                    zext_ln24_2_reg_1267(4 downto 1) <= zext_ln24_2_fu_981_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_585_p2 = ap_const_lv1_0))) then
                    shl_ln26_reg_1134(5 downto 1) <= shl_ln26_fu_606_p2(5 downto 1);
                    zext_ln24_reg_1139(4 downto 1) <= zext_ln24_fu_627_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_447_p2 = ap_const_lv1_0))) then
                    zext_ln11_reg_1080(2 downto 1) <= zext_ln11_fu_467_p1(2 downto 1);
            end if;
        end if;
    end process;
    zext_ln11_reg_1080(0) <= '0';
    zext_ln11_reg_1080(3) <= '0';
    zext_ln26_2_reg_1116(5) <= '0';
    shl_ln26_reg_1134(0) <= '0';
    zext_ln24_reg_1139(0) <= '0';
    zext_ln24_reg_1139(5) <= '0';
    zext_ln26_5_reg_1180(5) <= '0';
    shl_ln26_1_reg_1198(0) <= '0';
    zext_ln24_1_reg_1203(0) <= '0';
    zext_ln24_1_reg_1203(5) <= '0';
    zext_ln26_9_reg_1244(5) <= '0';
    shl_ln26_2_reg_1262(0) <= '0';
    zext_ln24_2_reg_1267(0) <= '0';
    zext_ln24_2_reg_1267(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_447_p2, ap_CS_fsm_state3, icmp_ln11_fu_471_p2, ap_CS_fsm_state4, icmp_ln18_fu_541_p2, ap_CS_fsm_state5, icmp_ln21_fu_585_p2, ap_CS_fsm_state6, icmp_ln24_fu_631_p2, ap_CS_fsm_state11, icmp_ln18_1_fu_718_p2, ap_CS_fsm_state12, icmp_ln21_1_fu_762_p2, ap_CS_fsm_state13, icmp_ln24_1_fu_808_p2, ap_CS_fsm_state18, icmp_ln18_2_fu_895_p2, ap_CS_fsm_state19, icmp_ln21_2_fu_939_p2, ap_CS_fsm_state20, icmp_ln24_2_fu_985_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_447_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_471_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_541_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_585_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_631_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln18_1_fu_718_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln21_1_fu_762_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln24_1_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln18_2_fu_895_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln21_2_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln24_2_fu_985_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln18_1_fu_724_p2 <= std_logic_vector(unsigned(wr_0_1_reg_271) + unsigned(ap_const_lv2_1));
    add_ln18_2_fu_901_p2 <= std_logic_vector(unsigned(wr_0_2_reg_340) + unsigned(ap_const_lv2_1));
    add_ln18_fu_547_p2 <= std_logic_vector(unsigned(wr_0_0_reg_202) + unsigned(ap_const_lv2_1));
    add_ln21_1_fu_768_p2 <= std_logic_vector(unsigned(wc_0_1_reg_306) + unsigned(ap_const_lv2_1));
    add_ln21_2_fu_945_p2 <= std_logic_vector(unsigned(wc_0_2_reg_375) + unsigned(ap_const_lv2_1));
    add_ln21_fu_591_p2 <= std_logic_vector(unsigned(wc_0_0_reg_237) + unsigned(ap_const_lv2_1));
    add_ln24_1_fu_814_p2 <= std_logic_vector(unsigned(ch_0_1_reg_329) + unsigned(ap_const_lv2_1));
    add_ln24_2_fu_991_p2 <= std_logic_vector(unsigned(ch_0_2_reg_398) + unsigned(ap_const_lv2_1));
    add_ln24_fu_637_p2 <= std_logic_vector(unsigned(ch_0_0_reg_260) + unsigned(ap_const_lv2_1));
    add_ln26_10_fu_955_p2 <= std_logic_vector(unsigned(zext_ln26_14_fu_951_p1) + unsigned(zext_ln26_9_reg_1244));
    add_ln26_11_fu_824_p2 <= std_logic_vector(unsigned(shl_ln26_1_reg_1198) + unsigned(zext_ln26_15_fu_820_p1));
    add_ln26_12_fu_834_p2 <= std_logic_vector(unsigned(zext_ln24_1_reg_1203) + unsigned(zext_ln26_15_fu_820_p1));
    add_ln26_13_fu_1001_p2 <= std_logic_vector(unsigned(shl_ln26_2_reg_1262) + unsigned(zext_ln26_18_fu_997_p1));
    add_ln26_14_fu_1011_p2 <= std_logic_vector(unsigned(zext_ln24_2_reg_1267) + unsigned(zext_ln26_18_fu_997_p1));
    add_ln26_1_fu_756_p2 <= std_logic_vector(unsigned(wr_0_1_reg_271) + unsigned(r_0_reg_178));
    add_ln26_2_fu_933_p2 <= std_logic_vector(unsigned(wr_0_2_reg_340) + unsigned(r_0_reg_178));
    add_ln26_3_fu_612_p2 <= std_logic_vector(unsigned(c_0_reg_190) + unsigned(wc_0_0_reg_237));
    add_ln26_4_fu_789_p2 <= std_logic_vector(unsigned(c_0_reg_190) + unsigned(wc_0_1_reg_306));
    add_ln26_5_fu_966_p2 <= std_logic_vector(unsigned(c_0_reg_190) + unsigned(wc_0_2_reg_375));
    add_ln26_6_fu_601_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_597_p1) + unsigned(zext_ln26_2_reg_1116));
    add_ln26_7_fu_778_p2 <= std_logic_vector(unsigned(zext_ln26_10_fu_774_p1) + unsigned(zext_ln26_5_reg_1180));
    add_ln26_8_fu_647_p2 <= std_logic_vector(unsigned(shl_ln26_reg_1134) + unsigned(zext_ln26_11_fu_643_p1));
    add_ln26_9_fu_657_p2 <= std_logic_vector(unsigned(zext_ln24_reg_1139) + unsigned(zext_ln26_11_fu_643_p1));
    add_ln26_fu_579_p2 <= std_logic_vector(unsigned(wr_0_0_reg_202) + unsigned(r_0_reg_178));
    add_ln34_1_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(sub_ln34_fu_508_p2));
    add_ln34_2_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(sub_ln34_fu_508_p2));
    add_ln34_fu_487_p2 <= std_logic_vector(unsigned(zext_ln34_fu_483_p1) + unsigned(zext_ln11_reg_1080));
    and_ln33_1_fu_880_p2 <= (or_ln33_1_fu_874_p2 and grp_fu_431_p2);
    and_ln33_2_fu_1057_p2 <= (or_ln33_2_fu_1051_p2 and grp_fu_431_p2);
    and_ln33_fu_703_p2 <= (or_ln33_fu_697_p2 and grp_fu_431_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_447_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_447_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_447_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_447_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln33_1_fu_844_p1 <= grp_fu_409_p2;
    bitcast_ln33_2_fu_1021_p1 <= grp_fu_409_p2;
    bitcast_ln33_fu_667_p1 <= grp_fu_409_p2;
    c_fu_477_p2 <= std_logic_vector(unsigned(c_0_reg_190) + unsigned(ap_const_lv2_1));

    conv_out_address0_assign_proc : process(conv_out_addr_reg_1093, conv_out_addr_1_reg_1098, conv_out_addr_2_reg_1103, ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            conv_out_address0 <= conv_out_addr_2_reg_1103;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv_out_address0 <= conv_out_addr_1_reg_1098;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_out_address0 <= conv_out_addr_reg_1093;
        else 
            conv_out_address0 <= "XXXX";
        end if; 
    end process;


    conv_out_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_d0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state17, select_ln33_fu_709_p3, select_ln33_1_fu_886_p3, select_ln33_2_fu_1063_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            conv_out_d0 <= select_ln33_2_fu_1063_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv_out_d0 <= select_ln33_1_fu_886_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_out_d0 <= select_ln33_fu_709_p3;
        else 
            conv_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_we0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln26_12_fu_652_p1(5 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln26_16_fu_829_p1(5 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_address0 <= zext_ln26_19_fu_1006_p1(5 - 1 downto 0);

    conv_weights_2_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            conv_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_409_p0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state18, w_sum_0_0_reg_213, w_sum_2_0_reg_248, w_sum_0_1_reg_282, w_sum_2_1_reg_317, w_sum_0_2_reg_351, w_sum_2_2_reg_386)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_409_p0 <= w_sum_2_2_reg_386;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_409_p0 <= w_sum_0_2_reg_351;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_409_p0 <= w_sum_2_1_reg_317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_409_p0 <= w_sum_0_1_reg_282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_409_p0 <= w_sum_2_0_reg_248;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_409_p0 <= w_sum_0_0_reg_213;
        else 
            grp_fu_409_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_409_p1_assign_proc : process(grp_fu_422_p2, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_409_p1 <= ap_const_lv32_3FC00000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_409_p1 <= ap_const_lv32_40000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_409_p1 <= grp_fu_422_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_409_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_409_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_422_p0_assign_proc : process(conv_weights_0_q0, conv_weights_1_q0, conv_weights_2_q0, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_422_p0 <= conv_weights_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_422_p0 <= conv_weights_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_422_p0 <= conv_weights_0_q0;
        else 
            grp_fu_422_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_471_p2 <= "1" when (c_0_reg_190 = ap_const_lv2_2) else "0";
    icmp_ln18_1_fu_718_p2 <= "1" when (wr_0_1_reg_271 = ap_const_lv2_3) else "0";
    icmp_ln18_2_fu_895_p2 <= "1" when (wr_0_2_reg_340 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_541_p2 <= "1" when (wr_0_0_reg_202 = ap_const_lv2_3) else "0";
    icmp_ln21_1_fu_762_p2 <= "1" when (wc_0_1_reg_306 = ap_const_lv2_3) else "0";
    icmp_ln21_2_fu_939_p2 <= "1" when (wc_0_2_reg_375 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_585_p2 <= "1" when (wc_0_0_reg_237 = ap_const_lv2_3) else "0";
    icmp_ln24_1_fu_808_p2 <= "1" when (ch_0_1_reg_329 = ap_const_lv2_2) else "0";
    icmp_ln24_2_fu_985_p2 <= "1" when (ch_0_2_reg_398 = ap_const_lv2_2) else "0";
    icmp_ln24_fu_631_p2 <= "1" when (ch_0_0_reg_260 = ap_const_lv2_2) else "0";
    icmp_ln33_1_fu_691_p2 <= "1" when (trunc_ln33_fu_681_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_2_fu_862_p2 <= "0" when (tmp_13_fu_848_p4 = ap_const_lv8_FF) else "1";
    icmp_ln33_3_fu_868_p2 <= "1" when (trunc_ln33_1_fu_858_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_4_fu_1039_p2 <= "0" when (tmp_15_fu_1025_p4 = ap_const_lv8_FF) else "1";
    icmp_ln33_5_fu_1045_p2 <= "1" when (trunc_ln33_2_fu_1035_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_685_p2 <= "0" when (tmp_2_fu_671_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_447_p2 <= "1" when (r_0_reg_178 = ap_const_lv2_2) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state20, zext_ln26_13_fu_662_p1, zext_ln26_17_fu_839_p1, zext_ln26_20_fu_1016_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            input_r_address0 <= zext_ln26_20_fu_1016_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input_r_address0 <= zext_ln26_17_fu_839_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln26_13_fu_662_p1(5 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln33_1_fu_874_p2 <= (icmp_ln33_3_fu_868_p2 or icmp_ln33_2_fu_862_p2);
    or_ln33_2_fu_1051_p2 <= (icmp_ln33_5_fu_1045_p2 or icmp_ln33_4_fu_1039_p2);
    or_ln33_fu_697_p2 <= (icmp_ln33_fu_685_p2 or icmp_ln33_1_fu_691_p2);
    p_shl_cast_fu_500_p3 <= (trunc_ln34_fu_496_p1 & ap_const_lv2_0);
    r_fu_453_p2 <= std_logic_vector(unsigned(r_0_reg_178) + unsigned(ap_const_lv2_1));
    select_ln33_1_fu_886_p3 <= 
        grp_fu_409_p2 when (and_ln33_1_fu_880_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln33_2_fu_1063_p3 <= 
        grp_fu_409_p2 when (and_ln33_2_fu_1057_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln33_fu_709_p3 <= 
        grp_fu_409_p2 when (and_ln33_fu_703_p2(0) = '1') else 
        ap_const_lv32_0;
    shl_ln26_1_fu_783_p2 <= std_logic_vector(shift_left(unsigned(add_ln26_7_fu_778_p2),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    shl_ln26_2_fu_960_p2 <= std_logic_vector(shift_left(unsigned(add_ln26_10_fu_955_p2),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    shl_ln26_fu_606_p2 <= std_logic_vector(shift_left(unsigned(add_ln26_6_fu_601_p2),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    sub_ln26_1_fu_746_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_742_p1) - unsigned(zext_ln26_3_fu_730_p1));
    sub_ln26_2_fu_923_p2 <= std_logic_vector(unsigned(zext_ln26_8_fu_919_p1) - unsigned(zext_ln26_7_fu_907_p1));
    sub_ln26_fu_569_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_565_p1) - unsigned(zext_ln26_fu_553_p1));
    sub_ln34_fu_508_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_500_p3) - unsigned(zext_ln34_1_fu_492_p1));
    tmp_11_fu_459_p3 <= (r_0_reg_178 & ap_const_lv1_0);
    tmp_13_fu_848_p4 <= bitcast_ln33_1_fu_844_p1(30 downto 23);
    tmp_15_fu_1025_p4 <= bitcast_ln33_2_fu_1021_p1(30 downto 23);
    tmp_17_fu_557_p3 <= (wr_0_0_reg_202 & ap_const_lv2_0);
    tmp_18_fu_734_p3 <= (wr_0_1_reg_271 & ap_const_lv2_0);
    tmp_19_fu_618_p4 <= ((add_ln26_reg_1121 & add_ln26_3_fu_612_p2) & ap_const_lv1_0);
    tmp_20_fu_911_p3 <= (wr_0_2_reg_340 & ap_const_lv2_0);
    tmp_21_fu_795_p4 <= ((add_ln26_1_reg_1185 & add_ln26_4_fu_789_p2) & ap_const_lv1_0);
    tmp_22_fu_972_p4 <= ((add_ln26_2_reg_1249 & add_ln26_5_fu_966_p2) & ap_const_lv1_0);
    tmp_2_fu_671_p4 <= bitcast_ln33_fu_667_p1(30 downto 23);
    trunc_ln33_1_fu_858_p1 <= bitcast_ln33_1_fu_844_p1(23 - 1 downto 0);
    trunc_ln33_2_fu_1035_p1 <= bitcast_ln33_2_fu_1021_p1(23 - 1 downto 0);
    trunc_ln33_fu_681_p1 <= bitcast_ln33_fu_667_p1(23 - 1 downto 0);
    trunc_ln34_fu_496_p1 <= add_ln34_fu_487_p2(3 - 1 downto 0);
    zext_ln11_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_459_p3),4));
    zext_ln24_1_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_795_p4),6));
    zext_ln24_2_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_972_p4),6));
    zext_ln24_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_618_p4),6));
    zext_ln26_10_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_1_reg_306),6));
    zext_ln26_11_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_260),6));
    zext_ln26_12_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_647_p2),64));
    zext_ln26_13_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_fu_657_p2),64));
    zext_ln26_14_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_2_reg_375),6));
    zext_ln26_15_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_329),6));
    zext_ln26_16_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_11_fu_824_p2),64));
    zext_ln26_17_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_12_fu_834_p2),64));
    zext_ln26_18_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_2_reg_398),6));
    zext_ln26_19_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_13_fu_1001_p2),64));
    zext_ln26_1_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_557_p3),5));
    zext_ln26_20_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_14_fu_1011_p2),64));
    zext_ln26_2_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_fu_569_p2),6));
    zext_ln26_3_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_1_reg_271),5));
    zext_ln26_4_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_734_p3),5));
    zext_ln26_5_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_1_fu_746_p2),6));
    zext_ln26_6_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_0_reg_237),6));
    zext_ln26_7_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_2_reg_340),5));
    zext_ln26_8_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_911_p3),5));
    zext_ln26_9_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_2_fu_923_p2),6));
    zext_ln26_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_0_reg_202),5));
    zext_ln34_1_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_487_p2),5));
    zext_ln34_2_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln34_fu_508_p2),64));
    zext_ln34_3_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_fu_519_p2),64));
    zext_ln34_4_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_2_fu_530_p2),64));
    zext_ln34_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_190),4));
end behav;
