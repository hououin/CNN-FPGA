// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=1201,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=523,HLS_SYN_LUT=1035,HLS_VERSION=2020_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        conv_out_0_address0,
        conv_out_0_ce0,
        conv_out_0_we0,
        conv_out_0_d0,
        conv_out_1_address0,
        conv_out_1_ce0,
        conv_out_1_we0,
        conv_out_1_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [3:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [2:0] conv_out_0_address0;
output   conv_out_0_ce0;
output   conv_out_0_we0;
output  [31:0] conv_out_0_d0;
output  [2:0] conv_out_1_address0;
output   conv_out_1_ce0;
output   conv_out_1_we0;
output  [31:0] conv_out_1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg conv_out_0_ce0;
reg conv_out_0_we0;
reg conv_out_1_ce0;
reg conv_out_1_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] conv_weights_address0;
reg    conv_weights_ce0;
wire   [31:0] conv_weights_q0;
wire   [1:0] r_fu_274_p2;
reg   [1:0] r_reg_624;
wire    ap_CS_fsm_state2;
wire   [0:0] trunc_ln26_fu_280_p1;
reg   [0:0] trunc_ln26_reg_629;
wire   [0:0] icmp_ln8_fu_268_p2;
wire   [1:0] c_fu_290_p2;
reg   [1:0] c_reg_637;
wire    ap_CS_fsm_state3;
wire   [3:0] sub_ln34_fu_308_p2;
reg   [3:0] sub_ln34_reg_642;
wire   [0:0] icmp_ln11_fu_284_p2;
wire   [1:0] f_fu_320_p2;
reg   [1:0] f_reg_650;
wire    ap_CS_fsm_state4;
wire   [6:0] zext_ln34_1_fu_326_p1;
reg   [6:0] zext_ln34_1_reg_655;
wire   [0:0] icmp_ln14_fu_314_p2;
reg   [2:0] conv_out_0_addr_reg_660;
reg   [2:0] conv_out_1_addr_reg_665;
wire   [1:0] wr_fu_351_p2;
reg   [1:0] wr_reg_673;
wire    ap_CS_fsm_state5;
wire  signed [5:0] sext_ln26_fu_379_p1;
reg  signed [5:0] sext_ln26_reg_678;
wire   [0:0] icmp_ln18_fu_345_p2;
wire   [0:0] xor_ln26_fu_393_p2;
reg   [0:0] xor_ln26_reg_683;
reg   [0:0] tmp_10_reg_688;
wire   [31:0] merge_i_fu_432_p3;
wire   [1:0] wc_fu_447_p2;
reg   [1:0] wc_reg_701;
wire    ap_CS_fsm_state6;
wire  signed [63:0] sext_ln26_1_fu_470_p1;
reg  signed [63:0] sext_ln26_1_reg_706;
wire   [0:0] icmp_ln21_fu_441_p2;
wire   [4:0] zext_ln24_fu_489_p1;
reg   [4:0] zext_ln24_reg_711;
wire   [1:0] ch_fu_499_p2;
reg   [1:0] ch_reg_719;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln24_fu_493_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_256_p2;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_250_p2;
wire    ap_CS_fsm_state10;
reg   [1:0] r_0_reg_145;
reg   [1:0] c_0_reg_157;
reg   [1:0] f_0_reg_169;
wire    ap_CS_fsm_state11;
reg   [1:0] wr_0_reg_181;
reg   [31:0] w_sum_0_reg_192;
reg   [31:0] w_sum_1_reg_204;
reg   [1:0] wc_0_reg_216;
reg   [31:0] w_sum_2_reg_227;
reg   [1:0] ch_0_reg_239;
wire  signed [63:0] sext_ln34_fu_339_p1;
wire   [63:0] zext_ln26_5_fu_545_p1;
wire   [63:0] zext_ln26_6_fu_555_p1;
wire   [31:0] w_sum_4_fu_611_p3;
reg   [31:0] grp_fu_250_p0;
reg   [31:0] grp_fu_250_p1;
wire   [31:0] grp_fu_256_p1;
wire   [3:0] tmp_8_fu_300_p3;
wire   [3:0] zext_ln34_fu_296_p1;
wire   [3:0] zext_ln34_2_fu_330_p1;
wire   [3:0] add_ln34_fu_334_p2;
wire   [3:0] tmp_9_fu_361_p3;
wire   [4:0] zext_ln26_1_fu_369_p1;
wire   [4:0] zext_ln26_fu_357_p1;
wire   [4:0] sub_ln26_fu_373_p2;
wire   [0:0] trunc_ln26_1_fu_383_p1;
wire   [1:0] add_ln26_fu_387_p2;
wire   [0:0] icmp_ln7_1_fu_412_p2;
wire   [0:0] icmp_ln7_fu_406_p2;
wire   [0:0] empty_11_fu_426_p2;
wire   [31:0] select_ln7_i_fu_418_p3;
wire   [5:0] zext_ln26_2_fu_453_p1;
wire   [5:0] add_ln26_2_fu_457_p2;
wire   [6:0] tmp_13_fu_462_p3;
wire   [1:0] add_ln26_1_fu_474_p2;
wire   [3:0] tmp_s_fu_480_p4;
wire   [63:0] zext_ln26_3_fu_505_p1;
wire   [63:0] add_ln26_3_fu_513_p2;
wire   [4:0] trunc_ln26_3_fu_522_p1;
wire   [6:0] p_shl2_cast_fu_526_p3;
wire   [6:0] trunc_ln26_2_fu_518_p1;
wire   [6:0] sub_ln26_1_fu_534_p2;
wire   [6:0] add_ln26_4_fu_540_p2;
wire   [4:0] zext_ln26_4_fu_509_p1;
wire   [4:0] add_ln26_5_fu_550_p2;
wire   [31:0] bitcast_ln33_fu_569_p1;
wire   [7:0] tmp_fu_573_p4;
wire   [22:0] trunc_ln33_fu_583_p1;
wire   [0:0] icmp_ln33_1_fu_593_p2;
wire   [0:0] icmp_ln33_fu_587_p2;
wire   [0:0] or_ln33_fu_599_p2;
wire   [0:0] tmp_5_fu_262_p2;
wire   [0:0] and_ln33_fu_605_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

conv_1_conv_weights #(
    .DataWidth( 32 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
conv_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_address0),
    .ce0(conv_weights_ce0),
    .q0(conv_weights_q0)
);

conv_1_fadd_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_250_p0),
    .din1(grp_fu_250_p1),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

conv_1_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_weights_q0),
    .din1(grp_fu_256_p1),
    .ce(1'b1),
    .dout(grp_fu_256_p2)
);

conv_1_fcmp_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_dEe_U3(
    .din0(grp_fu_250_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_5_fu_262_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_157 <= c_reg_637;
    end else if (((icmp_ln8_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_157 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ch_0_reg_239 <= ch_reg_719;
    end else if (((icmp_ln21_fu_441_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ch_0_reg_239 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        f_0_reg_169 <= f_reg_650;
    end else if (((icmp_ln11_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_169 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_145 <= r_reg_624;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_145 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_441_p2 == 1'd1))) begin
        w_sum_0_reg_192 <= w_sum_1_reg_204;
    end else if (((icmp_ln14_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        w_sum_0_reg_192 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln24_fu_493_p2 == 1'd1))) begin
        w_sum_1_reg_204 <= w_sum_2_reg_227;
    end else if (((icmp_ln18_fu_345_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        w_sum_1_reg_204 <= w_sum_0_reg_192;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w_sum_2_reg_227 <= grp_fu_250_p2;
    end else if (((icmp_ln21_fu_441_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        w_sum_2_reg_227 <= w_sum_1_reg_204;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln24_fu_493_p2 == 1'd1))) begin
        wc_0_reg_216 <= wc_reg_701;
    end else if (((icmp_ln18_fu_345_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        wc_0_reg_216 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_441_p2 == 1'd1))) begin
        wr_0_reg_181 <= wr_reg_673;
    end else if (((icmp_ln14_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_181 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_637 <= c_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ch_reg_719 <= ch_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        conv_out_0_addr_reg_660 <= sext_ln34_fu_339_p1;
        conv_out_1_addr_reg_665 <= sext_ln34_fu_339_p1;
        zext_ln34_1_reg_655[1 : 0] <= zext_ln34_1_fu_326_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_650 <= f_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_624 <= r_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_441_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sext_ln26_1_reg_706[63 : 1] <= sext_ln26_1_fu_470_p1[63 : 1];
        zext_ln24_reg_711[3 : 1] <= zext_ln24_fu_489_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_345_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sext_ln26_reg_678 <= sext_ln26_fu_379_p1;
        tmp_10_reg_688 <= add_ln26_fu_387_p2[32'd1];
        xor_ln26_reg_683 <= xor_ln26_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln34_reg_642 <= sub_ln34_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln26_reg_629 <= trunc_ln26_fu_280_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wc_reg_701 <= wc_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_673 <= wr_fu_351_p2;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_out_0_ce0 = 1'b1;
    end else begin
        conv_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln26_reg_629 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        conv_out_0_we0 = 1'b1;
    end else begin
        conv_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_out_1_ce0 = 1'b1;
    end else begin
        conv_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln26_reg_629 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        conv_out_1_we0 = 1'b1;
    end else begin
        conv_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_weights_ce0 = 1'b1;
    end else begin
        conv_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_250_p0 = w_sum_2_reg_227;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_250_p0 = w_sum_0_reg_192;
    end else begin
        grp_fu_250_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_250_p1 = grp_fu_256_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_250_p1 = merge_i_fu_432_p3;
    end else begin
        grp_fu_250_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln18_fu_345_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_441_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln24_fu_493_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_1_fu_474_p2 = (wc_0_reg_216 + c_0_reg_157);

assign add_ln26_2_fu_457_p2 = ($signed(sext_ln26_reg_678) + $signed(zext_ln26_2_fu_453_p1));

assign add_ln26_3_fu_513_p2 = ($signed(zext_ln26_3_fu_505_p1) + $signed(sext_ln26_1_reg_706));

assign add_ln26_4_fu_540_p2 = (zext_ln34_1_reg_655 + sub_ln26_1_fu_534_p2);

assign add_ln26_5_fu_550_p2 = (zext_ln26_4_fu_509_p1 + zext_ln24_reg_711);

assign add_ln26_fu_387_p2 = (r_0_reg_145 + wr_0_reg_181);

assign add_ln34_fu_334_p2 = (sub_ln34_reg_642 + zext_ln34_2_fu_330_p1);

assign and_ln33_fu_605_p2 = (tmp_5_fu_262_p2 & or_ln33_fu_599_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln33_fu_569_p1 = grp_fu_250_p2;

assign c_fu_290_p2 = (c_0_reg_157 + 2'd1);

assign ch_fu_499_p2 = (ch_0_reg_239 + 2'd1);

assign conv_out_0_address0 = conv_out_0_addr_reg_660;

assign conv_out_0_d0 = w_sum_4_fu_611_p3;

assign conv_out_1_address0 = conv_out_1_addr_reg_665;

assign conv_out_1_d0 = w_sum_4_fu_611_p3;

assign conv_weights_address0 = zext_ln26_5_fu_545_p1;

assign empty_11_fu_426_p2 = (icmp_ln7_fu_406_p2 | icmp_ln7_1_fu_412_p2);

assign f_fu_320_p2 = (f_0_reg_169 + 2'd1);

assign grp_fu_256_p1 = ((tmp_10_reg_688[0:0] === 1'b1) ? input_1_q0 : input_0_q0);

assign icmp_ln11_fu_284_p2 = ((c_0_reg_157 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_314_p2 = ((f_0_reg_169 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_345_p2 = ((wr_0_reg_181 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_441_p2 = ((wc_0_reg_216 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_493_p2 = ((ch_0_reg_239 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_593_p2 = ((trunc_ln33_fu_583_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_587_p2 = ((tmp_fu_573_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_412_p2 = ((f_0_reg_169 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_406_p2 = ((f_0_reg_169 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_268_p2 = ((r_0_reg_145 == 2'd2) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln26_6_fu_555_p1;

assign input_1_address0 = zext_ln26_6_fu_555_p1;

assign merge_i_fu_432_p3 = ((empty_11_fu_426_p2[0:0] === 1'b1) ? select_ln7_i_fu_418_p3 : 32'd1069547520);

assign or_ln33_fu_599_p2 = (icmp_ln33_fu_587_p2 | icmp_ln33_1_fu_593_p2);

assign p_shl2_cast_fu_526_p3 = {{trunc_ln26_3_fu_522_p1}, {2'd0}};

assign r_fu_274_p2 = (r_0_reg_145 + 2'd1);

assign select_ln7_i_fu_418_p3 = ((icmp_ln7_1_fu_412_p2[0:0] === 1'b1) ? 32'd1073741824 : 32'd1065353216);

assign sext_ln26_1_fu_470_p1 = $signed(tmp_13_fu_462_p3);

assign sext_ln26_fu_379_p1 = $signed(sub_ln26_fu_373_p2);

assign sext_ln34_fu_339_p1 = $signed(add_ln34_fu_334_p2);

assign sub_ln26_1_fu_534_p2 = (p_shl2_cast_fu_526_p3 - trunc_ln26_2_fu_518_p1);

assign sub_ln26_fu_373_p2 = (zext_ln26_1_fu_369_p1 - zext_ln26_fu_357_p1);

assign sub_ln34_fu_308_p2 = (tmp_8_fu_300_p3 - zext_ln34_fu_296_p1);

assign tmp_13_fu_462_p3 = {{add_ln26_2_fu_457_p2}, {1'd0}};

assign tmp_8_fu_300_p3 = {{c_0_reg_157}, {2'd0}};

assign tmp_9_fu_361_p3 = {{wr_0_reg_181}, {2'd0}};

assign tmp_fu_573_p4 = {{bitcast_ln33_fu_569_p1[30:23]}};

assign tmp_s_fu_480_p4 = {{{xor_ln26_reg_683}, {add_ln26_1_fu_474_p2}}, {1'd0}};

assign trunc_ln26_1_fu_383_p1 = wr_0_reg_181[0:0];

assign trunc_ln26_2_fu_518_p1 = add_ln26_3_fu_513_p2[6:0];

assign trunc_ln26_3_fu_522_p1 = add_ln26_3_fu_513_p2[4:0];

assign trunc_ln26_fu_280_p1 = r_0_reg_145[0:0];

assign trunc_ln33_fu_583_p1 = bitcast_ln33_fu_569_p1[22:0];

assign w_sum_4_fu_611_p3 = ((and_ln33_fu_605_p2[0:0] === 1'b1) ? grp_fu_250_p2 : 32'd0);

assign wc_fu_447_p2 = (wc_0_reg_216 + 2'd1);

assign wr_fu_351_p2 = (wr_0_reg_181 + 2'd1);

assign xor_ln26_fu_393_p2 = (trunc_ln26_reg_629 ^ trunc_ln26_1_fu_383_p1);

assign zext_ln24_fu_489_p1 = tmp_s_fu_480_p4;

assign zext_ln26_1_fu_369_p1 = tmp_9_fu_361_p3;

assign zext_ln26_2_fu_453_p1 = wc_0_reg_216;

assign zext_ln26_3_fu_505_p1 = ch_0_reg_239;

assign zext_ln26_4_fu_509_p1 = ch_0_reg_239;

assign zext_ln26_5_fu_545_p1 = add_ln26_4_fu_540_p2;

assign zext_ln26_6_fu_555_p1 = add_ln26_5_fu_550_p2;

assign zext_ln26_fu_357_p1 = wr_0_reg_181;

assign zext_ln34_1_fu_326_p1 = f_0_reg_169;

assign zext_ln34_2_fu_330_p1 = f_0_reg_169;

assign zext_ln34_fu_296_p1 = c_0_reg_157;

always @ (posedge ap_clk) begin
    zext_ln34_1_reg_655[6:2] <= 5'b00000;
    sext_ln26_1_reg_706[0] <= 1'b0;
    zext_ln24_reg_711[0] <= 1'b0;
    zext_ln24_reg_711[4] <= 1'b0;
end

endmodule //conv_1
