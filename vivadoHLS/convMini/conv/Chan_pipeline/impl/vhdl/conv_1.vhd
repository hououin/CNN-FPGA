-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=493,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=416,HLS_SYN_LUT=1171,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3FC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111110000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_ce0 : STD_LOGIC;
    signal conv_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten19_reg_198 : STD_LOGIC_VECTOR (4 downto 0);
    signal wr_0_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_220 : STD_LOGIC_VECTOR (3 downto 0);
    signal wc_0_reg_231 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_254 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln8_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_289_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln8_reg_792 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln11_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_1_fu_315_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_802 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_2_fu_365_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_2_reg_808 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_3_fu_373_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_3_reg_815 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_3_fu_413_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln34_3_reg_823 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_out_addr_reg_828 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln18_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_833_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_fu_438_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_reg_837 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln26_1_fu_464_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_1_reg_842 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_3_fu_545_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_3_reg_847 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_4_fu_553_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_4_reg_852 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_fu_673_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_reg_867 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ch_fu_681_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ch_reg_882 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal merge_i_fu_710_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal f_fu_719_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_reg_902 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln11_fu_730_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln11_reg_907 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten41_reg_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal r_0_reg_153 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten27_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_176 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_0_reg_187 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten19_phi_fu_202_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_213_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_224_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_235_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_2_phi_fu_246_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ch_0_phi_fu_258_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_5_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_5_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_6_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_265_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal r_fu_295_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_323_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln14_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_307_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln34_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_353_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_fu_331_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_1_fu_381_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_385_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln34_fu_395_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_399_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_2_fu_391_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln34_fu_407_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_4_fu_417_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_1_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_444_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_476_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_1_fu_484_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_472_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_488_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_503_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln24_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_fu_456_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln26_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_533_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln26_2_fu_561_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_fu_494_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_2_fu_565_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_571_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_3_fu_583_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_2_fu_508_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln26_fu_498_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_5_fu_588_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_596_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_3_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_1_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_4_fu_618_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_1_fu_628_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_cast_fu_632_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln26_fu_624_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_1_fu_640_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_5_fu_646_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_4_fu_614_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln21_fu_606_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_6_fu_656_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln21_fu_667_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln7_1_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_5_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_i_fu_696_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_1_fu_724_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln33_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_741_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_751_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln33_1_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1_fadd_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_U : component conv_1_conv_weights
    generic map (
        DataWidth => 32,
        AddressRange => 54,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_address0,
        ce0 => conv_weights_ce0,
        q0 => conv_weights_q0);

    conv_1_fadd_32ns_bkb_U1 : component conv_1_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_265_p0,
        din1 => grp_fu_265_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    conv_1_fmul_32ns_cud_U2 : component conv_1_fmul_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_q0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    conv_1_fcmp_32ns_dEe_U3 : component conv_1_fcmp_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_265_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_5_fu_277_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln8_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_0_reg_176 <= select_ln34_3_reg_815;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_176 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ch_0_reg_254 <= ch_reg_882;
            elsif (((icmp_ln8_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ch_0_reg_254 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                f_0_reg_187 <= f_reg_902;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_187 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten19_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten19_reg_198 <= add_ln18_reg_837;
            elsif (((icmp_ln8_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten19_reg_198 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten27_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten27_reg_164 <= select_ln11_reg_907;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten27_reg_164 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten41_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten41_reg_142 <= add_ln8_reg_792;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten41_reg_142 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_220 <= select_ln21_reg_867;
            elsif (((icmp_ln8_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_220 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                r_0_reg_153 <= select_ln34_1_reg_802;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_153 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_sum_2_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_833_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                w_sum_2_reg_242 <= grp_fu_265_p2;
            elsif (((icmp_ln8_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_2_reg_242 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                wc_0_reg_231 <= select_ln26_4_reg_852;
            elsif (((icmp_ln8_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_231 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                wr_0_reg_209 <= select_ln26_1_reg_842;
            elsif (((icmp_ln8_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_209 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln18_reg_837 <= add_ln18_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_792 <= add_ln8_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ch_reg_882 <= ch_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_828 <= zext_ln34_5_fu_427_p1(4 - 1 downto 0);
                icmp_ln11_reg_797 <= icmp_ln11_fu_301_p2;
                select_ln34_1_reg_802 <= select_ln34_1_fu_315_p3;
                select_ln34_2_reg_808 <= select_ln34_2_fu_365_p3;
                select_ln34_3_reg_815 <= select_ln34_3_fu_373_p3;
                    zext_ln34_3_reg_823(1 downto 0) <= zext_ln34_3_fu_413_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                f_reg_902 <= f_fu_719_p2;
                select_ln11_reg_907 <= select_ln11_fu_730_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln18_reg_833 <= icmp_ln18_fu_432_p2;
                icmp_ln18_reg_833_pp0_iter1_reg <= icmp_ln18_reg_833;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln21_reg_867 <= select_ln21_fu_673_p3;
                select_ln26_1_reg_842 <= select_ln26_1_fu_464_p3;
                select_ln26_4_reg_852 <= select_ln26_4_fu_553_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln18_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln26_3_reg_847 <= select_ln26_3_fu_545_p3;
            end if;
        end if;
    end process;
    zext_ln34_3_reg_823(6 downto 2) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_fu_283_p2, ap_CS_fsm_state2, icmp_ln18_fu_432_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln18_fu_432_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln18_fu_432_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln11_1_fu_724_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten27_reg_164));
    add_ln18_fu_438_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten19_phi_fu_202_p4) + unsigned(ap_const_lv5_1));
    add_ln21_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_224_p4));
    add_ln26_1_fu_503_p2 <= std_logic_vector(unsigned(select_ln34_3_reg_815) + unsigned(ap_phi_mux_wc_0_phi_fu_235_p4));
    add_ln26_2_fu_565_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_561_p1) + unsigned(sext_ln26_fu_494_p1));
    add_ln26_3_fu_583_p2 <= std_logic_vector(unsigned(select_ln34_3_reg_815) + unsigned(wc_fu_533_p2));
    add_ln26_4_fu_618_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_610_p1) + unsigned(sext_ln26_1_fu_579_p1));
    add_ln26_5_fu_646_p2 <= std_logic_vector(unsigned(zext_ln34_3_reg_823) + unsigned(sub_ln26_1_fu_640_p2));
    add_ln26_6_fu_656_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_614_p1) + unsigned(zext_ln21_fu_606_p1));
    add_ln26_fu_498_p2 <= std_logic_vector(unsigned(select_ln34_1_reg_802) + unsigned(select_ln26_1_fu_464_p3));
    add_ln34_1_fu_421_p2 <= std_logic_vector(unsigned(sub_ln34_fu_407_p2) + unsigned(zext_ln34_4_fu_417_p1));
    add_ln34_fu_385_p2 <= std_logic_vector(unsigned(zext_ln34_fu_331_p1) + unsigned(zext_ln34_1_fu_381_p1));
    add_ln8_fu_289_p2 <= std_logic_vector(unsigned(indvar_flatten41_reg_142) + unsigned(ap_const_lv4_1));
    and_ln26_fu_527_p2 <= (xor_ln26_fu_515_p2 and icmp_ln24_fu_521_p2);
    and_ln33_fu_773_p2 <= (tmp_5_fu_277_p2 and or_ln33_fu_767_p2);
    and_ln34_fu_347_p2 <= (xor_ln34_fu_335_p2 and icmp_ln14_fu_341_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_432_p2)
    begin
        if ((icmp_ln18_fu_432_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln8_fu_283_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_phi_fu_258_p4_assign_proc : process(ch_0_reg_254, icmp_ln18_reg_833, ap_CS_fsm_pp0_stage0, ch_reg_882, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_ch_0_phi_fu_258_p4 <= ch_reg_882;
        else 
            ap_phi_mux_ch_0_phi_fu_258_p4 <= ch_0_reg_254;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten19_phi_fu_202_p4_assign_proc : process(indvar_flatten19_reg_198, icmp_ln18_reg_833, ap_CS_fsm_pp0_stage0, add_ln18_reg_837, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten19_phi_fu_202_p4 <= add_ln18_reg_837;
        else 
            ap_phi_mux_indvar_flatten19_phi_fu_202_p4 <= indvar_flatten19_reg_198;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_224_p4_assign_proc : process(indvar_flatten_reg_220, icmp_ln18_reg_833, ap_CS_fsm_pp0_stage0, select_ln21_reg_867, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_224_p4 <= select_ln21_reg_867;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_224_p4 <= indvar_flatten_reg_220;
        end if; 
    end process;

    ap_phi_mux_w_sum_2_phi_fu_246_p4 <= w_sum_2_reg_242;

    ap_phi_mux_wc_0_phi_fu_235_p4_assign_proc : process(wc_0_reg_231, icmp_ln18_reg_833, ap_CS_fsm_pp0_stage0, select_ln26_4_reg_852, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_wc_0_phi_fu_235_p4 <= select_ln26_4_reg_852;
        else 
            ap_phi_mux_wc_0_phi_fu_235_p4 <= wc_0_reg_231;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_213_p4_assign_proc : process(wr_0_reg_209, icmp_ln18_reg_833, ap_CS_fsm_pp0_stage0, select_ln26_1_reg_842, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_833 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_wr_0_phi_fu_213_p4 <= select_ln26_1_reg_842;
        else 
            ap_phi_mux_wr_0_phi_fu_213_p4 <= wr_0_reg_209;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_283_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln33_fu_737_p1 <= grp_fu_265_p2;
    c_fu_353_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln34_fu_307_p3));
    ch_fu_681_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln26_3_reg_847));
    conv_out_address0 <= conv_out_addr_reg_828;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_265_p2 when (and_ln33_fu_773_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_address0 <= zext_ln26_5_fu_651_p1(6 - 1 downto 0);

    conv_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_ce0 <= ap_const_logic_1;
        else 
            conv_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_5_fu_704_p2 <= (icmp_ln7_fu_686_p2 or icmp_ln7_1_fu_691_p2);
    f_fu_719_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln34_2_reg_808));

    grp_fu_265_p0_assign_proc : process(w_sum_2_reg_242, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state7, ap_block_pp0_stage0, ap_phi_mux_w_sum_2_phi_fu_246_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_265_p0 <= w_sum_2_reg_242;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_265_p0 <= ap_phi_mux_w_sum_2_phi_fu_246_p4;
        else 
            grp_fu_265_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_265_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, grp_fu_270_p2, ap_enable_reg_pp0_iter1, merge_i_fu_710_p3, ap_CS_fsm_state7, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_265_p1 <= merge_i_fu_710_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_265_p1 <= grp_fu_270_p2;
        else 
            grp_fu_265_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_301_p2 <= "1" when (indvar_flatten27_reg_164 = ap_const_lv4_6) else "0";
    icmp_ln14_fu_341_p2 <= "1" when (f_0_reg_187 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_432_p2 <= "1" when (ap_phi_mux_indvar_flatten19_phi_fu_202_p4 = ap_const_lv5_12) else "0";
    icmp_ln21_fu_450_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_224_p4 = ap_const_lv4_6) else "0";
    icmp_ln24_fu_521_p2 <= "1" when (ap_phi_mux_ch_0_phi_fu_258_p4 = ap_const_lv2_2) else "0";
    icmp_ln33_1_fu_761_p2 <= "1" when (trunc_ln33_fu_751_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_755_p2 <= "0" when (tmp_fu_741_p4 = ap_const_lv8_FF) else "1";
    icmp_ln7_1_fu_691_p2 <= "1" when (select_ln34_2_reg_808 = ap_const_lv2_1) else "0";
    icmp_ln7_fu_686_p2 <= "1" when (select_ln34_2_reg_808 = ap_const_lv2_0) else "0";
    icmp_ln8_fu_283_p2 <= "1" when (indvar_flatten41_reg_142 = ap_const_lv4_C) else "0";
    input_r_address0 <= zext_ln26_6_fu_662_p1(5 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    merge_i_fu_710_p3 <= 
        select_ln7_i_fu_696_p3 when (empty_5_fu_704_p2(0) = '1') else 
        ap_const_lv32_3FC00000;
    or_ln26_fu_539_p2 <= (icmp_ln21_fu_450_p2 or and_ln26_fu_527_p2);
    or_ln33_fu_767_p2 <= (icmp_ln33_fu_755_p2 or icmp_ln33_1_fu_761_p2);
    or_ln34_fu_359_p2 <= (icmp_ln11_fu_301_p2 or and_ln34_fu_347_p2);
    p_shl1_cast_fu_632_p3 <= (trunc_ln26_1_fu_628_p1 & ap_const_lv2_0);
    p_shl_cast_fu_399_p3 <= (trunc_ln34_fu_395_p1 & ap_const_lv2_0);
    r_fu_295_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(r_0_reg_153));
    select_ln11_fu_730_p3 <= 
        ap_const_lv4_1 when (icmp_ln11_reg_797(0) = '1') else 
        add_ln11_1_fu_724_p2;
    select_ln21_fu_673_p3 <= 
        ap_const_lv4_1 when (icmp_ln21_fu_450_p2(0) = '1') else 
        add_ln21_fu_667_p2;
    select_ln26_1_fu_464_p3 <= 
        wr_fu_444_p2 when (icmp_ln21_fu_450_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_213_p4;
    select_ln26_2_fu_508_p3 <= 
        select_ln34_3_reg_815 when (icmp_ln21_fu_450_p2(0) = '1') else 
        add_ln26_1_fu_503_p2;
    select_ln26_3_fu_545_p3 <= 
        ap_const_lv2_0 when (or_ln26_fu_539_p2(0) = '1') else 
        ap_phi_mux_ch_0_phi_fu_258_p4;
    select_ln26_4_fu_553_p3 <= 
        wc_fu_533_p2 when (and_ln26_fu_527_p2(0) = '1') else 
        select_ln26_fu_456_p3;
    select_ln26_5_fu_588_p3 <= 
        add_ln26_3_fu_583_p2 when (and_ln26_fu_527_p2(0) = '1') else 
        select_ln26_2_fu_508_p3;
    select_ln26_fu_456_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_450_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_235_p4;
    select_ln34_1_fu_315_p3 <= 
        r_fu_295_p2 when (icmp_ln11_fu_301_p2(0) = '1') else 
        r_0_reg_153;
    select_ln34_2_fu_365_p3 <= 
        ap_const_lv2_0 when (or_ln34_fu_359_p2(0) = '1') else 
        f_0_reg_187;
    select_ln34_3_fu_373_p3 <= 
        c_fu_353_p2 when (and_ln34_fu_347_p2(0) = '1') else 
        select_ln34_fu_307_p3;
    select_ln34_fu_307_p3 <= 
        ap_const_lv2_0 when (icmp_ln11_fu_301_p2(0) = '1') else 
        c_0_reg_176;
    select_ln7_i_fu_696_p3 <= 
        ap_const_lv32_40000000 when (icmp_ln7_1_fu_691_p2(0) = '1') else 
        ap_const_lv32_3F800000;
        sext_ln26_1_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_571_p3),64));

        sext_ln26_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_488_p2),6));

    sub_ln26_1_fu_640_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_632_p3) - unsigned(trunc_ln26_fu_624_p1));
    sub_ln26_fu_488_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_484_p1) - unsigned(zext_ln26_fu_472_p1));
    sub_ln34_fu_407_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_399_p3) - unsigned(zext_ln34_2_fu_391_p1));
    tmp_2_fu_323_p3 <= (select_ln34_1_fu_315_p3 & ap_const_lv1_0);
    tmp_3_fu_571_p3 <= (add_ln26_2_fu_565_p2 & ap_const_lv1_0);
    tmp_6_fu_476_p3 <= (select_ln26_1_fu_464_p3 & ap_const_lv2_0);
    tmp_fu_741_p4 <= bitcast_ln33_fu_737_p1(30 downto 23);
    tmp_s_fu_596_p4 <= ((add_ln26_fu_498_p2 & select_ln26_5_fu_588_p3) & ap_const_lv1_0);
    trunc_ln26_1_fu_628_p1 <= add_ln26_4_fu_618_p2(5 - 1 downto 0);
    trunc_ln26_fu_624_p1 <= add_ln26_4_fu_618_p2(7 - 1 downto 0);
    trunc_ln33_fu_751_p1 <= bitcast_ln33_fu_737_p1(23 - 1 downto 0);
    trunc_ln34_fu_395_p1 <= add_ln34_fu_385_p2(3 - 1 downto 0);
    wc_fu_533_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln26_fu_456_p3));
    wr_fu_444_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_wr_0_phi_fu_213_p4));
    xor_ln26_fu_515_p2 <= (icmp_ln21_fu_450_p2 xor ap_const_lv1_1);
    xor_ln34_fu_335_p2 <= (icmp_ln11_fu_301_p2 xor ap_const_lv1_1);
    zext_ln21_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_596_p4),6));
    zext_ln26_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_476_p3),5));
    zext_ln26_2_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_4_fu_553_p3),6));
    zext_ln26_3_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_3_fu_545_p3),64));
    zext_ln26_4_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_3_fu_545_p3),6));
    zext_ln26_5_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_646_p2),64));
    zext_ln26_6_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_656_p2),64));
    zext_ln26_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_1_fu_464_p3),5));
    zext_ln34_1_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_3_fu_373_p3),4));
    zext_ln34_2_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_385_p2),5));
    zext_ln34_3_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_2_fu_365_p3),7));
    zext_ln34_4_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_2_fu_365_p3),5));
    zext_ln34_5_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_fu_421_p2),64));
    zext_ln34_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_323_p3),4));
end behav;
