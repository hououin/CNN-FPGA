// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=33.795000,HLS_SYN_LAT=493,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=416,HLS_SYN_LUT=1171,HLS_VERSION=2020_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_pp0_stage1 = 6'd8;
parameter    ap_ST_fsm_state7 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [3:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] conv_weights_address0;
reg    conv_weights_ce0;
wire   [31:0] conv_weights_q0;
reg   [4:0] indvar_flatten19_reg_198;
reg   [1:0] wr_0_reg_209;
reg   [3:0] indvar_flatten_reg_220;
reg   [1:0] wc_0_reg_231;
reg   [31:0] w_sum_2_reg_242;
reg   [1:0] ch_0_reg_254;
wire   [0:0] icmp_ln8_fu_283_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln8_fu_289_p2;
reg   [3:0] add_ln8_reg_792;
wire   [0:0] icmp_ln11_fu_301_p2;
reg   [0:0] icmp_ln11_reg_797;
wire   [1:0] select_ln34_1_fu_315_p3;
reg   [1:0] select_ln34_1_reg_802;
wire   [1:0] select_ln34_2_fu_365_p3;
reg   [1:0] select_ln34_2_reg_808;
wire   [1:0] select_ln34_3_fu_373_p3;
reg   [1:0] select_ln34_3_reg_815;
wire   [6:0] zext_ln34_3_fu_413_p1;
reg   [6:0] zext_ln34_3_reg_823;
reg   [3:0] conv_out_addr_reg_828;
wire   [0:0] icmp_ln18_fu_432_p2;
reg   [0:0] icmp_ln18_reg_833;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln18_reg_833_pp0_iter1_reg;
wire   [4:0] add_ln18_fu_438_p2;
reg   [4:0] add_ln18_reg_837;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln26_1_fu_464_p3;
reg   [1:0] select_ln26_1_reg_842;
wire   [1:0] select_ln26_3_fu_545_p3;
reg   [1:0] select_ln26_3_reg_847;
wire   [1:0] select_ln26_4_fu_553_p3;
reg   [1:0] select_ln26_4_reg_852;
wire   [3:0] select_ln21_fu_673_p3;
reg   [3:0] select_ln21_reg_867;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [1:0] ch_fu_681_p2;
reg   [1:0] ch_reg_882;
wire   [31:0] grp_fu_270_p2;
wire   [31:0] grp_fu_265_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] merge_i_fu_710_p3;
wire    ap_CS_fsm_state7;
wire   [1:0] f_fu_719_p2;
reg   [1:0] f_reg_902;
wire   [3:0] select_ln11_fu_730_p3;
reg   [3:0] select_ln11_reg_907;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] indvar_flatten41_reg_142;
wire    ap_CS_fsm_state8;
reg   [1:0] r_0_reg_153;
reg   [3:0] indvar_flatten27_reg_164;
reg   [1:0] c_0_reg_176;
reg   [1:0] f_0_reg_187;
reg   [4:0] ap_phi_mux_indvar_flatten19_phi_fu_202_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_213_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_224_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_235_p4;
wire   [31:0] ap_phi_mux_w_sum_2_phi_fu_246_p4;
reg   [1:0] ap_phi_mux_ch_0_phi_fu_258_p4;
wire   [63:0] zext_ln34_5_fu_427_p1;
wire   [63:0] zext_ln26_5_fu_651_p1;
wire   [63:0] zext_ln26_6_fu_662_p1;
reg   [31:0] grp_fu_265_p0;
reg   [31:0] grp_fu_265_p1;
wire    ap_block_pp0_stage1;
wire   [1:0] r_fu_295_p2;
wire   [2:0] tmp_2_fu_323_p3;
wire   [0:0] icmp_ln14_fu_341_p2;
wire   [0:0] xor_ln34_fu_335_p2;
wire   [1:0] select_ln34_fu_307_p3;
wire   [0:0] and_ln34_fu_347_p2;
wire   [0:0] or_ln34_fu_359_p2;
wire   [1:0] c_fu_353_p2;
wire   [3:0] zext_ln34_fu_331_p1;
wire   [3:0] zext_ln34_1_fu_381_p1;
wire   [3:0] add_ln34_fu_385_p2;
wire   [2:0] trunc_ln34_fu_395_p1;
wire   [4:0] p_shl_cast_fu_399_p3;
wire   [4:0] zext_ln34_2_fu_391_p1;
wire   [4:0] sub_ln34_fu_407_p2;
wire   [4:0] zext_ln34_4_fu_417_p1;
wire   [4:0] add_ln34_1_fu_421_p2;
wire   [0:0] icmp_ln21_fu_450_p2;
wire   [1:0] wr_fu_444_p2;
wire   [3:0] tmp_6_fu_476_p3;
wire   [4:0] zext_ln26_1_fu_484_p1;
wire   [4:0] zext_ln26_fu_472_p1;
wire   [4:0] sub_ln26_fu_488_p2;
wire   [1:0] add_ln26_1_fu_503_p2;
wire   [0:0] icmp_ln24_fu_521_p2;
wire   [0:0] xor_ln26_fu_515_p2;
wire   [1:0] select_ln26_fu_456_p3;
wire   [0:0] and_ln26_fu_527_p2;
wire   [0:0] or_ln26_fu_539_p2;
wire   [1:0] wc_fu_533_p2;
wire   [5:0] zext_ln26_2_fu_561_p1;
wire  signed [5:0] sext_ln26_fu_494_p1;
wire   [5:0] add_ln26_2_fu_565_p2;
wire   [6:0] tmp_3_fu_571_p3;
wire   [1:0] add_ln26_3_fu_583_p2;
wire   [1:0] select_ln26_2_fu_508_p3;
wire   [1:0] add_ln26_fu_498_p2;
wire   [1:0] select_ln26_5_fu_588_p3;
wire   [4:0] tmp_s_fu_596_p4;
wire   [63:0] zext_ln26_3_fu_610_p1;
wire  signed [63:0] sext_ln26_1_fu_579_p1;
wire   [63:0] add_ln26_4_fu_618_p2;
wire   [4:0] trunc_ln26_1_fu_628_p1;
wire   [6:0] p_shl1_cast_fu_632_p3;
wire   [6:0] trunc_ln26_fu_624_p1;
wire   [6:0] sub_ln26_1_fu_640_p2;
wire   [6:0] add_ln26_5_fu_646_p2;
wire   [5:0] zext_ln26_4_fu_614_p1;
wire   [5:0] zext_ln21_fu_606_p1;
wire   [5:0] add_ln26_6_fu_656_p2;
wire   [3:0] add_ln21_fu_667_p2;
wire   [0:0] icmp_ln7_1_fu_691_p2;
wire   [0:0] icmp_ln7_fu_686_p2;
wire   [0:0] empty_5_fu_704_p2;
wire   [31:0] select_ln7_i_fu_696_p3;
wire   [3:0] add_ln11_1_fu_724_p2;
wire   [31:0] bitcast_ln33_fu_737_p1;
wire   [7:0] tmp_fu_741_p4;
wire   [22:0] trunc_ln33_fu_751_p1;
wire   [0:0] icmp_ln33_1_fu_761_p2;
wire   [0:0] icmp_ln33_fu_755_p2;
wire   [0:0] or_ln33_fu_767_p2;
wire   [0:0] tmp_5_fu_277_p2;
wire   [0:0] and_ln33_fu_773_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_weights #(
    .DataWidth( 32 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
conv_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_address0),
    .ce0(conv_weights_ce0),
    .q0(conv_weights_q0)
);

conv_1_fadd_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_265_p0),
    .din1(grp_fu_265_p1),
    .ce(1'b1),
    .dout(grp_fu_265_p2)
);

conv_1_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_weights_q0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

conv_1_fcmp_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_dEe_U3(
    .din0(grp_fu_265_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_5_fu_277_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln8_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln8_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_0_reg_176 <= select_ln34_3_reg_815;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_176 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ch_0_reg_254 <= ch_reg_882;
    end else if (((icmp_ln8_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ch_0_reg_254 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        f_0_reg_187 <= f_reg_902;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_187 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten19_reg_198 <= add_ln18_reg_837;
    end else if (((icmp_ln8_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten19_reg_198 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten27_reg_164 <= select_ln11_reg_907;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten27_reg_164 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten41_reg_142 <= add_ln8_reg_792;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten41_reg_142 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_220 <= select_ln21_reg_867;
    end else if (((icmp_ln8_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_220 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_0_reg_153 <= select_ln34_1_reg_802;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_153 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_833_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_sum_2_reg_242 <= grp_fu_265_p2;
    end else if (((icmp_ln8_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_2_reg_242 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        wc_0_reg_231 <= select_ln26_4_reg_852;
    end else if (((icmp_ln8_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wc_0_reg_231 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        wr_0_reg_209 <= select_ln26_1_reg_842;
    end else if (((icmp_ln8_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_209 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln18_reg_837 <= add_ln18_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_792 <= add_ln8_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ch_reg_882 <= ch_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_addr_reg_828 <= zext_ln34_5_fu_427_p1;
        icmp_ln11_reg_797 <= icmp_ln11_fu_301_p2;
        select_ln34_1_reg_802 <= select_ln34_1_fu_315_p3;
        select_ln34_2_reg_808 <= select_ln34_2_fu_365_p3;
        select_ln34_3_reg_815 <= select_ln34_3_fu_373_p3;
        zext_ln34_3_reg_823[1 : 0] <= zext_ln34_3_fu_413_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        f_reg_902 <= f_fu_719_p2;
        select_ln11_reg_907 <= select_ln11_fu_730_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln18_reg_833 <= icmp_ln18_fu_432_p2;
        icmp_ln18_reg_833_pp0_iter1_reg <= icmp_ln18_reg_833;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln21_reg_867 <= select_ln21_fu_673_p3;
        select_ln26_1_reg_842 <= select_ln26_1_fu_464_p3;
        select_ln26_4_reg_852 <= select_ln26_4_fu_553_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln26_3_reg_847 <= select_ln26_3_fu_545_p3;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_432_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_ch_0_phi_fu_258_p4 = ch_reg_882;
    end else begin
        ap_phi_mux_ch_0_phi_fu_258_p4 = ch_0_reg_254;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten19_phi_fu_202_p4 = add_ln18_reg_837;
    end else begin
        ap_phi_mux_indvar_flatten19_phi_fu_202_p4 = indvar_flatten19_reg_198;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_224_p4 = select_ln21_reg_867;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_224_p4 = indvar_flatten_reg_220;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_wc_0_phi_fu_235_p4 = select_ln26_4_reg_852;
    end else begin
        ap_phi_mux_wc_0_phi_fu_235_p4 = wc_0_reg_231;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_wr_0_phi_fu_213_p4 = select_ln26_1_reg_842;
    end else begin
        ap_phi_mux_wr_0_phi_fu_213_p4 = wr_0_reg_209;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_ce0 = 1'b1;
    end else begin
        conv_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_265_p0 = w_sum_2_reg_242;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_265_p0 = ap_phi_mux_w_sum_2_phi_fu_246_p4;
    end else begin
        grp_fu_265_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_265_p1 = merge_i_fu_710_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_265_p1 = grp_fu_270_p2;
    end else begin
        grp_fu_265_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln18_fu_432_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln18_fu_432_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_724_p2 = (4'd1 + indvar_flatten27_reg_164);

assign add_ln18_fu_438_p2 = (ap_phi_mux_indvar_flatten19_phi_fu_202_p4 + 5'd1);

assign add_ln21_fu_667_p2 = (4'd1 + ap_phi_mux_indvar_flatten_phi_fu_224_p4);

assign add_ln26_1_fu_503_p2 = (select_ln34_3_reg_815 + ap_phi_mux_wc_0_phi_fu_235_p4);

assign add_ln26_2_fu_565_p2 = ($signed(zext_ln26_2_fu_561_p1) + $signed(sext_ln26_fu_494_p1));

assign add_ln26_3_fu_583_p2 = (select_ln34_3_reg_815 + wc_fu_533_p2);

assign add_ln26_4_fu_618_p2 = ($signed(zext_ln26_3_fu_610_p1) + $signed(sext_ln26_1_fu_579_p1));

assign add_ln26_5_fu_646_p2 = (zext_ln34_3_reg_823 + sub_ln26_1_fu_640_p2);

assign add_ln26_6_fu_656_p2 = (zext_ln26_4_fu_614_p1 + zext_ln21_fu_606_p1);

assign add_ln26_fu_498_p2 = (select_ln34_1_reg_802 + select_ln26_1_fu_464_p3);

assign add_ln34_1_fu_421_p2 = (sub_ln34_fu_407_p2 + zext_ln34_4_fu_417_p1);

assign add_ln34_fu_385_p2 = (zext_ln34_fu_331_p1 + zext_ln34_1_fu_381_p1);

assign add_ln8_fu_289_p2 = (indvar_flatten41_reg_142 + 4'd1);

assign and_ln26_fu_527_p2 = (xor_ln26_fu_515_p2 & icmp_ln24_fu_521_p2);

assign and_ln33_fu_773_p2 = (tmp_5_fu_277_p2 & or_ln33_fu_767_p2);

assign and_ln34_fu_347_p2 = (xor_ln34_fu_335_p2 & icmp_ln14_fu_341_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_w_sum_2_phi_fu_246_p4 = w_sum_2_reg_242;

assign bitcast_ln33_fu_737_p1 = grp_fu_265_p2;

assign c_fu_353_p2 = (2'd1 + select_ln34_fu_307_p3);

assign ch_fu_681_p2 = (2'd1 + select_ln26_3_reg_847);

assign conv_out_address0 = conv_out_addr_reg_828;

assign conv_out_d0 = ((and_ln33_fu_773_p2[0:0] === 1'b1) ? grp_fu_265_p2 : 32'd0);

assign conv_weights_address0 = zext_ln26_5_fu_651_p1;

assign empty_5_fu_704_p2 = (icmp_ln7_fu_686_p2 | icmp_ln7_1_fu_691_p2);

assign f_fu_719_p2 = (2'd1 + select_ln34_2_reg_808);

assign icmp_ln11_fu_301_p2 = ((indvar_flatten27_reg_164 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_341_p2 = ((f_0_reg_187 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_432_p2 = ((ap_phi_mux_indvar_flatten19_phi_fu_202_p4 == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_450_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_224_p4 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_521_p2 = ((ap_phi_mux_ch_0_phi_fu_258_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_761_p2 = ((trunc_ln33_fu_751_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_755_p2 = ((tmp_fu_741_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_691_p2 = ((select_ln34_2_reg_808 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_686_p2 = ((select_ln34_2_reg_808 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_283_p2 = ((indvar_flatten41_reg_142 == 4'd12) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln26_6_fu_662_p1;

assign merge_i_fu_710_p3 = ((empty_5_fu_704_p2[0:0] === 1'b1) ? select_ln7_i_fu_696_p3 : 32'd1069547520);

assign or_ln26_fu_539_p2 = (icmp_ln21_fu_450_p2 | and_ln26_fu_527_p2);

assign or_ln33_fu_767_p2 = (icmp_ln33_fu_755_p2 | icmp_ln33_1_fu_761_p2);

assign or_ln34_fu_359_p2 = (icmp_ln11_fu_301_p2 | and_ln34_fu_347_p2);

assign p_shl1_cast_fu_632_p3 = {{trunc_ln26_1_fu_628_p1}, {2'd0}};

assign p_shl_cast_fu_399_p3 = {{trunc_ln34_fu_395_p1}, {2'd0}};

assign r_fu_295_p2 = (2'd1 + r_0_reg_153);

assign select_ln11_fu_730_p3 = ((icmp_ln11_reg_797[0:0] === 1'b1) ? 4'd1 : add_ln11_1_fu_724_p2);

assign select_ln21_fu_673_p3 = ((icmp_ln21_fu_450_p2[0:0] === 1'b1) ? 4'd1 : add_ln21_fu_667_p2);

assign select_ln26_1_fu_464_p3 = ((icmp_ln21_fu_450_p2[0:0] === 1'b1) ? wr_fu_444_p2 : ap_phi_mux_wr_0_phi_fu_213_p4);

assign select_ln26_2_fu_508_p3 = ((icmp_ln21_fu_450_p2[0:0] === 1'b1) ? select_ln34_3_reg_815 : add_ln26_1_fu_503_p2);

assign select_ln26_3_fu_545_p3 = ((or_ln26_fu_539_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_ch_0_phi_fu_258_p4);

assign select_ln26_4_fu_553_p3 = ((and_ln26_fu_527_p2[0:0] === 1'b1) ? wc_fu_533_p2 : select_ln26_fu_456_p3);

assign select_ln26_5_fu_588_p3 = ((and_ln26_fu_527_p2[0:0] === 1'b1) ? add_ln26_3_fu_583_p2 : select_ln26_2_fu_508_p3);

assign select_ln26_fu_456_p3 = ((icmp_ln21_fu_450_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_235_p4);

assign select_ln34_1_fu_315_p3 = ((icmp_ln11_fu_301_p2[0:0] === 1'b1) ? r_fu_295_p2 : r_0_reg_153);

assign select_ln34_2_fu_365_p3 = ((or_ln34_fu_359_p2[0:0] === 1'b1) ? 2'd0 : f_0_reg_187);

assign select_ln34_3_fu_373_p3 = ((and_ln34_fu_347_p2[0:0] === 1'b1) ? c_fu_353_p2 : select_ln34_fu_307_p3);

assign select_ln34_fu_307_p3 = ((icmp_ln11_fu_301_p2[0:0] === 1'b1) ? 2'd0 : c_0_reg_176);

assign select_ln7_i_fu_696_p3 = ((icmp_ln7_1_fu_691_p2[0:0] === 1'b1) ? 32'd1073741824 : 32'd1065353216);

assign sext_ln26_1_fu_579_p1 = $signed(tmp_3_fu_571_p3);

assign sext_ln26_fu_494_p1 = $signed(sub_ln26_fu_488_p2);

assign sub_ln26_1_fu_640_p2 = (p_shl1_cast_fu_632_p3 - trunc_ln26_fu_624_p1);

assign sub_ln26_fu_488_p2 = (zext_ln26_1_fu_484_p1 - zext_ln26_fu_472_p1);

assign sub_ln34_fu_407_p2 = (p_shl_cast_fu_399_p3 - zext_ln34_2_fu_391_p1);

assign tmp_2_fu_323_p3 = {{select_ln34_1_fu_315_p3}, {1'd0}};

assign tmp_3_fu_571_p3 = {{add_ln26_2_fu_565_p2}, {1'd0}};

assign tmp_6_fu_476_p3 = {{select_ln26_1_fu_464_p3}, {2'd0}};

assign tmp_fu_741_p4 = {{bitcast_ln33_fu_737_p1[30:23]}};

assign tmp_s_fu_596_p4 = {{{add_ln26_fu_498_p2}, {select_ln26_5_fu_588_p3}}, {1'd0}};

assign trunc_ln26_1_fu_628_p1 = add_ln26_4_fu_618_p2[4:0];

assign trunc_ln26_fu_624_p1 = add_ln26_4_fu_618_p2[6:0];

assign trunc_ln33_fu_751_p1 = bitcast_ln33_fu_737_p1[22:0];

assign trunc_ln34_fu_395_p1 = add_ln34_fu_385_p2[2:0];

assign wc_fu_533_p2 = (2'd1 + select_ln26_fu_456_p3);

assign wr_fu_444_p2 = (2'd1 + ap_phi_mux_wr_0_phi_fu_213_p4);

assign xor_ln26_fu_515_p2 = (icmp_ln21_fu_450_p2 ^ 1'd1);

assign xor_ln34_fu_335_p2 = (icmp_ln11_fu_301_p2 ^ 1'd1);

assign zext_ln21_fu_606_p1 = tmp_s_fu_596_p4;

assign zext_ln26_1_fu_484_p1 = tmp_6_fu_476_p3;

assign zext_ln26_2_fu_561_p1 = select_ln26_4_fu_553_p3;

assign zext_ln26_3_fu_610_p1 = select_ln26_3_fu_545_p3;

assign zext_ln26_4_fu_614_p1 = select_ln26_3_fu_545_p3;

assign zext_ln26_5_fu_651_p1 = add_ln26_5_fu_646_p2;

assign zext_ln26_6_fu_662_p1 = add_ln26_6_fu_656_p2;

assign zext_ln26_fu_472_p1 = select_ln26_1_fu_464_p3;

assign zext_ln34_1_fu_381_p1 = select_ln34_3_fu_373_p3;

assign zext_ln34_2_fu_391_p1 = add_ln34_fu_385_p2;

assign zext_ln34_3_fu_413_p1 = select_ln34_2_fu_365_p3;

assign zext_ln34_4_fu_417_p1 = select_ln34_2_fu_365_p3;

assign zext_ln34_5_fu_427_p1 = add_ln34_1_fu_421_p2;

assign zext_ln34_fu_331_p1 = tmp_2_fu_323_p3;

always @ (posedge ap_clk) begin
    zext_ln34_3_reg_823[6:2] <= 5'b00000;
end

endmodule //conv_1
