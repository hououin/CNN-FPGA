// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [12:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] conv_2_weights_address0;
reg    conv_2_weights_ce0;
wire   [31:0] conv_2_weights_q0;
wire   [5:0] conv_2_bias_address0;
reg    conv_2_bias_ce0;
wire   [31:0] conv_2_bias_q0;
wire   [6:0] add_ln7_fu_272_p2;
reg   [6:0] add_ln7_reg_582;
wire    ap_CS_fsm_state2;
wire   [3:0] r_fu_284_p2;
reg   [3:0] r_reg_590;
wire   [3:0] c_fu_296_p2;
reg   [3:0] c_reg_598;
wire    ap_CS_fsm_state3;
wire   [13:0] zext_ln13_fu_320_p1;
reg   [13:0] zext_ln13_reg_603;
wire   [0:0] icmp_ln10_fu_290_p2;
wire   [6:0] f_fu_330_p2;
reg   [6:0] f_reg_611;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln25_fu_336_p1;
reg   [63:0] zext_ln25_reg_616;
wire   [0:0] icmp_ln13_fu_324_p2;
wire   [15:0] zext_ln33_1_fu_340_p1;
reg   [15:0] zext_ln33_1_reg_621;
reg   [12:0] conv_out_addr_reg_626;
wire   [1:0] wr_fu_368_p2;
reg   [1:0] wr_reg_634;
wire    ap_CS_fsm_state5;
wire  signed [5:0] sext_ln25_fu_396_p1;
reg  signed [5:0] sext_ln25_reg_639;
wire   [0:0] icmp_ln17_fu_362_p2;
wire   [7:0] mul_ln25_fu_410_p2;
reg   [7:0] mul_ln25_reg_644;
wire   [1:0] wc_fu_426_p2;
reg   [1:0] wc_reg_657;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_9_fu_445_p3;
reg   [9:0] tmp_9_reg_662;
wire   [0:0] icmp_ln20_fu_420_p2;
wire   [13:0] zext_ln23_fu_476_p1;
reg   [13:0] zext_ln23_reg_667;
wire   [5:0] ch_fu_486_p2;
reg   [5:0] ch_reg_675;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln23_fu_480_p2;
reg   [31:0] conv_2_weights_load_reg_690;
wire    ap_CS_fsm_state8;
reg   [31:0] input_load_reg_695;
wire   [31:0] grp_fu_263_p2;
reg   [31:0] tmp_5_reg_700;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_257_p2;
wire    ap_CS_fsm_state15;
reg   [31:0] conv_2_bias_load_reg_710;
wire    ap_CS_fsm_state16;
reg   [31:0] w_sum_reg_715;
wire    ap_CS_fsm_state20;
reg   [3:0] r_0_reg_141;
reg   [6:0] phi_mul_reg_153;
reg   [3:0] c_0_reg_165;
wire   [0:0] icmp_ln7_fu_278_p2;
reg   [6:0] f_0_reg_177;
wire    ap_CS_fsm_state22;
reg   [1:0] wr_0_reg_188;
reg   [31:0] w_sum_0_reg_199;
reg   [31:0] w_sum_1_reg_211;
reg   [1:0] wc_0_reg_223;
reg   [31:0] w_sum_2_reg_234;
reg   [5:0] ch_0_reg_246;
wire   [63:0] zext_ln33_3_fu_353_p1;
wire   [63:0] zext_ln25_8_fu_518_p1;
wire   [63:0] zext_ln25_9_fu_528_p1;
reg   [31:0] grp_fu_257_p0;
reg   [31:0] grp_fu_257_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state21;
wire   [6:0] zext_ln33_fu_302_p1;
wire   [6:0] add_ln33_fu_306_p2;
wire   [12:0] tmp_7_fu_312_p3;
wire   [13:0] zext_ln33_2_fu_344_p1;
wire   [13:0] add_ln33_1_fu_348_p2;
wire   [3:0] tmp_8_fu_378_p3;
wire   [4:0] zext_ln25_2_fu_386_p1;
wire   [4:0] zext_ln25_1_fu_374_p1;
wire   [4:0] sub_ln25_fu_390_p2;
wire   [3:0] zext_ln17_fu_358_p1;
wire   [3:0] add_ln25_fu_400_p2;
wire   [3:0] mul_ln25_fu_410_p0;
wire   [5:0] zext_ln25_4_fu_432_p1;
wire   [5:0] add_ln25_2_fu_436_p2;
wire   [4:0] trunc_ln25_fu_441_p1;
wire   [3:0] zext_ln20_fu_416_p1;
wire   [3:0] add_ln25_1_fu_453_p2;
wire   [7:0] zext_ln25_6_fu_459_p1;
wire   [7:0] add_ln25_3_fu_463_p2;
wire   [12:0] tmp_10_fu_468_p3;
wire   [9:0] zext_ln25_5_fu_492_p1;
wire   [9:0] add_ln25_4_fu_500_p2;
wire   [15:0] tmp_29_cast_fu_505_p3;
wire   [15:0] add_ln25_5_fu_513_p2;
wire   [13:0] zext_ln25_7_fu_496_p1;
wire   [13:0] add_ln25_6_fu_523_p2;
wire   [31:0] bitcast_ln32_fu_533_p1;
wire   [7:0] tmp_fu_536_p4;
wire   [22:0] trunc_ln32_fu_546_p1;
wire   [0:0] icmp_ln32_1_fu_556_p2;
wire   [0:0] icmp_ln32_fu_550_p2;
wire   [0:0] or_ln32_fu_562_p2;
wire   [0:0] grp_fu_267_p2;
wire   [0:0] and_ln32_fu_568_p2;
reg   [21:0] ap_NS_fsm;
wire   [7:0] mul_ln25_fu_410_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
end

conv_2_conv_2_weifYi #(
    .DataWidth( 32 ),
    .AddressRange( 18432 ),
    .AddressWidth( 15 ))
conv_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_weights_address0),
    .ce0(conv_2_weights_ce0),
    .q0(conv_2_weights_q0)
);

conv_2_conv_2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
conv_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_bias_address0),
    .ce0(conv_2_bias_ce0),
    .q0(conv_2_bias_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_257_p0),
    .din1(grp_fu_257_p1),
    .ce(1'b1),
    .dout(grp_fu_257_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_weights_load_reg_690),
    .din1(input_load_reg_695),
    .ce(1'b1),
    .dout(grp_fu_263_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(w_sum_reg_715),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_267_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_324_p2 == 1'd1))) begin
        c_0_reg_165 <= c_reg_598;
    end else if (((icmp_ln7_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_165 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ch_0_reg_246 <= ch_reg_675;
    end else if (((icmp_ln20_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ch_0_reg_246 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        f_0_reg_177 <= f_reg_611;
    end else if (((icmp_ln10_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_177 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_153 <= add_ln7_reg_582;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_153 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_141 <= r_reg_590;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_141 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_420_p2 == 1'd1))) begin
        w_sum_0_reg_199 <= w_sum_1_reg_211;
    end else if (((icmp_ln13_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        w_sum_0_reg_199 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln23_fu_480_p2 == 1'd1))) begin
        w_sum_1_reg_211 <= w_sum_2_reg_234;
    end else if (((icmp_ln17_fu_362_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        w_sum_1_reg_211 <= w_sum_0_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        w_sum_2_reg_234 <= grp_fu_257_p2;
    end else if (((icmp_ln20_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        w_sum_2_reg_234 <= w_sum_1_reg_211;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln23_fu_480_p2 == 1'd1))) begin
        wc_0_reg_223 <= wc_reg_657;
    end else if (((icmp_ln17_fu_362_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        wc_0_reg_223 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_420_p2 == 1'd1))) begin
        wr_0_reg_188 <= wr_reg_634;
    end else if (((icmp_ln13_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_188 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln7_reg_582 <= add_ln7_fu_272_p2;
        r_reg_590 <= r_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_598 <= c_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ch_reg_675 <= ch_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_2_bias_load_reg_710 <= conv_2_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_2_weights_load_reg_690 <= conv_2_weights_q0;
        input_load_reg_695 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        conv_out_addr_reg_626 <= zext_ln33_3_fu_353_p1;
        zext_ln25_reg_616[6 : 0] <= zext_ln25_fu_336_p1[6 : 0];
        zext_ln33_1_reg_621[6 : 0] <= zext_ln33_1_fu_340_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_611 <= f_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_362_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln25_reg_644 <= mul_ln25_fu_410_p2;
        sext_ln25_reg_639 <= sext_ln25_fu_396_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_5_reg_700 <= grp_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_9_reg_662[9 : 5] <= tmp_9_fu_445_p3[9 : 5];
        zext_ln23_reg_667[12 : 5] <= zext_ln23_fu_476_p1[12 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        w_sum_reg_715 <= grp_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wc_reg_657 <= wc_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_634 <= wr_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln13_reg_603[12 : 6] <= zext_ln13_fu_320_p1[12 : 6];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln7_fu_278_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln7_fu_278_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_2_bias_ce0 = 1'b1;
    end else begin
        conv_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_2_weights_ce0 = 1'b1;
    end else begin
        conv_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_257_p0 = w_sum_0_reg_199;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_257_p0 = w_sum_2_reg_234;
    end else begin
        grp_fu_257_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_257_p1 = conv_2_bias_load_reg_710;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_257_p1 = tmp_5_reg_700;
    end else begin
        grp_fu_257_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln7_fu_278_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln10_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_324_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln17_fu_362_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_420_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln23_fu_480_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_1_fu_453_p2 = (zext_ln20_fu_416_p1 + c_0_reg_165);

assign add_ln25_2_fu_436_p2 = ($signed(sext_ln25_reg_639) + $signed(zext_ln25_4_fu_432_p1));

assign add_ln25_3_fu_463_p2 = (mul_ln25_reg_644 + zext_ln25_6_fu_459_p1);

assign add_ln25_4_fu_500_p2 = (zext_ln25_5_fu_492_p1 + tmp_9_reg_662);

assign add_ln25_5_fu_513_p2 = (zext_ln33_1_reg_621 + tmp_29_cast_fu_505_p3);

assign add_ln25_6_fu_523_p2 = (zext_ln25_7_fu_496_p1 + zext_ln23_reg_667);

assign add_ln25_fu_400_p2 = (zext_ln17_fu_358_p1 + r_0_reg_141);

assign add_ln33_1_fu_348_p2 = (zext_ln13_reg_603 + zext_ln33_2_fu_344_p1);

assign add_ln33_fu_306_p2 = (phi_mul_reg_153 + zext_ln33_fu_302_p1);

assign add_ln7_fu_272_p2 = (phi_mul_reg_153 + 7'd11);

assign and_ln32_fu_568_p2 = (or_ln32_fu_562_p2 & grp_fu_267_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln32_fu_533_p1 = w_sum_reg_715;

assign c_fu_296_p2 = (c_0_reg_165 + 4'd1);

assign ch_fu_486_p2 = (ch_0_reg_246 + 6'd1);

assign conv_2_bias_address0 = zext_ln25_reg_616;

assign conv_2_weights_address0 = zext_ln25_8_fu_518_p1;

assign conv_out_address0 = conv_out_addr_reg_626;

assign conv_out_d0 = ((and_ln32_fu_568_p2[0:0] === 1'b1) ? w_sum_reg_715 : 32'd0);

assign f_fu_330_p2 = (f_0_reg_177 + 7'd1);

assign icmp_ln10_fu_290_p2 = ((c_0_reg_165 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_324_p2 = ((f_0_reg_177 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_362_p2 = ((wr_0_reg_188 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_420_p2 = ((wc_0_reg_223 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_480_p2 = ((ch_0_reg_246 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_556_p2 = ((trunc_ln32_fu_546_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_550_p2 = ((tmp_fu_536_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_278_p2 = ((r_0_reg_141 == 4'd11) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln25_9_fu_528_p1;

assign mul_ln25_fu_410_p0 = mul_ln25_fu_410_p00;

assign mul_ln25_fu_410_p00 = add_ln25_fu_400_p2;

assign mul_ln25_fu_410_p2 = (mul_ln25_fu_410_p0 * $signed('hD));

assign or_ln32_fu_562_p2 = (icmp_ln32_fu_550_p2 | icmp_ln32_1_fu_556_p2);

assign r_fu_284_p2 = (r_0_reg_141 + 4'd1);

assign sext_ln25_fu_396_p1 = $signed(sub_ln25_fu_390_p2);

assign sub_ln25_fu_390_p2 = (zext_ln25_2_fu_386_p1 - zext_ln25_1_fu_374_p1);

assign tmp_10_fu_468_p3 = {{add_ln25_3_fu_463_p2}, {5'd0}};

assign tmp_29_cast_fu_505_p3 = {{add_ln25_4_fu_500_p2}, {6'd0}};

assign tmp_7_fu_312_p3 = {{add_ln33_fu_306_p2}, {6'd0}};

assign tmp_8_fu_378_p3 = {{wr_0_reg_188}, {2'd0}};

assign tmp_9_fu_445_p3 = {{trunc_ln25_fu_441_p1}, {5'd0}};

assign tmp_fu_536_p4 = {{bitcast_ln32_fu_533_p1[30:23]}};

assign trunc_ln25_fu_441_p1 = add_ln25_2_fu_436_p2[4:0];

assign trunc_ln32_fu_546_p1 = bitcast_ln32_fu_533_p1[22:0];

assign wc_fu_426_p2 = (wc_0_reg_223 + 2'd1);

assign wr_fu_368_p2 = (wr_0_reg_188 + 2'd1);

assign zext_ln13_fu_320_p1 = tmp_7_fu_312_p3;

assign zext_ln17_fu_358_p1 = wr_0_reg_188;

assign zext_ln20_fu_416_p1 = wc_0_reg_223;

assign zext_ln23_fu_476_p1 = tmp_10_fu_468_p3;

assign zext_ln25_1_fu_374_p1 = wr_0_reg_188;

assign zext_ln25_2_fu_386_p1 = tmp_8_fu_378_p3;

assign zext_ln25_4_fu_432_p1 = wc_0_reg_223;

assign zext_ln25_5_fu_492_p1 = ch_0_reg_246;

assign zext_ln25_6_fu_459_p1 = add_ln25_1_fu_453_p2;

assign zext_ln25_7_fu_496_p1 = ch_0_reg_246;

assign zext_ln25_8_fu_518_p1 = add_ln25_5_fu_513_p2;

assign zext_ln25_9_fu_528_p1 = add_ln25_6_fu_523_p2;

assign zext_ln25_fu_336_p1 = f_0_reg_177;

assign zext_ln33_1_fu_340_p1 = f_0_reg_177;

assign zext_ln33_2_fu_344_p1 = f_0_reg_177;

assign zext_ln33_3_fu_353_p1 = add_ln33_1_fu_348_p2;

assign zext_ln33_fu_302_p1 = c_0_reg_165;

always @ (posedge ap_clk) begin
    zext_ln13_reg_603[5:0] <= 6'b000000;
    zext_ln13_reg_603[13] <= 1'b0;
    zext_ln25_reg_616[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln33_1_reg_621[15:7] <= 9'b000000000;
    tmp_9_reg_662[4:0] <= 5'b00000;
    zext_ln23_reg_667[4:0] <= 5'b00000;
    zext_ln23_reg_667[13] <= 1'b0;
end

endmodule //conv_2
