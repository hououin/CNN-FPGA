// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;
output  [10:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg prediction_ce0;
reg prediction_we0;
reg flat_array_ce0;

(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] dense_weights_address0;
reg    dense_weights_ce0;
wire   [31:0] dense_weights_q0;
wire   [31:0] dense_array_q0;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_231_p2;
reg   [31:0] reg_242;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state34;
wire   [3:0] add_ln27_fu_248_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] d_fu_271_p2;
reg   [3:0] d_reg_387;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln35_fu_277_p1;
reg   [63:0] zext_ln35_reg_392;
wire   [0:0] icmp_ln29_fu_265_p2;
wire   [14:0] zext_ln33_fu_281_p1;
reg   [14:0] zext_ln33_reg_397;
wire   [10:0] f_fu_291_p2;
reg   [10:0] f_reg_405;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln33_fu_285_p2;
reg   [31:0] dense_weights_load_reg_420;
wire    ap_CS_fsm_state5;
reg   [31:0] flat_array_load_reg_425;
wire   [31:0] grp_fu_221_p2;
reg   [31:0] tmp_reg_430;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_215_p2;
wire    ap_CS_fsm_state12;
wire   [3:0] i_fu_348_p2;
reg   [3:0] i_reg_443;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln10_fu_342_p2;
wire    ap_CS_fsm_state25;
wire   [3:0] j_fu_365_p2;
reg   [3:0] j_reg_461;
wire    ap_CS_fsm_state26;
wire   [63:0] zext_ln18_fu_371_p1;
reg   [63:0] zext_ln18_reg_466;
wire   [0:0] icmp_ln16_fu_359_p2;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
reg   [31:0] dense_array_d0;
reg   [3:0] phi_ln27_reg_135;
wire   [0:0] icmp_ln27_fu_259_p2;
reg   [3:0] d_0_reg_146;
reg   [31:0] w_sum_0_reg_157;
reg   [10:0] f_0_reg_170;
reg   [31:0] sum_0_i_reg_181;
reg   [3:0] i_0_i_reg_193;
reg   [3:0] j_0_i_reg_204;
wire    ap_CS_fsm_state44;
wire   [63:0] zext_ln27_fu_254_p1;
wire   [63:0] zext_ln35_4_fu_337_p1;
wire   [63:0] zext_ln35_1_fu_297_p1;
wire   [63:0] zext_ln12_fu_354_p1;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] grp_fu_215_p0;
reg   [31:0] grp_fu_215_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state35;
wire   [13:0] tmp_1_fu_302_p3;
wire   [11:0] tmp_2_fu_314_p3;
wire   [14:0] zext_ln35_3_fu_322_p1;
wire   [14:0] zext_ln35_2_fu_310_p1;
wire   [14:0] add_ln35_fu_326_p2;
wire   [14:0] add_ln35_1_fu_332_p2;
reg   [43:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
end

dense_dense_weights #(
    .DataWidth( 32 ),
    .AddressRange( 16000 ),
    .AddressWidth( 14 ))
dense_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_weights_address0),
    .ce0(dense_weights_ce0),
    .q0(dense_weights_q0)
);

dense_dense_array #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(dense_array_d0),
    .q0(dense_array_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_215_p0),
    .din1(grp_fu_215_p1),
    .ce(1'b1),
    .dout(grp_fu_215_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_weights_load_reg_420),
    .din1(flat_array_load_reg_425),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

cnn_fdiv_32ns_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fdiv_32ns_32ng8j_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_242),
    .din1(sum_0_i_reg_181),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

cnn_fexp_32ns_32nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fexp_32ns_32nhbi_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_q0),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        d_0_reg_146 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln33_fu_285_p2 == 1'd1))) begin
        d_0_reg_146 <= d_reg_387;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        f_0_reg_170 <= f_reg_405;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln29_fu_265_p2 == 1'd0))) begin
        f_0_reg_170 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln29_fu_265_p2 == 1'd1))) begin
        i_0_i_reg_193 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i_0_i_reg_193 <= i_reg_443;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln10_fu_342_p2 == 1'd1))) begin
        j_0_i_reg_204 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        j_0_i_reg_204 <= j_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln27_fu_259_p2 == 1'd0))) begin
        phi_ln27_reg_135 <= add_ln27_fu_248_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln27_reg_135 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln29_fu_265_p2 == 1'd1))) begin
        sum_0_i_reg_181 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        sum_0_i_reg_181 <= grp_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        w_sum_0_reg_157 <= grp_fu_215_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln29_fu_265_p2 == 1'd0))) begin
        w_sum_0_reg_157 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_reg_387 <= d_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_weights_load_reg_420 <= dense_weights_q0;
        flat_array_load_reg_425 <= flat_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_405 <= f_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_reg_443 <= i_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        j_reg_461 <= j_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_242 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_reg_430 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln16_fu_359_p2 == 1'd0))) begin
        zext_ln18_reg_466[3 : 0] <= zext_ln18_fu_371_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln29_fu_265_p2 == 1'd0))) begin
        zext_ln33_reg_397[3 : 0] <= zext_ln33_fu_281_p1[3 : 0];
        zext_ln35_reg_392[3 : 0] <= zext_ln35_fu_277_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state26) & (icmp_ln16_fu_359_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln16_fu_359_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        dense_array_address0 = zext_ln18_fu_371_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dense_array_address0 = zext_ln12_fu_354_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dense_array_address0 = zext_ln35_reg_392;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_address0 = zext_ln27_fu_254_p1;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dense_array_d0 = w_sum_0_reg_157;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_d0 = 32'd0;
    end else begin
        dense_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln33_fu_285_p2 == 1'd1)))) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dense_weights_ce0 = 1'b1;
    end else begin
        dense_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_215_p0 = sum_0_i_reg_181;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_215_p0 = w_sum_0_reg_157;
    end else begin
        grp_fu_215_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_215_p1 = reg_242;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_215_p1 = tmp_reg_430;
    end else begin
        grp_fu_215_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln27_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln29_fu_265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln33_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln10_fu_342_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln16_fu_359_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_fu_248_p2 = (phi_ln27_reg_135 + 4'd1);

assign add_ln35_1_fu_332_p2 = (add_ln35_fu_326_p2 + zext_ln33_reg_397);

assign add_ln35_fu_326_p2 = (zext_ln35_3_fu_322_p1 + zext_ln35_2_fu_310_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign d_fu_271_p2 = (d_0_reg_146 + 4'd1);

assign dense_weights_address0 = zext_ln35_4_fu_337_p1;

assign f_fu_291_p2 = (f_0_reg_170 + 11'd1);

assign flat_array_address0 = zext_ln35_1_fu_297_p1;

assign i_fu_348_p2 = (i_0_i_reg_193 + 4'd1);

assign icmp_ln10_fu_342_p2 = ((i_0_i_reg_193 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_359_p2 = ((j_0_i_reg_204 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_259_p2 = ((phi_ln27_reg_135 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_265_p2 = ((d_0_reg_146 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_285_p2 = ((f_0_reg_170 == 11'd1600) ? 1'b1 : 1'b0);

assign j_fu_365_p2 = (j_0_i_reg_204 + 4'd1);

assign prediction_address0 = zext_ln18_reg_466;

assign prediction_d0 = grp_fu_225_p2;

assign tmp_1_fu_302_p3 = {{f_0_reg_170}, {3'd0}};

assign tmp_2_fu_314_p3 = {{f_0_reg_170}, {1'd0}};

assign zext_ln12_fu_354_p1 = i_0_i_reg_193;

assign zext_ln18_fu_371_p1 = j_0_i_reg_204;

assign zext_ln27_fu_254_p1 = phi_ln27_reg_135;

assign zext_ln33_fu_281_p1 = d_0_reg_146;

assign zext_ln35_1_fu_297_p1 = f_0_reg_170;

assign zext_ln35_2_fu_310_p1 = tmp_1_fu_302_p3;

assign zext_ln35_3_fu_322_p1 = tmp_2_fu_314_p3;

assign zext_ln35_4_fu_337_p1 = add_ln35_1_fu_332_p2;

assign zext_ln35_fu_277_p1 = d_0_reg_146;

always @ (posedge ap_clk) begin
    zext_ln35_reg_392[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln33_reg_397[14:4] <= 11'b00000000000;
    zext_ln18_reg_466[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense
