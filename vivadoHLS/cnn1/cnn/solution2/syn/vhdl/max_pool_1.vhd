-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_5480 : STD_LOGIC_VECTOR (14 downto 0) := "101010010000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_2A4 : STD_LOGIC_VECTOR (9 downto 0) := "1010100100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv7_34 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten117_reg_125 : STD_LOGIC_VECTOR (14 downto 0);
    signal f_0_reg_136 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten63_reg_147 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_0_reg_158 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten24_reg_169 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_192 : STD_LOGIC_VECTOR (3 downto 0);
    signal mpr_0_reg_203 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_4_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_reg_226 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln9_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln9_reg_897_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_897_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_fu_266_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln32_5_fu_292_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln32_5_reg_906 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln12_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_913 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_7_fu_416_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_7_reg_918 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln12_6_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_6_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_468_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_929 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_6_fu_494_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_6_reg_934 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln19_fu_552_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_reg_940 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_reg_940_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_6_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_6_reg_946 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_6_reg_946_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_7_fu_582_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln19_7_reg_951 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln19_9_fu_604_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln37_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_961_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_961_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mpc_fu_624_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_10_fu_636_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_8_fu_650_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln12_10_fu_664_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pool_out_addr_reg_985 : STD_LOGIC_VECTOR (12 downto 0);
    signal max_pool_out_addr_reg_985_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln24_fu_781_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln24_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_fu_872_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_140_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_162_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_184_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_max_4_phi_fu_218_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln39_5_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_9_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_242_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln19_fu_250_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln12_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_272_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln19_fu_314_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_254_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln37_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_284_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln32_11_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_380_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln29_mid1_fu_400_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_6_fu_300_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln12_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_7_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_2_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_7_fu_324_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln32_8_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_9_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_10_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_fu_392_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln15_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_2_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln15_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_6_fu_408_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln12_9_fu_442_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln12_4_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_5_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln15_fu_486_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln15_4_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_2_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_534_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln19_2_fu_560_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln19_2_fu_572_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln29_2_fu_576_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln15_7_fu_514_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln37_3_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_3_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_8_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_2_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln19_fu_630_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln15_2_fu_644_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln12_2_fu_658_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln2_fu_681_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln30_mid1_fu_696_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln12_8_fu_689_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_879_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_713_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln32_5_fu_675_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln39_4_fu_720_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln39_3_fu_724_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln15_5_fu_703_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln22_fu_738_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_741_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_888_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_751_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln32_fu_672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln32_8_fu_758_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_2_fu_762_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln22_fu_773_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln32_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_2_fu_807_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_793_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_803_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_4_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_810_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_2_fu_820_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_6_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_5_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_2_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_2_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_879_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_879_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_879_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_888_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_888_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_888_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_879_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_879_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_888_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_888_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_5ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_mac_muladd_6nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32neOg_U13 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_out_q0,
        din1 => grp_fu_237_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_237_p2);

    cnn_mac_muladd_5ng8j_U14 : component cnn_mac_muladd_5ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_879_p0,
        din1 => grp_fu_879_p1,
        din2 => grp_fu_879_p2,
        dout => grp_fu_879_p3);

    cnn_mac_muladd_6nhbi_U15 : component cnn_mac_muladd_6nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_888_p0,
        din1 => grp_fu_888_p1,
        din2 => grp_fu_888_p2,
        dout => grp_fu_888_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_897 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_180 <= select_ln15_6_reg_934;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_180 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_897 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_136 <= select_ln32_5_reg_906;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_136 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten117_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten117_reg_125 <= add_ln9_fu_266_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten117_reg_125 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten24_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten24_reg_169 <= select_ln15_8_fu_650_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten24_reg_169 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten63_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten63_reg_147 <= select_ln12_10_fu_664_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten63_reg_147 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_192 <= select_ln19_10_fu_636_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_192 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    max_4_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_897_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                max_4_reg_214 <= max_2_fu_872_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_4_reg_214 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    mpc_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mpc_0_reg_226 <= mpc_fu_624_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpc_0_reg_226 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mpr_0_reg_203 <= select_ln19_9_fu_604_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpr_0_reg_203 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_897 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_158 <= select_ln12_7_reg_918;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_158 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln12_6_reg_924 <= and_ln12_6_fu_462_p2;
                and_ln37_reg_961 <= and_ln37_fu_618_p2;
                c_reg_929 <= c_fu_468_p2;
                or_ln12_reg_913 <= or_ln12_fu_386_p2;
                select_ln19_6_reg_946 <= select_ln19_6_fu_564_p3;
                select_ln19_7_reg_951 <= select_ln19_7_fu_582_p3;
                select_ln19_reg_940 <= select_ln19_fu_552_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln37_reg_961_pp0_iter1_reg <= and_ln37_reg_961;
                icmp_ln9_reg_897 <= icmp_ln9_fu_260_p2;
                icmp_ln9_reg_897_pp0_iter1_reg <= icmp_ln9_reg_897;
                select_ln19_6_reg_946_pp0_iter1_reg <= select_ln19_6_reg_946;
                select_ln19_reg_940_pp0_iter1_reg <= select_ln19_reg_940;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln37_reg_961_pp0_iter2_reg <= and_ln37_reg_961_pp0_iter1_reg;
                icmp_ln9_reg_897_pp0_iter2_reg <= icmp_ln9_reg_897_pp0_iter1_reg;
                max_pool_out_addr_reg_985_pp0_iter2_reg <= max_pool_out_addr_reg_985;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_897 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                max_pool_out_addr_reg_985 <= zext_ln39_5_fu_730_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_897_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                max_reg_1002 <= conv_out_q0;
                select_ln24_reg_995 <= select_ln24_fu_781_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln12_7_reg_918 <= select_ln12_7_fu_416_p3;
                select_ln15_6_reg_934 <= select_ln15_6_fu_494_p3;
                select_ln32_5_reg_906 <= select_ln32_5_fu_292_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln9_fu_260_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln9_fu_260_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln9_fu_260_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln12_2_fu_658_p2 <= std_logic_vector(unsigned(indvar_flatten63_reg_147) + unsigned(ap_const_lv10_1));
    add_ln15_2_fu_644_p2 <= std_logic_vector(unsigned(indvar_flatten24_reg_169) + unsigned(ap_const_lv7_1));
    add_ln19_fu_630_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_192) + unsigned(ap_const_lv4_1));
    add_ln29_2_fu_576_p2 <= std_logic_vector(unsigned(select_ln12_6_fu_408_p3) + unsigned(zext_ln19_2_fu_572_p1));
    add_ln32_2_fu_762_p2 <= std_logic_vector(unsigned(zext_ln32_fu_672_p1) + unsigned(zext_ln32_8_fu_758_p1));
    add_ln39_3_fu_724_p2 <= std_logic_vector(unsigned(zext_ln32_5_fu_675_p1) + unsigned(zext_ln39_4_fu_720_p1));
    add_ln9_fu_266_p2 <= std_logic_vector(unsigned(indvar_flatten117_reg_125) + unsigned(ap_const_lv15_1));
    and_ln12_4_fu_450_p2 <= (or_ln12_2_fu_430_p2 and and_ln32_8_fu_338_p2);
    and_ln12_5_fu_456_p2 <= (or_ln12_2_fu_430_p2 and and_ln32_9_fu_350_p2);
    and_ln12_6_fu_462_p2 <= (or_ln12_2_fu_430_p2 and and_ln32_10_fu_362_p2);
    and_ln12_fu_436_p2 <= (or_ln12_2_fu_430_p2 and and_ln32_7_fu_318_p2);
    and_ln15_3_fu_522_p2 <= (xor_ln15_fu_502_p2 and and_ln12_4_fu_450_p2);
    and_ln15_4_fu_528_p2 <= (xor_ln15_fu_502_p2 and and_ln12_5_fu_456_p2);
    and_ln15_fu_508_p2 <= (xor_ln15_fu_502_p2 and and_ln12_fu_436_p2);
    and_ln32_10_fu_362_p2 <= (xor_ln32_fu_308_p2 and icmp_ln19_fu_356_p2);
    and_ln32_11_fu_374_p2 <= (xor_ln32_fu_308_p2 and icmp_ln15_fu_368_p2);
    and_ln32_2_fu_866_p2 <= (grp_fu_237_p2 and and_ln32_fu_860_p2);
    and_ln32_7_fu_318_p2 <= (xor_ln32_fu_308_p2 and trunc_ln19_fu_314_p1);
    and_ln32_8_fu_338_p2 <= (xor_ln32_fu_308_p2 and icmp_ln37_fu_332_p2);
    and_ln32_9_fu_350_p2 <= (xor_ln32_fu_308_p2 and icmp_ln22_fu_344_p2);
    and_ln32_fu_860_p2 <= (or_ln32_fu_836_p2 and or_ln32_2_fu_854_p2);
    and_ln37_fu_618_p2 <= (select_ln19_8_fu_596_p3 and icmp_ln37_2_fu_612_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln9_fu_260_p2)
    begin
        if ((icmp_ln9_fu_260_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_184_p4_assign_proc : process(c_0_reg_180, icmp_ln9_reg_897, ap_CS_fsm_pp0_stage0, select_ln15_6_reg_934, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_897 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_184_p4 <= select_ln15_6_reg_934;
        else 
            ap_phi_mux_c_0_phi_fu_184_p4 <= c_0_reg_180;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_140_p4_assign_proc : process(f_0_reg_136, icmp_ln9_reg_897, ap_CS_fsm_pp0_stage0, select_ln32_5_reg_906, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_897 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_140_p4 <= select_ln32_5_reg_906;
        else 
            ap_phi_mux_f_0_phi_fu_140_p4 <= f_0_reg_136;
        end if; 
    end process;


    ap_phi_mux_max_4_phi_fu_218_p4_assign_proc : process(max_4_reg_214, icmp_ln9_reg_897_pp0_iter2_reg, max_2_fu_872_p3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_897_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_max_4_phi_fu_218_p4 <= max_2_fu_872_p3;
        else 
            ap_phi_mux_max_4_phi_fu_218_p4 <= max_4_reg_214;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_162_p4_assign_proc : process(r_0_reg_158, icmp_ln9_reg_897, ap_CS_fsm_pp0_stage0, select_ln12_7_reg_918, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_897 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_162_p4 <= select_ln12_7_reg_918;
        else 
            ap_phi_mux_r_0_phi_fu_162_p4 <= r_0_reg_158;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_2_fu_807_p1 <= select_ln24_reg_995;
    bitcast_ln32_fu_790_p1 <= max_reg_1002;
    c_fu_468_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln12_fu_392_p3));
    conv_out_address0 <= zext_ln32_9_fu_768_p1(15 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_272_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_f_0_phi_fu_140_p4));
    grp_fu_237_p1 <= 
        ap_phi_mux_max_4_phi_fu_218_p4 when (or_ln24_fu_776_p2(0) = '1') else 
        ap_const_lv32_800000;
    grp_fu_879_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_879_p1 <= grp_fu_879_p10(4 - 1 downto 0);
    grp_fu_879_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_7_reg_918),8));
    grp_fu_879_p2 <= grp_fu_879_p20(4 - 1 downto 0);
    grp_fu_879_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_6_reg_934),8));
    grp_fu_888_p0 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_888_p1 <= grp_fu_888_p10(5 - 1 downto 0);
    grp_fu_888_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_7_reg_951),10));
    grp_fu_888_p2 <= grp_fu_888_p20(5 - 1 downto 0);
    grp_fu_888_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_741_p2),10));
    i_fu_254_p2 <= std_logic_vector(unsigned(shl_ln_fu_242_p3) + unsigned(zext_ln19_fu_250_p1));
    icmp_ln12_fu_278_p2 <= "1" when (indvar_flatten63_reg_147 = ap_const_lv10_2A4) else "0";
    icmp_ln15_fu_368_p2 <= "1" when (indvar_flatten24_reg_169 = ap_const_lv7_34) else "0";
    icmp_ln19_fu_356_p2 <= "1" when (indvar_flatten_reg_192 = ap_const_lv4_4) else "0";
    icmp_ln22_fu_344_p2 <= "1" when (mpc_0_reg_226 = ap_const_lv2_2) else "0";
    icmp_ln32_4_fu_830_p2 <= "1" when (trunc_ln32_fu_803_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_5_fu_842_p2 <= "0" when (tmp_9_fu_810_p4 = ap_const_lv8_FF) else "1";
    icmp_ln32_6_fu_848_p2 <= "1" when (trunc_ln32_2_fu_820_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_824_p2 <= "0" when (tmp_fu_793_p4 = ap_const_lv8_FF) else "1";
    icmp_ln37_2_fu_612_p2 <= "1" when (select_ln19_fu_552_p3 = ap_const_lv2_1) else "0";
    icmp_ln37_3_fu_590_p2 <= "1" when (select_ln15_fu_486_p3 = ap_const_lv2_0) else "0";
    icmp_ln37_fu_332_p2 <= "1" when (mpr_0_reg_203 = ap_const_lv2_1) else "0";
    icmp_ln9_fu_260_p2 <= "1" when (indvar_flatten117_reg_125 = ap_const_lv15_5480) else "0";
    j_fu_741_p2 <= std_logic_vector(unsigned(select_ln15_5_fu_703_p3) + unsigned(zext_ln22_fu_738_p1));
    max_2_fu_872_p3 <= 
        max_reg_1002 when (and_ln32_2_fu_866_p2(0) = '1') else 
        select_ln24_reg_995;
    max_pool_out_address0 <= max_pool_out_addr_reg_985_pp0_iter2_reg;

    max_pool_out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= 
        max_reg_1002 when (and_ln32_2_fu_866_p2(0) = '1') else 
        select_ln24_reg_995;

    max_pool_out_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln37_reg_961_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln37_reg_961_pp0_iter2_reg))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_624_p2 <= std_logic_vector(unsigned(select_ln19_fu_552_p3) + unsigned(ap_const_lv2_1));
    mpr_fu_534_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln15_fu_486_p3));
    or_ln12_2_fu_430_p2 <= (xor_ln12_fu_424_p2 or icmp_ln12_fu_278_p2);
    or_ln12_fu_386_p2 <= (icmp_ln12_fu_278_p2 or and_ln32_11_fu_374_p2);
    or_ln15_2_fu_480_p2 <= (or_ln15_fu_474_p2 or icmp_ln12_fu_278_p2);
    or_ln15_fu_474_p2 <= (and_ln32_11_fu_374_p2 or and_ln12_6_fu_462_p2);
    or_ln19_2_fu_546_p2 <= (or_ln19_fu_540_p2 or or_ln12_fu_386_p2);
    or_ln19_fu_540_p2 <= (and_ln15_4_fu_528_p2 or and_ln12_6_fu_462_p2);
    or_ln24_fu_776_p2 <= (trunc_ln22_fu_773_p1 or select_ln19_6_reg_946_pp0_iter1_reg);
    or_ln32_2_fu_854_p2 <= (icmp_ln32_6_fu_848_p2 or icmp_ln32_5_fu_842_p2);
    or_ln32_fu_836_p2 <= (icmp_ln32_fu_824_p2 or icmp_ln32_4_fu_830_p2);
    r_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln32_fu_284_p3));
    select_ln12_10_fu_664_p3 <= 
        ap_const_lv10_1 when (icmp_ln12_fu_278_p2(0) = '1') else 
        add_ln12_2_fu_658_p2;
    select_ln12_6_fu_408_p3 <= 
        shl_ln29_mid1_fu_400_p3 when (and_ln32_11_fu_374_p2(0) = '1') else 
        select_ln32_6_fu_300_p3;
    select_ln12_7_fu_416_p3 <= 
        r_fu_380_p2 when (and_ln32_11_fu_374_p2(0) = '1') else 
        select_ln32_fu_284_p3;
    select_ln12_8_fu_689_p3 <= 
        ap_const_lv5_0 when (or_ln12_reg_913(0) = '1') else 
        shl_ln2_fu_681_p3;
    select_ln12_9_fu_442_p3 <= 
        shl_ln29_mid1_fu_400_p3 when (and_ln32_11_fu_374_p2(0) = '1') else 
        select_ln32_7_fu_324_p3;
    select_ln12_fu_392_p3 <= 
        ap_const_lv4_0 when (or_ln12_fu_386_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_184_p4;
    select_ln15_5_fu_703_p3 <= 
        shl_ln30_mid1_fu_696_p3 when (and_ln12_6_reg_924(0) = '1') else 
        select_ln12_8_fu_689_p3;
    select_ln15_6_fu_494_p3 <= 
        c_fu_468_p2 when (and_ln12_6_fu_462_p2(0) = '1') else 
        select_ln12_fu_392_p3;
    select_ln15_7_fu_514_p3 <= 
        select_ln12_6_fu_408_p3 when (and_ln12_6_fu_462_p2(0) = '1') else 
        select_ln12_9_fu_442_p3;
    select_ln15_8_fu_650_p3 <= 
        ap_const_lv7_1 when (or_ln12_fu_386_p2(0) = '1') else 
        add_ln15_2_fu_644_p2;
    select_ln15_fu_486_p3 <= 
        ap_const_lv2_0 when (or_ln15_2_fu_480_p2(0) = '1') else 
        mpr_0_reg_203;
    select_ln19_10_fu_636_p3 <= 
        ap_const_lv4_1 when (or_ln15_2_fu_480_p2(0) = '1') else 
        add_ln19_fu_630_p2;
    select_ln19_6_fu_564_p3 <= 
        trunc_ln19_2_fu_560_p1 when (and_ln15_4_fu_528_p2(0) = '1') else 
        and_ln15_fu_508_p2;
    select_ln19_7_fu_582_p3 <= 
        add_ln29_2_fu_576_p2 when (and_ln15_4_fu_528_p2(0) = '1') else 
        select_ln15_7_fu_514_p3;
    select_ln19_8_fu_596_p3 <= 
        icmp_ln37_3_fu_590_p2 when (and_ln15_4_fu_528_p2(0) = '1') else 
        and_ln15_3_fu_522_p2;
    select_ln19_9_fu_604_p3 <= 
        mpr_fu_534_p2 when (and_ln15_4_fu_528_p2(0) = '1') else 
        select_ln15_fu_486_p3;
    select_ln19_fu_552_p3 <= 
        ap_const_lv2_0 when (or_ln19_2_fu_546_p2(0) = '1') else 
        mpc_0_reg_226;
    select_ln24_fu_781_p3 <= 
        ap_phi_mux_max_4_phi_fu_218_p4 when (or_ln24_fu_776_p2(0) = '1') else 
        ap_const_lv32_800000;
    select_ln32_5_fu_292_p3 <= 
        f_fu_272_p2 when (icmp_ln12_fu_278_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_140_p4;
    select_ln32_6_fu_300_p3 <= 
        ap_const_lv5_0 when (icmp_ln12_fu_278_p2(0) = '1') else 
        shl_ln_fu_242_p3;
    select_ln32_7_fu_324_p3 <= 
        ap_const_lv5_0 when (icmp_ln12_fu_278_p2(0) = '1') else 
        i_fu_254_p2;
    select_ln32_fu_284_p3 <= 
        ap_const_lv4_0 when (icmp_ln12_fu_278_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_162_p4;
    shl_ln29_mid1_fu_400_p3 <= (r_fu_380_p2 & ap_const_lv1_0);
    shl_ln2_fu_681_p3 <= (c_0_reg_180 & ap_const_lv1_0);
    shl_ln30_mid1_fu_696_p3 <= (c_reg_929 & ap_const_lv1_0);
    shl_ln_fu_242_p3 <= (ap_phi_mux_r_0_phi_fu_162_p4 & ap_const_lv1_0);
    tmp_2_fu_713_p3 <= (grp_fu_879_p3 & ap_const_lv5_0);
    tmp_3_fu_751_p3 <= (grp_fu_888_p3 & ap_const_lv5_0);
    tmp_9_fu_810_p4 <= bitcast_ln32_2_fu_807_p1(30 downto 23);
    tmp_fu_793_p4 <= bitcast_ln32_fu_790_p1(30 downto 23);
    trunc_ln19_2_fu_560_p1 <= mpr_fu_534_p2(1 - 1 downto 0);
    trunc_ln19_fu_314_p1 <= mpr_0_reg_203(1 - 1 downto 0);
    trunc_ln22_fu_773_p1 <= select_ln19_reg_940_pp0_iter1_reg(1 - 1 downto 0);
    trunc_ln32_2_fu_820_p1 <= bitcast_ln32_2_fu_807_p1(23 - 1 downto 0);
    trunc_ln32_fu_803_p1 <= bitcast_ln32_fu_790_p1(23 - 1 downto 0);
    xor_ln12_fu_424_p2 <= (icmp_ln15_fu_368_p2 xor ap_const_lv1_1);
    xor_ln15_fu_502_p2 <= (ap_const_lv1_1 xor and_ln12_6_fu_462_p2);
    xor_ln32_fu_308_p2 <= (icmp_ln12_fu_278_p2 xor ap_const_lv1_1);
    zext_ln19_2_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpr_fu_534_p2),5));
    zext_ln19_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpr_0_reg_203),5));
    zext_ln22_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_reg_940),5));
    zext_ln32_5_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_5_reg_906),14));
    zext_ln32_8_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_751_p3),16));
    zext_ln32_9_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_2_fu_762_p2),64));
    zext_ln32_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_5_reg_906),16));
    zext_ln39_4_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_713_p3),14));
    zext_ln39_5_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_3_fu_724_p2),64));
end behav;
