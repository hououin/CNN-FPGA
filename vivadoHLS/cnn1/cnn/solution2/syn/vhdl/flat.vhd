-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    flat_array_ce0 : OUT STD_LOGIC;
    flat_array_we0 : OUT STD_LOGIC;
    flat_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of flat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_640 : STD_LOGIC_VECTOR (10 downto 0) := "11001000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv11_140 : STD_LOGIC_VECTOR (10 downto 0) := "00101000000";
    constant ap_const_lv10_140 : STD_LOGIC_VECTOR (9 downto 0) := "0101000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv11_40 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten17_reg_95 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_0_reg_106 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_117 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_reg_128 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_139 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_150 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_161 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_0_reg_172 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln6_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln6_reg_402_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln6_fu_189_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln15_11_fu_237_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_11_reg_411 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln6_fu_263_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln15_12_fu_283_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln15_12_reg_423 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln15_12_reg_423_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln15_13_fu_297_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln15_13_reg_428 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln15_14_fu_305_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_14_reg_433 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln9_fu_313_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln15_1_fu_321_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_fu_327_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln9_1_fu_339_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_r_0_phi_fu_110_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_c_0_phi_fu_154_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln14_4_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_201_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_fu_195_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln12_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln15_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln15_9_fu_221_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_fu_213_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln15_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_3_fu_277_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln15_10_fu_229_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln15_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_271_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln9_fu_333_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_350_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_fu_347_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_1_fu_357_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_fu_361_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln15_fu_367_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_1_fu_370_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_cast_fu_376_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_2_fu_384_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln14_2_fu_387_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_402 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_150 <= select_ln15_14_reg_433;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_150 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                f_0_reg_172 <= f_fu_327_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_172 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_117 <= select_ln6_fu_263_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_117 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_1_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_reg_139 <= select_ln9_fu_313_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_1_reg_139 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_2_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_2_reg_161 <= add_ln15_1_fu_321_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_2_reg_161 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten17_reg_95 <= add_ln6_fu_189_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten17_reg_95 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_128 <= select_ln9_1_fu_339_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_128 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    r_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_402 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_106 <= select_ln15_11_reg_411;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_106 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln6_reg_402 <= icmp_ln6_fu_183_p2;
                icmp_ln6_reg_402_pp0_iter1_reg <= icmp_ln6_reg_402;
                select_ln15_12_reg_423_pp0_iter1_reg <= select_ln15_12_reg_423;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln15_11_reg_411 <= select_ln15_11_fu_237_p3;
                select_ln15_14_reg_433 <= select_ln15_14_fu_305_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln15_12_reg_423 <= select_ln15_12_fu_283_p3;
                select_ln15_13_reg_428 <= select_ln15_13_fu_297_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln6_fu_183_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln6_fu_183_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln6_fu_183_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln14_1_fu_370_p2 <= std_logic_vector(unsigned(add_ln14_fu_361_p2) + unsigned(zext_ln15_fu_367_p1));
    add_ln14_2_fu_387_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_376_p3) + unsigned(zext_ln14_2_fu_384_p1));
    add_ln14_fu_361_p2 <= std_logic_vector(unsigned(zext_ln14_fu_347_p1) + unsigned(zext_ln14_1_fu_357_p1));
    add_ln15_1_fu_321_p2 <= std_logic_vector(unsigned(select_ln15_12_fu_283_p3) + unsigned(ap_const_lv11_1));
    add_ln15_3_fu_277_p2 <= std_logic_vector(unsigned(select_ln15_fu_213_p3) + unsigned(ap_const_lv11_40));
    add_ln15_fu_201_p2 <= std_logic_vector(unsigned(i_0_reg_117) + unsigned(ap_const_lv11_140));
    add_ln6_fu_189_p2 <= std_logic_vector(unsigned(indvar_flatten17_reg_95) + unsigned(ap_const_lv11_1));
    add_ln9_fu_333_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_128) + unsigned(ap_const_lv10_1));
    and_ln15_fu_257_p2 <= (xor_ln15_fu_245_p2 and icmp_ln12_fu_251_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln6_fu_183_p2)
    begin
        if ((icmp_ln6_fu_183_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_154_p4_assign_proc : process(c_0_reg_150, icmp_ln6_reg_402, ap_CS_fsm_pp0_stage0, select_ln15_14_reg_433, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_402 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_154_p4 <= select_ln15_14_reg_433;
        else 
            ap_phi_mux_c_0_phi_fu_154_p4 <= c_0_reg_150;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_110_p4_assign_proc : process(r_0_reg_106, icmp_ln6_reg_402, ap_CS_fsm_pp0_stage0, select_ln15_11_reg_411, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_402 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_110_p4 <= select_ln15_11_reg_411;
        else 
            ap_phi_mux_r_0_phi_fu_110_p4 <= r_0_reg_106;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_271_p2 <= std_logic_vector(unsigned(select_ln15_9_fu_221_p3) + unsigned(ap_const_lv3_1));
    f_fu_327_p2 <= std_logic_vector(unsigned(select_ln15_13_fu_297_p3) + unsigned(ap_const_lv7_1));
    flat_array_address0 <= zext_ln14_3_fu_398_p1(11 - 1 downto 0);

    flat_array_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            flat_array_ce0 <= ap_const_logic_1;
        else 
            flat_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_d0 <= max_pool_out_q0;

    flat_array_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln6_reg_402_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln6_reg_402_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            flat_array_we0 <= ap_const_logic_1;
        else 
            flat_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln12_fu_251_p2 <= "1" when (f_0_reg_172 = ap_const_lv7_40) else "0";
    icmp_ln6_fu_183_p2 <= "1" when (indvar_flatten17_reg_95 = ap_const_lv11_640) else "0";
    icmp_ln9_fu_207_p2 <= "1" when (indvar_flatten_reg_128 = ap_const_lv10_140) else "0";
    max_pool_out_address0 <= zext_ln14_4_fu_393_p1(11 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln15_fu_291_p2 <= (icmp_ln9_fu_207_p2 or and_ln15_fu_257_p2);
    r_fu_195_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_110_p4) + unsigned(ap_const_lv3_1));
    select_ln15_10_fu_229_p3 <= 
        add_ln15_fu_201_p2 when (icmp_ln9_fu_207_p2(0) = '1') else 
        i_2_reg_161;
    select_ln15_11_fu_237_p3 <= 
        r_fu_195_p2 when (icmp_ln9_fu_207_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_110_p4;
    select_ln15_12_fu_283_p3 <= 
        add_ln15_3_fu_277_p2 when (and_ln15_fu_257_p2(0) = '1') else 
        select_ln15_10_fu_229_p3;
    select_ln15_13_fu_297_p3 <= 
        ap_const_lv7_0 when (or_ln15_fu_291_p2(0) = '1') else 
        f_0_reg_172;
    select_ln15_14_fu_305_p3 <= 
        c_fu_271_p2 when (and_ln15_fu_257_p2(0) = '1') else 
        select_ln15_9_fu_221_p3;
    select_ln15_9_fu_221_p3 <= 
        ap_const_lv3_0 when (icmp_ln9_fu_207_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_154_p4;
    select_ln15_fu_213_p3 <= 
        add_ln15_fu_201_p2 when (icmp_ln9_fu_207_p2(0) = '1') else 
        i_1_reg_139;
    select_ln6_fu_263_p3 <= 
        add_ln15_fu_201_p2 when (icmp_ln9_fu_207_p2(0) = '1') else 
        i_0_reg_117;
    select_ln9_1_fu_339_p3 <= 
        ap_const_lv10_1 when (icmp_ln9_fu_207_p2(0) = '1') else 
        add_ln9_fu_333_p2;
    select_ln9_fu_313_p3 <= 
        add_ln15_3_fu_277_p2 when (and_ln15_fu_257_p2(0) = '1') else 
        select_ln15_fu_213_p3;
    tmp_16_cast_fu_376_p3 <= (add_ln14_1_fu_370_p2 & ap_const_lv6_0);
    tmp_fu_350_p3 <= (select_ln15_11_reg_411 & ap_const_lv2_0);
    xor_ln15_fu_245_p2 <= (icmp_ln9_fu_207_p2 xor ap_const_lv1_1);
    zext_ln14_1_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_350_p3),6));
    zext_ln14_2_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_13_reg_428),12));
    zext_ln14_3_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_12_reg_423_pp0_iter1_reg),64));
    zext_ln14_4_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_2_fu_387_p2),64));
    zext_ln14_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_11_reg_411),6));
    zext_ln15_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_14_reg_433),6));
end behav;
