-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1900 : STD_LOGIC_VECTOR (12 downto 0) := "1100100000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten117_reg_127 : STD_LOGIC_VECTOR (12 downto 0);
    signal f_0_reg_138 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten63_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_160 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten24_reg_171 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_0_reg_182 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_193 : STD_LOGIC_VECTOR (3 downto 0);
    signal mpr_0_reg_204 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_4_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_reg_227 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln9_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln9_reg_908_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_908_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_fu_267_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln32_1_fu_293_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln32_1_reg_917 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln12_2_fu_417_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_2_reg_924 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_2_fu_527_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_2_reg_931 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln19_fu_585_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_reg_937 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_reg_937_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_1_fu_597_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_1_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_1_reg_942_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_2_fu_615_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln19_2_reg_947 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln19_4_fu_637_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_649_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_957 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln37_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_962_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_962_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mpc_fu_667_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_5_fu_679_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_4_fu_693_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln12_5_fu_707_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pool_out_addr_reg_986 : STD_LOGIC_VECTOR (10 downto 0);
    signal max_pool_out_addr_reg_986_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln24_fu_801_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln24_reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_fu_892_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_142_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_164_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_c_0_phi_fu_186_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_max_4_phi_fu_219_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln39_3_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_4_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_243_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln19_fu_251_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln12_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_273_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln19_fu_315_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln37_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_285_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln32_6_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_381_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln29_mid1_fu_401_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_2_fu_301_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_fu_425_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln12_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_2_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_3_fu_325_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln32_3_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_4_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_5_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_fu_393_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln12_3_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_1_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_485_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln30_mid1_fu_511_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_3_fu_433_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln12_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln15_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_1_fu_409_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_4_fu_459_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln12_1_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_2_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln15_fu_503_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln15_2_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_1_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_567_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln19_1_fu_593_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln19_1_fu_605_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln29_1_fu_609_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_3_fu_547_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln37_2_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln22_fu_645_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_1_fu_519_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln19_3_fu_629_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_1_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln19_fu_673_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln15_1_fu_687_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln12_1_fu_701_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_724_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln39_fu_721_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln39_1_fu_731_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln39_fu_735_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln39_2_fu_741_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln39_1_fu_744_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_cast_fu_750_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln32_1_fu_718_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln39_2_fu_758_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_899_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast_fu_775_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln32_fu_715_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_1_fu_782_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln22_fu_793_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln32_fu_810_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_1_fu_827_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_813_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_823_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_1_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_830_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_1_fu_840_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_3_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_2_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_1_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_1_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_899_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_899_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_899_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_899_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_899_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_5ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32neOg_U61 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_out_q0,
        din1 => grp_fu_238_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_238_p2);

    cnn_mac_muladd_5ng8j_U62 : component cnn_mac_muladd_5ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_899_p0,
        din1 => grp_fu_899_p1,
        din2 => grp_fu_899_p2,
        dout => grp_fu_899_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_908 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_182 <= select_ln15_2_reg_931;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_182 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_908 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_138 <= select_ln32_1_reg_917;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_138 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten117_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten117_reg_127 <= add_ln9_fu_267_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten117_reg_127 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten24_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten24_reg_171 <= select_ln15_4_fu_693_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten24_reg_171 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten63_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten63_reg_149 <= select_ln12_5_fu_707_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten63_reg_149 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_193 <= select_ln19_5_fu_679_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_193 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    max_4_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_908_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                max_4_reg_215 <= max_1_fu_892_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_4_reg_215 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    mpc_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mpc_0_reg_227 <= mpc_fu_667_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpc_0_reg_227 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mpr_0_reg_204 <= select_ln19_4_fu_637_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpr_0_reg_204 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_908 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_160 <= select_ln12_2_reg_924;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_160 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln37_reg_962 <= and_ln37_fu_661_p2;
                j_reg_957 <= j_fu_649_p2;
                select_ln19_1_reg_942 <= select_ln19_1_fu_597_p3;
                select_ln19_2_reg_947 <= select_ln19_2_fu_615_p3;
                select_ln19_reg_937 <= select_ln19_fu_585_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln37_reg_962_pp0_iter1_reg <= and_ln37_reg_962;
                icmp_ln9_reg_908 <= icmp_ln9_fu_261_p2;
                icmp_ln9_reg_908_pp0_iter1_reg <= icmp_ln9_reg_908;
                select_ln19_1_reg_942_pp0_iter1_reg <= select_ln19_1_reg_942;
                select_ln19_reg_937_pp0_iter1_reg <= select_ln19_reg_937;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln37_reg_962_pp0_iter2_reg <= and_ln37_reg_962_pp0_iter1_reg;
                icmp_ln9_reg_908_pp0_iter2_reg <= icmp_ln9_reg_908_pp0_iter1_reg;
                max_pool_out_addr_reg_986_pp0_iter2_reg <= max_pool_out_addr_reg_986;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_908 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                max_pool_out_addr_reg_986 <= zext_ln39_3_fu_764_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_908_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                max_reg_1003 <= conv_out_q0;
                select_ln24_reg_996 <= select_ln24_fu_801_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln12_2_reg_924 <= select_ln12_2_fu_417_p3;
                select_ln15_2_reg_931 <= select_ln15_2_fu_527_p3;
                select_ln32_1_reg_917 <= select_ln32_1_fu_293_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln9_fu_261_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln9_fu_261_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln9_fu_261_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln12_1_fu_701_p2 <= std_logic_vector(unsigned(indvar_flatten63_reg_149) + unsigned(ap_const_lv8_1));
    add_ln15_1_fu_687_p2 <= std_logic_vector(unsigned(indvar_flatten24_reg_171) + unsigned(ap_const_lv6_1));
    add_ln19_fu_673_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_193) + unsigned(ap_const_lv4_1));
    add_ln29_1_fu_609_p2 <= std_logic_vector(unsigned(zext_ln19_1_fu_605_p1) + unsigned(select_ln12_1_fu_409_p3));
    add_ln32_1_fu_782_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_775_p3) + unsigned(zext_ln32_fu_715_p1));
    add_ln39_1_fu_744_p2 <= std_logic_vector(unsigned(add_ln39_fu_735_p2) + unsigned(zext_ln39_2_fu_741_p1));
    add_ln39_2_fu_758_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_750_p3) + unsigned(zext_ln32_1_fu_718_p1));
    add_ln39_fu_735_p2 <= std_logic_vector(unsigned(zext_ln39_fu_721_p1) + unsigned(zext_ln39_1_fu_731_p1));
    add_ln9_fu_267_p2 <= std_logic_vector(unsigned(indvar_flatten117_reg_127) + unsigned(ap_const_lv13_1));
    and_ln12_1_fu_467_p2 <= (or_ln12_1_fu_447_p2 and and_ln32_3_fu_339_p2);
    and_ln12_2_fu_473_p2 <= (or_ln12_1_fu_447_p2 and and_ln32_4_fu_351_p2);
    and_ln12_3_fu_479_p2 <= (or_ln12_1_fu_447_p2 and and_ln32_5_fu_363_p2);
    and_ln12_fu_453_p2 <= (or_ln12_1_fu_447_p2 and and_ln32_2_fu_319_p2);
    and_ln15_1_fu_555_p2 <= (xor_ln15_fu_535_p2 and and_ln12_1_fu_467_p2);
    and_ln15_2_fu_561_p2 <= (xor_ln15_fu_535_p2 and and_ln12_2_fu_473_p2);
    and_ln15_fu_541_p2 <= (xor_ln15_fu_535_p2 and and_ln12_fu_453_p2);
    and_ln32_1_fu_886_p2 <= (grp_fu_238_p2 and and_ln32_fu_880_p2);
    and_ln32_2_fu_319_p2 <= (xor_ln32_fu_309_p2 and trunc_ln19_fu_315_p1);
    and_ln32_3_fu_339_p2 <= (xor_ln32_fu_309_p2 and icmp_ln37_fu_333_p2);
    and_ln32_4_fu_351_p2 <= (xor_ln32_fu_309_p2 and icmp_ln22_fu_345_p2);
    and_ln32_5_fu_363_p2 <= (xor_ln32_fu_309_p2 and icmp_ln19_fu_357_p2);
    and_ln32_6_fu_375_p2 <= (xor_ln32_fu_309_p2 and icmp_ln15_fu_369_p2);
    and_ln32_fu_880_p2 <= (or_ln32_fu_856_p2 and or_ln32_1_fu_874_p2);
    and_ln37_fu_661_p2 <= (select_ln19_3_fu_629_p3 and icmp_ln37_1_fu_655_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln9_fu_261_p2)
    begin
        if ((icmp_ln9_fu_261_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_186_p4_assign_proc : process(c_0_reg_182, icmp_ln9_reg_908, ap_CS_fsm_pp0_stage0, select_ln15_2_reg_931, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_908 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_186_p4 <= select_ln15_2_reg_931;
        else 
            ap_phi_mux_c_0_phi_fu_186_p4 <= c_0_reg_182;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_142_p4_assign_proc : process(f_0_reg_138, icmp_ln9_reg_908, ap_CS_fsm_pp0_stage0, select_ln32_1_reg_917, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_908 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_142_p4 <= select_ln32_1_reg_917;
        else 
            ap_phi_mux_f_0_phi_fu_142_p4 <= f_0_reg_138;
        end if; 
    end process;


    ap_phi_mux_max_4_phi_fu_219_p4_assign_proc : process(max_4_reg_215, icmp_ln9_reg_908_pp0_iter2_reg, max_1_fu_892_p3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_908_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_max_4_phi_fu_219_p4 <= max_1_fu_892_p3;
        else 
            ap_phi_mux_max_4_phi_fu_219_p4 <= max_4_reg_215;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_164_p4_assign_proc : process(r_0_reg_160, icmp_ln9_reg_908, ap_CS_fsm_pp0_stage0, select_ln12_2_reg_924, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_908 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_164_p4 <= select_ln12_2_reg_924;
        else 
            ap_phi_mux_r_0_phi_fu_164_p4 <= r_0_reg_160;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_1_fu_827_p1 <= select_ln24_reg_996;
    bitcast_ln32_fu_810_p1 <= max_reg_1003;
    c_fu_485_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln12_fu_393_p3));
    conv_out_address0 <= zext_ln32_4_fu_788_p1(13 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_273_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(ap_phi_mux_f_0_phi_fu_142_p4));
    grp_fu_238_p1 <= 
        ap_phi_mux_max_4_phi_fu_219_p4 when (or_ln24_fu_796_p2(0) = '1') else 
        ap_const_lv32_800000;
    grp_fu_899_p0 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_899_p1 <= grp_fu_899_p10(4 - 1 downto 0);
    grp_fu_899_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_2_reg_947),8));
    grp_fu_899_p2 <= grp_fu_899_p20(4 - 1 downto 0);
    grp_fu_899_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_957),8));
    i_fu_255_p2 <= std_logic_vector(unsigned(shl_ln_fu_243_p3) + unsigned(zext_ln19_fu_251_p1));
    icmp_ln12_fu_279_p2 <= "1" when (indvar_flatten63_reg_149 = ap_const_lv8_64) else "0";
    icmp_ln15_fu_369_p2 <= "1" when (indvar_flatten24_reg_171 = ap_const_lv6_14) else "0";
    icmp_ln19_fu_357_p2 <= "1" when (indvar_flatten_reg_193 = ap_const_lv4_4) else "0";
    icmp_ln22_fu_345_p2 <= "1" when (mpc_0_reg_227 = ap_const_lv2_2) else "0";
    icmp_ln32_1_fu_850_p2 <= "1" when (trunc_ln32_fu_823_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_2_fu_862_p2 <= "0" when (tmp_5_fu_830_p4 = ap_const_lv8_FF) else "1";
    icmp_ln32_3_fu_868_p2 <= "1" when (trunc_ln32_1_fu_840_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_844_p2 <= "0" when (tmp_fu_813_p4 = ap_const_lv8_FF) else "1";
    icmp_ln37_1_fu_655_p2 <= "1" when (select_ln19_fu_585_p3 = ap_const_lv2_1) else "0";
    icmp_ln37_2_fu_623_p2 <= "1" when (select_ln15_fu_503_p3 = ap_const_lv2_0) else "0";
    icmp_ln37_fu_333_p2 <= "1" when (mpr_0_reg_204 = ap_const_lv2_1) else "0";
    icmp_ln9_fu_261_p2 <= "1" when (indvar_flatten117_reg_127 = ap_const_lv13_1900) else "0";
    j_fu_649_p2 <= std_logic_vector(unsigned(zext_ln22_fu_645_p1) + unsigned(select_ln15_1_fu_519_p3));
    max_1_fu_892_p3 <= 
        max_reg_1003 when (and_ln32_1_fu_886_p2(0) = '1') else 
        select_ln24_reg_996;
    max_pool_out_address0 <= max_pool_out_addr_reg_986_pp0_iter2_reg;

    max_pool_out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= 
        max_reg_1003 when (and_ln32_1_fu_886_p2(0) = '1') else 
        select_ln24_reg_996;

    max_pool_out_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln37_reg_962_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln37_reg_962_pp0_iter2_reg))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_667_p2 <= std_logic_vector(unsigned(select_ln19_fu_585_p3) + unsigned(ap_const_lv2_1));
    mpr_fu_567_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln15_fu_503_p3));
    or_ln12_1_fu_447_p2 <= (xor_ln12_fu_441_p2 or icmp_ln12_fu_279_p2);
    or_ln12_fu_387_p2 <= (icmp_ln12_fu_279_p2 or and_ln32_6_fu_375_p2);
    or_ln15_1_fu_497_p2 <= (or_ln15_fu_491_p2 or icmp_ln12_fu_279_p2);
    or_ln15_fu_491_p2 <= (and_ln32_6_fu_375_p2 or and_ln12_3_fu_479_p2);
    or_ln19_1_fu_579_p2 <= (or_ln19_fu_573_p2 or or_ln12_fu_387_p2);
    or_ln19_fu_573_p2 <= (and_ln15_2_fu_561_p2 or and_ln12_3_fu_479_p2);
    or_ln24_fu_796_p2 <= (trunc_ln22_fu_793_p1 or select_ln19_1_reg_942_pp0_iter1_reg);
    or_ln32_1_fu_874_p2 <= (icmp_ln32_3_fu_868_p2 or icmp_ln32_2_fu_862_p2);
    or_ln32_fu_856_p2 <= (icmp_ln32_fu_844_p2 or icmp_ln32_1_fu_850_p2);
    r_fu_381_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln32_fu_285_p3));
    select_ln12_1_fu_409_p3 <= 
        shl_ln29_mid1_fu_401_p3 when (and_ln32_6_fu_375_p2(0) = '1') else 
        select_ln32_2_fu_301_p3;
    select_ln12_2_fu_417_p3 <= 
        r_fu_381_p2 when (and_ln32_6_fu_375_p2(0) = '1') else 
        select_ln32_fu_285_p3;
    select_ln12_3_fu_433_p3 <= 
        ap_const_lv4_0 when (or_ln12_fu_387_p2(0) = '1') else 
        shl_ln1_fu_425_p3;
    select_ln12_4_fu_459_p3 <= 
        shl_ln29_mid1_fu_401_p3 when (and_ln32_6_fu_375_p2(0) = '1') else 
        select_ln32_3_fu_325_p3;
    select_ln12_5_fu_707_p3 <= 
        ap_const_lv8_1 when (icmp_ln12_fu_279_p2(0) = '1') else 
        add_ln12_1_fu_701_p2;
    select_ln12_fu_393_p3 <= 
        ap_const_lv3_0 when (or_ln12_fu_387_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_186_p4;
    select_ln15_1_fu_519_p3 <= 
        shl_ln30_mid1_fu_511_p3 when (and_ln12_3_fu_479_p2(0) = '1') else 
        select_ln12_3_fu_433_p3;
    select_ln15_2_fu_527_p3 <= 
        c_fu_485_p2 when (and_ln12_3_fu_479_p2(0) = '1') else 
        select_ln12_fu_393_p3;
    select_ln15_3_fu_547_p3 <= 
        select_ln12_1_fu_409_p3 when (and_ln12_3_fu_479_p2(0) = '1') else 
        select_ln12_4_fu_459_p3;
    select_ln15_4_fu_693_p3 <= 
        ap_const_lv6_1 when (or_ln12_fu_387_p2(0) = '1') else 
        add_ln15_1_fu_687_p2;
    select_ln15_fu_503_p3 <= 
        ap_const_lv2_0 when (or_ln15_1_fu_497_p2(0) = '1') else 
        mpr_0_reg_204;
    select_ln19_1_fu_597_p3 <= 
        trunc_ln19_1_fu_593_p1 when (and_ln15_2_fu_561_p2(0) = '1') else 
        and_ln15_fu_541_p2;
    select_ln19_2_fu_615_p3 <= 
        add_ln29_1_fu_609_p2 when (and_ln15_2_fu_561_p2(0) = '1') else 
        select_ln15_3_fu_547_p3;
    select_ln19_3_fu_629_p3 <= 
        icmp_ln37_2_fu_623_p2 when (and_ln15_2_fu_561_p2(0) = '1') else 
        and_ln15_1_fu_555_p2;
    select_ln19_4_fu_637_p3 <= 
        mpr_fu_567_p2 when (and_ln15_2_fu_561_p2(0) = '1') else 
        select_ln15_fu_503_p3;
    select_ln19_5_fu_679_p3 <= 
        ap_const_lv4_1 when (or_ln15_1_fu_497_p2(0) = '1') else 
        add_ln19_fu_673_p2;
    select_ln19_fu_585_p3 <= 
        ap_const_lv2_0 when (or_ln19_1_fu_579_p2(0) = '1') else 
        mpc_0_reg_227;
    select_ln24_fu_801_p3 <= 
        ap_phi_mux_max_4_phi_fu_219_p4 when (or_ln24_fu_796_p2(0) = '1') else 
        ap_const_lv32_800000;
    select_ln32_1_fu_293_p3 <= 
        f_fu_273_p2 when (icmp_ln12_fu_279_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_142_p4;
    select_ln32_2_fu_301_p3 <= 
        ap_const_lv4_0 when (icmp_ln12_fu_279_p2(0) = '1') else 
        shl_ln_fu_243_p3;
    select_ln32_3_fu_325_p3 <= 
        ap_const_lv4_0 when (icmp_ln12_fu_279_p2(0) = '1') else 
        i_fu_255_p2;
    select_ln32_fu_285_p3 <= 
        ap_const_lv3_0 when (icmp_ln12_fu_279_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_164_p4;
    shl_ln1_fu_425_p3 <= (ap_phi_mux_c_0_phi_fu_186_p4 & ap_const_lv1_0);
    shl_ln29_mid1_fu_401_p3 <= (r_fu_381_p2 & ap_const_lv1_0);
    shl_ln30_mid1_fu_511_p3 <= (c_fu_485_p2 & ap_const_lv1_0);
    shl_ln_fu_243_p3 <= (ap_phi_mux_r_0_phi_fu_164_p4 & ap_const_lv1_0);
    tmp_1_fu_724_p3 <= (select_ln12_2_reg_924 & ap_const_lv2_0);
    tmp_3_cast_fu_750_p3 <= (add_ln39_1_fu_744_p2 & ap_const_lv6_0);
    tmp_5_fu_830_p4 <= bitcast_ln32_1_fu_827_p1(30 downto 23);
    tmp_8_cast_fu_775_p3 <= (grp_fu_899_p3 & ap_const_lv6_0);
    tmp_fu_813_p4 <= bitcast_ln32_fu_810_p1(30 downto 23);
    trunc_ln19_1_fu_593_p1 <= mpr_fu_567_p2(1 - 1 downto 0);
    trunc_ln19_fu_315_p1 <= mpr_0_reg_204(1 - 1 downto 0);
    trunc_ln22_fu_793_p1 <= select_ln19_reg_937_pp0_iter1_reg(1 - 1 downto 0);
    trunc_ln32_1_fu_840_p1 <= bitcast_ln32_1_fu_827_p1(23 - 1 downto 0);
    trunc_ln32_fu_823_p1 <= bitcast_ln32_fu_810_p1(23 - 1 downto 0);
    xor_ln12_fu_441_p2 <= (icmp_ln15_fu_369_p2 xor ap_const_lv1_1);
    xor_ln15_fu_535_p2 <= (ap_const_lv1_1 xor and_ln12_3_fu_479_p2);
    xor_ln32_fu_309_p2 <= (icmp_ln12_fu_279_p2 xor ap_const_lv1_1);
    zext_ln19_1_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpr_fu_567_p2),4));
    zext_ln19_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpr_0_reg_204),4));
    zext_ln22_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_fu_585_p3),4));
    zext_ln32_1_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_1_reg_917),12));
    zext_ln32_4_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_1_fu_782_p2),64));
    zext_ln32_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_1_reg_917),14));
    zext_ln39_1_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_724_p3),6));
    zext_ln39_2_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_2_reg_931),6));
    zext_ln39_3_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_2_fu_758_p2),64));
    zext_ln39_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_2_reg_924),6));
end behav;
