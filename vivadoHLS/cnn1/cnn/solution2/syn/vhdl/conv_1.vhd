-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv18_2F880 : STD_LOGIC_VECTOR (17 downto 0) := "101111100010000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_1D40 : STD_LOGIC_VECTOR (13 downto 0) := "01110101000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv10_120 : STD_LOGIC_VECTOR (9 downto 0) := "0100100000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_BD3036A8 : STD_LOGIC_VECTOR (31 downto 0) := "10111101001100000011011010101000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten114_reg_169 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_0_reg_181 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten64_reg_193 : STD_LOGIC_VECTOR (13 downto 0);
    signal c_0_reg_204 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten25_reg_215 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_0_reg_226 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_237 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_0_reg_248 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_0_reg_259 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal icmp_ln9_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal and_ln33_reg_1049 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_reg_1049_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln31_fu_308_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_reg_893 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln9_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_898_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_320_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_902 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln12_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_332_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln39_reg_915 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln39_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_reg_921 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3331_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3331_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_9_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_9_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_10_fu_382_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln39_10_reg_945 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln39_2_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_2_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_12_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_12_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_64_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_64_reg_966 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_420_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln31_reg_971 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln19_fu_428_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln19_reg_977 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln15_5_fu_434_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_5_reg_982 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln12_4_fu_440_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln12_4_reg_987 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_bias_load_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln9_fu_446_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln9_reg_997 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln39_8_fu_452_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln39_8_reg_1002 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln39_11_fu_487_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln39_11_reg_1007 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_4_fu_535_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln31_4_reg_1012 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_out_addr_reg_1017 : STD_LOGIC_VECTOR (14 downto 0);
    signal conv_out_addr_reg_1017_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln19_fu_599_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_reg_1027 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_15_fu_611_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_15_reg_1033 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln33_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_5_fu_770_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_5_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal conv_1_weights_0_loa_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_reg_1063 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln27_fu_790_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln27_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1073 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_fu_798_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_1078 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_18_fu_803_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln19_18_reg_1083 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln15_fu_809_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln15_reg_1088 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln12_fu_815_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln12_reg_1093 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten114_phi_fu_173_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_185_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten64_phi_fu_197_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_c_0_phi_fu_208_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten25_phi_fu_219_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_f_0_phi_fu_230_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_241_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_wr_0_phi_fu_252_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_263_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln31_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_13_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_10_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_48_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_50_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_sum_4_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln19_fu_304_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln19_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_2_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_8_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_482_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_872_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_497_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln39_9_fu_462_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln39_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_7_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_525_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_43_fu_545_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln39_12_fu_504_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln39_6_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln39_13_fu_508_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln39_10_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_11_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_2_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_4_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_584_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_fu_622_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln31_45_fu_630_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_44_fu_618_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln19_4_fu_607_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_6_fu_640_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_6_fu_560_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln19_16_fu_646_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_34_fu_654_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_35_fu_666_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_46_fu_662_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln31_47_fu_674_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln33_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_7_fu_702_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln31_fu_634_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_7_fu_706_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_42_fu_541_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_cast_fu_712_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_8_fu_720_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln22_fu_698_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_2_fu_731_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_49_fu_737_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln31_1_fu_678_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln31_9_fu_741_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln19_17_fu_690_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_2_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal select_ln39_12_fu_764_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln27_fu_780_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln27_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal bitcast_ln38_fu_821_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_825_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_fu_835_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln38_2_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_872_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_872_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_872_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_872_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_872_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_5nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_weights_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_address0,
        ce0 => conv_1_weights_0_ce0,
        q0 => conv_1_weights_0_q0);

    cnn_fadd_32ns_32ncud_U1 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_270_p0,
        din1 => grp_fu_270_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    cnn_fmul_32ns_32ndEe_U2 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_weights_0_loa_reg_1058,
        din1 => input_load_reg_1063,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    cnn_fcmp_32ns_32neOg_U3 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_283,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_278_p2);

    cnn_mac_muladd_5nfYi_U4 : component cnn_mac_muladd_5nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_872_p0,
        din1 => grp_fu_872_p1,
        din2 => grp_fu_872_p2,
        dout => grp_fu_872_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_0_reg_204 <= select_ln39_11_reg_1007;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_204 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                f_0_reg_226 <= select_ln31_4_reg_1012;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_226 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten114_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten114_reg_169 <= add_ln9_reg_997;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten114_reg_169 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    indvar_flatten25_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten25_reg_215 <= select_ln15_reg_1088;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten25_reg_215 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten64_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten64_reg_193 <= select_ln12_reg_1093;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten64_reg_193 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_237 <= select_ln19_18_reg_1083;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_237 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                r_0_reg_181 <= select_ln39_8_reg_1002;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_181 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_4_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln33_reg_1049) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln33_reg_1049_pp0_iter1_reg)))) then 
                w_sum_4_fu_106 <= reg_283;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_sum_4_fu_106 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                wc_0_reg_259 <= wc_reg_1078;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wc_0_reg_259 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_248 <= select_ln19_15_reg_1033;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wr_0_reg_248 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln12_4_reg_987 <= add_ln12_4_fu_440_p2;
                add_ln15_5_reg_982 <= add_ln15_5_fu_434_p2;
                add_ln19_reg_977 <= add_ln19_fu_428_p2;
                and_ln39_12_reg_957 <= and_ln39_12_fu_402_p2;
                and_ln39_9_reg_932 <= and_ln39_9_fu_370_p2;
                icmp_ln12_reg_908 <= icmp_ln12_fu_326_p2;
                icmp_ln3331_reg_927 <= icmp_ln3331_fu_346_p2;
                or_ln31_64_reg_966 <= or_ln31_64_fu_414_p2;
                or_ln39_2_reg_951 <= or_ln39_2_fu_396_p2;
                or_ln39_reg_938 <= or_ln39_fu_376_p2;
                r_reg_902 <= r_fu_320_p2;
                select_ln31_reg_971 <= select_ln31_fu_420_p3;
                select_ln39_10_reg_945 <= select_ln39_10_fu_382_p3;
                select_ln39_reg_915 <= select_ln39_fu_332_p3;
                xor_ln39_reg_921 <= xor_ln39_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln31_reg_893 <= add_ln31_fu_308_p2;
                icmp_ln9_reg_898 <= icmp_ln9_fu_314_p2;
                icmp_ln9_reg_898_pp0_iter1_reg <= icmp_ln9_reg_898;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln9_reg_997 <= add_ln9_fu_446_p2;
                conv_1_bias_load_reg_992 <= conv_1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                and_ln33_reg_1049 <= and_ln33_fu_758_p2;
                conv_out_addr_reg_1017 <= zext_ln39_13_fu_555_p1(15 - 1 downto 0);
                select_ln19_reg_1027 <= select_ln19_fu_599_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                and_ln33_reg_1049_pp0_iter1_reg <= and_ln33_reg_1049;
                conv_out_addr_reg_1017_pp0_iter1_reg <= conv_out_addr_reg_1017;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                conv_1_weights_0_loa_reg_1058 <= conv_1_weights_0_q0;
                input_load_reg_1063 <= input_r_q0;
                select_ln31_5_reg_1053 <= select_ln31_5_fu_770_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_1 = and_ln33_reg_1049_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_283 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                select_ln12_reg_1093 <= select_ln12_fu_815_p3;
                select_ln15_reg_1088 <= select_ln15_fu_809_p3;
                select_ln19_18_reg_1083 <= select_ln19_18_fu_803_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln19_15_reg_1033 <= select_ln19_15_fu_611_p3;
                select_ln31_4_reg_1012 <= select_ln31_4_fu_535_p3;
                select_ln39_11_reg_1007 <= select_ln39_11_fu_487_p3;
                select_ln39_8_reg_1002 <= select_ln39_8_fu_452_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                select_ln27_reg_1068 <= select_ln27_fu_790_p3;
                tmp2_reg_1073 <= grp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                wc_reg_1078 <= wc_fu_798_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln9_reg_898, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((icmp_ln9_reg_898 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((icmp_ln9_reg_898 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln12_4_fu_440_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten64_phi_fu_197_p4) + unsigned(ap_const_lv14_1));
    add_ln15_5_fu_434_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten25_phi_fu_219_p4) + unsigned(ap_const_lv10_1));
    add_ln19_fu_428_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_241_p4) + unsigned(ap_const_lv4_1));
    add_ln31_2_fu_731_p2 <= std_logic_vector(unsigned(select_ln39_11_fu_487_p3) + unsigned(zext_ln22_fu_698_p1));
    add_ln31_6_fu_640_p2 <= std_logic_vector(unsigned(select_ln39_8_fu_452_p3) + unsigned(zext_ln19_4_fu_607_p1));
    add_ln31_7_fu_706_p2 <= std_logic_vector(unsigned(zext_ln31_7_fu_702_p1) + unsigned(sub_ln31_fu_634_p2));
    add_ln31_8_fu_720_p2 <= std_logic_vector(unsigned(zext_ln31_42_fu_541_p1) + unsigned(tmp_45_cast_fu_712_p3));
    add_ln31_9_fu_741_p2 <= std_logic_vector(unsigned(zext_ln31_49_fu_737_p1) + unsigned(sub_ln31_1_fu_678_p2));
    add_ln31_fu_308_p2 <= std_logic_vector(unsigned(zext_ln19_fu_304_p1) + unsigned(ap_phi_mux_r_0_phi_fu_185_p4));
    add_ln39_6_fu_549_p2 <= std_logic_vector(unsigned(zext_ln31_43_fu_545_p1) + unsigned(zext_ln39_12_fu_504_p1));
    add_ln9_fu_446_p2 <= std_logic_vector(unsigned(indvar_flatten114_reg_169) + unsigned(ap_const_lv18_1));
    and_ln31_2_fu_578_p2 <= (xor_ln31_fu_567_p2 and and_ln39_11_fu_520_p2);
    and_ln31_fu_572_p2 <= (xor_ln31_fu_567_p2 and and_ln39_10_fu_515_p2);
    and_ln33_fu_758_p2 <= (select_ln19_17_fu_690_p3 and icmp_ln33_2_fu_752_p2);
    and_ln38_fu_857_p2 <= (or_ln38_fu_851_p2 and grp_fu_278_p2);
    and_ln39_10_fu_515_p2 <= (or_ln39_2_reg_951 and and_ln39_fu_467_p2);
    and_ln39_11_fu_520_p2 <= (or_ln39_2_reg_951 and and_ln39_7_fu_477_p2);
    and_ln39_12_fu_402_p2 <= (or_ln39_2_fu_396_p2 and and_ln39_8_fu_358_p2);
    and_ln39_7_fu_477_p2 <= (xor_ln39_reg_921 and icmp_ln22_fu_471_p2);
    and_ln39_8_fu_358_p2 <= (xor_ln39_fu_340_p2 and icmp_ln19_fu_352_p2);
    and_ln39_9_fu_370_p2 <= (xor_ln39_fu_340_p2 and icmp_ln15_fu_364_p2);
    and_ln39_fu_467_p2 <= (xor_ln39_reg_921 and icmp_ln3331_reg_927);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(11);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln9_reg_898)
    begin
        if ((icmp_ln9_reg_898 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_208_p4_assign_proc : process(c_0_reg_204, icmp_ln9_reg_898, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln39_11_reg_1007, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_c_0_phi_fu_208_p4 <= select_ln39_11_reg_1007;
        else 
            ap_phi_mux_c_0_phi_fu_208_p4 <= c_0_reg_204;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_230_p4_assign_proc : process(f_0_reg_226, icmp_ln9_reg_898, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln31_4_reg_1012, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_f_0_phi_fu_230_p4 <= select_ln31_4_reg_1012;
        else 
            ap_phi_mux_f_0_phi_fu_230_p4 <= f_0_reg_226;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten114_phi_fu_173_p4_assign_proc : process(indvar_flatten114_reg_169, icmp_ln9_reg_898, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, add_ln9_reg_997, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten114_phi_fu_173_p4 <= add_ln9_reg_997;
        else 
            ap_phi_mux_indvar_flatten114_phi_fu_173_p4 <= indvar_flatten114_reg_169;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten25_phi_fu_219_p4_assign_proc : process(indvar_flatten25_reg_215, icmp_ln9_reg_898, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln15_reg_1088, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten25_phi_fu_219_p4 <= select_ln15_reg_1088;
        else 
            ap_phi_mux_indvar_flatten25_phi_fu_219_p4 <= indvar_flatten25_reg_215;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten64_phi_fu_197_p4_assign_proc : process(indvar_flatten64_reg_193, icmp_ln9_reg_898, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln12_reg_1093, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten64_phi_fu_197_p4 <= select_ln12_reg_1093;
        else 
            ap_phi_mux_indvar_flatten64_phi_fu_197_p4 <= indvar_flatten64_reg_193;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_241_p4_assign_proc : process(indvar_flatten_reg_237, icmp_ln9_reg_898, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln19_18_reg_1083, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_241_p4 <= select_ln19_18_reg_1083;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_241_p4 <= indvar_flatten_reg_237;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_185_p4_assign_proc : process(r_0_reg_181, icmp_ln9_reg_898, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln39_8_reg_1002, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_r_0_phi_fu_185_p4 <= select_ln39_8_reg_1002;
        else 
            ap_phi_mux_r_0_phi_fu_185_p4 <= r_0_reg_181;
        end if; 
    end process;


    ap_phi_mux_wc_0_phi_fu_263_p4_assign_proc : process(wc_0_reg_259, ap_enable_reg_pp0_iter1, icmp_ln9_reg_898_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, wc_reg_1078, ap_block_pp0_stage1)
    begin
        if (((icmp_ln9_reg_898_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wc_0_phi_fu_263_p4 <= wc_reg_1078;
        else 
            ap_phi_mux_wc_0_phi_fu_263_p4 <= wc_0_reg_259;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_252_p4_assign_proc : process(wr_0_reg_248, icmp_ln9_reg_898, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln19_15_reg_1033, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wr_0_phi_fu_252_p4 <= select_ln19_15_reg_1033;
        else 
            ap_phi_mux_wr_0_phi_fu_252_p4 <= wr_0_reg_248;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln38_fu_821_p1 <= reg_283;
    c_fu_482_p2 <= std_logic_vector(unsigned(select_ln39_reg_915) + unsigned(ap_const_lv5_1));

    conv_1_bias_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln31_fu_299_p1, zext_ln31_10_fu_530_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_1_bias_address0 <= zext_ln31_10_fu_530_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_1_bias_address0 <= zext_ln31_fu_299_p1(5 - 1 downto 0);
            else 
                conv_1_bias_address0 <= "XXXXX";
            end if;
        else 
            conv_1_bias_address0 <= "XXXXX";
        end if; 
    end process;


    conv_1_bias_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_address0 <= zext_ln31_48_fu_726_p1(9 - 1 downto 0);

    conv_1_weights_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            conv_1_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_1017_pp0_iter1_reg;

    conv_out_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        reg_283 when (and_ln38_fu_857_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_enable_reg_pp0_iter1, and_ln33_reg_1049_pp0_iter1_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln33_reg_1049_pp0_iter1_reg))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_525_p2 <= std_logic_vector(unsigned(select_ln39_10_reg_945) + unsigned(ap_const_lv6_1));

    grp_fu_270_p0_assign_proc : process(reg_283, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln27_reg_1068, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_270_p0 <= reg_283;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_270_p0 <= select_ln27_reg_1068;
        else 
            grp_fu_270_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln31_5_reg_1053, tmp2_reg_1073, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_270_p1 <= select_ln31_5_reg_1053;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_270_p1 <= tmp2_reg_1073;
        else 
            grp_fu_270_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_872_p0 <= grp_fu_872_p00(5 - 1 downto 0);
    grp_fu_872_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_8_fu_452_p3),10));
    grp_fu_872_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_872_p2 <= grp_fu_872_p20(5 - 1 downto 0);
    grp_fu_872_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_11_fu_487_p3),10));
    icmp_ln12_fu_326_p2 <= "1" when (ap_phi_mux_indvar_flatten64_phi_fu_197_p4 = ap_const_lv14_1D40) else "0";
    icmp_ln15_fu_364_p2 <= "1" when (ap_phi_mux_indvar_flatten25_phi_fu_219_p4 = ap_const_lv10_120) else "0";
    icmp_ln19_fu_352_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_241_p4 = ap_const_lv4_9) else "0";
    icmp_ln22_fu_471_p2 <= "1" when (ap_phi_mux_wc_0_phi_fu_263_p4 = ap_const_lv2_3) else "0";
    icmp_ln27_fu_784_p2 <= "1" when (or_ln27_fu_780_p2 = ap_const_lv2_0) else "0";
    icmp_ln3331_fu_346_p2 <= "1" when (ap_phi_mux_wr_0_phi_fu_252_p4 = ap_const_lv2_2) else "0";
    icmp_ln33_2_fu_752_p2 <= "1" when (select_ln19_fu_599_p3 = ap_const_lv2_2) else "0";
    icmp_ln33_fu_684_p2 <= "1" when (wr_fu_584_p2 = ap_const_lv2_2) else "0";
    icmp_ln38_2_fu_845_p2 <= "1" when (trunc_ln38_fu_835_p1 = ap_const_lv23_0) else "0";
    icmp_ln38_fu_839_p2 <= "0" when (tmp_36_fu_825_p4 = ap_const_lv8_FF) else "1";
    icmp_ln9_fu_314_p2 <= "1" when (ap_phi_mux_indvar_flatten114_phi_fu_173_p4 = ap_const_lv18_2F880) else "0";
    input_r_address0 <= zext_ln31_50_fu_747_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln19_4_fu_594_p2 <= (or_ln39_reg_938 or or_ln19_fu_589_p2);
    or_ln19_fu_589_p2 <= (and_ln39_12_reg_957 or and_ln31_2_fu_578_p2);
    or_ln27_fu_780_p2 <= (select_ln19_reg_1027 or select_ln19_15_reg_1033);
    or_ln31_64_fu_414_p2 <= (or_ln31_fu_408_p2 or icmp_ln12_fu_326_p2);
    or_ln31_fu_408_p2 <= (and_ln39_9_fu_370_p2 or and_ln39_12_fu_402_p2);
    or_ln38_fu_851_p2 <= (icmp_ln38_fu_839_p2 or icmp_ln38_2_fu_845_p2);
    or_ln39_2_fu_396_p2 <= (xor_ln39_2_fu_390_p2 or icmp_ln12_fu_326_p2);
    or_ln39_fu_376_p2 <= (icmp_ln12_fu_326_p2 or and_ln39_9_fu_370_p2);
    r_fu_320_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_185_p4) + unsigned(ap_const_lv5_1));
    select_ln12_fu_815_p3 <= 
        ap_const_lv14_1 when (icmp_ln12_reg_908(0) = '1') else 
        add_ln12_4_reg_987;
    select_ln15_fu_809_p3 <= 
        ap_const_lv10_1 when (or_ln39_reg_938(0) = '1') else 
        add_ln15_5_reg_982;
    select_ln19_15_fu_611_p3 <= 
        wr_fu_584_p2 when (and_ln31_2_fu_578_p2(0) = '1') else 
        select_ln31_reg_971;
    select_ln19_16_fu_646_p3 <= 
        add_ln31_6_fu_640_p2 when (and_ln31_2_fu_578_p2(0) = '1') else 
        select_ln31_6_fu_560_p3;
    select_ln19_17_fu_690_p3 <= 
        icmp_ln33_fu_684_p2 when (and_ln31_2_fu_578_p2(0) = '1') else 
        and_ln31_fu_572_p2;
    select_ln19_18_fu_803_p3 <= 
        ap_const_lv4_1 when (or_ln31_64_reg_966(0) = '1') else 
        add_ln19_reg_977;
    select_ln19_fu_599_p3 <= 
        ap_const_lv2_0 when (or_ln19_4_fu_594_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_263_p4;
    select_ln27_fu_790_p3 <= 
        ap_const_lv32_0 when (icmp_ln27_fu_784_p2(0) = '1') else 
        w_sum_4_fu_106;
    select_ln31_4_fu_535_p3 <= 
        f_fu_525_p2 when (and_ln39_12_reg_957(0) = '1') else 
        select_ln39_10_reg_945;
    select_ln31_5_fu_770_p3 <= 
        conv_1_bias_q0 when (and_ln39_12_reg_957(0) = '1') else 
        select_ln39_12_fu_764_p3;
    select_ln31_6_fu_560_p3 <= 
        select_ln39_8_fu_452_p3 when (and_ln39_12_reg_957(0) = '1') else 
        select_ln39_13_fu_508_p3;
    select_ln31_fu_420_p3 <= 
        ap_const_lv2_0 when (or_ln31_64_fu_414_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_252_p4;
    select_ln39_10_fu_382_p3 <= 
        ap_const_lv6_0 when (or_ln39_fu_376_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_230_p4;
    select_ln39_11_fu_487_p3 <= 
        c_fu_482_p2 when (and_ln39_9_reg_932(0) = '1') else 
        select_ln39_reg_915;
    select_ln39_12_fu_764_p3 <= 
        ap_const_lv32_BD3036A8 when (or_ln39_reg_938(0) = '1') else 
        conv_1_bias_load_reg_992;
    select_ln39_13_fu_508_p3 <= 
        select_ln39_8_fu_452_p3 when (and_ln39_9_reg_932(0) = '1') else 
        select_ln39_9_fu_462_p3;
    select_ln39_8_fu_452_p3 <= 
        r_reg_902 when (icmp_ln12_reg_908(0) = '1') else 
        r_0_reg_181;
    select_ln39_9_fu_462_p3 <= 
        r_reg_902 when (icmp_ln12_reg_908(0) = '1') else 
        add_ln31_reg_893;
    select_ln39_fu_332_p3 <= 
        ap_const_lv5_0 when (icmp_ln12_fu_326_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_208_p4;
    sub_ln31_1_fu_678_p2 <= std_logic_vector(unsigned(zext_ln31_46_fu_662_p1) - unsigned(zext_ln31_47_fu_674_p1));
    sub_ln31_fu_634_p2 <= std_logic_vector(unsigned(zext_ln31_45_fu_630_p1) - unsigned(zext_ln31_44_fu_618_p1));
    tmp_33_fu_622_p3 <= (select_ln19_15_fu_611_p3 & ap_const_lv2_0);
    tmp_34_fu_654_p3 <= (select_ln19_16_fu_646_p3 & ap_const_lv5_0);
    tmp_35_fu_666_p3 <= (select_ln19_16_fu_646_p3 & ap_const_lv2_0);
    tmp_36_fu_825_p4 <= bitcast_ln38_fu_821_p1(30 downto 23);
    tmp_45_cast_fu_712_p3 <= (add_ln31_7_fu_706_p2 & ap_const_lv5_0);
    tmp_fu_497_p3 <= (grp_fu_872_p3 & ap_const_lv5_0);
    trunc_ln38_fu_835_p1 <= bitcast_ln38_fu_821_p1(23 - 1 downto 0);
    wc_fu_798_p2 <= std_logic_vector(unsigned(select_ln19_reg_1027) + unsigned(ap_const_lv2_1));
    wr_fu_584_p2 <= std_logic_vector(unsigned(select_ln31_reg_971) + unsigned(ap_const_lv2_1));
    xor_ln31_fu_567_p2 <= (ap_const_lv1_1 xor and_ln39_12_reg_957);
    xor_ln39_2_fu_390_p2 <= (icmp_ln15_fu_364_p2 xor ap_const_lv1_1);
    xor_ln39_fu_340_p2 <= (icmp_ln12_fu_326_p2 xor ap_const_lv1_1);
    zext_ln19_4_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_fu_584_p2),5));
    zext_ln19_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wr_0_phi_fu_252_p4),5));
    zext_ln22_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_fu_599_p3),5));
    zext_ln31_10_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_fu_525_p2),64));
    zext_ln31_42_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_4_fu_535_p3),10));
    zext_ln31_43_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_4_fu_535_p3),16));
    zext_ln31_44_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_15_fu_611_p3),5));
    zext_ln31_45_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_622_p3),5));
    zext_ln31_46_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_654_p3),11));
    zext_ln31_47_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_666_p3),11));
    zext_ln31_48_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_8_fu_720_p2),64));
    zext_ln31_49_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_2_fu_731_p2),11));
    zext_ln31_50_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_9_fu_741_p2),64));
    zext_ln31_7_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_fu_599_p3),5));
    zext_ln31_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_f_0_phi_fu_230_p4),64));
    zext_ln39_12_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_497_p3),16));
    zext_ln39_13_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_6_fu_549_p2),64));
end behav;
