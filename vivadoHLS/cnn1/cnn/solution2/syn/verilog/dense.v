// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0
);

parameter    ap_ST_fsm_state1 = 57'd1;
parameter    ap_ST_fsm_pp0_stage0 = 57'd2;
parameter    ap_ST_fsm_pp0_stage1 = 57'd4;
parameter    ap_ST_fsm_pp0_stage2 = 57'd8;
parameter    ap_ST_fsm_pp0_stage3 = 57'd16;
parameter    ap_ST_fsm_pp0_stage4 = 57'd32;
parameter    ap_ST_fsm_state12 = 57'd64;
parameter    ap_ST_fsm_state13 = 57'd128;
parameter    ap_ST_fsm_state14 = 57'd256;
parameter    ap_ST_fsm_state15 = 57'd512;
parameter    ap_ST_fsm_state16 = 57'd1024;
parameter    ap_ST_fsm_state17 = 57'd2048;
parameter    ap_ST_fsm_state18 = 57'd4096;
parameter    ap_ST_fsm_state19 = 57'd8192;
parameter    ap_ST_fsm_state20 = 57'd16384;
parameter    ap_ST_fsm_state21 = 57'd32768;
parameter    ap_ST_fsm_state22 = 57'd65536;
parameter    ap_ST_fsm_state23 = 57'd131072;
parameter    ap_ST_fsm_state24 = 57'd262144;
parameter    ap_ST_fsm_state25 = 57'd524288;
parameter    ap_ST_fsm_state26 = 57'd1048576;
parameter    ap_ST_fsm_state27 = 57'd2097152;
parameter    ap_ST_fsm_state28 = 57'd4194304;
parameter    ap_ST_fsm_state29 = 57'd8388608;
parameter    ap_ST_fsm_state30 = 57'd16777216;
parameter    ap_ST_fsm_state31 = 57'd33554432;
parameter    ap_ST_fsm_state32 = 57'd67108864;
parameter    ap_ST_fsm_state33 = 57'd134217728;
parameter    ap_ST_fsm_state34 = 57'd268435456;
parameter    ap_ST_fsm_state35 = 57'd536870912;
parameter    ap_ST_fsm_state36 = 57'd1073741824;
parameter    ap_ST_fsm_state37 = 57'd2147483648;
parameter    ap_ST_fsm_state38 = 57'd4294967296;
parameter    ap_ST_fsm_state39 = 57'd8589934592;
parameter    ap_ST_fsm_state40 = 57'd17179869184;
parameter    ap_ST_fsm_state41 = 57'd34359738368;
parameter    ap_ST_fsm_state42 = 57'd68719476736;
parameter    ap_ST_fsm_state43 = 57'd137438953472;
parameter    ap_ST_fsm_state44 = 57'd274877906944;
parameter    ap_ST_fsm_state45 = 57'd549755813888;
parameter    ap_ST_fsm_state46 = 57'd1099511627776;
parameter    ap_ST_fsm_state47 = 57'd2199023255552;
parameter    ap_ST_fsm_state48 = 57'd4398046511104;
parameter    ap_ST_fsm_state49 = 57'd8796093022208;
parameter    ap_ST_fsm_state50 = 57'd17592186044416;
parameter    ap_ST_fsm_state51 = 57'd35184372088832;
parameter    ap_ST_fsm_state52 = 57'd70368744177664;
parameter    ap_ST_fsm_state53 = 57'd140737488355328;
parameter    ap_ST_fsm_state54 = 57'd281474976710656;
parameter    ap_ST_fsm_state55 = 57'd562949953421312;
parameter    ap_ST_fsm_state56 = 57'd1125899906842624;
parameter    ap_ST_fsm_state57 = 57'd2251799813685248;
parameter    ap_ST_fsm_state58 = 57'd4503599627370496;
parameter    ap_ST_fsm_state59 = 57'd9007199254740992;
parameter    ap_ST_fsm_state60 = 57'd18014398509481984;
parameter    ap_ST_fsm_pp1_stage0 = 57'd36028797018963968;
parameter    ap_ST_fsm_state80 = 57'd72057594037927936;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;
output  [10:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg prediction_ce0;
reg prediction_we0;
reg flat_array_ce0;

(* fsm_encoding = "none" *) reg   [56:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] dense_weights_address0;
reg    dense_weights_ce0;
wire   [31:0] dense_weights_q0;
reg   [13:0] indvar_flatten_reg_228;
reg   [3:0] d_0_reg_239;
reg   [31:0] w_sum_1_reg_250;
reg   [10:0] f_0_reg_262;
reg   [3:0] j_0_i_reg_273;
wire   [31:0] grp_fu_284_p2;
reg   [31:0] reg_304;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [0:0] icmp_ln29_reg_463;
reg   [0:0] icmp_ln29_reg_463_pp0_iter1_reg;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state60;
wire   [31:0] dense_array_q0;
wire    ap_CS_fsm_state13;
wire    ap_block_state61_pp1_stage0_iter0;
wire    ap_block_state62_pp1_stage0_iter1;
wire    ap_block_state63_pp1_stage0_iter2;
wire    ap_block_state64_pp1_stage0_iter3;
wire    ap_block_state65_pp1_stage0_iter4;
wire    ap_block_state66_pp1_stage0_iter5;
wire    ap_block_state67_pp1_stage0_iter6;
wire    ap_block_state68_pp1_stage0_iter7;
wire    ap_block_state69_pp1_stage0_iter8;
wire    ap_block_state70_pp1_stage0_iter9;
wire    ap_block_state71_pp1_stage0_iter10;
wire    ap_block_state72_pp1_stage0_iter11;
wire    ap_block_state73_pp1_stage0_iter12;
wire    ap_block_state74_pp1_stage0_iter13;
wire    ap_block_state75_pp1_stage0_iter14;
wire    ap_block_state76_pp1_stage0_iter15;
wire    ap_block_state77_pp1_stage0_iter16;
wire    ap_block_state78_pp1_stage0_iter17;
wire    ap_block_state79_pp1_stage0_iter18;
wire    ap_block_pp1_stage0_11001;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln16_reg_574;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state49;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] reg_322;
wire    ap_CS_fsm_state20;
reg    ap_enable_reg_pp1_iter8;
reg   [0:0] icmp_ln16_reg_574_pp1_iter7_reg;
wire   [0:0] icmp_ln29_fu_329_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [13:0] add_ln29_fu_335_p2;
reg   [13:0] add_ln29_reg_467;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] select_ln39_fu_353_p3;
reg   [10:0] select_ln39_reg_472;
wire   [3:0] select_ln39_1_fu_361_p3;
reg   [3:0] select_ln39_1_reg_479;
reg   [3:0] select_ln39_1_reg_479_pp0_iter1_reg;
reg   [31:0] dense_weights_load_reg_495;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] flat_array_load_reg_500;
wire   [31:0] select_ln35_fu_424_p3;
reg   [31:0] select_ln35_reg_505;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_289_p2;
reg   [31:0] tmp_reg_510;
wire   [0:0] icmp_ln41_fu_432_p2;
reg   [0:0] icmp_ln41_reg_515;
wire   [10:0] f_fu_437_p2;
reg   [10:0] f_reg_519;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln16_fu_446_p2;
reg   [0:0] icmp_ln16_reg_574_pp1_iter1_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter2_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter3_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter4_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter5_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter6_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter8_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter9_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter10_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter11_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter12_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter13_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter14_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter15_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter16_reg;
reg   [0:0] icmp_ln16_reg_574_pp1_iter17_reg;
wire   [3:0] j_fu_452_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln18_fu_458_p1;
reg   [63:0] zext_ln18_reg_583;
reg   [63:0] zext_ln18_reg_583_pp1_iter1_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter2_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter3_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter4_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter5_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter6_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter7_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter8_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter9_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter10_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter11_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter12_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter13_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter14_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter15_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter16_reg;
reg   [63:0] zext_ln18_reg_583_pp1_iter17_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state61;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
reg   [13:0] ap_phi_mux_indvar_flatten_phi_fu_232_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_d_0_phi_fu_243_p4;
reg   [31:0] ap_phi_mux_w_sum_1_phi_fu_254_p4;
wire    ap_block_pp0_stage4;
reg   [10:0] ap_phi_mux_f_0_phi_fu_266_p4;
wire   [63:0] zext_ln39_8_fu_414_p1;
wire   [63:0] zext_ln39_3_fu_373_p1;
wire   [63:0] zext_ln39_fu_442_p1;
wire    ap_block_pp1_stage0;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] grp_fu_284_p0;
reg   [31:0] grp_fu_284_p1;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire   [0:0] icmp_ln33_fu_347_p2;
wire   [3:0] d_fu_341_p2;
wire   [13:0] tmp_s_fu_378_p3;
wire   [11:0] tmp_2_fu_390_p3;
wire   [14:0] zext_ln39_7_fu_398_p1;
wire   [14:0] zext_ln39_6_fu_386_p1;
wire   [14:0] add_ln39_fu_402_p2;
wire   [14:0] zext_ln34_fu_369_p1;
wire   [14:0] add_ln39_4_fu_408_p2;
wire   [0:0] icmp_ln35_fu_419_p2;
wire    ap_CS_fsm_state80;
reg   [56:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 57'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
end

dense_dense_weights #(
    .DataWidth( 32 ),
    .AddressRange( 16000 ),
    .AddressWidth( 14 ))
dense_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_weights_address0),
    .ce0(dense_weights_ce0),
    .q0(dense_weights_q0)
);

dense_dense_array #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(reg_304),
    .q0(dense_array_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_284_p0),
    .din1(grp_fu_284_p1),
    .ce(1'b1),
    .dout(grp_fu_284_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_weights_load_reg_495),
    .din1(flat_array_load_reg_500),
    .ce(1'b1),
    .dout(grp_fu_289_p2)
);

cnn_fdiv_32ns_32nPgM #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fdiv_32ns_32nPgM_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_322),
    .din1(reg_304),
    .ce(1'b1),
    .dout(grp_fu_293_p2)
);

cnn_fexp_32ns_32nQgW #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fexp_32ns_32nQgW_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_q0),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state61) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state60)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state61)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state61);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end else if ((1'b1 == ap_CS_fsm_state60)) begin
            ap_enable_reg_pp1_iter18 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln29_reg_463 == 1'd0))) begin
        d_0_reg_239 <= select_ln39_1_reg_479;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_0_reg_239 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln29_reg_463 == 1'd0))) begin
        f_0_reg_262 <= f_reg_519;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_262 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln29_reg_463 == 1'd0))) begin
        indvar_flatten_reg_228 <= add_ln29_reg_467;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_228 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        j_0_i_reg_273 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln16_fu_446_p2 == 1'd0))) begin
        j_0_i_reg_273 <= j_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln29_reg_463_pp0_iter1_reg == 1'd0))) begin
        w_sum_1_reg_250 <= reg_304;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_sum_1_reg_250 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln29_reg_467 <= add_ln29_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln29_reg_463 == 1'd0))) begin
        dense_weights_load_reg_495 <= dense_weights_q0;
        flat_array_load_reg_500 <= flat_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_reg_463 == 1'd0))) begin
        f_reg_519 <= f_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln16_reg_574 <= icmp_ln16_fu_446_p2;
        icmp_ln16_reg_574_pp1_iter1_reg <= icmp_ln16_reg_574;
        zext_ln18_reg_583_pp1_iter1_reg[3 : 0] <= zext_ln18_reg_583[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln16_reg_574_pp1_iter10_reg <= icmp_ln16_reg_574_pp1_iter9_reg;
        icmp_ln16_reg_574_pp1_iter11_reg <= icmp_ln16_reg_574_pp1_iter10_reg;
        icmp_ln16_reg_574_pp1_iter12_reg <= icmp_ln16_reg_574_pp1_iter11_reg;
        icmp_ln16_reg_574_pp1_iter13_reg <= icmp_ln16_reg_574_pp1_iter12_reg;
        icmp_ln16_reg_574_pp1_iter14_reg <= icmp_ln16_reg_574_pp1_iter13_reg;
        icmp_ln16_reg_574_pp1_iter15_reg <= icmp_ln16_reg_574_pp1_iter14_reg;
        icmp_ln16_reg_574_pp1_iter16_reg <= icmp_ln16_reg_574_pp1_iter15_reg;
        icmp_ln16_reg_574_pp1_iter17_reg <= icmp_ln16_reg_574_pp1_iter16_reg;
        icmp_ln16_reg_574_pp1_iter2_reg <= icmp_ln16_reg_574_pp1_iter1_reg;
        icmp_ln16_reg_574_pp1_iter3_reg <= icmp_ln16_reg_574_pp1_iter2_reg;
        icmp_ln16_reg_574_pp1_iter4_reg <= icmp_ln16_reg_574_pp1_iter3_reg;
        icmp_ln16_reg_574_pp1_iter5_reg <= icmp_ln16_reg_574_pp1_iter4_reg;
        icmp_ln16_reg_574_pp1_iter6_reg <= icmp_ln16_reg_574_pp1_iter5_reg;
        icmp_ln16_reg_574_pp1_iter7_reg <= icmp_ln16_reg_574_pp1_iter6_reg;
        icmp_ln16_reg_574_pp1_iter8_reg <= icmp_ln16_reg_574_pp1_iter7_reg;
        icmp_ln16_reg_574_pp1_iter9_reg <= icmp_ln16_reg_574_pp1_iter8_reg;
        zext_ln18_reg_583_pp1_iter10_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter9_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter11_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter10_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter12_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter11_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter13_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter12_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter14_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter13_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter15_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter14_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter16_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter15_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter17_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter16_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter2_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter1_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter3_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter2_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter4_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter3_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter5_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter4_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter6_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter5_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter7_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter6_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter8_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter7_reg[3 : 0];
        zext_ln18_reg_583_pp1_iter9_reg[3 : 0] <= zext_ln18_reg_583_pp1_iter8_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln29_reg_463 <= icmp_ln29_fu_329_p2;
        icmp_ln29_reg_463_pp0_iter1_reg <= icmp_ln29_reg_463;
        select_ln39_1_reg_479_pp0_iter1_reg <= select_ln39_1_reg_479;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln29_reg_463 == 1'd0))) begin
        icmp_ln41_reg_515 <= icmp_ln41_fu_432_p2;
        select_ln35_reg_505 <= select_ln35_fu_424_p3;
        tmp_reg_510 <= grp_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln29_reg_463_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_304 <= grp_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter8 == 1'b1) & (icmp_ln16_reg_574_pp1_iter7_reg == 1'd0)))) begin
        reg_322 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_fu_329_p2 == 1'd0))) begin
        select_ln39_1_reg_479 <= select_ln39_1_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_fu_329_p2 == 1'd0))) begin
        select_ln39_reg_472 <= select_ln39_fu_353_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln16_fu_446_p2 == 1'd0))) begin
        zext_ln18_reg_583[3 : 0] <= zext_ln18_fu_458_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln29_fu_329_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln16_fu_446_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state61 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state61 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln29_reg_463 == 1'd0))) begin
        ap_phi_mux_d_0_phi_fu_243_p4 = select_ln39_1_reg_479;
    end else begin
        ap_phi_mux_d_0_phi_fu_243_p4 = d_0_reg_239;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln29_reg_463 == 1'd0))) begin
        ap_phi_mux_f_0_phi_fu_266_p4 = f_reg_519;
    end else begin
        ap_phi_mux_f_0_phi_fu_266_p4 = f_0_reg_262;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln29_reg_463 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_232_p4 = add_ln29_reg_467;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_232_p4 = indvar_flatten_reg_228;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln29_reg_463_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_w_sum_1_phi_fu_254_p4 = reg_304;
    end else begin
        ap_phi_mux_w_sum_1_phi_fu_254_p4 = w_sum_1_reg_250;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dense_array_address0 = zext_ln18_fu_458_p1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        dense_array_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        dense_array_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        dense_array_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        dense_array_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        dense_array_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        dense_array_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        dense_array_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        dense_array_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        dense_array_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dense_array_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dense_array_address0 = zext_ln39_fu_442_p1;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_515 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_weights_ce0 = 1'b1;
    end else begin
        dense_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_284_p0 = reg_304;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_284_p0 = reg_322;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_284_p0 = select_ln35_reg_505;
    end else begin
        grp_fu_284_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_284_p1 = reg_322;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_284_p1 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_284_p1 = tmp_reg_510;
    end else begin
        grp_fu_284_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter18 == 1'b1))) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter18 == 1'b1) & (icmp_ln16_reg_574_pp1_iter17_reg == 1'd0))) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln29_fu_329_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln29_fu_329_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln16_fu_446_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter17 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter18 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter17 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter18 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln16_fu_446_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_335_p2 = (ap_phi_mux_indvar_flatten_phi_fu_232_p4 + 14'd1);

assign add_ln39_4_fu_408_p2 = (add_ln39_fu_402_p2 + zext_ln34_fu_369_p1);

assign add_ln39_fu_402_p2 = (zext_ln39_7_fu_398_p1 + zext_ln39_6_fu_386_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd56];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign d_fu_341_p2 = (ap_phi_mux_d_0_phi_fu_243_p4 + 4'd1);

assign dense_weights_address0 = zext_ln39_8_fu_414_p1;

assign f_fu_437_p2 = (select_ln39_reg_472 + 11'd1);

assign flat_array_address0 = zext_ln39_3_fu_373_p1;

assign icmp_ln16_fu_446_p2 = ((j_0_i_reg_273 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_329_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_232_p4 == 14'd16000) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_347_p2 = ((ap_phi_mux_f_0_phi_fu_266_p4 == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_419_p2 = ((select_ln39_reg_472 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_432_p2 = ((select_ln39_reg_472 == 11'd1599) ? 1'b1 : 1'b0);

assign j_fu_452_p2 = (j_0_i_reg_273 + 4'd1);

assign prediction_address0 = zext_ln18_reg_583_pp1_iter17_reg;

assign prediction_d0 = grp_fu_293_p2;

assign select_ln35_fu_424_p3 = ((icmp_ln35_fu_419_p2[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_w_sum_1_phi_fu_254_p4);

assign select_ln39_1_fu_361_p3 = ((icmp_ln33_fu_347_p2[0:0] === 1'b1) ? d_fu_341_p2 : ap_phi_mux_d_0_phi_fu_243_p4);

assign select_ln39_fu_353_p3 = ((icmp_ln33_fu_347_p2[0:0] === 1'b1) ? 11'd0 : ap_phi_mux_f_0_phi_fu_266_p4);

assign tmp_2_fu_390_p3 = {{select_ln39_fu_353_p3}, {1'd0}};

assign tmp_s_fu_378_p3 = {{select_ln39_fu_353_p3}, {3'd0}};

assign zext_ln18_fu_458_p1 = j_0_i_reg_273;

assign zext_ln34_fu_369_p1 = select_ln39_1_fu_361_p3;

assign zext_ln39_3_fu_373_p1 = select_ln39_fu_353_p3;

assign zext_ln39_6_fu_386_p1 = tmp_s_fu_378_p3;

assign zext_ln39_7_fu_398_p1 = tmp_2_fu_390_p3;

assign zext_ln39_8_fu_414_p1 = add_ln39_4_fu_408_p2;

assign zext_ln39_fu_442_p1 = select_ln39_1_reg_479_pp0_iter1_reg;

always @ (posedge ap_clk) begin
    zext_ln18_reg_583[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter11_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter12_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter13_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter14_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter15_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter16_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_583_pp1_iter17_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense
