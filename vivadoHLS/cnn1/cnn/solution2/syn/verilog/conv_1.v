// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_pp0_stage0 = 12'd2;
parameter    ap_ST_fsm_pp0_stage1 = 12'd4;
parameter    ap_ST_fsm_pp0_stage2 = 12'd8;
parameter    ap_ST_fsm_pp0_stage3 = 12'd16;
parameter    ap_ST_fsm_pp0_stage4 = 12'd32;
parameter    ap_ST_fsm_pp0_stage5 = 12'd64;
parameter    ap_ST_fsm_pp0_stage6 = 12'd128;
parameter    ap_ST_fsm_pp0_stage7 = 12'd256;
parameter    ap_ST_fsm_pp0_stage8 = 12'd512;
parameter    ap_ST_fsm_pp0_stage9 = 12'd1024;
parameter    ap_ST_fsm_state18 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
wire   [8:0] conv_1_weights_0_address0;
reg    conv_1_weights_0_ce0;
wire   [31:0] conv_1_weights_0_q0;
reg   [17:0] indvar_flatten114_reg_169;
reg   [4:0] r_0_reg_181;
reg   [13:0] indvar_flatten64_reg_193;
reg   [4:0] c_0_reg_204;
reg   [9:0] indvar_flatten25_reg_215;
reg   [5:0] f_0_reg_226;
reg   [3:0] indvar_flatten_reg_237;
reg   [1:0] wr_0_reg_248;
reg   [1:0] wc_0_reg_259;
wire   [31:0] grp_fu_270_p2;
reg   [31:0] reg_283;
wire    ap_CS_fsm_pp0_stage9;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
reg   [0:0] icmp_ln9_reg_898;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state15_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [0:0] and_ln33_reg_1049;
reg   [0:0] and_ln33_reg_1049_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state12_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln31_fu_308_p2;
reg   [4:0] add_ln31_reg_893;
wire   [0:0] icmp_ln9_fu_314_p2;
reg   [0:0] icmp_ln9_reg_898_pp0_iter1_reg;
wire   [4:0] r_fu_320_p2;
reg   [4:0] r_reg_902;
wire   [0:0] icmp_ln12_fu_326_p2;
reg   [0:0] icmp_ln12_reg_908;
wire   [4:0] select_ln39_fu_332_p3;
reg   [4:0] select_ln39_reg_915;
wire   [0:0] xor_ln39_fu_340_p2;
reg   [0:0] xor_ln39_reg_921;
wire   [0:0] icmp_ln3331_fu_346_p2;
reg   [0:0] icmp_ln3331_reg_927;
wire   [0:0] and_ln39_9_fu_370_p2;
reg   [0:0] and_ln39_9_reg_932;
wire   [0:0] or_ln39_fu_376_p2;
reg   [0:0] or_ln39_reg_938;
wire   [5:0] select_ln39_10_fu_382_p3;
reg   [5:0] select_ln39_10_reg_945;
wire   [0:0] or_ln39_2_fu_396_p2;
reg   [0:0] or_ln39_2_reg_951;
wire   [0:0] and_ln39_12_fu_402_p2;
reg   [0:0] and_ln39_12_reg_957;
wire   [0:0] or_ln31_64_fu_414_p2;
reg   [0:0] or_ln31_64_reg_966;
wire   [1:0] select_ln31_fu_420_p3;
reg   [1:0] select_ln31_reg_971;
wire   [3:0] add_ln19_fu_428_p2;
reg   [3:0] add_ln19_reg_977;
wire   [9:0] add_ln15_5_fu_434_p2;
reg   [9:0] add_ln15_5_reg_982;
wire   [13:0] add_ln12_4_fu_440_p2;
reg   [13:0] add_ln12_4_reg_987;
reg   [31:0] conv_1_bias_load_reg_992;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state13_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [17:0] add_ln9_fu_446_p2;
reg   [17:0] add_ln9_reg_997;
wire   [4:0] select_ln39_8_fu_452_p3;
reg   [4:0] select_ln39_8_reg_1002;
wire   [4:0] select_ln39_11_fu_487_p3;
reg   [4:0] select_ln39_11_reg_1007;
wire   [5:0] select_ln31_4_fu_535_p3;
reg   [5:0] select_ln31_4_reg_1012;
reg   [14:0] conv_out_addr_reg_1017;
reg   [14:0] conv_out_addr_reg_1017_pp0_iter1_reg;
wire   [1:0] select_ln19_fu_599_p3;
reg   [1:0] select_ln19_reg_1027;
wire   [1:0] select_ln19_15_fu_611_p3;
reg   [1:0] select_ln19_15_reg_1033;
wire   [0:0] and_ln33_fu_758_p2;
wire   [31:0] select_ln31_5_fu_770_p3;
reg   [31:0] select_ln31_5_reg_1053;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state14_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] conv_1_weights_0_loa_reg_1058;
reg   [31:0] input_load_reg_1063;
wire   [31:0] select_ln27_fu_790_p3;
reg   [31:0] select_ln27_reg_1068;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_state17_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
wire   [31:0] grp_fu_274_p2;
reg   [31:0] tmp2_reg_1073;
wire   [1:0] wc_fu_798_p2;
reg   [1:0] wc_reg_1078;
wire   [3:0] select_ln19_18_fu_803_p3;
reg   [3:0] select_ln19_18_reg_1083;
wire   [9:0] select_ln15_fu_809_p3;
reg   [9:0] select_ln15_reg_1088;
wire   [13:0] select_ln12_fu_815_p3;
reg   [13:0] select_ln12_reg_1093;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage5_subdone;
reg   [17:0] ap_phi_mux_indvar_flatten114_phi_fu_173_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_r_0_phi_fu_185_p4;
reg   [13:0] ap_phi_mux_indvar_flatten64_phi_fu_197_p4;
reg   [4:0] ap_phi_mux_c_0_phi_fu_208_p4;
reg   [9:0] ap_phi_mux_indvar_flatten25_phi_fu_219_p4;
reg   [5:0] ap_phi_mux_f_0_phi_fu_230_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_241_p4;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_252_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_263_p4;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln31_fu_299_p1;
wire   [63:0] zext_ln39_13_fu_555_p1;
wire   [63:0] zext_ln31_10_fu_530_p1;
wire   [63:0] zext_ln31_48_fu_726_p1;
wire   [63:0] zext_ln31_50_fu_747_p1;
reg   [31:0] w_sum_4_fu_106;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state16_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5;
reg   [31:0] grp_fu_270_p0;
reg   [31:0] grp_fu_270_p1;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire   [4:0] zext_ln19_fu_304_p1;
wire   [0:0] icmp_ln19_fu_352_p2;
wire   [0:0] icmp_ln15_fu_364_p2;
wire   [0:0] xor_ln39_2_fu_390_p2;
wire   [0:0] and_ln39_8_fu_358_p2;
wire   [0:0] or_ln31_fu_408_p2;
wire   [0:0] icmp_ln22_fu_471_p2;
wire   [4:0] c_fu_482_p2;
wire   [9:0] grp_fu_872_p3;
wire   [14:0] tmp_fu_497_p3;
wire   [4:0] select_ln39_9_fu_462_p3;
wire   [0:0] and_ln39_fu_467_p2;
wire   [0:0] and_ln39_7_fu_477_p2;
wire   [5:0] f_fu_525_p2;
wire   [15:0] zext_ln31_43_fu_545_p1;
wire   [15:0] zext_ln39_12_fu_504_p1;
wire   [15:0] add_ln39_6_fu_549_p2;
wire   [4:0] select_ln39_13_fu_508_p3;
wire   [0:0] and_ln39_10_fu_515_p2;
wire   [0:0] xor_ln31_fu_567_p2;
wire   [0:0] and_ln39_11_fu_520_p2;
wire   [0:0] and_ln31_2_fu_578_p2;
wire   [0:0] or_ln19_fu_589_p2;
wire   [0:0] or_ln19_4_fu_594_p2;
wire   [1:0] wr_fu_584_p2;
wire   [3:0] tmp_33_fu_622_p3;
wire   [4:0] zext_ln31_45_fu_630_p1;
wire   [4:0] zext_ln31_44_fu_618_p1;
wire   [4:0] zext_ln19_4_fu_607_p1;
wire   [4:0] add_ln31_6_fu_640_p2;
wire   [4:0] select_ln31_6_fu_560_p3;
wire   [4:0] select_ln19_16_fu_646_p3;
wire   [9:0] tmp_34_fu_654_p3;
wire   [6:0] tmp_35_fu_666_p3;
wire   [10:0] zext_ln31_46_fu_662_p1;
wire   [10:0] zext_ln31_47_fu_674_p1;
wire   [0:0] icmp_ln33_fu_684_p2;
wire   [0:0] and_ln31_fu_572_p2;
wire   [4:0] zext_ln31_7_fu_702_p1;
wire   [4:0] sub_ln31_fu_634_p2;
wire   [4:0] add_ln31_7_fu_706_p2;
wire   [9:0] zext_ln31_42_fu_541_p1;
wire   [9:0] tmp_45_cast_fu_712_p3;
wire   [9:0] add_ln31_8_fu_720_p2;
wire   [4:0] zext_ln22_fu_698_p1;
wire   [4:0] add_ln31_2_fu_731_p2;
wire   [10:0] zext_ln31_49_fu_737_p1;
wire   [10:0] sub_ln31_1_fu_678_p2;
wire   [10:0] add_ln31_9_fu_741_p2;
wire   [0:0] select_ln19_17_fu_690_p3;
wire   [0:0] icmp_ln33_2_fu_752_p2;
wire    ap_block_pp0_stage2;
wire   [31:0] select_ln39_12_fu_764_p3;
wire   [1:0] or_ln27_fu_780_p2;
wire   [0:0] icmp_ln27_fu_784_p2;
wire    ap_block_pp0_stage9;
wire   [31:0] bitcast_ln38_fu_821_p1;
wire   [7:0] tmp_36_fu_825_p4;
wire   [22:0] trunc_ln38_fu_835_p1;
wire   [0:0] icmp_ln38_2_fu_845_p2;
wire   [0:0] icmp_ln38_fu_839_p2;
wire   [0:0] or_ln38_fu_851_p2;
wire   [0:0] grp_fu_278_p2;
wire   [0:0] and_ln38_fu_857_p2;
wire   [4:0] grp_fu_872_p0;
wire   [5:0] grp_fu_872_p1;
wire   [4:0] grp_fu_872_p2;
wire    ap_block_pp0_stage4_00001;
wire    ap_CS_fsm_state18;
reg   [11:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_872_p00;
wire   [9:0] grp_fu_872_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_address0),
    .ce0(conv_1_weights_0_ce0),
    .q0(conv_1_weights_0_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_270_p0),
    .din1(grp_fu_270_p1),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_weights_0_loa_reg_1058),
    .din1(input_load_reg_1063),
    .ce(1'b1),
    .dout(grp_fu_274_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_283),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_278_p2)
);

cnn_mac_muladd_5nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
cnn_mac_muladd_5nfYi_U4(
    .din0(grp_fu_872_p0),
    .din1(grp_fu_872_p1),
    .din2(grp_fu_872_p2),
    .dout(grp_fu_872_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_0_reg_204 <= select_ln39_11_reg_1007;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_204 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f_0_reg_226 <= select_ln31_4_reg_1012;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_226 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten114_reg_169 <= add_ln9_reg_997;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten114_reg_169 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten25_reg_215 <= select_ln15_reg_1088;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten25_reg_215 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten64_reg_193 <= select_ln12_reg_1093;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten64_reg_193 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_237 <= select_ln19_18_reg_1083;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_237 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_0_reg_181 <= select_ln39_8_reg_1002;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_181 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd0 == and_ln33_reg_1049) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln33_reg_1049_pp0_iter1_reg)))) begin
        w_sum_4_fu_106 <= reg_283;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_sum_4_fu_106 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        wc_0_reg_259 <= wc_reg_1078;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        wc_0_reg_259 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_0_reg_248 <= select_ln19_15_reg_1033;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        wr_0_reg_248 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln12_4_reg_987 <= add_ln12_4_fu_440_p2;
        add_ln15_5_reg_982 <= add_ln15_5_fu_434_p2;
        add_ln19_reg_977 <= add_ln19_fu_428_p2;
        and_ln39_12_reg_957 <= and_ln39_12_fu_402_p2;
        and_ln39_9_reg_932 <= and_ln39_9_fu_370_p2;
        icmp_ln12_reg_908 <= icmp_ln12_fu_326_p2;
        icmp_ln3331_reg_927 <= icmp_ln3331_fu_346_p2;
        or_ln31_64_reg_966 <= or_ln31_64_fu_414_p2;
        or_ln39_2_reg_951 <= or_ln39_2_fu_396_p2;
        or_ln39_reg_938 <= or_ln39_fu_376_p2;
        r_reg_902 <= r_fu_320_p2;
        select_ln31_reg_971 <= select_ln31_fu_420_p3;
        select_ln39_10_reg_945 <= select_ln39_10_fu_382_p3;
        select_ln39_reg_915 <= select_ln39_fu_332_p3;
        xor_ln39_reg_921 <= xor_ln39_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln31_reg_893 <= add_ln31_fu_308_p2;
        icmp_ln9_reg_898 <= icmp_ln9_fu_314_p2;
        icmp_ln9_reg_898_pp0_iter1_reg <= icmp_ln9_reg_898;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln9_reg_997 <= add_ln9_fu_446_p2;
        conv_1_bias_load_reg_992 <= conv_1_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        and_ln33_reg_1049 <= and_ln33_fu_758_p2;
        conv_out_addr_reg_1017 <= zext_ln39_13_fu_555_p1;
        select_ln19_reg_1027 <= select_ln19_fu_599_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        and_ln33_reg_1049_pp0_iter1_reg <= and_ln33_reg_1049;
        conv_out_addr_reg_1017_pp0_iter1_reg <= conv_out_addr_reg_1017;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        conv_1_weights_0_loa_reg_1058 <= conv_1_weights_0_q0;
        input_load_reg_1063 <= input_r_q0;
        select_ln31_5_reg_1053 <= select_ln31_5_fu_770_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln33_reg_1049_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_283 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        select_ln12_reg_1093 <= select_ln12_fu_815_p3;
        select_ln15_reg_1088 <= select_ln15_fu_809_p3;
        select_ln19_18_reg_1083 <= select_ln19_18_fu_803_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln19_15_reg_1033 <= select_ln19_15_fu_611_p3;
        select_ln31_4_reg_1012 <= select_ln31_4_fu_535_p3;
        select_ln39_11_reg_1007 <= select_ln39_11_fu_487_p3;
        select_ln39_8_reg_1002 <= select_ln39_8_fu_452_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        select_ln27_reg_1068 <= select_ln27_fu_790_p3;
        tmp2_reg_1073 <= grp_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        wc_reg_1078 <= wc_fu_798_p2;
    end
end

always @ (*) begin
    if ((icmp_ln9_reg_898 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_c_0_phi_fu_208_p4 = select_ln39_11_reg_1007;
    end else begin
        ap_phi_mux_c_0_phi_fu_208_p4 = c_0_reg_204;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_f_0_phi_fu_230_p4 = select_ln31_4_reg_1012;
    end else begin
        ap_phi_mux_f_0_phi_fu_230_p4 = f_0_reg_226;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten114_phi_fu_173_p4 = add_ln9_reg_997;
    end else begin
        ap_phi_mux_indvar_flatten114_phi_fu_173_p4 = indvar_flatten114_reg_169;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten25_phi_fu_219_p4 = select_ln15_reg_1088;
    end else begin
        ap_phi_mux_indvar_flatten25_phi_fu_219_p4 = indvar_flatten25_reg_215;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten64_phi_fu_197_p4 = select_ln12_reg_1093;
    end else begin
        ap_phi_mux_indvar_flatten64_phi_fu_197_p4 = indvar_flatten64_reg_193;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_241_p4 = select_ln19_18_reg_1083;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_241_p4 = indvar_flatten_reg_237;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_r_0_phi_fu_185_p4 = select_ln39_8_reg_1002;
    end else begin
        ap_phi_mux_r_0_phi_fu_185_p4 = r_0_reg_181;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_898_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_wc_0_phi_fu_263_p4 = wc_reg_1078;
    end else begin
        ap_phi_mux_wc_0_phi_fu_263_p4 = wc_0_reg_259;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_898 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_wr_0_phi_fu_252_p4 = select_ln19_15_reg_1033;
    end else begin
        ap_phi_mux_wr_0_phi_fu_252_p4 = wr_0_reg_248;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_1_bias_address0 = zext_ln31_10_fu_530_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_1_bias_address0 = zext_ln31_fu_299_p1;
        end else begin
            conv_1_bias_address0 = 'bx;
        end
    end else begin
        conv_1_bias_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_1_weights_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln33_reg_1049_pp0_iter1_reg))) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_270_p0 = reg_283;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_270_p0 = select_ln27_reg_1068;
    end else begin
        grp_fu_270_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_270_p1 = select_ln31_5_reg_1053;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_270_p1 = tmp2_reg_1073;
    end else begin
        grp_fu_270_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((icmp_ln9_reg_898 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((icmp_ln9_reg_898 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_4_fu_440_p2 = (ap_phi_mux_indvar_flatten64_phi_fu_197_p4 + 14'd1);

assign add_ln15_5_fu_434_p2 = (ap_phi_mux_indvar_flatten25_phi_fu_219_p4 + 10'd1);

assign add_ln19_fu_428_p2 = (ap_phi_mux_indvar_flatten_phi_fu_241_p4 + 4'd1);

assign add_ln31_2_fu_731_p2 = (select_ln39_11_fu_487_p3 + zext_ln22_fu_698_p1);

assign add_ln31_6_fu_640_p2 = (select_ln39_8_fu_452_p3 + zext_ln19_4_fu_607_p1);

assign add_ln31_7_fu_706_p2 = (zext_ln31_7_fu_702_p1 + sub_ln31_fu_634_p2);

assign add_ln31_8_fu_720_p2 = (zext_ln31_42_fu_541_p1 + tmp_45_cast_fu_712_p3);

assign add_ln31_9_fu_741_p2 = (zext_ln31_49_fu_737_p1 + sub_ln31_1_fu_678_p2);

assign add_ln31_fu_308_p2 = (zext_ln19_fu_304_p1 + ap_phi_mux_r_0_phi_fu_185_p4);

assign add_ln39_6_fu_549_p2 = (zext_ln31_43_fu_545_p1 + zext_ln39_12_fu_504_p1);

assign add_ln9_fu_446_p2 = (indvar_flatten114_reg_169 + 18'd1);

assign and_ln31_2_fu_578_p2 = (xor_ln31_fu_567_p2 & and_ln39_11_fu_520_p2);

assign and_ln31_fu_572_p2 = (xor_ln31_fu_567_p2 & and_ln39_10_fu_515_p2);

assign and_ln33_fu_758_p2 = (select_ln19_17_fu_690_p3 & icmp_ln33_2_fu_752_p2);

assign and_ln38_fu_857_p2 = (or_ln38_fu_851_p2 & grp_fu_278_p2);

assign and_ln39_10_fu_515_p2 = (or_ln39_2_reg_951 & and_ln39_fu_467_p2);

assign and_ln39_11_fu_520_p2 = (or_ln39_2_reg_951 & and_ln39_7_fu_477_p2);

assign and_ln39_12_fu_402_p2 = (or_ln39_2_fu_396_p2 & and_ln39_8_fu_358_p2);

assign and_ln39_7_fu_477_p2 = (xor_ln39_reg_921 & icmp_ln22_fu_471_p2);

assign and_ln39_8_fu_358_p2 = (xor_ln39_fu_340_p2 & icmp_ln19_fu_352_p2);

assign and_ln39_9_fu_370_p2 = (xor_ln39_fu_340_p2 & icmp_ln15_fu_364_p2);

assign and_ln39_fu_467_p2 = (xor_ln39_reg_921 & icmp_ln3331_reg_927);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd11];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln38_fu_821_p1 = reg_283;

assign c_fu_482_p2 = (select_ln39_reg_915 + 5'd1);

assign conv_1_weights_0_address0 = zext_ln31_48_fu_726_p1;

assign conv_out_address0 = conv_out_addr_reg_1017_pp0_iter1_reg;

assign conv_out_d0 = ((and_ln38_fu_857_p2[0:0] === 1'b1) ? reg_283 : 32'd0);

assign f_fu_525_p2 = (select_ln39_10_reg_945 + 6'd1);

assign grp_fu_872_p0 = grp_fu_872_p00;

assign grp_fu_872_p00 = select_ln39_8_fu_452_p3;

assign grp_fu_872_p1 = 10'd26;

assign grp_fu_872_p2 = grp_fu_872_p20;

assign grp_fu_872_p20 = select_ln39_11_fu_487_p3;

assign icmp_ln12_fu_326_p2 = ((ap_phi_mux_indvar_flatten64_phi_fu_197_p4 == 14'd7488) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_364_p2 = ((ap_phi_mux_indvar_flatten25_phi_fu_219_p4 == 10'd288) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_352_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_241_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_471_p2 = ((ap_phi_mux_wc_0_phi_fu_263_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_784_p2 = ((or_ln27_fu_780_p2 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln3331_fu_346_p2 = ((ap_phi_mux_wr_0_phi_fu_252_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_2_fu_752_p2 = ((select_ln19_fu_599_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_684_p2 = ((wr_fu_584_p2 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln38_2_fu_845_p2 = ((trunc_ln38_fu_835_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_839_p2 = ((tmp_36_fu_825_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_314_p2 = ((ap_phi_mux_indvar_flatten114_phi_fu_173_p4 == 18'd194688) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln31_50_fu_747_p1;

assign or_ln19_4_fu_594_p2 = (or_ln39_reg_938 | or_ln19_fu_589_p2);

assign or_ln19_fu_589_p2 = (and_ln39_12_reg_957 | and_ln31_2_fu_578_p2);

assign or_ln27_fu_780_p2 = (select_ln19_reg_1027 | select_ln19_15_reg_1033);

assign or_ln31_64_fu_414_p2 = (or_ln31_fu_408_p2 | icmp_ln12_fu_326_p2);

assign or_ln31_fu_408_p2 = (and_ln39_9_fu_370_p2 | and_ln39_12_fu_402_p2);

assign or_ln38_fu_851_p2 = (icmp_ln38_fu_839_p2 | icmp_ln38_2_fu_845_p2);

assign or_ln39_2_fu_396_p2 = (xor_ln39_2_fu_390_p2 | icmp_ln12_fu_326_p2);

assign or_ln39_fu_376_p2 = (icmp_ln12_fu_326_p2 | and_ln39_9_fu_370_p2);

assign r_fu_320_p2 = (ap_phi_mux_r_0_phi_fu_185_p4 + 5'd1);

assign select_ln12_fu_815_p3 = ((icmp_ln12_reg_908[0:0] === 1'b1) ? 14'd1 : add_ln12_4_reg_987);

assign select_ln15_fu_809_p3 = ((or_ln39_reg_938[0:0] === 1'b1) ? 10'd1 : add_ln15_5_reg_982);

assign select_ln19_15_fu_611_p3 = ((and_ln31_2_fu_578_p2[0:0] === 1'b1) ? wr_fu_584_p2 : select_ln31_reg_971);

assign select_ln19_16_fu_646_p3 = ((and_ln31_2_fu_578_p2[0:0] === 1'b1) ? add_ln31_6_fu_640_p2 : select_ln31_6_fu_560_p3);

assign select_ln19_17_fu_690_p3 = ((and_ln31_2_fu_578_p2[0:0] === 1'b1) ? icmp_ln33_fu_684_p2 : and_ln31_fu_572_p2);

assign select_ln19_18_fu_803_p3 = ((or_ln31_64_reg_966[0:0] === 1'b1) ? 4'd1 : add_ln19_reg_977);

assign select_ln19_fu_599_p3 = ((or_ln19_4_fu_594_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_263_p4);

assign select_ln27_fu_790_p3 = ((icmp_ln27_fu_784_p2[0:0] === 1'b1) ? 32'd0 : w_sum_4_fu_106);

assign select_ln31_4_fu_535_p3 = ((and_ln39_12_reg_957[0:0] === 1'b1) ? f_fu_525_p2 : select_ln39_10_reg_945);

assign select_ln31_5_fu_770_p3 = ((and_ln39_12_reg_957[0:0] === 1'b1) ? conv_1_bias_q0 : select_ln39_12_fu_764_p3);

assign select_ln31_6_fu_560_p3 = ((and_ln39_12_reg_957[0:0] === 1'b1) ? select_ln39_8_fu_452_p3 : select_ln39_13_fu_508_p3);

assign select_ln31_fu_420_p3 = ((or_ln31_64_fu_414_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wr_0_phi_fu_252_p4);

assign select_ln39_10_fu_382_p3 = ((or_ln39_fu_376_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_f_0_phi_fu_230_p4);

assign select_ln39_11_fu_487_p3 = ((and_ln39_9_reg_932[0:0] === 1'b1) ? c_fu_482_p2 : select_ln39_reg_915);

assign select_ln39_12_fu_764_p3 = ((or_ln39_reg_938[0:0] === 1'b1) ? 32'd3174053544 : conv_1_bias_load_reg_992);

assign select_ln39_13_fu_508_p3 = ((and_ln39_9_reg_932[0:0] === 1'b1) ? select_ln39_8_fu_452_p3 : select_ln39_9_fu_462_p3);

assign select_ln39_8_fu_452_p3 = ((icmp_ln12_reg_908[0:0] === 1'b1) ? r_reg_902 : r_0_reg_181);

assign select_ln39_9_fu_462_p3 = ((icmp_ln12_reg_908[0:0] === 1'b1) ? r_reg_902 : add_ln31_reg_893);

assign select_ln39_fu_332_p3 = ((icmp_ln12_fu_326_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_c_0_phi_fu_208_p4);

assign sub_ln31_1_fu_678_p2 = (zext_ln31_46_fu_662_p1 - zext_ln31_47_fu_674_p1);

assign sub_ln31_fu_634_p2 = (zext_ln31_45_fu_630_p1 - zext_ln31_44_fu_618_p1);

assign tmp_33_fu_622_p3 = {{select_ln19_15_fu_611_p3}, {2'd0}};

assign tmp_34_fu_654_p3 = {{select_ln19_16_fu_646_p3}, {5'd0}};

assign tmp_35_fu_666_p3 = {{select_ln19_16_fu_646_p3}, {2'd0}};

assign tmp_36_fu_825_p4 = {{bitcast_ln38_fu_821_p1[30:23]}};

assign tmp_45_cast_fu_712_p3 = {{add_ln31_7_fu_706_p2}, {5'd0}};

assign tmp_fu_497_p3 = {{grp_fu_872_p3}, {5'd0}};

assign trunc_ln38_fu_835_p1 = bitcast_ln38_fu_821_p1[22:0];

assign wc_fu_798_p2 = (select_ln19_reg_1027 + 2'd1);

assign wr_fu_584_p2 = (select_ln31_reg_971 + 2'd1);

assign xor_ln31_fu_567_p2 = (1'd1 ^ and_ln39_12_reg_957);

assign xor_ln39_2_fu_390_p2 = (icmp_ln15_fu_364_p2 ^ 1'd1);

assign xor_ln39_fu_340_p2 = (icmp_ln12_fu_326_p2 ^ 1'd1);

assign zext_ln19_4_fu_607_p1 = wr_fu_584_p2;

assign zext_ln19_fu_304_p1 = ap_phi_mux_wr_0_phi_fu_252_p4;

assign zext_ln22_fu_698_p1 = select_ln19_fu_599_p3;

assign zext_ln31_10_fu_530_p1 = f_fu_525_p2;

assign zext_ln31_42_fu_541_p1 = select_ln31_4_fu_535_p3;

assign zext_ln31_43_fu_545_p1 = select_ln31_4_fu_535_p3;

assign zext_ln31_44_fu_618_p1 = select_ln19_15_fu_611_p3;

assign zext_ln31_45_fu_630_p1 = tmp_33_fu_622_p3;

assign zext_ln31_46_fu_662_p1 = tmp_34_fu_654_p3;

assign zext_ln31_47_fu_674_p1 = tmp_35_fu_666_p3;

assign zext_ln31_48_fu_726_p1 = add_ln31_8_fu_720_p2;

assign zext_ln31_49_fu_737_p1 = add_ln31_2_fu_731_p2;

assign zext_ln31_50_fu_747_p1 = add_ln31_9_fu_741_p2;

assign zext_ln31_7_fu_702_p1 = select_ln19_fu_599_p3;

assign zext_ln31_fu_299_p1 = ap_phi_mux_f_0_phi_fu_230_p4;

assign zext_ln39_12_fu_504_p1 = tmp_fu_497_p3;

assign zext_ln39_13_fu_555_p1 = add_ln39_6_fu_549_p2;

endmodule //conv_1
