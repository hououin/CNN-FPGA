// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cnn,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.818500,HLS_SYN_LAT=11395895,HLS_SYN_TPT=none,HLS_SYN_MEM=203,HLS_SYN_DSP=28,HLS_SYN_FF=6943,HLS_SYN_LUT=9440,HLS_VERSION=2020_1}" *)

module cnn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] flat_array_address0;
reg    flat_array_ce0;
reg    flat_array_we0;
wire   [31:0] flat_array_q0;
reg   [14:0] conv_1_out_address0;
reg    conv_1_out_ce0;
reg    conv_1_out_we0;
wire   [31:0] conv_1_out_q0;
reg   [12:0] max_pool_1_out_address0;
reg    max_pool_1_out_ce0;
reg    max_pool_1_out_we0;
wire   [31:0] max_pool_1_out_q0;
reg    max_pool_1_out_ce1;
wire   [31:0] max_pool_1_out_q1;
reg   [12:0] conv_2_out_address0;
reg    conv_2_out_ce0;
reg    conv_2_out_we0;
wire   [31:0] conv_2_out_q0;
reg   [10:0] max_pool_2_out_address0;
reg    max_pool_2_out_ce0;
reg    max_pool_2_out_we0;
wire   [31:0] max_pool_2_out_q0;
wire    grp_conv_2_fu_114_ap_start;
wire    grp_conv_2_fu_114_ap_done;
wire    grp_conv_2_fu_114_ap_idle;
wire    grp_conv_2_fu_114_ap_ready;
wire   [12:0] grp_conv_2_fu_114_input_r_address0;
wire    grp_conv_2_fu_114_input_r_ce0;
wire   [12:0] grp_conv_2_fu_114_input_r_address1;
wire    grp_conv_2_fu_114_input_r_ce1;
wire   [12:0] grp_conv_2_fu_114_conv_out_address0;
wire    grp_conv_2_fu_114_conv_out_ce0;
wire    grp_conv_2_fu_114_conv_out_we0;
wire   [31:0] grp_conv_2_fu_114_conv_out_d0;
wire    grp_dense_fu_186_ap_start;
wire    grp_dense_fu_186_ap_done;
wire    grp_dense_fu_186_ap_idle;
wire    grp_dense_fu_186_ap_ready;
wire   [3:0] grp_dense_fu_186_prediction_address0;
wire    grp_dense_fu_186_prediction_ce0;
wire    grp_dense_fu_186_prediction_we0;
wire   [31:0] grp_dense_fu_186_prediction_d0;
wire   [10:0] grp_dense_fu_186_flat_array_address0;
wire    grp_dense_fu_186_flat_array_ce0;
wire    grp_conv_1_fu_196_ap_start;
wire    grp_conv_1_fu_196_ap_done;
wire    grp_conv_1_fu_196_ap_idle;
wire    grp_conv_1_fu_196_ap_ready;
wire   [9:0] grp_conv_1_fu_196_input_r_address0;
wire    grp_conv_1_fu_196_input_r_ce0;
wire   [14:0] grp_conv_1_fu_196_conv_out_address0;
wire    grp_conv_1_fu_196_conv_out_ce0;
wire    grp_conv_1_fu_196_conv_out_we0;
wire   [31:0] grp_conv_1_fu_196_conv_out_d0;
wire    grp_max_pool_1_fu_208_ap_start;
wire    grp_max_pool_1_fu_208_ap_done;
wire    grp_max_pool_1_fu_208_ap_idle;
wire    grp_max_pool_1_fu_208_ap_ready;
wire   [14:0] grp_max_pool_1_fu_208_conv_out_address0;
wire    grp_max_pool_1_fu_208_conv_out_ce0;
wire   [12:0] grp_max_pool_1_fu_208_max_pool_out_address0;
wire    grp_max_pool_1_fu_208_max_pool_out_ce0;
wire    grp_max_pool_1_fu_208_max_pool_out_we0;
wire   [31:0] grp_max_pool_1_fu_208_max_pool_out_d0;
wire    grp_max_pool_2_fu_214_ap_start;
wire    grp_max_pool_2_fu_214_ap_done;
wire    grp_max_pool_2_fu_214_ap_idle;
wire    grp_max_pool_2_fu_214_ap_ready;
wire   [12:0] grp_max_pool_2_fu_214_conv_out_address0;
wire    grp_max_pool_2_fu_214_conv_out_ce0;
wire   [10:0] grp_max_pool_2_fu_214_max_pool_out_address0;
wire    grp_max_pool_2_fu_214_max_pool_out_ce0;
wire    grp_max_pool_2_fu_214_max_pool_out_we0;
wire   [31:0] grp_max_pool_2_fu_214_max_pool_out_d0;
wire    grp_flat_fu_220_ap_start;
wire    grp_flat_fu_220_ap_done;
wire    grp_flat_fu_220_ap_idle;
wire    grp_flat_fu_220_ap_ready;
wire   [10:0] grp_flat_fu_220_max_pool_out_address0;
wire    grp_flat_fu_220_max_pool_out_ce0;
wire   [10:0] grp_flat_fu_220_flat_array_address0;
wire    grp_flat_fu_220_flat_array_ce0;
wire    grp_flat_fu_220_flat_array_we0;
wire   [31:0] grp_flat_fu_220_flat_array_d0;
reg    grp_conv_2_fu_114_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_dense_fu_186_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_conv_1_fu_196_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_max_pool_1_fu_208_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_max_pool_2_fu_214_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_flat_fu_220_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_conv_2_fu_114_ap_start_reg = 1'b0;
#0 grp_dense_fu_186_ap_start_reg = 1'b0;
#0 grp_conv_1_fu_196_ap_start_reg = 1'b0;
#0 grp_max_pool_1_fu_208_ap_start_reg = 1'b0;
#0 grp_max_pool_2_fu_214_ap_start_reg = 1'b0;
#0 grp_flat_fu_220_ap_start_reg = 1'b0;
end

cnn_flat_array #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
flat_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(flat_array_address0),
    .ce0(flat_array_ce0),
    .we0(flat_array_we0),
    .d0(grp_flat_fu_220_flat_array_d0),
    .q0(flat_array_q0)
);

cnn_conv_1_out #(
    .DataWidth( 32 ),
    .AddressRange( 21632 ),
    .AddressWidth( 15 ))
conv_1_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_out_address0),
    .ce0(conv_1_out_ce0),
    .we0(conv_1_out_we0),
    .d0(grp_conv_1_fu_196_conv_out_d0),
    .q0(conv_1_out_q0)
);

cnn_max_pool_1_out #(
    .DataWidth( 32 ),
    .AddressRange( 5408 ),
    .AddressWidth( 13 ))
max_pool_1_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(max_pool_1_out_address0),
    .ce0(max_pool_1_out_ce0),
    .we0(max_pool_1_out_we0),
    .d0(grp_max_pool_1_fu_208_max_pool_out_d0),
    .q0(max_pool_1_out_q0),
    .address1(grp_conv_2_fu_114_input_r_address1),
    .ce1(max_pool_1_out_ce1),
    .q1(max_pool_1_out_q1)
);

cnn_conv_2_out #(
    .DataWidth( 32 ),
    .AddressRange( 7744 ),
    .AddressWidth( 13 ))
conv_2_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_out_address0),
    .ce0(conv_2_out_ce0),
    .we0(conv_2_out_we0),
    .d0(grp_conv_2_fu_114_conv_out_d0),
    .q0(conv_2_out_q0)
);

cnn_max_pool_2_out #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
max_pool_2_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(max_pool_2_out_address0),
    .ce0(max_pool_2_out_ce0),
    .we0(max_pool_2_out_we0),
    .d0(grp_max_pool_2_fu_214_max_pool_out_d0),
    .q0(max_pool_2_out_q0)
);

conv_2 grp_conv_2_fu_114(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv_2_fu_114_ap_start),
    .ap_done(grp_conv_2_fu_114_ap_done),
    .ap_idle(grp_conv_2_fu_114_ap_idle),
    .ap_ready(grp_conv_2_fu_114_ap_ready),
    .input_r_address0(grp_conv_2_fu_114_input_r_address0),
    .input_r_ce0(grp_conv_2_fu_114_input_r_ce0),
    .input_r_q0(max_pool_1_out_q0),
    .input_r_address1(grp_conv_2_fu_114_input_r_address1),
    .input_r_ce1(grp_conv_2_fu_114_input_r_ce1),
    .input_r_q1(max_pool_1_out_q1),
    .conv_out_address0(grp_conv_2_fu_114_conv_out_address0),
    .conv_out_ce0(grp_conv_2_fu_114_conv_out_ce0),
    .conv_out_we0(grp_conv_2_fu_114_conv_out_we0),
    .conv_out_d0(grp_conv_2_fu_114_conv_out_d0)
);

dense grp_dense_fu_186(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_fu_186_ap_start),
    .ap_done(grp_dense_fu_186_ap_done),
    .ap_idle(grp_dense_fu_186_ap_idle),
    .ap_ready(grp_dense_fu_186_ap_ready),
    .prediction_address0(grp_dense_fu_186_prediction_address0),
    .prediction_ce0(grp_dense_fu_186_prediction_ce0),
    .prediction_we0(grp_dense_fu_186_prediction_we0),
    .prediction_d0(grp_dense_fu_186_prediction_d0),
    .flat_array_address0(grp_dense_fu_186_flat_array_address0),
    .flat_array_ce0(grp_dense_fu_186_flat_array_ce0),
    .flat_array_q0(flat_array_q0)
);

conv_1 grp_conv_1_fu_196(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv_1_fu_196_ap_start),
    .ap_done(grp_conv_1_fu_196_ap_done),
    .ap_idle(grp_conv_1_fu_196_ap_idle),
    .ap_ready(grp_conv_1_fu_196_ap_ready),
    .input_r_address0(grp_conv_1_fu_196_input_r_address0),
    .input_r_ce0(grp_conv_1_fu_196_input_r_ce0),
    .input_r_q0(input_r_q0),
    .conv_out_address0(grp_conv_1_fu_196_conv_out_address0),
    .conv_out_ce0(grp_conv_1_fu_196_conv_out_ce0),
    .conv_out_we0(grp_conv_1_fu_196_conv_out_we0),
    .conv_out_d0(grp_conv_1_fu_196_conv_out_d0)
);

max_pool_1 grp_max_pool_1_fu_208(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_pool_1_fu_208_ap_start),
    .ap_done(grp_max_pool_1_fu_208_ap_done),
    .ap_idle(grp_max_pool_1_fu_208_ap_idle),
    .ap_ready(grp_max_pool_1_fu_208_ap_ready),
    .conv_out_address0(grp_max_pool_1_fu_208_conv_out_address0),
    .conv_out_ce0(grp_max_pool_1_fu_208_conv_out_ce0),
    .conv_out_q0(conv_1_out_q0),
    .max_pool_out_address0(grp_max_pool_1_fu_208_max_pool_out_address0),
    .max_pool_out_ce0(grp_max_pool_1_fu_208_max_pool_out_ce0),
    .max_pool_out_we0(grp_max_pool_1_fu_208_max_pool_out_we0),
    .max_pool_out_d0(grp_max_pool_1_fu_208_max_pool_out_d0)
);

max_pool_2 grp_max_pool_2_fu_214(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_pool_2_fu_214_ap_start),
    .ap_done(grp_max_pool_2_fu_214_ap_done),
    .ap_idle(grp_max_pool_2_fu_214_ap_idle),
    .ap_ready(grp_max_pool_2_fu_214_ap_ready),
    .conv_out_address0(grp_max_pool_2_fu_214_conv_out_address0),
    .conv_out_ce0(grp_max_pool_2_fu_214_conv_out_ce0),
    .conv_out_q0(conv_2_out_q0),
    .max_pool_out_address0(grp_max_pool_2_fu_214_max_pool_out_address0),
    .max_pool_out_ce0(grp_max_pool_2_fu_214_max_pool_out_ce0),
    .max_pool_out_we0(grp_max_pool_2_fu_214_max_pool_out_we0),
    .max_pool_out_d0(grp_max_pool_2_fu_214_max_pool_out_d0)
);

flat grp_flat_fu_220(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_flat_fu_220_ap_start),
    .ap_done(grp_flat_fu_220_ap_done),
    .ap_idle(grp_flat_fu_220_ap_idle),
    .ap_ready(grp_flat_fu_220_ap_ready),
    .max_pool_out_address0(grp_flat_fu_220_max_pool_out_address0),
    .max_pool_out_ce0(grp_flat_fu_220_max_pool_out_ce0),
    .max_pool_out_q0(max_pool_2_out_q0),
    .flat_array_address0(grp_flat_fu_220_flat_array_address0),
    .flat_array_ce0(grp_flat_fu_220_flat_array_ce0),
    .flat_array_we0(grp_flat_fu_220_flat_array_we0),
    .flat_array_d0(grp_flat_fu_220_flat_array_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv_1_fu_196_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_conv_1_fu_196_ap_start_reg <= 1'b1;
        end else if ((grp_conv_1_fu_196_ap_ready == 1'b1)) begin
            grp_conv_1_fu_196_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv_2_fu_114_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_conv_2_fu_114_ap_start_reg <= 1'b1;
        end else if ((grp_conv_2_fu_114_ap_ready == 1'b1)) begin
            grp_conv_2_fu_114_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_fu_186_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_dense_fu_186_ap_start_reg <= 1'b1;
        end else if ((grp_dense_fu_186_ap_ready == 1'b1)) begin
            grp_dense_fu_186_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_flat_fu_220_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_flat_fu_220_ap_start_reg <= 1'b1;
        end else if ((grp_flat_fu_220_ap_ready == 1'b1)) begin
            grp_flat_fu_220_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_pool_1_fu_208_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_max_pool_1_fu_208_ap_start_reg <= 1'b1;
        end else if ((grp_max_pool_1_fu_208_ap_ready == 1'b1)) begin
            grp_max_pool_1_fu_208_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_pool_2_fu_214_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_max_pool_2_fu_214_ap_start_reg <= 1'b1;
        end else if ((grp_max_pool_2_fu_214_ap_ready == 1'b1)) begin
            grp_max_pool_2_fu_214_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_dense_fu_186_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_dense_fu_186_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_1_out_address0 = grp_max_pool_1_fu_208_conv_out_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_out_address0 = grp_conv_1_fu_196_conv_out_address0;
    end else begin
        conv_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_1_out_ce0 = grp_max_pool_1_fu_208_conv_out_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_out_ce0 = grp_conv_1_fu_196_conv_out_ce0;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_out_we0 = grp_conv_1_fu_196_conv_out_we0;
    end else begin
        conv_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_2_out_address0 = grp_max_pool_2_fu_214_conv_out_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_2_out_address0 = grp_conv_2_fu_114_conv_out_address0;
    end else begin
        conv_2_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_2_out_ce0 = grp_max_pool_2_fu_214_conv_out_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_2_out_ce0 = grp_conv_2_fu_114_conv_out_ce0;
    end else begin
        conv_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_2_out_we0 = grp_conv_2_fu_114_conv_out_we0;
    end else begin
        conv_2_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        flat_array_address0 = grp_flat_fu_220_flat_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        flat_array_address0 = grp_dense_fu_186_flat_array_address0;
    end else begin
        flat_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        flat_array_ce0 = grp_flat_fu_220_flat_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        flat_array_ce0 = grp_dense_fu_186_flat_array_ce0;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        flat_array_we0 = grp_flat_fu_220_flat_array_we0;
    end else begin
        flat_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_address0 = grp_max_pool_1_fu_208_max_pool_out_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        max_pool_1_out_address0 = grp_conv_2_fu_114_input_r_address0;
    end else begin
        max_pool_1_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_ce0 = grp_max_pool_1_fu_208_max_pool_out_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        max_pool_1_out_ce0 = grp_conv_2_fu_114_input_r_ce0;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_pool_1_out_ce1 = grp_conv_2_fu_114_input_r_ce1;
    end else begin
        max_pool_1_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_1_out_we0 = grp_max_pool_1_fu_208_max_pool_out_we0;
    end else begin
        max_pool_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        max_pool_2_out_address0 = grp_flat_fu_220_max_pool_out_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        max_pool_2_out_address0 = grp_max_pool_2_fu_214_max_pool_out_address0;
    end else begin
        max_pool_2_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        max_pool_2_out_ce0 = grp_flat_fu_220_max_pool_out_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        max_pool_2_out_ce0 = grp_max_pool_2_fu_214_max_pool_out_ce0;
    end else begin
        max_pool_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_pool_2_out_we0 = grp_max_pool_2_fu_214_max_pool_out_we0;
    end else begin
        max_pool_2_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_conv_1_fu_196_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_max_pool_1_fu_208_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_conv_2_fu_114_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_max_pool_2_fu_214_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_flat_fu_220_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_dense_fu_186_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_conv_1_fu_196_ap_start = grp_conv_1_fu_196_ap_start_reg;

assign grp_conv_2_fu_114_ap_start = grp_conv_2_fu_114_ap_start_reg;

assign grp_dense_fu_186_ap_start = grp_dense_fu_186_ap_start_reg;

assign grp_flat_fu_220_ap_start = grp_flat_fu_220_ap_start_reg;

assign grp_max_pool_1_fu_208_ap_start = grp_max_pool_1_fu_208_ap_start_reg;

assign grp_max_pool_2_fu_214_ap_start = grp_max_pool_2_fu_214_ap_start_reg;

assign input_r_address0 = grp_conv_1_fu_196_input_r_address0;

assign input_r_ce0 = grp_conv_1_fu_196_input_r_ce0;

assign prediction_address0 = grp_dense_fu_186_prediction_address0;

assign prediction_ce0 = grp_dense_fu_186_prediction_ce0;

assign prediction_d0 = grp_dense_fu_186_prediction_d0;

assign prediction_we0 = grp_dense_fu_186_prediction_we0;

endmodule //cnn
