-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_ce0 : OUT STD_LOGIC;
    prediction_we0 : OUT STD_LOGIC;
    prediction_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.818500,HLS_SYN_LAT=11395895,HLS_SYN_TPT=none,HLS_SYN_MEM=203,HLS_SYN_DSP=28,HLS_SYN_FF=6943,HLS_SYN_LUT=9440,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal flat_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal flat_array_ce0 : STD_LOGIC;
    signal flat_array_we0 : STD_LOGIC;
    signal flat_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_out_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal conv_1_out_ce0 : STD_LOGIC;
    signal conv_1_out_we0 : STD_LOGIC;
    signal conv_1_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal max_pool_1_out_ce0 : STD_LOGIC;
    signal max_pool_1_out_we0 : STD_LOGIC;
    signal max_pool_1_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_ce1 : STD_LOGIC;
    signal max_pool_1_out_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_out_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv_2_out_ce0 : STD_LOGIC;
    signal conv_2_out_we0 : STD_LOGIC;
    signal conv_2_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_2_out_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal max_pool_2_out_ce0 : STD_LOGIC;
    signal max_pool_2_out_we0 : STD_LOGIC;
    signal max_pool_2_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_2_fu_114_ap_start : STD_LOGIC;
    signal grp_conv_2_fu_114_ap_done : STD_LOGIC;
    signal grp_conv_2_fu_114_ap_idle : STD_LOGIC;
    signal grp_conv_2_fu_114_ap_ready : STD_LOGIC;
    signal grp_conv_2_fu_114_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv_2_fu_114_input_r_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_114_input_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv_2_fu_114_input_r_ce1 : STD_LOGIC;
    signal grp_conv_2_fu_114_conv_out_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv_2_fu_114_conv_out_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_114_conv_out_we0 : STD_LOGIC;
    signal grp_conv_2_fu_114_conv_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_fu_186_ap_start : STD_LOGIC;
    signal grp_dense_fu_186_ap_done : STD_LOGIC;
    signal grp_dense_fu_186_ap_idle : STD_LOGIC;
    signal grp_dense_fu_186_ap_ready : STD_LOGIC;
    signal grp_dense_fu_186_prediction_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_fu_186_prediction_ce0 : STD_LOGIC;
    signal grp_dense_fu_186_prediction_we0 : STD_LOGIC;
    signal grp_dense_fu_186_prediction_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_fu_186_flat_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_dense_fu_186_flat_array_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_196_ap_start : STD_LOGIC;
    signal grp_conv_1_fu_196_ap_done : STD_LOGIC;
    signal grp_conv_1_fu_196_ap_idle : STD_LOGIC;
    signal grp_conv_1_fu_196_ap_ready : STD_LOGIC;
    signal grp_conv_1_fu_196_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_1_fu_196_input_r_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_196_conv_out_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_conv_1_fu_196_conv_out_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_196_conv_out_we0 : STD_LOGIC;
    signal grp_conv_1_fu_196_conv_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_1_fu_208_ap_start : STD_LOGIC;
    signal grp_max_pool_1_fu_208_ap_done : STD_LOGIC;
    signal grp_max_pool_1_fu_208_ap_idle : STD_LOGIC;
    signal grp_max_pool_1_fu_208_ap_ready : STD_LOGIC;
    signal grp_max_pool_1_fu_208_conv_out_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_max_pool_1_fu_208_conv_out_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_208_max_pool_out_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_max_pool_1_fu_208_max_pool_out_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_208_max_pool_out_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_208_max_pool_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_2_fu_214_ap_start : STD_LOGIC;
    signal grp_max_pool_2_fu_214_ap_done : STD_LOGIC;
    signal grp_max_pool_2_fu_214_ap_idle : STD_LOGIC;
    signal grp_max_pool_2_fu_214_ap_ready : STD_LOGIC;
    signal grp_max_pool_2_fu_214_conv_out_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_max_pool_2_fu_214_conv_out_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_214_max_pool_out_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2_fu_214_max_pool_out_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_214_max_pool_out_we0 : STD_LOGIC;
    signal grp_max_pool_2_fu_214_max_pool_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flat_fu_220_ap_start : STD_LOGIC;
    signal grp_flat_fu_220_ap_done : STD_LOGIC;
    signal grp_flat_fu_220_ap_idle : STD_LOGIC;
    signal grp_flat_fu_220_ap_ready : STD_LOGIC;
    signal grp_flat_fu_220_max_pool_out_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_flat_fu_220_max_pool_out_ce0 : STD_LOGIC;
    signal grp_flat_fu_220_flat_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_flat_fu_220_flat_array_ce0 : STD_LOGIC;
    signal grp_flat_fu_220_flat_array_we0 : STD_LOGIC;
    signal grp_flat_fu_220_flat_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_2_fu_114_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_dense_fu_186_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_conv_1_fu_196_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_max_pool_1_fu_208_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_max_pool_2_fu_214_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_flat_fu_220_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component conv_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        conv_out_ce0 : OUT STD_LOGIC;
        conv_out_we0 : OUT STD_LOGIC;
        conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        prediction_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_ce0 : OUT STD_LOGIC;
        prediction_we0 : OUT STD_LOGIC;
        prediction_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        flat_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        flat_array_ce0 : OUT STD_LOGIC;
        flat_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        conv_out_ce0 : OUT STD_LOGIC;
        conv_out_we0 : OUT STD_LOGIC;
        conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pool_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        conv_out_ce0 : OUT STD_LOGIC;
        conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        max_pool_out_ce0 : OUT STD_LOGIC;
        max_pool_out_we0 : OUT STD_LOGIC;
        max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pool_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        conv_out_ce0 : OUT STD_LOGIC;
        conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        max_pool_out_ce0 : OUT STD_LOGIC;
        max_pool_out_we0 : OUT STD_LOGIC;
        max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component flat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_pool_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        max_pool_out_ce0 : OUT STD_LOGIC;
        max_pool_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        flat_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        flat_array_ce0 : OUT STD_LOGIC;
        flat_array_we0 : OUT STD_LOGIC;
        flat_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_flat_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_conv_1_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_max_pool_1_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_conv_2_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_max_pool_2_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    flat_array_U : component cnn_flat_array
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => flat_array_address0,
        ce0 => flat_array_ce0,
        we0 => flat_array_we0,
        d0 => grp_flat_fu_220_flat_array_d0,
        q0 => flat_array_q0);

    conv_1_out_U : component cnn_conv_1_out
    generic map (
        DataWidth => 32,
        AddressRange => 21632,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_out_address0,
        ce0 => conv_1_out_ce0,
        we0 => conv_1_out_we0,
        d0 => grp_conv_1_fu_196_conv_out_d0,
        q0 => conv_1_out_q0);

    max_pool_1_out_U : component cnn_max_pool_1_out
    generic map (
        DataWidth => 32,
        AddressRange => 5408,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_pool_1_out_address0,
        ce0 => max_pool_1_out_ce0,
        we0 => max_pool_1_out_we0,
        d0 => grp_max_pool_1_fu_208_max_pool_out_d0,
        q0 => max_pool_1_out_q0,
        address1 => grp_conv_2_fu_114_input_r_address1,
        ce1 => max_pool_1_out_ce1,
        q1 => max_pool_1_out_q1);

    conv_2_out_U : component cnn_conv_2_out
    generic map (
        DataWidth => 32,
        AddressRange => 7744,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_out_address0,
        ce0 => conv_2_out_ce0,
        we0 => conv_2_out_we0,
        d0 => grp_conv_2_fu_114_conv_out_d0,
        q0 => conv_2_out_q0);

    max_pool_2_out_U : component cnn_max_pool_2_out
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_pool_2_out_address0,
        ce0 => max_pool_2_out_ce0,
        we0 => max_pool_2_out_we0,
        d0 => grp_max_pool_2_fu_214_max_pool_out_d0,
        q0 => max_pool_2_out_q0);

    grp_conv_2_fu_114 : component conv_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_2_fu_114_ap_start,
        ap_done => grp_conv_2_fu_114_ap_done,
        ap_idle => grp_conv_2_fu_114_ap_idle,
        ap_ready => grp_conv_2_fu_114_ap_ready,
        input_r_address0 => grp_conv_2_fu_114_input_r_address0,
        input_r_ce0 => grp_conv_2_fu_114_input_r_ce0,
        input_r_q0 => max_pool_1_out_q0,
        input_r_address1 => grp_conv_2_fu_114_input_r_address1,
        input_r_ce1 => grp_conv_2_fu_114_input_r_ce1,
        input_r_q1 => max_pool_1_out_q1,
        conv_out_address0 => grp_conv_2_fu_114_conv_out_address0,
        conv_out_ce0 => grp_conv_2_fu_114_conv_out_ce0,
        conv_out_we0 => grp_conv_2_fu_114_conv_out_we0,
        conv_out_d0 => grp_conv_2_fu_114_conv_out_d0);

    grp_dense_fu_186 : component dense
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_fu_186_ap_start,
        ap_done => grp_dense_fu_186_ap_done,
        ap_idle => grp_dense_fu_186_ap_idle,
        ap_ready => grp_dense_fu_186_ap_ready,
        prediction_address0 => grp_dense_fu_186_prediction_address0,
        prediction_ce0 => grp_dense_fu_186_prediction_ce0,
        prediction_we0 => grp_dense_fu_186_prediction_we0,
        prediction_d0 => grp_dense_fu_186_prediction_d0,
        flat_array_address0 => grp_dense_fu_186_flat_array_address0,
        flat_array_ce0 => grp_dense_fu_186_flat_array_ce0,
        flat_array_q0 => flat_array_q0);

    grp_conv_1_fu_196 : component conv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_1_fu_196_ap_start,
        ap_done => grp_conv_1_fu_196_ap_done,
        ap_idle => grp_conv_1_fu_196_ap_idle,
        ap_ready => grp_conv_1_fu_196_ap_ready,
        input_r_address0 => grp_conv_1_fu_196_input_r_address0,
        input_r_ce0 => grp_conv_1_fu_196_input_r_ce0,
        input_r_q0 => input_r_q0,
        conv_out_address0 => grp_conv_1_fu_196_conv_out_address0,
        conv_out_ce0 => grp_conv_1_fu_196_conv_out_ce0,
        conv_out_we0 => grp_conv_1_fu_196_conv_out_we0,
        conv_out_d0 => grp_conv_1_fu_196_conv_out_d0);

    grp_max_pool_1_fu_208 : component max_pool_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_1_fu_208_ap_start,
        ap_done => grp_max_pool_1_fu_208_ap_done,
        ap_idle => grp_max_pool_1_fu_208_ap_idle,
        ap_ready => grp_max_pool_1_fu_208_ap_ready,
        conv_out_address0 => grp_max_pool_1_fu_208_conv_out_address0,
        conv_out_ce0 => grp_max_pool_1_fu_208_conv_out_ce0,
        conv_out_q0 => conv_1_out_q0,
        max_pool_out_address0 => grp_max_pool_1_fu_208_max_pool_out_address0,
        max_pool_out_ce0 => grp_max_pool_1_fu_208_max_pool_out_ce0,
        max_pool_out_we0 => grp_max_pool_1_fu_208_max_pool_out_we0,
        max_pool_out_d0 => grp_max_pool_1_fu_208_max_pool_out_d0);

    grp_max_pool_2_fu_214 : component max_pool_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_2_fu_214_ap_start,
        ap_done => grp_max_pool_2_fu_214_ap_done,
        ap_idle => grp_max_pool_2_fu_214_ap_idle,
        ap_ready => grp_max_pool_2_fu_214_ap_ready,
        conv_out_address0 => grp_max_pool_2_fu_214_conv_out_address0,
        conv_out_ce0 => grp_max_pool_2_fu_214_conv_out_ce0,
        conv_out_q0 => conv_2_out_q0,
        max_pool_out_address0 => grp_max_pool_2_fu_214_max_pool_out_address0,
        max_pool_out_ce0 => grp_max_pool_2_fu_214_max_pool_out_ce0,
        max_pool_out_we0 => grp_max_pool_2_fu_214_max_pool_out_we0,
        max_pool_out_d0 => grp_max_pool_2_fu_214_max_pool_out_d0);

    grp_flat_fu_220 : component flat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flat_fu_220_ap_start,
        ap_done => grp_flat_fu_220_ap_done,
        ap_idle => grp_flat_fu_220_ap_idle,
        ap_ready => grp_flat_fu_220_ap_ready,
        max_pool_out_address0 => grp_flat_fu_220_max_pool_out_address0,
        max_pool_out_ce0 => grp_flat_fu_220_max_pool_out_ce0,
        max_pool_out_q0 => max_pool_2_out_q0,
        flat_array_address0 => grp_flat_fu_220_flat_array_address0,
        flat_array_ce0 => grp_flat_fu_220_flat_array_ce0,
        flat_array_we0 => grp_flat_fu_220_flat_array_we0,
        flat_array_d0 => grp_flat_fu_220_flat_array_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv_1_fu_196_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_1_fu_196_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_conv_1_fu_196_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_1_fu_196_ap_ready = ap_const_logic_1)) then 
                    grp_conv_1_fu_196_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_2_fu_114_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_2_fu_114_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_conv_2_fu_114_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_2_fu_114_ap_ready = ap_const_logic_1)) then 
                    grp_conv_2_fu_114_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_fu_186_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_fu_186_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_dense_fu_186_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_fu_186_ap_ready = ap_const_logic_1)) then 
                    grp_dense_fu_186_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flat_fu_220_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_flat_fu_220_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_flat_fu_220_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flat_fu_220_ap_ready = ap_const_logic_1)) then 
                    grp_flat_fu_220_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_1_fu_208_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_1_fu_208_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_max_pool_1_fu_208_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_1_fu_208_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_1_fu_208_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_2_fu_214_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_2_fu_214_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_max_pool_2_fu_214_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_2_fu_214_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_2_fu_214_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_conv_2_fu_114_ap_done, grp_dense_fu_186_ap_done, grp_conv_1_fu_196_ap_done, grp_max_pool_1_fu_208_ap_done, grp_max_pool_2_fu_214_ap_done, grp_flat_fu_220_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_conv_1_fu_196_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_max_pool_1_fu_208_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_conv_2_fu_114_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_max_pool_2_fu_214_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_flat_fu_220_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_dense_fu_186_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_dense_fu_186_ap_done, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_dense_fu_186_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dense_fu_186_ap_done, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_dense_fu_186_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_address0_assign_proc : process(grp_conv_1_fu_196_conv_out_address0, grp_max_pool_1_fu_208_conv_out_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_1_out_address0 <= grp_max_pool_1_fu_208_conv_out_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_address0 <= grp_conv_1_fu_196_conv_out_address0;
        else 
            conv_1_out_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_ce0_assign_proc : process(grp_conv_1_fu_196_conv_out_ce0, grp_max_pool_1_fu_208_conv_out_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_1_out_ce0 <= grp_max_pool_1_fu_208_conv_out_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_ce0 <= grp_conv_1_fu_196_conv_out_ce0;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_we0_assign_proc : process(grp_conv_1_fu_196_conv_out_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_we0 <= grp_conv_1_fu_196_conv_out_we0;
        else 
            conv_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_address0_assign_proc : process(grp_conv_2_fu_114_conv_out_address0, grp_max_pool_2_fu_214_conv_out_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_2_out_address0 <= grp_max_pool_2_fu_214_conv_out_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_2_out_address0 <= grp_conv_2_fu_114_conv_out_address0;
        else 
            conv_2_out_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_ce0_assign_proc : process(grp_conv_2_fu_114_conv_out_ce0, grp_max_pool_2_fu_214_conv_out_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_2_out_ce0 <= grp_max_pool_2_fu_214_conv_out_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_2_out_ce0 <= grp_conv_2_fu_114_conv_out_ce0;
        else 
            conv_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_we0_assign_proc : process(grp_conv_2_fu_114_conv_out_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_2_out_we0 <= grp_conv_2_fu_114_conv_out_we0;
        else 
            conv_2_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_address0_assign_proc : process(grp_dense_fu_186_flat_array_address0, grp_flat_fu_220_flat_array_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            flat_array_address0 <= grp_flat_fu_220_flat_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            flat_array_address0 <= grp_dense_fu_186_flat_array_address0;
        else 
            flat_array_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    flat_array_ce0_assign_proc : process(grp_dense_fu_186_flat_array_ce0, grp_flat_fu_220_flat_array_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            flat_array_ce0 <= grp_flat_fu_220_flat_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            flat_array_ce0 <= grp_dense_fu_186_flat_array_ce0;
        else 
            flat_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_we0_assign_proc : process(grp_flat_fu_220_flat_array_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            flat_array_we0 <= grp_flat_fu_220_flat_array_we0;
        else 
            flat_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_1_fu_196_ap_start <= grp_conv_1_fu_196_ap_start_reg;
    grp_conv_2_fu_114_ap_start <= grp_conv_2_fu_114_ap_start_reg;
    grp_dense_fu_186_ap_start <= grp_dense_fu_186_ap_start_reg;
    grp_flat_fu_220_ap_start <= grp_flat_fu_220_ap_start_reg;
    grp_max_pool_1_fu_208_ap_start <= grp_max_pool_1_fu_208_ap_start_reg;
    grp_max_pool_2_fu_214_ap_start <= grp_max_pool_2_fu_214_ap_start_reg;
    input_r_address0 <= grp_conv_1_fu_196_input_r_address0;
    input_r_ce0 <= grp_conv_1_fu_196_input_r_ce0;

    max_pool_1_out_address0_assign_proc : process(grp_conv_2_fu_114_input_r_address0, grp_max_pool_1_fu_208_max_pool_out_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_1_out_address0 <= grp_max_pool_1_fu_208_max_pool_out_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_pool_1_out_address0 <= grp_conv_2_fu_114_input_r_address0;
        else 
            max_pool_1_out_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_ce0_assign_proc : process(grp_conv_2_fu_114_input_r_ce0, grp_max_pool_1_fu_208_max_pool_out_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_1_out_ce0 <= grp_max_pool_1_fu_208_max_pool_out_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_pool_1_out_ce0 <= grp_conv_2_fu_114_input_r_ce0;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_ce1_assign_proc : process(grp_conv_2_fu_114_input_r_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max_pool_1_out_ce1 <= grp_conv_2_fu_114_input_r_ce1;
        else 
            max_pool_1_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_we0_assign_proc : process(grp_max_pool_1_fu_208_max_pool_out_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_1_out_we0 <= grp_max_pool_1_fu_208_max_pool_out_we0;
        else 
            max_pool_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_address0_assign_proc : process(grp_max_pool_2_fu_214_max_pool_out_address0, grp_flat_fu_220_max_pool_out_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_2_out_address0 <= grp_flat_fu_220_max_pool_out_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_pool_2_out_address0 <= grp_max_pool_2_fu_214_max_pool_out_address0;
        else 
            max_pool_2_out_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_ce0_assign_proc : process(grp_max_pool_2_fu_214_max_pool_out_ce0, grp_flat_fu_220_max_pool_out_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            max_pool_2_out_ce0 <= grp_flat_fu_220_max_pool_out_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_pool_2_out_ce0 <= grp_max_pool_2_fu_214_max_pool_out_ce0;
        else 
            max_pool_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_we0_assign_proc : process(grp_max_pool_2_fu_214_max_pool_out_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_pool_2_out_we0 <= grp_max_pool_2_fu_214_max_pool_out_we0;
        else 
            max_pool_2_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_address0 <= grp_dense_fu_186_prediction_address0;
    prediction_ce0 <= grp_dense_fu_186_prediction_ce0;
    prediction_d0 <= grp_dense_fu_186_prediction_d0;
    prediction_we0 <= grp_dense_fu_186_prediction_we0;
end behav;
