

================================================================
== Vivado HLS Report for 'flat'
================================================================
* Date:           Tue Jul 11 11:48:03 2023

* Version:        2020.1 (Build 2897737 on Wed May 27 20:21:37 MDT 2020)
* Project:        cnn
* Solution:       solution2
* Product family: virtex7
* Target device:  xc7vx485t-ffg1157-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 6.429 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+------+------+---------+
    |  Latency (cycles) |   Latency (absolute)  |   Interval  | Pipeline|
    |   min   |   max   |    min    |    max    |  min |  max |   Type  |
    +---------+---------+-----------+-----------+------+------+---------+
    |     1603|     1603| 16.030 us | 16.030 us |  1603|  1603|   none  |
    +---------+---------+-----------+-----------+------+------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                                 |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |            Loop Name            |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Row_Loop_Col_Loop_Filter_Loop  |     1601|     1601|         3|          1|          1|  1600|    yes   |
        +---------------------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 2 3 4 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 5 3 
3 --> 4 
4 --> 2 
5 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.18>
ST_1 : Operation 6 [1/1] (1.18ns)   --->   "br label %1" [flat.cpp:6]   --->   Operation 6 'br' <Predicate = true> <Delay = 1.18>

State 2 <SV = 1> <Delay = 5.81>
ST_2 : Operation 7 [1/1] (0.00ns)   --->   "%indvar_flatten17 = phi i11 [ 0, %0 ], [ %add_ln6, %Filter_Loop ]" [flat.cpp:6]   --->   Operation 7 'phi' 'indvar_flatten17' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 8 [1/1] (0.00ns)   --->   "%r_0 = phi i3 [ 0, %0 ], [ %select_ln15_11, %Filter_Loop ]" [flat.cpp:15]   --->   Operation 8 'phi' 'r_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 9 [1/1] (0.00ns)   --->   "%i_0 = phi i11 [ 0, %0 ], [ %select_ln6, %Filter_Loop ]" [flat.cpp:6]   --->   Operation 9 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 10 [1/1] (0.00ns)   --->   "%indvar_flatten = phi i10 [ 0, %0 ], [ %select_ln9_1, %Filter_Loop ]" [flat.cpp:9]   --->   Operation 10 'phi' 'indvar_flatten' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 11 [1/1] (0.00ns)   --->   "%i_1 = phi i11 [ 0, %0 ], [ %select_ln9, %Filter_Loop ]" [flat.cpp:9]   --->   Operation 11 'phi' 'i_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 12 [1/1] (0.00ns)   --->   "%c_0 = phi i3 [ 0, %0 ], [ %select_ln15_14, %Filter_Loop ]" [flat.cpp:15]   --->   Operation 12 'phi' 'c_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 13 [1/1] (0.00ns)   --->   "%i_2 = phi i11 [ 0, %0 ], [ %add_ln15_1, %Filter_Loop ]" [flat.cpp:15]   --->   Operation 13 'phi' 'i_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 14 [1/1] (0.00ns)   --->   "%f_0 = phi i7 [ 0, %0 ], [ %f, %Filter_Loop ]"   --->   Operation 14 'phi' 'f_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 15 [1/1] (1.23ns)   --->   "%icmp_ln6 = icmp eq i11 %indvar_flatten17, -448" [flat.cpp:6]   --->   Operation 15 'icmp' 'icmp_ln6' <Predicate = true> <Delay = 1.23> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.12> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 16 [1/1] (1.46ns)   --->   "%add_ln6 = add i11 %indvar_flatten17, 1" [flat.cpp:6]   --->   Operation 16 'add' 'add_ln6' <Predicate = true> <Delay = 1.46> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "br i1 %icmp_ln6, label %2, label %Filter_Loop" [flat.cpp:6]   --->   Operation 17 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (1.18ns)   --->   "%r = add i3 %r_0, 1" [flat.cpp:6]   --->   Operation 18 'add' 'r' <Predicate = (!icmp_ln6)> <Delay = 1.18> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 19 [1/1] (1.46ns)   --->   "%add_ln15 = add i11 %i_0, 320" [flat.cpp:15]   --->   Operation 19 'add' 'add_ln15' <Predicate = (!icmp_ln6)> <Delay = 1.46> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 20 [1/1] (1.19ns)   --->   "%icmp_ln9 = icmp eq i10 %indvar_flatten, 320" [flat.cpp:9]   --->   Operation 20 'icmp' 'icmp_ln9' <Predicate = (!icmp_ln6)> <Delay = 1.19> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.12> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 21 [1/1] (0.71ns)   --->   "%select_ln15 = select i1 %icmp_ln9, i11 %add_ln15, i11 %i_1" [flat.cpp:15]   --->   Operation 21 'select' 'select_ln15' <Predicate = (!icmp_ln6)> <Delay = 0.71> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 22 [1/1] (0.65ns)   --->   "%select_ln15_9 = select i1 %icmp_ln9, i3 0, i3 %c_0" [flat.cpp:15]   --->   Operation 22 'select' 'select_ln15_9' <Predicate = (!icmp_ln6)> <Delay = 0.65> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 23 [1/1] (0.00ns) (grouped into LUT with out node select_ln15_12)   --->   "%select_ln15_10 = select i1 %icmp_ln9, i11 %add_ln15, i11 %i_2" [flat.cpp:15]   --->   Operation 23 'select' 'select_ln15_10' <Predicate = (!icmp_ln6)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 24 [1/1] (0.65ns)   --->   "%select_ln15_11 = select i1 %icmp_ln9, i3 %r, i3 %r_0" [flat.cpp:15]   --->   Operation 24 'select' 'select_ln15_11' <Predicate = (!icmp_ln6)> <Delay = 0.65> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 25 [1/1] (0.00ns) (grouped into LUT with out node and_ln15)   --->   "%xor_ln15 = xor i1 %icmp_ln9, true" [flat.cpp:15]   --->   Operation 25 'xor' 'xor_ln15' <Predicate = (!icmp_ln6)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (1.12ns)   --->   "%icmp_ln12 = icmp eq i7 %f_0, -64" [flat.cpp:12]   --->   Operation 26 'icmp' 'icmp_ln12' <Predicate = (!icmp_ln6)> <Delay = 1.12> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.12> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 27 [1/1] (0.61ns) (out node of the LUT)   --->   "%and_ln15 = and i1 %icmp_ln12, %xor_ln15" [flat.cpp:15]   --->   Operation 27 'and' 'and_ln15' <Predicate = (!icmp_ln6)> <Delay = 0.61> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 28 [1/1] (0.71ns)   --->   "%select_ln6 = select i1 %icmp_ln9, i11 %add_ln15, i11 %i_0" [flat.cpp:6]   --->   Operation 28 'select' 'select_ln6' <Predicate = (!icmp_ln6)> <Delay = 0.71> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 29 [1/1] (1.18ns)   --->   "%c = add i3 %select_ln15_9, 1" [flat.cpp:9]   --->   Operation 29 'add' 'c' <Predicate = (!icmp_ln6)> <Delay = 1.18> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 30 [1/1] (1.46ns)   --->   "%add_ln15_3 = add i11 %select_ln15, 64" [flat.cpp:15]   --->   Operation 30 'add' 'add_ln15_3' <Predicate = (!icmp_ln6)> <Delay = 1.46> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 31 [1/1] (0.71ns) (out node of the LUT)   --->   "%select_ln15_12 = select i1 %and_ln15, i11 %add_ln15_3, i11 %select_ln15_10" [flat.cpp:15]   --->   Operation 31 'select' 'select_ln15_12' <Predicate = (!icmp_ln6)> <Delay = 0.71> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 32 [1/1] (0.00ns) (grouped into LUT with out node select_ln15_13)   --->   "%or_ln15 = or i1 %and_ln15, %icmp_ln9" [flat.cpp:15]   --->   Operation 32 'or' 'or_ln15' <Predicate = (!icmp_ln6)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.61> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 33 [1/1] (0.66ns) (out node of the LUT)   --->   "%select_ln15_13 = select i1 %or_ln15, i7 0, i7 %f_0" [flat.cpp:15]   --->   Operation 33 'select' 'select_ln15_13' <Predicate = (!icmp_ln6)> <Delay = 0.66> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 34 [1/1] (0.65ns)   --->   "%select_ln15_14 = select i1 %and_ln15, i3 %c, i3 %select_ln15_9" [flat.cpp:15]   --->   Operation 34 'select' 'select_ln15_14' <Predicate = (!icmp_ln6)> <Delay = 0.65> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 35 [1/1] (0.71ns)   --->   "%select_ln9 = select i1 %and_ln15, i11 %add_ln15_3, i11 %select_ln15" [flat.cpp:9]   --->   Operation 35 'select' 'select_ln9' <Predicate = (!icmp_ln6)> <Delay = 0.71> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 36 [1/1] (1.46ns)   --->   "%add_ln15_1 = add i11 %select_ln15_12, 1" [flat.cpp:15]   --->   Operation 36 'add' 'add_ln15_1' <Predicate = (!icmp_ln6)> <Delay = 1.46> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 37 [1/1] (1.38ns)   --->   "%f = add i7 %select_ln15_13, 1" [flat.cpp:12]   --->   Operation 37 'add' 'f' <Predicate = (!icmp_ln6)> <Delay = 1.38> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 38 [1/1] (1.44ns)   --->   "%add_ln9 = add i10 %indvar_flatten, 1" [flat.cpp:9]   --->   Operation 38 'add' 'add_ln9' <Predicate = (!icmp_ln6)> <Delay = 1.44> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 39 [1/1] (0.66ns)   --->   "%select_ln9_1 = select i1 %icmp_ln9, i10 1, i10 %add_ln9" [flat.cpp:9]   --->   Operation 39 'select' 'select_ln9_1' <Predicate = (!icmp_ln6)> <Delay = 0.66> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.66> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 3 <SV = 2> <Delay = 6.42>
ST_3 : Operation 40 [1/1] (0.00ns)   --->   "%zext_ln14 = zext i3 %select_ln15_11 to i6" [flat.cpp:14]   --->   Operation 40 'zext' 'zext_ln14' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_3 : Operation 41 [1/1] (0.00ns)   --->   "%tmp = call i5 @_ssdm_op_BitConcatenate.i5.i3.i2(i3 %select_ln15_11, i2 0)" [flat.cpp:14]   --->   Operation 41 'bitconcatenate' 'tmp' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_3 : Operation 42 [1/1] (0.00ns)   --->   "%zext_ln14_1 = zext i5 %tmp to i6" [flat.cpp:14]   --->   Operation 42 'zext' 'zext_ln14_1' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_3 : Operation 43 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln14 = add i6 %zext_ln14, %zext_ln14_1" [flat.cpp:14]   --->   Operation 43 'add' 'add_ln14' <Predicate = (!icmp_ln6)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.13> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 44 [1/1] (0.00ns)   --->   "%zext_ln15 = zext i3 %select_ln15_14 to i6" [flat.cpp:15]   --->   Operation 44 'zext' 'zext_ln15' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_3 : Operation 45 [1/1] (2.27ns) (root node of TernaryAdder)   --->   "%add_ln14_1 = add i6 %add_ln14, %zext_ln15" [flat.cpp:14]   --->   Operation 45 'add' 'add_ln14_1' <Predicate = (!icmp_ln6)> <Delay = 2.27> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.13> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 46 [1/1] (0.00ns)   --->   "%tmp_16_cast = call i12 @_ssdm_op_BitConcatenate.i12.i6.i6(i6 %add_ln14_1, i6 0)" [flat.cpp:9]   --->   Operation 46 'bitconcatenate' 'tmp_16_cast' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (0.00ns)   --->   "%zext_ln14_2 = zext i7 %select_ln15_13 to i12" [flat.cpp:14]   --->   Operation 47 'zext' 'zext_ln14_2' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_3 : Operation 48 [1/1] (1.49ns)   --->   "%add_ln14_2 = add i12 %tmp_16_cast, %zext_ln14_2" [flat.cpp:14]   --->   Operation 48 'add' 'add_ln14_2' <Predicate = (!icmp_ln6)> <Delay = 1.49> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.44> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 49 [1/1] (0.00ns)   --->   "%zext_ln14_4 = zext i12 %add_ln14_2 to i64" [flat.cpp:14]   --->   Operation 49 'zext' 'zext_ln14_4' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_3 : Operation 50 [1/1] (0.00ns)   --->   "%max_pool_out_addr = getelementptr [1600 x float]* %max_pool_out, i64 0, i64 %zext_ln14_4" [flat.cpp:14]   --->   Operation 50 'getelementptr' 'max_pool_out_addr' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_3 : Operation 51 [2/2] (2.66ns)   --->   "%max_pool_out_load = load float* %max_pool_out_addr, align 4" [flat.cpp:14]   --->   Operation 51 'load' 'max_pool_out_load' <Predicate = (!icmp_ln6)> <Delay = 2.66> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.66> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1600> <RAM>

State 4 <SV = 3> <Delay = 5.32>
ST_4 : Operation 52 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([30 x i8]* @Row_Loop_Col_Loop_Fi)"   --->   Operation 52 'specloopname' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_4 : Operation 53 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1600, i64 1600, i64 1600)"   --->   Operation 53 'speclooptripcount' 'empty' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_4 : Operation 54 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([21 x i8]* @Col_Loop_Filter_Loop)"   --->   Operation 54 'specloopname' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_4 : Operation 55 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([12 x i8]* @p_str225) nounwind" [flat.cpp:13]   --->   Operation 55 'specloopname' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_4 : Operation 56 [1/1] (0.00ns)   --->   "%tmp_9 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str225)" [flat.cpp:13]   --->   Operation 56 'specregionbegin' 'tmp_9' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_4 : Operation 57 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str326) nounwind" [flat.cpp:14]   --->   Operation 57 'specpipeline' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_4 : Operation 58 [1/2] (2.66ns)   --->   "%max_pool_out_load = load float* %max_pool_out_addr, align 4" [flat.cpp:14]   --->   Operation 58 'load' 'max_pool_out_load' <Predicate = (!icmp_ln6)> <Delay = 2.66> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.66> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1600> <RAM>
ST_4 : Operation 59 [1/1] (0.00ns)   --->   "%zext_ln14_3 = zext i11 %select_ln15_12 to i64" [flat.cpp:14]   --->   Operation 59 'zext' 'zext_ln14_3' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_4 : Operation 60 [1/1] (0.00ns)   --->   "%flat_array_addr = getelementptr [1600 x float]* %flat_array, i64 0, i64 %zext_ln14_3" [flat.cpp:14]   --->   Operation 60 'getelementptr' 'flat_array_addr' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_4 : Operation 61 [1/1] (2.66ns)   --->   "store float %max_pool_out_load, float* %flat_array_addr, align 4" [flat.cpp:14]   --->   Operation 61 'store' <Predicate = (!icmp_ln6)> <Delay = 2.66> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.66> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1600> <RAM>
ST_4 : Operation 62 [1/1] (0.00ns)   --->   "%empty_7 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str225, i32 %tmp_9)" [flat.cpp:16]   --->   Operation 62 'specregionend' 'empty_7' <Predicate = (!icmp_ln6)> <Delay = 0.00>
ST_4 : Operation 63 [1/1] (0.00ns)   --->   "br label %1"   --->   Operation 63 'br' <Predicate = (!icmp_ln6)> <Delay = 0.00>

State 5 <SV = 2> <Delay = 0.00>
ST_5 : Operation 64 [1/1] (0.00ns)   --->   "ret void" [flat.cpp:19]   --->   Operation 64 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.18ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('indvar_flatten17', flat.cpp:6) with incoming values : ('add_ln6', flat.cpp:6) [5]  (1.18 ns)

 <State 2>: 5.82ns
The critical path consists of the following:
	'phi' operation ('i_0', flat.cpp:6) with incoming values : ('select_ln6', flat.cpp:6) [7]  (0 ns)
	'add' operation ('add_ln15', flat.cpp:15) [18]  (1.47 ns)
	'select' operation ('select_ln15', flat.cpp:15) [22]  (0.71 ns)
	'add' operation ('add_ln15_3', flat.cpp:15) [35]  (1.47 ns)
	'select' operation ('select_ln15_12', flat.cpp:15) [37]  (0.71 ns)
	'add' operation ('add_ln15_1', flat.cpp:15) [56]  (1.47 ns)

 <State 3>: 6.43ns
The critical path consists of the following:
	'add' operation ('add_ln14', flat.cpp:14) [29]  (0 ns)
	'add' operation ('add_ln14_1', flat.cpp:14) [42]  (2.27 ns)
	'add' operation ('add_ln14_2', flat.cpp:14) [49]  (1.49 ns)
	'getelementptr' operation ('max_pool_out_addr', flat.cpp:14) [51]  (0 ns)
	'load' operation ('max_pool_out_load', flat.cpp:14) on array 'max_pool_out' [52]  (2.66 ns)

 <State 4>: 5.33ns
The critical path consists of the following:
	'load' operation ('max_pool_out_load', flat.cpp:14) on array 'max_pool_out' [52]  (2.66 ns)
	'store' operation ('store_ln14', flat.cpp:14) of variable 'max_pool_out_load', flat.cpp:14 on array 'flat_array' [55]  (2.66 ns)

 <State 5>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
