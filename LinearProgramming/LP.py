import pulp


prob = pulp.LpProblem("CNN_Optimization", pulp.LpMinimize)


L = 7  # number of cnn layers

# float point
S = [12, 7, 8, 7, 3, 3, 4]  # number of strategies per layer

# number of clock cycles
T = [[309661, 3422, 20320, 146026, 186577, 12211, 8163, 4109, 2073, 6802, 2759, 10181],
     [18421, 2034, 4060, 9127, 1021, 551, 84],
     [792089, 52470, 9900, 6038, 26335, 5061, 6039, 13764],
     [7393, 805, 1603, 406, 244, 165, 86],
     [140351, 11411, 60008],
     [10711, 934, 4510],
     [2414, 405, 1162, 982]]

# resources (BRAM, LUT, FF, DSP)
R_BRAM = [[1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 14, 4],
          [0, 0, 0, 0, 0, 0, 0],
          [2, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0],
          [65, 65, 65],
          [4, 0, 4],
          [1, 0, 1, 1]]

R_DSP = [[5, 58, 11, 6, 6, 18, 26, 48, 95, 31, 73, 21],
         [0, 1, 0, 1, 1, 0, 0],
         [5, 13, 56, 93, 23, 111, 93, 41],
         [0, 0, 0, 0, 0, 0, 0],
         [5, 12, 6],
         [5, 12, 5],
         [14, 161, 14, 14]]

R_FF = [[697, 10944, 2875, 1083, 671, 3552, 5621, 9366, 13909, 6257, 15748, 4305],
        [239, 604, 366, 287, 739, 2679, 6652],
        [743, 9750, 14546, 28404, 17309, 27124, 38499, 19941],
        [230, 504, 325, 733, 1589, 1959, 2815],
        [603, 34535, 776],
        [595, 8863, 786],
        [1493, 16034, 1679, 1869]]

R_LUT = [[1502, 12654, 2989, 1815, 1555, 4395, 7163, 10089, 18671, 7375, 18112, 5234],
         [691, 1502, 1073, 812, 1747, 8995, 17365],
         [1570, 6133, 13439, 29072, 10568, 25776, 36451, 13311],
         [660, 1424, 1030, 1722, 4438, 5132, 6941],
         [1236, 24117, 1374],
         [1216, 5110, 1391],
         [3434, 25320, 3616, 3673]]

# AP_FIX
# S = [12, 6, 7, 7, 3, 4, 5]  # number of strategies per layer
#
# # number of clock cycles
# T = [[123085, 3388, 20285, 52729, 64897, 12174, 4070, 2036, 6767, 1367, 10144, 4071],
#      [14365, 2031, 1018, 156, 551, 81],
#      [267433, 65825, 9691, 1956, 5829, 4852, 988],
#      [5793, 802, 401, 243, 162, 83, 18],
#      [40151, 20002, 4251],
#      [3091, 1502, 40, 451],
#      [975, 646, 367, 256, 176]]
#
# # resources (BRAM, LUT, FF, DSP)
# R_BRAM = [[0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#           [0, 0, 0, 0, 0, 0],
#           [1, 6, 0, 0, 0, 0, 0],
#           [0, 0, 0, 0, 0, 0, 0],
#           [18, 18, 54],
#           [1, 1, 0, 3],
#           [1, 1, 2, 2, 4]]
#
# R_DSP = [[1, 41, 10, 4, 2, 10, 10, 34, 28, 28, 19, 19],
#          [0, 0, 1, 0, 0, 0],
#          [1, 8, 55, 55, 55, 109, 109],
#          [0, 0, 0, 0, 0, 0, 0],
#          [1, 2, 100],
#          [1, 1, 50, 10],
#          [4, 4, 4, 13, 13]]
#
# R_FF = [[401, 3600, 736, 437, 375, 769, 2067, 1861, 1447, 3950, 1149, 2800],
#         [104, 106, 172, 321, 1071, 273],
#         [421, 453, 2753, 12171, 8377, 5888, 23393],
#         [95, 69, 92, 232, 174, 125, 16],
#         [97, 79, 1609],
#         [60, 69, 123, 235],
#         [618, 626, 1829, 1893, 2006]]
#
# R_LUT = [[1808, 15182, 2260, 1959, 1859, 2445, 4245, 8708, 5319, 9709, 3895, 7491],
#          [366, 595, 483, 2070, 2906, 1590],
#          [1871, 2131, 4094, 10630, 13836, 7598, 29937],
#          [347, 567, 442, 1151, 1019, 741, 2750],
#          [219, 267, 1262],
#          [182, 267, 430, 614],
#          [1084, 1172, 2031, 2376, 2400]]


# FPGA resources
R_total_BRAM = 280
R_total_DSP = 220
R_total_FF = 106400
R_total_LUT = 51643

# R_total_BRAM = 240  # 40
# R_total_DSP = 214  # 6
# R_total_FF = 105492  # 908
# R_total_LUT = 49112  # 4088


# define variables
x = pulp.LpVariable.dicts("x", [(i, j) for i in range(L) for j in range(S[i])], cat='Binary')

# objective function
prob += pulp.lpSum([T[i][j] * x[(i, j)] for i in range(L) for j in range(S[i])])

# constrains
for i in range(L):
    prob += pulp.lpSum([x[(i, j)] for j in range(S[i])]) == 1

prob += pulp.lpSum([R_BRAM[i][j] * x[(i, j)] for i in range(L) for j in range(S[i])]) <= R_total_BRAM
prob += pulp.lpSum([R_LUT[i][j] * x[(i, j)] for i in range(L) for j in range(S[i])]) <= R_total_LUT
prob += pulp.lpSum([R_FF[i][j] * x[(i, j)] for i in range(L) for j in range(S[i])]) <= R_total_FF
prob += pulp.lpSum([R_DSP[i][j] * x[(i, j)] for i in range(L) for j in range(S[i])]) <= R_total_DSP


prob.solve()

# results
t, bram, dsp, ff, lut = 0, 0, 0, 0, 0

for i in range(L):
    for j in range(S[i]):
        if pulp.value(x[(i, j)]) == 1:
            t += T[i][j]
            bram += R_BRAM[i][j]
            dsp += R_DSP[i][j]
            ff += R_FF[i][j]
            lut += R_LUT[i][j]
            print(f"Layer {i+1}, Strategy {j}")

print("T", t)
print("BRAM ", bram, bram/R_total_BRAM)
print("DSP ", dsp, dsp/R_total_DSP)
print("FF ", ff, ff/R_total_FF)
print("LUT ", lut, lut/R_total_LUT)




